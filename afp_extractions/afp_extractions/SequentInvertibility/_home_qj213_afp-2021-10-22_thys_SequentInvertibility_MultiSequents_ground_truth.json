{"file_name": "/home/qj213/afp-2021-10-22/thys/SequentInvertibility/MultiSequents.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/SequentInvertibility", "problem_names": ["lemma g3cp_upRules:\nshows \"g3cp \\<subseteq> upRules\"", "lemma g3cp_uc:\nshows \"uniqueConclusion g3cp\"", "lemma principal_means_premiss:\nassumes a: \"rightPrincipal r (A \\<and>* B)\"\nand     b: \"r \\<in> g3cp\"\nshows      \"(\\<Empt> \\<Rightarrow>* \\<LM> A \\<RM>) \\<in> set (fst r)\"", "lemma deriv_to_deriv(*<*)[simp](*>*):\nassumes \"(C,n) \\<in> derivable R\"\nshows \"C \\<in> derivable' R\"", "lemma deriv_to_deriv2:\nassumes \"C \\<in> derivable' R\"\nshows \"\\<exists> n. (C,n) \\<in> derivable R\"", "lemma characteriseSeq:\nshows \"\\<exists> A B. (C :: 'a sequent) = (A \\<Rightarrow>* B)\"", "lemma nonEmptySet:\nshows \"A \\<noteq> [] \\<longrightarrow> (\\<exists> a. a \\<in> set A)\"", "lemma midMultiset:\n  assumes \"\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\" and \"A \\<noteq> B\"\n  shows \"\\<exists> \\<Gamma>''. \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and> \\<Gamma>' = \\<Gamma>'' \\<oplus> A\"", "lemma extendID:\nassumes \"extend S (\\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\"", "lemma extendFalsum:\nassumes \"extend S (\\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"ff \\<in># \\<Gamma>\"", "lemma containID:\nassumes a:\"At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\"\n    and b:\"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* \\<Delta>,0) \\<in> derivable R*\"", "lemma containFalsum:\nassumes a: \"ff \\<in># \\<Gamma>\"\n   and  b: \"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* \\<Delta>,0) \\<in> derivable R*\"", "lemma characteriseAx:\nshows \"r \\<in> Ax \\<Longrightarrow> r = ([],\\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) \\<or> (\\<exists> i. r = ([], \\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>))\"", "lemma characteriseLast:\nassumes \"(C,m+1) \\<in> derivable R\"\nshows \"\\<exists> Ps. Ps \\<noteq> [] \\<and>\n             (Ps,C) \\<in> R \\<and> \n             (\\<forall> p \\<in> set Ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R)\"", "lemma succ_upRule:\nassumes \"(Ps,\\<Phi> \\<Rightarrow>* \\<Psi>) \\<in> upRules\"\nshows \"\\<Psi> = \\<Empt> \\<or> (\\<exists> A. \\<Psi> = \\<LM>A\\<RM>)\"", "lemma antec_upRule:\nassumes \"(Ps,\\<Phi> \\<Rightarrow>* \\<Psi>) \\<in> upRules\"\nshows \"\\<Phi> = \\<Empt> \\<or> (\\<exists> A. \\<Phi> = \\<LM>A\\<RM>)\"", "lemma upRule_Size:\nassumes \"r \\<in> upRules\"\nshows \"seq_size (snd r) = 1\"", "lemma upRuleCharacterise:\nassumes \"(Ps,C) \\<in> upRules\"\nshows \"\\<exists> F Fs. C = (\\<Empt> \\<Rightarrow>* \\<LM>Compound F Fs\\<RM>) \\<or> C = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\"", "lemma extendEmpty:\nshows \"extend (\\<Empt> \\<Rightarrow>* \\<Empt>) C = C\"", "lemma extendContain:\nassumes \"r = (ps,c)\"\n    and \"(Ps,C) = extendRule S r\"\n    and \"p \\<in> set ps\"\nshows \"extend S p \\<in> set Ps\"", "lemma nonPrincipalID:\nfixes A :: \"'a form\"\nassumes \"r \\<in> Ax\"\nshows \"\\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A\"", "lemma extendCommute:\nshows \"(extend S) (extend R c) = (extend R) (extend S c)\"", "lemma mapCommute:\nshows \"map (extend S) (map (extend R) c) = map (extend R) (map (extend S) c)\"", "lemma extendAssoc:\nshows \"(extend S) (extend R c) = extend (extend S R) c\"", "lemma mapAssoc:\nshows \"map (extend S) (map (extend R) c) = map (extend (extend S R)) c\"", "lemma extended_Ax_prems_empty:\nassumes \"r \\<in> Ax\"\nshows \"fst (extendRule S r) = []\"", "lemma obv:\nfixes a :: \"('a * 'b)\"\nshows \"a = (fst a, snd a)\"", "lemma getLast:\nassumes \"lastRule (\\<Gamma> \\<Rightarrow>* \\<Delta>,n+1) r R\"\nshows \"\\<exists> S Ps. extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and> (\\<forall> p \\<in> set Ps. \\<exists> m\\<le>n. (p,m) \\<in> derivable R*) \\<and> r \\<in> R \\<and> r \\<notin> Ax\"", "lemma getAx:\nassumes \"lastRule (\\<Gamma> \\<Rightarrow>* \\<Delta>,0) r R\"\nshows \"r \\<in> Ax \\<and> (\\<exists> S. extendRule S r = ([],\\<Gamma> \\<Rightarrow>* \\<Delta>))\"", "lemma ruleSet:\nassumes \"R' \\<subseteq> upRules\"\n    and \"R = Ax \\<union> R'\"\n    and \"(Ps,C) \\<in> R*\"\nshows \"\\<exists> S r. extendRule S r = (Ps,C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)\"", "lemma rightInvertible:\nfixes \\<Gamma> \\<Delta> :: \"'a form multiset\"\nassumes rules: \"R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\"\n  and   a: \"(\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs,n) \\<in> derivable R*\"\n  and   b: \"\\<forall> r' \\<in> R. rightPrincipal r' (Compound F Fs) \\<longrightarrow> \n            (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> +\\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\"", "lemma conRInvert:\nassumes \"(\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> (A \\<and>* B),n) \\<in> derivable (g3cp \\<union> Ax)*\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A,m) \\<in> derivable (g3cp \\<union> Ax)*\"", "lemma leftInvertible:\nfixes \\<Gamma> \\<Delta> :: \"'a form multiset\"\nassumes rules: \"R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\"\n  and   a: \"(\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>,n) \\<in> derivable R*\"\n  and   b: \"\\<forall> r' \\<in> R. leftPrincipal r' (Compound F Fs) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> +\\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\"", "lemma invertibleRule:\nassumes rules: \"R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\"\n   and UC:     \"uniqueConclusion R'\"\n   and IN:     \"(Ps,C) \\<in> R*\"\n   and der:    \"(C,n) \\<in> derivable R*\"\nshows \"\\<forall> p \\<in> set Ps. \\<exists> m\\<le>n. (p,m) \\<in> derivable R*\"", "lemma unique_to_invertible:\nassumes (*<*)a:(*>*) \"R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\"\n   and  \"uniqueConclusion R'\"\nshows \"invertible_set R\"", "lemma g3cp_invertible:\nshows \"invertible_set (Ax \\<union> g3cp)\""], "translations": [["", "lemma g3cp_upRules:\nshows \"g3cp \\<subseteq> upRules\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g3cp \\<subseteq> upRules", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. g3cp \\<subseteq> upRules", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. g3cp \\<subseteq> upRules", "fix ps c"], ["proof (state)\ngoal (1 subgoal):\n 1. g3cp \\<subseteq> upRules", "assume \"(ps,c) \\<in> g3cp\""], ["proof (state)\nthis:\n  (ps, c) \\<in> g3cp\n\ngoal (1 subgoal):\n 1. g3cp \\<subseteq> upRules", "then"], ["proof (chain)\npicking this:\n  (ps, c) \\<in> g3cp", "have \"(ps,c) \\<in> upRules\""], ["proof (prove)\nusing this:\n  (ps, c) \\<in> g3cp\n\ngoal (1 subgoal):\n 1. (ps, c) \\<in> upRules", "by (induct) auto"], ["proof (state)\nthis:\n  (ps, c) \\<in> upRules\n\ngoal (1 subgoal):\n 1. g3cp \\<subseteq> upRules", "}"], ["proof (state)\nthis:\n  (?ps2, ?c2) \\<in> g3cp \\<Longrightarrow> (?ps2, ?c2) \\<in> upRules\n\ngoal (1 subgoal):\n 1. g3cp \\<subseteq> upRules", "thus \"g3cp \\<subseteq> upRules\""], ["proof (prove)\nusing this:\n  (?ps2, ?c2) \\<in> g3cp \\<Longrightarrow> (?ps2, ?c2) \\<in> upRules\n\ngoal (1 subgoal):\n 1. g3cp \\<subseteq> upRules", "by auto"], ["proof (state)\nthis:\n  g3cp \\<subseteq> upRules\n\ngoal:\nNo subgoals!", "qed"], ["", "(* --------------------------------------------\n   --------------------------------------------\n               G3cp EXAMPLE ENDS\n   --------------------------------------------\n   -------------------------------------------- *)"], ["", "text\\<open>\n\\noindent We have thus given the \\textit{active} parts of the \\textbf{G3cp} calculus.  We now need to extend these active parts with \\textit{passive} parts.\n\nGiven a sequent $C$, we extend it with another sequent $S$ by adding the two antecedents and the two succedents.  To extend an active part $(Ps,C)$ with a sequent $S$, we extend every $P \\in Ps$ and $C$ with $S$:\n\\<close>"], ["", "(* Extend a sequent, and then a rule by adding seq to all premisses and the conclusion *)"], ["", "overloading\n  extend \\<equiv> extend\n  extendRule \\<equiv> extendRule\nbegin"], ["", "definition extend\n  where \"extend forms seq \\<equiv> (antec forms + antec seq) \\<Rightarrow>* (succ forms + succ seq)\""], ["", "definition extendRule\n  where \"extendRule forms R \\<equiv> (map (extend forms) (fst R), extend forms (snd R))\""], ["", "end"], ["", "text\\<open>\n\\noindent Given a rule set $\\mathcal{R}$, the \\textit{extension} of $\\mathcal{R}$, called $\\mathcal{R}^{\\star}$, is then defined as another inductive set:\n\\<close>"], ["", "inductive_set extRules :: \"'a rule set \\<Rightarrow> 'a rule set\"  (\"_*\")\n  for R :: \"'a rule set\" \n  where I(*<*)[intro](*>*): \"r \\<in> R \\<Longrightarrow> extendRule seq r \\<in> R*\""], ["", "text\\<open>\n\\noindent The rules of \\textbf{G3cp} all have unique conclusions.  This is easily formalised:\n\\<close>"], ["", "(* The unique conclusion property.  A set of rules has unique conclusion property if for any pair of rules,\n   the conclusions being the same means the rules are the same*)"], ["", "overloading uniqueConclusion \\<equiv> uniqueConclusion\nbegin"], ["", "definition uniqueConclusion :: \"'a rule set \\<Rightarrow> bool\"\n  where \"uniqueConclusion R \\<equiv> \\<forall> r1 \\<in> R. \\<forall> r2 \\<in> R. (snd r1 = snd r2) \\<longrightarrow> (r1 = r2)\""], ["", "end"], ["", "(* --------------------------------------------\n   --------------------------------------------\n               G3cp EXAMPLE\n   --------------------------------------------\n   -------------------------------------------- *)"], ["", "lemma g3cp_uc:\nshows \"uniqueConclusion g3cp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniqueConclusion g3cp", "apply (auto simp add:uniqueConclusion_def Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>(a, b) \\<in> g3cp; (aa, b) \\<in> g3cp\\<rbrakk>\n       \\<Longrightarrow> a = aa", "apply (rule g3cp.cases)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>a b aa.\n       \\<lbrakk>(a, b) \\<in> g3cp; (aa, b) \\<in> g3cp\\<rbrakk>\n       \\<Longrightarrow> (?a1.19 a b aa, ?a2.19 a b aa) \\<in> g3cp\n 2. \\<And>a b aa A B.\n       \\<lbrakk>(a, b) \\<in> g3cp; (aa, b) \\<in> g3cp;\n        ?a1.19 a b aa =\n        [ (\\<LM> A  \\<RM>) \\<oplus> B \\<Rightarrow>* \\<Empt>];\n        ?a2.19 a b aa =\n        ( \\<LM> A \\<and>* B  \\<RM> \\<Rightarrow>* \\<Empt>)\\<rbrakk>\n       \\<Longrightarrow> a = aa\n 3. \\<And>a b aa A B.\n       \\<lbrakk>(a, b) \\<in> g3cp; (aa, b) \\<in> g3cp;\n        ?a1.19 a b aa =\n        [ \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>,\n          \\<Empt> \\<Rightarrow>* \\<LM> B  \\<RM>];\n        ?a2.19 a b aa =\n        ( \\<Empt> \\<Rightarrow>* \\<LM> A \\<and>* B  \\<RM>)\\<rbrakk>\n       \\<Longrightarrow> a = aa\n 4. \\<And>a b aa A B.\n       \\<lbrakk>(a, b) \\<in> g3cp; (aa, b) \\<in> g3cp;\n        ?a1.19 a b aa =\n        [ \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>,\n          \\<LM> B  \\<RM> \\<Rightarrow>* \\<Empt>];\n        ?a2.19 a b aa =\n        ( \\<LM> A \\<or>* B  \\<RM> \\<Rightarrow>* \\<Empt>)\\<rbrakk>\n       \\<Longrightarrow> a = aa\n 5. \\<And>a b aa A B.\n       \\<lbrakk>(a, b) \\<in> g3cp; (aa, b) \\<in> g3cp;\n        ?a1.19 a b aa =\n        [ \\<Empt> \\<Rightarrow>* (\\<LM> A  \\<RM>) \\<oplus> B];\n        ?a2.19 a b aa =\n        ( \\<Empt> \\<Rightarrow>* \\<LM> A \\<or>* B  \\<RM>)\\<rbrakk>\n       \\<Longrightarrow> a = aa\n 6. \\<And>a b aa A B.\n       \\<lbrakk>(a, b) \\<in> g3cp; (aa, b) \\<in> g3cp;\n        ?a1.19 a b aa =\n        [ \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>,\n          \\<LM> B  \\<RM> \\<Rightarrow>* \\<Empt>];\n        ?a2.19 a b aa =\n        ( \\<LM> A \\<supset> B  \\<RM> \\<Rightarrow>* \\<Empt>)\\<rbrakk>\n       \\<Longrightarrow> a = aa\n 7. \\<And>a b aa A B.\n       \\<lbrakk>(a, b) \\<in> g3cp; (aa, b) \\<in> g3cp;\n        ?a1.19 a b aa = [ \\<LM> A  \\<RM> \\<Rightarrow>* \\<LM> B  \\<RM>];\n        ?a2.19 a b aa =\n        ( \\<Empt> \\<Rightarrow>* \\<LM> A \\<supset> B  \\<RM>)\\<rbrakk>\n       \\<Longrightarrow> a = aa", "apply auto"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>aa A B.\n       \\<lbrakk>([ add_mset B (\\<LM> A  \\<RM>) \\<Rightarrow>* \\<Empt>],\n                  \\<LM> A \\<and>* B  \\<RM> \\<Rightarrow>* \\<Empt>)\n                \\<in> g3cp;\n        (aa,  \\<LM> A \\<and>* B  \\<RM> \\<Rightarrow>* \\<Empt>)\n        \\<in> g3cp\\<rbrakk>\n       \\<Longrightarrow> [ add_mset B\n                            (\\<LM> A  \\<RM>) \\<Rightarrow>* \\<Empt>] =\n                         aa\n 2. \\<And>aa A B.\n       \\<lbrakk>([ \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>,\n                   \\<Empt> \\<Rightarrow>* \\<LM> B  \\<RM>],\n                  \\<Empt> \\<Rightarrow>* \\<LM> A \\<and>* B  \\<RM>)\n                \\<in> g3cp;\n        (aa,  \\<Empt> \\<Rightarrow>* \\<LM> A \\<and>* B  \\<RM>)\n        \\<in> g3cp\\<rbrakk>\n       \\<Longrightarrow> [ \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>,\n                           \\<Empt> \\<Rightarrow>* \\<LM> B  \\<RM>] =\n                         aa\n 3. \\<And>aa A B.\n       \\<lbrakk>([ \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>,\n                   \\<LM> B  \\<RM> \\<Rightarrow>* \\<Empt>],\n                  \\<LM> A \\<or>* B  \\<RM> \\<Rightarrow>* \\<Empt>)\n                \\<in> g3cp;\n        (aa,  \\<LM> A \\<or>* B  \\<RM> \\<Rightarrow>* \\<Empt>)\n        \\<in> g3cp\\<rbrakk>\n       \\<Longrightarrow> [ \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>,\n                           \\<LM> B  \\<RM> \\<Rightarrow>* \\<Empt>] =\n                         aa\n 4. \\<And>aa A B.\n       \\<lbrakk>([ \\<Empt> \\<Rightarrow>* add_mset B (\\<LM> A  \\<RM>)],\n                  \\<Empt> \\<Rightarrow>* \\<LM> A \\<or>* B  \\<RM>)\n                \\<in> g3cp;\n        (aa,  \\<Empt> \\<Rightarrow>* \\<LM> A \\<or>* B  \\<RM>)\n        \\<in> g3cp\\<rbrakk>\n       \\<Longrightarrow> [ \\<Empt> \\<Rightarrow>* add_mset B\n             (\\<LM> A  \\<RM>)] =\n                         aa\n 5. \\<And>aa A B.\n       \\<lbrakk>([ \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>,\n                   \\<LM> B  \\<RM> \\<Rightarrow>* \\<Empt>],\n                  \\<LM> A \\<supset> B  \\<RM> \\<Rightarrow>* \\<Empt>)\n                \\<in> g3cp;\n        (aa,  \\<LM> A \\<supset> B  \\<RM> \\<Rightarrow>* \\<Empt>)\n        \\<in> g3cp\\<rbrakk>\n       \\<Longrightarrow> [ \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>,\n                           \\<LM> B  \\<RM> \\<Rightarrow>* \\<Empt>] =\n                         aa\n 6. \\<And>aa A B.\n       \\<lbrakk>([ \\<LM> A  \\<RM> \\<Rightarrow>* \\<LM> B  \\<RM>],\n                  \\<Empt> \\<Rightarrow>* \\<LM> A \\<supset> B  \\<RM>)\n                \\<in> g3cp;\n        (aa,  \\<Empt> \\<Rightarrow>* \\<LM> A \\<supset> B  \\<RM>)\n        \\<in> g3cp\\<rbrakk>\n       \\<Longrightarrow> [ \\<LM> A  \\<RM> \\<Rightarrow>* \\<LM> B  \\<RM>] =\n                         aa", "by (rotate_tac 1,rule g3cp.cases,auto)+"], ["", "(* --------------------------------------------\n   --------------------------------------------\n               G3cp EXAMPLE ENDS\n   --------------------------------------------\n   -------------------------------------------- *)\n(*<*)\n(* A formulation of what it means to be a principal formula for a rule.  Note that we have to build up from\n   single conclusion rules.   *)"], ["", "inductive leftPrincipal :: \"'a rule \\<Rightarrow> 'a form \\<Rightarrow> bool\"\n  where\n  up[intro]: \"C = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)  \\<Longrightarrow> \n                   leftPrincipal (Ps,C) (Compound F Fs)\""], ["", "(*>*)"], ["", "text\\<open>\n\\subsection{Principal Rules and Derivations \\label{isaderv}}\nA formula $A$ is \\textit{left principal} for an active part $R$ iff the conclusion of $R$ is of the form $A \\Rightarrow \\emptyset$.  The definition of \\textit{right principal} is then obvious.  We have an inductive predicate to check these things:\n\\<close>"], ["", "inductive rightPrincipal :: \"'a rule \\<Rightarrow> 'a form \\<Rightarrow> bool\"\n  where\n  up(*<*)[intro](*>*): \"C = (\\<Empt> \\<Rightarrow>* \\<LM>Compound F Fs\\<RM>) \\<Longrightarrow> \n                        rightPrincipal (Ps,C) (Compound F Fs)\""], ["", "text\\<open>\n\\noindent As an example, we show that if $A\\wedge B$ is principal for an active part in \\textbf{G3cp}, then $\\emptyset \\Rightarrow A$ is a premiss of that active part:\n\\<close>"], ["", "(* --------------------------------------------\n   --------------------------------------------\n               G3cp EXAMPLE\n   --------------------------------------------\n   -------------------------------------------- *)"], ["", "lemma principal_means_premiss:\nassumes a: \"rightPrincipal r (A \\<and>* B)\"\nand     b: \"r \\<in> g3cp\"\nshows      \"(\\<Empt> \\<Rightarrow>* \\<LM> A \\<RM>) \\<in> set (fst r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> set (fst r)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> set (fst r)", "from a and b"], ["proof (chain)\npicking this:\n  rightPrincipal r (A \\<and>* B)\n  r \\<in> g3cp", "obtain Ps where req: \"r = (Ps, \\<Empt> \\<Rightarrow>* \\<LM> A\\<and>*B \\<RM>)\""], ["proof (prove)\nusing this:\n  rightPrincipal r (A \\<and>* B)\n  r \\<in> g3cp\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        r =\n        (Ps,\n          \\<Empt> \\<Rightarrow>* \\<LM> A \\<and>* B  \\<RM>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (Ps,  \\<Empt> \\<Rightarrow>* \\<LM> A \\<and>* B  \\<RM>)\n\ngoal (1 subgoal):\n 1. ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> set (fst r)", "with b"], ["proof (chain)\npicking this:\n  r \\<in> g3cp\n  r = (Ps,  \\<Empt> \\<Rightarrow>* \\<LM> A \\<and>* B  \\<RM>)", "have \"Ps = [\\<Empt> \\<Rightarrow>* \\<LM> A \\<RM>, \\<Empt> \\<Rightarrow>* \\<LM> B \\<RM>]\""], ["proof (prove)\nusing this:\n  r \\<in> g3cp\n  r = (Ps,  \\<Empt> \\<Rightarrow>* \\<LM> A \\<and>* B  \\<RM>)\n\ngoal (1 subgoal):\n 1. Ps =\n    [ \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>,\n      \\<Empt> \\<Rightarrow>* \\<LM> B  \\<RM>]", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> g3cp;\n        r = (Ps,  \\<Empt> \\<Rightarrow>* \\<LM> A \\<and>* B  \\<RM>);\n        r = (a, b)\\<rbrakk>\n       \\<Longrightarrow> Ps =\n                         [ \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>,\n                           \\<Empt> \\<Rightarrow>* \\<LM> B  \\<RM>]", "by (rule g3cp.cases) auto"], ["proof (state)\nthis:\n  Ps =\n  [ \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>,\n    \\<Empt> \\<Rightarrow>* \\<LM> B  \\<RM>]\n\ngoal (1 subgoal):\n 1. ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> set (fst r)", "with req"], ["proof (chain)\npicking this:\n  r = (Ps,  \\<Empt> \\<Rightarrow>* \\<LM> A \\<and>* B  \\<RM>)\n  Ps =\n  [ \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>,\n    \\<Empt> \\<Rightarrow>* \\<LM> B  \\<RM>]", "show \"(\\<Empt> \\<Rightarrow>* \\<LM> A \\<RM>) \\<in> set (fst r)\""], ["proof (prove)\nusing this:\n  r = (Ps,  \\<Empt> \\<Rightarrow>* \\<LM> A \\<and>* B  \\<RM>)\n  Ps =\n  [ \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>,\n    \\<Empt> \\<Rightarrow>* \\<LM> B  \\<RM>]\n\ngoal (1 subgoal):\n 1. ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> set (fst r)", "by auto"], ["proof (state)\nthis:\n  ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> set (fst r)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* --------------------------------------------\n   --------------------------------------------\n               G3cp EXAMPLE ENDS\n   --------------------------------------------\n   -------------------------------------------- *)\n\n\n\n(* What it means to be a derivable sequent.  Can have this as a predicate or as a set.\n   The two formation rules say that the supplied premisses are derivable, and the second says\n   that if all the premisses of some rule are derivable, then so is the conclusion.  *)"], ["", "text\\<open>\n\\noindent A sequent is \\textit{derivable} at height $0$ if it is the conclusion of a rule with no premisses.  If a rule has $m$ premisses, and the maximum height of the derivation of any of the premisses is $n$, then the conclusion will be derivable at height $n+1$.  We encode this as pairs of sequents and natural numbers.  A sequent $S$ is derivable at a height $n$ in a rule system $\\mathcal{R}$ iff $(S,n)$ belongs to the inductive set \\texttt{derivable} $\\mathcal{R}$:\n\\<close>"], ["", "inductive_set derivable :: \"'a rule set \\<Rightarrow> 'a deriv set\"\n  for R :: \"'a rule set\"\n  where\n   base(*<*)[intro](*>*): \"\\<lbrakk>([],C) \\<in> R\\<rbrakk> \\<Longrightarrow> (C,0) \\<in> derivable R\"\n|  step(*<*)[intro](*>*):  \"\\<lbrakk> r \\<in> R ; (fst r)\\<noteq>[] ; \\<forall> p \\<in> set (fst r). \\<exists> n \\<le> m. (p,n) \\<in> derivable R \\<rbrakk> \n                       \\<Longrightarrow> (snd r,m + 1) \\<in> derivable R\""], ["", "text\\<open>\n\\noindent In some instances, we do not care about the height of a derivation, rather that the root is derivable.  For this, we have the additional definition of \\texttt{derivable'}, which is a set of sequents:\n\\<close>"], ["", "(* When we don't care about height! *)"], ["", "inductive_set derivable' :: \"'a rule set \\<Rightarrow> 'a sequent set\"\n   for R :: \"'a rule set\"\n   where\n    base(*<*)[intro](*>*): \"\\<lbrakk> ([],C) \\<in> R \\<rbrakk> \\<Longrightarrow> C \\<in> derivable' R\"\n|   step(*<*)[intro](*>*):  \"\\<lbrakk> r \\<in> R ; (fst r) \\<noteq> [] ; \\<forall> p \\<in> set (fst r). p \\<in> derivable' R \\<rbrakk>\n                       \\<Longrightarrow> (snd r) \\<in> derivable' R\""], ["", "text\\<open>\n\\noindent It is desirable to switch between the two notions.  Shifting from derivable at a height to derivable is simple: we delete the information about height.  The converse is more complicated and involves an induction on the length of the premiss list:\n\\<close>"], ["", "lemma deriv_to_deriv(*<*)[simp](*>*):\nassumes \"(C,n) \\<in> derivable R\"\nshows \"C \\<in> derivable' R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> derivable' R", "using assms"], ["proof (prove)\nusing this:\n  (C, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. C \\<in> derivable' R", "by (induct) auto"], ["", "lemma deriv_to_deriv2:\nassumes \"C \\<in> derivable' R\"\nshows \"\\<exists> n. (C,n) \\<in> derivable R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n. (C, n) \\<in> derivable R", "using assms"], ["proof (prove)\nusing this:\n  C \\<in> derivable' R\n\ngoal (1 subgoal):\n 1. \\<exists>n. (C, n) \\<in> derivable R", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C.\n       ([], C) \\<in> R \\<Longrightarrow>\n       \\<exists>n. (C, n) \\<in> derivable R\n 2. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "case (base C)"], ["proof (state)\nthis:\n  ([], C) \\<in> R\n\ngoal (2 subgoals):\n 1. \\<And>C.\n       ([], C) \\<in> R \\<Longrightarrow>\n       \\<exists>n. (C, n) \\<in> derivable R\n 2. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  ([], C) \\<in> R", "have \"(C,0) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  ([], C) \\<in> R\n\ngoal (1 subgoal):\n 1. (C, 0) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  (C, 0) \\<in> derivable R\n\ngoal (2 subgoals):\n 1. \\<And>C.\n       ([], C) \\<in> R \\<Longrightarrow>\n       \\<exists>n. (C, n) \\<in> derivable R\n 2. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  (C, 0) \\<in> derivable R", "show ?case"], ["proof (prove)\nusing this:\n  (C, 0) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>n. (C, n) \\<in> derivable R", "by blast"], ["proof (state)\nthis:\n  \\<exists>n. (C, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "case (step r)"], ["proof (state)\nthis:\n  r \\<in> R\n  fst r \\<noteq> []\n  \\<forall>p\\<in>set (fst r).\n     p \\<in> derivable' R \\<and> (\\<exists>n. (p, n) \\<in> derivable R)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  r \\<in> R\n  fst r \\<noteq> []\n  \\<forall>p\\<in>set (fst r).\n     p \\<in> derivable' R \\<and> (\\<exists>n. (p, n) \\<in> derivable R)", "obtain ps c where \"r = (ps,c)\" and \"ps \\<noteq> []\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  fst r \\<noteq> []\n  \\<forall>p\\<in>set (fst r).\n     p \\<in> derivable' R \\<and> (\\<exists>n. (p, n) \\<in> derivable R)\n\ngoal (1 subgoal):\n 1. (\\<And>ps c.\n        \\<lbrakk>r = (ps, c); ps \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n  ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "with step(3)"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set (fst r).\n     p \\<in> derivable' R \\<and> (\\<exists>n. (p, n) \\<in> derivable R)\n  r = (ps, c)\n  ps \\<noteq> []", "have aa: \"\\<forall> p \\<in> set ps. \\<exists> n. (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (fst r).\n     p \\<in> derivable' R \\<and> (\\<exists>n. (p, n) \\<in> derivable R)\n  r = (ps, c)\n  ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps. \\<exists>n. (p, n) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps. \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps. \\<exists>n. (p, n) \\<in> derivable R", "have \"\\<exists> m. \\<forall> p \\<in> set ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps. \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "proof (induct ps) \\<comment> \\<open>induction on the list\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>p\\<in>set [].\n       \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n    \\<exists>m.\n       \\<forall>p\\<in>set []. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n 2. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "case Nil"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set []. \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (2 subgoals):\n 1. \\<forall>p\\<in>set [].\n       \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n    \\<exists>m.\n       \\<forall>p\\<in>set []. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n 2. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set []. \\<exists>n. (p, n) \\<in> derivable R", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set []. \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       \\<forall>p\\<in>set []. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  \\<exists>m.\n     \\<forall>p\\<in>set []. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set as.\n     \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  \\<forall>p\\<in>set (a # as). \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set as.\n     \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  \\<forall>p\\<in>set (a # as). \\<exists>n. (p, n) \\<in> derivable R", "have \"\\<exists> m. \\<forall> p \\<in> set as. \\<exists> n\\<le>m. (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set as.\n     \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  \\<forall>p\\<in>set (a # as). \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "obtain m where \"\\<forall> p \\<in> set as. \\<exists> n\\<le>m. (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<forall>p\\<in>set as.\n           \\<exists>n\\<le>m. (p, n) \\<in> derivable R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "from \\<open>\\<forall> p \\<in> set (a # as). \\<exists> n. (p,n) \\<in> derivable R\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set (a # as). \\<exists>n. (p, n) \\<in> derivable R", "have\n      \"\\<exists> n. (a,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (a # as). \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>n. (a, n) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  \\<exists>n. (a, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<exists>n. (a, n) \\<in> derivable R", "obtain m' where \"(a,m') \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<exists>n. (a, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        (a, m') \\<in> derivable R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (a, m') \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  (a, m') \\<in> derivable R", "have \"\\<forall> p \\<in> set (a # as). \\<exists> n\\<le>(max m m'). (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  (a, m') \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (a # as).\n       \\<exists>n\\<le>max m m'. (p, n) \\<in> derivable R", "(*<*)"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  (a, m') \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (a # as).\n       \\<exists>n\\<le>max m m'. (p, n) \\<in> derivable R", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x.\n                x \\<in> set as \\<longrightarrow>\n                (\\<exists>n\\<le>m. (x, n) \\<in> derivable R);\n     (a, m') \\<in> derivable R\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<le>max m m'. (a, n) \\<in> derivable R\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set as \\<longrightarrow>\n                   (\\<exists>n\\<le>m. (x, n) \\<in> derivable R);\n        (a, m') \\<in> derivable R; x \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "apply (rule_tac x=m' in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x.\n                x \\<in> set as \\<longrightarrow>\n                (\\<exists>n\\<le>m. (x, n) \\<in> derivable R);\n     (a, m') \\<in> derivable R\\<rbrakk>\n    \\<Longrightarrow> m' \\<le> max m m' \\<and> (a, m') \\<in> derivable R\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set as \\<longrightarrow>\n                   (\\<exists>n\\<le>m. (x, n) \\<in> derivable R);\n        (a, m') \\<in> derivable R; x \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set as \\<longrightarrow>\n                   (\\<exists>n\\<le>m. (x, n) \\<in> derivable R);\n        (a, m') \\<in> derivable R; x \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "apply (drule_tac x=x in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(a, m') \\<in> derivable R; x \\<in> set as;\n        x \\<in> set as \\<longrightarrow>\n        (\\<exists>n\\<le>m. (x, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x n.\n       \\<lbrakk>(a, m') \\<in> derivable R; x \\<in> set as; n \\<le> m;\n        (x, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "(*>*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x n.\n       \\<lbrakk>(a, m') \\<in> derivable R; x \\<in> set as; n \\<le> m;\n        (x, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "by (*<*)(rule_tac x=n in exI)(*>*) auto \\<comment> \\<open>max returns the maximum of two integers\\<close>"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set (a # as).\n     \\<exists>n\\<le>max m m'. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set (a # as).\n     \\<exists>n\\<le>max m m'. (p, n) \\<in> derivable R", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (a # as).\n     \\<exists>n\\<le>max m m'. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       \\<forall>p\\<in>set (a # as).\n          \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "by blast"], ["proof (state)\nthis:\n  \\<exists>m.\n     \\<forall>p\\<in>set (a # as). \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m.\n     \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<exists>m.\n     \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "obtain m where \"\\<forall> p \\<in> set ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<exists>m.\n     \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<forall>p\\<in>set ps.\n           \\<exists>n\\<le>m. (p, n) \\<in> derivable R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "with \\<open>r = (ps,c)\\<close> and \\<open>r \\<in> R\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  r \\<in> R\n  \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "have \"(c,m+1) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> R\n  \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (c, m + 1) \\<in> derivable R", "using \\<open>ps \\<noteq> []\\<close> and\n    derivable.step[where r=\"(ps,c)\" and R=R and m=m]"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> R\n  \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  ps \\<noteq> []\n  \\<lbrakk>(ps, c) \\<in> R; fst (ps, c) \\<noteq> [];\n   \\<forall>p\\<in>set (fst (ps, c)).\n      \\<exists>n\\<le>m. (p, n) \\<in> derivable R\\<rbrakk>\n  \\<Longrightarrow> (snd (ps, c), m + 1) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (c, m + 1) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  (c, m + 1) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  (c, m + 1) \\<in> derivable R", "show ?case"], ["proof (prove)\nusing this:\n  (c, m + 1) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>n. (snd r, n) \\<in> derivable R", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  (c, m + 1) \\<in> derivable R\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<exists>n. (snd r, n) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  \\<exists>n. (snd r, n) \\<in> derivable R\n\ngoal:\nNo subgoals!", "qed"], ["", "(*<*)\n(* definition of invertible rule and invertible set of rules.  It's a bit nasty, but all it really says is\n   If a rule is in the given set, and if any extension of that rule is derivable at n, then the\n   premisses of the extended rule are derivable at height at most n.  *)\n\n\n\n\n\n(* Characterisation of a sequent *)"], ["", "lemma characteriseSeq:\nshows \"\\<exists> A B. (C :: 'a sequent) = (A \\<Rightarrow>* B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A B. C = ( A \\<Rightarrow>* B)", "apply (rule_tac x=\"antec C\" in exI, rule_tac x=\"succ C\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. C = ( antec C \\<Rightarrow>* succ C)", "by (cases C) (auto)"], ["", "(* Helper function for later *)"], ["", "lemma nonEmptySet:\nshows \"A \\<noteq> [] \\<longrightarrow> (\\<exists> a. a \\<in> set A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> [] \\<longrightarrow> (\\<exists>a. a \\<in> set A)", "by (auto simp add:neq_Nil_conv)"], ["", "(* Lemma which comes in helpful ALL THE TIME *)"], ["", "lemma midMultiset:\n  assumes \"\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\" and \"A \\<noteq> B\"\n  shows \"\\<exists> \\<Gamma>''. \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and> \\<Gamma>' = \\<Gamma>'' \\<oplus> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "from assms"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  A \\<noteq> B", "have \"A \\<in># \\<Gamma>'\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. A \\<in># \\<Gamma>'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B;\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> A \\<in># \\<Gamma>'", "from assms"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  A \\<noteq> B", "have \"set_mset (\\<Gamma> \\<oplus> A) = set_mset (\\<Gamma>' \\<oplus> B)\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. set_mset (\\<Gamma> \\<oplus> A) = set_mset (\\<Gamma>' \\<oplus> B)", "by auto"], ["proof (state)\nthis:\n  set_mset (\\<Gamma> \\<oplus> A) = set_mset (\\<Gamma>' \\<oplus> B)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B;\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> A \\<in># \\<Gamma>'", "then"], ["proof (chain)\npicking this:\n  set_mset (\\<Gamma> \\<oplus> A) = set_mset (\\<Gamma>' \\<oplus> B)", "have \"set_mset \\<Gamma> \\<union> {A} = set_mset \\<Gamma>' \\<union> {B}\""], ["proof (prove)\nusing this:\n  set_mset (\\<Gamma> \\<oplus> A) = set_mset (\\<Gamma>' \\<oplus> B)\n\ngoal (1 subgoal):\n 1. set_mset \\<Gamma> \\<union> {A} = set_mset \\<Gamma>' \\<union> {B}", "by auto"], ["proof (state)\nthis:\n  set_mset \\<Gamma> \\<union> {A} = set_mset \\<Gamma>' \\<union> {B}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B;\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> A \\<in># \\<Gamma>'", "then"], ["proof (chain)\npicking this:\n  set_mset \\<Gamma> \\<union> {A} = set_mset \\<Gamma>' \\<union> {B}", "have \"set_mset \\<Gamma> \\<union> {A} \\<subseteq> set_mset \\<Gamma>' \\<union> {B}\""], ["proof (prove)\nusing this:\n  set_mset \\<Gamma> \\<union> {A} = set_mset \\<Gamma>' \\<union> {B}\n\ngoal (1 subgoal):\n 1. set_mset \\<Gamma> \\<union> {A}\n    \\<subseteq> set_mset \\<Gamma>' \\<union> {B}", "by simp"], ["proof (state)\nthis:\n  set_mset \\<Gamma> \\<union> {A} \\<subseteq> set_mset \\<Gamma>' \\<union> {B}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B;\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> A \\<in># \\<Gamma>'", "then"], ["proof (chain)\npicking this:\n  set_mset \\<Gamma> \\<union> {A} \\<subseteq> set_mset \\<Gamma>' \\<union> {B}", "have \"A \\<in> set_mset \\<Gamma>'\""], ["proof (prove)\nusing this:\n  set_mset \\<Gamma> \\<union> {A} \\<subseteq> set_mset \\<Gamma>' \\<union> {B}\n\ngoal (1 subgoal):\n 1. A \\<in># \\<Gamma>'", "using assms"], ["proof (prove)\nusing this:\n  set_mset \\<Gamma> \\<union> {A} \\<subseteq> set_mset \\<Gamma>' \\<union> {B}\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. A \\<in># \\<Gamma>'", "by auto"], ["proof (state)\nthis:\n  A \\<in># \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B;\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> A \\<in># \\<Gamma>'", "thus \"A \\<in># \\<Gamma>'\""], ["proof (prove)\nusing this:\n  A \\<in># \\<Gamma>'\n\ngoal (1 subgoal):\n 1. A \\<in># \\<Gamma>'", "by simp"], ["proof (state)\nthis:\n  A \\<in># \\<Gamma>'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A \\<in># \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "then"], ["proof (chain)\npicking this:\n  A \\<in># \\<Gamma>'", "have \"\\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>'\""], ["proof (prove)\nusing this:\n  A \\<in># \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>'", "by (auto simp add:multiset_eq_iff)"], ["proof (state)\nthis:\n  \\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>'", "have \"\\<exists> \\<Gamma>''. \\<Gamma>' = \\<Gamma>'' \\<oplus> A\""], ["proof (prove)\nusing this:\n  \\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''. \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "apply (rule_tac x=\"\\<Gamma>' \\<ominus> A\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>' \\<Longrightarrow>\n    \\<Gamma>' = \\<Gamma>' \\<ominus> A \\<oplus> A", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>''. \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Gamma>''. \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "obtain \\<Gamma>'' where eq1:\"\\<Gamma>' = \\<Gamma>'' \\<oplus> A\""], ["proof (prove)\nusing this:\n  \\<exists>\\<Gamma>''. \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>''.\n        \\<Gamma>' = \\<Gamma>'' \\<oplus> A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "from \\<open>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\\<close> eq1"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "have \"\\<Gamma> \\<oplus> A = \\<Gamma>'' \\<oplus> A \\<oplus> B\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<oplus> A = \\<Gamma>'' \\<oplus> A \\<oplus> B", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> \\<oplus> A = \\<Gamma>'' \\<oplus> A \\<oplus> B\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "then"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>'' \\<oplus> A \\<oplus> B", "have \"\\<Gamma> = \\<Gamma>'' \\<oplus> B\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>'' \\<oplus> A \\<oplus> B\n\ngoal (1 subgoal):\n 1. \\<Gamma> = \\<Gamma>'' \\<oplus> B", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> = \\<Gamma>'' \\<oplus> B\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma>'' \\<oplus> B\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "using eq1"], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma>'' \\<oplus> B\n  \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>''.\n     \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n     \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Lemma which says that if we have extended an identity rule, then the propositional variable is\n   contained in the extended multisets *)"], ["", "lemma extendID:\nassumes \"extend S (\\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "using assms"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n    At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "from assms"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"\\<exists> \\<Gamma>' \\<Delta>'. \\<Gamma> = \\<Gamma>' \\<oplus> At i \\<and> \\<Delta> = \\<Delta>' \\<oplus> At i\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>' \\<Delta>'.\n       \\<Gamma> = \\<Gamma>' \\<oplus> At i \\<and>\n       \\<Delta> = \\<Delta>' \\<oplus> At i", "using extend_def[where forms=S and seq=\"\\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>\"]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<equiv>\n   antec S +\n   antec\n    ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At\n        i  \\<RM>) \\<Rightarrow>* succ S +\n                                 succ\n                                  ( \\<LM> At\n     i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>' \\<Delta>'.\n       \\<Gamma> = \\<Gamma>' \\<oplus> At i \\<and>\n       \\<Delta> = \\<Delta>' \\<oplus> At i", "by (rule_tac x=\"antec S\" in exI,rule_tac x=\"succ S\" in exI) auto"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>' \\<Delta>'.\n     \\<Gamma> = \\<Gamma>' \\<oplus> At i \\<and>\n     \\<Delta> = \\<Delta>' \\<oplus> At i\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n    At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Gamma>' \\<Delta>'.\n     \\<Gamma> = \\<Gamma>' \\<oplus> At i \\<and>\n     \\<Delta> = \\<Delta>' \\<oplus> At i", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>\\<Gamma>' \\<Delta>'.\n     \\<Gamma> = \\<Gamma>' \\<oplus> At i \\<and>\n     \\<Delta> = \\<Delta>' \\<oplus> At i\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "by auto"], ["proof (state)\nthis:\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extendFalsum:\nassumes \"extend S (\\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"ff \\<in># \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "from assms"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"\\<exists> \\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff", "using extend_def[where forms=S and seq=\"\\<LM>ff \\<RM> \\<Rightarrow>* \\<Empt>\"]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<equiv>\n   antec S +\n   antec\n    ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Rightarrow>* succ S +\n                       succ ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff", "by (rule_tac x=\"antec S\" in exI) auto"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Lemma that says if a propositional variable is in both the antecedent and succedent of a sequent,\n   then it is derivable from idupRules *)"], ["", "lemma containID:\nassumes a:\"At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\"\n    and b:\"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* \\<Delta>,0) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "from a"], ["proof (chain)\npicking this:\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "have \"\\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i \\<and> \\<Delta> = \\<Delta> \\<ominus> At i \\<oplus> At i\""], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i \\<and>\n    \\<Delta> = \\<Delta> \\<ominus> At i \\<oplus> At i", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i \\<and>\n  \\<Delta> = \\<Delta> \\<ominus> At i \\<oplus> At i\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i \\<and>\n  \\<Delta> = \\<Delta> \\<ominus> At i \\<oplus> At i", "have \"extend ((\\<Gamma> \\<ominus> At i) \\<Rightarrow>* (\\<Delta> \\<ominus> At i)) (\\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i \\<and>\n  \\<Delta> = \\<Delta> \\<ominus> At i \\<oplus> At i\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n     ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "using extend_def[where forms=\"\\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i\" and seq=\"\\<LM>At i\\<RM> \\<Rightarrow>* \\<LM>At i\\<RM>\"]"], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i \\<and>\n  \\<Delta> = \\<Delta> \\<ominus> At i \\<oplus> At i\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<equiv>\n   antec ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i) +\n   antec\n    ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At\n        i  \\<RM>) \\<Rightarrow>* succ\n                                  ( \\<Gamma> \\<ominus>\n                                    At i \\<Rightarrow>* \\<Delta> \\<ominus>\n                  At i) +\n                                 succ\n                                  ( \\<LM> At\n     i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n     ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "by auto"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "have \"([],\\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<in> R", "using b"], ["proof (prove)\nusing this:\n  Ax \\<subseteq> R\n\ngoal (1 subgoal):\n 1. ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<in> R", "by auto"], ["proof (state)\nthis:\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<in> R\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<in> R", "have \"([],\\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\""], ["proof (prove)\nusing this:\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<in> R\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*", "using extRules.I[where R=R and r=\"([],  \\<LM>At i\\<RM> \\<Rightarrow>* \\<LM>At i\\<RM>)\" and seq=\"\\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i\"] \n       and extendRule_def[where forms=\"\\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i\" and R=\"([],  \\<LM>At i\\<RM> \\<Rightarrow>* \\<LM>At i\\<RM>)\"]"], ["proof (prove)\nusing this:\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<in> R\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n  \\<in> R \\<Longrightarrow>\n  extendRule\n   ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n  \\<in> R*\n  extendRule\n   ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<equiv>\n  (map (extend\n         ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i))\n    (fst ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)),\n   extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n    (snd ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)))\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*", "by auto"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*", "show ?thesis"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "using derivable.base[where R=\"R*\" and C=\"\\<Gamma> \\<Rightarrow>* \\<Delta>\"]"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R* \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma containFalsum:\nassumes a: \"ff \\<in># \\<Gamma>\"\n   and  b: \"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* \\<Delta>,0) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "from a"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma>", "have \"\\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff", "have \"extend (\\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>) (\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n     ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "using extend_def[where forms=\"\\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>\" and seq=\"\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>\"]"], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<equiv>\n   antec ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>) +\n   antec\n    ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Rightarrow>* succ\n                        ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>) +\n                       succ ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n     ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "by auto"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "have \"([],\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R", "using b"], ["proof (prove)\nusing this:\n  Ax \\<subseteq> R\n\ngoal (1 subgoal):\n 1. ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R", "by auto"], ["proof (state)\nthis:\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R", "have \"([],\\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\""], ["proof (prove)\nusing this:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*", "using extRules.I[where R=R and r=\"([],  \\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\" and seq=\"\\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>\"] \n       and extendRule_def[where forms=\"\\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>\" and R=\"([],  \\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\"]"], ["proof (prove)\nusing this:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R \\<Longrightarrow>\n  extendRule ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  \\<in> R*\n  extendRule ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<equiv>\n  (map (extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>))\n    (fst ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)),\n   extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n    (snd ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)))\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*", "by auto"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*", "show ?thesis"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "using derivable.base[where R=\"R*\" and C=\"\\<Gamma> \\<Rightarrow>* \\<Delta>\"]"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R* \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Lemma which says that if r is an identity rule, then r is of the form\n   ([], P \\<Rightarrow>* P) *)"], ["", "lemma characteriseAx:\nshows \"r \\<in> Ax \\<Longrightarrow> r = ([],\\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) \\<or> (\\<exists> i. r = ([], \\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<Longrightarrow>\n    r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n    (\\<exists>i.\n        r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>))", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> Ax; r = (a, b)\\<rbrakk>\n       \\<Longrightarrow> r =\n                         ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n                         (\\<exists>i.\n                             r =\n                             ([],\n                               \\<LM> At\ni  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>))", "by (rule Ax.cases) auto"], ["", "(* A lemma about the last rule used in a derivation, i.e. that one exists *)"], ["", "lemma characteriseLast:\nassumes \"(C,m+1) \\<in> derivable R\"\nshows \"\\<exists> Ps. Ps \\<noteq> [] \\<and>\n             (Ps,C) \\<in> R \\<and> \n             (\\<forall> p \\<in> set Ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Ps.\n       Ps \\<noteq> [] \\<and>\n       (Ps, C) \\<in> R \\<and>\n       (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "using assms"], ["proof (prove)\nusing this:\n  (C, m + 1) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>Ps.\n       Ps \\<noteq> [] \\<and>\n       (Ps, C) \\<in> R \\<and>\n       (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "by (cases) auto"], ["", "(* Lemma which says that if rule is an upRule, then the succedent is either empty, or a single formula *)"], ["", "lemma succ_upRule:\nassumes \"(Ps,\\<Phi> \\<Rightarrow>* \\<Psi>) \\<in> upRules\"\nshows \"\\<Psi> = \\<Empt> \\<or> (\\<exists> A. \\<Psi> = \\<LM>A\\<RM>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> = \\<Empt> \\<or> (\\<exists>A. \\<Psi> = \\<LM> A  \\<RM>)", "using assms"], ["proof (prove)\nusing this:\n  (Ps,  \\<Phi> \\<Rightarrow>* \\<Psi>) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<Psi> = \\<Empt> \\<or> (\\<exists>A. \\<Psi> = \\<LM> A  \\<RM>)", "proof (cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n                \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> = \\<Empt> \\<or>\n                         (\\<exists>A. \\<Psi> = \\<LM> A  \\<RM>)", "case (I R Rs)"], ["proof (state)\nthis:\n  MultiSequents.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n                \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> = \\<Empt> \\<or>\n                         (\\<exists>A. \\<Psi> = \\<LM> A  \\<RM>)", "then"], ["proof (chain)\npicking this:\n  MultiSequents.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []", "show \"\\<Psi> = \\<Empt> \\<or> (\\<exists> A. \\<Psi> = \\<LM>A\\<RM>)\""], ["proof (prove)\nusing this:\n  MultiSequents.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<Psi> = \\<Empt> \\<or> (\\<exists>A. \\<Psi> = \\<LM> A  \\<RM>)", "using mset.simps[where ant=\\<Phi> and suc=\\<Psi>] \n         and union_is_single[where M=\\<Phi> and N=\\<Psi> and a=\"Compound R Rs\"]"], ["proof (prove)\nusing this:\n  MultiSequents.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []\n  MultiSequents.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) = \\<Phi> + \\<Psi>\n  (\\<Phi> + \\<Psi> = \\<LM> Compound R Rs  \\<RM>) =\n  (\\<Phi> = \\<LM> Compound R Rs  \\<RM> \\<and> \\<Psi> = \\<Empt> \\<or>\n   \\<Phi> = \\<Empt> \\<and> \\<Psi> = \\<LM> Compound R Rs  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<Psi> = \\<Empt> \\<or> (\\<exists>A. \\<Psi> = \\<LM> A  \\<RM>)", "by (simp,elim disjE) (auto)"], ["proof (state)\nthis:\n  \\<Psi> = \\<Empt> \\<or> (\\<exists>A. \\<Psi> = \\<LM> A  \\<RM>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Equivalent, but the antecedent *)"], ["", "lemma antec_upRule:\nassumes \"(Ps,\\<Phi> \\<Rightarrow>* \\<Psi>) \\<in> upRules\"\nshows \"\\<Phi> = \\<Empt> \\<or> (\\<exists> A. \\<Phi> = \\<LM>A\\<RM>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Phi> = \\<Empt> \\<or> (\\<exists>A. \\<Phi> = \\<LM> A  \\<RM>)", "using assms"], ["proof (prove)\nusing this:\n  (Ps,  \\<Phi> \\<Rightarrow>* \\<Psi>) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<Phi> = \\<Empt> \\<or> (\\<exists>A. \\<Phi> = \\<LM> A  \\<RM>)", "proof (cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n                \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> = \\<Empt> \\<or>\n                         (\\<exists>A. \\<Phi> = \\<LM> A  \\<RM>)", "case (I R Rs)"], ["proof (state)\nthis:\n  MultiSequents.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n                \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> = \\<Empt> \\<or>\n                         (\\<exists>A. \\<Phi> = \\<LM> A  \\<RM>)", "then"], ["proof (chain)\npicking this:\n  MultiSequents.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []", "show \"\\<Phi> = \\<Empt> \\<or> (\\<exists> A. \\<Phi> = \\<LM>A\\<RM>)\""], ["proof (prove)\nusing this:\n  MultiSequents.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<Phi> = \\<Empt> \\<or> (\\<exists>A. \\<Phi> = \\<LM> A  \\<RM>)", "using mset.simps[where ant=\\<Phi> and suc=\\<Psi>] \n         and union_is_single[where M=\\<Phi> and N=\\<Psi> and a=\"Compound R Rs\"]"], ["proof (prove)\nusing this:\n  MultiSequents.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []\n  MultiSequents.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) = \\<Phi> + \\<Psi>\n  (\\<Phi> + \\<Psi> = \\<LM> Compound R Rs  \\<RM>) =\n  (\\<Phi> = \\<LM> Compound R Rs  \\<RM> \\<and> \\<Psi> = \\<Empt> \\<or>\n   \\<Phi> = \\<Empt> \\<and> \\<Psi> = \\<LM> Compound R Rs  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<Phi> = \\<Empt> \\<or> (\\<exists>A. \\<Phi> = \\<LM> A  \\<RM>)", "by (simp,elim disjE) (auto)"], ["proof (state)\nthis:\n  \\<Phi> = \\<Empt> \\<or> (\\<exists>A. \\<Phi> = \\<LM> A  \\<RM>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma upRule_Size:\nassumes \"r \\<in> upRules\"\nshows \"seq_size (snd r) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq_size (snd r) = 1", "using assms"], ["proof (prove)\nusing this:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. seq_size (snd r) = 1", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow> seq_size (snd r) = 1", "obtain Ps C where \"r = (Ps,C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Ps C. r = (Ps, C) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r)"], ["proof (state)\nthis:\n  r = (Ps, C)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow> seq_size (snd r) = 1", "then"], ["proof (chain)\npicking this:\n  r = (Ps, C)", "have \"(Ps,C) \\<in> upRules\""], ["proof (prove)\nusing this:\n  r = (Ps, C)\n\ngoal (1 subgoal):\n 1. (Ps, C) \\<in> upRules", "using assms"], ["proof (prove)\nusing this:\n  r = (Ps, C)\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. (Ps, C) \\<in> upRules", "by simp"], ["proof (state)\nthis:\n  (Ps, C) \\<in> upRules\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow> seq_size (snd r) = 1", "then"], ["proof (chain)\npicking this:\n  (Ps, C) \\<in> upRules", "show ?thesis"], ["proof (prove)\nusing this:\n  (Ps, C) \\<in> upRules\n\ngoal (1 subgoal):\n 1. seq_size (snd r) = 1", "proof (cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "case (I R Rs)"], ["proof (state)\nthis:\n  MultiSequents.mset C \\<equiv> \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "obtain G H where \"C = (G \\<Rightarrow>* H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>G H.\n        C = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases C) (auto)"], ["proof (state)\nthis:\n  C = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "then"], ["proof (chain)\npicking this:\n  C = ( G \\<Rightarrow>* H)", "have \"G + H = \\<LM>Compound R Rs\\<RM>\""], ["proof (prove)\nusing this:\n  C = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. G + H = \\<LM> Compound R Rs  \\<RM>", "using mset.simps and \\<open>mset C \\<equiv> \\<LM>Compound R Rs\\<RM>\\<close>"], ["proof (prove)\nusing this:\n  C = ( G \\<Rightarrow>* H)\n  MultiSequents.mset ( ?ant \\<Rightarrow>* ?suc) = ?ant + ?suc\n  MultiSequents.mset C \\<equiv> \\<LM> Compound R Rs  \\<RM>\n\ngoal (1 subgoal):\n 1. G + H = \\<LM> Compound R Rs  \\<RM>", "by auto"], ["proof (state)\nthis:\n  G + H = \\<LM> Compound R Rs  \\<RM>\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "then"], ["proof (chain)\npicking this:\n  G + H = \\<LM> Compound R Rs  \\<RM>", "have \"size (G+H) = 1\""], ["proof (prove)\nusing this:\n  G + H = \\<LM> Compound R Rs  \\<RM>\n\ngoal (1 subgoal):\n 1. size (G + H) = 1", "by auto"], ["proof (state)\nthis:\n  size (G + H) = 1\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "then"], ["proof (chain)\npicking this:\n  size (G + H) = 1", "have \"size G + size H = 1\""], ["proof (prove)\nusing this:\n  size (G + H) = 1\n\ngoal (1 subgoal):\n 1. size G + size H = 1", "by auto"], ["proof (state)\nthis:\n  size G + size H = 1\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "then"], ["proof (chain)\npicking this:\n  size G + size H = 1", "have \"seq_size C = 1\""], ["proof (prove)\nusing this:\n  size G + size H = 1\n\ngoal (1 subgoal):\n 1. seq_size C = 1", "using seq_size.simps[where ant=G and suc=H] and \\<open>C = (G \\<Rightarrow>* H)\\<close>"], ["proof (prove)\nusing this:\n  size G + size H = 1\n  seq_size ( G \\<Rightarrow>* H) = size G + size H\n  C = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. seq_size C = 1", "by auto"], ["proof (state)\nthis:\n  seq_size C = 1\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "moreover"], ["proof (state)\nthis:\n  seq_size C = 1\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "have \"snd r = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd r = C", "using \\<open>r = (Ps,C)\\<close>"], ["proof (prove)\nusing this:\n  r = (Ps, C)\n\ngoal (1 subgoal):\n 1. snd r = C", "by simp"], ["proof (state)\nthis:\n  snd r = C\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "ultimately"], ["proof (chain)\npicking this:\n  seq_size C = 1\n  snd r = C", "show \"seq_size (snd r) = 1\""], ["proof (prove)\nusing this:\n  seq_size C = 1\n  snd r = C\n\ngoal (1 subgoal):\n 1. seq_size (snd r) = 1", "by simp"], ["proof (state)\nthis:\n  seq_size (snd r) = 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  seq_size (snd r) = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma upRuleCharacterise:\nassumes \"(Ps,C) \\<in> upRules\"\nshows \"\\<exists> F Fs. C = (\\<Empt> \\<Rightarrow>* \\<LM>Compound F Fs\\<RM>) \\<or> C = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n       C = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "using assms"], ["proof (prove)\nusing this:\n  (Ps, C) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n       C = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "proof (cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F Fs.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F\n                      Fs  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> Compound F\n                                     Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "case (I F Fs)"], ["proof (state)\nthis:\n  MultiSequents.mset C \\<equiv> \\<LM> Compound F Fs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F Fs.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F\n                      Fs  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> Compound F\n                                     Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "then"], ["proof (chain)\npicking this:\n  MultiSequents.mset C \\<equiv> \\<LM> Compound F Fs  \\<RM>\n  Ps \\<noteq> []", "obtain \\<Gamma> \\<Delta> where \"C = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  MultiSequents.mset C \\<equiv> \\<LM> Compound F Fs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma> \\<Delta>.\n        C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseSeq[where C=C]"], ["proof (prove)\nusing this:\n  MultiSequents.mset C \\<equiv> \\<LM> Compound F Fs  \\<RM>\n  Ps \\<noteq> []\n  \\<exists>A B. C = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma> \\<Delta>.\n        C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F Fs.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F\n                      Fs  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> Compound F\n                                     Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "then"], ["proof (chain)\npicking this:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"(Ps,\\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules\""], ["proof (prove)\nusing this:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules", "using assms"], ["proof (prove)\nusing this:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  (Ps, C) \\<in> upRules\n\ngoal (1 subgoal):\n 1. (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules", "by simp"], ["proof (state)\nthis:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>MultiSequents.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F Fs.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F\n                      Fs  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> Compound F\n                                     Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "then"], ["proof (chain)\npicking this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules", "show \"\\<exists> F Fs. C = (\\<Empt> \\<Rightarrow>* \\<LM>Compound F Fs\\<RM>) \\<or> C = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n       C = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "using \\<open>mset C \\<equiv> \\<LM>Compound F Fs\\<RM>\\<close> and \\<open>C = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\\<close>\n      and mset.simps[where ant=\\<Gamma> and suc=\\<Delta>] and union_is_single[where M=\\<Gamma> and N=\\<Delta> and a=\"Compound F Fs\"]"], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules\n  MultiSequents.mset C \\<equiv> \\<LM> Compound F Fs  \\<RM>\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  MultiSequents.mset ( \\<Gamma> \\<Rightarrow>* \\<Delta>) =\n  \\<Gamma> + \\<Delta>\n  (\\<Gamma> + \\<Delta> = \\<LM> Compound F Fs  \\<RM>) =\n  (\\<Gamma> = \\<LM> Compound F Fs  \\<RM> \\<and> \\<Delta> = \\<Empt> \\<or>\n   \\<Gamma> = \\<Empt> \\<and> \\<Delta> = \\<LM> Compound F Fs  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n       C = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>F Fs.\n     C = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n     C = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extendEmpty:\nshows \"extend (\\<Empt> \\<Rightarrow>* \\<Empt>) C = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend ( \\<Empt> \\<Rightarrow>* \\<Empt>) C = C", "apply (auto simp add:extend_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ( antec C \\<Rightarrow>* succ C) = C", "by (cases C) auto"], ["", "lemma extendContain:\nassumes \"r = (ps,c)\"\n    and \"(Ps,C) = extendRule S r\"\n    and \"p \\<in> set ps\"\nshows \"extend S p \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "from \\<open>p \\<in> set ps\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> set ps", "have \"extend S p \\<in> set (map (extend S) ps)\""], ["proof (prove)\nusing this:\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set (map (extend S) ps)", "by auto"], ["proof (state)\nthis:\n  extend S p \\<in> set (map (extend S) ps)\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "moreover"], ["proof (state)\nthis:\n  extend S p \\<in> set (map (extend S) ps)\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "from \\<open>(Ps,C) = extendRule S r\\<close> and \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  (Ps, C) = extendRule S r\n  r = (ps, c)", "have \"map (extend S) ps = Ps\""], ["proof (prove)\nusing this:\n  (Ps, C) = extendRule S r\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. map (extend S) ps = Ps", "by (simp add:extendRule_def)"], ["proof (state)\nthis:\n  map (extend S) ps = Ps\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "ultimately"], ["proof (chain)\npicking this:\n  extend S p \\<in> set (map (extend S) ps)\n  map (extend S) ps = Ps", "show ?thesis"], ["proof (prove)\nusing this:\n  extend S p \\<in> set (map (extend S) ps)\n  map (extend S) ps = Ps\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "by auto"], ["proof (state)\nthis:\n  extend S p \\<in> set Ps\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nonPrincipalID:\nfixes A :: \"'a form\"\nassumes \"r \\<in> Ax\"\nshows \"\\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "from assms"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "obtain i where r1:\"r = ([], \\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) \\<or> r = ([], \\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i\\<RM>)\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n        r =\n        ([],\n          \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At\n            i  \\<RM>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseAx[where r=r]"], ["proof (prove)\nusing this:\n  r \\<in> Ax\n  r \\<in> Ax \\<Longrightarrow>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  (\\<exists>i.\n      r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n        r =\n        ([],\n          \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At\n            i  \\<RM>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "{"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "assume \"rightPrincipal r A\""], ["proof (state)\nthis:\n  rightPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "then"], ["proof (chain)\npicking this:\n  rightPrincipal r A", "obtain Ps where r2:\"r = (Ps, \\<Empt> \\<Rightarrow>* \\<LM> A \\<RM>)\""], ["proof (prove)\nusing this:\n  rightPrincipal r A\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        r = (Ps,  \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (Ps,  \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "with r1"], ["proof (chain)\npicking this:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n  r = (Ps,  \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>)", "have \"False\""], ["proof (prove)\nusing this:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n  r = (Ps,  \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "}"], ["proof (state)\nthis:\n  rightPrincipal r A \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "then"], ["proof (chain)\npicking this:\n  rightPrincipal r A \\<Longrightarrow> False", "have \"\\<not> rightPrincipal r A\""], ["proof (prove)\nusing this:\n  rightPrincipal r A \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A", "by auto"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "moreover"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "{"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "assume \"leftPrincipal r A\""], ["proof (state)\nthis:\n  leftPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "then"], ["proof (chain)\npicking this:\n  leftPrincipal r A", "obtain Ps' F Fs where r3:\"r = (Ps', \\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  leftPrincipal r A\n\ngoal (1 subgoal):\n 1. (\\<And>Ps' F Fs.\n        r =\n        (Ps',\n          \\<LM> Compound F\n                 Fs  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (Ps',  \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "with r1"], ["proof (chain)\npicking this:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n  r = (Ps',  \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"False\""], ["proof (prove)\nusing this:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n  r = (Ps',  \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "}"], ["proof (state)\nthis:\n  leftPrincipal r A \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "then"], ["proof (chain)\npicking this:\n  leftPrincipal r A \\<Longrightarrow> False", "have \"\\<not> leftPrincipal r A\""], ["proof (prove)\nusing this:\n  leftPrincipal r A \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> leftPrincipal r A", "by auto"], ["proof (state)\nthis:\n  \\<not> leftPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> rightPrincipal r A\n  \\<not> leftPrincipal r A", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> rightPrincipal r A\n  \\<not> leftPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "by simp"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extendCommute:\nshows \"(extend S) (extend R c) = (extend R) (extend S c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend S (extend R c) = extend R (extend S c)", "by (auto simp add:extend_def union_ac)"], ["", "lemma mapCommute:\nshows \"map (extend S) (map (extend R) c) = map (extend R) (map (extend S) c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (extend S) (map (extend R) c) = map (extend R) (map (extend S) c)", "by (induct_tac c) (auto simp add:extendCommute)"], ["", "lemma extendAssoc:\nshows \"(extend S) (extend R c) = extend (extend S R) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend S (extend R c) = extend (extend S R) c", "by (auto simp add:extend_def union_ac)"], ["", "lemma mapAssoc:\nshows \"map (extend S) (map (extend R) c) = map (extend (extend S R)) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (extend S) (map (extend R) c) = map (extend (extend S R)) c", "by (induct_tac c) (auto simp add:extendAssoc)"], ["", "lemma extended_Ax_prems_empty:\nassumes \"r \\<in> Ax\"\nshows \"fst (extendRule S r) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (extendRule S r) = []", "using assms"], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. fst (extendRule S r) = []", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> Ax; r = (a, b)\\<rbrakk>\n       \\<Longrightarrow> fst (extendRule S r) = []", "by (rule Ax.cases) (auto simp add:extendRule_def)"], ["", "inductive lastRule :: \"'a deriv \\<Rightarrow> 'a rule \\<Rightarrow> 'a rule set \\<Rightarrow> bool\"\n  where\n  base[intro]: \"\\<lbrakk> r \\<in> Ax; Ax \\<subseteq> R ; snd (extendRule S r) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\\<rbrakk>\n                 \\<Longrightarrow> lastRule (\\<Gamma> \\<Rightarrow>* \\<Delta>,0) r R\"\n|    I[intro]:  \"\\<lbrakk> r\\<in>R ; r \\<notin> Ax ; snd (extendRule S r) = (\\<Gamma> \\<Rightarrow>* \\<Delta>) ; \n                \\<forall> p \\<in> set (fst (extendRule S r)). \\<exists> m\\<le>n. (p,m) \\<in> derivable R* \\<rbrakk> \n                 \\<Longrightarrow> lastRule (\\<Gamma> \\<Rightarrow>* \\<Delta>,n+1) r R\""], ["", "lemma obv:\nfixes a :: \"('a * 'b)\"\nshows \"a = (fst a, snd a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = (fst a, snd a)", "by auto"], ["", "lemma getLast:\nassumes \"lastRule (\\<Gamma> \\<Rightarrow>* \\<Delta>,n+1) r R\"\nshows \"\\<exists> S Ps. extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and> (\\<forall> p \\<in> set Ps. \\<exists> m\\<le>n. (p,m) \\<in> derivable R*) \\<and> r \\<in> R \\<and> r \\<notin> Ax\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S Ps.\n       extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n       (\\<forall>p\\<in>set Ps.\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable R*) \\<and>\n       r \\<in> R \\<and> r \\<notin> Ax", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>S Ps.\n       extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n       (\\<forall>p\\<in>set Ps.\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable R*) \\<and>\n       r \\<in> R \\<and> r \\<notin> Ax", "from assms"], ["proof (chain)\npicking this:\n  lastRule ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n + 1) r R", "show ?thesis"], ["proof (prove)\nusing this:\n  lastRule ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n + 1) r R\n\ngoal (1 subgoal):\n 1. \\<exists>S Ps.\n       extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n       (\\<forall>p\\<in>set Ps.\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable R*) \\<and>\n       r \\<in> R \\<and> r \\<notin> Ax", "apply (rule lastRule.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ra Ra S \\<Gamma>' \\<Delta>'.\n       \\<lbrakk>( \\<Gamma> \\<Rightarrow>* \\<Delta>, n + 1) =\n                ( \\<Gamma>' \\<Rightarrow>* \\<Delta>', 0);\n        r = ra; R = Ra; ra \\<in> Ax; Ax \\<subseteq> Ra;\n        snd (extendRule S ra) =\n        ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S Ps.\n                            extendRule S r =\n                            (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable R*) \\<and>\n                            r \\<in> R \\<and> r \\<notin> Ax\n 2. \\<And>ra Ra S \\<Gamma>' \\<Delta>' na.\n       \\<lbrakk>( \\<Gamma> \\<Rightarrow>* \\<Delta>, n + 1) =\n                ( \\<Gamma>' \\<Rightarrow>* \\<Delta>', na + 1);\n        r = ra; R = Ra; ra \\<in> Ra; ra \\<notin> Ax;\n        snd (extendRule S ra) = ( \\<Gamma>' \\<Rightarrow>* \\<Delta>');\n        \\<forall>p\\<in>set (fst (extendRule S ra)).\n           \\<exists>m\\<le>na. (p, m) \\<in> derivable Ra*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S Ps.\n                            extendRule S r =\n                            (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable R*) \\<and>\n                            r \\<in> R \\<and> r \\<notin> Ax", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra Ra S \\<Gamma>' \\<Delta>' na.\n       \\<lbrakk>( \\<Gamma> \\<Rightarrow>* \\<Delta>, n + 1) =\n                ( \\<Gamma>' \\<Rightarrow>* \\<Delta>', na + 1);\n        r = ra; R = Ra; ra \\<in> Ra; ra \\<notin> Ax;\n        snd (extendRule S ra) = ( \\<Gamma>' \\<Rightarrow>* \\<Delta>');\n        \\<forall>p\\<in>set (fst (extendRule S ra)).\n           \\<exists>m\\<le>na. (p, m) \\<in> derivable Ra*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S Ps.\n                            extendRule S r =\n                            (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable R*) \\<and>\n                            r \\<in> R \\<and> r \\<notin> Ax", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra Ra S.\n       \\<lbrakk>r = ra; R = Ra; ra \\<in> Ra; ra \\<notin> Ax;\n        snd (extendRule S ra) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S ra)).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable Ra*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S Ps.\n                            extendRule S ra =\n                            (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable Ra*)", "apply (rule_tac x=S in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra Ra S.\n       \\<lbrakk>r = ra; R = Ra; ra \\<in> Ra; ra \\<notin> Ax;\n        snd (extendRule S ra) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S ra)).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable Ra*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ps.\n                            extendRule S ra =\n                            (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable Ra*)", "apply (rule_tac x=\"fst (extendRule S r)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra Ra S.\n       \\<lbrakk>r = ra; R = Ra; ra \\<in> Ra; ra \\<notin> Ax;\n        snd (extendRule S ra) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S ra)).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable Ra*\\<rbrakk>\n       \\<Longrightarrow> extendRule S ra =\n                         (fst (extendRule S r),\n                           \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n                         (\\<forall>p\\<in>set (fst (extendRule S r)).\n                             \\<exists>m\\<le>n. (p, m) \\<in> derivable Ra*)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra Ra S.\n       \\<lbrakk>r = ra; R = Ra; ra \\<in> Ra; ra \\<notin> Ax;\n        snd (extendRule S ra) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S ra)).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable Ra*\\<rbrakk>\n       \\<Longrightarrow> extendRule S ra =\n                         (fst (extendRule S ra),\n                           \\<Gamma> \\<Rightarrow>* \\<Delta>)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b S.\n       \\<lbrakk>r = (a, b); (a, b) \\<in> R; (a, b) \\<notin> Ax;\n        snd (extendRule S (a, b)) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S (a, b))).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> extendRule S (a, b) =\n                         (fst (extendRule S (a, b)),\n                           \\<Gamma> \\<Rightarrow>* \\<Delta>)", "apply (subgoal_tac \"extendRule S (a,b) = (fst (extendRule S (a,b)),snd (extendRule S (a,b)))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b S.\n       \\<lbrakk>r = (a, b); (a, b) \\<in> R; (a, b) \\<notin> Ax;\n        snd (extendRule S (a, b)) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S (a, b))).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable R*;\n        extendRule S (a, b) =\n        (fst (extendRule S (a, b)), snd (extendRule S (a, b)))\\<rbrakk>\n       \\<Longrightarrow> extendRule S (a, b) =\n                         (fst (extendRule S (a, b)),\n                           \\<Gamma> \\<Rightarrow>* \\<Delta>)\n 2. \\<And>a b S.\n       \\<lbrakk>r = (a, b); (a, b) \\<in> R; (a, b) \\<notin> Ax;\n        snd (extendRule S (a, b)) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S (a, b))).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> extendRule S (a, b) =\n                         (fst (extendRule S (a, b)),\n                          snd (extendRule S (a, b)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b S.\n       \\<lbrakk>r = (a, b); (a, b) \\<in> R; (a, b) \\<notin> Ax;\n        snd (extendRule S (a, b)) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S (a, b))).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> extendRule S (a, b) =\n                         (fst (extendRule S (a, b)),\n                          snd (extendRule S (a, b)))", "by (rule obv)"], ["proof (state)\nthis:\n  \\<exists>S Ps.\n     extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n     (\\<forall>p\\<in>set Ps.\n         \\<exists>m\\<le>n. (p, m) \\<in> derivable R*) \\<and>\n     r \\<in> R \\<and> r \\<notin> Ax\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma getAx:\nassumes \"lastRule (\\<Gamma> \\<Rightarrow>* \\<Delta>,0) r R\"\nshows \"r \\<in> Ax \\<and> (\\<exists> S. extendRule S r = ([],\\<Gamma> \\<Rightarrow>* \\<Delta>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))", "from assms"], ["proof (chain)\npicking this:\n  lastRule ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) r R", "have \"r \\<in> Ax \\<and> (\\<exists> S. snd (extendRule S r) = (\\<Gamma> \\<Rightarrow>* \\<Delta>))\""], ["proof (prove)\nusing this:\n  lastRule ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) r R\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>))", "by (rule lastRule.cases) auto"], ["proof (state)\nthis:\n  r \\<in> Ax \\<and>\n  (\\<exists>S. snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>))\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))", "then"], ["proof (chain)\npicking this:\n  r \\<in> Ax \\<and>\n  (\\<exists>S. snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>))", "obtain S where \"r \\<in> Ax\" and \"snd (extendRule S r) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  r \\<in> Ax \\<and>\n  (\\<exists>S. snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>))\n\ngoal (1 subgoal):\n 1. (\\<And>S.\n        \\<lbrakk>r \\<in> Ax;\n         snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r \\<in> Ax\n  snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))", "from \\<open>r \\<in> Ax\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "have \"fst r = []\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. fst r = []", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> Ax; r = (a, b)\\<rbrakk> \\<Longrightarrow> fst r = []", "by (rule Ax.cases) auto"], ["proof (state)\nthis:\n  fst r = []\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))", "then"], ["proof (chain)\npicking this:\n  fst r = []", "have \"fst (extendRule S r) = []\""], ["proof (prove)\nusing this:\n  fst r = []\n\ngoal (1 subgoal):\n 1. fst (extendRule S r) = []", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  fst (extendRule S r) = []\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))", "with \\<open>snd (extendRule S r) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\\<close> and \\<open>r \\<in> Ax\\<close>"], ["proof (chain)\npicking this:\n  snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax\n  fst (extendRule S r) = []", "show ?thesis"], ["proof (prove)\nusing this:\n  snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax\n  fst (extendRule S r) = []\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n     r \\<in> Ax; fst (extendRule S r) = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>S.\n                         extendRule S r =\n                         ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>)", "apply (rule_tac x=S in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n     r \\<in> Ax; fst (extendRule S r) = []\\<rbrakk>\n    \\<Longrightarrow> extendRule S r =\n                      ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>)", "apply (subgoal_tac \"extendRule S r = (fst (extendRule S r),snd (extendRule S r))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n     r \\<in> Ax; fst (extendRule S r) = [];\n     extendRule S r = (fst (extendRule S r), snd (extendRule S r))\\<rbrakk>\n    \\<Longrightarrow> extendRule S r =\n                      ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n 2. \\<lbrakk>snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n     r \\<in> Ax; fst (extendRule S r) = []\\<rbrakk>\n    \\<Longrightarrow> extendRule S r =\n                      (fst (extendRule S r), snd (extendRule S r))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n     r \\<in> Ax; fst (extendRule S r) = []\\<rbrakk>\n    \\<Longrightarrow> extendRule S r =\n                      (fst (extendRule S r), snd (extendRule S r))", "by (rule obv)"], ["proof (state)\nthis:\n  r \\<in> Ax \\<and>\n  (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* -------------------------------------------\n   -------------------------------------------\n       THIS IS NOW INVERTIBLERULESPOLY.THY\n   -------------------------------------------\n   ------------------------------------------- *)\n\n(* Constructing the rule set we will use.  It contains all axioms, but only a subset\n   of the possible logical rules. *)"], ["", "lemma ruleSet:\nassumes \"R' \\<subseteq> upRules\"\n    and \"R = Ax \\<union> R'\"\n    and \"(Ps,C) \\<in> R*\"\nshows \"\\<exists> S r. extendRule S r = (Ps,C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "from \\<open>(Ps,C) \\<in> R*\\<close>"], ["proof (chain)\npicking this:\n  (Ps, C) \\<in> R*", "have \"\\<exists> S r. extendRule S r = (Ps,C) \\<and> r \\<in> R\""], ["proof (prove)\nusing this:\n  (Ps, C) \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R", "by (cases) auto"], ["proof (state)\nthis:\n  \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "then"], ["proof (chain)\npicking this:\n  \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R", "obtain S r where \"(Ps,C) = extendRule S r\" and \"r \\<in> R\""], ["proof (prove)\nusing this:\n  \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>(Ps, C) = extendRule S r; r \\<in> R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S a b.\n       \\<lbrakk>\\<And>S a b.\n                   \\<lbrakk>(Ps, C) = extendRule S (a, b);\n                    (a, b) \\<in> R\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        extendRule S (a, b) = (Ps, C); (a, b) \\<in> R\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (drule_tac x=S in meta_spec,drule_tac x=a in meta_spec, drule_tac x=b in meta_spec) auto"], ["proof (state)\nthis:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "moreover"], ["proof (state)\nthis:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "from \\<open>r \\<in> R\\<close> and \\<open>R = Ax \\<union> R'\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> R\n  R = Ax \\<union> R'", "have \"r \\<in> Ax \\<or> r \\<in> R'\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<or> r \\<in> R'", "by blast"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "ultimately"], ["proof (chain)\npicking this:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n  r \\<in> Ax \\<or> r \\<in> R'", "show ?thesis"], ["proof (prove)\nusing this:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "by (rule_tac x=S in exI,rule_tac x=r in exI) (auto)"], ["proof (state)\nthis:\n  \\<exists>S r.\n     extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\\section{Formalising the Results \\label{isaproofs}}\nA variety of ``helper'' lemmata are used in the proofs, but they are not shown.  The proof tactics themselves are hidden in the following proof, except where they are interesting.  Indeed, only the interesting parts of the proof are shown at all.  The main result of this section is that a rule is invertible if the premisses appear as premisses of \\textit{every} rule with the same principal formula.  The proof is interspersed with comments.\n\\<close>"], ["", "lemma rightInvertible:\nfixes \\<Gamma> \\<Delta> :: \"'a form multiset\"\nassumes rules: \"R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\"\n  and   a: \"(\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs,n) \\<in> derivable R*\"\n  and   b: \"\\<forall> r' \\<in> R. rightPrincipal r' (Compound F Fs) \\<longrightarrow> \n            (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> +\\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "using assms"], ["proof (prove)\nusing this:\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "txt\\<open>\n\\noindent The height of derivations is decided by the length of the longest branch.  Thus, we need to use\nstrong induction: i.e. $\\forall m\\leq n.\\ \\textrm{If } P(m) \\textrm{ then } P(n+1)$.\n\\<close>"], ["proof (prove)\nusing this:\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "proof (induct n arbitrary:\\<Gamma> \\<Delta> rule:nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<Delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   R' \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R' \\<longrightarrow>\n                   (\\<forall>x xa.\n                       ( x \\<Rightarrow>* xa \\<oplus> Compound F Fs, m)\n                       \\<in> derivable R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           rightPrincipal r'\n                            (Compound F Fs) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>',\n                            ma)\n                           \\<in> derivable R*));\n        R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n)\n        \\<in> derivable R*;\n        \\<forall>r'\\<in>R.\n           rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> +\n                              \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                             m)\n                            \\<in> derivable R*", "case (1 n \\<Gamma> \\<Delta>)"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     R' \\<subseteq> upRules \\<and> R = Ax \\<union> R' \\<longrightarrow>\n     (\\<forall>x xa.\n         ( x \\<Rightarrow>* xa \\<oplus> Compound F Fs, m)\n         \\<in> derivable R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>', ma)\n             \\<in> derivable R*))\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<Delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   R' \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R' \\<longrightarrow>\n                   (\\<forall>x xa.\n                       ( x \\<Rightarrow>* xa \\<oplus> Compound F Fs, m)\n                       \\<in> derivable R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           rightPrincipal r'\n                            (Compound F Fs) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>',\n                            ma)\n                           \\<in> derivable R*));\n        R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n)\n        \\<in> derivable R*;\n        \\<forall>r'\\<in>R.\n           rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> +\n                              \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                             m)\n                            \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     R' \\<subseteq> upRules \\<and> R = Ax \\<union> R' \\<longrightarrow>\n     (\\<forall>x xa.\n         ( x \\<Rightarrow>* xa \\<oplus> Compound F Fs, m)\n         \\<in> derivable R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>', ma)\n             \\<in> derivable R*))\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')", "have IH:\"\\<forall>m<n. \\<forall>\\<Gamma> \\<Delta>. ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, m) \\<in> derivable R* \\<longrightarrow>\n                   (\\<forall>r' \\<in> R. rightPrincipal r' (Compound F Fs) \\<longrightarrow> \n                   ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')) \\<longrightarrow>\n                   (\\<exists>m'\\<le>m. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m') \\<in> derivable R*)\" \n     and a': \"(\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs,n) \\<in> derivable R*\" \n     and b': \"\\<forall> r' \\<in> R. rightPrincipal r' (Compound F Fs) \\<longrightarrow> \n                        (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     R' \\<subseteq> upRules \\<and> R = Ax \\<union> R' \\<longrightarrow>\n     (\\<forall>x xa.\n         ( x \\<Rightarrow>* xa \\<oplus> Compound F Fs, m)\n         \\<in> derivable R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>', ma)\n             \\<in> derivable R*))\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n\ngoal (1 subgoal):\n 1. \\<forall>m<n.\n       \\<forall>\\<Gamma> \\<Delta>.\n          ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, m)\n          \\<in> derivable R* \\<longrightarrow>\n          (\\<forall>r'\\<in>R.\n              rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n              ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n              \\<in> set (fst r')) \\<longrightarrow>\n          (\\<exists>m'\\<le>m.\n              ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n               m')\n              \\<in> derivable R*) &&&\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n)\n    \\<in> derivable R* &&&\n    \\<forall>r'\\<in>R.\n       rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')", "by auto"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n            \\<in> derivable R*)\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<Delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   R' \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R' \\<longrightarrow>\n                   (\\<forall>x xa.\n                       ( x \\<Rightarrow>* xa \\<oplus> Compound F Fs, m)\n                       \\<in> derivable R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           rightPrincipal r'\n                            (Compound F Fs) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>',\n                            ma)\n                           \\<in> derivable R*));\n        R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n)\n        \\<in> derivable R*;\n        \\<forall>r'\\<in>R.\n           rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> +\n                              \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                             m)\n                            \\<in> derivable R*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "proof (cases n)   \\<comment> \\<open>Case analysis on $n$\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  n = 0", "have \"(\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, 0)\n    \\<in> derivable R*", "using a'"], ["proof (prove)\nusing this:\n  n = 0\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, 0)\n    \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, 0)\n  \\<in> derivable R*", "have \"([],\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<in> R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, 0)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<in> R*", "by (cases) (auto)"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<in> R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<in> R*", "have \"\\<exists> r S. extendRule S r = ([],\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<and> (r \\<in> Ax \\<or> r \\<in> R')\""], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       extendRule S r =\n       ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<and>\n       (r \\<in> Ax \\<or> r \\<in> R')", "using rules and ruleSet[where R'=R' and R=R and Ps=\"[]\" and C=\"\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs\"]"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<in> R*\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>R' \\<subseteq> upRules; R = Ax \\<union> R';\n   ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n   \\<in> R*\\<rbrakk>\n  \\<Longrightarrow> \\<exists>S r.\n                       extendRule S r =\n                       ([],\n                         \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus>\n           Compound F Fs) \\<and>\n                       (r \\<in> R' \\<or> r \\<in> Ax)\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       extendRule S r =\n       ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<and>\n       (r \\<in> Ax \\<or> r \\<in> R')", "by auto"], ["proof (state)\nthis:\n  \\<exists>r S.\n     extendRule S r =\n     ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R')\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*>*)"], ["proof (state)\nthis:\n  \\<exists>r S.\n     extendRule S r =\n     ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R')\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>r S.\n     extendRule S r =\n     ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R')", "obtain r S where \"extendRule S r = ([],\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\" \n                   and \"r \\<in> Ax \\<or> r \\<in> R'\""], ["proof (prove)\nusing this:\n  \\<exists>r S.\n     extendRule S r =\n     ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R')\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>extendRule S r =\n                 ([],\n                   \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs);\n         r \\<in> Ax \\<or> r \\<in> R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto  \\<comment> \\<open>At height 0, the premisses are empty\\<close>"], ["proof (state)\nthis:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"r \\<in> Ax\""], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "obtain i where \"([], \\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>) = r \\<or> \n                             r = ([], \\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) = r \\<or>\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseAx[where r=r]"], ["proof (prove)\nusing this:\n  r \\<in> Ax\n  r \\<in> Ax \\<Longrightarrow>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  (\\<exists>i.\n      r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) = r \\<or>\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) = r \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover \\<comment> \\<open>Case split on the kind of axiom used\\<close>"], ["proof (state)\nthis:\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) = r \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) = r \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"r = ([], \\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>)\""], ["proof (state)\nthis:\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "with \\<open>extendRule S r = ([],\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)", "have \"extend S (\\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>) = (\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)", "using extendRule_def[where R=\"([],\\<LM>At i\\<RM>\\<Rightarrow>*\\<LM>At i\\<RM>)\" and forms=S]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n  extendRule S\n   ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<equiv>\n  (map (extend S)\n    (fst ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)),\n   extend S (snd ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)))\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)", "by auto"], ["proof (state)\nthis:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*>*)"], ["proof (state)\nthis:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)", "have \"At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "(*<*)"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "using extendID[where S=S and i=i and \\<Gamma>=\\<Gamma> and \\<Delta>=\"\\<Delta> \\<oplus> Compound F Fs\"]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus>\n                            Compound F Fs) \\<Longrightarrow>\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "(*>*)"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus>\n                            Compound F Fs) \\<Longrightarrow>\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "by auto"], ["proof (state)\nthis:\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "have \"At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'\""], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'", "by auto"], ["proof (state)\nthis:\n  At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "using rules (*<*)\n                and containID[where \\<Gamma>=\"\\<Gamma> + \\<Gamma>'\" and i=i and \\<Delta>=\"\\<Delta> + \\<Delta>'\" and R=R]"], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>At i \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n           At i \\<in># \\<Delta> + \\<Delta>';\n   Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> +\n                      \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                     0)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "(*>*)"], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>At i \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n           At i \\<in># \\<Delta> + \\<Delta>';\n   Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> +\n                      \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                     0)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r =\n  ([],\n    \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r =\n  ([],\n    \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r =\n  ([],\n    \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"r = ([],\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "with \\<open>extendRule S r = ([],\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"extend S (\\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) = (\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)", "using extendRule_def[where R=\"([],\\<LM>ff\\<RM>\\<Rightarrow>*\\<Empt>)\" and forms=S]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  extendRule S ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<equiv>\n  (map (extend S) (fst ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)),\n   extend S (snd ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)))\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)", "by auto"], ["proof (state)\nthis:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*>*)"], ["proof (state)\nthis:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)", "have \"ff \\<in># \\<Gamma>\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "(*<*)"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "using extendFalsum[where S=S and \\<Gamma>=\\<Gamma> and \\<Delta>=\"\\<Delta> \\<oplus> Compound F Fs\"]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus>\n                            Compound F Fs) \\<Longrightarrow>\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "(*>*)"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus>\n                            Compound F Fs) \\<Longrightarrow>\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma>", "have \"ff \\<in># \\<Gamma> + \\<Gamma>'\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma> + \\<Gamma>'", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "using rules (*<*)\n                and containFalsum[where \\<Gamma>=\"\\<Gamma> + \\<Gamma>'\" and \\<Delta>=\"\\<Delta> + \\<Delta>'\" and R=R]"], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>ff \\<in># \\<Gamma> + \\<Gamma>'; Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> +\n                      \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                     0)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "(*>*)"], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>ff \\<in># \\<Gamma> + \\<Gamma>'; Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> +\n                      \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                     0)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) = r \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  r =\n  ([],\n    \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) = r \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  r =\n  ([],\n    \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"r \\<in> R'\" \\<comment> \\<open>This leads to a contradiction\\<close>"], ["proof (state)\nthis:\n  r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R'", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "using rules"], ["proof (prove)\nusing this:\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> upRules", "have \"\\<exists> Ps C. Ps \\<noteq> [] \\<and> r = (Ps,C)\""], ["proof (prove)\nusing this:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "obtain x y where \"r = (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. r = (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r)"], ["proof (state)\nthis:\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "with \\<open>r \\<in> upRules\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> upRules\n  r = (x, y)", "have \"(x,y) \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> upRules\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> upRules", "by simp"], ["proof (state)\nthis:\n  (x, y) \\<in> upRules\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> upRules", "obtain Ps where \"(Ps :: 'a sequent list) \\<noteq> []\" and \"x=Ps\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> upRules\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> []; x = Ps\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases) (auto)"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  x = Ps\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "with \\<open>r = (x,y)\\<close>"], ["proof (chain)\npicking this:\n  r = (x, y)\n  Ps \\<noteq> []\n  x = Ps", "have \"r = (Ps, y)\""], ["proof (prove)\nusing this:\n  r = (x, y)\n  Ps \\<noteq> []\n  x = Ps\n\ngoal (1 subgoal):\n 1. r = (Ps, y)", "by simp"], ["proof (state)\nthis:\n  r = (Ps, y)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "then"], ["proof (chain)\npicking this:\n  r = (Ps, y)", "show \"\\<exists> Ps C. Ps \\<noteq> [] \\<and> r = (Ps,C)\""], ["proof (prove)\nusing this:\n  r = (Ps, y)\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "using \\<open>Ps \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  r = (Ps, y)\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "by blast"], ["proof (state)\nthis:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*>*)"], ["proof (state)\nthis:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "obtain Ps C where \"Ps \\<noteq> []\" and \"r = (Ps,C)\""], ["proof (prove)\nusing this:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps C.\n        \\<lbrakk>Ps \\<noteq> []; r = (Ps, C)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "from \\<open>extendRule S r = ([], \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)", "have \"\\<exists> S. r = ([],S)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<exists>S. r = ([], S)", "using extendRule_def[where forms=S and R=r]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n\ngoal (1 subgoal):\n 1. \\<exists>S. r = ([], S)", "by (cases r) (auto)"], ["proof (state)\nthis:\n  \\<exists>S. r = ([], S)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>S. r = ([], S)", "(*>*)"], ["proof (chain)\npicking this:\n  \\<exists>S. r = ([], S)", "obtain S where \"r = ([],S)\""], ["proof (prove)\nusing this:\n  \\<exists>S. r = ([], S)\n\ngoal (1 subgoal):\n 1. (\\<And>S. r = ([], S) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast   \\<comment> \\<open>Contradiction\\<close>"], ["proof (state)\nthis:\n  r = ([], S)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "using rules"], ["proof (prove)\nusing this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r \\<in> Ax \\<or> r \\<in> R'\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*", "show \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r \\<in> Ax \\<or> r \\<in> R'\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "(*<*)"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r \\<in> Ax \\<or> r \\<in> R'\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "using \\<open>n=0\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r \\<in> Ax \\<or> r \\<in> R'\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "(*>*)"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r \\<in> Ax \\<or> r \\<in> R'\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*>*)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "txt\\<open>\\noindent In the case where $n = n' + 1$ for some $n'$, we know the premisses are empty,\nand every premiss is derivable at a height lower than $n'$:\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "case (Suc n')"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  n = Suc n'", "have \"(\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs,n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n' + 1)\n    \\<in> derivable R*", "using a'"], ["proof (prove)\nusing this:\n  n = Suc n'\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n' + 1)\n    \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n' + 1)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n' + 1)\n  \\<in> derivable R*", "obtain Ps where \"(Ps, \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<in> R*\" and \n                       \"Ps \\<noteq> []\" and \n                       \"\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n' + 1)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>(Ps,\n                   \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n                 \\<in> R*;\n         Ps \\<noteq> [];\n         \\<forall>p\\<in>set Ps.\n            \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "(*<*)"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n' + 1)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>(Ps,\n                   \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n                 \\<in> R*;\n         Ps \\<noteq> [];\n         \\<forall>p\\<in>set Ps.\n            \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using characteriseLast[where C=\"\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs\" and m=n' and R=\"R*\"]"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n' + 1)\n  \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n' + 1)\n  \\<in> derivable R* \\<Longrightarrow>\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n     \\<in> R* \\<and>\n     (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>(Ps,\n                   \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n                 \\<in> R*;\n         Ps \\<noteq> [];\n         \\<forall>p\\<in>set Ps.\n            \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "(*>*)"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n' + 1)\n  \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n' + 1)\n  \\<in> derivable R* \\<Longrightarrow>\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n     \\<in> R* \\<and>\n     (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>(Ps,\n                   \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n                 \\<in> R*;\n         Ps \\<noteq> [];\n         \\<forall>p\\<in>set Ps.\n            \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*", "have \"\\<exists> r S. (r \\<in> Ax \\<or> r \\<in> R') \\<and> extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\""], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n       extendRule S r =\n       (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)", "using rules and ruleSet[where R'=R' and R=R and Ps=Ps and C=\"\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs\"]"], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>R' \\<subseteq> upRules; R = Ax \\<union> R';\n   (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n   \\<in> R*\\<rbrakk>\n  \\<Longrightarrow> \\<exists>S r.\n                       extendRule S r =\n                       (Ps,\n                         \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus>\n           Compound F Fs) \\<and>\n                       (r \\<in> R' \\<or> r \\<in> Ax)\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n       extendRule S r =\n       (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)", "by auto"], ["proof (state)\nthis:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*>*)"], ["proof (state)\nthis:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)", "obtain r S where \"r \\<in> Ax \\<or> r \\<in> R'\"  \n                  and \"extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\""], ["proof (prove)\nusing this:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. (\\<And>r S.\n        \\<lbrakk>r \\<in> Ax \\<or> r \\<in> R';\n         extendRule S r =\n         (Ps,\n           \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"r \\<in> Ax\"   \\<comment> \\<open>Gives a contradiction\\<close>"], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "have \"fst r = []\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. fst r = []", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> Ax; r = (a, b)\\<rbrakk> \\<Longrightarrow> fst r = []", "by (rule Ax.cases) auto"], ["proof (state)\nthis:\n  fst r = []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  fst r = []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "obtain x y where \"r = (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. r = (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r)"], ["proof (state)\nthis:\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r = (x, y)", "have \"x \\<noteq> []\""], ["proof (prove)\nusing this:\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. x \\<noteq> []", "using \\<open>Ps \\<noteq> []\\<close>\n                    and \\<open>extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\\<close> (*<*)\n                          and extendRule_def[where forms=S and R=r]\n                            and extend_def[where forms=S and seq=\"snd r\"]"], ["proof (prove)\nusing this:\n  r = (x, y)\n  Ps \\<noteq> []\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n  extend S (snd r) \\<equiv>\n   antec S + antec (snd r) \\<Rightarrow>* succ S + succ (snd r)\n\ngoal (1 subgoal):\n 1. x \\<noteq> []", "(*>*)"], ["proof (prove)\nusing this:\n  r = (x, y)\n  Ps \\<noteq> []\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n  extend S (snd r) \\<equiv>\n   antec S + antec (snd r) \\<Rightarrow>* succ S + succ (snd r)\n\ngoal (1 subgoal):\n 1. x \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  fst r = []\n  x \\<noteq> []", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  fst r = []\n  x \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "(*<*)"], ["proof (prove)\nusing this:\n  fst r = []\n  x \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "using \\<open>r=(x,y)\\<close>"], ["proof (prove)\nusing this:\n  fst r = []\n  x \\<noteq> []\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "(*>*)"], ["proof (prove)\nusing this:\n  fst r = []\n  x \\<noteq> []\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"r \\<in> R'\""], ["proof (state)\nthis:\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "obtain ps c where \"r = (ps,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps c. r = (ps, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r = (ps, c)", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "using rules and \\<open>r \\<in> R'\\<close>"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*>*)"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"(rightPrincipal r (Compound F Fs)) \\<or> \n                \\<not>(rightPrincipal r (Compound F Fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rightPrincipal r (Compound F Fs) \\<or>\n    \\<not> rightPrincipal r (Compound F Fs)", "by blast  \\<comment> \\<open>The formula is principal, or not\\<close>"], ["proof (state)\nthis:\n  rightPrincipal r (Compound F Fs) \\<or>\n  \\<not> rightPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  rightPrincipal r (Compound F Fs) \\<or>\n  \\<not> rightPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  rightPrincipal r (Compound F Fs) \\<or>\n  \\<not> rightPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*>*)"], ["proof (state)\nthis:\n  rightPrincipal r (Compound F Fs) \\<or>\n  \\<not> rightPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "txt\\<open>\\noindent If the formula is principal, then $\\Gamma' \\Rightarrow \\Delta'$ is amongst the premisses of $r$:\\<close>"], ["proof (state)\nthis:\n  rightPrincipal r (Compound F Fs) \\<or>\n  \\<not> rightPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  rightPrincipal r (Compound F Fs) \\<or>\n  \\<not> rightPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"rightPrincipal r (Compound F Fs)\""], ["proof (state)\nthis:\n  rightPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  rightPrincipal r (Compound F Fs)", "have \"(\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\""], ["proof (prove)\nusing this:\n  rightPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "using b' (*<*)and \\<open>r = (ps,c)\\<close> and \\<open>r \\<in> R'\\<close> and rules"], ["proof (prove)\nusing this:\n  rightPrincipal r (Compound F Fs)\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  r = (ps, c)\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "(*>*)"], ["proof (prove)\nusing this:\n  rightPrincipal r (Compound F Fs)\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  r = (ps, c)\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "have \"extend S (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps", "using \\<open>extendRule S r = (Ps,\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\\<close>\n      (*<*)  and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps", "(*>*)"], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps", "by (simp(*<*) add:extendContain(*>*))"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "from \\<open>rightPrincipal r (Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  rightPrincipal r (Compound F Fs)", "have \"c = (\\<Empt> \\<Rightarrow>* \\<LM>Compound F Fs\\<RM>)\""], ["proof (prove)\nusing this:\n  rightPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  rightPrincipal r (Compound F Fs)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)", "by (cases) auto"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "with \\<open>extendRule S r = (Ps,\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)", "(*>*)"], ["proof (chain)\npicking this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)", "have \"S = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "(*<*)"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "apply (auto simp add:extendRule_def extend_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>);\n     r = (ps,  \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>);\n     Ps = map (extend S) ps; \\<Gamma> = antec S; \\<Delta> = succ S\\<rbrakk>\n    \\<Longrightarrow> S = ( antec S \\<Rightarrow>* succ S)", "(*>*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>);\n     r = (ps,  \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>);\n     Ps = map (extend S) ps; \\<Gamma> = antec S; \\<Delta> = succ S\\<rbrakk>\n    \\<Longrightarrow> S = ( antec S \\<Rightarrow>* succ S)", "by (cases S) auto"], ["proof (state)\nthis:\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\""], ["proof (prove)\nusing this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps", "by (simp add:extend_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps", "have \"\\<exists> m\\<le>n'. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "using \\<open>\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "(*<*)"], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "using \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "(*>*)"], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "by (auto(*<*),rule_tac x=m in exI) (simp(*>*))"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  rightPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  rightPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  rightPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*>*)"], ["proof (state)\nthis:\n  rightPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "txt\\<open>\\noindent If the formula is not principal, then it must appear in the premisses.  The first two lines give a characterisation of the extension and conclusion, respectively.  Then, we apply the induction hypothesis\nat the lower height of the premisses:\\<close>"], ["proof (state)\nthis:\n  rightPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  rightPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"\\<not> rightPrincipal r (Compound F Fs)\""], ["proof (state)\nthis:\n  \\<not> rightPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "obtain \\<Phi> \\<Psi> where \"S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Phi> \\<Psi>.\n        S = ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases S) (auto)"], ["proof (state)\nthis:\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)", "obtain G H where \"c = (G \\<Rightarrow>* H)\""], ["proof (prove)\nusing this:\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>G H.\n        c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases c) (auto)"], ["proof (state)\nthis:\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  c = ( G \\<Rightarrow>* H)", "have \"\\<LM> Compound F Fs \\<RM> \\<noteq> H\"   \\<comment> \\<open>Proof omitted\\<close>"], ["proof (prove)\nusing this:\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "(*<*)"], ["proof (prove)\nusing this:\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "from \\<open>r = (ps,c)\\<close> and \\<open>r \\<in> upRules\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  r \\<in> upRules", "obtain T Ts where  \"c = (\\<Empt> \\<Rightarrow>* \\<LM>Compound T Ts\\<RM>) \\<or> c = (\\<LM>Compound T Ts\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. (\\<And>T Ts.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<or>\n        c =\n        ( \\<LM> Compound T\n                 Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using upRuleCharacterise[where Ps=ps and C=c]"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> upRules\n  (ps, c) \\<in> upRules \\<Longrightarrow>\n  \\<exists>F Fs.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n     c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. (\\<And>T Ts.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<or>\n        c =\n        ( \\<LM> Compound T\n                 Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "moreover"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "{"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "assume \"c = (\\<Empt> \\<Rightarrow>* \\<LM>Compound T Ts\\<RM>)\""], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>)\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "then"], ["proof (chain)\npicking this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>)", "have \"rightPrincipal r (Compound T Ts)\""], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>)\n\ngoal (1 subgoal):\n 1. rightPrincipal r (Compound T Ts)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. rightPrincipal r (Compound T Ts)", "by auto"], ["proof (state)\nthis:\n  rightPrincipal r (Compound T Ts)\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "with \\<open>\\<not> rightPrincipal r (Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  \\<not> rightPrincipal r (Compound F Fs)\n  rightPrincipal r (Compound T Ts)", "have \"Compound T Ts \\<noteq> Compound F Fs\""], ["proof (prove)\nusing this:\n  \\<not> rightPrincipal r (Compound F Fs)\n  rightPrincipal r (Compound T Ts)\n\ngoal (1 subgoal):\n 1. Compound T Ts \\<noteq> Compound F Fs", "by auto"], ["proof (state)\nthis:\n  Compound T Ts \\<noteq> Compound F Fs\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "then"], ["proof (chain)\npicking this:\n  Compound T Ts \\<noteq> Compound F Fs", "have \"\\<LM>Compound F Fs\\<RM> \\<noteq> H\""], ["proof (prove)\nusing this:\n  Compound T Ts \\<noteq> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "using \\<open>c = (G \\<Rightarrow>* H)\\<close> and \\<open>c = (\\<Empt> \\<Rightarrow>* \\<LM>Compound T Ts\\<RM>)\\<close>"], ["proof (prove)\nusing this:\n  Compound T Ts \\<noteq> Compound F Fs\n  c = ( G \\<Rightarrow>* H)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "by auto"], ["proof (state)\nthis:\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "}"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "moreover"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "{"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "assume \"c = (\\<LM>Compound T Ts\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (state)\nthis:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "then"], ["proof (chain)\npicking this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"\\<LM>Compound F Fs\\<RM> \\<noteq> H\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "using \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "by auto"], ["proof (state)\nthis:\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "}"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "ultimately"], ["proof (chain)\npicking this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "show \"\\<LM>Compound F Fs\\<RM> \\<noteq> H\""], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "by blast"], ["proof (state)\nthis:\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"succ S + succ (snd r) = (\\<Delta> \\<oplus> Compound F Fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ S + succ (snd r) = \\<Delta> \\<oplus> Compound F Fs", "using \\<open>extendRule S r = (Ps,\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\\<close>\n                         and extendRule_def[where forms=S and R=r]\n                         and extend_def[where forms=S and seq=\"snd r\"]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n  extend S (snd r) \\<equiv>\n   antec S + antec (snd r) \\<Rightarrow>* succ S + succ (snd r)\n\ngoal (1 subgoal):\n 1. succ S + succ (snd r) = \\<Delta> \\<oplus> Compound F Fs", "by auto"], ["proof (state)\nthis:\n  succ S + succ (snd r) = \\<Delta> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  succ S + succ (snd r) = \\<Delta> \\<oplus> Compound F Fs", "(*>*)"], ["proof (chain)\npicking this:\n  succ S + succ (snd r) = \\<Delta> \\<oplus> Compound F Fs", "have \"\\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs\""], ["proof (prove)\nusing this:\n  succ S + succ (snd r) = \\<Delta> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs", "using \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\\<close> and \\<open>r = (ps,c)\\<close> and \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (prove)\nusing this:\n  succ S + succ (snd r) = \\<Delta> \\<oplus> Compound F Fs\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n  r = (ps, c)\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs", "by auto"], ["proof (state)\nthis:\n  \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "from \\<open>r = (ps,c)\\<close> and \\<open>c = (G \\<Rightarrow>* H)\\<close> (*<*)and \\<open>r \\<in> upRules\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  c = ( G \\<Rightarrow>* H)\n  r \\<in> upRules", "(*>*)"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  c = ( G \\<Rightarrow>* H)\n  r \\<in> upRules", "have \"H = \\<Empt> \\<or> (\\<exists> A. H = \\<LM>A\\<RM>)\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  c = ( G \\<Rightarrow>* H)\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)", "(*<*)"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  c = ( G \\<Rightarrow>* H)\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)", "using succ_upRule[where Ps=ps and \\<Phi>=G and \\<Psi>=H]"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  c = ( G \\<Rightarrow>* H)\n  r \\<in> upRules\n  (ps,  G \\<Rightarrow>* H) \\<in> upRules \\<Longrightarrow>\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)", "(*>*)"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  c = ( G \\<Rightarrow>* H)\n  r \\<in> upRules\n  (ps,  G \\<Rightarrow>* H) \\<in> upRules \\<Longrightarrow>\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)", "by auto"], ["proof (state)\nthis:\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n  \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)", "have \"Compound F Fs \\<in># \\<Psi>\"   \\<comment> \\<open>Proof omitted\\<close>"], ["proof (prove)\nusing this:\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n  \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. Compound F Fs \\<in># \\<Psi>", "(*<*)"], ["proof (prove)\nusing this:\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n  \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. Compound F Fs \\<in># \\<Psi>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "have \"H = \\<Empt> \\<or> (\\<exists> A. H = \\<LM>A\\<RM>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)", "by fact"], ["proof (state)\nthis:\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "moreover"], ["proof (state)\nthis:\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "{"], ["proof (state)\nthis:\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "assume \"H = \\<Empt>\""], ["proof (state)\nthis:\n  H = \\<Empt>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "then"], ["proof (chain)\npicking this:\n  H = \\<Empt>", "have \"\\<Psi> = \\<Delta> \\<oplus> Compound F Fs\""], ["proof (prove)\nusing this:\n  H = \\<Empt>\n\ngoal (1 subgoal):\n 1. \\<Psi> = \\<Delta> \\<oplus> Compound F Fs", "using \\<open>\\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs\\<close>"], ["proof (prove)\nusing this:\n  H = \\<Empt>\n  \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<Psi> = \\<Delta> \\<oplus> Compound F Fs", "by auto"], ["proof (state)\nthis:\n  \\<Psi> = \\<Delta> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "then"], ["proof (chain)\npicking this:\n  \\<Psi> = \\<Delta> \\<oplus> Compound F Fs", "have \"Compound F Fs \\<in># \\<Psi>\""], ["proof (prove)\nusing this:\n  \\<Psi> = \\<Delta> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. Compound F Fs \\<in># \\<Psi>", "by auto"], ["proof (state)\nthis:\n  Compound F Fs \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "}"], ["proof (state)\nthis:\n  H = \\<Empt> \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "moreover"], ["proof (state)\nthis:\n  H = \\<Empt> \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "{"], ["proof (state)\nthis:\n  H = \\<Empt> \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "assume \"\\<exists> A. H = \\<LM>A\\<RM>\""], ["proof (state)\nthis:\n  \\<exists>A. H = \\<LM> A  \\<RM>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "then"], ["proof (chain)\npicking this:\n  \\<exists>A. H = \\<LM> A  \\<RM>", "obtain A where \"H = \\<LM>A\\<RM>\""], ["proof (prove)\nusing this:\n  \\<exists>A. H = \\<LM> A  \\<RM>\n\ngoal (1 subgoal):\n 1. (\\<And>A. H = \\<LM> A  \\<RM> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  H = \\<LM> A  \\<RM>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "then"], ["proof (chain)\npicking this:\n  H = \\<LM> A  \\<RM>", "have \"\\<Psi> \\<oplus> A = \\<Delta> \\<oplus> Compound F Fs\""], ["proof (prove)\nusing this:\n  H = \\<LM> A  \\<RM>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<oplus> A = \\<Delta> \\<oplus> Compound F Fs", "using \\<open>\\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs\\<close>"], ["proof (prove)\nusing this:\n  H = \\<LM> A  \\<RM>\n  \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<oplus> A = \\<Delta> \\<oplus> Compound F Fs", "by auto"], ["proof (state)\nthis:\n  \\<Psi> \\<oplus> A = \\<Delta> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "then"], ["proof (chain)\npicking this:\n  \\<Psi> \\<oplus> A = \\<Delta> \\<oplus> Compound F Fs", "have \"set_mset (\\<Psi> \\<oplus> A) = set_mset (\\<Delta> \\<oplus> Compound F Fs)\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<oplus> A = \\<Delta> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. set_mset (\\<Psi> \\<oplus> A) =\n    set_mset (\\<Delta> \\<oplus> Compound F Fs)", "by auto"], ["proof (state)\nthis:\n  set_mset (\\<Psi> \\<oplus> A) = set_mset (\\<Delta> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "then"], ["proof (chain)\npicking this:\n  set_mset (\\<Psi> \\<oplus> A) = set_mset (\\<Delta> \\<oplus> Compound F Fs)", "have \"set_mset \\<Psi> \\<union> {A} = set_mset \\<Delta> \\<union> {Compound F Fs}\""], ["proof (prove)\nusing this:\n  set_mset (\\<Psi> \\<oplus> A) = set_mset (\\<Delta> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. set_mset \\<Psi> \\<union> {A} =\n    set_mset \\<Delta> \\<union> {Compound F Fs}", "by auto"], ["proof (state)\nthis:\n  set_mset \\<Psi> \\<union> {A} = set_mset \\<Delta> \\<union> {Compound F Fs}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "moreover"], ["proof (state)\nthis:\n  set_mset \\<Psi> \\<union> {A} = set_mset \\<Delta> \\<union> {Compound F Fs}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "from \\<open>H = \\<LM>A\\<RM>\\<close> and \\<open>\\<LM>Compound F Fs\\<RM> \\<noteq> H\\<close>"], ["proof (chain)\npicking this:\n  H = \\<LM> A  \\<RM>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H", "have \"Compound F Fs \\<noteq> A\""], ["proof (prove)\nusing this:\n  H = \\<LM> A  \\<RM>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. Compound F Fs \\<noteq> A", "by auto"], ["proof (state)\nthis:\n  Compound F Fs \\<noteq> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "ultimately"], ["proof (chain)\npicking this:\n  set_mset \\<Psi> \\<union> {A} = set_mset \\<Delta> \\<union> {Compound F Fs}\n  Compound F Fs \\<noteq> A", "have \"Compound F Fs \\<in> set_mset \\<Psi>\""], ["proof (prove)\nusing this:\n  set_mset \\<Psi> \\<union> {A} = set_mset \\<Delta> \\<union> {Compound F Fs}\n  Compound F Fs \\<noteq> A\n\ngoal (1 subgoal):\n 1. Compound F Fs \\<in># \\<Psi>", "by auto"], ["proof (state)\nthis:\n  Compound F Fs \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "then"], ["proof (chain)\npicking this:\n  Compound F Fs \\<in># \\<Psi>", "have \"Compound F Fs \\<in># \\<Psi>\""], ["proof (prove)\nusing this:\n  Compound F Fs \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. Compound F Fs \\<in># \\<Psi>", "by auto"], ["proof (state)\nthis:\n  Compound F Fs \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "}"], ["proof (state)\nthis:\n  \\<exists>A. H = \\<LM> A  \\<RM> \\<Longrightarrow>\n  Compound F Fs \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> Compound F Fs;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>", "ultimately"], ["proof (chain)\npicking this:\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n  H = \\<Empt> \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>\n  \\<exists>A. H = \\<LM> A  \\<RM> \\<Longrightarrow>\n  Compound F Fs \\<in># \\<Psi>", "show \"Compound F Fs \\<in># \\<Psi>\""], ["proof (prove)\nusing this:\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n  H = \\<Empt> \\<Longrightarrow> Compound F Fs \\<in># \\<Psi>\n  \\<exists>A. H = \\<LM> A  \\<RM> \\<Longrightarrow>\n  Compound F Fs \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. Compound F Fs \\<in># \\<Psi>", "by blast"], ["proof (state)\nthis:\n  Compound F Fs \\<in># \\<Psi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Compound F Fs \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*>*)"], ["proof (state)\nthis:\n  Compound F Fs \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  Compound F Fs \\<in># \\<Psi>", "have \"\\<exists> \\<Psi>1. \\<Psi> = \\<Psi>1 \\<oplus> Compound F Fs\""], ["proof (prove)\nusing this:\n  Compound F Fs \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Psi>1. \\<Psi> = \\<Psi>1 \\<oplus> Compound F Fs", "by (*<*)(rule_tac x=\"\\<Psi> \\<ominus> Compound F Fs\" in exI)(*>*) (auto(*<*) simp add:multiset_eq_iff(*>*))"], ["proof (state)\nthis:\n  \\<exists>\\<Psi>1. \\<Psi> = \\<Psi>1 \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Psi>1. \\<Psi> = \\<Psi>1 \\<oplus> Compound F Fs", "obtain \\<Psi>1 where \"S = (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<Psi>1. \\<Psi> = \\<Psi>1 \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Psi>1.\n        S =\n        ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n                                Compound F Fs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "(*<*)"], ["proof (prove)\nusing this:\n  \\<exists>\\<Psi>1. \\<Psi> = \\<Psi>1 \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Psi>1.\n        S =\n        ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n                                Compound F Fs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>\\<Psi>1. \\<Psi> = \\<Psi>1 \\<oplus> Compound F Fs\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Psi>1.\n        S =\n        ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n                                Compound F Fs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "(*>*)"], ["proof (prove)\nusing this:\n  \\<exists>\\<Psi>1. \\<Psi> = \\<Psi>1 \\<oplus> Compound F Fs\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Psi>1.\n        S =\n        ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n                                Compound F Fs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"Ps = map (extend S) ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ps = map (extend S) ps", "using \\<open>extendRule S r = (Ps,\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\\<close> \n                 and extendRule_def[where forms=S and R=r] and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. Ps = map (extend S) ps", "by auto"], ["proof (state)\nthis:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  Ps = map (extend S) ps", "have \"\\<forall> p \\<in> set Ps. (\\<exists> p'. p = extend S p')\""], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'", "using ex_map_conv[where ys=Ps and f=\"extend S\"]"], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n  (\\<exists>xs. Ps = map (extend S) xs) =\n  (\\<forall>y\\<in>set Ps. \\<exists>x. y = extend S x)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'", "(*>*)"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'", "have \"\\<forall> p \\<in> set Ps. (Compound F Fs \\<in># succ p)\"  \\<comment> \\<open>Appears in every premiss\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. Compound F Fs \\<in># succ p", "(*<*)"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. Compound F Fs \\<in># succ p", "using \\<open>Compound F Fs \\<in># \\<Psi>\\<close> and \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'\n  Compound F Fs \\<in># \\<Psi>\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. Compound F Fs \\<in># succ p", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set Ps \\<longrightarrow>\n                   (\\<exists>p'.\n                       x = extend ( \\<Phi> \\<Rightarrow>* \\<Psi>) p');\n        Compound F Fs \\<in># \\<Psi>; S = ( \\<Phi> \\<Rightarrow>* \\<Psi>);\n        x \\<in> set Ps\\<rbrakk>\n       \\<Longrightarrow> Compound F Fs \\<in># succ x", "(*>*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set Ps \\<longrightarrow>\n                   (\\<exists>p'.\n                       x = extend ( \\<Phi> \\<Rightarrow>* \\<Psi>) p');\n        Compound F Fs \\<in># \\<Psi>; S = ( \\<Phi> \\<Rightarrow>* \\<Psi>);\n        x \\<in> set Ps\\<rbrakk>\n       \\<Longrightarrow> Compound F Fs \\<in># succ x", "by (*<*)(drule_tac x=x in spec)(*>*) (auto(*<*) simp add:extend_def(*>*))"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. Compound F Fs \\<in># succ p\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. Compound F Fs \\<in># succ p\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. Compound F Fs \\<in># succ p", "have a1:\"\\<forall> p \\<in> set Ps. \\<exists> \\<Phi>' \\<Psi>'. p = (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. Compound F Fs \\<in># succ p\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)", "using characteriseSeq"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. Compound F Fs \\<in># succ p\n  \\<exists>A B. ?C = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set Ps \\<longrightarrow>\n                   Compound F Fs \\<in># succ x;\n        \\<And>C. \\<exists>A B. C = ( A \\<Rightarrow>* B);\n        x \\<in> set Ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>'.\n                            x =\n                            ( \\<Phi>' \\<Rightarrow>* add_mset\n                (Compound F Fs) \\<Psi>')", "apply (drule_tac x=x in spec,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>C. \\<exists>A B. C = ( A \\<Rightarrow>* B);\n        x \\<in> set Ps; Compound F Fs \\<in># succ x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>'.\n                            x =\n                            ( \\<Phi>' \\<Rightarrow>* add_mset\n                (Compound F Fs) \\<Psi>')", "apply (rule_tac x=\"antec x\" in exI,rule_tac x=\"succ x \\<ominus> Compound F Fs\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>C. \\<exists>A B. C = ( A \\<Rightarrow>* B);\n        x \\<in> set Ps; Compound F Fs \\<in># succ x\\<rbrakk>\n       \\<Longrightarrow> x =\n                         ( antec\n                            x \\<Rightarrow>* add_mset (Compound F Fs)\n        (succ x \\<ominus> Compound F Fs))", "by (drule_tac x=x in meta_spec) (auto simp add:multiset_eq_iff)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*", "by fact"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*", "have \"\\<forall> p \\<in> set Ps. \\<exists> \\<Phi>' \\<Psi>' n. n\\<le>n' \\<and> (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs,n) \\<in> derivable R*\n                                                     \\<and> p = (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>' n.\n          n \\<le> n' \\<and>\n          ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs, n)\n          \\<in> derivable R* \\<and>\n          p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)", "by (auto simp add:Ball_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs, n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*>*)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs, n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs, n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)", "have (*<*)a2:(*>*) \"\\<forall> p \\<in> set Ps. \\<exists> \\<Phi>' \\<Psi>' m. m\\<le>n' \\<and> \n                                   (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',m) \\<in> derivable R* \\<and>\n                                   p = (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs, n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>' m.\n          m \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n          \\<in> derivable R* \\<and>\n          p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)", "using (*<*)\\<open>n = Suc n'\\<close> and b' and (*>*)IH"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs, n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n  n = Suc n'\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n            \\<in> derivable R*)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>' m.\n          m \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n          \\<in> derivable R* \\<and>\n          p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)", "(*<*)"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs, n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n  n = Suc n'\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n            \\<in> derivable R*)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>' m.\n          m \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n          \\<in> derivable R* \\<and>\n          p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set Ps \\<longrightarrow>\n                   (\\<exists>\\<Phi>' \\<Psi>' n.\n                       n \\<le> n' \\<and>\n                       ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs)\n           \\<Psi>',\n                        n)\n                       \\<in> derivable R* \\<and>\n                       x =\n                       ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs)\n           \\<Psi>'));\n        n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           rightPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( \\<Gamma> \\<Rightarrow>* add_mset (Compound F Fs) \\<Delta>,\n               m)\n              \\<in> derivable R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable R*);\n        x \\<in> set Ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( \\<Phi>' \\<Rightarrow>* add_mset\n                (Compound F Fs) \\<Psi>')", "apply (drule_tac x=x in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           rightPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( \\<Gamma> \\<Rightarrow>* add_mset (Compound F Fs) \\<Delta>,\n               m)\n              \\<in> derivable R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable R*);\n        x \\<in> set Ps;\n        x \\<in> set Ps \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>' n.\n            n \\<le> n' \\<and>\n            ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>', n)\n            \\<in> derivable R* \\<and>\n            x =\n            ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs)\n\\<Psi>'))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( \\<Phi>' \\<Rightarrow>* add_mset\n                (Compound F Fs) \\<Psi>')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           rightPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( \\<Gamma> \\<Rightarrow>* add_mset (Compound F Fs) \\<Delta>,\n               m)\n              \\<in> derivable R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable R*);\n        x \\<in> set Ps;\n        \\<exists>\\<Phi>' \\<Psi>' n.\n           n \\<le> n' \\<and>\n           ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>', n)\n           \\<in> derivable R* \\<and>\n           x =\n           ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs)\n                                     \\<Psi>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( \\<Phi>' \\<Rightarrow>* add_mset\n                (Compound F Fs) \\<Psi>')", "apply (elim exE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           rightPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( \\<Gamma> \\<Rightarrow>* add_mset (Compound F Fs) \\<Delta>,\n               m)\n              \\<in> derivable R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable R*);\n        x \\<in> set Ps; n \\<le> n';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>', n)\n        \\<in> derivable R*;\n        x =\n        ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( \\<Phi>' \\<Rightarrow>* add_mset\n                (Compound F Fs) \\<Psi>')", "apply (drule_tac x=n in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           rightPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        x \\<in> set Ps; n \\<le> n';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>', n)\n        \\<in> derivable R*;\n        x = ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>');\n        n < Suc n' \\<longrightarrow>\n        (\\<forall>\\<Gamma> \\<Delta>.\n            ( \\<Gamma> \\<Rightarrow>* add_mset (Compound F Fs) \\<Delta>, n)\n            \\<in> derivable R* \\<longrightarrow>\n            (\\<exists>m'\\<le>n.\n                ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                 m')\n                \\<in> derivable R*))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( \\<Phi>' \\<Rightarrow>* add_mset\n                (Compound F Fs) \\<Psi>')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           rightPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>', n)\n        \\<in> derivable R*;\n        x = ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>');\n        \\<forall>\\<Gamma> \\<Delta>.\n           ( \\<Gamma> \\<Rightarrow>* add_mset (Compound F Fs) \\<Delta>, n)\n           \\<in> derivable R* \\<longrightarrow>\n           (\\<exists>m'\\<le>n.\n               ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                m')\n               \\<in> derivable R*)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R*", "apply (drule_tac x=\\<Phi>' in spec,drule_tac x=\\<Psi>' in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           rightPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>', n)\n        \\<in> derivable R*;\n        x = ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>');\n        ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>', n)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<exists>m'\\<le>n.\n            ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m')\n            \\<in> derivable R*)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R*", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           rightPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>', n)\n        \\<in> derivable R*;\n        x = ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>');\n        \\<exists>m'\\<le>n.\n           ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m')\n           \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R*", "apply (elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>' n m'.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           rightPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>', n)\n        \\<in> derivable R*;\n        x = ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>');\n        m' \\<le> n \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m')\n        \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R*", "(*>*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>' n m'.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           rightPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>', n)\n        \\<in> derivable R*;\n        x = ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>');\n        m' \\<le> n \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m')\n        \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R*", "by(*<*) (rule_tac x=m' in exI)(*>*) (arith)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' m.\n        m \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "txt\\<open>\\noindent  To this set of new premisses, we apply a new instance of $r$, with a different extension:\\<close>"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' m.\n        m \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "obtain Ps' where eq: \"Ps' = map (extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Ps'.\n        Ps' =\n        map (extend\n              ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'))\n         ps \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps' =\n  map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  Ps' =\n  map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"length Ps = length Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length Ps = length Ps'", "using \\<open>Ps' = map (extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\\<close>\n                                            and \\<open>Ps = map (extend S) ps\\<close>"], ["proof (prove)\nusing this:\n  Ps' =\n  map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. length Ps = length Ps'", "by auto"], ["proof (state)\nthis:\n  length Ps = length Ps'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  length Ps = length Ps'", "have \"Ps' \\<noteq> []\""], ["proof (prove)\nusing this:\n  length Ps = length Ps'\n\ngoal (1 subgoal):\n 1. Ps' \\<noteq> []", "using \\<open>Ps \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  length Ps = length Ps'\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. Ps' \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  Ps' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "from \\<open>r \\<in> R'\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> R'", "have \"extendRule (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r \\<in> R*\""], ["proof (prove)\nusing this:\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r\n    \\<in> R*", "using rules"], ["proof (prove)\nusing this:\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r\n    \\<in> R*", "by auto"], ["proof (state)\nthis:\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r\n  \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r\n  \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"extendRule (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r = (Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r =\n    (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "using \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\\<close> and \\<open>extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\\<close> \n                 and \\<open>r = (ps,c)\\<close> and eq"], ["proof (prove)\nusing this:\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r = (ps, c)\n  Ps' =\n  map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r =\n    (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r =\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r\n  \\<in> R*\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r =\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "(*>*)"], ["proof (chain)\npicking this:\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r\n  \\<in> R*\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r =\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "have \"(Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> R*\""], ["proof (prove)\nusing this:\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r\n  \\<in> R*\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r =\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n\ngoal (1 subgoal):\n 1. (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n    \\<in> R*", "by simp"], ["proof (state)\nthis:\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have c1:\"\\<forall> p \\<in> set ps. extend S p \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps. extend S p \\<in> set Ps", "using \\<open>Ps = map (extend S) ps\\<close>"], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps. extend S p \\<in> set Ps", "by (simp add:Ball_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps. extend S p \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have c2:\"\\<forall> p \\<in> set ps. extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p \\<in> set Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n       \\<in> set Ps'", "using eq"], ["proof (prove)\nusing this:\n  Ps' =\n  map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n       \\<in> set Ps'", "by (simp add:Ball_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n     \\<in> set Ps'", "have eq2:\"\\<forall> p \\<in> set Ps'. \\<exists> \\<Phi>' \\<Psi>'. p = (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "using eq"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n     \\<in> set Ps'\n  Ps' =\n  map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "by (auto simp add: extend_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have d1:\"\\<forall> p \\<in> set Ps. \\<exists> p' \\<in> set ps. p = extend S p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'", "using \\<open>Ps = map (extend S) ps\\<close>"], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'", "have \"\\<forall> p \\<in> set Ps. \\<exists> p'. p' \\<in> set Ps'\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'", "using c2"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have d2: \"\\<forall> p \\<in> set Ps'. \\<exists> p' \\<in> set ps. p = extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>p'\\<in>set ps.\n          p =\n          extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'", "using eq"], ["proof (prove)\nusing this:\n  Ps' =\n  map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>p'\\<in>set ps.\n          p =\n          extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'", "have \"\\<forall> p \\<in> set Ps'. \\<exists> p'. p' \\<in> set Ps\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'. \\<exists>p'. p' \\<in> set Ps", "using c1"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'\n  \\<forall>p\\<in>set ps. extend S p \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'. \\<exists>p'. p' \\<in> set Ps", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'. \\<exists>p'. p' \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"\\<forall> \\<Phi>' \\<Psi>'. (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps \\<longrightarrow> \n                            (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "fix \\<Phi>' \\<Psi>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "assume \"(\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps\""], ["proof (state)\nthis:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "have \"\\<exists> p \\<in> set ps. extend (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) p = (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) p =\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)", "using \\<open>Ps = map (extend S) ps\\<close> and \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\\<close> and a1 and d1"], ["proof (prove)\nusing this:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps\n  Ps = map (extend S) ps\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) p =\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)", "apply (simp only:Ball_def Bex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n             \\<in> set (map (extend\n                              ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n                Compound F Fs))\n                         ps);\n     Ps =\n     map (extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs))\n      ps;\n     S = ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs);\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n             Compound F Fs))\n                      ps) \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            x = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs));\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n             Compound F Fs))\n                      ps) \\<longrightarrow>\n        (\\<exists>xa.\n            xa \\<in> set ps \\<and>\n            x =\n            extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n             xa)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n            Compound F Fs)\n                          x =\n                         ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus>\n            Compound F Fs)", "apply (drule_tac x=\" \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n             \\<in> set (map (extend\n                              ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n                Compound F Fs))\n                         ps);\n     Ps =\n     map (extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs))\n      ps;\n     S = ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs);\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n             Compound F Fs))\n                      ps) \\<longrightarrow>\n        (\\<exists>xa.\n            xa \\<in> set ps \\<and>\n            x =\n            extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n             xa);\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n     \\<in> set (map (extend\n                      ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n        Compound F Fs))\n                 ps) \\<longrightarrow>\n     (\\<exists>\\<Phi>'' \\<Psi>''.\n         ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n         ( \\<Phi>'' \\<Rightarrow>* \\<Psi>'' \\<oplus>\n                                   Compound F Fs))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n            Compound F Fs)\n                          x =\n                         ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus>\n            Compound F Fs)", "by (drule_tac x=\"\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs\" in spec) (auto)"], ["proof (state)\nthis:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) p =\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) p =\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)", "obtain p where t:\"p \\<in> set ps \\<and> (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) = extend (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) p\""], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) p =\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> set ps \\<and>\n        ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n        extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n         p \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>p.\n                   p \\<in> set ps \\<and>\n                   ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs)\n       \\<Psi>') =\n                   extend\n                    ( \\<Phi> \\<Rightarrow>* add_mset (Compound F Fs)\n       \\<Psi>1)\n                    p \\<Longrightarrow>\n                   thesis;\n        p \\<in> set ps;\n        extend ( \\<Phi> \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>1) p =\n        ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>')\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (drule_tac x=p in meta_spec) (simp)"], ["proof (state)\nthis:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) p\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) p", "obtain A B where \"p = (A \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) p\n\ngoal (1 subgoal):\n 1. (\\<And>A B.\n        p = ( A \\<Rightarrow>* B) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases p)"], ["proof (state)\nthis:\n  p = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  p = ( A \\<Rightarrow>* B)", "have \"(A \\<Rightarrow>* B) \\<in> set ps \\<and> (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) = extend (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) (A \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n    extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n     ( A \\<Rightarrow>* B)", "using t"], ["proof (prove)\nusing this:\n  p = ( A \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) p\n\ngoal (1 subgoal):\n 1. ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n    extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n     ( A \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n   ( A \\<Rightarrow>* B)", "have ant: \"\\<Phi>' = \\<Phi> + A\" and suc: \"\\<Psi>' \\<oplus> Compound F Fs = \\<Psi>1 \\<oplus> Compound F Fs + B\""], ["proof (prove)\nusing this:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<Phi>' = \\<Phi> + A &&&\n    \\<Psi>' \\<oplus> Compound F Fs = \\<Psi>1 \\<oplus> Compound F Fs + B", "using extend_def[where forms=\"\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs\" and seq=\"A \\<Rightarrow>* B\"]"], ["proof (prove)\nusing this:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n   ( A \\<Rightarrow>* B)\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n   ( A \\<Rightarrow>* B) \\<equiv>\n   antec ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) +\n   antec\n    ( A \\<Rightarrow>* B) \\<Rightarrow>* succ\n    ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) +\n   succ ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<Phi>' = \\<Phi> + A &&&\n    \\<Psi>' \\<oplus> Compound F Fs = \\<Psi>1 \\<oplus> Compound F Fs + B", "by auto"], ["proof (state)\nthis:\n  \\<Phi>' = \\<Phi> + A\n  \\<Psi>' \\<oplus> Compound F Fs = \\<Psi>1 \\<oplus> Compound F Fs + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "from ant"], ["proof (chain)\npicking this:\n  \\<Phi>' = \\<Phi> + A", "have \"\\<Phi>' + \\<Gamma>' = (\\<Phi> + \\<Gamma>') + A\""], ["proof (prove)\nusing this:\n  \\<Phi>' = \\<Phi> + A\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + A", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + A\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "moreover"], ["proof (state)\nthis:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + A\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "from suc"], ["proof (chain)\npicking this:\n  \\<Psi>' \\<oplus> Compound F Fs = \\<Psi>1 \\<oplus> Compound F Fs + B", "have \"\\<Psi>' = \\<Psi>1 + B\""], ["proof (prove)\nusing this:\n  \\<Psi>' \\<oplus> Compound F Fs = \\<Psi>1 \\<oplus> Compound F Fs + B\n\ngoal (1 subgoal):\n 1. \\<Psi>' = \\<Psi>1 + B", "by auto"], ["proof (state)\nthis:\n  \\<Psi>' = \\<Psi>1 + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  \\<Psi>' = \\<Psi>1 + B", "have \"\\<Psi>' + \\<Delta>' = (\\<Psi>1 + \\<Delta>') + B\""], ["proof (prove)\nusing this:\n  \\<Psi>' = \\<Psi>1 + B\n\ngoal (1 subgoal):\n 1. \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + A\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B", "have \"(\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') = extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') (A \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + A\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n     ( A \\<Rightarrow>* B)", "using extend_def[where forms=\"\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'\" and seq=\"A \\<Rightarrow>* B\"]"], ["proof (prove)\nusing this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + A\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( A \\<Rightarrow>* B) \\<equiv>\n   antec ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') +\n   antec\n    ( A \\<Rightarrow>* B) \\<Rightarrow>* succ\n    ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') +\n   succ ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n     ( A \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "moreover"], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "have \"extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') (A \\<Rightarrow>* B) \\<in> set Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n     ( A \\<Rightarrow>* B)\n    \\<in> set Ps'", "using \\<open>p = (A \\<Rightarrow>* B)\\<close> and t and c2"], ["proof (prove)\nusing this:\n  p = ( A \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) p\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n     ( A \\<Rightarrow>* B)\n    \\<in> set Ps'", "by auto"], ["proof (state)\nthis:\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "ultimately"], ["proof (chain)\npicking this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n  \\<in> set Ps'", "have \"(\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'", "by simp"], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "}"], ["proof (state)\nthis:\n  ( ?\\<Phi>'2 \\<Rightarrow>* ?\\<Psi>'2 \\<oplus> Compound F Fs)\n  \\<in> set Ps \\<Longrightarrow>\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "thus ?thesis"], ["proof (prove)\nusing this:\n  ( ?\\<Phi>'2 \\<Rightarrow>* ?\\<Psi>'2 \\<oplus> Compound F Fs)\n  \\<in> set Ps \\<Longrightarrow>\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "by blast"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"\\<forall> \\<Phi>' \\<Psi>'. (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps' \\<longrightarrow> (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "fix \\<Phi>' \\<Psi>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "assume \"(\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\""], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'", "have \"\\<exists> p \\<in> set ps. extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p = (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p =\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "using eq and eq2 and d2"], ["proof (prove)\nusing this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n  Ps' =\n  map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p =\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (simp only:Ball_def Bex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n             \\<in> set (map (extend\n                              ( \\<Phi> +\n                                \\<Gamma>' \\<Rightarrow>* \\<Psi>1 +\n                   \\<Delta>'))\n                         ps);\n     Ps' =\n     map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'))\n      ps;\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi> +\n                             \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'))\n                      ps) \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            x = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'));\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi> +\n                             \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'))\n                      ps) \\<longrightarrow>\n        (\\<exists>xa.\n            xa \\<in> set ps \\<and>\n            x =\n            extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n             xa)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi> +\n                            \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n                          x =\n                         ( \\<Phi>' +\n                           \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (drule_tac x=\"\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n             \\<in> set (map (extend\n                              ( \\<Phi> +\n                                \\<Gamma>' \\<Rightarrow>* \\<Psi>1 +\n                   \\<Delta>'))\n                         ps);\n     Ps' =\n     map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'))\n      ps;\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi> +\n                             \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'))\n                      ps) \\<longrightarrow>\n        (\\<exists>xa.\n            xa \\<in> set ps \\<and>\n            x =\n            extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n             xa);\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set (map (extend\n                      ( \\<Phi> +\n                        \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'))\n                 ps) \\<longrightarrow>\n     (\\<exists>\\<Phi>'' \\<Psi>''.\n         ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n         ( \\<Phi>'' +\n           \\<Gamma>' \\<Rightarrow>* \\<Psi>'' + \\<Delta>'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi> +\n                            \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n                          x =\n                         ( \\<Phi>' +\n                           \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "by (drule_tac x=\"\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'\" in spec) (auto)"], ["proof (state)\nthis:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p =\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p =\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "obtain p where t:\"p \\<in> set ps \\<and> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') = extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\""], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p =\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> set ps \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n        extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n         p \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>p.\n                   p \\<in> set ps \\<and>\n                   ( \\<Phi>' +\n                     \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n                   extend\n                    ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n                    p \\<Longrightarrow>\n                   thesis;\n        p \\<in> set ps;\n        extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p =\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (drule_tac x=p in meta_spec) (simp)"], ["proof (state)\nthis:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p", "obtain A B where \"p = (A \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n\ngoal (1 subgoal):\n 1. (\\<And>A B.\n        p = ( A \\<Rightarrow>* B) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases p)"], ["proof (state)\nthis:\n  p = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  p = ( A \\<Rightarrow>* B)", "have \"(A \\<Rightarrow>* B) \\<in> set ps \\<and> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') = extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') (A \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n     ( A \\<Rightarrow>* B)", "using t"], ["proof (prove)\nusing this:\n  p = ( A \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n\ngoal (1 subgoal):\n 1. ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n     ( A \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( A \\<Rightarrow>* B)", "have ant: \"\\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + A\" and suc: \"\\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B\""], ["proof (prove)\nusing this:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + A &&&\n    \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B", "using extend_def[where forms=\"\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'\" and seq=\"A \\<Rightarrow>* B\"]"], ["proof (prove)\nusing this:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( A \\<Rightarrow>* B) \\<equiv>\n   antec ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') +\n   antec\n    ( A \\<Rightarrow>* B) \\<Rightarrow>* succ\n    ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') +\n   succ ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + A &&&\n    \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B", "by auto"], ["proof (state)\nthis:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + A\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "from ant"], ["proof (chain)\npicking this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + A", "have \"\\<Phi>' + \\<Gamma>' = (\\<Phi> + A) + \\<Gamma>'\""], ["proof (prove)\nusing this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + A\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi> + A + \\<Gamma>'", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + A + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + A + \\<Gamma>'", "have \"\\<Phi>' = \\<Phi> + A\""], ["proof (prove)\nusing this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + A + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<Phi>' = \\<Phi> + A", "by simp"], ["proof (state)\nthis:\n  \\<Phi>' = \\<Phi> + A\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "moreover"], ["proof (state)\nthis:\n  \\<Phi>' = \\<Phi> + A\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "from suc"], ["proof (chain)\npicking this:\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B", "have \"\\<Psi>' + \\<Delta>' = (\\<Psi>1 + B) + \\<Delta>'\""], ["proof (prove)\nusing this:\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. \\<Psi>' + \\<Delta>' = \\<Psi>1 + B + \\<Delta>'", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + B + \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + B + \\<Delta>'", "have \"\\<Psi>' = \\<Psi>1 + B\""], ["proof (prove)\nusing this:\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + B + \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<Psi>' = \\<Psi>1 + B", "by simp"], ["proof (state)\nthis:\n  \\<Psi>' = \\<Psi>1 + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<Psi>' = \\<Psi>1 + B", "have \"\\<Psi>' \\<oplus> Compound F Fs = (\\<Psi>1 \\<oplus> Compound F Fs) + B\""], ["proof (prove)\nusing this:\n  \\<Psi>' = \\<Psi>1 + B\n\ngoal (1 subgoal):\n 1. \\<Psi>' \\<oplus> Compound F Fs = \\<Psi>1 \\<oplus> Compound F Fs + B", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Psi>' \\<oplus> Compound F Fs = \\<Psi>1 \\<oplus> Compound F Fs + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "ultimately"], ["proof (chain)\npicking this:\n  \\<Phi>' = \\<Phi> + A\n  \\<Psi>' \\<oplus> Compound F Fs = \\<Psi>1 \\<oplus> Compound F Fs + B", "have \"(\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) = extend (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) (A \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  \\<Phi>' = \\<Phi> + A\n  \\<Psi>' \\<oplus> Compound F Fs = \\<Psi>1 \\<oplus> Compound F Fs + B\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n    extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n     ( A \\<Rightarrow>* B)", "using extend_def[where forms=\"\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs\" and seq=\"A\\<Rightarrow>*B\"]"], ["proof (prove)\nusing this:\n  \\<Phi>' = \\<Phi> + A\n  \\<Psi>' \\<oplus> Compound F Fs = \\<Psi>1 \\<oplus> Compound F Fs + B\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n   ( A \\<Rightarrow>* B) \\<equiv>\n   antec ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) +\n   antec\n    ( A \\<Rightarrow>* B) \\<Rightarrow>* succ\n    ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) +\n   succ ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n    extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n     ( A \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "moreover"], ["proof (state)\nthis:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "have \"extend (\\<Phi>  \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs) (A \\<Rightarrow>* B) \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n     ( A \\<Rightarrow>* B)\n    \\<in> set Ps", "using \\<open>p = (A \\<Rightarrow>* B)\\<close> and t and c1\n                      and \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\\<close>"], ["proof (prove)\nusing this:\n  p = ( A \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n  \\<forall>p\\<in>set ps. extend S p \\<in> set Ps\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n     ( A \\<Rightarrow>* B)\n    \\<in> set Ps", "by auto"], ["proof (state)\nthis:\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n   ( A \\<Rightarrow>* B)\n  \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "ultimately"], ["proof (chain)\npicking this:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n   ( A \\<Rightarrow>* B)\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n   ( A \\<Rightarrow>* B)\n  \\<in> set Ps", "have \"(\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n   ( A \\<Rightarrow>* B)\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> Compound F Fs)\n   ( A \\<Rightarrow>* B)\n  \\<in> set Ps\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "by simp"], ["proof (state)\nthis:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "}"], ["proof (state)\nthis:\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps' \\<Longrightarrow>\n  ( ?\\<Phi>'2 \\<Rightarrow>* ?\\<Psi>'2 \\<oplus> Compound F Fs) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "thus ?thesis"], ["proof (prove)\nusing this:\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps' \\<Longrightarrow>\n  ( ?\\<Phi>'2 \\<Rightarrow>* ?\\<Psi>'2 \\<oplus> Compound F Fs) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "by blast"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps", "have \"\\<forall> \\<Phi>' \\<Psi>'. ((\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps) = ((\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps')\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       (( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n        \\<in> set Ps) =\n       (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n        \\<in> set Ps')", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')", "have \"\\<forall> p \\<in> set Ps'. \\<exists> \\<Phi>' \\<Psi>' n. n\\<le>n' \\<and> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',n) \\<in> derivable R*\n                                                \\<and> p = (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\""], ["proof (prove)\nusing this:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>' n.\n          n \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n          \\<in> derivable R* \\<and>\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "using eq2 and a2"], ["proof (prove)\nusing this:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' m.\n        m \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>' n.\n          n \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n          \\<in> derivable R* \\<and>\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                (( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>')\n                 \\<in> set Ps) =\n                (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                 \\<in> set Ps');\n     \\<forall>x.\n        x \\<in> set Ps' \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            x = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'));\n     \\<forall>x.\n        x \\<in> set Ps \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>' m.\n            m \\<le> n' \\<and>\n            ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n            \\<in> derivable R* \\<and>\n            x =\n            ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs)\n\\<Psi>'))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         x \\<in> set Ps' \\<longrightarrow>\n                         (\\<exists>\\<Phi>' \\<Psi>' n.\n                             n \\<le> n' \\<and>\n                             ( \\<Phi>' +\n                               \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                              n)\n                             \\<in> derivable R* \\<and>\n                             x =\n                             ( \\<Phi>' +\n                               \\<Gamma>' \\<Rightarrow>* \\<Psi>' +\n                  \\<Delta>'))", "apply (intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs)\n        \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>x.\n           x \\<in> set Ps' \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>'.\n               x =\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'));\n        \\<forall>x.\n           x \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable R* \\<and>\n               x =\n               ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>'));\n        x \\<in> set Ps'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (drule_tac x=x in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs)\n        \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>x.\n           x \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable R* \\<and>\n               x =\n               ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>'));\n        x \\<in> set Ps';\n        x \\<in> set Ps' \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            x =\n            ( \\<Phi>' +\n              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs)\n        \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>x.\n           x \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable R* \\<and>\n               x =\n               ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>'));\n        x \\<in> set Ps';\n        \\<exists>\\<Phi>' \\<Psi>'.\n           x =\n           ( \\<Phi>' +\n             \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>'.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs)\n        \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>x.\n           x \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable R* \\<and>\n               x =\n               ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>'));\n        x \\<in> set Ps';\n        x =\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (drule_tac x=\\<Phi>' in spec,drule_tac x=\\<Psi>' in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>'.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set Ps \\<longrightarrow>\n                   (\\<exists>\\<Phi>' \\<Psi>' m.\n                       m \\<le> n' \\<and>\n                       ( \\<Phi>' +\n                         \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                        m)\n                       \\<in> derivable R* \\<and>\n                       x =\n                       ( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs)\n           \\<Psi>'));\n        x \\<in> set Ps';\n        x = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>');\n        (( \\<Phi>' \\<Rightarrow>* add_mset (Compound F Fs) \\<Psi>')\n         \\<in> set Ps) =\n        (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n         \\<in> set Ps')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "by (drule_tac x=\"\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> Compound F Fs\" in spec) (simp)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*>*)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "have \"\\<forall> p \\<in> set Ps'. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "using (*<*)\\<open>n = Suc n'\\<close> and \\<open>Ps' \\<noteq> []\\<close>\n    and(*>*) \\<open>(Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> R*\\<close> (*<*)\n       and derivable.step[where r=\"(Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\" and R=\"R*\"]"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  n = Suc n'\n  Ps' \\<noteq> []\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> R*\n  \\<lbrakk>(Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n           \\<in> R*;\n   fst (Ps',\n         \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<noteq>\n   [];\n   \\<forall>p\\<in>set (fst (Ps',\n                             \\<Gamma> +\n                             \\<Gamma>' \\<Rightarrow>* \\<Delta> +\n                \\<Delta>')).\n      \\<exists>n\\<le>?m. (p, n) \\<in> derivable R*\\<rbrakk>\n  \\<Longrightarrow> (snd (Ps',\n                           \\<Gamma> +\n                           \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>'),\n                     ?m + 1)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "(*>*)"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  n = Suc n'\n  Ps' \\<noteq> []\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> R*\n  \\<lbrakk>(Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n           \\<in> R*;\n   fst (Ps',\n         \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<noteq>\n   [];\n   \\<forall>p\\<in>set (fst (Ps',\n                             \\<Gamma> +\n                             \\<Gamma>' \\<Rightarrow>* \\<Delta> +\n                \\<Delta>')).\n      \\<exists>n\\<le>?m. (p, n) \\<in> derivable R*\\<rbrakk>\n  \\<Longrightarrow> (snd (Ps',\n                           \\<Gamma> +\n                           \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>'),\n                     ?m + 1)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "by (auto(*<*) simp add:Ball_def Bex_def(*>*))"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*<*)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  rightPrincipal r (Compound F Fs) \\<or>\n  \\<not> rightPrincipal r (Compound F Fs)\n  rightPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n  \\<not> rightPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  rightPrincipal r (Compound F Fs) \\<or>\n  \\<not> rightPrincipal r (Compound F Fs)\n  rightPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n  \\<not> rightPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> R' \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "(*>*)"], ["proof (state)\nthis:\n  r \\<in> R' \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "txt\\<open>\\noindent All of the cases are now complete.\\<close>"], ["proof (state)\nthis:\n  r \\<in> R' \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*", "show \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal:\nNo subgoals!", "(*<*)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal:\nNo subgoals!", "(*>*)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(* --------------------------------------------\n   --------------------------------------------\n               G3cp EXAMPLE\n   --------------------------------------------\n   -------------------------------------------- *)"], ["", "text\\<open>\nAs an example, we show the left premiss of $R\\wedge$ in \\textbf{G3cp} is derivable at a height not greater than that of the conclusion.  The two results used in the proof (\\texttt{principal-means-premiss} and \\texttt{rightInvertible}) are those we have previously shown:\n\\<close>"], ["", "lemma conRInvert:\nassumes \"(\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> (A \\<and>* B),n) \\<in> derivable (g3cp \\<union> Ax)*\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A,m) \\<in> derivable (g3cp \\<union> Ax)*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A, m)\n       \\<in> derivable g3cp \\<union> Ax*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A, m)\n       \\<in> derivable g3cp \\<union> Ax*", "have \"\\<forall> r \\<in> g3cp. rightPrincipal r (A \\<and>* B) \\<longrightarrow> (\\<Empt> \\<Rightarrow>* \\<LM> A \\<RM>) \\<in> set (fst r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>g3cp.\n       rightPrincipal r (A \\<and>* B) \\<longrightarrow>\n       ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> set (fst r)", "using principal_means_premiss"], ["proof (prove)\nusing this:\n  \\<lbrakk>rightPrincipal ?r (?A \\<and>* ?B); ?r \\<in> g3cp\\<rbrakk>\n  \\<Longrightarrow> ( \\<Empt> \\<Rightarrow>* \\<LM> ?A  \\<RM>)\n                    \\<in> set (fst ?r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>g3cp.\n       rightPrincipal r (A \\<and>* B) \\<longrightarrow>\n       ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> set (fst r)", "by auto"], ["proof (state)\nthis:\n  \\<forall>r\\<in>g3cp.\n     rightPrincipal r (A \\<and>* B) \\<longrightarrow>\n     ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> set (fst r)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A, m)\n       \\<in> derivable g3cp \\<union> Ax*", "with assms"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> (A \\<and>* B), n)\n  \\<in> derivable g3cp \\<union> Ax*\n  \\<forall>r\\<in>g3cp.\n     rightPrincipal r (A \\<and>* B) \\<longrightarrow>\n     ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> set (fst r)", "show ?thesis"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> (A \\<and>* B), n)\n  \\<in> derivable g3cp \\<union> Ax*\n  \\<forall>r\\<in>g3cp.\n     rightPrincipal r (A \\<and>* B) \\<longrightarrow>\n     ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> set (fst r)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A, m)\n       \\<in> derivable g3cp \\<union> Ax*", "using rightInvertible(*<*)[where R'=\"g3cp\" and \\<Gamma>'=\"\\<Empt>\" and \\<Delta>'=\"\\<LM> A \\<RM>\" \n                           and R=\"g3cp \\<union> Ax\"]"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> (A \\<and>* B), n)\n  \\<in> derivable g3cp \\<union> Ax*\n  \\<forall>r\\<in>g3cp.\n     rightPrincipal r (A \\<and>* B) \\<longrightarrow>\n     ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> set (fst r)\n  \\<lbrakk>g3cp \\<subseteq> upRules \\<and>\n           g3cp \\<union> Ax = Ax \\<union> g3cp;\n   ( ?\\<Gamma> \\<Rightarrow>* ?\\<Delta> \\<oplus> Compound ?F ?Fs, ?n)\n   \\<in> derivable g3cp \\<union> Ax*;\n   \\<forall>r'\\<in>g3cp \\<union> Ax.\n      rightPrincipal r' (Compound ?F ?Fs) \\<longrightarrow>\n      ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> set (fst r')\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m\\<le>?n.\n                       ( ?\\<Gamma> +\n                         \\<Empt> \\<Rightarrow>* ?\\<Delta> \\<oplus> A,\n                        m)\n                       \\<in> derivable g3cp \\<union> Ax*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A, m)\n       \\<in> derivable g3cp \\<union> Ax*", "(*>*)"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> (A \\<and>* B), n)\n  \\<in> derivable g3cp \\<union> Ax*\n  \\<forall>r\\<in>g3cp.\n     rightPrincipal r (A \\<and>* B) \\<longrightarrow>\n     ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> set (fst r)\n  \\<lbrakk>g3cp \\<subseteq> upRules \\<and>\n           g3cp \\<union> Ax = Ax \\<union> g3cp;\n   ( ?\\<Gamma> \\<Rightarrow>* ?\\<Delta> \\<oplus> Compound ?F ?Fs, ?n)\n   \\<in> derivable g3cp \\<union> Ax*;\n   \\<forall>r'\\<in>g3cp \\<union> Ax.\n      rightPrincipal r' (Compound ?F ?Fs) \\<longrightarrow>\n      ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> set (fst r')\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m\\<le>?n.\n                       ( ?\\<Gamma> +\n                         \\<Empt> \\<Rightarrow>* ?\\<Delta> \\<oplus> A,\n                        m)\n                       \\<in> derivable g3cp \\<union> Ax*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A, m)\n       \\<in> derivable g3cp \\<union> Ax*", "by (auto(*<*) simp add:Un_commute Ball_def nonPrincipalID g3cp_upRules(*>*))"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A, m)\n     \\<in> derivable g3cp \\<union> Ax*\n\ngoal:\nNo subgoals!", "qed"], ["", "(* --------------------------------------------\n   --------------------------------------------\n             G3cp EXAMPLE ENDS\n   --------------------------------------------\n   -------------------------------------------- *)"], ["", "text\\<open>\n\\noindent  We can obviously show the equivalent proof for left rules, too:\n\\<close>"], ["", "lemma leftInvertible:\nfixes \\<Gamma> \\<Delta> :: \"'a form multiset\"\nassumes rules: \"R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\"\n  and   a: \"(\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>,n) \\<in> derivable R*\"\n  and   b: \"\\<forall> r' \\<in> R. leftPrincipal r' (Compound F Fs) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> +\\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "using assms"], ["proof (prove)\nusing this:\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "proof (induct n arbitrary:\\<Gamma> \\<Delta> rule:nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<Delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   R' \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R' \\<longrightarrow>\n                   (\\<forall>x xa.\n                       ( x \\<oplus> Compound F Fs \\<Rightarrow>* xa, m)\n                       \\<in> derivable R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           leftPrincipal r'\n                            (Compound F Fs) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>',\n                            ma)\n                           \\<in> derivable R*));\n        R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n)\n        \\<in> derivable R*;\n        \\<forall>r'\\<in>R.\n           leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> +\n                              \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                             m)\n                            \\<in> derivable R*", "case (1 n \\<Gamma> \\<Delta>)"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     R' \\<subseteq> upRules \\<and> R = Ax \\<union> R' \\<longrightarrow>\n     (\\<forall>x xa.\n         ( x \\<oplus> Compound F Fs \\<Rightarrow>* xa, m)\n         \\<in> derivable R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>', ma)\n             \\<in> derivable R*))\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<Delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   R' \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R' \\<longrightarrow>\n                   (\\<forall>x xa.\n                       ( x \\<oplus> Compound F Fs \\<Rightarrow>* xa, m)\n                       \\<in> derivable R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           leftPrincipal r'\n                            (Compound F Fs) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>',\n                            ma)\n                           \\<in> derivable R*));\n        R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n)\n        \\<in> derivable R*;\n        \\<forall>r'\\<in>R.\n           leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> +\n                              \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                             m)\n                            \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     R' \\<subseteq> upRules \\<and> R = Ax \\<union> R' \\<longrightarrow>\n     (\\<forall>x xa.\n         ( x \\<oplus> Compound F Fs \\<Rightarrow>* xa, m)\n         \\<in> derivable R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>', ma)\n             \\<in> derivable R*))\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')", "have IH:\"\\<forall>m<n. \\<forall>\\<Gamma> \\<Delta>. ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, m) \\<in> derivable R* \\<longrightarrow>\n              (\\<forall>r' \\<in> R. leftPrincipal r' (Compound F Fs) \\<longrightarrow> ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')) \\<longrightarrow>\n              (\\<exists>m'\\<le>m. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m') \\<in> derivable R*)\" \n     and a': \"(\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>,n) \\<in> derivable R*\" \n     and b': \"\\<forall> r' \\<in> R. leftPrincipal r' (Compound F Fs) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     R' \\<subseteq> upRules \\<and> R = Ax \\<union> R' \\<longrightarrow>\n     (\\<forall>x xa.\n         ( x \\<oplus> Compound F Fs \\<Rightarrow>* xa, m)\n         \\<in> derivable R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>', ma)\n             \\<in> derivable R*))\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n\ngoal (1 subgoal):\n 1. \\<forall>m<n.\n       \\<forall>\\<Gamma> \\<Delta>.\n          ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, m)\n          \\<in> derivable R* \\<longrightarrow>\n          (\\<forall>r'\\<in>R.\n              leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n              ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n              \\<in> set (fst r')) \\<longrightarrow>\n          (\\<exists>m'\\<le>m.\n              ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n               m')\n              \\<in> derivable R*) &&&\n    ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n)\n    \\<in> derivable R* &&&\n    \\<forall>r'\\<in>R.\n       leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')", "by auto"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n            \\<in> derivable R*)\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<Delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   R' \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R' \\<longrightarrow>\n                   (\\<forall>x xa.\n                       ( x \\<oplus> Compound F Fs \\<Rightarrow>* xa, m)\n                       \\<in> derivable R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           leftPrincipal r'\n                            (Compound F Fs) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>',\n                            ma)\n                           \\<in> derivable R*));\n        R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n)\n        \\<in> derivable R*;\n        \\<forall>r'\\<in>R.\n           leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> +\n                              \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                             m)\n                            \\<in> derivable R*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  n = 0", "have \"(\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, 0)\n    \\<in> derivable R*", "using a'"], ["proof (prove)\nusing this:\n  n = 0\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, 0)\n    \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, 0)\n  \\<in> derivable R*", "have \"([],\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<in> R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, 0)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<in> R*", "by (cases) (auto)"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<in> R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<in> R*", "have \"\\<exists> r S. extendRule S r = ([],\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<and> (r \\<in> Ax \\<or> r \\<in> R')\""], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       extendRule S r =\n       ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<and>\n       (r \\<in> Ax \\<or> r \\<in> R')", "using rules and ruleSet[where Ps=\"[]\" and C=\"\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>\" and R'=R' and R=R]"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<in> R*\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>R' \\<subseteq> upRules; R = Ax \\<union> R';\n   ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n   \\<in> R*\\<rbrakk>\n  \\<Longrightarrow> \\<exists>S r.\n                       extendRule S r =\n                       ([],\n                         \\<Gamma> \\<oplus>\n                         Compound F Fs \\<Rightarrow>* \\<Delta>) \\<and>\n                       (r \\<in> R' \\<or> r \\<in> Ax)\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       extendRule S r =\n       ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<and>\n       (r \\<in> Ax \\<or> r \\<in> R')", "by (auto)"], ["proof (state)\nthis:\n  \\<exists>r S.\n     extendRule S r =\n     ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R')\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>r S.\n     extendRule S r =\n     ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R')", "obtain r S where \"extendRule S r = ([],\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\" and \"r \\<in> Ax \\<or> r \\<in> R'\""], ["proof (prove)\nusing this:\n  \\<exists>r S.\n     extendRule S r =\n     ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R')\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>extendRule S r =\n                 ([],\n                   \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>);\n         r \\<in> Ax \\<or> r \\<in> R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"r \\<in> Ax\""], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "obtain i where \"([], \\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>) = r \\<or> r = ([],\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) = r \\<or>\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseAx[where r=r]"], ["proof (prove)\nusing this:\n  r \\<in> Ax\n  r \\<in> Ax \\<Longrightarrow>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  (\\<exists>i.\n      r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) = r \\<or>\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) = r \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) = r \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) = r \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"r = ([], \\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>)\""], ["proof (state)\nthis:\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "with \\<open>extendRule S r = ([],\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)", "have \"extend S (\\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>) = (\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n    ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)", "using extendRule_def[where R=\"([],\\<LM>At i\\<RM>\\<Rightarrow>*\\<LM>At i\\<RM>)\" and forms=S]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n  extendRule S\n   ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<equiv>\n  (map (extend S)\n    (fst ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)),\n   extend S (snd ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)))\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n    ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)", "by auto"], ["proof (state)\nthis:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)", "have \"At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "using extendID[where S=S and i=i and \\<Gamma>=\"\\<Gamma> \\<oplus> Compound F Fs\" and \\<Delta>=\\<Delta>]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<oplus>\n    Compound F Fs \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n  At i \\<in># \\<Gamma> \\<oplus> Compound F Fs \\<and> At i \\<in># \\<Delta>\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "by auto"], ["proof (state)\nthis:\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "have \"At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'\""], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'", "by auto"], ["proof (state)\nthis:\n  At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "using rules\n                and containID[where \\<Gamma>=\"\\<Gamma> + \\<Gamma>'\" and i=i and \\<Delta>=\"\\<Delta> + \\<Delta>'\" and R=R]"], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>At i \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n           At i \\<in># \\<Delta> + \\<Delta>';\n   Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> +\n                      \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                     0)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r =\n  ([],\n    \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r =\n  ([],\n    \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r =\n  ([],\n    \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"r = ([],\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "with \\<open>extendRule S r = ([],\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"extend S (\\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) = (\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)", "using extendRule_def[where R=\"([],\\<LM>ff\\<RM>\\<Rightarrow>*\\<Empt>)\" and forms=S]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  extendRule S ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<equiv>\n  (map (extend S) (fst ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)),\n   extend S (snd ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)))\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)", "by auto"], ["proof (state)\nthis:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)", "have \"ff \\<in># \\<Gamma>\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "using extendFalsum[where S=S and \\<Gamma>=\"\\<Gamma>\\<oplus>Compound F Fs\" and \\<Delta>=\\<Delta>]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<oplus>\n    Compound F Fs \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n  ff \\<in># \\<Gamma> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma>", "have \"ff \\<in># \\<Gamma> + \\<Gamma>'\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma> + \\<Gamma>'", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "using rules\n                and containFalsum[where \\<Gamma>=\"\\<Gamma> + \\<Gamma>'\" and \\<Delta>=\"\\<Delta> + \\<Delta>'\" and R=R]"], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>ff \\<in># \\<Gamma> + \\<Gamma>'; Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> +\n                      \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                     0)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) = r \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  r =\n  ([],\n    \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) = r \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  r =\n  ([],\n    \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"r \\<in> R'\""], ["proof (state)\nthis:\n  r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R'", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "using rules"], ["proof (prove)\nusing this:\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> upRules", "have \"\\<exists> Ps C. Ps \\<noteq> [] \\<and> r = (Ps,C)\""], ["proof (prove)\nusing this:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "obtain x y where \"r = (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. r = (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r)"], ["proof (state)\nthis:\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "with \\<open>r \\<in> upRules\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> upRules\n  r = (x, y)", "have \"(x,y) \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> upRules\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> upRules", "by simp"], ["proof (state)\nthis:\n  (x, y) \\<in> upRules\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> upRules", "obtain Ps where \"(Ps :: 'a sequent list) \\<noteq> []\" and \"x=Ps\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> upRules\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> []; x = Ps\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases) (auto)"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  x = Ps\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "with \\<open>r = (x,y)\\<close>"], ["proof (chain)\npicking this:\n  r = (x, y)\n  Ps \\<noteq> []\n  x = Ps", "have \"r = (Ps, y)\""], ["proof (prove)\nusing this:\n  r = (x, y)\n  Ps \\<noteq> []\n  x = Ps\n\ngoal (1 subgoal):\n 1. r = (Ps, y)", "by simp"], ["proof (state)\nthis:\n  r = (Ps, y)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "then"], ["proof (chain)\npicking this:\n  r = (Ps, y)", "show \"\\<exists> Ps C. Ps \\<noteq> [] \\<and> r = (Ps,C)\""], ["proof (prove)\nusing this:\n  r = (Ps, y)\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "using \\<open>Ps \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  r = (Ps, y)\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "by blast"], ["proof (state)\nthis:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "obtain Ps C where \"Ps \\<noteq> []\" and \"r = (Ps,C)\""], ["proof (prove)\nusing this:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps C.\n        \\<lbrakk>Ps \\<noteq> []; r = (Ps, C)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "from \\<open>extendRule S r = ([], \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)", "have \"\\<exists> S. r = ([],S)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>S. r = ([], S)", "using extendRule_def[where forms=S and R=r]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n\ngoal (1 subgoal):\n 1. \\<exists>S. r = ([], S)", "by (cases r) (auto)"], ["proof (state)\nthis:\n  \\<exists>S. r = ([], S)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>S. r = ([], S)", "obtain S where \"r = ([],S)\""], ["proof (prove)\nusing this:\n  \\<exists>S. r = ([], S)\n\ngoal (1 subgoal):\n 1. (\\<And>S. r = ([], S) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  r = ([], S)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<or> r \\<in> R'\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*", "show \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<or> r \\<in> R'\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "using \\<open>n=0\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<or> r \\<in> R'\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "case (Suc n')"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  n = Suc n'", "have \"(\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>,n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n' + 1)\n    \\<in> derivable R*", "using a'"], ["proof (prove)\nusing this:\n  n = Suc n'\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n' + 1)\n    \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n' + 1)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n' + 1)\n  \\<in> derivable R*", "obtain Ps where \"(Ps, \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<in> R*\" and \n                          \"Ps \\<noteq> []\" and \n                          \"\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n' + 1)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>(Ps,\n                   \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n                 \\<in> R*;\n         Ps \\<noteq> [];\n         \\<forall>p\\<in>set Ps.\n            \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using characteriseLast[where C=\"\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>\" and m=n' and R=\"R*\"]"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n' + 1)\n  \\<in> derivable R*\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n' + 1)\n  \\<in> derivable R* \\<Longrightarrow>\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n     \\<in> R* \\<and>\n     (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>(Ps,\n                   \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n                 \\<in> R*;\n         Ps \\<noteq> [];\n         \\<forall>p\\<in>set Ps.\n            \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*", "have \"\\<exists> r S. (r \\<in> Ax \\<or> r \\<in> R') \\<and> extendRule S r = (Ps, \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n       extendRule S r =\n       (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)", "using rules ruleSet[where R'=R' and R=R and Ps=Ps and C=\"\\<Gamma>\\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>\"]"], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>R' \\<subseteq> upRules; R = Ax \\<union> R';\n   (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n   \\<in> R*\\<rbrakk>\n  \\<Longrightarrow> \\<exists>S r.\n                       extendRule S r =\n                       (Ps,\n                         \\<Gamma> \\<oplus>\n                         Compound F Fs \\<Rightarrow>* \\<Delta>) \\<and>\n                       (r \\<in> R' \\<or> r \\<in> Ax)\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n       extendRule S r =\n       (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)", "obtain r S where \"r \\<in> Ax \\<or> r \\<in> R'\" and \"extendRule S r = (Ps, \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. (\\<And>r S.\n        \\<lbrakk>r \\<in> Ax \\<or> r \\<in> R';\n         extendRule S r =\n         (Ps,\n           \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"r \\<in> Ax\""], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "have \"fst r = []\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. fst r = []", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> Ax; r = (a, b)\\<rbrakk> \\<Longrightarrow> fst r = []", "by (rule Ax.cases) auto"], ["proof (state)\nthis:\n  fst r = []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  fst r = []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "obtain x y where \"r = (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. r = (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r)"], ["proof (state)\nthis:\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r = (x, y)", "have \"x \\<noteq> []\""], ["proof (prove)\nusing this:\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. x \\<noteq> []", "using \\<open>Ps \\<noteq> []\\<close> and \\<open>extendRule S r = (Ps, \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\\<close>\n                            and extendRule_def[where forms=S and R=r]\n                            and extend_def[where forms=S and seq=\"snd r\"]"], ["proof (prove)\nusing this:\n  r = (x, y)\n  Ps \\<noteq> []\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n  extend S (snd r) \\<equiv>\n   antec S + antec (snd r) \\<Rightarrow>* succ S + succ (snd r)\n\ngoal (1 subgoal):\n 1. x \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  fst r = []\n  x \\<noteq> []", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  fst r = []\n  x \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "using \\<open>r=(x,y)\\<close>"], ["proof (prove)\nusing this:\n  fst r = []\n  x \\<noteq> []\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"r \\<in> R'\""], ["proof (state)\nthis:\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "obtain ps c where \"r = (ps,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps c. r = (ps, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r = (ps, c)", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "using rules and \\<open>r \\<in> R'\\<close>"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"(leftPrincipal r (Compound F Fs)) \\<or> \\<not>(leftPrincipal r (Compound F Fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftPrincipal r (Compound F Fs) \\<or>\n    \\<not> leftPrincipal r (Compound F Fs)", "by blast"], ["proof (state)\nthis:\n  leftPrincipal r (Compound F Fs) \\<or>\n  \\<not> leftPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  leftPrincipal r (Compound F Fs) \\<or>\n  \\<not> leftPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  leftPrincipal r (Compound F Fs) \\<or>\n  \\<not> leftPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"leftPrincipal r (Compound F Fs)\""], ["proof (state)\nthis:\n  leftPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  leftPrincipal r (Compound F Fs)", "have \"(\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\""], ["proof (prove)\nusing this:\n  leftPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "using b' and \\<open>r = (ps,c)\\<close> and \\<open>r \\<in> R'\\<close> and rules"], ["proof (prove)\nusing this:\n  leftPrincipal r (Compound F Fs)\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  r = (ps, c)\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "have \"extend S (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps", "using \\<open>extendRule S r = (Ps,\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\\<close>\n                  and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps", "by (simp add:extendContain)"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "from \\<open>leftPrincipal r (Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  leftPrincipal r (Compound F Fs)", "have \"c = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  leftPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "using  \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  leftPrincipal r (Compound F Fs)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "by (cases) auto"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "with \\<open>extendRule S r = (Ps,\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"S = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "apply (auto simp add:extendRule_def extend_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>);\n     r = (ps,  \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>);\n     Ps = map (extend S) ps; \\<Gamma> = antec S; \\<Delta> = succ S\\<rbrakk>\n    \\<Longrightarrow> S = ( antec S \\<Rightarrow>* succ S)", "by (cases S) auto"], ["proof (state)\nthis:\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\""], ["proof (prove)\nusing this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps", "by (simp add:extend_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps", "have \"\\<exists> m\\<le>n'. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "using \\<open>\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "using \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "by (auto,rule_tac x=m in exI) (simp)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  leftPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  leftPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  leftPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "assume \"\\<not> leftPrincipal r (Compound F Fs)\""], ["proof (state)\nthis:\n  \\<not> leftPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "obtain \\<Phi> \\<Psi> where \"S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Phi> \\<Psi>.\n        S = ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases S) (auto)"], ["proof (state)\nthis:\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)", "obtain G H where \"c = (G \\<Rightarrow>* H)\""], ["proof (prove)\nusing this:\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>G H.\n        c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases c) (auto)"], ["proof (state)\nthis:\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  c = ( G \\<Rightarrow>* H)", "have \"\\<LM> Compound F Fs \\<RM> \\<noteq> G\""], ["proof (prove)\nusing this:\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "from \\<open>r = (ps,c)\\<close> and \\<open>r \\<in> upRules\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  r \\<in> upRules", "obtain T Ts where  \"c = (\\<Empt> \\<Rightarrow>* \\<LM>Compound T Ts\\<RM>) \\<or> c = (\\<LM>Compound T Ts\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. (\\<And>T Ts.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<or>\n        c =\n        ( \\<LM> Compound T\n                 Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using upRuleCharacterise[where Ps=ps and C=c]"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> upRules\n  (ps, c) \\<in> upRules \\<Longrightarrow>\n  \\<exists>F Fs.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n     c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. (\\<And>T Ts.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<or>\n        c =\n        ( \\<LM> Compound T\n                 Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "moreover"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "{"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "assume \"c = (\\<Empt> \\<Rightarrow>* \\<LM>Compound T Ts\\<RM>)\""], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>)\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "then"], ["proof (chain)\npicking this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>)", "have \"\\<LM>Compound F Fs\\<RM> \\<noteq> G\""], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "using \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>)\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "by auto"], ["proof (state)\nthis:\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "}"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "moreover"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "{"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "assume \"c = (\\<LM>Compound T Ts\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (state)\nthis:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "then"], ["proof (chain)\npicking this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"leftPrincipal r (Compound T Ts)\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. leftPrincipal r (Compound T Ts)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. leftPrincipal r (Compound T Ts)", "by auto"], ["proof (state)\nthis:\n  leftPrincipal r (Compound T Ts)\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "with \\<open>\\<not> leftPrincipal r (Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  \\<not> leftPrincipal r (Compound F Fs)\n  leftPrincipal r (Compound T Ts)", "have \"Compound T Ts \\<noteq> Compound F Fs\""], ["proof (prove)\nusing this:\n  \\<not> leftPrincipal r (Compound F Fs)\n  leftPrincipal r (Compound T Ts)\n\ngoal (1 subgoal):\n 1. Compound T Ts \\<noteq> Compound F Fs", "by auto"], ["proof (state)\nthis:\n  Compound T Ts \\<noteq> Compound F Fs\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "then"], ["proof (chain)\npicking this:\n  Compound T Ts \\<noteq> Compound F Fs", "have \"\\<LM>Compound F Fs\\<RM> \\<noteq> G\""], ["proof (prove)\nusing this:\n  Compound T Ts \\<noteq> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "using \\<open>c = (G \\<Rightarrow>* H)\\<close> and \\<open>c = (\\<LM>Compound T Ts\\<RM> \\<Rightarrow>* \\<Empt>)\\<close>"], ["proof (prove)\nusing this:\n  Compound T Ts \\<noteq> Compound F Fs\n  c = ( G \\<Rightarrow>* H)\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "by auto"], ["proof (state)\nthis:\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "}"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n    \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "ultimately"], ["proof (chain)\npicking this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "show \"\\<LM>Compound F Fs\\<RM> \\<noteq> G\""], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "by blast"], ["proof (state)\nthis:\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"antec S + antec (snd r) = (\\<Gamma> \\<oplus> Compound F Fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antec S + antec (snd r) = \\<Gamma> \\<oplus> Compound F Fs", "using \\<open>extendRule S r = (Ps,\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\\<close>\n                         and extendRule_def[where forms=S and R=r]\n                         and extend_def[where forms=S and seq=\"snd r\"]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n  extend S (snd r) \\<equiv>\n   antec S + antec (snd r) \\<Rightarrow>* succ S + succ (snd r)\n\ngoal (1 subgoal):\n 1. antec S + antec (snd r) = \\<Gamma> \\<oplus> Compound F Fs", "by auto"], ["proof (state)\nthis:\n  antec S + antec (snd r) = \\<Gamma> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  antec S + antec (snd r) = \\<Gamma> \\<oplus> Compound F Fs", "have \"\\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs\""], ["proof (prove)\nusing this:\n  antec S + antec (snd r) = \\<Gamma> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs", "using \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\\<close> and \\<open>r = (ps,c)\\<close> and \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (prove)\nusing this:\n  antec S + antec (snd r) = \\<Gamma> \\<oplus> Compound F Fs\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n  r = (ps, c)\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs", "by auto"], ["proof (state)\nthis:\n  \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "from \\<open>r = (ps,c)\\<close> and \\<open>c = (G\\<Rightarrow>* H)\\<close> and \\<open>r \\<in> upRules\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  c = ( G \\<Rightarrow>* H)\n  r \\<in> upRules", "have \"G = \\<Empt> \\<or> (\\<exists> A. G = \\<LM>A\\<RM>)\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  c = ( G \\<Rightarrow>* H)\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)", "using antec_upRule[where Ps=ps and \\<Phi>=G and \\<Psi>=H]"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  c = ( G \\<Rightarrow>* H)\n  r \\<in> upRules\n  (ps,  G \\<Rightarrow>* H) \\<in> upRules \\<Longrightarrow>\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)", "by auto"], ["proof (state)\nthis:\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G\n  \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)", "have \"Compound F Fs \\<in># \\<Phi>\""], ["proof (prove)\nusing this:\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G\n  \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. Compound F Fs \\<in># \\<Phi>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "have \"G = \\<Empt> \\<or> (\\<exists> A. G = \\<LM>A\\<RM>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)", "by fact"], ["proof (state)\nthis:\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "moreover"], ["proof (state)\nthis:\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "{"], ["proof (state)\nthis:\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "assume \"G = \\<Empt>\""], ["proof (state)\nthis:\n  G = \\<Empt>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "then"], ["proof (chain)\npicking this:\n  G = \\<Empt>", "have \"\\<Phi> = \\<Gamma> \\<oplus> Compound F Fs\""], ["proof (prove)\nusing this:\n  G = \\<Empt>\n\ngoal (1 subgoal):\n 1. \\<Phi> = \\<Gamma> \\<oplus> Compound F Fs", "using \\<open>\\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs\\<close>"], ["proof (prove)\nusing this:\n  G = \\<Empt>\n  \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<Phi> = \\<Gamma> \\<oplus> Compound F Fs", "by auto"], ["proof (state)\nthis:\n  \\<Phi> = \\<Gamma> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "then"], ["proof (chain)\npicking this:\n  \\<Phi> = \\<Gamma> \\<oplus> Compound F Fs", "have \"Compound F Fs \\<in># \\<Phi>\""], ["proof (prove)\nusing this:\n  \\<Phi> = \\<Gamma> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. Compound F Fs \\<in># \\<Phi>", "by auto"], ["proof (state)\nthis:\n  Compound F Fs \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "}"], ["proof (state)\nthis:\n  G = \\<Empt> \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "moreover"], ["proof (state)\nthis:\n  G = \\<Empt> \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "{"], ["proof (state)\nthis:\n  G = \\<Empt> \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "assume \"\\<exists> A. G = \\<LM>A\\<RM>\""], ["proof (state)\nthis:\n  \\<exists>A. G = \\<LM> A  \\<RM>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "then"], ["proof (chain)\npicking this:\n  \\<exists>A. G = \\<LM> A  \\<RM>", "obtain A where \"G = \\<LM>A\\<RM>\""], ["proof (prove)\nusing this:\n  \\<exists>A. G = \\<LM> A  \\<RM>\n\ngoal (1 subgoal):\n 1. (\\<And>A. G = \\<LM> A  \\<RM> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  G = \\<LM> A  \\<RM>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "then"], ["proof (chain)\npicking this:\n  G = \\<LM> A  \\<RM>", "have \"\\<Phi> \\<oplus> A = \\<Gamma> \\<oplus> Compound F Fs\""], ["proof (prove)\nusing this:\n  G = \\<LM> A  \\<RM>\n\ngoal (1 subgoal):\n 1. \\<Phi> \\<oplus> A = \\<Gamma> \\<oplus> Compound F Fs", "using \\<open>\\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs\\<close>"], ["proof (prove)\nusing this:\n  G = \\<LM> A  \\<RM>\n  \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<Phi> \\<oplus> A = \\<Gamma> \\<oplus> Compound F Fs", "by auto"], ["proof (state)\nthis:\n  \\<Phi> \\<oplus> A = \\<Gamma> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "then"], ["proof (chain)\npicking this:\n  \\<Phi> \\<oplus> A = \\<Gamma> \\<oplus> Compound F Fs", "have \"set_mset (\\<Phi> \\<oplus> A) = set_mset (\\<Gamma> \\<oplus> Compound F Fs)\""], ["proof (prove)\nusing this:\n  \\<Phi> \\<oplus> A = \\<Gamma> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. set_mset (\\<Phi> \\<oplus> A) =\n    set_mset (\\<Gamma> \\<oplus> Compound F Fs)", "by auto"], ["proof (state)\nthis:\n  set_mset (\\<Phi> \\<oplus> A) = set_mset (\\<Gamma> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "then"], ["proof (chain)\npicking this:\n  set_mset (\\<Phi> \\<oplus> A) = set_mset (\\<Gamma> \\<oplus> Compound F Fs)", "have \"set_mset \\<Phi> \\<union> {A} = set_mset \\<Gamma> \\<union> {Compound F Fs}\""], ["proof (prove)\nusing this:\n  set_mset (\\<Phi> \\<oplus> A) = set_mset (\\<Gamma> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. set_mset \\<Phi> \\<union> {A} =\n    set_mset \\<Gamma> \\<union> {Compound F Fs}", "by auto"], ["proof (state)\nthis:\n  set_mset \\<Phi> \\<union> {A} = set_mset \\<Gamma> \\<union> {Compound F Fs}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "moreover"], ["proof (state)\nthis:\n  set_mset \\<Phi> \\<union> {A} = set_mset \\<Gamma> \\<union> {Compound F Fs}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "from \\<open>G = \\<LM>A\\<RM>\\<close> and \\<open>\\<LM>Compound F Fs\\<RM> \\<noteq> G\\<close>"], ["proof (chain)\npicking this:\n  G = \\<LM> A  \\<RM>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G", "have \"Compound F Fs \\<noteq> A\""], ["proof (prove)\nusing this:\n  G = \\<LM> A  \\<RM>\n  \\<LM> Compound F Fs  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. Compound F Fs \\<noteq> A", "by auto"], ["proof (state)\nthis:\n  Compound F Fs \\<noteq> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "ultimately"], ["proof (chain)\npicking this:\n  set_mset \\<Phi> \\<union> {A} = set_mset \\<Gamma> \\<union> {Compound F Fs}\n  Compound F Fs \\<noteq> A", "have \"Compound F Fs \\<in> set_mset \\<Phi>\""], ["proof (prove)\nusing this:\n  set_mset \\<Phi> \\<union> {A} = set_mset \\<Gamma> \\<union> {Compound F Fs}\n  Compound F Fs \\<noteq> A\n\ngoal (1 subgoal):\n 1. Compound F Fs \\<in># \\<Phi>", "by auto"], ["proof (state)\nthis:\n  Compound F Fs \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "then"], ["proof (chain)\npicking this:\n  Compound F Fs \\<in># \\<Phi>", "have \"Compound F Fs \\<in># \\<Phi>\""], ["proof (prove)\nusing this:\n  Compound F Fs \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. Compound F Fs \\<in># \\<Phi>", "by auto"], ["proof (state)\nthis:\n  Compound F Fs \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "}"], ["proof (state)\nthis:\n  \\<exists>A. G = \\<LM> A  \\<RM> \\<Longrightarrow>\n  Compound F Fs \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> Compound F Fs  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> Compound F Fs;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>", "ultimately"], ["proof (chain)\npicking this:\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\n  G = \\<Empt> \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>\n  \\<exists>A. G = \\<LM> A  \\<RM> \\<Longrightarrow>\n  Compound F Fs \\<in># \\<Phi>", "show \"Compound F Fs \\<in># \\<Phi>\""], ["proof (prove)\nusing this:\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\n  G = \\<Empt> \\<Longrightarrow> Compound F Fs \\<in># \\<Phi>\n  \\<exists>A. G = \\<LM> A  \\<RM> \\<Longrightarrow>\n  Compound F Fs \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. Compound F Fs \\<in># \\<Phi>", "by blast"], ["proof (state)\nthis:\n  Compound F Fs \\<in># \\<Phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Compound F Fs \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  Compound F Fs \\<in># \\<Phi>", "have \"\\<exists> \\<Phi>1. \\<Phi> = \\<Phi>1 \\<oplus> Compound F Fs\""], ["proof (prove)\nusing this:\n  Compound F Fs \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Phi>1. \\<Phi> = \\<Phi>1 \\<oplus> Compound F Fs", "by (rule_tac x=\"\\<Phi> \\<ominus> Compound F Fs\" in exI) (auto simp add:multiset_eq_iff)"], ["proof (state)\nthis:\n  \\<exists>\\<Phi>1. \\<Phi> = \\<Phi>1 \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Phi>1. \\<Phi> = \\<Phi>1 \\<oplus> Compound F Fs", "obtain \\<Phi>1 where \"S = (\\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<Phi>1. \\<Phi> = \\<Phi>1 \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Phi>1.\n        S =\n        ( \\<Phi>1 \\<oplus>\n          Compound F Fs \\<Rightarrow>* \\<Psi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>\\<Phi>1. \\<Phi> = \\<Phi>1 \\<oplus> Compound F Fs\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Phi>1.\n        S =\n        ( \\<Phi>1 \\<oplus>\n          Compound F Fs \\<Rightarrow>* \\<Psi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  S = ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"Ps = map (extend S) ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ps = map (extend S) ps", "using \\<open>extendRule S r = (Ps,\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\\<close> \n                 and extendRule_def[where forms=S and R=r] and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. Ps = map (extend S) ps", "by auto"], ["proof (state)\nthis:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  Ps = map (extend S) ps", "have \"\\<forall> p \\<in> set Ps. (\\<exists> p'. p = extend S p')\""], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'", "using ex_map_conv[where ys=Ps and f=\"extend S\"]"], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n  (\\<exists>xs. Ps = map (extend S) xs) =\n  (\\<forall>y\\<in>set Ps. \\<exists>x. y = extend S x)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'", "have \"\\<forall> p \\<in> set Ps. (Compound F Fs \\<in># antec p)\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. Compound F Fs \\<in># antec p", "using \\<open>Compound F Fs \\<in># \\<Phi>\\<close> and \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'\n  Compound F Fs \\<in># \\<Phi>\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. Compound F Fs \\<in># antec p", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set Ps \\<longrightarrow>\n                   (\\<exists>p'.\n                       x = extend ( \\<Phi> \\<Rightarrow>* \\<Psi>) p');\n        Compound F Fs \\<in># \\<Phi>; S = ( \\<Phi> \\<Rightarrow>* \\<Psi>);\n        x \\<in> set Ps\\<rbrakk>\n       \\<Longrightarrow> Compound F Fs \\<in># antec x", "by (drule_tac x=x in spec) (auto simp add:extend_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. Compound F Fs \\<in># antec p\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. Compound F Fs \\<in># antec p", "have a1:\"\\<forall> p \\<in> set Ps. \\<exists> \\<Phi>' \\<Psi>'. p = (\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. Compound F Fs \\<in># antec p\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')", "using characteriseSeq"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. Compound F Fs \\<in># antec p\n  \\<exists>A B. ?C = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set Ps \\<longrightarrow>\n                   Compound F Fs \\<in># antec x;\n        \\<And>C. \\<exists>A B. C = ( A \\<Rightarrow>* B);\n        x \\<in> set Ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>'.\n                            x =\n                            ( add_mset (Compound F Fs)\n                               \\<Phi>' \\<Rightarrow>* \\<Psi>')", "apply (drule_tac x=x in spec,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>C. \\<exists>A B. C = ( A \\<Rightarrow>* B);\n        x \\<in> set Ps; Compound F Fs \\<in># antec x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>'.\n                            x =\n                            ( add_mset (Compound F Fs)\n                               \\<Phi>' \\<Rightarrow>* \\<Psi>')", "apply (rule_tac x=\"antec x \\<ominus> Compound F Fs\" in exI,rule_tac x=\"succ x\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>C. \\<exists>A B. C = ( A \\<Rightarrow>* B);\n        x \\<in> set Ps; Compound F Fs \\<in># antec x\\<rbrakk>\n       \\<Longrightarrow> x =\n                         ( add_mset (Compound F Fs)\n                            (antec x \\<ominus>\n                             Compound F Fs) \\<Rightarrow>* succ x)", "by (drule_tac x=x in meta_spec) (auto simp add:multiset_eq_iff)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*", "by fact"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*", "have \"\\<forall> p \\<in> set Ps. \\<exists> \\<Phi>' \\<Psi>' n. n\\<le>n' \\<and> (\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>',n) \\<in> derivable R*\n                                                     \\<and> p = (\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>' n.\n          n \\<le> n' \\<and>\n          ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>', n)\n          \\<in> derivable R* \\<and>\n          p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')", "by (auto simp add:Ball_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')", "have a2: \"\\<forall> p \\<in> set Ps. \\<exists> \\<Phi>' \\<Psi>' m. m\\<le>n' \\<and> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',m) \\<in> derivable R*\n                                                   \\<and> p = (\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>' m.\n          m \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n          \\<in> derivable R* \\<and>\n          p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')", "using \\<open>n = Suc n'\\<close> and b' and IH"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n  n = Suc n'\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n            \\<in> derivable R*)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>' m.\n          m \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n          \\<in> derivable R* \\<and>\n          p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set Ps \\<longrightarrow>\n                   (\\<exists>\\<Phi>' \\<Psi>' n.\n                       n \\<le> n' \\<and>\n                       ( add_mset (Compound F Fs)\n                          \\<Phi>' \\<Rightarrow>* \\<Psi>',\n                        n)\n                       \\<in> derivable R* \\<and>\n                       x =\n                       ( add_mset (Compound F Fs)\n                          \\<Phi>' \\<Rightarrow>* \\<Psi>'));\n        n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           leftPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( add_mset (Compound F Fs) \\<Gamma> \\<Rightarrow>* \\<Delta>,\n               m)\n              \\<in> derivable R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable R*);\n        x \\<in> set Ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( add_mset (Compound F Fs)\n                               \\<Phi>' \\<Rightarrow>* \\<Psi>')", "apply (drule_tac x=x in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           leftPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( add_mset (Compound F Fs) \\<Gamma> \\<Rightarrow>* \\<Delta>,\n               m)\n              \\<in> derivable R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable R*);\n        x \\<in> set Ps;\n        x \\<in> set Ps \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>' n.\n            n \\<le> n' \\<and>\n            ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n            \\<in> derivable R* \\<and>\n            x =\n            ( add_mset (Compound F Fs)\n               \\<Phi>' \\<Rightarrow>* \\<Psi>'))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( add_mset (Compound F Fs)\n                               \\<Phi>' \\<Rightarrow>* \\<Psi>')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           leftPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( add_mset (Compound F Fs) \\<Gamma> \\<Rightarrow>* \\<Delta>,\n               m)\n              \\<in> derivable R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable R*);\n        x \\<in> set Ps;\n        \\<exists>\\<Phi>' \\<Psi>' n.\n           n \\<le> n' \\<and>\n           ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n           \\<in> derivable R* \\<and>\n           x =\n           ( add_mset (Compound F Fs)\n              \\<Phi>' \\<Rightarrow>* \\<Psi>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( add_mset (Compound F Fs)\n                               \\<Phi>' \\<Rightarrow>* \\<Psi>')", "apply (elim exE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           leftPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( add_mset (Compound F Fs) \\<Gamma> \\<Rightarrow>* \\<Delta>,\n               m)\n              \\<in> derivable R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable R*);\n        x \\<in> set Ps; n \\<le> n';\n        ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable R*;\n        x =\n        ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( add_mset (Compound F Fs)\n                               \\<Phi>' \\<Rightarrow>* \\<Psi>')", "apply (drule_tac x=n in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           leftPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        x \\<in> set Ps; n \\<le> n';\n        ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable R*;\n        x = ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>');\n        n < Suc n' \\<longrightarrow>\n        (\\<forall>\\<Gamma> \\<Delta>.\n            ( add_mset (Compound F Fs) \\<Gamma> \\<Rightarrow>* \\<Delta>, n)\n            \\<in> derivable R* \\<longrightarrow>\n            (\\<exists>m'\\<le>n.\n                ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                 m')\n                \\<in> derivable R*))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( add_mset (Compound F Fs)\n                               \\<Phi>' \\<Rightarrow>* \\<Psi>')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           leftPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable R*;\n        x = ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>');\n        \\<forall>\\<Gamma> \\<Delta>.\n           ( add_mset (Compound F Fs) \\<Gamma> \\<Rightarrow>* \\<Delta>, n)\n           \\<in> derivable R* \\<longrightarrow>\n           (\\<exists>m'\\<le>n.\n               ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                m')\n               \\<in> derivable R*)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R*", "apply (drule_tac x=\\<Phi>' in spec,drule_tac x=\\<Psi>' in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           leftPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable R*;\n        x = ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>');\n        ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<exists>m'\\<le>n.\n            ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m')\n            \\<in> derivable R*)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R*", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           leftPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable R*;\n        x = ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>');\n        \\<exists>m'\\<le>n.\n           ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m')\n           \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R*", "apply (elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>' n m'.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           leftPrincipal (a, b) (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable R*;\n        x = ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>');\n        m' \\<le> n \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m')\n        \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable R*", "by (rule_tac x=m' in exI) (arith)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' m.\n        m \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "obtain Ps' where eq: \"Ps' = map (extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Ps'.\n        Ps' =\n        map (extend\n              ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'))\n         ps \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps' =\n  map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"length Ps = length Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length Ps = length Ps'", "using \\<open>Ps' = map (extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\\<close>\n                                            and \\<open>Ps = map (extend S) ps\\<close>"], ["proof (prove)\nusing this:\n  Ps' =\n  map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. length Ps = length Ps'", "by auto"], ["proof (state)\nthis:\n  length Ps = length Ps'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  length Ps = length Ps'", "have \"Ps' \\<noteq> []\""], ["proof (prove)\nusing this:\n  length Ps = length Ps'\n\ngoal (1 subgoal):\n 1. Ps' \\<noteq> []", "using \\<open>Ps \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  length Ps = length Ps'\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. Ps' \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  Ps' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "from \\<open>r \\<in> R'\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> R'", "have \"extendRule (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r \\<in> R*\""], ["proof (prove)\nusing this:\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r\n    \\<in> R*", "using rules"], ["proof (prove)\nusing this:\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r\n    \\<in> R*", "by auto"], ["proof (state)\nthis:\n  extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r\n  \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r\n  \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"extendRule (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r = (Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r =\n    (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "using \\<open>S = (\\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\\<close> and \\<open>extendRule S r = (Ps, \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\\<close> \n                 and \\<open>r = (ps,c)\\<close> and eq"], ["proof (prove)\nusing this:\n  S = ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r = (ps, c)\n  Ps' =\n  map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r =\n    (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r =\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r\n  \\<in> R*\n  extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r =\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "have \"(Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> R*\""], ["proof (prove)\nusing this:\n  extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r\n  \\<in> R*\n  extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r =\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n\ngoal (1 subgoal):\n 1. (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n    \\<in> R*", "by simp"], ["proof (state)\nthis:\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have c1:\"\\<forall> p \\<in> set ps. extend S p \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps. extend S p \\<in> set Ps", "using \\<open>Ps = map (extend S) ps\\<close>"], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps. extend S p \\<in> set Ps", "by (simp add:Ball_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps. extend S p \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have c2:\"\\<forall> p \\<in> set ps. extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p \\<in> set Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n       \\<in> set Ps'", "using eq"], ["proof (prove)\nusing this:\n  Ps' =\n  map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n       \\<in> set Ps'", "by (simp add:Ball_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n     \\<in> set Ps'", "have eq2:\"\\<forall> p \\<in> set Ps'. \\<exists> \\<Phi>' \\<Psi>'. p = (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "using eq"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n     \\<in> set Ps'\n  Ps' =\n  map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "by (auto simp add: extend_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have d1:\"\\<forall> p \\<in> set Ps. \\<exists> p' \\<in> set ps. p = extend S p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'", "using \\<open>Ps = map (extend S) ps\\<close>"], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'", "have \"\\<forall> p \\<in> set Ps. \\<exists> p'. p' \\<in> set Ps'\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'", "using c2"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have d2: \"\\<forall> p \\<in> set Ps'. \\<exists> p' \\<in> set ps. p = extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>p'\\<in>set ps.\n          p =\n          extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'", "using eq"], ["proof (prove)\nusing this:\n  Ps' =\n  map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>p'\\<in>set ps.\n          p =\n          extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'", "have \"\\<forall> p \\<in> set Ps'. \\<exists> p'. p' \\<in> set Ps\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'. \\<exists>p'. p' \\<in> set Ps", "using c1"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'\n  \\<forall>p\\<in>set ps. extend S p \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'. \\<exists>p'. p' \\<in> set Ps", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'. \\<exists>p'. p' \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"\\<forall> \\<Phi>' \\<Psi>'. (\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps \\<longrightarrow> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "fix \\<Phi>' \\<Psi>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "assume \"(\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps\""], ["proof (state)\nthis:\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "have \"\\<exists> p \\<in> set ps. extend (\\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) p = (\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) p =\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')", "using \\<open>Ps = map (extend S) ps\\<close> and \\<open>S = (\\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\\<close> and a1 and d1"], ["proof (prove)\nusing this:\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps\n  Ps = map (extend S) ps\n  S = ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) p =\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')", "apply (simp only:Ball_def Bex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n             \\<in> set (map (extend\n                              ( \\<Phi>1 \\<oplus>\n                                Compound F Fs \\<Rightarrow>* \\<Psi>))\n                         ps);\n     Ps =\n     map (extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>))\n      ps;\n     S = ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>);\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi>1 \\<oplus>\n                             Compound F Fs \\<Rightarrow>* \\<Psi>))\n                      ps) \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            x = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>'));\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi>1 \\<oplus>\n                             Compound F Fs \\<Rightarrow>* \\<Psi>))\n                      ps) \\<longrightarrow>\n        (\\<exists>xa.\n            xa \\<in> set ps \\<and>\n            x =\n            extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n             xa)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi>1 \\<oplus>\n                            Compound F Fs \\<Rightarrow>* \\<Psi>)\n                          x =\n                         ( \\<Phi>' \\<oplus>\n                           Compound F Fs \\<Rightarrow>* \\<Psi>')", "apply (drule_tac x=\"\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>'\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n             \\<in> set (map (extend\n                              ( \\<Phi>1 \\<oplus>\n                                Compound F Fs \\<Rightarrow>* \\<Psi>))\n                         ps);\n     Ps =\n     map (extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>))\n      ps;\n     S = ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>);\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi>1 \\<oplus>\n                             Compound F Fs \\<Rightarrow>* \\<Psi>))\n                      ps) \\<longrightarrow>\n        (\\<exists>xa.\n            xa \\<in> set ps \\<and>\n            x =\n            extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n             xa);\n     ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n     \\<in> set (map (extend\n                      ( \\<Phi>1 \\<oplus>\n                        Compound F Fs \\<Rightarrow>* \\<Psi>))\n                 ps) \\<longrightarrow>\n     (\\<exists>\\<Phi>'' \\<Psi>''.\n         ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n         ( \\<Phi>'' \\<oplus>\n           Compound F Fs \\<Rightarrow>* \\<Psi>''))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi>1 \\<oplus>\n                            Compound F Fs \\<Rightarrow>* \\<Psi>)\n                          x =\n                         ( \\<Phi>' \\<oplus>\n                           Compound F Fs \\<Rightarrow>* \\<Psi>')", "by (drule_tac x=\"\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>'\" in spec) (auto)"], ["proof (state)\nthis:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) p =\n     ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) p =\n     ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')", "obtain p where t:\"p \\<in> set ps \\<and> (\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') = extend (\\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) p\""], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) p =\n     ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> set ps \\<and>\n        ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n        extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n         p \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>p.\n                   p \\<in> set ps \\<and>\n                   ( add_mset (Compound F Fs)\n                      \\<Phi>' \\<Rightarrow>* \\<Psi>') =\n                   extend\n                    ( add_mset (Compound F Fs)\n                       \\<Phi>1 \\<Rightarrow>* \\<Psi>)\n                    p \\<Longrightarrow>\n                   thesis;\n        p \\<in> set ps;\n        extend ( add_mset (Compound F Fs) \\<Phi>1 \\<Rightarrow>* \\<Psi>) p =\n        ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>')\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (drule_tac x=p in meta_spec) (simp)"], ["proof (state)\nthis:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) p\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) p", "obtain A B where \"p = (A \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) p\n\ngoal (1 subgoal):\n 1. (\\<And>A B.\n        p = ( A \\<Rightarrow>* B) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases p)"], ["proof (state)\nthis:\n  p = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  p = ( A \\<Rightarrow>* B)", "have \"(A \\<Rightarrow>* B) \\<in> set ps \\<and> (\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') = extend (\\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) (A \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n    extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n     ( A \\<Rightarrow>* B)", "using t"], ["proof (prove)\nusing this:\n  p = ( A \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) p\n\ngoal (1 subgoal):\n 1. ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n    extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n     ( A \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n   ( A \\<Rightarrow>* B)", "have ant: \"\\<Phi>' \\<oplus> Compound F Fs = \\<Phi>1 \\<oplus> Compound F Fs + A\" and suc: \"\\<Psi>' = \\<Psi> + B\""], ["proof (prove)\nusing this:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<Phi>' \\<oplus> Compound F Fs = \\<Phi>1 \\<oplus> Compound F Fs + A &&&\n    \\<Psi>' = \\<Psi> + B", "using extend_def[where forms=\"\\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>\" and seq=\"A\\<Rightarrow>*B\"]"], ["proof (prove)\nusing this:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n   ( A \\<Rightarrow>* B)\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n   ( A \\<Rightarrow>* B) \\<equiv>\n   antec ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) +\n   antec\n    ( A \\<Rightarrow>* B) \\<Rightarrow>* succ\n    ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) +\n   succ ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<Phi>' \\<oplus> Compound F Fs = \\<Phi>1 \\<oplus> Compound F Fs + A &&&\n    \\<Psi>' = \\<Psi> + B", "by auto"], ["proof (state)\nthis:\n  \\<Phi>' \\<oplus> Compound F Fs = \\<Phi>1 \\<oplus> Compound F Fs + A\n  \\<Psi>' = \\<Psi> + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "from ant"], ["proof (chain)\npicking this:\n  \\<Phi>' \\<oplus> Compound F Fs = \\<Phi>1 \\<oplus> Compound F Fs + A", "have \"\\<Phi>' = \\<Phi>1 + A\""], ["proof (prove)\nusing this:\n  \\<Phi>' \\<oplus> Compound F Fs = \\<Phi>1 \\<oplus> Compound F Fs + A\n\ngoal (1 subgoal):\n 1. \\<Phi>' = \\<Phi>1 + A", "by auto"], ["proof (state)\nthis:\n  \\<Phi>' = \\<Phi>1 + A\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  \\<Phi>' = \\<Phi>1 + A", "have \"\\<Phi>' + \\<Gamma>' = (\\<Phi>1 + \\<Gamma>') + A\""], ["proof (prove)\nusing this:\n  \\<Phi>' = \\<Phi>1 + A\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + A", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + A\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "moreover"], ["proof (state)\nthis:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + A\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "from suc"], ["proof (chain)\npicking this:\n  \\<Psi>' = \\<Psi> + B", "have \"\\<Psi>' + \\<Delta>' = (\\<Psi> + \\<Delta>') + B\""], ["proof (prove)\nusing this:\n  \\<Psi>' = \\<Psi> + B\n\ngoal (1 subgoal):\n 1. \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + A\n  \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B", "have \"(\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') = extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') (A \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + A\n  \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n     ( A \\<Rightarrow>* B)", "using extend_def[where forms=\"\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'\" and seq=\"A \\<Rightarrow>* B\"]"], ["proof (prove)\nusing this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + A\n  \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( A \\<Rightarrow>* B) \\<equiv>\n   antec ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') +\n   antec\n    ( A \\<Rightarrow>* B) \\<Rightarrow>* succ\n    ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') +\n   succ ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n     ( A \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "moreover"], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "have \"extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') (A \\<Rightarrow>* B) \\<in> set Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n     ( A \\<Rightarrow>* B)\n    \\<in> set Ps'", "using \\<open>p = (A \\<Rightarrow>* B)\\<close> and t and c2"], ["proof (prove)\nusing this:\n  p = ( A \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) p\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n     ( A \\<Rightarrow>* B)\n    \\<in> set Ps'", "by auto"], ["proof (state)\nthis:\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "ultimately"], ["proof (chain)\npicking this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n  \\<in> set Ps'", "have \"(\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'", "by simp"], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "}"], ["proof (state)\nthis:\n  ( ?\\<Phi>'2 \\<oplus> Compound F Fs \\<Rightarrow>* ?\\<Psi>'2)\n  \\<in> set Ps \\<Longrightarrow>\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "thus ?thesis"], ["proof (prove)\nusing this:\n  ( ?\\<Phi>'2 \\<oplus> Compound F Fs \\<Rightarrow>* ?\\<Psi>'2)\n  \\<in> set Ps \\<Longrightarrow>\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "by blast"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "have \"\\<forall> \\<Phi>' \\<Psi>'. (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps' \\<longrightarrow> (\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "fix \\<Phi>' \\<Psi>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "assume \"(\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\""], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'", "have \"\\<exists> p \\<in> set ps. extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p = (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p =\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "using eq and eq2 and d2"], ["proof (prove)\nusing this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n  Ps' =\n  map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p =\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (simp only:Ball_def Bex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n             \\<in> set (map (extend\n                              ( \\<Phi>1 +\n                                \\<Gamma>' \\<Rightarrow>* \\<Psi> +\n                   \\<Delta>'))\n                         ps);\n     Ps' =\n     map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'))\n      ps;\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi>1 +\n                             \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'))\n                      ps) \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            x = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'));\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi>1 +\n                             \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'))\n                      ps) \\<longrightarrow>\n        (\\<exists>xa.\n            xa \\<in> set ps \\<and>\n            x =\n            extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n             xa)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi>1 +\n                            \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n                          x =\n                         ( \\<Phi>' +\n                           \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (drule_tac x=\"\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n             \\<in> set (map (extend\n                              ( \\<Phi>1 +\n                                \\<Gamma>' \\<Rightarrow>* \\<Psi> +\n                   \\<Delta>'))\n                         ps);\n     Ps' =\n     map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'))\n      ps;\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi>1 +\n                             \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'))\n                      ps) \\<longrightarrow>\n        (\\<exists>xa.\n            xa \\<in> set ps \\<and>\n            x =\n            extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n             xa);\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set (map (extend\n                      ( \\<Phi>1 +\n                        \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'))\n                 ps) \\<longrightarrow>\n     (\\<exists>\\<Phi>'' \\<Psi>''.\n         ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n         ( \\<Phi>'' +\n           \\<Gamma>' \\<Rightarrow>* \\<Psi>'' + \\<Delta>'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi>1 +\n                            \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n                          x =\n                         ( \\<Phi>' +\n                           \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "by (drule_tac x=\"\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'\" in spec) (auto)"], ["proof (state)\nthis:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p =\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p =\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "obtain p where t:\"p \\<in> set ps \\<and> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') = extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\""], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p =\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> set ps \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n        extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n         p \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>p.\n                   p \\<in> set ps \\<and>\n                   ( \\<Phi>' +\n                     \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n                   extend\n                    ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n                    p \\<Longrightarrow>\n                   thesis;\n        p \\<in> set ps;\n        extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p =\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (drule_tac x=p in meta_spec) (simp)"], ["proof (state)\nthis:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p", "obtain A B where \"p = (A \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n\ngoal (1 subgoal):\n 1. (\\<And>A B.\n        p = ( A \\<Rightarrow>* B) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases p)"], ["proof (state)\nthis:\n  p = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  p = ( A \\<Rightarrow>* B)", "have \"(A \\<Rightarrow>* B) \\<in> set ps \\<and> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') = extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') (A \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n     ( A \\<Rightarrow>* B)", "using t"], ["proof (prove)\nusing this:\n  p = ( A \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n\ngoal (1 subgoal):\n 1. ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n     ( A \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( A \\<Rightarrow>* B)", "have ant: \"\\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + A\" and suc: \"\\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B\""], ["proof (prove)\nusing this:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + A &&&\n    \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B", "using extend_def[where forms=\"\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'\" and seq=\"A \\<Rightarrow>* B\"]"], ["proof (prove)\nusing this:\n  ( A \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( A \\<Rightarrow>* B)\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( A \\<Rightarrow>* B) \\<equiv>\n   antec ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') +\n   antec\n    ( A \\<Rightarrow>* B) \\<Rightarrow>* succ\n    ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') +\n   succ ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + A &&&\n    \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B", "by auto"], ["proof (state)\nthis:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + A\n  \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "from ant"], ["proof (chain)\npicking this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + A", "have \"\\<Phi>' + \\<Gamma>' = (\\<Phi>1 + A) + \\<Gamma>'\""], ["proof (prove)\nusing this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + A\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi>1 + A + \\<Gamma>'", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + A + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + A + \\<Gamma>'", "have \"\\<Phi>' = \\<Phi>1 + A\""], ["proof (prove)\nusing this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + A + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<Phi>' = \\<Phi>1 + A", "by simp"], ["proof (state)\nthis:\n  \\<Phi>' = \\<Phi>1 + A\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<Phi>' = \\<Phi>1 + A", "have \"\\<Phi>' \\<oplus> Compound F Fs = (\\<Phi>1 \\<oplus> Compound F Fs) + A\""], ["proof (prove)\nusing this:\n  \\<Phi>' = \\<Phi>1 + A\n\ngoal (1 subgoal):\n 1. \\<Phi>' \\<oplus> Compound F Fs = \\<Phi>1 \\<oplus> Compound F Fs + A", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Phi>' \\<oplus> Compound F Fs = \\<Phi>1 \\<oplus> Compound F Fs + A\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "moreover"], ["proof (state)\nthis:\n  \\<Phi>' \\<oplus> Compound F Fs = \\<Phi>1 \\<oplus> Compound F Fs + A\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "from suc"], ["proof (chain)\npicking this:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B", "have \"\\<Psi>' + \\<Delta>' = (\\<Psi> + B) + \\<Delta>'\""], ["proof (prove)\nusing this:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. \\<Psi>' + \\<Delta>' = \\<Psi> + B + \\<Delta>'", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + B + \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + B + \\<Delta>'", "have \"\\<Psi>' = \\<Psi> + B\""], ["proof (prove)\nusing this:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + B + \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<Psi>' = \\<Psi> + B", "by simp"], ["proof (state)\nthis:\n  \\<Psi>' = \\<Psi> + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "ultimately"], ["proof (chain)\npicking this:\n  \\<Phi>' \\<oplus> Compound F Fs = \\<Phi>1 \\<oplus> Compound F Fs + A\n  \\<Psi>' = \\<Psi> + B", "have \"(\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') = extend (\\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) (A \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  \\<Phi>' \\<oplus> Compound F Fs = \\<Phi>1 \\<oplus> Compound F Fs + A\n  \\<Psi>' = \\<Psi> + B\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n    extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n     ( A \\<Rightarrow>* B)", "using extend_def[where forms=\"\\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>\" and seq=\"A\\<Rightarrow>*B\"]"], ["proof (prove)\nusing this:\n  \\<Phi>' \\<oplus> Compound F Fs = \\<Phi>1 \\<oplus> Compound F Fs + A\n  \\<Psi>' = \\<Psi> + B\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n   ( A \\<Rightarrow>* B) \\<equiv>\n   antec ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) +\n   antec\n    ( A \\<Rightarrow>* B) \\<Rightarrow>* succ\n    ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) +\n   succ ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n    extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n     ( A \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "moreover"], ["proof (state)\nthis:\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n   ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "have \"extend (\\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>) (A \\<Rightarrow>* B) \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n     ( A \\<Rightarrow>* B)\n    \\<in> set Ps", "using \\<open>p = (A \\<Rightarrow>* B)\\<close> and t and c1\n                      and \\<open>S = (\\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\\<close>"], ["proof (prove)\nusing this:\n  p = ( A \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n  \\<forall>p\\<in>set ps. extend S p \\<in> set Ps\n  S = ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n     ( A \\<Rightarrow>* B)\n    \\<in> set Ps", "by auto"], ["proof (state)\nthis:\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n   ( A \\<Rightarrow>* B)\n  \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "ultimately"], ["proof (chain)\npicking this:\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n   ( A \\<Rightarrow>* B)\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n   ( A \\<Rightarrow>* B)\n  \\<in> set Ps", "have \"(\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n   ( A \\<Rightarrow>* B)\n  extend ( \\<Phi>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>)\n   ( A \\<Rightarrow>* B)\n  \\<in> set Ps\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "by simp"], ["proof (state)\nthis:\n  ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "}"], ["proof (state)\nthis:\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps' \\<Longrightarrow>\n  ( ?\\<Phi>'2 \\<oplus> Compound F Fs \\<Rightarrow>* ?\\<Psi>'2) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "thus ?thesis"], ["proof (prove)\nusing this:\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps' \\<Longrightarrow>\n  ( ?\\<Phi>'2 \\<oplus> Compound F Fs \\<Rightarrow>* ?\\<Psi>'2) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "by blast"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "have \"\\<forall> \\<Phi>' \\<Psi>'. ((\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps) = ((\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps')\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       (( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n        \\<in> set Ps) =\n       (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n        \\<in> set Ps')", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')", "have \"\\<forall> p \\<in> set Ps'. \\<exists> \\<Phi>' \\<Psi>' n. n\\<le>n' \\<and> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',n) \\<in> derivable R*\n                                                \\<and> p = (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\""], ["proof (prove)\nusing this:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>' n.\n          n \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n          \\<in> derivable R* \\<and>\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "using eq2 and a2"], ["proof (prove)\nusing this:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' m.\n        m \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>' n.\n          n \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n          \\<in> derivable R* \\<and>\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                (( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>')\n                 \\<in> set Ps) =\n                (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                 \\<in> set Ps');\n     \\<forall>x.\n        x \\<in> set Ps' \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            x = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'));\n     \\<forall>x.\n        x \\<in> set Ps \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>' m.\n            m \\<le> n' \\<and>\n            ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n            \\<in> derivable R* \\<and>\n            x =\n            ( add_mset (Compound F Fs)\n               \\<Phi>' \\<Rightarrow>* \\<Psi>'))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         x \\<in> set Ps' \\<longrightarrow>\n                         (\\<exists>\\<Phi>' \\<Psi>' n.\n                             n \\<le> n' \\<and>\n                             ( \\<Phi>' +\n                               \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                              n)\n                             \\<in> derivable R* \\<and>\n                             x =\n                             ( \\<Phi>' +\n                               \\<Gamma>' \\<Rightarrow>* \\<Psi>' +\n                  \\<Delta>'))", "apply (intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( add_mset (Compound F Fs)\n                       \\<Phi>' \\<Rightarrow>* \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>x.\n           x \\<in> set Ps' \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>'.\n               x =\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'));\n        \\<forall>x.\n           x \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable R* \\<and>\n               x =\n               ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>'));\n        x \\<in> set Ps'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (drule_tac x=x in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( add_mset (Compound F Fs)\n                       \\<Phi>' \\<Rightarrow>* \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>x.\n           x \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable R* \\<and>\n               x =\n               ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>'));\n        x \\<in> set Ps';\n        x \\<in> set Ps' \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            x =\n            ( \\<Phi>' +\n              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( add_mset (Compound F Fs)\n                       \\<Phi>' \\<Rightarrow>* \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>x.\n           x \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable R* \\<and>\n               x =\n               ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>'));\n        x \\<in> set Ps';\n        \\<exists>\\<Phi>' \\<Psi>'.\n           x =\n           ( \\<Phi>' +\n             \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>'.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( add_mset (Compound F Fs)\n                       \\<Phi>' \\<Rightarrow>* \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>x.\n           x \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable R* \\<and>\n               x =\n               ( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>'));\n        x \\<in> set Ps';\n        x =\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (drule_tac x=\\<Phi>' in spec,drule_tac x=\\<Psi>' in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<Phi>' \\<Psi>'.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set Ps \\<longrightarrow>\n                   (\\<exists>\\<Phi>' \\<Psi>' m.\n                       m \\<le> n' \\<and>\n                       ( \\<Phi>' +\n                         \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                        m)\n                       \\<in> derivable R* \\<and>\n                       x =\n                       ( add_mset (Compound F Fs)\n                          \\<Phi>' \\<Rightarrow>* \\<Psi>'));\n        x \\<in> set Ps';\n        x = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>');\n        (( add_mset (Compound F Fs) \\<Phi>' \\<Rightarrow>* \\<Psi>')\n         \\<in> set Ps) =\n        (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n         \\<in> set Ps')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable R* \\<and>\n                            x =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "by (drule_tac x=\"\\<Phi>' \\<oplus> Compound F Fs \\<Rightarrow>* \\<Psi>'\" in spec) (simp)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "have all:\"\\<forall> p \\<in> set Ps'. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n        \\<in> derivable R* \\<and>\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "using \\<open>n = Suc n'\\<close>\n                 and \\<open>(Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> R*\\<close> and \\<open>Ps' \\<noteq> []\\<close>\n                 and derivable.step[where r=\"(Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\" and R=\"R*\"]"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  n = Suc n'\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> R*\n  Ps' \\<noteq> []\n  \\<lbrakk>(Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n           \\<in> R*;\n   fst (Ps',\n         \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<noteq>\n   [];\n   \\<forall>p\\<in>set (fst (Ps',\n                             \\<Gamma> +\n                             \\<Gamma>' \\<Rightarrow>* \\<Delta> +\n                \\<Delta>')).\n      \\<exists>n\\<le>?m. (p, n) \\<in> derivable R*\\<rbrakk>\n  \\<Longrightarrow> (snd (Ps',\n                           \\<Gamma> +\n                           \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>'),\n                     ?m + 1)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  \\<not> leftPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  leftPrincipal r (Compound F Fs) \\<or>\n  \\<not> leftPrincipal r (Compound F Fs)\n  leftPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n  \\<not> leftPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  leftPrincipal r (Compound F Fs) \\<or>\n  \\<not> leftPrincipal r (Compound F Fs)\n  leftPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n  \\<not> leftPrincipal r (Compound F Fs) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> R' \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*", "show \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma invertibleRule:\nassumes rules: \"R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\"\n   and UC:     \"uniqueConclusion R'\"\n   and IN:     \"(Ps,C) \\<in> R*\"\n   and der:    \"(C,n) \\<in> derivable R*\"\nshows \"\\<forall> p \\<in> set Ps. \\<exists> m\\<le>n. (p,m) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "from IN"], ["proof (chain)\npicking this:\n  (Ps, C) \\<in> R*", "have \"\\<exists> r' S. (r' \\<in> Ax \\<or> r' \\<in>  R') \\<and> (Ps,C) = extendRule S r'\""], ["proof (prove)\nusing this:\n  (Ps, C) \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<exists>r' S.\n       (r' \\<in> Ax \\<or> r' \\<in> R') \\<and> (Ps, C) = extendRule S r'", "using rules and ruleSet[where R'=R' and R=R and Ps=Ps and C=C]"], ["proof (prove)\nusing this:\n  (Ps, C) \\<in> R*\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>R' \\<subseteq> upRules; R = Ax \\<union> R';\n   (Ps, C) \\<in> R*\\<rbrakk>\n  \\<Longrightarrow> \\<exists>S r.\n                       extendRule S r = (Ps, C) \\<and>\n                       (r \\<in> R' \\<or> r \\<in> Ax)\n\ngoal (1 subgoal):\n 1. \\<exists>r' S.\n       (r' \\<in> Ax \\<or> r' \\<in> R') \\<and> (Ps, C) = extendRule S r'", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S a b.\n       \\<lbrakk>(Ps, C) \\<in> Ax \\<union> R'*; R' \\<subseteq> upRules;\n        R = Ax \\<union> R'; extendRule S (a, b) = (Ps, C);\n        (a, b) \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            ((a, b) \\<in> Ax \\<or> (a, b) \\<in> R') \\<and>\n                            (\\<exists>S. (Ps, C) = extendRule S (a, b))\n 2. \\<And>S a b.\n       \\<lbrakk>(Ps, C) \\<in> Ax \\<union> R'*; R' \\<subseteq> upRules;\n        R = Ax \\<union> R'; extendRule S (a, b) = (Ps, C);\n        (a, b) \\<in> Ax\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            ((a, b) \\<in> Ax \\<or> (a, b) \\<in> R') \\<and>\n                            (\\<exists>S. (Ps, C) = extendRule S (a, b))", "apply (rule_tac x=a in exI,rule_tac x=b in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S a b.\n       \\<lbrakk>(Ps, C) \\<in> Ax \\<union> R'*; R' \\<subseteq> upRules;\n        R = Ax \\<union> R'; extendRule S (a, b) = (Ps, C);\n        (a, b) \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> ((a, b) \\<in> Ax \\<or> (a, b) \\<in> R') \\<and>\n                         (\\<exists>S. (Ps, C) = extendRule S (a, b))\n 2. \\<And>S a b.\n       \\<lbrakk>(Ps, C) \\<in> Ax \\<union> R'*; R' \\<subseteq> upRules;\n        R = Ax \\<union> R'; extendRule S (a, b) = (Ps, C);\n        (a, b) \\<in> Ax\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            ((a, b) \\<in> Ax \\<or> (a, b) \\<in> R') \\<and>\n                            (\\<exists>S. (Ps, C) = extendRule S (a, b))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S a b.\n       \\<lbrakk>(Ps, C) \\<in> Ax \\<union> R'*; R' \\<subseteq> upRules;\n        R = Ax \\<union> R'; extendRule S (a, b) = (Ps, C);\n        (a, b) \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S. (Ps, C) = extendRule S (a, b)\n 2. \\<And>S a b.\n       \\<lbrakk>(Ps, C) \\<in> Ax \\<union> R'*; R' \\<subseteq> upRules;\n        R = Ax \\<union> R'; extendRule S (a, b) = (Ps, C);\n        (a, b) \\<in> Ax\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            ((a, b) \\<in> Ax \\<or> (a, b) \\<in> R') \\<and>\n                            (\\<exists>S. (Ps, C) = extendRule S (a, b))", "apply (rule_tac x=S in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S a b.\n       \\<lbrakk>(Ps, C) \\<in> Ax \\<union> R'*; R' \\<subseteq> upRules;\n        R = Ax \\<union> R'; extendRule S (a, b) = (Ps, C);\n        (a, b) \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> (Ps, C) = extendRule S (a, b)\n 2. \\<And>S a b.\n       \\<lbrakk>(Ps, C) \\<in> Ax \\<union> R'*; R' \\<subseteq> upRules;\n        R = Ax \\<union> R'; extendRule S (a, b) = (Ps, C);\n        (a, b) \\<in> Ax\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            ((a, b) \\<in> Ax \\<or> (a, b) \\<in> R') \\<and>\n                            (\\<exists>S. (Ps, C) = extendRule S (a, b))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S a b.\n       \\<lbrakk>(Ps, C) \\<in> Ax \\<union> R'*; R' \\<subseteq> upRules;\n        R = Ax \\<union> R'; extendRule S (a, b) = (Ps, C);\n        (a, b) \\<in> Ax\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            ((a, b) \\<in> Ax \\<or> (a, b) \\<in> R') \\<and>\n                            (\\<exists>S. (Ps, C) = extendRule S (a, b))", "apply (rule_tac x=a in exI,rule_tac x=b in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S a b.\n       \\<lbrakk>(Ps, C) \\<in> Ax \\<union> R'*; R' \\<subseteq> upRules;\n        R = Ax \\<union> R'; extendRule S (a, b) = (Ps, C);\n        (a, b) \\<in> Ax\\<rbrakk>\n       \\<Longrightarrow> ((a, b) \\<in> Ax \\<or> (a, b) \\<in> R') \\<and>\n                         (\\<exists>S. (Ps, C) = extendRule S (a, b))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S a b.\n       \\<lbrakk>(Ps, C) \\<in> Ax \\<union> R'*; R' \\<subseteq> upRules;\n        R = Ax \\<union> R'; extendRule S (a, b) = (Ps, C);\n        (a, b) \\<in> Ax\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S. (Ps, C) = extendRule S (a, b)", "by (rule_tac x=S in exI) simp"], ["proof (state)\nthis:\n  \\<exists>r' S.\n     (r' \\<in> Ax \\<or> r' \\<in> R') \\<and> (Ps, C) = extendRule S r'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>r' S.\n     (r' \\<in> Ax \\<or> r' \\<in> R') \\<and> (Ps, C) = extendRule S r'", "obtain r' S where \"r' \\<in> Ax \\<or> r' \\<in> R'\" and \"(Ps,C) = extendRule S r'\""], ["proof (prove)\nusing this:\n  \\<exists>r' S.\n     (r' \\<in> Ax \\<or> r' \\<in> R') \\<and> (Ps, C) = extendRule S r'\n\ngoal (1 subgoal):\n 1. (\\<And>r' S.\n        \\<lbrakk>r' \\<in> Ax \\<or> r' \\<in> R';\n         (Ps, C) = extendRule S r'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  r' \\<in> Ax \\<or> r' \\<in> R'\n  (Ps, C) = extendRule S r'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r' \\<in> Ax \\<or> r' \\<in> R'\n  (Ps, C) = extendRule S r'", "obtain \\<Gamma> \\<Delta> where gam1:\"S = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  r' \\<in> Ax \\<or> r' \\<in> R'\n  (Ps, C) = extendRule S r'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma> \\<Delta>.\n        S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases S) auto"], ["proof (state)\nthis:\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "have \"r' \\<in> Ax \\<or> r' \\<in> R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' \\<in> Ax \\<or> r' \\<in> R'", "by fact"], ["proof (state)\nthis:\n  r' \\<in> Ax \\<or> r' \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r' \\<in> Ax \\<or> r' \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r' \\<in> Ax \\<or> r' \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "assume \"r' \\<in> Ax\""], ["proof (state)\nthis:\n  r' \\<in> Ax\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r' \\<in> Ax", "have \"Ps = []\""], ["proof (prove)\nusing this:\n  r' \\<in> Ax\n\ngoal (1 subgoal):\n 1. Ps = []", "using characteriseAx[where r=r'] and \\<open>(Ps,C) = extendRule S r'\\<close> \n      and extendRule_def[where forms=S and R=r']"], ["proof (prove)\nusing this:\n  r' \\<in> Ax\n  r' \\<in> Ax \\<Longrightarrow>\n  r' = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  (\\<exists>i.\n      r' = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>))\n  (Ps, C) = extendRule S r'\n  extendRule S r' \\<equiv> (map (extend S) (fst r'), extend S (snd r'))\n\ngoal (1 subgoal):\n 1. Ps = []", "by auto"], ["proof (state)\nthis:\n  Ps = []\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  Ps = []", "have \"\\<forall> p \\<in> set Ps. \\<exists> m\\<le>n. (p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  Ps = []\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "by (auto simp add:Ball_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r' \\<in> Ax \\<Longrightarrow>\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r' \\<in> Ax \\<Longrightarrow>\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r' \\<in> Ax \\<Longrightarrow>\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "assume \"r' \\<in> R'\""], ["proof (state)\nthis:\n  r' \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r' \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "assume \"P \\<in> set Ps\""], ["proof (state)\nthis:\n  P \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "from \\<open>r' \\<in> R'\\<close>"], ["proof (chain)\npicking this:\n  r' \\<in> R'", "have \"r' \\<in> upRules\""], ["proof (prove)\nusing this:\n  r' \\<in> R'\n\ngoal (1 subgoal):\n 1. r' \\<in> upRules", "using rules"], ["proof (prove)\nusing this:\n  r' \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. r' \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r' \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r' \\<in> upRules", "obtain ps c where \"r' = (ps,c)\""], ["proof (prove)\nusing this:\n  r' \\<in> upRules\n\ngoal (1 subgoal):\n 1. (\\<And>ps c. r' = (ps, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r') (auto)"], ["proof (state)\nthis:\n  r' = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r' = (ps, c)", "have \"\\<exists> p \\<in> set ps. P = extend S p\""], ["proof (prove)\nusing this:\n  r' = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps. P = extend S p", "using \\<open>P \\<in> set Ps\\<close> and \\<open>(Ps,C) = extendRule S r'\\<close>"], ["proof (prove)\nusing this:\n  r' = (ps, c)\n  P \\<in> set Ps\n  (Ps, C) = extendRule S r'\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps. P = extend S p", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  \\<exists>p\\<in>set ps. P = extend S p\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>p\\<in>set ps. P = extend S p", "obtain p where \"p \\<in> set ps\" and \"P = extend S p\""], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>set ps. P = extend S p\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> set ps; P = extend S p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p \\<in> set ps\n  P = extend S p\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  p \\<in> set ps\n  P = extend S p", "obtain \\<Gamma>' \\<Delta>' where \"p = (\\<Gamma>' \\<Rightarrow>* \\<Delta>')\""], ["proof (prove)\nusing this:\n  p \\<in> set ps\n  P = extend S p\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>' \\<Delta>'.\n        p = ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseSeq[where C=p]"], ["proof (prove)\nusing this:\n  p \\<in> set ps\n  P = extend S p\n  \\<exists>A B. p = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>' \\<Delta>'.\n        p = ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p = ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  p = ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')", "have P: \"P = (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\""], ["proof (prove)\nusing this:\n  p = ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n\ngoal (1 subgoal):\n 1. P = ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "using gam1 and \\<open>P = extend S p\\<close>"], ["proof (prove)\nusing this:\n  p = ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  P = extend S p\n\ngoal (1 subgoal):\n 1. P = ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "by (auto simp add:extend_def)"], ["proof (state)\nthis:\n  P = ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  P = ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "have \"(\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\""], ["proof (prove)\nusing this:\n  P = ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')", "using \\<open>p \\<in> set ps\\<close> and \\<open>r' = (ps,c)\\<close> and \\<open>p = (\\<Gamma>' \\<Rightarrow>* \\<Delta>')\\<close>"], ["proof (prove)\nusing this:\n  P = ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n  p \\<in> set ps\n  r' = (ps, c)\n  p = ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "from \\<open>r'=(ps,c)\\<close>"], ["proof (chain)\npicking this:\n  r' = (ps, c)", "have \"\\<exists> F Fs. c = (\\<Empt> \\<Rightarrow>* \\<LM>Compound F Fs\\<RM>) \\<or> c = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  r' = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n       c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "using \\<open>r' \\<in> upRules\\<close> and upRuleCharacterise[where Ps=ps and C=c]"], ["proof (prove)\nusing this:\n  r' = (ps, c)\n  r' \\<in> upRules\n  (ps, c) \\<in> upRules \\<Longrightarrow>\n  \\<exists>F Fs.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n     c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n       c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>F Fs.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n     c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>F Fs.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n     c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "obtain F Fs where \"c = (\\<Empt> \\<Rightarrow>* \\<LM>Compound F Fs\\<RM>) \\<or> c = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  \\<exists>F Fs.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n     c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. (\\<And>F Fs.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n        c =\n        ( \\<LM> Compound F\n                 Fs  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "assume \"c = (\\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs \\<RM>)\""], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "with \\<open>c= (\\<Empt> \\<Rightarrow>* \\<LM>Compound F Fs\\<RM>)\\<close> and \\<open>(Ps,C) = extendRule S r'\\<close> and \\<open>r' = (ps,c)\\<close> and gam1"], ["proof (chain)\npicking this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n  (Ps, C) = extendRule S r'\n  r' = (ps, c)\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)", "have gam2:\"C = (\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\""], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n  (Ps, C) = extendRule S r'\n  r' = (ps, c)\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n\ngoal (1 subgoal):\n 1. C = ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)", "using extendRule_def[where forms=S and R=r'] and extend_def[where forms=S and seq=c]"], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n  (Ps, C) = extendRule S r'\n  r' = (ps, c)\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n  extendRule S r' \\<equiv> (map (extend S) (fst r'), extend S (snd r'))\n  extend S c \\<equiv>  antec S + antec c \\<Rightarrow>* succ S + succ c\n\ngoal (1 subgoal):\n 1. C = ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)", "by simp"], ["proof (state)\nthis:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "with \\<open>c = (\\<Empt> \\<Rightarrow>* \\<LM>Compound F Fs\\<RM>)\\<close>"], ["proof (chain)\npicking this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)", "have \"rightPrincipal r' (Compound F Fs)\""], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n\ngoal (1 subgoal):\n 1. rightPrincipal r' (Compound F Fs)", "using \\<open>r' = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  r' = (ps, c)\n\ngoal (1 subgoal):\n 1. rightPrincipal r' (Compound F Fs)", "by auto"], ["proof (state)\nthis:\n  rightPrincipal r' (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  rightPrincipal r' (Compound F Fs)", "have a1:\"\\<forall> r \\<in> R'. rightPrincipal r (Compound F Fs) \\<longrightarrow> r = r'\""], ["proof (prove)\nusing this:\n  rightPrincipal r' (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R'.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow> r = r'", "using \\<open>uniqueConclusion R'\\<close>"], ["proof (prove)\nusing this:\n  rightPrincipal r' (Compound F Fs)\n  uniqueConclusion R'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R'.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow> r = r'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>rightPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         rightPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>rightPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         rightPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "fix r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>rightPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         rightPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "assume \"r \\<in> R'\""], ["proof (state)\nthis:\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rightPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         rightPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "then"], ["proof (chain)\npicking this:\n  r \\<in> R'", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "using \\<open>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rightPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         rightPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "assume \"rightPrincipal r (Compound F Fs)\""], ["proof (state)\nthis:\n  rightPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rightPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         rightPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "obtain ps' c' where \"r = (ps',c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps' c'. r = (ps', c') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps', c')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rightPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         rightPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "with \\<open>rightPrincipal r (Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  rightPrincipal r (Compound F Fs)\n  r = (ps', c')", "have \"c' = (\\<Empt> \\<Rightarrow>* \\<LM>Compound F Fs\\<RM>)\""], ["proof (prove)\nusing this:\n  rightPrincipal r (Compound F Fs)\n  r = (ps', c')\n\ngoal (1 subgoal):\n 1. c' = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)", "by (cases) auto"], ["proof (state)\nthis:\n  c' = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rightPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         rightPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "then"], ["proof (chain)\npicking this:\n  c' = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)", "have \"c' = c\""], ["proof (prove)\nusing this:\n  c' = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n\ngoal (1 subgoal):\n 1. c' = c", "using \\<open>c = (\\<Empt> \\<Rightarrow>* \\<LM>Compound F Fs\\<RM>)\\<close>"], ["proof (prove)\nusing this:\n  c' = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n\ngoal (1 subgoal):\n 1. c' = c", "by simp"], ["proof (state)\nthis:\n  c' = c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rightPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         rightPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "then"], ["proof (chain)\npicking this:\n  c' = c", "have \"r = r'\""], ["proof (prove)\nusing this:\n  c' = c\n\ngoal (1 subgoal):\n 1. r = r'", "using \\<open>uniqueConclusion R'\\<close> and \\<open>r \\<in> R'\\<close> and \\<open>r' \\<in> R'\\<close>\n              and \\<open>r'=(ps,c)\\<close> and \\<open>r = (ps',c')\\<close>"], ["proof (prove)\nusing this:\n  c' = c\n  uniqueConclusion R'\n  r \\<in> R'\n  r' \\<in> R'\n  r' = (ps, c)\n  r = (ps', c')\n\ngoal (1 subgoal):\n 1. r = r'", "by (simp add:uniqueConclusion_def Ball_def)"], ["proof (state)\nthis:\n  r = r'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rightPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         rightPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?r2 \\<in> R'; rightPrincipal ?r2 (Compound F Fs)\\<rbrakk>\n  \\<Longrightarrow> ?r2 = r'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rightPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         rightPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?r2 \\<in> R'; rightPrincipal ?r2 (Compound F Fs)\\<rbrakk>\n  \\<Longrightarrow> ?r2 = r'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R'.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow> r = r'", "by (auto simp add:Ball_def)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>R'.\n     rightPrincipal r (Compound F Fs) \\<longrightarrow> r = r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>r\\<in>R'.\n     rightPrincipal r (Compound F Fs) \\<longrightarrow> r = r'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "with \\<open>p \\<in> set ps\\<close> and \\<open>r' = (ps,c)\\<close> and \\<open>(\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> set ps\n  r' = (ps, c)\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<forall>r\\<in>R'.\n     rightPrincipal r (Compound F Fs) \\<longrightarrow> r = r'", "have b1:\"\\<forall> r \\<in> R'. rightPrincipal r (Compound F Fs) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\""], ["proof (prove)\nusing this:\n  p \\<in> set ps\n  r' = (ps, c)\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<forall>r\\<in>R'.\n     rightPrincipal r (Compound F Fs) \\<longrightarrow> r = r'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R'.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "by blast"], ["proof (state)\nthis:\n  \\<forall>r\\<in>R'.\n     rightPrincipal r (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "have \"\\<forall> r \\<in> R. rightPrincipal r (Compound F Fs) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "assume \"t \\<in> R\" and \"rightPrincipal t (Compound F Fs)\""], ["proof (state)\nthis:\n  t \\<in> R\n  rightPrincipal t (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "then"], ["proof (chain)\npicking this:\n  t \\<in> R\n  rightPrincipal t (Compound F Fs)", "obtain pss d where \"t = (pss,d)\""], ["proof (prove)\nusing this:\n  t \\<in> R\n  rightPrincipal t (Compound F Fs)\n\ngoal (1 subgoal):\n 1. (\\<And>pss d. t = (pss, d) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases t) auto"], ["proof (state)\nthis:\n  t = (pss, d)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "with \\<open>rightPrincipal t (Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  rightPrincipal t (Compound F Fs)\n  t = (pss, d)", "have rP:\"d = (\\<Empt> \\<Rightarrow>* \\<LM>Compound F Fs\\<RM>)\""], ["proof (prove)\nusing this:\n  rightPrincipal t (Compound F Fs)\n  t = (pss, d)\n\ngoal (1 subgoal):\n 1. d = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)", "by (cases) auto"], ["proof (state)\nthis:\n  d = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "from \\<open>t \\<in> R\\<close>"], ["proof (chain)\npicking this:\n  t \\<in> R", "have split:\"t \\<in> Ax \\<or> t \\<in> R'\""], ["proof (prove)\nusing this:\n  t \\<in> R\n\ngoal (1 subgoal):\n 1. t \\<in> Ax \\<or> t \\<in> R'", "using rules"], ["proof (prove)\nusing this:\n  t \\<in> R\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. t \\<in> Ax \\<or> t \\<in> R'", "by auto"], ["proof (state)\nthis:\n  t \\<in> Ax \\<or> t \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "moreover"], ["proof (state)\nthis:\n  t \\<in> Ax \\<or> t \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "{"], ["proof (state)\nthis:\n  t \\<in> Ax \\<or> t \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "assume \"t \\<in> Ax\""], ["proof (state)\nthis:\n  t \\<in> Ax\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "then"], ["proof (chain)\npicking this:\n  t \\<in> Ax", "obtain i where \"d = (\\<LM>At i\\<RM> \\<Rightarrow>* \\<LM>At i\\<RM>) \\<or> d = (\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  t \\<in> Ax\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        d = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n        d = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseAx[where r=t] and \\<open>t = (pss,d)\\<close>"], ["proof (prove)\nusing this:\n  t \\<in> Ax\n  t \\<in> Ax \\<Longrightarrow>\n  t = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  (\\<exists>i.\n      t = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>))\n  t = (pss, d)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        d = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n        d = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  d = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n  d = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "then"], ["proof (chain)\npicking this:\n  d = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n  d = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"(\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\""], ["proof (prove)\nusing this:\n  d = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n  d = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)", "using rP"], ["proof (prove)\nusing this:\n  d = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n  d = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  d = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "}"], ["proof (state)\nthis:\n  t \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "moreover"], ["proof (state)\nthis:\n  t \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "{"], ["proof (state)\nthis:\n  t \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "assume \"t \\<in> R'\""], ["proof (state)\nthis:\n  t \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "with \\<open>rightPrincipal t (Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  rightPrincipal t (Compound F Fs)\n  t \\<in> R'", "have \"(\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\""], ["proof (prove)\nusing this:\n  rightPrincipal t (Compound F Fs)\n  t \\<in> R'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)", "using b1 and \\<open>t \\<in> R'\\<close>"], ["proof (prove)\nusing this:\n  rightPrincipal t (Compound F Fs)\n  t \\<in> R'\n  \\<forall>r\\<in>R'.\n     rightPrincipal r (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\n  t \\<in> R'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "}"], ["proof (state)\nthis:\n  t \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "ultimately"], ["proof (chain)\npicking this:\n  t \\<in> Ax \\<or> t \\<in> R'\n  t \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n  t \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)", "have \"(\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\""], ["proof (prove)\nusing this:\n  t \\<in> Ax \\<or> t \\<in> R'\n  t \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n  t \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)", "by blast"], ["proof (state)\nthis:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?t2 \\<in> R; rightPrincipal ?t2 (Compound F Fs)\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                    \\<in> set (fst ?t2)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?t2 \\<in> R; rightPrincipal ?t2 (Compound F Fs)\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                    \\<in> set (fst ?t2)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t2 \\<in> R; rightPrincipal ?t2 (Compound F Fs)\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                    \\<in> set (fst ?t2)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       rightPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "by auto"], ["proof (state)\nthis:\n  \\<forall>r\\<in>R.\n     rightPrincipal r (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>r\\<in>R.\n     rightPrincipal r (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>R.\n     rightPrincipal r (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "have \"\\<exists> m\\<le>n. (P,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>R.\n     rightPrincipal r (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (P, m) \\<in> derivable R*", "using rules and gam1 and gam2 and P\n          and rightInvertible[where R'=R' and R=R and F=F and Fs=Fs and n=n and \\<Gamma>=\\<Gamma> and \\<Gamma>'=\\<Gamma>' and \\<Delta>=\\<Delta> and \\<Delta>'=\\<Delta>']\n          and IN and der"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>R.\n     rightPrincipal r (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs)\n  P = ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n  \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n   ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> Compound F Fs, n)\n   \\<in> derivable R*;\n   \\<forall>r'\\<in>R.\n      rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n      ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m\\<le>n.\n                       ( \\<Gamma> +\n                         \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                        m)\n                       \\<in> derivable R*\n  (Ps, C) \\<in> R*\n  (C, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (P, m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n. (P, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<Longrightarrow>\n  \\<exists>m\\<le>n. (P, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<Longrightarrow>\n  \\<exists>m\\<le>n. (P, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<Longrightarrow>\n  \\<exists>m\\<le>n. (P, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "assume \"c = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (state)\nthis:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "with \\<open>c= (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\\<close> and \\<open>(Ps,C) = extendRule S r'\\<close> and \\<open>r' = (ps,c)\\<close> and gam1"], ["proof (chain)\npicking this:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n  (Ps, C) = extendRule S r'\n  r' = (ps, c)\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "have gam3:\"C = (\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n  (Ps, C) = extendRule S r'\n  r' = (ps, c)\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. C = ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)", "using extendRule_def[where forms=S and R=r'] and extend_def[where forms=S and seq=c]"], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n  (Ps, C) = extendRule S r'\n  r' = (ps, c)\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n  extendRule S r' \\<equiv> (map (extend S) (fst r'), extend S (snd r'))\n  extend S c \\<equiv>  antec S + antec c \\<Rightarrow>* succ S + succ c\n\ngoal (1 subgoal):\n 1. C = ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)", "by simp"], ["proof (state)\nthis:\n  C = ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "with \\<open>c = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\\<close>"], ["proof (chain)\npicking this:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n  C = ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)", "have \"leftPrincipal r' (Compound F Fs)\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n  C = ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. leftPrincipal r' (Compound F Fs)", "using \\<open>r' = (ps,c)\\<close> and \\<open>r' \\<in> R'\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n  C = ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  r' = (ps, c)\n  r' \\<in> R'\n\ngoal (1 subgoal):\n 1. leftPrincipal r' (Compound F Fs)", "by auto"], ["proof (state)\nthis:\n  leftPrincipal r' (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  leftPrincipal r' (Compound F Fs)", "have a1:\"\\<forall> r \\<in> R'. leftPrincipal r (Compound F Fs) \\<longrightarrow> r = r'\""], ["proof (prove)\nusing this:\n  leftPrincipal r' (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R'.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow> r = r'", "using \\<open>uniqueConclusion R'\\<close>"], ["proof (prove)\nusing this:\n  leftPrincipal r' (Compound F Fs)\n  uniqueConclusion R'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R'.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow> r = r'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>leftPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         leftPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>leftPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         leftPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "fix r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>leftPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         leftPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "assume \"r \\<in> R'\""], ["proof (state)\nthis:\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>leftPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         leftPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "then"], ["proof (chain)\npicking this:\n  r \\<in> R'", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "using \\<open>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<lbrakk>leftPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         leftPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "assume \"leftPrincipal r (Compound F Fs)\""], ["proof (state)\nthis:\n  leftPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>leftPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         leftPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "obtain ps' c' where \"r = (ps',c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps' c'. r = (ps', c') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps', c')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>leftPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         leftPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "with \\<open>leftPrincipal r (Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  leftPrincipal r (Compound F Fs)\n  r = (ps', c')", "have \"c' = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  leftPrincipal r (Compound F Fs)\n  r = (ps', c')\n\ngoal (1 subgoal):\n 1. c' = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "by (cases) auto"], ["proof (state)\nthis:\n  c' = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>leftPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         leftPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "then"], ["proof (chain)\npicking this:\n  c' = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"c' = c\""], ["proof (prove)\nusing this:\n  c' = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. c' = c", "using \\<open>c = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\\<close>"], ["proof (prove)\nusing this:\n  c' = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. c' = c", "by simp"], ["proof (state)\nthis:\n  c' = c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>leftPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         leftPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "then"], ["proof (chain)\npicking this:\n  c' = c", "have \"r = r'\""], ["proof (prove)\nusing this:\n  c' = c\n\ngoal (1 subgoal):\n 1. r = r'", "using \\<open>uniqueConclusion R'\\<close> and \\<open>r \\<in> R'\\<close> and \\<open>r' \\<in> R'\\<close>\n              and \\<open>r'=(ps,c)\\<close> and \\<open>r = (ps',c')\\<close>"], ["proof (prove)\nusing this:\n  c' = c\n  uniqueConclusion R'\n  r \\<in> R'\n  r' \\<in> R'\n  r' = (ps, c)\n  r = (ps', c')\n\ngoal (1 subgoal):\n 1. r = r'", "by (simp add:uniqueConclusion_def Ball_def)"], ["proof (state)\nthis:\n  r = r'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>leftPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         leftPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?r2 \\<in> R'; leftPrincipal ?r2 (Compound F Fs)\\<rbrakk>\n  \\<Longrightarrow> ?r2 = r'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>leftPrincipal r' (Compound F Fs); uniqueConclusion R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>R'.\n                         leftPrincipal r (Compound F Fs) \\<longrightarrow>\n                         r = r'", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?r2 \\<in> R'; leftPrincipal ?r2 (Compound F Fs)\\<rbrakk>\n  \\<Longrightarrow> ?r2 = r'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R'.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow> r = r'", "by (auto simp add:Ball_def)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>R'.\n     leftPrincipal r (Compound F Fs) \\<longrightarrow> r = r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>r\\<in>R'.\n     leftPrincipal r (Compound F Fs) \\<longrightarrow> r = r'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "with \\<open>p \\<in> set ps\\<close> and \\<open>r' = (ps,c)\\<close> and \\<open>(\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> set ps\n  r' = (ps, c)\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<forall>r\\<in>R'.\n     leftPrincipal r (Compound F Fs) \\<longrightarrow> r = r'", "have b1:\"\\<forall> r \\<in> R'. leftPrincipal r (Compound F Fs) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\""], ["proof (prove)\nusing this:\n  p \\<in> set ps\n  r' = (ps, c)\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<forall>r\\<in>R'.\n     leftPrincipal r (Compound F Fs) \\<longrightarrow> r = r'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R'.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "by blast"], ["proof (state)\nthis:\n  \\<forall>r\\<in>R'.\n     leftPrincipal r (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "have \"\\<forall> r \\<in> R. leftPrincipal r (Compound F Fs) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "assume \"t \\<in> R\" and \"leftPrincipal t (Compound F Fs)\""], ["proof (state)\nthis:\n  t \\<in> R\n  leftPrincipal t (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "then"], ["proof (chain)\npicking this:\n  t \\<in> R\n  leftPrincipal t (Compound F Fs)", "obtain pss d where \"t = (pss,d)\""], ["proof (prove)\nusing this:\n  t \\<in> R\n  leftPrincipal t (Compound F Fs)\n\ngoal (1 subgoal):\n 1. (\\<And>pss d. t = (pss, d) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases t) auto"], ["proof (state)\nthis:\n  t = (pss, d)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "with \\<open>leftPrincipal t (Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  leftPrincipal t (Compound F Fs)\n  t = (pss, d)", "have rP:\"antec d = \\<LM>Compound F Fs\\<RM>\""], ["proof (prove)\nusing this:\n  leftPrincipal t (Compound F Fs)\n  t = (pss, d)\n\ngoal (1 subgoal):\n 1. antec d = \\<LM> Compound F Fs  \\<RM>", "by (cases) auto"], ["proof (state)\nthis:\n  antec d = \\<LM> Compound F Fs  \\<RM>\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "from \\<open>t \\<in> R\\<close>"], ["proof (chain)\npicking this:\n  t \\<in> R", "have split:\"t \\<in> Ax \\<or> t \\<in> R'\""], ["proof (prove)\nusing this:\n  t \\<in> R\n\ngoal (1 subgoal):\n 1. t \\<in> Ax \\<or> t \\<in> R'", "using rules"], ["proof (prove)\nusing this:\n  t \\<in> R\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. t \\<in> Ax \\<or> t \\<in> R'", "by (cases) auto"], ["proof (state)\nthis:\n  t \\<in> Ax \\<or> t \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "moreover"], ["proof (state)\nthis:\n  t \\<in> Ax \\<or> t \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "{"], ["proof (state)\nthis:\n  t \\<in> Ax \\<or> t \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "assume \"t \\<in> Ax\""], ["proof (state)\nthis:\n  t \\<in> Ax\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "then"], ["proof (chain)\npicking this:\n  t \\<in> Ax", "obtain i where \"d = (\\<LM>At i\\<RM> \\<Rightarrow>* \\<LM>At i\\<RM>) \\<or> d = (\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  t \\<in> Ax\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        d = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n        d = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseAx[where r=t] and \\<open>t = (pss,d)\\<close>"], ["proof (prove)\nusing this:\n  t \\<in> Ax\n  t \\<in> Ax \\<Longrightarrow>\n  t = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  (\\<exists>i.\n      t = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>))\n  t = (pss, d)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        d = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n        d = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  d = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n  d = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "then"], ["proof (chain)\npicking this:\n  d = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n  d = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"(\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\""], ["proof (prove)\nusing this:\n  d = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n  d = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)", "using rP"], ["proof (prove)\nusing this:\n  d = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n  d = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  antec d = \\<LM> Compound F Fs  \\<RM>\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "}"], ["proof (state)\nthis:\n  t \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "moreover"], ["proof (state)\nthis:\n  t \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "{"], ["proof (state)\nthis:\n  t \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "assume \"t \\<in> R'\""], ["proof (state)\nthis:\n  t \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "with \\<open>leftPrincipal t (Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  leftPrincipal t (Compound F Fs)\n  t \\<in> R'", "have \"(\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\""], ["proof (prove)\nusing this:\n  leftPrincipal t (Compound F Fs)\n  t \\<in> R'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)", "using b1 and \\<open>t \\<in> R'\\<close>"], ["proof (prove)\nusing this:\n  leftPrincipal t (Compound F Fs)\n  t \\<in> R'\n  \\<forall>r\\<in>R'.\n     leftPrincipal r (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\n  t \\<in> R'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "}"], ["proof (state)\nthis:\n  t \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "ultimately"], ["proof (chain)\npicking this:\n  t \\<in> Ax \\<or> t \\<in> R'\n  t \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n  t \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)", "have \"(\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\""], ["proof (prove)\nusing this:\n  t \\<in> Ax \\<or> t \\<in> R'\n  t \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n  t \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)", "by blast"], ["proof (state)\nthis:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst t)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?t2 \\<in> R; leftPrincipal ?t2 (Compound F Fs)\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                    \\<in> set (fst ?t2)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?t2 \\<in> R; leftPrincipal ?t2 (Compound F Fs)\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                    \\<in> set (fst ?t2)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t2 \\<in> R; leftPrincipal ?t2 (Compound F Fs)\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                    \\<in> set (fst ?t2)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R.\n       leftPrincipal r (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "by auto"], ["proof (state)\nthis:\n  \\<forall>r\\<in>R.\n     leftPrincipal r (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>r\\<in>R.\n     leftPrincipal r (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>R.\n     leftPrincipal r (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)", "have \"\\<exists> m\\<le>n. (P,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>R.\n     leftPrincipal r (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (P, m) \\<in> derivable R*", "using rules and gam1 and gam3 and P\n          and leftInvertible[where R'=R' and R=R and F=F and Fs=Fs and n=n and \\<Gamma>=\\<Gamma> and \\<Gamma>'=\\<Gamma>' and \\<Delta>=\\<Delta> and \\<Delta>'=\\<Delta>']\n          and IN and der"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>R.\n     leftPrincipal r (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r)\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  C = ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>)\n  P = ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n  \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n   ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<Delta>, n)\n   \\<in> derivable R*;\n   \\<forall>r'\\<in>R.\n      leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n      ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m\\<le>n.\n                       ( \\<Gamma> +\n                         \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                        m)\n                       \\<in> derivable R*\n  (Ps, C) \\<in> R*\n  (C, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (P, m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n. (P, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<exists>m\\<le>n. (P, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<Longrightarrow>\n  \\<exists>m\\<le>n. (P, m) \\<in> derivable R*\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<exists>m\\<le>n. (P, m) \\<in> derivable R*", "have \"\\<exists> m\\<le>n. (P,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<Longrightarrow>\n  \\<exists>m\\<le>n. (P, m) \\<in> derivable R*\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<exists>m\\<le>n. (P, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (P, m) \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n. (P, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  ?P2 \\<in> set Ps \\<Longrightarrow>\n  \\<exists>m\\<le>n. (?P2, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ?P2 \\<in> set Ps \\<Longrightarrow>\n  \\<exists>m\\<le>n. (?P2, m) \\<in> derivable R*", "have \"\\<forall> p \\<in> set Ps. \\<exists> m\\<le>n. (p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ?P2 \\<in> set Ps \\<Longrightarrow>\n  \\<exists>m\\<le>n. (?P2, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r' \\<in> R' \\<Longrightarrow>\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  r' \\<in> Ax \\<or> r' \\<in> R'\n  r' \\<in> Ax \\<Longrightarrow>\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\n  r' \\<in> R' \\<Longrightarrow>\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "show \"\\<forall> p \\<in> set Ps. \\<exists> m\\<le>n. (p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  r' \\<in> Ax \\<or> r' \\<in> R'\n  r' \\<in> Ax \\<Longrightarrow>\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\n  r' \\<in> R' \\<Longrightarrow>\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\nA rule is invertible iff every premiss is derivable at a height lower than that of the conclusion.  A set of rules is invertible iff every rule is invertible.  These definitions are easily formalised:\\<close>"], ["", "overloading\n  invertible \\<equiv> invertible\n  invertible_set \\<equiv> invertible_set\nbegin"], ["", "definition invertible\n  where \"invertible r R \\<equiv>\n       \\<forall> n S. (r \\<in> R \\<and> (snd (extendRule S r),n) \\<in> derivable R*) \\<longrightarrow>\n       (\\<forall> p \\<in> set (fst (extendRule S r)). \\<exists> m \\<le> n. (p,m) \\<in> derivable R*)\""], ["", "definition invertible_set\n  where \"invertible_set R \\<equiv> \\<forall> (ps,c) \\<in> R. invertible (ps,c) R\""], ["", "end"], ["", "text\\<open>\n\\noindent A set of multisuccedent \\SC rules is invertible if each rule has a different conclusion.  \\textbf{G3cp} has the unique conclusion property (as shown in \\S\\ref{isarules}).  Thus, \\textbf{G3cp} is an invertible set of rules:\n\\<close>"], ["", "lemma unique_to_invertible:\nassumes (*<*)a:(*>*) \"R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\"\n   and  \"uniqueConclusion R'\"\nshows \"invertible_set R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_set R", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_set R", "using assms invertibleRule"], ["proof (prove)\nusing this:\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  uniqueConclusion R'\n  \\<lbrakk>?R' \\<subseteq> upRules \\<and> ?R = Ax \\<union> ?R';\n   uniqueConclusion ?R'; (?Ps, ?C) \\<in> ?R*;\n   (?C, ?n) \\<in> derivable ?R*\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p\\<in>set ?Ps.\n                       \\<exists>m\\<le>?n. (p, m) \\<in> derivable ?R*\n\ngoal (1 subgoal):\n 1. invertible_set R", "apply (auto simp add:invertible_set_def invertible_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R';\n        \\<And>R' R Ps C n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R'; (Ps, C) \\<in> R*;\n            (C, n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n. (p, m) \\<in> derivable R*;\n        R' \\<subseteq> upRules; R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> Ax\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*\n 2. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R';\n        \\<And>R' R Ps C n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R'; (Ps, C) \\<in> R*;\n            (C, n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n. (p, m) \\<in> derivable R*;\n        R' \\<subseteq> upRules; R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*", "apply (drule_tac x=R' in meta_spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R'; R' \\<subseteq> upRules;\n        R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> Ax;\n        \\<And>R Ps C n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R'; (Ps, C) \\<in> R*;\n            (C, n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*\n 2. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R';\n        \\<And>R' R Ps C n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R'; (Ps, C) \\<in> R*;\n            (C, n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n. (p, m) \\<in> derivable R*;\n        R' \\<subseteq> upRules; R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*", "apply (drule_tac x=R in meta_spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R'; R' \\<subseteq> upRules;\n        R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> Ax;\n        \\<And>Ps C n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R'; (Ps, C) \\<in> R*;\n            (C, n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*\n 2. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R';\n        \\<And>R' R Ps C n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R'; (Ps, C) \\<in> R*;\n            (C, n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n. (p, m) \\<in> derivable R*;\n        R' \\<subseteq> upRules; R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*", "apply (drule_tac x=\"fst (extendRule S (a,b))\" in meta_spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R'; R' \\<subseteq> upRules;\n        R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> Ax;\n        \\<And>C n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R'; (fst (extendRule S (a, b)), C) \\<in> R*;\n            (C, n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set (fst (extendRule S (a, b))).\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*\n 2. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R';\n        \\<And>R' R Ps C n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R'; (Ps, C) \\<in> R*;\n            (C, n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n. (p, m) \\<in> derivable R*;\n        R' \\<subseteq> upRules; R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*", "apply (drule_tac x=\"snd (extendRule S (a,b))\" in meta_spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R'; R' \\<subseteq> upRules;\n        R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> Ax;\n        \\<And>n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R';\n            (fst (extendRule S (a, b)), snd (extendRule S (a, b))) \\<in> R*;\n            (snd (extendRule S (a, b)), n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set (fst (extendRule S (a, b))).\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*\n 2. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R';\n        \\<And>R' R Ps C n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R'; (Ps, C) \\<in> R*;\n            (C, n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n. (p, m) \\<in> derivable R*;\n        R' \\<subseteq> upRules; R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*", "apply (drule_tac x=n in meta_spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R'; R' \\<subseteq> upRules;\n        R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> Ax;\n        \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n         uniqueConclusion R';\n         (fst (extendRule S (a, b)), snd (extendRule S (a, b))) \\<in> R*;\n         (snd (extendRule S (a, b)), n) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> \\<forall>p\\<in>set (fst (extendRule S (a, b))).\n                             \\<exists>m\\<le>n.\n                                (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*\n 2. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R';\n        \\<And>R' R Ps C n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R'; (Ps, C) \\<in> R*;\n            (C, n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n. (p, m) \\<in> derivable R*;\n        R' \\<subseteq> upRules; R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*", "apply (simp add:a extRules.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R';\n        \\<And>R' R Ps C n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R'; (Ps, C) \\<in> R*;\n            (C, n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n. (p, m) \\<in> derivable R*;\n        R' \\<subseteq> upRules; R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*", "apply (drule_tac x=R' in meta_spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R'; R' \\<subseteq> upRules;\n        R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> R';\n        \\<And>R Ps C n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R'; (Ps, C) \\<in> R*;\n            (C, n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*", "apply (drule_tac x=R in meta_spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R'; R' \\<subseteq> upRules;\n        R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> R';\n        \\<And>Ps C n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R'; (Ps, C) \\<in> R*;\n            (C, n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*", "apply (drule_tac x=\"fst (extendRule S (a,b))\" in meta_spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R'; R' \\<subseteq> upRules;\n        R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> R';\n        \\<And>C n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R'; (fst (extendRule S (a, b)), C) \\<in> R*;\n            (C, n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set (fst (extendRule S (a, b))).\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*", "apply (drule_tac x=\"snd (extendRule S (a,b))\" in meta_spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R'; R' \\<subseteq> upRules;\n        R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> R';\n        \\<And>n.\n           \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n            uniqueConclusion R';\n            (fst (extendRule S (a, b)), snd (extendRule S (a, b))) \\<in> R*;\n            (snd (extendRule S (a, b)), n) \\<in> derivable R*\\<rbrakk>\n           \\<Longrightarrow> \\<forall>p\\<in>set (fst (extendRule S (a, b))).\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*", "apply (drule_tac x=n in meta_spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b n S p.\n       \\<lbrakk>uniqueConclusion R'; R' \\<subseteq> upRules;\n        R = Ax \\<union> R';\n        (snd (extendRule S (a, b)), n) \\<in> derivable Ax \\<union> R'*;\n        p \\<in> set (fst (extendRule S (a, b))); (a, b) \\<in> R';\n        \\<lbrakk>R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n         uniqueConclusion R';\n         (fst (extendRule S (a, b)), snd (extendRule S (a, b))) \\<in> R*;\n         (snd (extendRule S (a, b)), n) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> \\<forall>p\\<in>set (fst (extendRule S (a, b))).\n                             \\<exists>m\\<le>n.\n                                (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (p, m) \\<in> derivable Ax \\<union> R'*", "by (simp add:a extRules.intros)"], ["", "(*>*)\n(* --------------------------------------------\n   --------------------------------------------\n               G3cp EXAMPLE\n   --------------------------------------------\n   -------------------------------------------- *)"], ["", "lemma g3cp_invertible:\nshows \"invertible_set (Ax \\<union> g3cp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_set (Ax \\<union> g3cp)", "using g3cp_uc and g3cp_upRules\n   and unique_to_invertible[where R'=\"g3cp\" and R=\"Ax \\<union> g3cp\"]"], ["proof (prove)\nusing this:\n  uniqueConclusion g3cp\n  g3cp \\<subseteq> upRules\n  \\<lbrakk>g3cp \\<subseteq> upRules \\<and>\n           Ax \\<union> g3cp = Ax \\<union> g3cp;\n   uniqueConclusion g3cp\\<rbrakk>\n  \\<Longrightarrow> invertible_set (Ax \\<union> g3cp)\n\ngoal (1 subgoal):\n 1. invertible_set (Ax \\<union> g3cp)", "by auto"], ["", "text\\<open>\n\\subsection{Conclusions}\nFor \\SC multisuccedent calculi, the theoretical results have been formalised.  Moreover, the running example demonstrates that it is straightforward to implement such calculi and reason about them.  Indeed, it will be this class of calculi for which we will prove more results in \\S\\ref{isaSRC}.\n\\<close>"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}