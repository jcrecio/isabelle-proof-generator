{"file_name": "/home/qj213/afp-2021-10-22/thys/SequentInvertibility/SingleSuccedent.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/SequentInvertibility", "problem_names": ["lemma deriv_to_deriv[simp]:\nassumes \"(C,n) \\<in> derivable R\"\nshows \"C \\<in> derivable' R\"", "lemma deriv_to_deriv2:\nassumes \"C \\<in> derivable' R\"\nshows \"\\<exists> n. (C,n) \\<in> derivable R\"", "lemma characteriseSeq:\nshows \"\\<exists> A B. (C :: 'a sequent) = (A \\<Rightarrow>* B)\"", "lemma nonEmptySet:\nshows \"A \\<noteq> [] \\<longrightarrow> (\\<exists> a. a \\<in> set A)\"", "lemma midMultiset:\n  assumes \"\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\" and \"A \\<noteq> B\"\n  shows \"\\<exists> \\<Gamma>''. \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and> \\<Gamma>' = \\<Gamma>'' \\<oplus> A\"", "lemma extendID:\nassumes \"extend S (\\<LM> At i \\<RM> \\<Rightarrow>* At i) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"At i \\<in># \\<Gamma>\"", "lemma extendFalsum:\nassumes \"extend S (\\<LM> ff \\<RM> \\<Rightarrow>* Em) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"ff \\<in># \\<Gamma>\"", "lemma containID:\nassumes a:\"At i \\<in># \\<Gamma>\"\n    and b:\"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* At i,0) \\<in> derivable R*\"", "lemma containFalsum:\nassumes a: \"ff \\<in># \\<Gamma>\"\n   and  b: \"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* C,0) \\<in> derivable R*\"", "lemma characteriseAx:\nshows \"r \\<in> Ax \\<Longrightarrow> r = ([],\\<LM> ff \\<RM> \\<Rightarrow>* Em) \\<or> (\\<exists> i. r = ([], \\<LM> At i \\<RM> \\<Rightarrow>* At i))\"", "lemma characteriseLast:\nassumes \"(C,m+1) \\<in> derivable R\"\nshows \"\\<exists> Ps. Ps \\<noteq> [] \\<and>\n             (Ps,C) \\<in> R \\<and> \n             (\\<forall> p \\<in> set Ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R)\"", "lemma upRuleCharacterise:\nassumes \"(Ps,C) \\<in> upRules\"\nshows \"\\<exists> F Fs. C = (\\<Empt> \\<Rightarrow>* Compound F Fs) \\<or> C = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* Em)\"", "lemma extendEmpty:\nshows \"extend (\\<Empt> \\<Rightarrow>* Em) C = C\"", "lemma extendContain:\nassumes \"r = (ps,c)\"\n    and \"(Ps,C) = extendRule S r\"\n    and \"p \\<in> set ps\"\nshows \"extend S p \\<in> set Ps\"", "lemma nonPrincipalID:\nfixes A :: \"'a form\"\nassumes \"r \\<in> Ax\"\nshows \"\\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A\"", "lemma extended_Ax_prems_empty:\nassumes \"r \\<in> Ax\"\nshows \"fst (extendRule S r) = []\"", "lemma ruleSet:\nassumes \"R' \\<subseteq> upRules\"\n    and \"R = Ax \\<union> R'\"\n    and \"(Ps,C) \\<in> R*\"\nshows \"\\<exists> S r. extendRule S r = (Ps,C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)\"", "lemma dpWeak:\nassumes a:\"(\\<Gamma> \\<Rightarrow>* E,n) \\<in> derivable R*\"\n   and  b: \"R' \\<subseteq> upRules\"\n   and  c: \"R = Ax \\<union> R'\" \nshows \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,n) \\<in> derivable R*\"", "lemma dpWeakR:\nassumes (*<*)a:(*>*)\"(\\<Gamma> \\<Rightarrow>* Em,n) \\<in> derivable R*\"\nand  (*<*)b:(*>*) \"R' \\<subseteq> upRules\"\nand  (*<*)c:(*>*) \"R = Ax \\<union> R'\" \nshows \"(\\<Gamma> \\<Rightarrow>* C,n) \\<in> derivable R*\"   \\<comment> \\<open>Proof omitted\\<close>", "lemma rightInvertible:\n(*<*)fixes \\<Gamma> :: \"'a form multiset\"(*>*)\n\nassumes (*<*)rules:(*>*) \"R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\"\nand   (*<*)a:(*>*) \"(\\<Gamma> \\<Rightarrow>* Compound F Fs,n) \\<in> derivable R*\"\nand   (*<*)b:(*>*) \"\\<forall> r' \\<in> R. rightPrincipal r' (Compound F Fs) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r')\"\nand (*<*)nonEm:(*>*) \"E \\<noteq> Em\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> +\\<Gamma>' \\<Rightarrow>* E,m) \\<in> derivable R*\"", "lemma leftInvertible:\n(*<*)fixes \\<Gamma> :: \"'a form multiset\"(*>*)\n\nassumes (*<*)rules:(*>*) \"R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\"\nand   (*<*)a:(*>*) \"(\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>,n) \\<in> derivable R*\"\nand   (*<*)b:(*>*) \"\\<forall> r' \\<in> R. leftPrincipal r' (Compound F Fs) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> +\\<Gamma>' \\<Rightarrow>* \\<delta>,m) \\<in> derivable R*\"", "lemma g3ip_upRules:\nshows \"g3ip \\<subseteq> upRules\"", "lemma impRInvert:\nassumes \"(\\<Gamma> \\<Rightarrow>* (A \\<supset> B), n) \\<in> derivable (Ax \\<union> g3ip)*\" and \"B \\<noteq> Em\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> \\<oplus> A \\<Rightarrow>* B, m) \\<in> derivable (Ax \\<union> g3ip)*\""], "translations": [["", "lemma deriv_to_deriv[simp]:\nassumes \"(C,n) \\<in> derivable R\"\nshows \"C \\<in> derivable' R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> derivable' R", "using assms"], ["proof (prove)\nusing this:\n  (C, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. C \\<in> derivable' R", "by (induct) auto"], ["", "lemma deriv_to_deriv2:\nassumes \"C \\<in> derivable' R\"\nshows \"\\<exists> n. (C,n) \\<in> derivable R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n. (C, n) \\<in> derivable R", "using assms"], ["proof (prove)\nusing this:\n  C \\<in> derivable' R\n\ngoal (1 subgoal):\n 1. \\<exists>n. (C, n) \\<in> derivable R", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C.\n       ([], C) \\<in> R \\<Longrightarrow>\n       \\<exists>n. (C, n) \\<in> derivable R\n 2. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "case (base C)"], ["proof (state)\nthis:\n  ([], C) \\<in> R\n\ngoal (2 subgoals):\n 1. \\<And>C.\n       ([], C) \\<in> R \\<Longrightarrow>\n       \\<exists>n. (C, n) \\<in> derivable R\n 2. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  ([], C) \\<in> R", "have \"(C,0) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  ([], C) \\<in> R\n\ngoal (1 subgoal):\n 1. (C, 0) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  (C, 0) \\<in> derivable R\n\ngoal (2 subgoals):\n 1. \\<And>C.\n       ([], C) \\<in> R \\<Longrightarrow>\n       \\<exists>n. (C, n) \\<in> derivable R\n 2. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  (C, 0) \\<in> derivable R", "show ?case"], ["proof (prove)\nusing this:\n  (C, 0) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>n. (C, n) \\<in> derivable R", "by blast"], ["proof (state)\nthis:\n  \\<exists>n. (C, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "case (step r)"], ["proof (state)\nthis:\n  r \\<in> R\n  fst r \\<noteq> []\n  \\<forall>p\\<in>set (fst r).\n     p \\<in> derivable' R \\<and> (\\<exists>n. (p, n) \\<in> derivable R)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  r \\<in> R\n  fst r \\<noteq> []\n  \\<forall>p\\<in>set (fst r).\n     p \\<in> derivable' R \\<and> (\\<exists>n. (p, n) \\<in> derivable R)", "obtain ps c where \"r = (ps,c)\" and \"ps \\<noteq> []\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  fst r \\<noteq> []\n  \\<forall>p\\<in>set (fst r).\n     p \\<in> derivable' R \\<and> (\\<exists>n. (p, n) \\<in> derivable R)\n\ngoal (1 subgoal):\n 1. (\\<And>ps c.\n        \\<lbrakk>r = (ps, c); ps \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n  ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  ps \\<noteq> []", "have aa: \"\\<forall> p \\<in> set ps. \\<exists> n. (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps. \\<exists>n. (p, n) \\<in> derivable R", "using step(3)"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  ps \\<noteq> []\n  \\<forall>p\\<in>set (fst r).\n     p \\<in> derivable' R \\<and> (\\<exists>n. (p, n) \\<in> derivable R)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps. \\<exists>n. (p, n) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps. \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps. \\<exists>n. (p, n) \\<in> derivable R", "have \"\\<exists> m. \\<forall> p \\<in> set ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps. \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "proof (induct ps)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>p\\<in>set [].\n       \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n    \\<exists>m.\n       \\<forall>p\\<in>set []. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n 2. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "case Nil"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set []. \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (2 subgoals):\n 1. \\<forall>p\\<in>set [].\n       \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n    \\<exists>m.\n       \\<forall>p\\<in>set []. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n 2. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set []. \\<exists>n. (p, n) \\<in> derivable R", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set []. \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       \\<forall>p\\<in>set []. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  \\<exists>m.\n     \\<forall>p\\<in>set []. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set as.\n     \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  \\<forall>p\\<in>set (a # as). \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set as.\n     \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  \\<forall>p\\<in>set (a # as). \\<exists>n. (p, n) \\<in> derivable R", "have \"\\<exists> m. \\<forall> p \\<in> set as. \\<exists> n\\<le>m. (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set as.\n     \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  \\<forall>p\\<in>set (a # as). \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "obtain m where \"\\<forall> p \\<in> set as. \\<exists> n\\<le>m. (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<forall>p\\<in>set as.\n           \\<exists>n\\<le>m. (p, n) \\<in> derivable R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "from \\<open>\\<forall> p \\<in> set (a # as). \\<exists> n. (p,n) \\<in> derivable R\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set (a # as). \\<exists>n. (p, n) \\<in> derivable R", "have\n      \"\\<exists> n. (a,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (a # as). \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>n. (a, n) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  \\<exists>n. (a, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<exists>n. (a, n) \\<in> derivable R", "obtain m' where \"(a,m') \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<exists>n. (a, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        (a, m') \\<in> derivable R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (a, m') \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  (a, m') \\<in> derivable R", "have \"\\<forall> p \\<in> set (a # as). \\<exists> n\\<le>(max m m'). (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  (a, m') \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (a # as).\n       \\<exists>n\\<le>max m m'. (p, n) \\<in> derivable R", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x.\n                x \\<in> set as \\<longrightarrow>\n                (\\<exists>n\\<le>m. (x, n) \\<in> derivable R);\n     (a, m') \\<in> derivable R\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<le>max m m'. (a, n) \\<in> derivable R\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set as \\<longrightarrow>\n                   (\\<exists>n\\<le>m. (x, n) \\<in> derivable R);\n        (a, m') \\<in> derivable R; x \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "apply (rule_tac x=m' in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x.\n                x \\<in> set as \\<longrightarrow>\n                (\\<exists>n\\<le>m. (x, n) \\<in> derivable R);\n     (a, m') \\<in> derivable R\\<rbrakk>\n    \\<Longrightarrow> m' \\<le> max m m' \\<and> (a, m') \\<in> derivable R\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set as \\<longrightarrow>\n                   (\\<exists>n\\<le>m. (x, n) \\<in> derivable R);\n        (a, m') \\<in> derivable R; x \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set as \\<longrightarrow>\n                   (\\<exists>n\\<le>m. (x, n) \\<in> derivable R);\n        (a, m') \\<in> derivable R; x \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "apply (drule_tac x=x in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(a, m') \\<in> derivable R; x \\<in> set as;\n        x \\<in> set as \\<longrightarrow>\n        (\\<exists>n\\<le>m. (x, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x n.\n       \\<lbrakk>(a, m') \\<in> derivable R; x \\<in> set as; n \\<le> m;\n        (x, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "by (rule_tac x=n in exI) auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set (a # as).\n     \\<exists>n\\<le>max m m'. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set (a # as).\n     \\<exists>n\\<le>max m m'. (p, n) \\<in> derivable R", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (a # as).\n     \\<exists>n\\<le>max m m'. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       \\<forall>p\\<in>set (a # as).\n          \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "by blast"], ["proof (state)\nthis:\n  \\<exists>m.\n     \\<forall>p\\<in>set (a # as). \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m.\n     \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<exists>m.\n     \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "obtain m where \"\\<forall> p \\<in> set ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<exists>m.\n     \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<forall>p\\<in>set ps.\n           \\<exists>n\\<le>m. (p, n) \\<in> derivable R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "with \\<open>r = (ps,c)\\<close> and \\<open>r \\<in> R\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  r \\<in> R\n  \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "have \"(c,m+1) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> R\n  \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (c, m + 1) \\<in> derivable R", "using \\<open>ps \\<noteq> []\\<close> and\n    derivable.step[where r=\"(ps,c)\" and R=R and m=m]"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> R\n  \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  ps \\<noteq> []\n  \\<lbrakk>(ps, c) \\<in> R; fst (ps, c) \\<noteq> [];\n   \\<forall>p\\<in>set (fst (ps, c)).\n      \\<exists>n\\<le>m. (p, n) \\<in> derivable R\\<rbrakk>\n  \\<Longrightarrow> (snd (ps, c), m + 1) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (c, m + 1) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  (c, m + 1) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  (c, m + 1) \\<in> derivable R", "show ?case"], ["proof (prove)\nusing this:\n  (c, m + 1) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>n. (snd r, n) \\<in> derivable R", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  (c, m + 1) \\<in> derivable R\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<exists>n. (snd r, n) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  \\<exists>n. (snd r, n) \\<in> derivable R\n\ngoal:\nNo subgoals!", "qed"], ["", "(* definition of invertible rule and invertible set of rules.  It's a bit nasty, but all it really says is\n   If a rule is in the given set, and if any extension of that rule is derivable at n, then the\n   premisses of the extended rule are derivable at height at most n.  *)"], ["", "overloading\n  invertible \\<equiv> invertible\n  invertible_set \\<equiv> invertible_set\nbegin"], ["", "definition invertible\n  where \"invertible r R \\<equiv>\n    \\<forall> n S. (r \\<in> R \\<and> (snd (extendRule S r),n) \\<in> derivable R*) \\<longrightarrow>\n    (\\<forall> p \\<in> set (fst (extendRule S r)). \\<exists> m \\<le> n. (p,m) \\<in> derivable R*)\""], ["", "definition invertible_set\n  where \"invertible_set R \\<equiv> \\<forall> (ps,c) \\<in> R. invertible (ps,c) R\""], ["", "end"], ["", "(* Characterisation of a sequent *)"], ["", "lemma characteriseSeq:\nshows \"\\<exists> A B. (C :: 'a sequent) = (A \\<Rightarrow>* B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A B. C = ( A \\<Rightarrow>* B)", "apply (rule_tac x=\"antec C\" in exI, rule_tac x=\"succ C\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. C = ( antec C \\<Rightarrow>* succ C)", "by (cases C) (auto)"], ["", "(* Helper function for later *)"], ["", "lemma nonEmptySet:\nshows \"A \\<noteq> [] \\<longrightarrow> (\\<exists> a. a \\<in> set A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> [] \\<longrightarrow> (\\<exists>a. a \\<in> set A)", "by (auto simp add:neq_Nil_conv)"], ["", "(* Lemma which comes in helpful ALL THE TIME *)"], ["", "lemma midMultiset:\n  assumes \"\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\" and \"A \\<noteq> B\"\n  shows \"\\<exists> \\<Gamma>''. \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and> \\<Gamma>' = \\<Gamma>'' \\<oplus> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "from assms"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  A \\<noteq> B", "have \"A \\<in># \\<Gamma>'\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. A \\<in># \\<Gamma>'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B;\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> A \\<in># \\<Gamma>'", "from assms"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  A \\<noteq> B", "have \"set_mset (\\<Gamma> \\<oplus> A) = set_mset (\\<Gamma>' \\<oplus> B)\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. set_mset (\\<Gamma> \\<oplus> A) = set_mset (\\<Gamma>' \\<oplus> B)", "by auto"], ["proof (state)\nthis:\n  set_mset (\\<Gamma> \\<oplus> A) = set_mset (\\<Gamma>' \\<oplus> B)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B;\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> A \\<in># \\<Gamma>'", "then"], ["proof (chain)\npicking this:\n  set_mset (\\<Gamma> \\<oplus> A) = set_mset (\\<Gamma>' \\<oplus> B)", "have \"set_mset \\<Gamma> \\<union> {A} = set_mset \\<Gamma>' \\<union> {B}\""], ["proof (prove)\nusing this:\n  set_mset (\\<Gamma> \\<oplus> A) = set_mset (\\<Gamma>' \\<oplus> B)\n\ngoal (1 subgoal):\n 1. set_mset \\<Gamma> \\<union> {A} = set_mset \\<Gamma>' \\<union> {B}", "by auto"], ["proof (state)\nthis:\n  set_mset \\<Gamma> \\<union> {A} = set_mset \\<Gamma>' \\<union> {B}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B;\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> A \\<in># \\<Gamma>'", "then"], ["proof (chain)\npicking this:\n  set_mset \\<Gamma> \\<union> {A} = set_mset \\<Gamma>' \\<union> {B}", "have \"set_mset \\<Gamma> \\<union> {A} \\<subseteq> set_mset \\<Gamma>' \\<union> {B}\""], ["proof (prove)\nusing this:\n  set_mset \\<Gamma> \\<union> {A} = set_mset \\<Gamma>' \\<union> {B}\n\ngoal (1 subgoal):\n 1. set_mset \\<Gamma> \\<union> {A}\n    \\<subseteq> set_mset \\<Gamma>' \\<union> {B}", "by simp"], ["proof (state)\nthis:\n  set_mset \\<Gamma> \\<union> {A} \\<subseteq> set_mset \\<Gamma>' \\<union> {B}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B;\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> A \\<in># \\<Gamma>'", "then"], ["proof (chain)\npicking this:\n  set_mset \\<Gamma> \\<union> {A} \\<subseteq> set_mset \\<Gamma>' \\<union> {B}", "have \"A \\<in> set_mset \\<Gamma>'\""], ["proof (prove)\nusing this:\n  set_mset \\<Gamma> \\<union> {A} \\<subseteq> set_mset \\<Gamma>' \\<union> {B}\n\ngoal (1 subgoal):\n 1. A \\<in># \\<Gamma>'", "using assms"], ["proof (prove)\nusing this:\n  set_mset \\<Gamma> \\<union> {A} \\<subseteq> set_mset \\<Gamma>' \\<union> {B}\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. A \\<in># \\<Gamma>'", "by auto"], ["proof (state)\nthis:\n  A \\<in># \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B;\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> A \\<in># \\<Gamma>'", "thus \"A \\<in># \\<Gamma>'\""], ["proof (prove)\nusing this:\n  A \\<in># \\<Gamma>'\n\ngoal (1 subgoal):\n 1. A \\<in># \\<Gamma>'", "by simp"], ["proof (state)\nthis:\n  A \\<in># \\<Gamma>'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A \\<in># \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "then"], ["proof (chain)\npicking this:\n  A \\<in># \\<Gamma>'", "have \"\\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>'\""], ["proof (prove)\nusing this:\n  A \\<in># \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>'", "by (auto simp add:multiset_eq_iff)"], ["proof (state)\nthis:\n  \\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>'", "have \"\\<exists> \\<Gamma>''. \\<Gamma>' = \\<Gamma>'' \\<oplus> A\""], ["proof (prove)\nusing this:\n  \\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''. \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "apply (rule_tac x=\"\\<Gamma>' \\<ominus> A\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>' \\<Longrightarrow>\n    \\<Gamma>' = \\<Gamma>' \\<ominus> A \\<oplus> A", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>''. \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Gamma>''. \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "obtain \\<Gamma>'' where eq1:\"\\<Gamma>' = \\<Gamma>'' \\<oplus> A\""], ["proof (prove)\nusing this:\n  \\<exists>\\<Gamma>''. \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>''.\n        \\<Gamma>' = \\<Gamma>'' \\<oplus> A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "from \\<open>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\\<close> eq1"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "have \"\\<Gamma> \\<oplus> A = \\<Gamma>'' \\<oplus> A \\<oplus> B\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<oplus> A = \\<Gamma>'' \\<oplus> A \\<oplus> B", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> \\<oplus> A = \\<Gamma>'' \\<oplus> A \\<oplus> B\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "then"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>'' \\<oplus> A \\<oplus> B", "have \"\\<Gamma> = \\<Gamma>'' \\<oplus> B\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>'' \\<oplus> A \\<oplus> B\n\ngoal (1 subgoal):\n 1. \\<Gamma> = \\<Gamma>'' \\<oplus> B", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> = \\<Gamma>'' \\<oplus> B\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma>'' \\<oplus> B\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "using eq1"], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma>'' \\<oplus> B\n  \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>''.\n     \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n     \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Lemma which says that if we have extended an identity rule, then the propositional variable is\n   contained in the extended multisets *)"], ["", "lemma extendID:\nassumes \"extend S (\\<LM> At i \\<RM> \\<Rightarrow>* At i) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"At i \\<in># \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma>", "using assms"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n    At i \\<in># \\<Gamma>", "from assms"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"\\<exists> \\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> At i\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> At i", "using extend_def[where forms=S and seq=\"\\<LM> At i \\<RM> \\<Rightarrow>* At i\"]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<equiv>\n  if succ ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) = Em\n  then  antec S +\n        antec ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Rightarrow>* succ S\n  else ( antec S +\n         antec\n          ( \\<LM> At i  \\<RM> \\<Rightarrow>* At\n        i) \\<Rightarrow>* succ ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> At i", "by (rule_tac x=\"antec S\" in exI) auto"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> At i\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n    At i \\<in># \\<Gamma>", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> At i", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> At i\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  At i \\<in># \\<Gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extendFalsum:\nassumes \"extend S (\\<LM> ff \\<RM> \\<Rightarrow>* Em) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"ff \\<in># \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "from assms"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"\\<exists> \\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff", "using extend_def[where forms=S and seq=\"\\<LM>ff \\<RM> \\<Rightarrow>* Em\"]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<equiv>\n  if succ ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) = Em\n  then  antec S +\n        antec ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Rightarrow>* succ S\n  else ( antec S +\n         antec\n          ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Rightarrow>* succ\n                         ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff", "by (rule_tac x=\"antec S\" in exI) auto"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Lemma that says if a propositional variable is in both the antecedent and succedent of a sequent,\n   then it is derivable from idupRules *)"], ["", "lemma containID:\nassumes a:\"At i \\<in># \\<Gamma>\"\n    and b:\"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* At i,0) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* At i, 0) \\<in> derivable R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* At i, 0) \\<in> derivable R*", "from a"], ["proof (chain)\npicking this:\n  At i \\<in># \\<Gamma>", "have \"\\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i\""], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* At i, 0) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i", "have \"extend ((\\<Gamma> \\<ominus> At i) \\<Rightarrow>* Em) (\\<LM> At i \\<RM> \\<Rightarrow>* At i) = (\\<Gamma> \\<Rightarrow>* At i)\""], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* Em)\n     ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n    ( \\<Gamma> \\<Rightarrow>* At i)", "using extend_def[where forms=\"\\<Gamma> \\<ominus> At i \\<Rightarrow>* Em\" and seq=\"\\<LM>At i\\<RM> \\<Rightarrow>* At i\"]"], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* Em)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<equiv>\n  if succ ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) = Em\n  then  antec ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* Em) +\n        antec\n         ( \\<LM> At i  \\<RM> \\<Rightarrow>* At\n       i) \\<Rightarrow>* succ ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* Em)\n  else ( antec ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* Em) +\n         antec\n          ( \\<LM> At i  \\<RM> \\<Rightarrow>* At\n        i) \\<Rightarrow>* succ ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i))\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* Em)\n     ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n    ( \\<Gamma> \\<Rightarrow>* At i)", "by auto"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* Em)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<Rightarrow>* At i)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* At i, 0) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* Em)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<Rightarrow>* At i)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* At i, 0) \\<in> derivable R*", "have \"([],\\<LM> At i \\<RM> \\<Rightarrow>* At i) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<in> R", "using b"], ["proof (prove)\nusing this:\n  Ax \\<subseteq> R\n\ngoal (1 subgoal):\n 1. ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<in> R", "by auto"], ["proof (state)\nthis:\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<in> R\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* At i, 0) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* Em)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<Rightarrow>* At i)\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<in> R", "have \"([],\\<Gamma> \\<Rightarrow>* At i) \\<in> R*\""], ["proof (prove)\nusing this:\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* Em)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<Rightarrow>* At i)\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<in> R\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* At i) \\<in> R*", "using extRules.I[where R=R and r=\"([],  \\<LM>At i\\<RM> \\<Rightarrow>* At i)\" and seq=\"\\<Gamma> \\<ominus> At i \\<Rightarrow>* Em\"] \n       and extendRule_def[where forms=\"\\<Gamma> \\<ominus> At i \\<Rightarrow>* Em\" and R=\"([],  \\<LM>At i\\<RM> \\<Rightarrow>* At i)\"]"], ["proof (prove)\nusing this:\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* Em)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<Rightarrow>* At i)\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<in> R\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<in> R \\<Longrightarrow>\n  extendRule ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* Em)\n   ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n  \\<in> R*\n  extendRule ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* Em)\n   ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<equiv>\n  (map (extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* Em))\n    (fst ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)),\n   extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* Em)\n    (snd ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)))\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* At i) \\<in> R*", "by auto"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<Rightarrow>* At i) \\<in> R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* At i, 0) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<Rightarrow>* At i) \\<in> R*", "show ?thesis"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* At i) \\<in> R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* At i, 0) \\<in> derivable R*", "using derivable.base[where R=\"R*\" and C=\"\\<Gamma> \\<Rightarrow>* At i\"]"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* At i) \\<in> R*\n  ([],  \\<Gamma> \\<Rightarrow>* At i) \\<in> R* \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* At i, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* At i, 0) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* At i, 0) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma containFalsum:\nassumes a: \"ff \\<in># \\<Gamma>\"\n   and  b: \"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* C,0) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*", "from a"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma>", "have \"\\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff", "have \"extend (\\<Gamma> \\<ominus> ff \\<Rightarrow>* C) (\\<LM>ff\\<RM> \\<Rightarrow>* Em) = (\\<Gamma> \\<Rightarrow>* C)\""], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* C)\n     ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n    ( \\<Gamma> \\<Rightarrow>* C)", "using extend_def[where forms=\"\\<Gamma> \\<ominus> ff \\<Rightarrow>* C\" and seq=\"\\<LM>ff\\<RM> \\<Rightarrow>* Em\"]"], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* C)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<equiv>\n  if succ ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) = Em\n  then  antec ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* C) +\n        antec\n         ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Rightarrow>* succ\n                        ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* C)\n  else ( antec ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* C) +\n         antec\n          ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Rightarrow>* succ\n                         ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em))\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* C)\n     ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n    ( \\<Gamma> \\<Rightarrow>* C)", "by auto"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* C)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* C)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* C)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* C)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*", "have \"([],\\<LM>ff\\<RM> \\<Rightarrow>* Em) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<in> R", "using b"], ["proof (prove)\nusing this:\n  Ax \\<subseteq> R\n\ngoal (1 subgoal):\n 1. ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<in> R", "by auto"], ["proof (state)\nthis:\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<in> R\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* C)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* C)\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<in> R", "have \"([],\\<Gamma> \\<Rightarrow>* C) \\<in> R*\""], ["proof (prove)\nusing this:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* C)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* C)\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<in> R\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* C) \\<in> R*", "using extRules.I[where R=R and r=\"([],  \\<LM>ff\\<RM> \\<Rightarrow>* Em)\" and seq=\"\\<Gamma> \\<ominus> ff \\<Rightarrow>* C\"] \n       and extendRule_def[where forms=\"\\<Gamma> \\<ominus> ff \\<Rightarrow>* C\" and R=\"([],  \\<LM>ff\\<RM> \\<Rightarrow>* Em)\"]"], ["proof (prove)\nusing this:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* C)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* C)\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<in> R\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<in> R \\<Longrightarrow>\n  extendRule ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* C)\n   ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n  \\<in> R*\n  extendRule ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* C)\n   ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<equiv>\n  (map (extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* C))\n    (fst ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)),\n   extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* C)\n    (snd ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)))\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* C) \\<in> R*", "by auto"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<Rightarrow>* C) \\<in> R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<Rightarrow>* C) \\<in> R*", "show ?thesis"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* C) \\<in> R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*", "using derivable.base[where R=\"R*\" and C=\"\\<Gamma> \\<Rightarrow>* C\"]"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* C) \\<in> R*\n  ([],  \\<Gamma> \\<Rightarrow>* C) \\<in> R* \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Lemma which says that if r is an identity rule, then r is of the form\n   ([], P \\<Rightarrow>* P) *)"], ["", "lemma characteriseAx:\nshows \"r \\<in> Ax \\<Longrightarrow> r = ([],\\<LM> ff \\<RM> \\<Rightarrow>* Em) \\<or> (\\<exists> i. r = ([], \\<LM> At i \\<RM> \\<Rightarrow>* At i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<Longrightarrow>\n    r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n    (\\<exists>i. r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i))", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> Ax; r = (a, b)\\<rbrakk>\n       \\<Longrightarrow> r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n                         (\\<exists>i.\n                             r =\n                             ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i))", "by (rule Ax.cases) auto"], ["", "(* A lemma about the last rule used in a derivation, i.e. that one exists *)"], ["", "lemma characteriseLast:\nassumes \"(C,m+1) \\<in> derivable R\"\nshows \"\\<exists> Ps. Ps \\<noteq> [] \\<and>\n             (Ps,C) \\<in> R \\<and> \n             (\\<forall> p \\<in> set Ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Ps.\n       Ps \\<noteq> [] \\<and>\n       (Ps, C) \\<in> R \\<and>\n       (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "using assms"], ["proof (prove)\nusing this:\n  (C, m + 1) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>Ps.\n       Ps \\<noteq> [] \\<and>\n       (Ps, C) \\<in> R \\<and>\n       (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "by (cases) auto"], ["", "lemma upRuleCharacterise:\nassumes \"(Ps,C) \\<in> upRules\"\nshows \"\\<exists> F Fs. C = (\\<Empt> \\<Rightarrow>* Compound F Fs) \\<or> C = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* Em)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       C = ( \\<Empt> \\<Rightarrow>* Compound F Fs) \\<or>\n       C = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)", "using assms"], ["proof (prove)\nusing this:\n  (Ps, C) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       C = ( \\<Empt> \\<Rightarrow>* Compound F Fs) \\<or>\n       C = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)", "by (cases) auto"], ["", "lemma extendEmpty:\nshows \"extend (\\<Empt> \\<Rightarrow>* Em) C = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend ( \\<Empt> \\<Rightarrow>* Em) C = C", "apply (auto simp add:extend_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. succ C = Em \\<Longrightarrow> ( antec C \\<Rightarrow>* Em) = C\n 2. succ C \\<noteq> Em \\<Longrightarrow>\n    ( antec C \\<Rightarrow>* succ C) = C", "apply (cases C)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>succ C = Em; C = ( x1 \\<Rightarrow>* x2)\\<rbrakk>\n       \\<Longrightarrow> ( antec C \\<Rightarrow>* Em) = C\n 2. succ C \\<noteq> Em \\<Longrightarrow>\n    ( antec C \\<Rightarrow>* succ C) = C", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. succ C \\<noteq> Em \\<Longrightarrow>\n    ( antec C \\<Rightarrow>* succ C) = C", "by (cases C) auto"], ["", "lemma extendContain:\nassumes \"r = (ps,c)\"\n    and \"(Ps,C) = extendRule S r\"\n    and \"p \\<in> set ps\"\nshows \"extend S p \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "from \\<open>p \\<in> set ps\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> set ps", "have \"extend S p \\<in> set (map (extend S) ps)\""], ["proof (prove)\nusing this:\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set (map (extend S) ps)", "by auto"], ["proof (state)\nthis:\n  extend S p \\<in> set (map (extend S) ps)\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "moreover"], ["proof (state)\nthis:\n  extend S p \\<in> set (map (extend S) ps)\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "from \\<open>(Ps,C) = extendRule S r\\<close> and \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  (Ps, C) = extendRule S r\n  r = (ps, c)", "have \"map (extend S) ps = Ps\""], ["proof (prove)\nusing this:\n  (Ps, C) = extendRule S r\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. map (extend S) ps = Ps", "by (simp add:extendRule_def)"], ["proof (state)\nthis:\n  map (extend S) ps = Ps\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "ultimately"], ["proof (chain)\npicking this:\n  extend S p \\<in> set (map (extend S) ps)\n  map (extend S) ps = Ps", "show ?thesis"], ["proof (prove)\nusing this:\n  extend S p \\<in> set (map (extend S) ps)\n  map (extend S) ps = Ps\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "by auto"], ["proof (state)\nthis:\n  extend S p \\<in> set Ps\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nonPrincipalID:\nfixes A :: \"'a form\"\nassumes \"r \\<in> Ax\"\nshows \"\\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "from assms"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "obtain i where r1:\"r = ([], \\<LM> ff \\<RM> \\<Rightarrow>* Em) \\<or> r = ([], \\<LM> At i \\<RM> \\<Rightarrow>* At i)\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n        r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseAx[where r=r]"], ["proof (prove)\nusing this:\n  r \\<in> Ax\n  r \\<in> Ax \\<Longrightarrow>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  (\\<exists>i. r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n        r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "{"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "assume \"rightPrincipal r A\""], ["proof (state)\nthis:\n  rightPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "then"], ["proof (chain)\npicking this:\n  rightPrincipal r A", "obtain Ps where r2:\"r = (Ps, \\<Empt> \\<Rightarrow>* A)\""], ["proof (prove)\nusing this:\n  rightPrincipal r A\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        r = (Ps,  \\<Empt> \\<Rightarrow>* A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (Ps,  \\<Empt> \\<Rightarrow>* A)\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "with r1"], ["proof (chain)\npicking this:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n  r = (Ps,  \\<Empt> \\<Rightarrow>* A)", "have \"False\""], ["proof (prove)\nusing this:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n  r = (Ps,  \\<Empt> \\<Rightarrow>* A)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "}"], ["proof (state)\nthis:\n  rightPrincipal r A \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "then"], ["proof (chain)\npicking this:\n  rightPrincipal r A \\<Longrightarrow> False", "have \"\\<not> rightPrincipal r A\""], ["proof (prove)\nusing this:\n  rightPrincipal r A \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A", "by auto"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "moreover"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "{"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "assume \"leftPrincipal r A\""], ["proof (state)\nthis:\n  leftPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "then"], ["proof (chain)\npicking this:\n  leftPrincipal r A", "obtain Ps' F Fs where r3:\"r = (Ps', \\<LM>Compound F Fs\\<RM> \\<Rightarrow>* Em)\""], ["proof (prove)\nusing this:\n  leftPrincipal r A\n\ngoal (1 subgoal):\n 1. (\\<And>Ps' F Fs.\n        r =\n        (Ps',\n          \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (Ps',  \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "with r1"], ["proof (chain)\npicking this:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n  r = (Ps',  \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)", "have \"False\""], ["proof (prove)\nusing this:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n  r = (Ps',  \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "}"], ["proof (state)\nthis:\n  leftPrincipal r A \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "then"], ["proof (chain)\npicking this:\n  leftPrincipal r A \\<Longrightarrow> False", "have \"\\<not> leftPrincipal r A\""], ["proof (prove)\nusing this:\n  leftPrincipal r A \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> leftPrincipal r A", "by auto"], ["proof (state)\nthis:\n  \\<not> leftPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> rightPrincipal r A\n  \\<not> leftPrincipal r A", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> rightPrincipal r A\n  \\<not> leftPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "by simp"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extended_Ax_prems_empty:\nassumes \"r \\<in> Ax\"\nshows \"fst (extendRule S r) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (extendRule S r) = []", "using assms"], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. fst (extendRule S r) = []", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> Ax; r = (a, b)\\<rbrakk>\n       \\<Longrightarrow> fst (extendRule S r) = []", "by (rule Ax.cases) (auto simp add:extendRule_def)"], ["", "(* ---------------------------------------------------\n   ---------------------------------------------------\n   ---------------------------------------------------\n   ---------------------------------------------------\n                THIS IS NOW\n                SingleWeakening.thy\n   ---------------------------------------------------\n   ---------------------------------------------------\n   ---------------------------------------------------\n   --------------------------------------------------- *)\n\n\n(* Constructing the rule set we will use.  It contains all axioms, but only a subset\n   of the possible logical rules. *)"], ["", "lemma ruleSet:\nassumes \"R' \\<subseteq> upRules\"\n    and \"R = Ax \\<union> R'\"\n    and \"(Ps,C) \\<in> R*\"\nshows \"\\<exists> S r. extendRule S r = (Ps,C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "from \\<open>(Ps,C) \\<in> R*\\<close>"], ["proof (chain)\npicking this:\n  (Ps, C) \\<in> R*", "have \"\\<exists> S r. extendRule S r = (Ps,C) \\<and> r \\<in> R\""], ["proof (prove)\nusing this:\n  (Ps, C) \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R", "by (cases) auto"], ["proof (state)\nthis:\n  \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "then"], ["proof (chain)\npicking this:\n  \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R", "obtain S r where \"(Ps,C) = extendRule S r\" and \"r \\<in> R\""], ["proof (prove)\nusing this:\n  \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>(Ps, C) = extendRule S r; r \\<in> R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S a b.\n       \\<lbrakk>\\<And>S a b.\n                   \\<lbrakk>(Ps, C) = extendRule S (a, b);\n                    (a, b) \\<in> R\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        extendRule S (a, b) = (Ps, C); (a, b) \\<in> R\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (drule_tac x=S in meta_spec,drule_tac x=a in meta_spec, drule_tac x=b in meta_spec) auto"], ["proof (state)\nthis:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "moreover"], ["proof (state)\nthis:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "from \\<open>r \\<in> R\\<close> and \\<open>R = Ax \\<union> R'\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> R\n  R = Ax \\<union> R'", "have \"r \\<in> Ax \\<or> r \\<in> R'\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<or> r \\<in> R'", "by blast"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "ultimately"], ["proof (chain)\npicking this:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n  r \\<in> Ax \\<or> r \\<in> R'", "show ?thesis"], ["proof (prove)\nusing this:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "by (rule_tac x=S in exI,rule_tac x=r in exI) (auto)"], ["proof (state)\nthis:\n  \\<exists>S r.\n     extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dpWeak:\nassumes a:\"(\\<Gamma> \\<Rightarrow>* E,n) \\<in> derivable R*\"\n   and  b: \"R' \\<subseteq> upRules\"\n   and  c: \"R = Ax \\<union> R'\" \nshows \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,n) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "using a"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* E, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "proof (induct n arbitrary: \\<Gamma> E rule:nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> E.\n       \\<lbrakk>\\<forall>m<n.\n                   \\<forall>x xa.\n                      ( x \\<Rightarrow>* xa, m)\n                      \\<in> derivable R* \\<longrightarrow>\n                      ( x + \\<Gamma>' \\<Rightarrow>* xa, m)\n                      \\<in> derivable R*;\n        ( \\<Gamma> \\<Rightarrow>* E, n) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n)\n                         \\<in> derivable R*", "case (1 n \\<Gamma> E)"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>x xa.\n        ( x \\<Rightarrow>* xa, m) \\<in> derivable R* \\<longrightarrow>\n        ( x + \\<Gamma>' \\<Rightarrow>* xa, m) \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* E, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> E.\n       \\<lbrakk>\\<forall>m<n.\n                   \\<forall>x xa.\n                      ( x \\<Rightarrow>* xa, m)\n                      \\<in> derivable R* \\<longrightarrow>\n                      ( x + \\<Gamma>' \\<Rightarrow>* xa, m)\n                      \\<in> derivable R*;\n        ( \\<Gamma> \\<Rightarrow>* E, n) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n)\n                         \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     \\<forall>x xa.\n        ( x \\<Rightarrow>* xa, m) \\<in> derivable R* \\<longrightarrow>\n        ( x + \\<Gamma>' \\<Rightarrow>* xa, m) \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* E, n) \\<in> derivable R*", "have IH: \"\\<forall>m<n. \\<forall> \\<Gamma> E. ( \\<Gamma> \\<Rightarrow>* E, m) \\<in> derivable R* \\<longrightarrow> ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\" \n      and a': \"( \\<Gamma> \\<Rightarrow>* E, n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     \\<forall>x xa.\n        ( x \\<Rightarrow>* xa, m) \\<in> derivable R* \\<longrightarrow>\n        ( x + \\<Gamma>' \\<Rightarrow>* xa, m) \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* E, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>m<n.\n       \\<forall>\\<Gamma> E.\n          ( \\<Gamma> \\<Rightarrow>* E, m)\n          \\<in> derivable R* \\<longrightarrow>\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R* &&&\n    ( \\<Gamma> \\<Rightarrow>* E, n) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> E.\n        ( \\<Gamma> \\<Rightarrow>* E, m) \\<in> derivable R* \\<longrightarrow>\n        ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* E, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> E.\n       \\<lbrakk>\\<forall>m<n.\n                   \\<forall>x xa.\n                      ( x \\<Rightarrow>* xa, m)\n                      \\<in> derivable R* \\<longrightarrow>\n                      ( x + \\<Gamma>' \\<Rightarrow>* xa, m)\n                      \\<in> derivable R*;\n        ( \\<Gamma> \\<Rightarrow>* E, n) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n)\n                         \\<in> derivable R*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  n = 0", "have \"(\\<Gamma> \\<Rightarrow>* E,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* E, 0) \\<in> derivable R*", "using a'"], ["proof (prove)\nusing this:\n  n = 0\n  ( \\<Gamma> \\<Rightarrow>* E, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* E, 0) \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<Rightarrow>* E, 0) \\<in> derivable R*", "have \"([], \\<Gamma> \\<Rightarrow>* E) \\<in> R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* E) \\<in> R*", "by (cases) auto"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<Rightarrow>* E) \\<in> R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<Rightarrow>* E) \\<in> R*", "obtain  r S where \"r \\<in> R\" and split:\"extendRule S r = ([],\\<Gamma> \\<Rightarrow>* E)\""], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* E) \\<in> R*\n\ngoal (1 subgoal):\n 1. (\\<And>r S.\n        \\<lbrakk>r \\<in> R;\n         extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* E)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule extRules.cases) auto"], ["proof (state)\nthis:\n  r \\<in> R\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* E)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* E)", "obtain c where \"r = ([],c)\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* E)\n\ngoal (1 subgoal):\n 1. (\\<And>c. r = ([], c) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases r) (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  r = ([], c)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "with \\<open>r \\<in> R\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> R\n  r = ([], c)", "have \"r \\<in> Ax \\<or> r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  r = ([], c)\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<or> r \\<in> upRules", "using b c"], ["proof (prove)\nusing this:\n  r \\<in> R\n  r = ([], c)\n  R' \\<subseteq> upRules\n  R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<or> r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> upRules\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "with \\<open>r = ([],c)\\<close>"], ["proof (chain)\npicking this:\n  r = ([], c)\n  r \\<in> Ax \\<or> r \\<in> upRules", "have \"r \\<in> Ax\""], ["proof (prove)\nusing this:\n  r = ([], c)\n  r \\<in> Ax \\<or> r \\<in> upRules\n\ngoal (1 subgoal):\n 1. r \\<in> Ax", "by (auto) (rule upRules.cases,auto)"], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "with \\<open>r = ([],c)\\<close>"], ["proof (chain)\npicking this:\n  r = ([], c)\n  r \\<in> Ax", "obtain i where \"c = (\\<LM>At i\\<RM> \\<Rightarrow>* At i) \\<or> c = (\\<LM>ff\\<RM> \\<Rightarrow>* Em)\""], ["proof (prove)\nusing this:\n  r = ([], c)\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n        c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseAx[where r=r]"], ["proof (prove)\nusing this:\n  r = ([], c)\n  r \\<in> Ax\n  r \\<in> Ax \\<Longrightarrow>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  (\\<exists>i. r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n        c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "assume \"c = (\\<LM>At i\\<RM> \\<Rightarrow>* At i)\""], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i)", "have \"extend S (\\<LM>At i\\<RM> \\<Rightarrow>* At i) = (\\<Gamma> \\<Rightarrow>* At i)\" and \"At i = E\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n    ( \\<Gamma> \\<Rightarrow>* At i) &&&\n    At i = E", "using split and \\<open>r = ([],c)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* E)\n  r = ([], c)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n    ( \\<Gamma> \\<Rightarrow>* At i) &&&\n    At i = E", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<Rightarrow>* At i)\n  At i = E\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<Rightarrow>* At i)\n  At i = E", "have \"At i \\<in># \\<Gamma>\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<Rightarrow>* At i)\n  At i = E\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma>", "using extendID"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<Rightarrow>* At i)\n  At i = E\n  extend ?S ( \\<LM> At ?i  \\<RM> \\<Rightarrow>* At ?i) =\n  ( ?\\<Gamma> \\<Rightarrow>* ?\\<Delta>) \\<Longrightarrow>\n  At ?i \\<in># ?\\<Gamma>\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  At i \\<in># \\<Gamma>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  At i \\<in># \\<Gamma>", "have \"At i \\<in># \\<Gamma> + \\<Gamma>'\""], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> + \\<Gamma>'", "by auto"], ["proof (state)\nthis:\n  At i \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  At i \\<in># \\<Gamma> + \\<Gamma>'", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*", "using c and containID[where \\<Gamma>=\"\\<Gamma>+\\<Gamma>'\" and R=R and i=i] and \\<open>At i = E\\<close>"], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma> + \\<Gamma>'\n  R = Ax \\<union> R'\n  \\<lbrakk>At i \\<in># \\<Gamma> + \\<Gamma>'; Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* At i, 0)\n                    \\<in> derivable R*\n  At i = E\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "assume \"c = (\\<LM>ff\\<RM> \\<Rightarrow>* Em)\""], ["proof (state)\nthis:\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)", "have \"extend S (\\<LM>ff\\<RM> \\<Rightarrow>* Em) = (\\<Gamma> \\<Rightarrow>* E)\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n    ( \\<Gamma> \\<Rightarrow>* E)", "using split and \\<open>r = ([],c)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* E)\n  r = ([], c)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n    ( \\<Gamma> \\<Rightarrow>* E)", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* E)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* E)", "have \"ff \\<in># \\<Gamma>\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* E)\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "using extendFalsum"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* E)\n  extend ?S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( ?\\<Gamma> \\<Rightarrow>* ?\\<Delta>) \\<Longrightarrow>\n  ff \\<in># ?\\<Gamma>\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma>", "have \"ff \\<in># \\<Gamma> + \\<Gamma>'\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma> + \\<Gamma>'", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*", "using c and containFalsum[where \\<Gamma>=\"\\<Gamma>+\\<Gamma>'\" and R=R]"], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n  R = Ax \\<union> R'\n  \\<lbrakk>ff \\<in># \\<Gamma> + \\<Gamma>'; Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* ?C, 0)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*", "show \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "using \\<open>n=0\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n  n = 0\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "case (Suc n')"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  n = Suc n'", "have \"(\\<Gamma> \\<Rightarrow>* E, n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* E, n' + 1) \\<in> derivable R*", "using a'"], ["proof (prove)\nusing this:\n  n = Suc n'\n  ( \\<Gamma> \\<Rightarrow>* E, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* E, n' + 1) \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* E, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<Rightarrow>* E, n' + 1) \\<in> derivable R*", "obtain Ps where f:\"Ps \\<noteq> []\"\n                  and g:\"(Ps, \\<Gamma> \\<Rightarrow>* E) \\<in> R*\" \n                  and h:\"\\<forall> p \\<in> set Ps. \\<exists> m\\<le>n'. (p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* E, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> []; (Ps,  \\<Gamma> \\<Rightarrow>* E) \\<in> R*;\n         \\<forall>p\\<in>set Ps.\n            \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using characteriseLast[where C=\"\\<Gamma> \\<Rightarrow>* E\" and m=n' and R=\"R*\"]"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* E, n' + 1) \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* E, n' + 1) \\<in> derivable R* \\<Longrightarrow>\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps,  \\<Gamma> \\<Rightarrow>* E) \\<in> R* \\<and>\n     (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> []; (Ps,  \\<Gamma> \\<Rightarrow>* E) \\<in> R*;\n         \\<forall>p\\<in>set Ps.\n            \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  (Ps,  \\<Gamma> \\<Rightarrow>* E) \\<in> R*\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "from g c"], ["proof (chain)\npicking this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* E) \\<in> R*\n  R = Ax \\<union> R'", "obtain S r where \"r \\<in> R\" and \"(r \\<in> Ax \\<or> r \\<in> R') \\<and> extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* E)\""], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* E) \\<in> R*\n  R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. (\\<And>r S.\n        \\<lbrakk>r \\<in> R;\n         (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n         extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* E)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases) auto"], ["proof (state)\nthis:\n  r \\<in> R\n  (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* E)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "with b"], ["proof (chain)\npicking this:\n  R' \\<subseteq> upRules\n  r \\<in> R\n  (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* E)", "have as: \"(r \\<in> Ax \\<or> r \\<in> upRules) \\<and> extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* E)\""], ["proof (prove)\nusing this:\n  R' \\<subseteq> upRules\n  r \\<in> R\n  (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* E)\n\ngoal (1 subgoal):\n 1. (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n    extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* E)", "by auto"], ["proof (state)\nthis:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* E)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "from as f"], ["proof (chain)\npicking this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* E)\n  Ps \\<noteq> []", "have \"fst r \\<noteq> []\""], ["proof (prove)\nusing this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* E)\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. fst r \\<noteq> []", "by (auto simp add:extendRule_def map_is_Nil_conv)"], ["proof (state)\nthis:\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "with as"], ["proof (chain)\npicking this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* E)\n  fst r \\<noteq> []", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* E)\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "apply (cases r,auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> []; r = (a, b);\n        extendRule S (a, b) = (Ps,  \\<Gamma> \\<Rightarrow>* E);\n        (a, b) \\<in> Ax\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> upRules", "by (rule Ax.cases) auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "obtain ps c where \"r = (ps,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps c. r = (ps, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> upRules\n  r = (ps, c)", "have \"(ps,c) \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> upRules\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. (ps, c) \\<in> upRules", "by simp"], ["proof (state)\nthis:\n  (ps, c) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "obtain \\<Gamma>1 \\<delta> where \"S = (\\<Gamma>1 \\<Rightarrow>* \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>1 \\<delta>.\n        S = ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases S) auto"], ["proof (state)\nthis:\n  S = ( \\<Gamma>1 \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "with h as \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* E)\n  r = (ps, c)\n  S = ( \\<Gamma>1 \\<Rightarrow>* \\<delta>)", "have pms: \"\\<forall> p \\<in> set ps. \\<exists> m\\<le>n'. (extend (\\<Gamma>1 \\<Rightarrow>* \\<delta>) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* E)\n  r = (ps, c)\n  S = ( \\<Gamma>1 \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "by(auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p, m)\n        \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "have \"\\<forall> p \\<in> set ps. \\<exists> m\\<le>n'. (extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p,m) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "assume \"p \\<in> set ps\""], ["proof (state)\nthis:\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "with pms"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p, m)\n        \\<in> derivable R*\n  p \\<in> set ps", "obtain m where \"m\\<le>n'\" and aa: \"(extend (\\<Gamma>1 \\<Rightarrow>* \\<delta>) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p, m)\n        \\<in> derivable R*\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<le> n';\n         (extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p, m)\n         \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<le> n'\n  (extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  m \\<le> n'\n  (extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "obtain \\<Gamma>2 \\<delta>' where eq:\"p = (\\<Gamma>2 \\<Rightarrow>* \\<delta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>2 \\<delta>'.\n        p = ( \\<Gamma>2 \\<Rightarrow>* \\<delta>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases p) auto"], ["proof (state)\nthis:\n  p = ( \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "have \"\\<delta>' = Em \\<or> \\<delta>' \\<noteq> Em\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta>' = Em \\<or> \\<delta>' \\<noteq> Em", "by blast"], ["proof (state)\nthis:\n  \\<delta>' = Em \\<or> \\<delta>' \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<delta>' = Em \\<or> \\<delta>' \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  \\<delta>' = Em \\<or> \\<delta>' \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "assume \"\\<delta>' = Em\""], ["proof (state)\nthis:\n  \\<delta>' = Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<delta>' = Em", "have \"extend (\\<Gamma>1 \\<Rightarrow>* \\<delta>) p = (\\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>)\""], ["proof (prove)\nusing this:\n  \\<delta>' = Em\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p =\n    ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>)", "using eq"], ["proof (prove)\nusing this:\n  \\<delta>' = Em\n  p = ( \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p =\n    ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>)", "by (auto simp add:extend_def)"], ["proof (state)\nthis:\n  extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>)", "have \"(\\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "using aa"], ["proof (prove)\nusing this:\n  extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>)\n  (extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "have \"(\\<Gamma>1 + \\<Gamma>2 + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>2 + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n    \\<in> derivable R*", "using IH and \\<open>n = Suc n'\\<close> and \\<open>m\\<le>n'\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> E.\n        ( \\<Gamma> \\<Rightarrow>* E, m) \\<in> derivable R* \\<longrightarrow>\n        ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n  n = Suc n'\n  m \\<le> n'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>2 + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n    \\<in> derivable R*", "apply-"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>, m)\n             \\<in> derivable R*;\n     \\<forall>m<n.\n        \\<forall>\\<Gamma> E.\n           ( \\<Gamma> \\<Rightarrow>* E, m)\n           \\<in> derivable R* \\<longrightarrow>\n           ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*;\n     n = Suc n'; m \\<le> n'\\<rbrakk>\n    \\<Longrightarrow> ( \\<Gamma>1 + \\<Gamma>2 +\n                        \\<Gamma>' \\<Rightarrow>* \\<delta>,\n                       m)\n                      \\<in> derivable R*", "apply (drule_tac x=m in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>, m)\n             \\<in> derivable R*;\n     n = Suc n'; m \\<le> n';\n     m < n \\<longrightarrow>\n     (\\<forall>\\<Gamma> E.\n         ( \\<Gamma> \\<Rightarrow>* E, m)\n         \\<in> derivable R* \\<longrightarrow>\n         ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m)\n         \\<in> derivable R*)\\<rbrakk>\n    \\<Longrightarrow> ( \\<Gamma>1 + \\<Gamma>2 +\n                        \\<Gamma>' \\<Rightarrow>* \\<delta>,\n                       m)\n                      \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>1 + \\<Gamma>2 + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma>1 + \\<Gamma>2 + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n  \\<in> derivable R*", "have \"(extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>1 + \\<Gamma>2 + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n    \\<in> derivable R*", "using eq and \\<open>\\<delta>' = Em\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma>1 + \\<Gamma>2 + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n  \\<in> derivable R*\n  p = ( \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n  \\<delta>' = Em\n\ngoal (1 subgoal):\n 1. (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n    \\<in> derivable R*", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  \\<delta>' = Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<delta>' = Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  \\<delta>' = Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "assume \"\\<delta>' \\<noteq> Em\""], ["proof (state)\nthis:\n  \\<delta>' \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<delta>' \\<noteq> Em", "have \"extend (\\<Gamma>1 \\<Rightarrow>* \\<delta>) p = (\\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')\""], ["proof (prove)\nusing this:\n  \\<delta>' \\<noteq> Em\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p =\n    ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')", "using eq"], ["proof (prove)\nusing this:\n  \\<delta>' \\<noteq> Em\n  p = ( \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p =\n    ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')", "by (auto simp add:extend_def)"], ["proof (state)\nthis:\n  extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')", "have \"(\\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>', m) \\<in> derivable R*", "using aa"], ["proof (prove)\nusing this:\n  extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n  (extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>', m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>', m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>', m) \\<in> derivable R*", "have \"(\\<Gamma>1 + \\<Gamma>2 + \\<Gamma>' \\<Rightarrow>* \\<delta>', m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>', m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>2 + \\<Gamma>' \\<Rightarrow>* \\<delta>', m)\n    \\<in> derivable R*", "using IH and \\<open>n = Suc n'\\<close> and \\<open>m\\<le>n'\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>', m) \\<in> derivable R*\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> E.\n        ( \\<Gamma> \\<Rightarrow>* E, m) \\<in> derivable R* \\<longrightarrow>\n        ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n  n = Suc n'\n  m \\<le> n'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>2 + \\<Gamma>' \\<Rightarrow>* \\<delta>', m)\n    \\<in> derivable R*", "apply-"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>', m)\n             \\<in> derivable R*;\n     \\<forall>m<n.\n        \\<forall>\\<Gamma> E.\n           ( \\<Gamma> \\<Rightarrow>* E, m)\n           \\<in> derivable R* \\<longrightarrow>\n           ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*;\n     n = Suc n'; m \\<le> n'\\<rbrakk>\n    \\<Longrightarrow> ( \\<Gamma>1 + \\<Gamma>2 +\n                        \\<Gamma>' \\<Rightarrow>* \\<delta>',\n                       m)\n                      \\<in> derivable R*", "apply (drule_tac x=m in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>', m)\n             \\<in> derivable R*;\n     n = Suc n'; m \\<le> n';\n     m < n \\<longrightarrow>\n     (\\<forall>\\<Gamma> E.\n         ( \\<Gamma> \\<Rightarrow>* E, m)\n         \\<in> derivable R* \\<longrightarrow>\n         ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m)\n         \\<in> derivable R*)\\<rbrakk>\n    \\<Longrightarrow> ( \\<Gamma>1 + \\<Gamma>2 +\n                        \\<Gamma>' \\<Rightarrow>* \\<delta>',\n                       m)\n                      \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>1 + \\<Gamma>2 + \\<Gamma>' \\<Rightarrow>* \\<delta>', m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma>1 + \\<Gamma>2 + \\<Gamma>' \\<Rightarrow>* \\<delta>', m)\n  \\<in> derivable R*", "have \"(extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>1 + \\<Gamma>2 + \\<Gamma>' \\<Rightarrow>* \\<delta>', m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n    \\<in> derivable R*", "using eq and \\<open>\\<delta>' \\<noteq> Em\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma>1 + \\<Gamma>2 + \\<Gamma>' \\<Rightarrow>* \\<delta>', m)\n  \\<in> derivable R*\n  p = ( \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n  \\<delta>' \\<noteq> Em\n\ngoal (1 subgoal):\n 1. (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n    \\<in> derivable R*", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  \\<delta>' \\<noteq> Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  m \\<le> n'\n  (extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p, m) \\<in> derivable R*\n  \\<delta>' = Em \\<or> \\<delta>' \\<noteq> Em\n  \\<delta>' = Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n  \\<in> derivable R*\n  \\<delta>' \\<noteq> Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n  \\<in> derivable R*", "have \"(extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  m \\<le> n'\n  (extend ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) p, m) \\<in> derivable R*\n  \\<delta>' = Em \\<or> \\<delta>' \\<noteq> Em\n  \\<delta>' = Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n  \\<in> derivable R*\n  \\<delta>' \\<noteq> Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n    \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n  \\<in> derivable R*", "have \"\\<exists> m\\<le>n'. (extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n       \\<in> derivable R*", "using \\<open>m\\<le>n'\\<close>"], ["proof (prove)\nusing this:\n  (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n  \\<in> derivable R*\n  m \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n       \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  ?p2 \\<in> set ps \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) ?p2, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ?p2 \\<in> set ps \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) ?p2, m)\n     \\<in> derivable R*", "show ?thesis"], ["proof (prove)\nusing this:\n  ?p2 \\<in> set ps \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) ?p2, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n        \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n        \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n        \\<in> derivable R*", "have \"\\<forall> p \\<in> set (fst (extendRule (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r)).\n            \\<exists> m\\<le>n'. (p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n        \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (fst (extendRule\n                              ( \\<Gamma>1 +\n                                \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                              r)).\n       \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n        \\<in> derivable R*\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (fst (extendRule\n                              ( \\<Gamma>1 +\n                                \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                              r)).\n       \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                            r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                            r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "have \"extendRule (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*", "using \\<open>r \\<in> upRules\\<close> and \\<open>r \\<in> R\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> upRules\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*", "by auto"], ["proof (state)\nthis:\n  extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "from \\<open>S = (\\<Gamma>1 \\<Rightarrow>* \\<delta>)\\<close> and as"], ["proof (chain)\npicking this:\n  S = ( \\<Gamma>1 \\<Rightarrow>* \\<delta>)\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* E)", "have \"extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) (snd r) = (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E)\""], ["proof (prove)\nusing this:\n  S = ( \\<Gamma>1 \\<Rightarrow>* \\<delta>)\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* E)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) (snd r) =\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E)", "by (auto simp add:extendRule_def extend_def union_ac)"], ["proof (state)\nthis:\n  extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                            r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*\n  extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E)", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                            r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*\n  extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n' + 1) \\<in> derivable R*", "using derivable.step[where r=\"extendRule (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r\" and R=\"R*\" and m=\"n'\"]\n          and \\<open>fst r \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                            r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*\n  extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E)\n  \\<lbrakk>extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r\n           \\<in> R*;\n   fst (extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n         r) \\<noteq>\n   [];\n   \\<forall>p\\<in>set (fst (extendRule\n                             ( \\<Gamma>1 +\n                               \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                             r)).\n      \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n  \\<Longrightarrow> (snd (extendRule\n                           ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                           r),\n                     n' + 1)\n                    \\<in> derivable R*\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n' + 1) \\<in> derivable R*", "by (cases r) (auto simp add:map_is_Nil_conv extendRule_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n' + 1) \\<in> derivable R*", "show \"( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "using \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n' + 1) \\<in> derivable R*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\\noindent Given this, it is possible to have right weakening, where we overwrite the empty formula if it appears as the succedent of the root of a derivation:\n\\<close>"], ["", "lemma dpWeakR:\nassumes (*<*)a:(*>*)\"(\\<Gamma> \\<Rightarrow>* Em,n) \\<in> derivable R*\"\nand  (*<*)b:(*>*) \"R' \\<subseteq> upRules\"\nand  (*<*)c:(*>*) \"R = Ax \\<union> R'\" \nshows \"(\\<Gamma> \\<Rightarrow>* C,n) \\<in> derivable R*\"   \\<comment> \\<open>Proof omitted\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "using a"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* Em, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "proof (induct n arbitrary: \\<Gamma> rule:nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma>.\n       \\<lbrakk>\\<forall>m<n.\n                   \\<forall>x.\n                      ( x \\<Rightarrow>* Em, m)\n                      \\<in> derivable R* \\<longrightarrow>\n                      ( x \\<Rightarrow>* C, m) \\<in> derivable R*;\n        ( \\<Gamma> \\<Rightarrow>* Em, n) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "case (1 n \\<Gamma>)"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>x.\n        ( x \\<Rightarrow>* Em, m) \\<in> derivable R* \\<longrightarrow>\n        ( x \\<Rightarrow>* C, m) \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* Em, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma>.\n       \\<lbrakk>\\<forall>m<n.\n                   \\<forall>x.\n                      ( x \\<Rightarrow>* Em, m)\n                      \\<in> derivable R* \\<longrightarrow>\n                      ( x \\<Rightarrow>* C, m) \\<in> derivable R*;\n        ( \\<Gamma> \\<Rightarrow>* Em, n) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     \\<forall>x.\n        ( x \\<Rightarrow>* Em, m) \\<in> derivable R* \\<longrightarrow>\n        ( x \\<Rightarrow>* C, m) \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* Em, n) \\<in> derivable R*", "have IH: \"\\<forall>m<n. \\<forall> \\<Gamma>. ( \\<Gamma> \\<Rightarrow>* Em, m) \\<in> derivable R* \\<longrightarrow> ( \\<Gamma> \\<Rightarrow>* C, m) \\<in> derivable R*\" \n      and a': \"( \\<Gamma> \\<Rightarrow>* Em, n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     \\<forall>x.\n        ( x \\<Rightarrow>* Em, m) \\<in> derivable R* \\<longrightarrow>\n        ( x \\<Rightarrow>* C, m) \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* Em, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>m<n.\n       \\<forall>\\<Gamma>.\n          ( \\<Gamma> \\<Rightarrow>* Em, m)\n          \\<in> derivable R* \\<longrightarrow>\n          ( \\<Gamma> \\<Rightarrow>* C, m) \\<in> derivable R* &&&\n    ( \\<Gamma> \\<Rightarrow>* Em, n) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma>.\n        ( \\<Gamma> \\<Rightarrow>* Em, m)\n        \\<in> derivable R* \\<longrightarrow>\n        ( \\<Gamma> \\<Rightarrow>* C, m) \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* Em, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma>.\n       \\<lbrakk>\\<forall>m<n.\n                   \\<forall>x.\n                      ( x \\<Rightarrow>* Em, m)\n                      \\<in> derivable R* \\<longrightarrow>\n                      ( x \\<Rightarrow>* C, m) \\<in> derivable R*;\n        ( \\<Gamma> \\<Rightarrow>* Em, n) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  n = 0", "have \"(\\<Gamma> \\<Rightarrow>* Em,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* Em, 0) \\<in> derivable R*", "using a'"], ["proof (prove)\nusing this:\n  n = 0\n  ( \\<Gamma> \\<Rightarrow>* Em, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* Em, 0) \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* Em, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<Rightarrow>* Em, 0) \\<in> derivable R*", "have \"([], \\<Gamma> \\<Rightarrow>* Em) \\<in> R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* Em, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* Em) \\<in> R*", "by (cases) auto"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<Rightarrow>* Em) \\<in> R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<Rightarrow>* Em) \\<in> R*", "obtain  r S where \"r \\<in> R\" and split:\"extendRule S r = ([],\\<Gamma> \\<Rightarrow>* Em)\""], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* Em) \\<in> R*\n\ngoal (1 subgoal):\n 1. (\\<And>r S.\n        \\<lbrakk>r \\<in> R;\n         extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Em)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule extRules.cases) auto"], ["proof (state)\nthis:\n  r \\<in> R\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Em)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Em)", "obtain c where \"r = ([],c)\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. (\\<And>c. r = ([], c) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases r) (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  r = ([], c)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "with \\<open>r \\<in> R\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> R\n  r = ([], c)", "have \"r \\<in> Ax \\<or> r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  r = ([], c)\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<or> r \\<in> upRules", "using b c"], ["proof (prove)\nusing this:\n  r \\<in> R\n  r = ([], c)\n  R' \\<subseteq> upRules\n  R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<or> r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> upRules\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "with \\<open>r = ([],c)\\<close>"], ["proof (chain)\npicking this:\n  r = ([], c)\n  r \\<in> Ax \\<or> r \\<in> upRules", "have \"r \\<in> Ax\""], ["proof (prove)\nusing this:\n  r = ([], c)\n  r \\<in> Ax \\<or> r \\<in> upRules\n\ngoal (1 subgoal):\n 1. r \\<in> Ax", "by (auto) (rule upRules.cases,auto)"], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "with \\<open>r = ([],c)\\<close>"], ["proof (chain)\npicking this:\n  r = ([], c)\n  r \\<in> Ax", "obtain i where \"c = (\\<LM>At i\\<RM> \\<Rightarrow>* At i) \\<or> c = (\\<LM>ff\\<RM> \\<Rightarrow>* Em)\""], ["proof (prove)\nusing this:\n  r = ([], c)\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n        c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseAx[where r=r]"], ["proof (prove)\nusing this:\n  r = ([], c)\n  r \\<in> Ax\n  r \\<in> Ax \\<Longrightarrow>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  (\\<exists>i. r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n        c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "assume \"c = (\\<LM>At i\\<RM> \\<Rightarrow>* At i)\""], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "with split and \\<open>r = ([],c)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Em)\n  r = ([], c)\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i)", "have \"(\\<Gamma> \\<Rightarrow>* C,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Em)\n  r = ([], c)\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "assume \"c = (\\<LM>ff\\<RM> \\<Rightarrow>* Em)\""], ["proof (state)\nthis:\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)", "have \"extend S (\\<LM>ff\\<RM> \\<Rightarrow>* Em) = (\\<Gamma> \\<Rightarrow>* Em)\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n    ( \\<Gamma> \\<Rightarrow>* Em)", "using split and \\<open>r = ([],c)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Em)\n  r = ([], c)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n    ( \\<Gamma> \\<Rightarrow>* Em)", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* Em)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* Em)", "have \"ff \\<in># \\<Gamma>\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "using extendFalsum"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* Em)\n  extend ?S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( ?\\<Gamma> \\<Rightarrow>* ?\\<Delta>) \\<Longrightarrow>\n  ff \\<in># ?\\<Gamma>\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma>", "have \"(\\<Gamma> \\<Rightarrow>* C,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*", "using c and containFalsum[where \\<Gamma>=\\<Gamma> and R=R]"], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma>\n  R = Ax \\<union> R'\n  \\<lbrakk>ff \\<in># \\<Gamma>; Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> \\<Rightarrow>* ?C, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*", "show \"(\\<Gamma> \\<Rightarrow>* C,n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "using \\<open>n=0\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, 0) \\<in> derivable R*\n  n = 0\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "case (Suc n')"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  n = Suc n'", "have \"(\\<Gamma> \\<Rightarrow>* Em, n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* Em, n' + 1) \\<in> derivable R*", "using a'"], ["proof (prove)\nusing this:\n  n = Suc n'\n  ( \\<Gamma> \\<Rightarrow>* Em, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* Em, n' + 1) \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* Em, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<Rightarrow>* Em, n' + 1) \\<in> derivable R*", "obtain Ps where f:\"Ps \\<noteq> []\"\n                  and g:\"(Ps, \\<Gamma> \\<Rightarrow>* Em) \\<in> R*\" \n                  and h:\"\\<forall> p \\<in> set Ps. \\<exists> m\\<le>n'. (p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* Em, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> []; (Ps,  \\<Gamma> \\<Rightarrow>* Em) \\<in> R*;\n         \\<forall>p\\<in>set Ps.\n            \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using characteriseLast[where C=\"\\<Gamma> \\<Rightarrow>* Em\" and m=n' and R=\"R*\"]"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* Em, n' + 1) \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* Em, n' + 1) \\<in> derivable R* \\<Longrightarrow>\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps,  \\<Gamma> \\<Rightarrow>* Em) \\<in> R* \\<and>\n     (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> []; (Ps,  \\<Gamma> \\<Rightarrow>* Em) \\<in> R*;\n         \\<forall>p\\<in>set Ps.\n            \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  (Ps,  \\<Gamma> \\<Rightarrow>* Em) \\<in> R*\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "from g c"], ["proof (chain)\npicking this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* Em) \\<in> R*\n  R = Ax \\<union> R'", "obtain S r where \"r \\<in> R\" and split: \"(r \\<in> Ax \\<or> r \\<in> R') \\<and> extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* Em)\""], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* Em) \\<in> R*\n  R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. (\\<And>r S.\n        \\<lbrakk>r \\<in> R;\n         (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n         extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases) auto"], ["proof (state)\nthis:\n  r \\<in> R\n  (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "with b"], ["proof (chain)\npicking this:\n  R' \\<subseteq> upRules\n  r \\<in> R\n  (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)", "have as: \"(r \\<in> Ax \\<or> r \\<in> upRules) \\<and> extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* Em)\""], ["proof (prove)\nusing this:\n  R' \\<subseteq> upRules\n  r \\<in> R\n  (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n    extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)", "by auto"], ["proof (state)\nthis:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "from as f"], ["proof (chain)\npicking this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)\n  Ps \\<noteq> []", "have \"fst r \\<noteq> []\""], ["proof (prove)\nusing this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. fst r \\<noteq> []", "by (auto simp add:extendRule_def map_is_Nil_conv)"], ["proof (state)\nthis:\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "with as"], ["proof (chain)\npicking this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)\n  fst r \\<noteq> []", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "apply (cases r,auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> []; r = (a, b);\n        extendRule S (a, b) = (Ps,  \\<Gamma> \\<Rightarrow>* Em);\n        (a, b) \\<in> Ax\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> upRules", "by (rule Ax.cases) auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "obtain ps c where \"r = (ps,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps c. r = (ps, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> upRules\n  r = (ps, c)", "have \"(ps,c) \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> upRules\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. (ps, c) \\<in> upRules", "by simp"], ["proof (state)\nthis:\n  (ps, c) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  (ps, c) \\<in> upRules", "obtain F Fs where \"c = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* Em) \\<or> c = (\\<Empt> \\<Rightarrow>* Compound F Fs)\""], ["proof (prove)\nusing this:\n  (ps, c) \\<in> upRules\n\ngoal (1 subgoal):\n 1. (\\<And>F Fs.\n        c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em) \\<or>\n        c = ( \\<Empt> \\<Rightarrow>* Compound F Fs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule upRules.cases) auto"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "assume \"c = (\\<Empt> \\<Rightarrow>* Compound F Fs)\""], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "with \\<open>r = (ps,c)\\<close> and split"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs)", "have \"(\\<Gamma> \\<Rightarrow>* C,n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, n' + 1) \\<in> derivable R*", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* C, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "assume \"c = (\\<LM> Compound F Fs \\<RM> \\<Rightarrow>* Em)\""], ["proof (state)\nthis:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "obtain \\<Gamma>1 \\<delta> where \"S = (\\<Gamma>1 \\<Rightarrow>* \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>1 \\<delta>.\n        S = ( \\<Gamma>1 \\<Rightarrow>* \\<delta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases S) auto"], ["proof (state)\nthis:\n  S = ( \\<Gamma>1 \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)\n  S = ( \\<Gamma>1 \\<Rightarrow>* \\<delta>)", "have \"\\<delta> = Em\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)\n  S = ( \\<Gamma>1 \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<delta> = Em", "using split and \\<open>r= (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)\n  S = ( \\<Gamma>1 \\<Rightarrow>* \\<delta>)\n  (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<delta> = Em", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  \\<delta> = Em\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<delta> = Em", "have \"S = (\\<Gamma>1 \\<Rightarrow>* Em)\""], ["proof (prove)\nusing this:\n  \\<delta> = Em\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma>1 \\<Rightarrow>* Em)", "using \\<open>S = (\\<Gamma>1 \\<Rightarrow>* \\<delta>)\\<close>"], ["proof (prove)\nusing this:\n  \\<delta> = Em\n  S = ( \\<Gamma>1 \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma>1 \\<Rightarrow>* Em)", "by simp"], ["proof (state)\nthis:\n  S = ( \\<Gamma>1 \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "with h as \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)\n  r = (ps, c)\n  S = ( \\<Gamma>1 \\<Rightarrow>* Em)", "have pms: \"\\<forall> p \\<in> set ps. \\<exists> m\\<le>n'. (extend (\\<Gamma>1 \\<Rightarrow>* Em) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)\n  r = (ps, c)\n  S = ( \\<Gamma>1 \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* Em) p, m) \\<in> derivable R*", "by(auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* Em) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "have \"\\<forall> p \\<in> set ps. \\<exists> m\\<le>n'. (extend (\\<Gamma>1  \\<Rightarrow>* C) p,m) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "assume \"p \\<in> set ps\""], ["proof (state)\nthis:\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "with pms"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* Em) p, m) \\<in> derivable R*\n  p \\<in> set ps", "obtain m where \"m\\<le>n'\" and aa: \"(extend (\\<Gamma>1 \\<Rightarrow>* Em) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* Em) p, m) \\<in> derivable R*\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<le> n';\n         (extend ( \\<Gamma>1 \\<Rightarrow>* Em) p, m)\n         \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<le> n'\n  (extend ( \\<Gamma>1 \\<Rightarrow>* Em) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  m \\<le> n'\n  (extend ( \\<Gamma>1 \\<Rightarrow>* Em) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "obtain \\<Gamma>2 \\<delta>' where eq:\"p = (\\<Gamma>2 \\<Rightarrow>* \\<delta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>2 \\<delta>'.\n        p = ( \\<Gamma>2 \\<Rightarrow>* \\<delta>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases p) auto"], ["proof (state)\nthis:\n  p = ( \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "have \"\\<delta>' = Em \\<or> \\<delta>' \\<noteq> Em\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta>' = Em \\<or> \\<delta>' \\<noteq> Em", "by blast"], ["proof (state)\nthis:\n  \\<delta>' = Em \\<or> \\<delta>' \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<delta>' = Em \\<or> \\<delta>' \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  \\<delta>' = Em \\<or> \\<delta>' \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "assume \"\\<delta>' = Em\""], ["proof (state)\nthis:\n  \\<delta>' = Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<delta>' = Em", "have \"extend (\\<Gamma>1 \\<Rightarrow>* Em) p = (\\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em)\""], ["proof (prove)\nusing this:\n  \\<delta>' = Em\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<Rightarrow>* Em) p =\n    ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em)", "using eq"], ["proof (prove)\nusing this:\n  \\<delta>' = Em\n  p = ( \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<Rightarrow>* Em) p =\n    ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em)", "by (auto simp add:extend_def)"], ["proof (state)\nthis:\n  extend ( \\<Gamma>1 \\<Rightarrow>* Em) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend ( \\<Gamma>1 \\<Rightarrow>* Em) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em)", "have \"(\\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  extend ( \\<Gamma>1 \\<Rightarrow>* Em) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em, m) \\<in> derivable R*", "using aa"], ["proof (prove)\nusing this:\n  extend ( \\<Gamma>1 \\<Rightarrow>* Em) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em)\n  (extend ( \\<Gamma>1 \\<Rightarrow>* Em) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em, m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em, m) \\<in> derivable R*", "have \"(\\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* C, m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* C, m) \\<in> derivable R*", "using IH and \\<open>n = Suc n'\\<close> and \\<open>m\\<le>n'\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em, m) \\<in> derivable R*\n  \\<forall>m<n.\n     \\<forall>\\<Gamma>.\n        ( \\<Gamma> \\<Rightarrow>* Em, m)\n        \\<in> derivable R* \\<longrightarrow>\n        ( \\<Gamma> \\<Rightarrow>* C, m) \\<in> derivable R*\n  n = Suc n'\n  m \\<le> n'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* C, m) \\<in> derivable R*", "apply-"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em, m)\n             \\<in> derivable R*;\n     \\<forall>m<n.\n        \\<forall>\\<Gamma>.\n           ( \\<Gamma> \\<Rightarrow>* Em, m)\n           \\<in> derivable R* \\<longrightarrow>\n           ( \\<Gamma> \\<Rightarrow>* C, m) \\<in> derivable R*;\n     n = Suc n'; m \\<le> n'\\<rbrakk>\n    \\<Longrightarrow> ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* C, m)\n                      \\<in> derivable R*", "apply (drule_tac x=m in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* Em, m)\n             \\<in> derivable R*;\n     n = Suc n'; m \\<le> n';\n     m < n \\<longrightarrow>\n     (\\<forall>\\<Gamma>.\n         ( \\<Gamma> \\<Rightarrow>* Em, m)\n         \\<in> derivable R* \\<longrightarrow>\n         ( \\<Gamma> \\<Rightarrow>* C, m) \\<in> derivable R*)\\<rbrakk>\n    \\<Longrightarrow> ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* C, m)\n                      \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* C, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* C, m) \\<in> derivable R*", "have \"(extend (\\<Gamma>1  \\<Rightarrow>* C) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* C, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "using eq and \\<open>\\<delta>' = Em\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* C, m) \\<in> derivable R*\n  p = ( \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n  \\<delta>' = Em\n\ngoal (1 subgoal):\n 1. (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  \\<delta>' = Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<delta>' = Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  \\<delta>' = Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "assume \"\\<delta>' \\<noteq> Em\""], ["proof (state)\nthis:\n  \\<delta>' \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<delta>' \\<noteq> Em", "have \"extend (\\<Gamma>1 \\<Rightarrow>* Em) p = (\\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')\""], ["proof (prove)\nusing this:\n  \\<delta>' \\<noteq> Em\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<Rightarrow>* Em) p =\n    ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')", "using eq"], ["proof (prove)\nusing this:\n  \\<delta>' \\<noteq> Em\n  p = ( \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<Rightarrow>* Em) p =\n    ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')", "by (auto simp add:extend_def)"], ["proof (state)\nthis:\n  extend ( \\<Gamma>1 \\<Rightarrow>* Em) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend ( \\<Gamma>1 \\<Rightarrow>* Em) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')", "have \"(\\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  extend ( \\<Gamma>1 \\<Rightarrow>* Em) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>', m) \\<in> derivable R*", "using aa"], ["proof (prove)\nusing this:\n  extend ( \\<Gamma>1 \\<Rightarrow>* Em) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n  (extend ( \\<Gamma>1 \\<Rightarrow>* Em) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>', m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>', m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>', m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "have \"extend (\\<Gamma>1 \\<Rightarrow>* C) p = (\\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<Rightarrow>* C) p =\n    ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')", "using eq and \\<open>\\<delta>' \\<noteq> Em\\<close>"], ["proof (prove)\nusing this:\n  p = ( \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n  \\<delta>' \\<noteq> Em\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<Rightarrow>* C) p =\n    ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')", "by (auto simp add:extend_def)"], ["proof (state)\nthis:\n  extend ( \\<Gamma>1 \\<Rightarrow>* C) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>', m) \\<in> derivable R*\n  extend ( \\<Gamma>1 \\<Rightarrow>* C) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')", "have \"(extend (\\<Gamma>1 \\<Rightarrow>* C) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>', m) \\<in> derivable R*\n  extend ( \\<Gamma>1 \\<Rightarrow>* C) p =\n  ( \\<Gamma>1 + \\<Gamma>2 \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  \\<delta>' \\<noteq> Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  m \\<le> n'\n  (extend ( \\<Gamma>1 \\<Rightarrow>* Em) p, m) \\<in> derivable R*\n  \\<delta>' = Em \\<or> \\<delta>' \\<noteq> Em\n  \\<delta>' = Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n  \\<delta>' \\<noteq> Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "have \"(extend (\\<Gamma>1  \\<Rightarrow>* C) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  m \\<le> n'\n  (extend ( \\<Gamma>1 \\<Rightarrow>* Em) p, m) \\<in> derivable R*\n  \\<delta>' = Em \\<or> \\<delta>' \\<noteq> Em\n  \\<delta>' = Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n  \\<delta>' \\<noteq> Em \\<Longrightarrow>\n  (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "have \"\\<exists> m\\<le>n'. (extend (\\<Gamma>1  \\<Rightarrow>* C) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "using \\<open>m\\<le>n'\\<close>"], ["proof (prove)\nusing this:\n  (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n  m \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  ?p2 \\<in> set ps \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 \\<Rightarrow>* C) ?p2, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ?p2 \\<in> set ps \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 \\<Rightarrow>* C) ?p2, m) \\<in> derivable R*", "show ?thesis"], ["proof (prove)\nusing this:\n  ?p2 \\<in> set ps \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 \\<Rightarrow>* C) ?p2, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*", "have \"\\<forall> p \\<in> set (fst (extendRule (\\<Gamma>1  \\<Rightarrow>* C) r)).\n                \\<exists> m\\<le>n'. (p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (fst (extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r)).\n       \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* C) p, m) \\<in> derivable R*\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (fst (extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r)).\n       \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set (fst (extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set (fst (extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "have \"extendRule (\\<Gamma>1  \\<Rightarrow>* C) r \\<in> R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r \\<in> R*", "using \\<open>r \\<in> upRules\\<close> and \\<open>r \\<in> R\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> upRules\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r \\<in> R*", "by auto"], ["proof (state)\nthis:\n  extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "from \\<open>S = (\\<Gamma>1 \\<Rightarrow>* Em)\\<close> and as"], ["proof (chain)\npicking this:\n  S = ( \\<Gamma>1 \\<Rightarrow>* Em)\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)", "have \"extend (\\<Gamma>1  \\<Rightarrow>* C) (snd r) = (\\<Gamma> \\<Rightarrow>* C)\""], ["proof (prove)\nusing this:\n  S = ( \\<Gamma>1 \\<Rightarrow>* Em)\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<Rightarrow>* C) (snd r) =\n    ( \\<Gamma> \\<Rightarrow>* C)", "by (auto simp add:extendRule_def extend_def union_ac)"], ["proof (state)\nthis:\n  extend ( \\<Gamma>1 \\<Rightarrow>* C) (snd r) =\n  ( \\<Gamma> \\<Rightarrow>* C)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set (fst (extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r \\<in> R*\n  extend ( \\<Gamma>1 \\<Rightarrow>* C) (snd r) =\n  ( \\<Gamma> \\<Rightarrow>* C)", "have \"(\\<Gamma> \\<Rightarrow>* C,n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (fst (extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r \\<in> R*\n  extend ( \\<Gamma>1 \\<Rightarrow>* C) (snd r) =\n  ( \\<Gamma> \\<Rightarrow>* C)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, n' + 1) \\<in> derivable R*", "using derivable.step[where r=\"extendRule (\\<Gamma>1 \\<Rightarrow>* C) r\" and R=\"R*\" and m=\"n'\"]\n              and \\<open>fst r \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (fst (extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r \\<in> R*\n  extend ( \\<Gamma>1 \\<Rightarrow>* C) (snd r) =\n  ( \\<Gamma> \\<Rightarrow>* C)\n  \\<lbrakk>extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r \\<in> R*;\n   fst (extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r) \\<noteq> [];\n   \\<forall>p\\<in>set (fst (extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r)).\n      \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n  \\<Longrightarrow> (snd (extendRule ( \\<Gamma>1 \\<Rightarrow>* C) r),\n                     n' + 1)\n                    \\<in> derivable R*\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, n' + 1) \\<in> derivable R*", "by (cases r) (auto simp add:map_is_Nil_conv extendRule_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* C, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs)\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, n' + 1) \\<in> derivable R*\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, n' + 1) \\<in> derivable R*", "show \"( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs)\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, n' + 1) \\<in> derivable R*\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "using \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs)\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, n' + 1) \\<in> derivable R*\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* C, n' + 1) \\<in> derivable R*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* C, n) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(* ---------------------------------------------------\n   ---------------------------------------------------\n   ---------------------------------------------------\n   ---------------------------------------------------\n                THIS IS NOW\n                SingleInvertible.thy\n   ---------------------------------------------------\n   ---------------------------------------------------\n   ---------------------------------------------------\n   --------------------------------------------------- *)\n(*>*)"], ["", "text\\<open>\n\\noindent Of course, if $C = Em$, then the above lemma is trivial.  The burden is on the user not to ``use'' the empty formula as a normal formula.  An invertibility lemma can then be formalised:\n\\<close>"], ["", "lemma rightInvertible:\n(*<*)fixes \\<Gamma> :: \"'a form multiset\"(*>*)\n\nassumes (*<*)rules:(*>*) \"R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\"\nand   (*<*)a:(*>*) \"(\\<Gamma> \\<Rightarrow>* Compound F Fs,n) \\<in> derivable R*\"\nand   (*<*)b:(*>*) \"\\<forall> r' \\<in> R. rightPrincipal r' (Compound F Fs) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r')\"\nand (*<*)nonEm:(*>*) \"E \\<noteq> Em\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> +\\<Gamma>' \\<Rightarrow>* E,m) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "using assms"], ["proof (prove)\nusing this:\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n) \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r')\n  E \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "proof (induct n arbitrary:\\<Gamma> rule:nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma>.\n       \\<lbrakk>\\<forall>m<n.\n                   R' \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R' \\<longrightarrow>\n                   (\\<forall>x.\n                       ( x \\<Rightarrow>* Compound F Fs, m)\n                       \\<in> derivable R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           rightPrincipal r'\n                            (Compound F Fs) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* E)\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       E \\<noteq> Em \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( x + \\<Gamma>' \\<Rightarrow>* E, ma)\n                           \\<in> derivable R*));\n        R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n        ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n) \\<in> derivable R*;\n        \\<forall>r'\\<in>R.\n           rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r');\n        E \\<noteq> Em\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m)\n                            \\<in> derivable R*", "case (1 n \\<Gamma>)"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     R' \\<subseteq> upRules \\<and> R = Ax \\<union> R' \\<longrightarrow>\n     (\\<forall>x.\n         ( x \\<Rightarrow>* Compound F Fs, m)\n         \\<in> derivable R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* E)\n             \\<in> set (fst r')) \\<longrightarrow>\n         E \\<noteq> Em \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( x + \\<Gamma>' \\<Rightarrow>* E, ma) \\<in> derivable R*))\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n) \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r')\n  E \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma>.\n       \\<lbrakk>\\<forall>m<n.\n                   R' \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R' \\<longrightarrow>\n                   (\\<forall>x.\n                       ( x \\<Rightarrow>* Compound F Fs, m)\n                       \\<in> derivable R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           rightPrincipal r'\n                            (Compound F Fs) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* E)\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       E \\<noteq> Em \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( x + \\<Gamma>' \\<Rightarrow>* E, ma)\n                           \\<in> derivable R*));\n        R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n        ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n) \\<in> derivable R*;\n        \\<forall>r'\\<in>R.\n           rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r');\n        E \\<noteq> Em\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m)\n                            \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     R' \\<subseteq> upRules \\<and> R = Ax \\<union> R' \\<longrightarrow>\n     (\\<forall>x.\n         ( x \\<Rightarrow>* Compound F Fs, m)\n         \\<in> derivable R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* E)\n             \\<in> set (fst r')) \\<longrightarrow>\n         E \\<noteq> Em \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( x + \\<Gamma>' \\<Rightarrow>* E, ma) \\<in> derivable R*))\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n) \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r')\n  E \\<noteq> Em", "have IH:\"\\<forall>m<n. \\<forall>\\<Gamma>. ( \\<Gamma> \\<Rightarrow>* Compound F Fs, m) \\<in> derivable R* \\<longrightarrow>\n              (\\<forall>r' \\<in> R. rightPrincipal r' (Compound F Fs) \\<longrightarrow> ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r')) \\<longrightarrow>\n              (\\<exists>m'\\<le>m. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m') \\<in> derivable R*)\" \n     and a': \"(\\<Gamma> \\<Rightarrow>* Compound F Fs,n) \\<in> derivable R*\" \n     and b': \"\\<forall> r' \\<in> R. rightPrincipal r' (Compound F Fs) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r')\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     R' \\<subseteq> upRules \\<and> R = Ax \\<union> R' \\<longrightarrow>\n     (\\<forall>x.\n         ( x \\<Rightarrow>* Compound F Fs, m)\n         \\<in> derivable R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* E)\n             \\<in> set (fst r')) \\<longrightarrow>\n         E \\<noteq> Em \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( x + \\<Gamma>' \\<Rightarrow>* E, ma) \\<in> derivable R*))\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n) \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r')\n  E \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>m<n.\n       \\<forall>\\<Gamma>.\n          ( \\<Gamma> \\<Rightarrow>* Compound F Fs, m)\n          \\<in> derivable R* \\<longrightarrow>\n          (\\<forall>r'\\<in>R.\n              rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n              ( \\<Gamma>' \\<Rightarrow>* E)\n              \\<in> set (fst r')) \\<longrightarrow>\n          (\\<exists>m'\\<le>m.\n              ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m')\n              \\<in> derivable R*) &&&\n    ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n) \\<in> derivable R* &&&\n    \\<forall>r'\\<in>R.\n       rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r')", "by auto"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma>.\n        ( \\<Gamma> \\<Rightarrow>* Compound F Fs, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* E)\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m') \\<in> derivable R*)\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n) \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r')\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma>.\n       \\<lbrakk>\\<forall>m<n.\n                   R' \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R' \\<longrightarrow>\n                   (\\<forall>x.\n                       ( x \\<Rightarrow>* Compound F Fs, m)\n                       \\<in> derivable R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           rightPrincipal r'\n                            (Compound F Fs) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* E)\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       E \\<noteq> Em \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( x + \\<Gamma>' \\<Rightarrow>* E, ma)\n                           \\<in> derivable R*));\n        R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n        ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n) \\<in> derivable R*;\n        \\<forall>r'\\<in>R.\n           rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r');\n        E \\<noteq> Em\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m)\n                            \\<in> derivable R*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  n = 0", "have \"(\\<Gamma> \\<Rightarrow>* Compound F Fs,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* Compound F Fs, 0) \\<in> derivable R*", "using a'"], ["proof (prove)\nusing this:\n  n = 0\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* Compound F Fs, 0) \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs, 0) \\<in> derivable R*", "have \"([],\\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R*", "by (cases) (auto)"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R*", "have \"\\<exists> r S. extendRule S r = ([],\\<Gamma> \\<Rightarrow>* Compound F Fs) \\<and> (r \\<in> Ax \\<or> r \\<in> R')\""], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<and>\n       (r \\<in> Ax \\<or> r \\<in> R')", "using rules and ruleSet[where R'=R' and R=R and Ps=\"[]\" and C=\"\\<Gamma> \\<Rightarrow>* Compound F Fs\"]"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R*\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>R' \\<subseteq> upRules; R = Ax \\<union> R';\n   ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R*\\<rbrakk>\n  \\<Longrightarrow> \\<exists>S r.\n                       extendRule S r =\n                       ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<and>\n                       (r \\<in> R' \\<or> r \\<in> Ax)\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<and>\n       (r \\<in> Ax \\<or> r \\<in> R')", "by auto"], ["proof (state)\nthis:\n  \\<exists>r S.\n     extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R')\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>r S.\n     extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R')", "obtain r S where \"extendRule S r = ([],\\<Gamma> \\<Rightarrow>* Compound F Fs)\" and \"r \\<in> Ax \\<or> r \\<in> R'\""], ["proof (prove)\nusing this:\n  \\<exists>r S.\n     extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R')\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>extendRule S r =\n                 ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs);\n         r \\<in> Ax \\<or> r \\<in> R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "assume \"r \\<in> Ax\""], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "have \"r = ([], \\<LM> ff \\<RM> \\<Rightarrow>* Em)\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)", "using characteriseAx[where r=r] and \\<open>extendRule S r = ([],\\<Gamma> \\<Rightarrow>* Compound F Fs)\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> Ax\n  r \\<in> Ax \\<Longrightarrow>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  (\\<exists>i. r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i))\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "with \\<open>extendRule S r = ([],\\<Gamma> \\<Rightarrow>* Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)", "have \"extend S (\\<LM> ff \\<RM> \\<Rightarrow>* Em) = (\\<Gamma> \\<Rightarrow>* Compound F Fs)\""], ["proof (prove)\nusing this:\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n    ( \\<Gamma> \\<Rightarrow>* Compound F Fs)", "using extendRule_def[where R=\"([],\\<LM>ff\\<RM>\\<Rightarrow>* Em)\" and forms=S]"], ["proof (prove)\nusing this:\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n  extendRule S ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<equiv>\n  (map (extend S) (fst ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)),\n   extend S (snd ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)))\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n    ( \\<Gamma> \\<Rightarrow>* Compound F Fs)", "by auto"], ["proof (state)\nthis:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs)", "have \"ff \\<in># \\<Gamma>\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "using extendFalsum[where S=S and \\<Gamma>=\\<Gamma> and \\<Delta>=\"Compound F Fs\"]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<Longrightarrow>\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma>", "have \"ff \\<in># \\<Gamma> + \\<Gamma>'\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma> + \\<Gamma>'", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*", "using rules\n            and containFalsum[where \\<Gamma>=\"\\<Gamma> + \\<Gamma>'\" and R=R]"], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>ff \\<in># \\<Gamma> + \\<Gamma>'; Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* ?C, 0)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "assume \"r \\<in> R'\""], ["proof (state)\nthis:\n  r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R'", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "using rules"], ["proof (prove)\nusing this:\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> upRules", "have \"\\<exists> Ps C. Ps \\<noteq> [] \\<and> r = (Ps,C)\""], ["proof (prove)\nusing this:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "obtain x y where \"r = (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. r = (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r)"], ["proof (state)\nthis:\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "with \\<open>r \\<in> upRules\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> upRules\n  r = (x, y)", "have \"(x,y) \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> upRules\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> upRules", "by simp"], ["proof (state)\nthis:\n  (x, y) \\<in> upRules\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> upRules", "obtain Ps where \"(Ps :: 'a sequent list) \\<noteq> []\" and \"x=Ps\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> upRules\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> []; x = Ps\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases) (auto)"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  x = Ps\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "with \\<open>r = (x,y)\\<close>"], ["proof (chain)\npicking this:\n  r = (x, y)\n  Ps \\<noteq> []\n  x = Ps", "have \"r = (Ps, y)\""], ["proof (prove)\nusing this:\n  r = (x, y)\n  Ps \\<noteq> []\n  x = Ps\n\ngoal (1 subgoal):\n 1. r = (Ps, y)", "by simp"], ["proof (state)\nthis:\n  r = (Ps, y)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "then"], ["proof (chain)\npicking this:\n  r = (Ps, y)", "show \"\\<exists> Ps C. Ps \\<noteq> [] \\<and> r = (Ps,C)\""], ["proof (prove)\nusing this:\n  r = (Ps, y)\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "using \\<open>Ps \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  r = (Ps, y)\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "by blast"], ["proof (state)\nthis:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "obtain Ps C where \"Ps \\<noteq> []\" and \"r = (Ps,C)\""], ["proof (prove)\nusing this:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps C.\n        \\<lbrakk>Ps \\<noteq> []; r = (Ps, C)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "from \\<open>extendRule S r = ([], \\<Gamma> \\<Rightarrow>* Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs)", "have \"\\<exists> S. r = ([],S)\""], ["proof (prove)\nusing this:\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<exists>S. r = ([], S)", "using extendRule_def[where forms=S and R=r]"], ["proof (prove)\nusing this:\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n\ngoal (1 subgoal):\n 1. \\<exists>S. r = ([], S)", "by (cases r) (auto)"], ["proof (state)\nthis:\n  \\<exists>S. r = ([], S)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>S. r = ([], S)", "obtain S where \"r = ([],S)\""], ["proof (prove)\nusing this:\n  \\<exists>S. r = ([], S)\n\ngoal (1 subgoal):\n 1. (\\<And>S. r = ([], S) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  r = ([], S)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*", "using rules"], ["proof (prove)\nusing this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r \\<in> Ax \\<or> r \\<in> R'\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*", "show \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r \\<in> Ax \\<or> r \\<in> R'\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "using \\<open>n=0\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r \\<in> Ax \\<or> r \\<in> R'\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, 0) \\<in> derivable R*\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "case (Suc n')"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  n = Suc n'", "have \"(\\<Gamma> \\<Rightarrow>* Compound F Fs,n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n' + 1) \\<in> derivable R*", "using a'"], ["proof (prove)\nusing this:\n  n = Suc n'\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n' + 1) \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n' + 1) \\<in> derivable R*", "obtain Ps where \"(Ps, \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R*\" and \n                          \"Ps \\<noteq> []\" and \n                          derv: \"\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>(Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R*;\n         Ps \\<noteq> [];\n         \\<forall>p\\<in>set Ps.\n            \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using characteriseLast[where C=\"\\<Gamma> \\<Rightarrow>* Compound F Fs\" and m=n' and R=\"R*\"]"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n' + 1) \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* Compound F Fs, n' + 1)\n  \\<in> derivable R* \\<Longrightarrow>\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R* \\<and>\n     (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>(Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R*;\n         Ps \\<noteq> [];\n         \\<forall>p\\<in>set Ps.\n            \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*", "have \"\\<exists> r S. (r \\<in> Ax \\<or> r \\<in> R') \\<and> extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* Compound F Fs)\""], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n       extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)", "using rules and ruleSet[where R'=R' and R=R and Ps=Ps and C=\"\\<Gamma> \\<Rightarrow>* Compound F Fs\"]"], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>R' \\<subseteq> upRules; R = Ax \\<union> R';\n   (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<in> R*\\<rbrakk>\n  \\<Longrightarrow> \\<exists>S r.\n                       extendRule S r =\n                       (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs) \\<and>\n                       (r \\<in> R' \\<or> r \\<in> Ax)\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n       extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)", "by auto"], ["proof (state)\nthis:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n     extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n     extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)", "obtain r S where \"r \\<in> Ax \\<or> r \\<in> R'\" and ext: \"extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* Compound F Fs)\""], ["proof (prove)\nusing this:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n     extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. (\\<And>r S.\n        \\<lbrakk>r \\<in> Ax \\<or> r \\<in> R';\n         extendRule S r =\n         (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "assume \"r \\<in> Ax\""], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "have \"fst r = []\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. fst r = []", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> Ax; r = (a, b)\\<rbrakk> \\<Longrightarrow> fst r = []", "by (rule Ax.cases) auto"], ["proof (state)\nthis:\n  fst r = []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  fst r = []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "obtain x y where \"r = (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. r = (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r)"], ["proof (state)\nthis:\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r = (x, y)", "have \"x \\<noteq> []\""], ["proof (prove)\nusing this:\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. x \\<noteq> []", "using \\<open>Ps \\<noteq> []\\<close> and ext\n                            and extendRule_def[where forms=S and R=r]\n                            and extend_def[where forms=S and seq=\"snd r\"]"], ["proof (prove)\nusing this:\n  r = (x, y)\n  Ps \\<noteq> []\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n  extend S (snd r) \\<equiv>\n  if succ (snd r) = Em then  antec S + antec (snd r) \\<Rightarrow>* succ S\n  else ( antec S + antec (snd r) \\<Rightarrow>* succ (snd r))\n\ngoal (1 subgoal):\n 1. x \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  fst r = []\n  x \\<noteq> []", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  fst r = []\n  x \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "using \\<open>r=(x,y)\\<close>"], ["proof (prove)\nusing this:\n  fst r = []\n  x \\<noteq> []\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "assume \"r \\<in> R'\""], ["proof (state)\nthis:\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "obtain ps c where \"r = (ps,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps c. r = (ps, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r = (ps, c)", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "using rules and \\<open>r \\<in> R'\\<close>"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> upRules", "have \"\\<exists> T Ts. c = (\\<LM>Compound T Ts\\<RM> \\<Rightarrow>* Em) \\<or> c = (\\<Empt> \\<Rightarrow>* Compound T Ts)\""], ["proof (prove)\nusing this:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<exists>T Ts.\n       c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n       c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)", "using \\<open>r=(ps,c)\\<close>\n              and upRuleCharacterise[where Ps=ps and C=c]"], ["proof (prove)\nusing this:\n  r \\<in> upRules\n  r = (ps, c)\n  (ps, c) \\<in> upRules \\<Longrightarrow>\n  \\<exists>F Fs.\n     c = ( \\<Empt> \\<Rightarrow>* Compound F Fs) \\<or>\n     c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. \\<exists>T Ts.\n       c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n       c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)", "by auto"], ["proof (state)\nthis:\n  \\<exists>T Ts.\n     c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n     c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>T Ts.\n     c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n     c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)", "obtain T Ts where \"c = (\\<LM>Compound T Ts\\<RM> \\<Rightarrow>* Em) \\<or> c = (\\<Empt> \\<Rightarrow>* Compound T Ts)\""], ["proof (prove)\nusing this:\n  \\<exists>T Ts.\n     c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n     c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. (\\<And>T Ts.\n        c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n        c = ( \\<Empt> \\<Rightarrow>* Compound T Ts) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "assume \"c = (\\<Empt> \\<Rightarrow>* Compound T Ts)\""], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "with ext"], ["proof (chain)\npicking this:\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)", "have \"Compound T Ts = Compound F Fs\""], ["proof (prove)\nusing this:\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. Compound T Ts = Compound F Fs", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. Compound T Ts = Compound F Fs", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  Compound T Ts = Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  Compound T Ts = Compound F Fs", "have \"rightPrincipal r (Compound F Fs)\""], ["proof (prove)\nusing this:\n  Compound T Ts = Compound F Fs\n\ngoal (1 subgoal):\n 1. rightPrincipal r (Compound F Fs)", "using \\<open>c = (\\<Empt> \\<Rightarrow>* Compound T Ts)\\<close> and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  Compound T Ts = Compound F Fs\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. rightPrincipal r (Compound F Fs)", "by auto"], ["proof (state)\nthis:\n  rightPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  rightPrincipal r (Compound F Fs)", "have \"(\\<Gamma>' \\<Rightarrow>* E) \\<in> set ps\""], ["proof (prove)\nusing this:\n  rightPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set ps", "using b' and \\<open>r = (ps,c)\\<close> and \\<open>r \\<in> R'\\<close> and rules"], ["proof (prove)\nusing this:\n  rightPrincipal r (Compound F Fs)\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r')\n  r = (ps, c)\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set ps", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set ps", "have \"extend S (\\<Gamma>' \\<Rightarrow>* E) \\<in> set Ps\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set ps\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set Ps", "using \\<open>extendRule S r = (Ps,\\<Gamma> \\<Rightarrow>* Compound F Fs)\\<close>\n                  and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set ps\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set Ps", "by (simp add:extendContain)"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "from \\<open>rightPrincipal r (Compound F Fs)\\<close>"], ["proof (chain)\npicking this:\n  rightPrincipal r (Compound F Fs)", "have \"c = (\\<Empt> \\<Rightarrow>* Compound F Fs)\""], ["proof (prove)\nusing this:\n  rightPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. c = ( \\<Empt> \\<Rightarrow>* Compound F Fs)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  rightPrincipal r (Compound F Fs)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. c = ( \\<Empt> \\<Rightarrow>* Compound F Fs)", "by (cases) auto"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "with ext"], ["proof (chain)\npicking this:\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs)", "have \"antec S = \\<Gamma>\""], ["proof (prove)\nusing this:\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. antec S = \\<Gamma>", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  c = ( \\<Empt> \\<Rightarrow>* Compound F Fs)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. antec S = \\<Gamma>", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  antec S = \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set Ps\n  antec S = \\<Gamma>", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E) \\<in> set Ps\""], ["proof (prove)\nusing this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set Ps\n  antec S = \\<Gamma>\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E) \\<in> set Ps", "using nonEm"], ["proof (prove)\nusing this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set Ps\n  antec S = \\<Gamma>\n  E \\<noteq> Em\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E) \\<in> set Ps", "by (simp add:extend_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E) \\<in> set Ps", "have \"\\<exists> m\\<le>n'. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "using \\<open>\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E) \\<in> set Ps\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "using \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "by (auto,rule_tac x=m in exI) (simp)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "assume \"c = (\\<LM>Compound T Ts\\<RM> \\<Rightarrow>* Em)\""], ["proof (state)\nthis:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "with ext and \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r = (ps, c)\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)", "have \"Compound T Ts \\<in># \\<Gamma>\""], ["proof (prove)\nusing this:\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r = (ps, c)\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. Compound T Ts \\<in># \\<Gamma>", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  Compound T Ts \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  Compound T Ts \\<in># \\<Gamma>", "have \"\\<exists> \\<Gamma>1. \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\""], ["proof (prove)\nusing this:\n  Compound T Ts \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>1. \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts", "by (rule_tac x=\"\\<Gamma> \\<ominus> Compound T Ts\" in exI) (auto simp add:multiset_eq_iff)"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>1. \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Gamma>1. \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts", "obtain \\<Gamma>1 where \"\\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\""], ["proof (prove)\nusing this:\n  \\<exists>\\<Gamma>1. \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>1.\n        \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "from \\<open>c = (\\<LM>Compound T Ts\\<RM> \\<Rightarrow>* Em)\\<close> and \\<open>r = (ps,c)\\<close> and ext"], ["proof (chain)\npicking this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n  r = (ps, c)\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)", "have \"succ S = Compound F Fs\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n  r = (ps, c)\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. succ S = Compound F Fs", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  succ S = Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\n  succ S = Compound F Fs", "have \"S = (\\<Gamma>1 \\<Rightarrow>* Compound F Fs)\""], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\n  succ S = Compound F Fs\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs)", "using ext\n                  and \\<open>r = (ps,c)\\<close> and \\<open>c = (\\<LM>Compound T Ts\\<RM> \\<Rightarrow>* Em)\\<close>"], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\n  succ S = Compound F Fs\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r = (ps, c)\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs)", "apply (auto simp add:extendRule_def extend_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> = add_mset (Compound T Ts) (antec S);\n     succ S = Compound F Fs;\n     r = (ps,  \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em);\n     c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em);\n     Ps = map (extend S) ps; \\<Gamma>1 = antec S\\<rbrakk>\n    \\<Longrightarrow> S = ( antec S \\<Rightarrow>* Compound F Fs)", "by (cases S) auto"], ["proof (state)\nthis:\n  S = ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "with derv"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  S = ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs)", "have pms: \"\\<forall> p \\<in> set ps. \\<exists> m\\<le>n'. (extend (\\<Gamma>1 \\<Rightarrow>* Compound F Fs) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  S = ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p, m)\n          \\<in> derivable R*", "using ext\n                  and \\<open>r= (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  S = ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs)\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p, m)\n          \\<in> derivable R*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p, m)\n        \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "have \"\\<forall> p \\<in> set ps. \\<exists> m\\<le>n'. (extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p,m) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "assume \"p \\<in> set ps\""], ["proof (state)\nthis:\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "obtain \\<Gamma>i \\<delta>i where p: \"p = (\\<Gamma>i \\<Rightarrow>* \\<delta>i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>i \\<delta>i.\n        p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases p) auto"], ["proof (state)\nthis:\n  p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "have \"\\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em", "by blast"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "assume \"\\<delta>i = Em\""], ["proof (state)\nthis:\n  \\<delta>i = Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<delta>i = Em", "have \"extend (\\<Gamma>1 \\<Rightarrow>* Compound F Fs) p = (\\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* Compound F Fs)\""], ["proof (prove)\nusing this:\n  \\<delta>i = Em\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p =\n    ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* Compound F Fs)", "using p"], ["proof (prove)\nusing this:\n  \\<delta>i = Em\n  p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p =\n    ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* Compound F Fs)", "by (auto simp add:extend_def)"], ["proof (state)\nthis:\n  extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "with pms"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p, m)\n        \\<in> derivable R*\n  extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* Compound F Fs)", "obtain m where \"m \\<le>n'\" and \"(\\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* Compound F Fs,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p, m)\n        \\<in> derivable R*\n  extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* Compound F Fs)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<le> n';\n         ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* Compound F Fs, m)\n         \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>p \\<in> set ps\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p, m)\n        \\<in> derivable R*\n  extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* Compound F Fs)\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<le> n';\n         ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* Compound F Fs, m)\n         \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<le> n'\n  ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* Compound F Fs, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "with IH and \\<open>n = Suc n'\\<close> and b'"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma>.\n        ( \\<Gamma> \\<Rightarrow>* Compound F Fs, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* E)\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m') \\<in> derivable R*)\n  n = Suc n'\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r')\n  m \\<le> n'\n  ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* Compound F Fs, m)\n  \\<in> derivable R*", "have \"\\<exists> m'\\<le>m. (\\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* E,m') \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma>.\n        ( \\<Gamma> \\<Rightarrow>* Compound F Fs, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* E)\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m') \\<in> derivable R*)\n  n = Suc n'\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* E) \\<in> set (fst r')\n  m \\<le> n'\n  ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* Compound F Fs, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m'\\<le>m.\n       ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* E, m')\n       \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* E, m')\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* E, m')\n     \\<in> derivable R*", "have \"\\<exists> m\\<le>n'. (extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* E, m')\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n       \\<in> derivable R*", "using \\<open>m\\<le>n'\\<close>\n                           and p and \\<open>\\<delta>i = Em\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* E, m')\n     \\<in> derivable R*\n  m \\<le> n'\n  p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n  \\<delta>i = Em\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n       \\<in> derivable R*", "apply (auto simp add:extend_def union_ac)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>m \\<le> n'; p = ( \\<Gamma>i \\<Rightarrow>* Em);\n        \\<delta>i = Em; m' \\<le> m;\n        ( \\<Gamma>' + (\\<Gamma>1 + \\<Gamma>i) \\<Rightarrow>* E, m')\n        \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Gamma>' +\n                              (\\<Gamma>1 + \\<Gamma>i) \\<Rightarrow>* E,\n                             m)\n                            \\<in> derivable R*", "by (rule_tac x=\"m'\" in exI) auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "assume \"\\<delta>i \\<noteq> Em\""], ["proof (state)\nthis:\n  \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<delta>i \\<noteq> Em", "have \"extend (\\<Gamma>1 \\<Rightarrow>* Compound F Fs) p = (\\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* \\<delta>i)\""], ["proof (prove)\nusing this:\n  \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p =\n    ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* \\<delta>i)", "using p"], ["proof (prove)\nusing this:\n  \\<delta>i \\<noteq> Em\n  p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p =\n    ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* \\<delta>i)", "by (auto simp add:extend_def)"], ["proof (state)\nthis:\n  extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "with pms"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p, m)\n        \\<in> derivable R*\n  extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* \\<delta>i)", "obtain m where \"m\\<le>n'\" and \"(\\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* \\<delta>i,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p, m)\n        \\<in> derivable R*\n  extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<le> n';\n         ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* \\<delta>i, m)\n         \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>p \\<in> set ps\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p, m)\n        \\<in> derivable R*\n  extend ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<le> n';\n         ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* \\<delta>i, m)\n         \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<le> n'\n  ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* \\<delta>i, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  m \\<le> n'\n  ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* \\<delta>i, m) \\<in> derivable R*", "have \"(\\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  m \\<le> n'\n  ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* \\<delta>i, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m)\n    \\<in> derivable R*", "using rules \n                           and dpWeak[where \\<Gamma>=\"\\<Gamma>1 + \\<Gamma>i\" and E=\"\\<delta>i\" and n=m and R=R and R'=R']"], ["proof (prove)\nusing this:\n  m \\<le> n'\n  ( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* \\<delta>i, m) \\<in> derivable R*\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>( \\<Gamma>1 + \\<Gamma>i \\<Rightarrow>* \\<delta>i, m)\n           \\<in> derivable R*;\n   R' \\<subseteq> upRules; R = Ax \\<union> R'\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma>1 + \\<Gamma>i +\n                      ?\\<Gamma>' \\<Rightarrow>* \\<delta>i,\n                     m)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m)\n    \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m)\n  \\<in> derivable R*", "have \"\\<exists> m\\<le>n'. (extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n       \\<in> derivable R*", "using \\<open>m\\<le>n'\\<close>\n                           and p and \\<open>\\<delta>i \\<noteq> Em\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m)\n  \\<in> derivable R*\n  m \\<le> n'\n  p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n  \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n       \\<in> derivable R*", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  \\<delta>i \\<noteq> Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\n  \\<delta>i = Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n     \\<in> derivable R*\n  \\<delta>i \\<noteq> Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n     \\<in> derivable R*", "have \"\\<exists> m\\<le>n'. (extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\n  \\<delta>i = Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n     \\<in> derivable R*\n  \\<delta>i \\<noteq> Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n       \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  ?p2 \\<in> set ps \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) ?p2, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?p2 \\<in> set ps \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) ?p2, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n          \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n        \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n        \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n        \\<in> derivable R*", "have \"\\<forall> p \\<in> set (fst (extendRule (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r)).\n                          \\<exists> m\\<le>n'. (p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n        \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (fst (extendRule\n                              ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r)).\n       \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) p, m)\n        \\<in> derivable R*\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (fst (extendRule\n                              ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r)).\n       \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "have \"extendRule (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r \\<in> R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r \\<in> R*", "using \\<open>r \\<in> R'\\<close> and rules"], ["proof (prove)\nusing this:\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r \\<in> R*", "by auto"], ["proof (state)\nthis:\n  extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "from \\<open>S = (\\<Gamma>1 \\<Rightarrow>* Compound F Fs)\\<close> and ext and \\<open>c = (\\<LM>Compound T Ts\\<RM> \\<Rightarrow>* Em)\\<close>\n                 and \\<open>\\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\\<close> and \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  S = ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs)\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n  \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\n  r = (ps, c)", "have \"extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) (snd r) = (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E)\""], ["proof (prove)\nusing this:\n  S = ( \\<Gamma>1 \\<Rightarrow>* Compound F Fs)\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n  \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) (snd r) =\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E)", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "from ext and \\<open>r = (ps,c)\\<close> and \\<open>Ps \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r = (ps, c)\n  Ps \\<noteq> []", "have \"fst r \\<noteq> []\""], ["proof (prove)\nusing this:\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r = (ps, c)\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. fst r \\<noteq> []", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r \\<in> R*\n  extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E)\n  fst r \\<noteq> []", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r \\<in> R*\n  extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E)\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n' + 1) \\<in> derivable R*", "using\n                 derivable.step[where r=\"extendRule (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r\" and m=\"n'\" and R=\"R*\"]"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r \\<in> R*\n  extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E)\n  fst r \\<noteq> []\n  \\<lbrakk>extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r \\<in> R*;\n   fst (extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r) \\<noteq> [];\n   \\<forall>p\\<in>set (fst (extendRule\n                             ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r)).\n      \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n  \\<Longrightarrow> (snd (extendRule\n                           ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* E) r),\n                     n' + 1)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n' + 1) \\<in> derivable R*", "by (cases r) (auto simp add:map_is_Nil_conv extendRule_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n' + 1) \\<in> derivable R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "using \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, n' + 1) \\<in> derivable R*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> R' \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "show \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* E,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* Compound F Fs)\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* E, m) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma leftInvertible:\n(*<*)fixes \\<Gamma> :: \"'a form multiset\"(*>*)\n\nassumes (*<*)rules:(*>*) \"R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\"\nand   (*<*)a:(*>*) \"(\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>,n) \\<in> derivable R*\"\nand   (*<*)b:(*>*) \"\\<forall> r' \\<in> R. leftPrincipal r' (Compound F Fs) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> +\\<Gamma>' \\<Rightarrow>* \\<delta>,m) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "using assms"], ["proof (prove)\nusing this:\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "proof (induct n arbitrary:\\<Gamma> \\<delta> rule:nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   R' \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R' \\<longrightarrow>\n                   (\\<forall>x xa.\n                       ( x \\<oplus> Compound F Fs \\<Rightarrow>* xa, m)\n                       \\<in> derivable R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           leftPrincipal r'\n                            (Compound F Fs) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* Em)\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( x + \\<Gamma>' \\<Rightarrow>* xa, ma)\n                           \\<in> derivable R*));\n        R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n)\n        \\<in> derivable R*;\n        \\<forall>r'\\<in>R.\n           leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>,\n                             m)\n                            \\<in> derivable R*", "case (1 n \\<Gamma> \\<delta>)"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     R' \\<subseteq> upRules \\<and> R = Ax \\<union> R' \\<longrightarrow>\n     (\\<forall>x xa.\n         ( x \\<oplus> Compound F Fs \\<Rightarrow>* xa, m)\n         \\<in> derivable R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* Em)\n             \\<in> set (fst r')) \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( x + \\<Gamma>' \\<Rightarrow>* xa, ma) \\<in> derivable R*))\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   R' \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R' \\<longrightarrow>\n                   (\\<forall>x xa.\n                       ( x \\<oplus> Compound F Fs \\<Rightarrow>* xa, m)\n                       \\<in> derivable R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           leftPrincipal r'\n                            (Compound F Fs) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* Em)\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( x + \\<Gamma>' \\<Rightarrow>* xa, ma)\n                           \\<in> derivable R*));\n        R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n)\n        \\<in> derivable R*;\n        \\<forall>r'\\<in>R.\n           leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>,\n                             m)\n                            \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     R' \\<subseteq> upRules \\<and> R = Ax \\<union> R' \\<longrightarrow>\n     (\\<forall>x xa.\n         ( x \\<oplus> Compound F Fs \\<Rightarrow>* xa, m)\n         \\<in> derivable R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* Em)\n             \\<in> set (fst r')) \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( x + \\<Gamma>' \\<Rightarrow>* xa, ma) \\<in> derivable R*))\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')", "have IH:\"\\<forall>m<n. \\<forall>\\<Gamma> \\<delta>. ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, m) \\<in> derivable R* \\<longrightarrow>\n              (\\<forall>r' \\<in> R. leftPrincipal r' (Compound F Fs) \\<longrightarrow> ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')) \\<longrightarrow>\n              (\\<exists>m'\\<le>m. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m') \\<in> derivable R*)\" \n     and a': \"(\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>,n) \\<in> derivable R*\" \n     and b': \"\\<forall> r' \\<in> R. leftPrincipal r' (Compound F Fs) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     R' \\<subseteq> upRules \\<and> R = Ax \\<union> R' \\<longrightarrow>\n     (\\<forall>x xa.\n         ( x \\<oplus> Compound F Fs \\<Rightarrow>* xa, m)\n         \\<in> derivable R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* Em)\n             \\<in> set (fst r')) \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( x + \\<Gamma>' \\<Rightarrow>* xa, ma) \\<in> derivable R*))\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\n\ngoal (1 subgoal):\n 1. \\<forall>m<n.\n       \\<forall>\\<Gamma> \\<delta>.\n          ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R* \\<longrightarrow>\n          (\\<forall>r'\\<in>R.\n              leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n              ( \\<Gamma>' \\<Rightarrow>* Em)\n              \\<in> set (fst r')) \\<longrightarrow>\n          (\\<exists>m'\\<le>m.\n              ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n              \\<in> derivable R*) &&&\n    ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n)\n    \\<in> derivable R* &&&\n    \\<forall>r'\\<in>R.\n       leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')", "by auto"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<delta>.\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* Em)\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n            \\<in> derivable R*)\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n)\n  \\<in> derivable R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   R' \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R' \\<longrightarrow>\n                   (\\<forall>x xa.\n                       ( x \\<oplus> Compound F Fs \\<Rightarrow>* xa, m)\n                       \\<in> derivable R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           leftPrincipal r'\n                            (Compound F Fs) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* Em)\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( x + \\<Gamma>' \\<Rightarrow>* xa, ma)\n                           \\<in> derivable R*));\n        R' \\<subseteq> upRules \\<and> R = Ax \\<union> R';\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n)\n        \\<in> derivable R*;\n        \\<forall>r'\\<in>R.\n           leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>,\n                             m)\n                            \\<in> derivable R*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  n = 0", "have \"(\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, 0)\n    \\<in> derivable R*", "using a'"], ["proof (prove)\nusing this:\n  n = 0\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, 0)\n    \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, 0)\n  \\<in> derivable R*", "have \"([],\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<in> R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, 0)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<in> R*", "by (cases) (auto)"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<in> R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<in> R*", "have \"\\<exists> r S. extendRule S r = ([],\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<and> (r \\<in> Ax \\<or> r \\<in> R')\""], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       extendRule S r =\n       ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<and>\n       (r \\<in> Ax \\<or> r \\<in> R')", "using rules and ruleSet[where R'=R' and R=R and Ps=\"[]\" and C=\"\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>\"]"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<in> R*\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>R' \\<subseteq> upRules; R = Ax \\<union> R';\n   ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n   \\<in> R*\\<rbrakk>\n  \\<Longrightarrow> \\<exists>S r.\n                       extendRule S r =\n                       ([],\n                         \\<Gamma> \\<oplus>\n                         Compound F Fs \\<Rightarrow>* \\<delta>) \\<and>\n                       (r \\<in> R' \\<or> r \\<in> Ax)\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       extendRule S r =\n       ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<and>\n       (r \\<in> Ax \\<or> r \\<in> R')", "by auto"], ["proof (state)\nthis:\n  \\<exists>r S.\n     extendRule S r =\n     ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R')\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>r S.\n     extendRule S r =\n     ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R')", "obtain r S where \"extendRule S r = ([],\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\" and \"r \\<in> Ax \\<or> r \\<in> R'\""], ["proof (prove)\nusing this:\n  \\<exists>r S.\n     extendRule S r =\n     ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R')\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>extendRule S r =\n                 ([],\n                   \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>);\n         r \\<in> Ax \\<or> r \\<in> R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "assume \"r \\<in> Ax\""], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "obtain i where \"r = ([], \\<LM> ff \\<RM> \\<Rightarrow>* Em) \\<or> r = ([], \\<LM>At i\\<RM> \\<Rightarrow>* At i)\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n        r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseAx[where r=r] and \\<open>extendRule S r = ([],\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> Ax\n  r \\<in> Ax \\<Longrightarrow>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  (\\<exists>i. r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i))\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n        r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "assume \"r = ([], \\<LM>ff\\<RM> \\<Rightarrow>* Em)\""], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "with \\<open>extendRule S r = ([],\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)", "have \"extend S (\\<LM> ff \\<RM> \\<Rightarrow>* Em) = (\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n    ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)", "using extendRule_def[where R=\"([],\\<LM>ff\\<RM>\\<Rightarrow>* Em)\" and forms=S]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)\n  extendRule S ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<equiv>\n  (map (extend S) (fst ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)),\n   extend S (snd ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em)))\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n    ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)", "by auto"], ["proof (state)\nthis:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)", "have \"ff \\<in># \\<Gamma> \\<oplus> Compound F Fs\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma> \\<oplus> Compound F Fs", "using extendFalsum[where S=S and \\<Gamma>=\"\\<Gamma>\\<oplus> Compound F Fs\" and \\<Delta>=\\<delta>]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* Em) =\n  ( \\<Gamma> \\<oplus>\n    Compound F Fs \\<Rightarrow>* \\<delta>) \\<Longrightarrow>\n  ff \\<in># \\<Gamma> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma> \\<oplus> Compound F Fs", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma> \\<oplus> Compound F Fs\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma> \\<oplus> Compound F Fs", "have \"ff \\<in># \\<Gamma>\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma>", "have \"ff \\<in># \\<Gamma> + \\<Gamma>'\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma> + \\<Gamma>'", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*", "using rules\n                and containFalsum[where \\<Gamma>=\"\\<Gamma> + \\<Gamma>'\" and R=R]"], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>ff \\<in># \\<Gamma> + \\<Gamma>'; Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* ?C, 0)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "assume \"r = ([], \\<LM>At i\\<RM> \\<Rightarrow>* At i)\""], ["proof (state)\nthis:\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "with \\<open>extendRule S r = ([], \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)", "have \"extend S (\\<LM> At i\\<RM> \\<Rightarrow>* At i) = (\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n    ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)", "using extendRule_def[where R=\"([], \\<LM>At i \\<RM> \\<Rightarrow>* At i)\" and forms=S]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n  extendRule S ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<equiv>\n  (map (extend S) (fst ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)),\n   extend S (snd ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)))\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n    ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)", "by auto"], ["proof (state)\nthis:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)", "have \"At i \\<in># \\<Gamma> \\<oplus> Compound F Fs\" and eq: \"\\<delta> = At i\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<oplus> Compound F Fs &&& \\<delta> = At i", "using extendID[where S=S and \\<Gamma>=\"\\<Gamma> \\<oplus> Compound F Fs\" and \\<Delta>=\\<delta> and i=i]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* At i) =\n  ( \\<Gamma> \\<oplus>\n    Compound F Fs \\<Rightarrow>* \\<delta>) \\<Longrightarrow>\n  At i \\<in># \\<Gamma> \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<oplus> Compound F Fs &&& \\<delta> = At i", "by (auto simp add:extend_def)"], ["proof (state)\nthis:\n  At i \\<in># \\<Gamma> \\<oplus> Compound F Fs\n  \\<delta> = At i\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  At i \\<in># \\<Gamma> \\<oplus> Compound F Fs\n  \\<delta> = At i", "have \"At i \\<in># \\<Gamma>\""], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma> \\<oplus> Compound F Fs\n  \\<delta> = At i\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  At i \\<in># \\<Gamma>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  At i \\<in># \\<Gamma>", "have \"At i \\<in># \\<Gamma> + \\<Gamma>'\""], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> + \\<Gamma>'", "by auto"], ["proof (state)\nthis:\n  At i \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "with eq"], ["proof (chain)\npicking this:\n  \\<delta> = At i\n  At i \\<in># \\<Gamma> + \\<Gamma>'", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<delta> = At i\n  At i \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*", "using rules\n                and containID[where i=i and \\<Gamma>=\"\\<Gamma> + \\<Gamma>'\" and R=R]"], ["proof (prove)\nusing this:\n  \\<delta> = At i\n  At i \\<in># \\<Gamma> + \\<Gamma>'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>At i \\<in># \\<Gamma> + \\<Gamma>'; Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* At i, 0)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* At i) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "assume \"r \\<in> R'\""], ["proof (state)\nthis:\n  r \\<in> R'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R'", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "using rules"], ["proof (prove)\nusing this:\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> upRules", "have \"\\<exists> Ps C. Ps \\<noteq> [] \\<and> r = (Ps,C)\""], ["proof (prove)\nusing this:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "obtain x y where \"r = (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. r = (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r)"], ["proof (state)\nthis:\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "with \\<open>r \\<in> upRules\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> upRules\n  r = (x, y)", "have \"(x,y) \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> upRules\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> upRules", "by simp"], ["proof (state)\nthis:\n  (x, y) \\<in> upRules\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> upRules", "obtain Ps where \"(Ps :: 'a sequent list) \\<noteq> []\" and \"x=Ps\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> upRules\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> []; x = Ps\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases) (auto)"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  x = Ps\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "with \\<open>r = (x,y)\\<close>"], ["proof (chain)\npicking this:\n  r = (x, y)\n  Ps \\<noteq> []\n  x = Ps", "have \"r = (Ps, y)\""], ["proof (prove)\nusing this:\n  r = (x, y)\n  Ps \\<noteq> []\n  x = Ps\n\ngoal (1 subgoal):\n 1. r = (Ps, y)", "by simp"], ["proof (state)\nthis:\n  r = (Ps, y)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "then"], ["proof (chain)\npicking this:\n  r = (Ps, y)", "show \"\\<exists> Ps C. Ps \\<noteq> [] \\<and> r = (Ps,C)\""], ["proof (prove)\nusing this:\n  r = (Ps, y)\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "using \\<open>Ps \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  r = (Ps, y)\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "by blast"], ["proof (state)\nthis:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "obtain Ps C where \"Ps \\<noteq> []\" and \"r = (Ps,C)\""], ["proof (prove)\nusing this:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps C.\n        \\<lbrakk>Ps \\<noteq> []; r = (Ps, C)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "from \\<open>extendRule S r = ([], \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)", "have \"\\<exists> S. r = ([],S)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>S. r = ([], S)", "using extendRule_def[where forms=S and R=r]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n\ngoal (1 subgoal):\n 1. \\<exists>S. r = ([], S)", "by (cases r) (auto)"], ["proof (state)\nthis:\n  \\<exists>S. r = ([], S)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>S. r = ([], S)", "obtain S where \"r = ([],S)\""], ["proof (prove)\nusing this:\n  \\<exists>S. r = ([], S)\n\ngoal (1 subgoal):\n 1. (\\<And>S. r = ([], S) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  r = ([], S)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*", "using rules"], ["proof (prove)\nusing this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r \\<in> Ax \\<or> r \\<in> R'\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*", "show \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r \\<in> Ax \\<or> r \\<in> R'\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "using \\<open>n=0\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r \\<in> Ax \\<or> r \\<in> R'\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, 0) \\<in> derivable R*\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "case (Suc n')"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  n = Suc n'", "have \"(\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>,n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n' + 1)\n    \\<in> derivable R*", "using a'"], ["proof (prove)\nusing this:\n  n = Suc n'\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n' + 1)\n    \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n' + 1)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n' + 1)\n  \\<in> derivable R*", "obtain Ps where \"(Ps, \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<in> R*\" and \n                          \"Ps \\<noteq> []\" and \n                          derv: \"\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n' + 1)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>(Ps,\n                   \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n                 \\<in> R*;\n         Ps \\<noteq> [];\n         \\<forall>p\\<in>set Ps.\n            \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using characteriseLast[where C=\"\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>\" and m=n' and R=\"R*\"]"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n' + 1)\n  \\<in> derivable R*\n  ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, n' + 1)\n  \\<in> derivable R* \\<Longrightarrow>\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n     \\<in> R* \\<and>\n     (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>(Ps,\n                   \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n                 \\<in> R*;\n         Ps \\<noteq> [];\n         \\<forall>p\\<in>set Ps.\n            \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*", "have \"\\<exists> r S. (r \\<in> Ax \\<or> r \\<in> R') \\<and> extendRule S r = (Ps, \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\""], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n       extendRule S r =\n       (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)", "using rules and ruleSet[where R'=R' and R=R and Ps=Ps and C=\"\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>\"]"], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) \\<in> R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  \\<lbrakk>R' \\<subseteq> upRules; R = Ax \\<union> R';\n   (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n   \\<in> R*\\<rbrakk>\n  \\<Longrightarrow> \\<exists>S r.\n                       extendRule S r =\n                       (Ps,\n                         \\<Gamma> \\<oplus>\n                         Compound F Fs \\<Rightarrow>* \\<delta>) \\<and>\n                       (r \\<in> R' \\<or> r \\<in> Ax)\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n       extendRule S r =\n       (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)", "obtain r S where \"r \\<in> Ax \\<or> r \\<in> R'\" and ext: \"extendRule S r = (Ps, \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\""], ["proof (prove)\nusing this:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. (\\<And>r S.\n        \\<lbrakk>r \\<in> Ax \\<or> r \\<in> R';\n         extendRule S r =\n         (Ps,\n           \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "assume \"r \\<in> Ax\""], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "have \"fst r = []\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. fst r = []", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> Ax; r = (a, b)\\<rbrakk> \\<Longrightarrow> fst r = []", "by (rule Ax.cases) auto"], ["proof (state)\nthis:\n  fst r = []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  fst r = []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "obtain x y where \"r = (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. r = (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r)"], ["proof (state)\nthis:\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r = (x, y)", "have \"x \\<noteq> []\""], ["proof (prove)\nusing this:\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. x \\<noteq> []", "using \\<open>Ps \\<noteq> []\\<close> and ext\n                            and extendRule_def[where forms=S and R=r]\n                            and extend_def[where forms=S and seq=\"snd r\"]"], ["proof (prove)\nusing this:\n  r = (x, y)\n  Ps \\<noteq> []\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n  extend S (snd r) \\<equiv>\n  if succ (snd r) = Em then  antec S + antec (snd r) \\<Rightarrow>* succ S\n  else ( antec S + antec (snd r) \\<Rightarrow>* succ (snd r))\n\ngoal (1 subgoal):\n 1. x \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  fst r = []\n  x \\<noteq> []", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  fst r = []\n  x \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "using \\<open>r=(x,y)\\<close>"], ["proof (prove)\nusing this:\n  fst r = []\n  x \\<noteq> []\n  r = (x, y)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "assume \"r \\<in> R'\""], ["proof (state)\nthis:\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "obtain ps c where \"r = (ps,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps c. r = (ps, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r = (ps, c)", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "using rules and \\<open>r \\<in> R'\\<close>"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n  r \\<in> R'\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> upRules", "have \"\\<exists> T Ts. c = (\\<LM>Compound T Ts\\<RM> \\<Rightarrow>* Em) \\<or> c = (\\<Empt> \\<Rightarrow>* Compound T Ts)\""], ["proof (prove)\nusing this:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<exists>T Ts.\n       c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n       c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)", "using \\<open>r=(ps,c)\\<close>\n              and upRuleCharacterise[where Ps=ps and C=c]"], ["proof (prove)\nusing this:\n  r \\<in> upRules\n  r = (ps, c)\n  (ps, c) \\<in> upRules \\<Longrightarrow>\n  \\<exists>F Fs.\n     c = ( \\<Empt> \\<Rightarrow>* Compound F Fs) \\<or>\n     c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. \\<exists>T Ts.\n       c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n       c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)", "by auto"], ["proof (state)\nthis:\n  \\<exists>T Ts.\n     c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n     c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>T Ts.\n     c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n     c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)", "obtain T Ts where \"c = (\\<LM>Compound T Ts\\<RM> \\<Rightarrow>* Em) \\<or> c = (\\<Empt> \\<Rightarrow>* Compound T Ts)\""], ["proof (prove)\nusing this:\n  \\<exists>T Ts.\n     c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n     c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. (\\<And>T Ts.\n        c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n        c = ( \\<Empt> \\<Rightarrow>* Compound T Ts) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "assume \"c = (\\<Empt> \\<Rightarrow>* Compound T Ts)\""], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "with ext"], ["proof (chain)\npicking this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)", "have \"antec S = \\<Gamma> \\<oplus> Compound F Fs\" and del: \"Compound T Ts = \\<delta>\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. antec S = \\<Gamma> \\<oplus> Compound F Fs &&& Compound T Ts = \\<delta>", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. antec S = \\<Gamma> \\<oplus> Compound F Fs &&& Compound T Ts = \\<delta>", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  antec S = \\<Gamma> \\<oplus> Compound F Fs\n  Compound T Ts = \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  antec S = \\<Gamma> \\<oplus> Compound F Fs\n  Compound T Ts = \\<delta>", "obtain \\<delta>' where \"S = (\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\""], ["proof (prove)\nusing this:\n  antec S = \\<Gamma> \\<oplus> Compound F Fs\n  Compound T Ts = \\<delta>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>'.\n        S =\n        ( \\<Gamma> \\<oplus>\n          Compound F Fs \\<Rightarrow>* \\<delta>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases S) auto"], ["proof (state)\nthis:\n  S = ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "with derv"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  S = ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')", "have pms: \"\\<forall> p \\<in> set ps. \\<exists> m\\<le>n'. (extend (\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  S = ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend\n            ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p,\n           m)\n          \\<in> derivable R*", "using ext and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  S = ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend\n            ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p,\n           m)\n          \\<in> derivable R*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\n          p,\n         m)\n        \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "have \"\\<forall> p \\<in> set ps. \\<exists> m\\<le>n'. (extend (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p,m) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "assume \"p \\<in> set ps\""], ["proof (state)\nthis:\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "obtain \\<Gamma>i \\<delta>i where p: \"p = (\\<Gamma>i \\<Rightarrow>* \\<delta>i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>i \\<delta>i.\n        p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases p) auto"], ["proof (state)\nthis:\n  p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "have \"\\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em", "by blast"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "assume \"\\<delta>i = Em\""], ["proof (state)\nthis:\n  \\<delta>i = Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<delta>i = Em", "have \"extend (\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p = (\\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\""], ["proof (prove)\nusing this:\n  \\<delta>i = Em\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p =\n    ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')", "using p"], ["proof (prove)\nusing this:\n  \\<delta>i = Em\n  p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p =\n    ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p =\n  ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "with pms"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\n          p,\n         m)\n        \\<in> derivable R*\n  extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p =\n  ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')", "obtain m where \"m \\<le>n'\" and \"(\\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\n          p,\n         m)\n        \\<in> derivable R*\n  extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p =\n  ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<le> n';\n         ( \\<Gamma> +\n           \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>',\n          m)\n         \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>p \\<in> set ps\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\n          p,\n         m)\n        \\<in> derivable R*\n  extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p =\n  ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<le> n';\n         ( \\<Gamma> +\n           \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>',\n          m)\n         \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<le> n'\n  ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>', m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "with IH and \\<open>n = Suc n'\\<close> and b'"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<delta>.\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* Em)\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n            \\<in> derivable R*)\n  n = Suc n'\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\n  m \\<le> n'\n  ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>', m)\n  \\<in> derivable R*", "have \"\\<exists> m'\\<le>m. (\\<Gamma> + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>',m') \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<delta>.\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* Em)\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n            \\<in> derivable R*)\n  n = Suc n'\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\n  m \\<le> n'\n  ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>', m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m'\\<le>m.\n       ( \\<Gamma> + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>', m')\n       \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma> + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>', m')\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma> + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>', m')\n     \\<in> derivable R*", "have \"\\<exists> m\\<le>n'. (extend (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma> + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>', m')\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n       \\<in> derivable R*", "using \\<open>m\\<le>n'\\<close>\n                           and p and \\<open>\\<delta>i = Em\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma> + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>', m')\n     \\<in> derivable R*\n  m \\<le> n'\n  p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n  \\<delta>i = Em\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n       \\<in> derivable R*", "apply (auto simp add:extend_def union_ac)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>m \\<le> n'; p = ( \\<Gamma>i \\<Rightarrow>* Em);\n        \\<delta>i = Em; m' \\<le> m;\n        ( \\<Gamma>' + (\\<Gamma> + \\<Gamma>i) \\<Rightarrow>* \\<delta>', m')\n        \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Gamma>' +\n                              (\\<Gamma> +\n                               \\<Gamma>i) \\<Rightarrow>* \\<delta>',\n                             m)\n                            \\<in> derivable R*", "by (rule_tac x=\"m'\" in exI) auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "assume \"\\<delta>i \\<noteq> Em\""], ["proof (state)\nthis:\n  \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<delta>i \\<noteq> Em", "have \"extend (\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p = (\\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i)\""], ["proof (prove)\nusing this:\n  \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p =\n    ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i)", "using p"], ["proof (prove)\nusing this:\n  \\<delta>i \\<noteq> Em\n  p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p =\n    ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i)", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p =\n  ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "with pms"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\n          p,\n         m)\n        \\<in> derivable R*\n  extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p =\n  ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i)", "obtain m where \"m\\<le>n'\" and \"(\\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\n          p,\n         m)\n        \\<in> derivable R*\n  extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p =\n  ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<le> n';\n         ( \\<Gamma> +\n           \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i,\n          m)\n         \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>p \\<in> set ps\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\n          p,\n         m)\n        \\<in> derivable R*\n  extend ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>') p =\n  ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i)\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<le> n';\n         ( \\<Gamma> +\n           \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i,\n          m)\n         \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<le> n'\n  ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  m \\<le> n'\n  ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i, m)\n  \\<in> derivable R*", "have \"\\<exists> m\\<le>n'. (\\<Gamma> + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  m \\<le> n'\n  ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m)\n       \\<in> derivable R*", "using \\<open>n = Suc n'\\<close> and b'\n                           and IH"], ["proof (prove)\nusing this:\n  m \\<le> n'\n  ( \\<Gamma> + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i, m)\n  \\<in> derivable R*\n  n = Suc n'\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<delta>.\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* Em)\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n            \\<in> derivable R*)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m)\n       \\<in> derivable R*", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> n';\n     ( add_mset (Compound F Fs)\n        (\\<Gamma> + \\<Gamma>i) \\<Rightarrow>* \\<delta>i,\n      m)\n     \\<in> derivable R*;\n     n = Suc n';\n     \\<forall>r'\\<in>R.\n        leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n        ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r');\n     \\<forall>m<Suc n'.\n        \\<forall>\\<Gamma> \\<delta>.\n           ( add_mset (Compound F Fs) \\<Gamma> \\<Rightarrow>* \\<delta>, m)\n           \\<in> derivable R* \\<longrightarrow>\n           (\\<exists>m'\\<le>m.\n               ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n               \\<in> derivable R*)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m\\<le>n'.\n                         ( \\<Gamma> + \\<Gamma>i +\n                           \\<Gamma>' \\<Rightarrow>* \\<delta>i,\n                          m)\n                         \\<in> derivable R*", "apply (drule_tac x=m in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> n';\n     ( add_mset (Compound F Fs)\n        (\\<Gamma> + \\<Gamma>i) \\<Rightarrow>* \\<delta>i,\n      m)\n     \\<in> derivable R*;\n     n = Suc n';\n     \\<forall>r'\\<in>R.\n        leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n        ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r');\n     m < Suc n' \\<longrightarrow>\n     (\\<forall>\\<Gamma> \\<delta>.\n         ( add_mset (Compound F Fs) \\<Gamma> \\<Rightarrow>* \\<delta>, m)\n         \\<in> derivable R* \\<longrightarrow>\n         (\\<exists>m'\\<le>m.\n             ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n             \\<in> derivable R*))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m\\<le>n'.\n                         ( \\<Gamma> + \\<Gamma>i +\n                           \\<Gamma>' \\<Rightarrow>* \\<delta>i,\n                          m)\n                         \\<in> derivable R*", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> n';\n     ( add_mset (Compound F Fs)\n        (\\<Gamma> + \\<Gamma>i) \\<Rightarrow>* \\<delta>i,\n      m)\n     \\<in> derivable R*;\n     n = Suc n';\n     \\<forall>r'\\<in>R.\n        leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n        ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r');\n     \\<forall>\\<Gamma> \\<delta>.\n        ( add_mset (Compound F Fs) \\<Gamma> \\<Rightarrow>* \\<delta>, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n            \\<in> derivable R*)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m\\<le>n'.\n                         ( \\<Gamma> + \\<Gamma>i +\n                           \\<Gamma>' \\<Rightarrow>* \\<delta>i,\n                          m)\n                         \\<in> derivable R*", "apply (drule_tac x=\"\\<Gamma> + \\<Gamma>i\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> n';\n     ( add_mset (Compound F Fs)\n        (\\<Gamma> + \\<Gamma>i) \\<Rightarrow>* \\<delta>i,\n      m)\n     \\<in> derivable R*;\n     n = Suc n';\n     \\<forall>r'\\<in>R.\n        leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n        ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r');\n     \\<forall>\\<delta>.\n        ( add_mset (Compound F Fs)\n           (\\<Gamma> + \\<Gamma>i) \\<Rightarrow>* \\<delta>,\n         m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n            \\<in> derivable R*)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m\\<le>n'.\n                         ( \\<Gamma> + \\<Gamma>i +\n                           \\<Gamma>' \\<Rightarrow>* \\<delta>i,\n                          m)\n                         \\<in> derivable R*", "apply (drule_tac x=\\<delta>i in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> n';\n     ( add_mset (Compound F Fs)\n        (\\<Gamma> + \\<Gamma>i) \\<Rightarrow>* \\<delta>i,\n      m)\n     \\<in> derivable R*;\n     n = Suc n';\n     \\<forall>r'\\<in>R.\n        leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n        ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r');\n     ( add_mset (Compound F Fs)\n        (\\<Gamma> + \\<Gamma>i) \\<Rightarrow>* \\<delta>i,\n      m)\n     \\<in> derivable R* \\<longrightarrow>\n     (\\<exists>m'\\<le>m.\n         ( \\<Gamma> + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m')\n         \\<in> derivable R*)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m\\<le>n'.\n                         ( \\<Gamma> + \\<Gamma>i +\n                           \\<Gamma>' \\<Rightarrow>* \\<delta>i,\n                          m)\n                         \\<in> derivable R*", "apply (auto simp add:union_ac)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>m \\<le> n';\n        ( add_mset (Compound F Fs)\n           (\\<Gamma> + \\<Gamma>i) \\<Rightarrow>* \\<delta>i,\n         m)\n        \\<in> derivable R*;\n        n = Suc n';\n        \\<forall>r'\\<in>R.\n           leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r');\n        m' \\<le> m;\n        ( \\<Gamma>' + (\\<Gamma> + \\<Gamma>i) \\<Rightarrow>* \\<delta>i, m')\n        \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Gamma>' +\n                              (\\<Gamma> +\n                               \\<Gamma>i) \\<Rightarrow>* \\<delta>i,\n                             m)\n                            \\<in> derivable R*", "apply (rule_tac x=\"m'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>m \\<le> n';\n        ( add_mset (Compound F Fs)\n           (\\<Gamma> + \\<Gamma>i) \\<Rightarrow>* \\<delta>i,\n         m)\n        \\<in> derivable R*;\n        n = Suc n';\n        \\<forall>r'\\<in>R.\n           leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r');\n        m' \\<le> m;\n        ( \\<Gamma>' + (\\<Gamma> + \\<Gamma>i) \\<Rightarrow>* \\<delta>i, m')\n        \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> m' \\<le> n' \\<and>\n                         ( \\<Gamma>' +\n                           (\\<Gamma> + \\<Gamma>i) \\<Rightarrow>* \\<delta>i,\n                          m')\n                         \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m)\n     \\<in> derivable R*", "have \"\\<exists> m\\<le>n'. (extend (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n       \\<in> derivable R*", "using \\<open>m\\<le>n'\\<close>\n                           and p and \\<open>\\<delta>i \\<noteq> Em\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m)\n     \\<in> derivable R*\n  m \\<le> n'\n  p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n  \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n       \\<in> derivable R*", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  \\<delta>i \\<noteq> Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\n  \\<delta>i = Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n     \\<in> derivable R*\n  \\<delta>i \\<noteq> Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n     \\<in> derivable R*", "have \"\\<exists> m\\<le>n'. (extend (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\n  \\<delta>i = Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n     \\<in> derivable R*\n  \\<delta>i \\<noteq> Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n       \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  ?p2 \\<in> set ps \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') ?p2, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?p2 \\<in> set ps \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') ?p2, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n          \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n        \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n        \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n        \\<in> derivable R*", "have \"\\<forall> p \\<in> set (fst (extendRule (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') r)).\n                          \\<exists> m\\<le>n'. (p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n        \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (fst (extendRule\n                              ( \\<Gamma> +\n                                \\<Gamma>' \\<Rightarrow>* \\<delta>')\n                              r)).\n       \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') p, m)\n        \\<in> derivable R*\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (fst (extendRule\n                              ( \\<Gamma> +\n                                \\<Gamma>' \\<Rightarrow>* \\<delta>')\n                              r)).\n       \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>')\n                            r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>')\n                            r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "have \"extendRule (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') r \\<in> R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extendRule ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') r \\<in> R*", "using \\<open>r \\<in> R'\\<close> and rules"], ["proof (prove)\nusing this:\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') r \\<in> R*", "by auto"], ["proof (state)\nthis:\n  extendRule ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') r \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extendRule ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') r \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "from \\<open>S = (\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\\<close> and ext and \\<open>c = (\\<Empt> \\<Rightarrow>* Compound T Ts)\\<close>\n                 and \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  S = ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n  r = (ps, c)", "have \"extend (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') (snd r) = (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* Compound T Ts)\""], ["proof (prove)\nusing this:\n  S = ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>')\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') (snd r) =\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* Compound T Ts)", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* Compound T Ts)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "from ext and \\<open>r = (ps,c)\\<close> and \\<open>Ps \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r = (ps, c)\n  Ps \\<noteq> []", "have \"fst r \\<noteq> []\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r = (ps, c)\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. fst r \\<noteq> []", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>')\n                            r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  extendRule ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') r \\<in> R*\n  extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* Compound T Ts)\n  fst r \\<noteq> []", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* Compound T Ts ,n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>')\n                            r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  extendRule ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') r \\<in> R*\n  extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* Compound T Ts)\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* Compound T Ts, n' + 1)\n    \\<in> derivable R*", "using\n                 derivable.step[where r=\"extendRule (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') r\" and m=\"n'\" and R=\"R*\"]"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>')\n                            r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  extendRule ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') r \\<in> R*\n  extend ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* Compound T Ts)\n  fst r \\<noteq> []\n  \\<lbrakk>extendRule ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>') r\n           \\<in> R*;\n   fst (extendRule ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>')\n         r) \\<noteq>\n   [];\n   \\<forall>p\\<in>set (fst (extendRule\n                             ( \\<Gamma> +\n                               \\<Gamma>' \\<Rightarrow>* \\<delta>')\n                             r)).\n      \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n  \\<Longrightarrow> (snd (extendRule\n                           ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>')\n                           r),\n                     n' + 1)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* Compound T Ts, n' + 1)\n    \\<in> derivable R*", "by (cases r) (auto simp add:map_is_Nil_conv extendRule_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* Compound T Ts, n' + 1)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* Compound T Ts, n' + 1)\n  \\<in> derivable R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* Compound T Ts, n' + 1)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "using \\<open>n = Suc n'\\<close> and del"], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* Compound T Ts, n' + 1)\n  \\<in> derivable R*\n  n = Suc n'\n  Compound T Ts = \\<delta>\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "assume r: \"c = (\\<LM>Compound T Ts\\<RM> \\<Rightarrow>* Em)\""], ["proof (state)\nthis:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "have \"Compound F Fs = Compound T Ts \\<or> Compound F Fs \\<noteq> Compound T Ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Compound F Fs = Compound T Ts \\<or> Compound F Fs \\<noteq> Compound T Ts", "by blast"], ["proof (state)\nthis:\n  Compound F Fs = Compound T Ts \\<or> Compound F Fs \\<noteq> Compound T Ts\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  Compound F Fs = Compound T Ts \\<or> Compound F Fs \\<noteq> Compound T Ts\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  Compound F Fs = Compound T Ts \\<or> Compound F Fs \\<noteq> Compound T Ts\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "assume \"Compound F Fs = Compound T Ts\""], ["proof (state)\nthis:\n  Compound F Fs = Compound T Ts\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  Compound F Fs = Compound T Ts", "have \"leftPrincipal r (Compound F Fs)\""], ["proof (prove)\nusing this:\n  Compound F Fs = Compound T Ts\n\ngoal (1 subgoal):\n 1. leftPrincipal r (Compound F Fs)", "using r and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  Compound F Fs = Compound T Ts\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. leftPrincipal r (Compound F Fs)", "by auto"], ["proof (state)\nthis:\n  leftPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  leftPrincipal r (Compound F Fs)", "have \"(\\<Gamma>' \\<Rightarrow>* Em) \\<in> set ps\""], ["proof (prove)\nusing this:\n  leftPrincipal r (Compound F Fs)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set ps", "using b' and \\<open>r = (ps,c)\\<close> and \\<open>r \\<in> R'\\<close> and rules"], ["proof (prove)\nusing this:\n  leftPrincipal r (Compound F Fs)\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\n  r = (ps, c)\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set ps", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set ps", "have \"extend S (\\<Gamma>' \\<Rightarrow>* Em) \\<in> set Ps\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set ps\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set Ps", "using \\<open>extendRule S r = (Ps,\\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\\<close>\n                      and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set ps\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set Ps", "by (simp add:extendContain)"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "from r and \\<open>Compound F Fs = Compound T Ts\\<close>"], ["proof (chain)\npicking this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n  Compound F Fs = Compound T Ts", "have \"c = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* Em)\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n  Compound F Fs = Compound T Ts\n\ngoal (1 subgoal):\n 1. c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)", "by auto"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "with ext"], ["proof (chain)\npicking this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)", "have \"S = (\\<Gamma> \\<Rightarrow>* \\<delta>)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<delta>)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<delta>)", "apply (auto simp add:extendRule_def extend_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em);\n     r = (ps,  \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* Em);\n     Ps = map (extend S) ps; \\<Gamma> = antec S; \\<delta> = succ S\\<rbrakk>\n    \\<Longrightarrow> S = ( antec S \\<Rightarrow>* succ S)", "by (cases S) auto"], ["proof (state)\nthis:\n  S = ( \\<Gamma> \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set Ps\n  S = ( \\<Gamma> \\<Rightarrow>* \\<delta>)", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>) \\<in> set Ps\""], ["proof (prove)\nusing this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set Ps\n  S = ( \\<Gamma> \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>) \\<in> set Ps", "by (simp add:extend_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>) \\<in> set Ps", "have \"\\<exists> m\\<le>n'. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "using \\<open>\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>) \\<in> set Ps\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta> ,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "using \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "by (auto,rule_tac x=m in exI) (simp)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  Compound F Fs = Compound T Ts \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  Compound F Fs = Compound T Ts \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  Compound F Fs = Compound T Ts \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "assume \"Compound F Fs \\<noteq> Compound T Ts\""], ["proof (state)\nthis:\n  Compound F Fs \\<noteq> Compound T Ts\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "obtain \\<Gamma>'' \\<delta>' where \"S = (\\<Gamma>'' \\<Rightarrow>* \\<delta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>'' \\<delta>'.\n        S = ( \\<Gamma>'' \\<Rightarrow>* \\<delta>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases S) auto"], ["proof (state)\nthis:\n  S = ( \\<Gamma>'' \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "with ext and r and \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n  r = (ps, c)\n  S = ( \\<Gamma>'' \\<Rightarrow>* \\<delta>')", "have \"\\<delta> = \\<delta>'\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n  r = (ps, c)\n  S = ( \\<Gamma>'' \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. \\<delta> = \\<delta>'", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  \\<delta> = \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<delta> = \\<delta>'", "have \"S = (\\<Gamma>'' \\<Rightarrow>* \\<delta>)\""], ["proof (prove)\nusing this:\n  \\<delta> = \\<delta>'\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma>'' \\<Rightarrow>* \\<delta>)", "using \\<open>S = (\\<Gamma>'' \\<Rightarrow>* \\<delta>')\\<close>"], ["proof (prove)\nusing this:\n  \\<delta> = \\<delta>'\n  S = ( \\<Gamma>'' \\<Rightarrow>* \\<delta>')\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma>'' \\<Rightarrow>* \\<delta>)", "by simp"], ["proof (state)\nthis:\n  S = ( \\<Gamma>'' \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "with r and \\<open>r = (ps,c)\\<close> and ext"], ["proof (chain)\npicking this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n  r = (ps, c)\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  S = ( \\<Gamma>'' \\<Rightarrow>* \\<delta>)", "have \"\\<Gamma> \\<oplus> Compound F Fs = \\<Gamma>'' \\<oplus> Compound T Ts\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n  r = (ps, c)\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  S = ( \\<Gamma>'' \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<oplus> Compound F Fs = \\<Gamma>'' \\<oplus> Compound T Ts", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  \\<Gamma> \\<oplus> Compound F Fs = \\<Gamma>'' \\<oplus> Compound T Ts\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "with \\<open>Compound F Fs \\<noteq> Compound T Ts\\<close>"], ["proof (chain)\npicking this:\n  Compound F Fs \\<noteq> Compound T Ts\n  \\<Gamma> \\<oplus> Compound F Fs = \\<Gamma>'' \\<oplus> Compound T Ts", "obtain \\<Gamma>1 where\n                      gam1: \"\\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\" and\n                      gam2: \"\\<Gamma>'' = \\<Gamma>1 \\<oplus> Compound F Fs\""], ["proof (prove)\nusing this:\n  Compound F Fs \\<noteq> Compound T Ts\n  \\<Gamma> \\<oplus> Compound F Fs = \\<Gamma>'' \\<oplus> Compound T Ts\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>1.\n        \\<lbrakk>\\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts;\n         \\<Gamma>'' = \\<Gamma>1 \\<oplus> Compound F Fs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using midMultiset[where \\<Gamma>=\\<Gamma> and \\<Gamma>'=\\<Gamma>'' and A=\"Compound F Fs\" and B=\"Compound T Ts\"]"], ["proof (prove)\nusing this:\n  Compound F Fs \\<noteq> Compound T Ts\n  \\<Gamma> \\<oplus> Compound F Fs = \\<Gamma>'' \\<oplus> Compound T Ts\n  \\<lbrakk>\\<Gamma> \\<oplus> Compound F Fs =\n           \\<Gamma>'' \\<oplus> Compound T Ts;\n   Compound F Fs \\<noteq> Compound T Ts\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<Gamma>''''.\n                       \\<Gamma> = \\<Gamma>'''' \\<oplus> Compound T Ts \\<and>\n                       \\<Gamma>'' = \\<Gamma>'''' \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>1.\n        \\<lbrakk>\\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts;\n         \\<Gamma>'' = \\<Gamma>1 \\<oplus> Compound F Fs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\n  \\<Gamma>'' = \\<Gamma>1 \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "with \\<open>S = (\\<Gamma>'' \\<Rightarrow>* \\<delta>)\\<close>"], ["proof (chain)\npicking this:\n  S = ( \\<Gamma>'' \\<Rightarrow>* \\<delta>)\n  \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\n  \\<Gamma>'' = \\<Gamma>1 \\<oplus> Compound F Fs", "have \"S = (\\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\""], ["proof (prove)\nusing this:\n  S = ( \\<Gamma>'' \\<Rightarrow>* \\<delta>)\n  \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\n  \\<Gamma>'' = \\<Gamma>1 \\<oplus> Compound F Fs\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)", "by simp"], ["proof (state)\nthis:\n  S = ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "with derv"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  S = ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)", "have pms: \"\\<forall> p \\<in> set ps. \\<exists> m\\<le>n'. (extend (\\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  S = ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend\n            ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p,\n           m)\n          \\<in> derivable R*", "using ext and \\<open>r= (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\n  S = ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend\n            ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p,\n           m)\n          \\<in> derivable R*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n          p,\n         m)\n        \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "have \"\\<forall> p \\<in> set ps. \\<exists> m\\<le>n'. (extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p,m) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "assume \"p \\<in> set ps\""], ["proof (state)\nthis:\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "obtain \\<Gamma>i \\<delta>i where p: \"p = (\\<Gamma>i \\<Rightarrow>* \\<delta>i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>i \\<delta>i.\n        p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases p) auto"], ["proof (state)\nthis:\n  p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "have \"\\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em", "by blast"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "assume \"\\<delta>i = Em\""], ["proof (state)\nthis:\n  \\<delta>i = Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<delta>i = Em", "have \"extend (\\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p = (\\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\""], ["proof (prove)\nusing this:\n  \\<delta>i = Em\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p =\n    ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)", "using p"], ["proof (prove)\nusing this:\n  \\<delta>i = Em\n  p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p =\n    ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "with pms"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n          p,\n         m)\n        \\<in> derivable R*\n  extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)", "obtain m where \"m \\<le>n'\" and \"(\\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n          p,\n         m)\n        \\<in> derivable R*\n  extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<le> n';\n         ( \\<Gamma>1 +\n           \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>,\n          m)\n         \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>p \\<in> set ps\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n          p,\n         m)\n        \\<in> derivable R*\n  extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<le> n';\n         ( \\<Gamma>1 +\n           \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>,\n          m)\n         \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<le> n'\n  ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "with IH and \\<open>n = Suc n'\\<close> and b'"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<delta>.\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* Em)\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n            \\<in> derivable R*)\n  n = Suc n'\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\n  m \\<le> n'\n  ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, m)\n  \\<in> derivable R*", "have \"\\<exists> m'\\<le>m. (\\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>,m') \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<delta>.\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* Em)\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n            \\<in> derivable R*)\n  n = Suc n'\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\n  m \\<le> n'\n  ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m'\\<le>m.\n       ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n       \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n     \\<in> derivable R*", "have \"\\<exists> m\\<le>n'. (extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n       \\<in> derivable R*", "using \\<open>m\\<le>n'\\<close>\n                               and p and \\<open>\\<delta>i = Em\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n     \\<in> derivable R*\n  m \\<le> n'\n  p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n  \\<delta>i = Em\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n       \\<in> derivable R*", "apply (auto simp add:extend_def union_ac)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>m \\<le> n'; p = ( \\<Gamma>i \\<Rightarrow>* Em);\n        \\<delta>i = Em; m' \\<le> m;\n        ( \\<Gamma>' + (\\<Gamma>1 + \\<Gamma>i) \\<Rightarrow>* \\<delta>, m')\n        \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Gamma>' +\n                              (\\<Gamma>1 +\n                               \\<Gamma>i) \\<Rightarrow>* \\<delta>,\n                             m)\n                            \\<in> derivable R*", "by (rule_tac x=\"m'\" in exI) auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  \\<delta>i = Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "assume \"\\<delta>i \\<noteq> Em\""], ["proof (state)\nthis:\n  \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<delta>i \\<noteq> Em", "have \"extend (\\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p = (\\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i)\""], ["proof (prove)\nusing this:\n  \\<delta>i \\<noteq> Em\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p =\n    ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i)", "using p"], ["proof (prove)\nusing this:\n  \\<delta>i \\<noteq> Em\n  p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p =\n    ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i)", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "with pms"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n          p,\n         m)\n        \\<in> derivable R*\n  extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i)", "obtain m where \"m\\<le>n'\" and \"(\\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n          p,\n         m)\n        \\<in> derivable R*\n  extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<le> n';\n         ( \\<Gamma>1 +\n           \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i,\n          m)\n         \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>p \\<in> set ps\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n          p,\n         m)\n        \\<in> derivable R*\n  extend ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>) p =\n  ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i)\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<le> n';\n         ( \\<Gamma>1 +\n           \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i,\n          m)\n         \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<le> n'\n  ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i,\n   m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "with IH and \\<open>n = Suc n'\\<close> and b'"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<delta>.\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* Em)\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n            \\<in> derivable R*)\n  n = Suc n'\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\n  m \\<le> n'\n  ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i,\n   m)\n  \\<in> derivable R*", "have \"\\<exists> m'\\<le>m. (\\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i,m') \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<delta>.\n        ( \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>, m)\n        \\<in> derivable R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* Em)\n            \\<in> set (fst r')) \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m')\n            \\<in> derivable R*)\n  n = Suc n'\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (Compound F Fs) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* Em) \\<in> set (fst r')\n  m \\<le> n'\n  ( \\<Gamma>1 + \\<Gamma>i \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>i,\n   m)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m'\\<le>m.\n       ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m')\n       \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m')\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m')\n     \\<in> derivable R*", "have \"\\<exists> m\\<le>n'. (extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m')\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n       \\<in> derivable R*", "using \\<open>m\\<le>n'\\<close>\n                               and p and \\<open>\\<delta>i \\<noteq> Em\\<close> and \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m'\\<le>m.\n     ( \\<Gamma>1 + \\<Gamma>i + \\<Gamma>' \\<Rightarrow>* \\<delta>i, m')\n     \\<in> derivable R*\n  m \\<le> n'\n  p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i)\n  \\<delta>i \\<noteq> Em\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n       \\<in> derivable R*", "apply (auto simp add:extend_def union_ac)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>m \\<le> n'; p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i);\n        \\<delta>i \\<noteq> Em; n = Suc n'; m' \\<le> m;\n        ( \\<Gamma>' + (\\<Gamma>1 + \\<Gamma>i) \\<Rightarrow>* \\<delta>i, m')\n        \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Gamma>' +\n                              (\\<Gamma>1 +\n                               \\<Gamma>i) \\<Rightarrow>* \\<delta>i,\n                             m)\n                            \\<in> derivable R*", "apply (rule_tac x=m' in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>m \\<le> n'; p = ( \\<Gamma>i \\<Rightarrow>* \\<delta>i);\n        \\<delta>i \\<noteq> Em; n = Suc n'; m' \\<le> m;\n        ( \\<Gamma>' + (\\<Gamma>1 + \\<Gamma>i) \\<Rightarrow>* \\<delta>i, m')\n        \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> m' \\<le> n' \\<and>\n                         ( \\<Gamma>' +\n                           (\\<Gamma>1 + \\<Gamma>i) \\<Rightarrow>* \\<delta>i,\n                          m')\n                         \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  \\<delta>i \\<noteq> Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\n  \\<delta>i = Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n     \\<in> derivable R*\n  \\<delta>i \\<noteq> Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n     \\<in> derivable R*", "have \"\\<exists> m\\<le>n'. (extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<delta>i = Em \\<or> \\<delta>i \\<noteq> Em\n  \\<delta>i = Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n     \\<in> derivable R*\n  \\<delta>i \\<noteq> Em \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n       \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  ?p2 \\<in> set ps \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) ?p2, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?p2 \\<in> set ps \\<Longrightarrow>\n  \\<exists>m\\<le>n'.\n     (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) ?p2, m)\n     \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       \\<exists>m\\<le>n'.\n          (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n          \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n        \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n        \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n        \\<in> derivable R*", "have \"\\<forall> p \\<in> set (fst (extendRule (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r)).\n                              \\<exists> m\\<le>n'. (p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n        \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (fst (extendRule\n                              ( \\<Gamma>1 +\n                                \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                              r)).\n       \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     \\<exists>m\\<le>n'.\n        (extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) p, m)\n        \\<in> derivable R*\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (fst (extendRule\n                              ( \\<Gamma>1 +\n                                \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                              r)).\n       \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                            r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                            r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "have \"extendRule (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*", "using \\<open>r \\<in> R'\\<close> and rules"], ["proof (prove)\nusing this:\n  r \\<in> R'\n  R' \\<subseteq> upRules \\<and> R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*", "by auto"], ["proof (state)\nthis:\n  extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "from \\<open>S = (\\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\\<close> and ext and \\<open>c = (\\<LM>Compound T Ts\\<RM> \\<Rightarrow>* Em)\\<close>\n                     and gam1 and \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  S = ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n  \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\n  r = (ps, c)", "have \"extend (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) (snd r) = (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>)\""], ["proof (prove)\nusing this:\n  S = ( \\<Gamma>1 \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em)\n  \\<Gamma> = \\<Gamma>1 \\<oplus> Compound T Ts\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) (snd r) =\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>)", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "from ext and \\<open>r = (ps,c)\\<close> and \\<open>Ps \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r = (ps, c)\n  Ps \\<noteq> []", "have \"fst r \\<noteq> []\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r = (ps, c)\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. fst r \\<noteq> []", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                            r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*\n  extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n  fst r \\<noteq> []", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>,n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                            r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*\n  extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, n' + 1)\n    \\<in> derivable R*", "using\n                     derivable.step[where r=\"extendRule (\\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r\" and m=\"n'\" and R=\"R*\"]"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (fst (extendRule\n                            ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                            r)).\n     \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r \\<in> R*\n  extend ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) (snd r) =\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n  fst r \\<noteq> []\n  \\<lbrakk>extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>) r\n           \\<in> R*;\n   fst (extendRule ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n         r) \\<noteq>\n   [];\n   \\<forall>p\\<in>set (fst (extendRule\n                             ( \\<Gamma>1 +\n                               \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                             r)).\n      \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n  \\<Longrightarrow> (snd (extendRule\n                           ( \\<Gamma>1 + \\<Gamma>' \\<Rightarrow>* \\<delta>)\n                           r),\n                     n' + 1)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, n' + 1)\n    \\<in> derivable R*", "by (cases r) (auto simp add:map_is_Nil_conv extendRule_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, n' + 1) \\<in> derivable R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "using \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, n' + 1) \\<in> derivable R*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  Compound F Fs \\<noteq> Compound T Ts \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  Compound F Fs = Compound T Ts \\<or> Compound F Fs \\<noteq> Compound T Ts\n  Compound F Fs = Compound T Ts \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n  Compound F Fs \\<noteq> Compound T Ts \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  Compound F Fs = Compound T Ts \\<or> Compound F Fs \\<noteq> Compound T Ts\n  Compound F Fs = Compound T Ts \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n  Compound F Fs \\<noteq> Compound T Ts \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<or>\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts)\n  c = ( \\<Empt> \\<Rightarrow>* Compound T Ts) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n  c = ( \\<LM> Compound T Ts  \\<RM> \\<Rightarrow>* Em) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  r \\<in> R' \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m)\n          \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "show \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  r \\<in> Ax \\<or> r \\<in> R'\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> Compound F Fs \\<Rightarrow>* \\<delta>)\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n  r \\<in> R' \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<delta>, m) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(* ---------------------------------------------------\n   ---------------------------------------------------\n   ---------------------------------------------------\n   ---------------------------------------------------\n                THIS IS NOW\n                G3ip.thy\n   ---------------------------------------------------\n   ---------------------------------------------------\n   ---------------------------------------------------\n   --------------------------------------------------- *)"], ["", "datatype cdi = con | dis | imp"], ["", "type_synonym cdi_form = \"cdi form\""], ["", "abbreviation con_form (infixl \"\\<and>*\" 80) where\n   \"p \\<and>* q \\<equiv> Compound con [p,q]\""], ["", "abbreviation dis_form (infixl \"\\<or>*\" 80) where\n   \"p \\<or>* q \\<equiv> Compound dis [p,q]\""], ["", "abbreviation imp_form (infixl \"\\<supset>\" 80) where\n   \"p \\<supset> q  \\<equiv> Compound imp [p,q]\""], ["", "(*>*)"], ["", "text\\<open>\n\\noindent \\textbf{G3ip} can be expressed in this formalism: \n\\<close>"], ["", "inductive_set \"g3ip\"\nwhere\n   conL(*<*)[intro](*>*):  \"([\\<LM> A \\<RM> + \\<LM> B \\<RM> \\<Rightarrow>* Em], \\<LM> A \\<and>* B \\<RM> \\<Rightarrow>* Em) \\<in> g3ip\"\n|  conR(*<*)[intro](*>*):  \"([\\<Empt> \\<Rightarrow>* A, \\<Empt> \\<Rightarrow>* B], \\<Empt> \\<Rightarrow>* (A \\<and>* B)) \\<in> g3ip\"\n|  disL(*<*)[intro](*>*):  \"([\\<LM> A \\<RM> \\<Rightarrow>* Em, \\<LM> B \\<RM> \\<Rightarrow>* Em], \\<LM> A \\<or>* B\\<RM> \\<Rightarrow>* Em) \\<in> g3ip\"\n|  disR1(*<*)[intro](*>*): \"([\\<Empt> \\<Rightarrow>* A], \\<Empt> \\<Rightarrow>* (A \\<or>* B)) \\<in> g3ip\"\n|  disR2(*<*)[intro](*>*): \"([\\<Empt> \\<Rightarrow>* B], \\<Empt> \\<Rightarrow>* (A \\<or>* B)) \\<in> g3ip\"\n|  impL(*<*)[intro](*>*):  \"([\\<LM> A \\<supset> B \\<RM> \\<Rightarrow>* A, \\<LM> B \\<RM> \\<Rightarrow>* Em], \\<LM> (A \\<supset> B) \\<RM> \\<Rightarrow>* Em) \\<in> g3ip\"\n|  impR(*<*)[intro](*>*):  \"([\\<LM> A \\<RM> \\<Rightarrow>* B], \\<Empt> \\<Rightarrow>* (A \\<supset> B)) \\<in> g3ip\""], ["", "(*<*)"], ["", "lemma g3ip_upRules:\nshows \"g3ip \\<subseteq> upRules\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g3ip \\<subseteq> upRules", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. g3ip \\<subseteq> upRules", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. g3ip \\<subseteq> upRules", "fix r"], ["proof (state)\ngoal (1 subgoal):\n 1. g3ip \\<subseteq> upRules", "assume \"r \\<in> g3ip\""], ["proof (state)\nthis:\n  r \\<in> g3ip\n\ngoal (1 subgoal):\n 1. g3ip \\<subseteq> upRules", "then"], ["proof (chain)\npicking this:\n  r \\<in> g3ip", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> g3ip\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> g3ip; r = (a, b)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> upRules", "by (rule g3ip.cases) auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. g3ip \\<subseteq> upRules", "}"], ["proof (state)\nthis:\n  ?r2 \\<in> g3ip \\<Longrightarrow> ?r2 \\<in> upRules\n\ngoal (1 subgoal):\n 1. g3ip \\<subseteq> upRules", "then"], ["proof (chain)\npicking this:\n  ?r2 \\<in> g3ip \\<Longrightarrow> ?r2 \\<in> upRules", "show \"g3ip \\<subseteq> upRules\""], ["proof (prove)\nusing this:\n  ?r2 \\<in> g3ip \\<Longrightarrow> ?r2 \\<in> upRules\n\ngoal (1 subgoal):\n 1. g3ip \\<subseteq> upRules", "by auto"], ["proof (state)\nthis:\n  g3ip \\<subseteq> upRules\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\\noindent As expected, $\\implies{R}{}$ can be shown invertible:\\<close>"], ["", "lemma impRInvert:\nassumes \"(\\<Gamma> \\<Rightarrow>* (A \\<supset> B), n) \\<in> derivable (Ax \\<union> g3ip)*\" and \"B \\<noteq> Em\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> \\<oplus> A \\<Rightarrow>* B, m) \\<in> derivable (Ax \\<union> g3ip)*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> \\<oplus> A \\<Rightarrow>* B, m)\n       \\<in> derivable Ax \\<union> g3ip*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> \\<oplus> A \\<Rightarrow>* B, m)\n       \\<in> derivable Ax \\<union> g3ip*", "have \"\\<forall> r \\<in> (Ax \\<union> g3ip). rightPrincipal r (A \\<supset> B) \\<longrightarrow> \n                           (\\<LM>A\\<RM> \\<Rightarrow>* B) \\<in> set (fst r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>Ax \\<union> g3ip.\n       rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n       ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "proof-  \\<comment> \\<open>Showing that $A \\Rightarrow B$ is a premiss of every rule with $\\implies{A}{B}$ principal\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>Ax \\<union> g3ip.\n       rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n       ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>Ax \\<union> g3ip.\n       rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n       ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "fix r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>Ax \\<union> g3ip.\n       rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n       ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "assume \"r \\<in> (Ax \\<union> g3ip)\""], ["proof (state)\nthis:\n  r \\<in> Ax \\<union> g3ip\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>Ax \\<union> g3ip.\n       rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n       ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<union> g3ip\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>Ax \\<union> g3ip.\n       rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n       ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "assume \"rightPrincipal r (A \\<supset> B)\""], ["proof (state)\nthis:\n  rightPrincipal r (A \\<supset> B)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>Ax \\<union> g3ip.\n       rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n       ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> Ax \\<union> g3ip\n  rightPrincipal r (A \\<supset> B)", "have \"r \\<in> g3ip\""], ["proof (prove)\nusing this:\n  r \\<in> Ax \\<union> g3ip\n  rightPrincipal r (A \\<supset> B)\n\ngoal (1 subgoal):\n 1. r \\<in> g3ip", "(*<*)"], ["proof (prove)\nusing this:\n  r \\<in> Ax \\<union> g3ip\n  rightPrincipal r (A \\<supset> B)\n\ngoal (1 subgoal):\n 1. r \\<in> g3ip", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rightPrincipal r (A \\<supset> B); r \\<in> Ax\\<rbrakk>\n    \\<Longrightarrow> r \\<in> g3ip", "apply (rule rightPrincipal.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rightPrincipal r (A \\<supset> B); r \\<in> Ax\\<rbrakk>\n    \\<Longrightarrow> rightPrincipal ?a1.3 ?a2.3\n 2. \\<And>C F Fs Ps.\n       \\<lbrakk>rightPrincipal r (A \\<supset> B); r \\<in> Ax;\n        ?a1.3 = (Ps, C); ?a2.3 = Compound F Fs;\n        C = ( \\<Empt> \\<Rightarrow>* Compound F Fs)\\<rbrakk>\n       \\<Longrightarrow> r \\<in> g3ip", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ps.\n       \\<lbrakk>rightPrincipal (Ps,  \\<Empt> \\<Rightarrow>* A \\<supset> B)\n                 (A \\<supset> B);\n        (Ps,  \\<Empt> \\<Rightarrow>* A \\<supset> B) \\<in> Ax;\n        r = (Ps,  \\<Empt> \\<Rightarrow>* A \\<supset> B)\\<rbrakk>\n       \\<Longrightarrow> (Ps,  \\<Empt> \\<Rightarrow>* A \\<supset> B)\n                         \\<in> g3ip", "(*>*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ps.\n       \\<lbrakk>rightPrincipal (Ps,  \\<Empt> \\<Rightarrow>* A \\<supset> B)\n                 (A \\<supset> B);\n        (Ps,  \\<Empt> \\<Rightarrow>* A \\<supset> B) \\<in> Ax;\n        r = (Ps,  \\<Empt> \\<Rightarrow>* A \\<supset> B)\\<rbrakk>\n       \\<Longrightarrow> (Ps,  \\<Empt> \\<Rightarrow>* A \\<supset> B)\n                         \\<in> g3ip", "by(*<*) (rule Ax.cases) (*>*) auto  \\<comment> \\<open>If $\\implies{A}{B}$ was principal, then $r \\notin Ax$\\<close>"], ["proof (state)\nthis:\n  r \\<in> g3ip\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>Ax \\<union> g3ip.\n       rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n       ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "from \\<open>rightPrincipal r (A \\<supset> B)\\<close>"], ["proof (chain)\npicking this:\n  rightPrincipal r (A \\<supset> B)", "have \"snd r = (\\<Empt> \\<Rightarrow>* (A \\<supset> B))\""], ["proof (prove)\nusing this:\n  rightPrincipal r (A \\<supset> B)\n\ngoal (1 subgoal):\n 1. snd r = ( \\<Empt> \\<Rightarrow>* A \\<supset> B)", "by(*<*) (rule rightPrincipal.cases)(*>*) auto"], ["proof (state)\nthis:\n  snd r = ( \\<Empt> \\<Rightarrow>* A \\<supset> B)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>Ax \\<union> g3ip.\n       rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n       ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "with \\<open>r \\<in> g3ip\\<close> and \\<open>rightPrincipal r (A \\<supset> B)\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> g3ip\n  rightPrincipal r (A \\<supset> B)\n  snd r = ( \\<Empt> \\<Rightarrow>* A \\<supset> B)", "have \"r = ([\\<LM>A\\<RM> \\<Rightarrow>* B], \\<Empt> \\<Rightarrow>* (A\\<supset>B))\""], ["proof (prove)\nusing this:\n  r \\<in> g3ip\n  rightPrincipal r (A \\<supset> B)\n  snd r = ( \\<Empt> \\<Rightarrow>* A \\<supset> B)\n\ngoal (1 subgoal):\n 1. r =\n    ([ \\<LM> A  \\<RM> \\<Rightarrow>* B],\n      \\<Empt> \\<Rightarrow>* A \\<supset> B)", "(*<*)"], ["proof (prove)\nusing this:\n  r \\<in> g3ip\n  rightPrincipal r (A \\<supset> B)\n  snd r = ( \\<Empt> \\<Rightarrow>* A \\<supset> B)\n\ngoal (1 subgoal):\n 1. r =\n    ([ \\<LM> A  \\<RM> \\<Rightarrow>* B],\n      \\<Empt> \\<Rightarrow>* A \\<supset> B)", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> g3ip; rightPrincipal r (A \\<supset> B);\n        snd r = ( \\<Empt> \\<Rightarrow>* A \\<supset> B); r = (a, b)\\<rbrakk>\n       \\<Longrightarrow> r =\n                         ([ \\<LM> A  \\<RM> \\<Rightarrow>* B],\n                           \\<Empt> \\<Rightarrow>* A \\<supset> B)", "(*>*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> g3ip; rightPrincipal r (A \\<supset> B);\n        snd r = ( \\<Empt> \\<Rightarrow>* A \\<supset> B); r = (a, b)\\<rbrakk>\n       \\<Longrightarrow> r =\n                         ([ \\<LM> A  \\<RM> \\<Rightarrow>* B],\n                           \\<Empt> \\<Rightarrow>* A \\<supset> B)", "by (rule g3ip.cases) auto"], ["proof (state)\nthis:\n  r =\n  ([ \\<LM> A  \\<RM> \\<Rightarrow>* B],\n    \\<Empt> \\<Rightarrow>* A \\<supset> B)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>Ax \\<union> g3ip.\n       rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n       ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "then"], ["proof (chain)\npicking this:\n  r =\n  ([ \\<LM> A  \\<RM> \\<Rightarrow>* B],\n    \\<Empt> \\<Rightarrow>* A \\<supset> B)", "have \"(\\<LM>A\\<RM> \\<Rightarrow>* B) \\<in> set (fst r)\""], ["proof (prove)\nusing this:\n  r =\n  ([ \\<LM> A  \\<RM> \\<Rightarrow>* B],\n    \\<Empt> \\<Rightarrow>* A \\<supset> B)\n\ngoal (1 subgoal):\n 1. ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "by auto"], ["proof (state)\nthis:\n  ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>Ax \\<union> g3ip.\n       rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n       ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?r2 \\<in> Ax \\<union> g3ip;\n   rightPrincipal ?r2 (A \\<supset> B)\\<rbrakk>\n  \\<Longrightarrow> ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst ?r2)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>Ax \\<union> g3ip.\n       rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n       ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?r2 \\<in> Ax \\<union> g3ip;\n   rightPrincipal ?r2 (A \\<supset> B)\\<rbrakk>\n  \\<Longrightarrow> ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst ?r2)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>Ax \\<union> g3ip.\n       rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n       ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "by auto"], ["proof (state)\nthis:\n  \\<forall>r\\<in>Ax \\<union> g3ip.\n     rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n     ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>r\\<in>Ax \\<union> g3ip.\n     rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n     ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> \\<oplus> A \\<Rightarrow>* B, m)\n       \\<in> derivable Ax \\<union> g3ip*", "with assms (*<*)and g3ip_upRules"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<Rightarrow>* A \\<supset> B, n)\n  \\<in> derivable Ax \\<union> g3ip*\n  B \\<noteq> Em\n  g3ip \\<subseteq> upRules\n  \\<forall>r\\<in>Ax \\<union> g3ip.\n     rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n     ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "(*>*)"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<Rightarrow>* A \\<supset> B, n)\n  \\<in> derivable Ax \\<union> g3ip*\n  B \\<noteq> Em\n  g3ip \\<subseteq> upRules\n  \\<forall>r\\<in>Ax \\<union> g3ip.\n     rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n     ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)", "show ?thesis"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* A \\<supset> B, n)\n  \\<in> derivable Ax \\<union> g3ip*\n  B \\<noteq> Em\n  g3ip \\<subseteq> upRules\n  \\<forall>r\\<in>Ax \\<union> g3ip.\n     rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n     ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> \\<oplus> A \\<Rightarrow>* B, m)\n       \\<in> derivable Ax \\<union> g3ip*", "using rightInvertible(*<*)[where R'=\"g3ip\" and R=\"Ax \\<union> g3ip\" and \\<Gamma>=\\<Gamma> and n=n\n                            and \\<Gamma>'=\"\\<LM>A\\<RM>\" and E=B and F=\"imp\" and Fs=\"[A,B]\"]"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* A \\<supset> B, n)\n  \\<in> derivable Ax \\<union> g3ip*\n  B \\<noteq> Em\n  g3ip \\<subseteq> upRules\n  \\<forall>r\\<in>Ax \\<union> g3ip.\n     rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n     ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)\n  \\<lbrakk>g3ip \\<subseteq> upRules \\<and>\n           Ax \\<union> g3ip = Ax \\<union> g3ip;\n   ( \\<Gamma> \\<Rightarrow>* A \\<supset> B, n)\n   \\<in> derivable Ax \\<union> g3ip*;\n   \\<forall>r'\\<in>Ax \\<union> g3ip.\n      rightPrincipal r' (A \\<supset> B) \\<longrightarrow>\n      ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r');\n   B \\<noteq> Em\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m\\<le>n.\n                       ( \\<Gamma> \\<oplus> A \\<Rightarrow>* B, m)\n                       \\<in> derivable Ax \\<union> g3ip*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> \\<oplus> A \\<Rightarrow>* B, m)\n       \\<in> derivable Ax \\<union> g3ip*", "(*>*)"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* A \\<supset> B, n)\n  \\<in> derivable Ax \\<union> g3ip*\n  B \\<noteq> Em\n  g3ip \\<subseteq> upRules\n  \\<forall>r\\<in>Ax \\<union> g3ip.\n     rightPrincipal r (A \\<supset> B) \\<longrightarrow>\n     ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r)\n  \\<lbrakk>g3ip \\<subseteq> upRules \\<and>\n           Ax \\<union> g3ip = Ax \\<union> g3ip;\n   ( \\<Gamma> \\<Rightarrow>* A \\<supset> B, n)\n   \\<in> derivable Ax \\<union> g3ip*;\n   \\<forall>r'\\<in>Ax \\<union> g3ip.\n      rightPrincipal r' (A \\<supset> B) \\<longrightarrow>\n      ( \\<LM> A  \\<RM> \\<Rightarrow>* B) \\<in> set (fst r');\n   B \\<noteq> Em\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m\\<le>n.\n                       ( \\<Gamma> \\<oplus> A \\<Rightarrow>* B, m)\n                       \\<in> derivable Ax \\<union> g3ip*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> \\<oplus> A \\<Rightarrow>* B, m)\n       \\<in> derivable Ax \\<union> g3ip*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> \\<oplus> A \\<Rightarrow>* B, m)\n     \\<in> derivable Ax \\<union> g3ip*\n\ngoal:\nNo subgoals!", "qed"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}