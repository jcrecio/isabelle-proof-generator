{"file_name": "/home/qj213/afp-2021-10-22/thys/SequentInvertibility/NominalSequents.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/SequentInvertibility", "problem_names": ["lemma nprovContain:\nshows \"provRules \\<subseteq> nprovRules\"", "lemma subst_var_list_eqvt[eqvt]:\n  fixes pi::\"var prm\"\n  and   y::\"var list\"\n  shows \"pi\\<bullet>([z;x]y) = [(pi\\<bullet>z);(pi\\<bullet>x)](pi\\<bullet>y)\"", "lemma characteriseSeq:\nshows \"\\<exists> A B. (C :: sequent) = (A \\<Rightarrow>* B)\"", "lemma nonEmptySet:\nshows \"A \\<noteq> [] \\<longrightarrow> (\\<exists> a. a \\<in> set A)\"", "lemma extendID:\nassumes \"extend S (\\<LM> At i xs \\<RM> \\<Rightarrow>* \\<LM> At i xs \\<RM>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>\"", "lemma extendFalsum:\nassumes \"extend S (\\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"ff \\<in># \\<Gamma>\"", "lemma containID:\nassumes a:\"At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>\"\n    and b:\"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* \\<Delta>,0) \\<in> derivable R*\"", "lemma containFalsum:\nassumes a: \"ff \\<in># \\<Gamma>\"\n   and  b: \"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* \\<Delta>,0) \\<in> derivable R*\"", "lemma characteriseAx:\nshows \"r \\<in> Ax \\<Longrightarrow> r = ([],\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>) \\<or> (\\<exists> i xs. r = ([], \\<LM> At i xs\\<RM> \\<Rightarrow>* \\<LM> At i xs\\<RM>))\"", "lemma characteriseLast:\nassumes \"(C,m+1) \\<in> derivable R\"\nshows \"\\<exists> Ps. Ps \\<noteq> [] \\<and>\n             (Ps,C) \\<in> R \\<and> \n             (\\<forall> p \\<in> set Ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R)\"", "lemma propRuleCharacterise:\nassumes \"(Ps,C) \\<in> upRules\"\nshows \"\\<exists> F Fs. C = (\\<Empt> \\<Rightarrow>* \\<LM>Cpd0 F Fs\\<RM>) \\<or> C = (\\<LM>Cpd0 F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\"", "lemma provRuleCharacterise:\nassumes \"(Ps,C) \\<in> provRules\"\nshows \"\\<exists> F x A. (C = (\\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A \\<RM>) \\<or> C = (\\<LM> F \\<nabla> [x].A \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and> x \\<sharp> set_of_prem (Ps - A)\"", "lemma nprovRuleCharacterise:\nassumes \"(Ps,C) \\<in> nprovRules\"\nshows \"\\<exists> F x A. C = (\\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A \\<RM>) \\<or> C = (\\<LM> F \\<nabla> [x].A \\<RM> \\<Rightarrow>* \\<Empt>)\"", "lemma extendEmpty:\nshows \"extend (\\<Empt> \\<Rightarrow>* \\<Empt>) C = C\"", "lemma extendContain:\nassumes \"r = (ps,c)\"\n    and \"(Ps,C) = extendRule S r\"\n    and \"p \\<in> set ps\"\nshows \"extend S p \\<in> set Ps\"", "lemma finSeqSet:\nfixes S :: \"sequent\"\nshows \"finite (set_of_seq S)\"", "lemma finPremSet:\nfixes Ps :: \"sequent list\"\nshows \"finite (set_of_prem Ps)\"", "lemma finSupp:\nfixes A :: \"form\" and As :: \"form_list\"\nshows \"finite ((supp A) :: var set)\" and \"finite ((supp As) :: var set)\"", "lemma getFresh:\nfixes x :: \"var\" and A :: \"form\" and S :: \"sequent\" and Ps :: \"sequent list\"\nshows \"\\<exists> (y :: var). y \\<sharp> x \\<and> y \\<sharp> A \\<and> y \\<sharp> set_of_seq S \\<and> y \\<sharp> set_of_prem Ps\"", "lemma switchAux:\nfixes Xs :: \"var list\"\nassumes \"y \\<sharp> Xs\"\nshows \"[y;x]Xs = [(y,x)]\\<bullet>Xs\"", "lemma switch:\nfixes A :: \"form\" and As :: \"form_list\"\nshows \"y \\<sharp> A \\<Longrightarrow> [y,x]A = [(y,x)]\\<bullet>A\" and \"y \\<sharp> As \\<Longrightarrow> [y,x]As = [(y,x)]\\<bullet>As\"", "lemma formSubst:\nshows \"y \\<sharp> x \\<and> y \\<sharp> A \\<Longrightarrow> F \\<nabla> [x].A = F \\<nabla> [y].([y,x]A)\"", "lemma extend_for_any_seq:\nfixes S :: \"sequent\"\nassumes rules: \"R1 \\<subseteq> upRules \\<and> R2 \\<subseteq> nprovRules \\<and> R3 \\<subseteq> provRules\"\n    and rules2: \"R = Ax \\<union> R1 \\<union> R2 \\<union> R3\"\n    and rin: \"r \\<in> R\"\nshows \"extendRule S r \\<in> R*\"", "lemma ruleSet:\nassumes \"R1 \\<subseteq> upRules\" and \"R2 \\<subseteq> nprovRules\" and \"R3 \\<subseteq> provRules\"\n    and \"R = Ax \\<union> R1 \\<union> R2 \\<union> R3\"\n    and \"(Ps,C) \\<in> R*\"\nshows \"\\<exists> S r. extendRule S r = (Ps,C) \\<and> (r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax)\"", "lemma nonPrincipalInvertRight:\nassumes \"R1 \\<subseteq> upRules\" and \"R2 \\<subseteq> nprovRules\" and \"R3 \\<subseteq> provRules\"\n    and \"R = Ax \\<union> R1 \\<union> R2 \\<union> R3\" and \"r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\" and \"r = (ps,c)\"\n    and IH: \"\\<forall>m<n. \\<forall>\\<Gamma> \\<Delta>. ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, m) \\<in> derivable R* \\<longrightarrow>\n              (\\<forall>r' \\<in> R. rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')) \\<longrightarrow>\n              (\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>') \\<longrightarrow>\n              (\\<exists>m'\\<le>m. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m') \\<in> derivable R*)\"\n    and a': \"(\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A,n) \\<in> derivable R*\" \n    and b': \"\\<forall> r' \\<in> R. rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\"\n    and c': \"\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\"\n    and np: \"\\<not> rightPrincipal r (F \\<nabla> [x].A)\"\n    and ext: \"extendRule S r = (Ps,\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\"\n    and num: \"n = n' + 1\"\n    and all: \"\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\"\n    and nonempty: \"Ps \\<noteq> []\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\"", "lemma nonPrincipalInvertLeft:\nassumes \"R1 \\<subseteq> upRules\" and \"R2 \\<subseteq> nprovRules\" and \"R3 \\<subseteq> provRules\"\n    and \"R = Ax \\<union> R1 \\<union> R2 \\<union> R3\" and \"r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\" and \"r = (ps,c)\"\n    and IH: \"\\<forall>m<n. \\<forall>\\<Gamma> \\<Delta>. ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, m) \\<in> derivable R* \\<longrightarrow>\n              (\\<forall>r' \\<in> R. leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')) \\<longrightarrow>\n              (\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>') \\<longrightarrow>\n              (\\<exists>m'\\<le>m. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m') \\<in> derivable R*)\"\n    and a': \"(\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>,n) \\<in> derivable R*\" \n    and b': \"\\<forall> r' \\<in> R. leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\"\n    and c': \"\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\"\n    and np: \"\\<not> leftPrincipal r (F \\<nabla> [x].A)\"\n    and ext: \"extendRule S r = (Ps,\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\"\n    and num: \"n = n' + 1\"\n    and all: \"\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\"\n    and nonempty: \"Ps \\<noteq> []\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\"", "lemma rightInvert:\nfixes \\<Gamma> \\<Delta> :: \"form multiset\"\nassumes rules: \"R1 \\<subseteq> upRules \\<and> R2 \\<subseteq> nprovRules \\<and> R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\"\n    and   a: \"(\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A,n) \\<in> derivable R*\"\n    and   b: \"\\<forall> r' \\<in> R. rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\"\n    and   c: \"\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> +\\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\"", "lemma leftInvert:\nfixes \\<Gamma> \\<Delta> :: \"form multiset\"\nassumes rules: \"R1 \\<subseteq> upRules \\<and> R2 \\<subseteq> nprovRules \\<and> R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\"\n    and   a: \"(\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>,n) \\<in> derivable R*\"\n    and   b: \"\\<forall> r' \\<in> R. leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\"\n    and   c: \"\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> +\\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], "translations": [["", "lemma nprovContain:\nshows \"provRules \\<subseteq> nprovRules\""], ["proof (prove)\ngoal (1 subgoal):\n 1. provRules \\<subseteq> nprovRules", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. provRules \\<subseteq> nprovRules", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. provRules \\<subseteq> nprovRules", "fix ps c"], ["proof (state)\ngoal (1 subgoal):\n 1. provRules \\<subseteq> nprovRules", "assume \"(ps,c) \\<in> provRules\""], ["proof (state)\nthis:\n  (ps, c) \\<in> provRules\n\ngoal (1 subgoal):\n 1. provRules \\<subseteq> nprovRules", "then"], ["proof (chain)\npicking this:\n  (ps, c) \\<in> provRules", "have \"(ps,c) \\<in> nprovRules\""], ["proof (prove)\nusing this:\n  (ps, c) \\<in> provRules\n\ngoal (1 subgoal):\n 1. (ps, c) \\<in> nprovRules", "by (cases) auto"], ["proof (state)\nthis:\n  (ps, c) \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. provRules \\<subseteq> nprovRules", "}"], ["proof (state)\nthis:\n  (?ps2, ?c2) \\<in> provRules \\<Longrightarrow> (?ps2, ?c2) \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. provRules \\<subseteq> nprovRules", "then"], ["proof (chain)\npicking this:\n  (?ps2, ?c2) \\<in> provRules \\<Longrightarrow> (?ps2, ?c2) \\<in> nprovRules", "show ?thesis"], ["proof (prove)\nusing this:\n  (?ps2, ?c2) \\<in> provRules \\<Longrightarrow> (?ps2, ?c2) \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. provRules \\<subseteq> nprovRules", "by auto"], ["proof (state)\nthis:\n  provRules \\<subseteq> nprovRules\n\ngoal:\nNo subgoals!", "qed"], ["", "(*<*)"], ["", "primrec subst :: \"var \\<Rightarrow> var \\<Rightarrow> var list \\<Rightarrow> var list\" (\"[_;_]_\" [100,100,100] 100) where\n  Empt:\"[z;y][] = []\"\n| NEmpt:\"[z;y](x#ys) = (if x=y then (z#([z;y]ys)) else (x#([z;y]ys)))\""], ["", "lemma subst_var_list_eqvt[eqvt]:\n  fixes pi::\"var prm\"\n  and   y::\"var list\"\n  shows \"pi\\<bullet>([z;x]y) = [(pi\\<bullet>z);(pi\\<bullet>x)](pi\\<bullet>y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pi \\<bullet> [z;x]y =\n    [(pi \\<bullet> z);(pi \\<bullet> x)](pi \\<bullet> y)", "by (induct y) (auto simp add: eqvts)"], ["", "(*>*)"], ["", "text\\<open>\n\\noindent Substitution is defined in the usual way:\\<close>"], ["", "nominal_primrec \n    subst_form  :: \"var \\<Rightarrow> var \\<Rightarrow> form \\<Rightarrow> form\" (\"[_,_]_\"(*<*) [100,100,100] 100(*>*))\nand subst_forms :: \"var \\<Rightarrow> var \\<Rightarrow> form_list \\<Rightarrow> form_list\" (\"[_,_]_\"(*<*) [100,100,100] 100(*>*))\nwhere\n   \"[z,y](At P xs) = At P ([z;y]xs)\"\n|  \"x\\<sharp>(z,y) \\<Longrightarrow> [z,y](F \\<nabla> [x].A) = F \\<nabla> [x].([z,y]A)\"\n|  \"[z,y](Cpd0 F Fs) = Cpd0 F ([z,y]Fs)\"\n|  \"[z,y]ff = ff\"\n|  \"[z,y]FNil = FNil\"\n|  \"[z,y](FCons f Fs) = FCons ([z,y]f) ([z,y]Fs)\""], ["proof (prove)\ngoal (21 subgoals):\n 1. finite (supp (\\<lambda>P xs. At P ([z;y]xs)))\n 2. finite (supp (\\<lambda>F Fs. Cpd0 F))\n 3. finite (supp (\\<lambda>F x A. Cpd1 F x))\n 4. finite (supp ff)\n 5. finite (supp FNil)\n 6. finite (supp (\\<lambda>f Fs. FCons))\n 7. finite (supp ())\n 8. \\<And>x1 x2. True\n 9. \\<And>x1 x2 y1. True \\<Longrightarrow> True\n 10. \\<And>x1 x2 x3 y1. True \\<Longrightarrow> True\nA total of 21 subgoals...", "(*<*)"], ["proof (prove)\ngoal (21 subgoals):\n 1. finite (supp (\\<lambda>P xs. At P ([z;y]xs)))\n 2. finite (supp (\\<lambda>F Fs. Cpd0 F))\n 3. finite (supp (\\<lambda>F x A. Cpd1 F x))\n 4. finite (supp ff)\n 5. finite (supp FNil)\n 6. finite (supp (\\<lambda>f Fs. FCons))\n 7. finite (supp ())\n 8. \\<And>x1 x2. True\n 9. \\<And>x1 x2 y1. True \\<Longrightarrow> True\n 10. \\<And>x1 x2 x3 y1. True \\<Longrightarrow> True\nA total of 21 subgoals...", "apply(finite_guess)+"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>x1 x2. True\n 2. \\<And>x1 x2 y1. True \\<Longrightarrow> True\n 3. \\<And>x1 x2 x3 y1. True \\<Longrightarrow> True\n 4. True\n 5. True\n 6. \\<And>x1 x2 y1 y2. \\<lbrakk>True; True\\<rbrakk> \\<Longrightarrow> True\n 7. \\<And>x1 x2 x3 y1.\n       \\<lbrakk>x2 \\<sharp> (\\<lambda>F x A. Cpd1 F x); x2 \\<sharp> x1;\n        x2 \\<sharp> (); finite (supp y1); True\\<rbrakk>\n       \\<Longrightarrow> x2 \\<sharp> x1 \\<nabla> [x2].y1\n 8. \\<And>F x A.\n       x \\<sharp> (z, y) \\<Longrightarrow>\n       x \\<sharp> (\\<lambda>P xs. At P ([z;y]xs))\n 9. \\<And>F x A.\n       x \\<sharp> (z, y) \\<Longrightarrow>\n       x \\<sharp> (\\<lambda>F Fs. Cpd0 F)\n 10. \\<And>F x A.\n        x \\<sharp> (z, y) \\<Longrightarrow>\n        x \\<sharp> (\\<lambda>F x A. Cpd1 F x)\nA total of 14 subgoals...", "apply(rule TrueI)+"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 x3 y1.\n       \\<lbrakk>x2 \\<sharp> (\\<lambda>F x A. Cpd1 F x); x2 \\<sharp> x1;\n        x2 \\<sharp> (); finite (supp y1); True\\<rbrakk>\n       \\<Longrightarrow> x2 \\<sharp> x1 \\<nabla> [x2].y1\n 2. \\<And>F x A.\n       x \\<sharp> (z, y) \\<Longrightarrow>\n       x \\<sharp> (\\<lambda>P xs. At P ([z;y]xs))\n 3. \\<And>F x A.\n       x \\<sharp> (z, y) \\<Longrightarrow>\n       x \\<sharp> (\\<lambda>F Fs. Cpd0 F)\n 4. \\<And>F x A.\n       x \\<sharp> (z, y) \\<Longrightarrow>\n       x \\<sharp> (\\<lambda>F x A. Cpd1 F x)\n 5. \\<And>F x A. x \\<sharp> (z, y) \\<Longrightarrow> x \\<sharp> ff\n 6. \\<And>F x A. x \\<sharp> (z, y) \\<Longrightarrow> x \\<sharp> FNil\n 7. \\<And>F x A.\n       x \\<sharp> (z, y) \\<Longrightarrow> x \\<sharp> (\\<lambda>f Fs. FCons)\n 8. \\<And>F x A. x \\<sharp> (z, y) \\<Longrightarrow> x \\<sharp> F", "apply(simp add: abs_fresh)+"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x.\n       x \\<sharp> (z, y) \\<Longrightarrow>\n       x \\<sharp> (\\<lambda>P xs. At P ([z;y]xs))\n 2. \\<And>F x A.\n       x \\<sharp> (z, y) \\<Longrightarrow>\n       x \\<sharp> (\\<lambda>F Fs. Cpd0 F)\n 3. \\<And>F x A.\n       x \\<sharp> (z, y) \\<Longrightarrow>\n       x \\<sharp> (\\<lambda>F x A. Cpd1 F x)\n 4. \\<And>F x A. x \\<sharp> (z, y) \\<Longrightarrow> x \\<sharp> ff\n 5. \\<And>F x A. x \\<sharp> (z, y) \\<Longrightarrow> x \\<sharp> FNil\n 6. \\<And>F x A.\n       x \\<sharp> (z, y) \\<Longrightarrow> x \\<sharp> (\\<lambda>f Fs. FCons)\n 7. \\<And>F x A. x \\<sharp> (z, y) \\<Longrightarrow> x \\<sharp> F", "apply(fresh_guess add: fresh_string)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text\\<open>\\noindent Substitution is extended to multisets in the obvious way.\n\nTo formalise the condition ``no specific substitutions'', an inductive predicate is introduced.  If some formula in the multiset $\\Gamma$ is a non-trivial substitution, then \\texttt{multSubst} $\\Gamma$:\n\\<close>"], ["", "definition multSubst :: \"form multiset \\<Rightarrow> bool\" where\nmultSubst_def: \"multSubst \\<Gamma> \\<equiv> (\\<exists> A \\<in> (set_mset \\<Gamma>). \\<exists> x y B. [y,x]B = A \\<and> y\\<noteq>x)\""], ["", "text\\<open>\n\\noindent The notation $[z;y]xs$ stands for substitution of a variable in a variable list.  The details are simple, and so are not shown.\n\nExtending the rule sets with passive parts depends upon which kind of active part is being extended.  The active parts with freshness contexts have additional constraints upon the multisets which are added:\n\\<close>"], ["", "(* We need to be careful now about how to extend a rule, since we have binding *)"], ["", "inductive_set extRules :: \"rule set \\<Rightarrow> rule set\"   (\" _*\" )\n   for R :: \"rule set\"\n   where\n  id(*<*)[intro](*>*):   \"\\<lbrakk> r \\<in> R ; r \\<in> Ax \\<rbrakk> \\<Longrightarrow> extendRule S r \\<in> R*\"\n| sc(*<*)[intro](*>*):   \"\\<lbrakk> r \\<in> R ; r \\<in> upRules \\<rbrakk> \\<Longrightarrow> extendRule S r \\<in> R*\"\n| np(*<*)[intro](*>*):   \"\\<lbrakk> r \\<in> R ; r \\<in> nprovRules \\<rbrakk> \\<Longrightarrow> extendRule S r \\<in> R*\"\n| p(*<*)[intro](*>*):     \"\\<lbrakk> (ps,c) \\<in> R ; (ps,c) \\<in> provRules ; mset c = \\<LM> F \\<nabla> [x].A \\<RM> ; x \\<sharp> set_of_seq S \\<rbrakk>\n                          \\<Longrightarrow> extendRule S (ps,c) \\<in> R*\""], ["", "(*<*)\n(* A formulation of what it means to be a principal formula for a rule.  Note that we have to build up from\n   single conclusion rules.   *)"], ["", "inductive leftPrincipal :: \"rule \\<Rightarrow> form \\<Rightarrow> bool\"\n  where\n  sc[intro]: \"\\<lbrakk> C = (\\<LM>A\\<RM> \\<Rightarrow>* \\<Empt>) ; A \\<noteq> ff \\<rbrakk>  \\<Longrightarrow> \n                   leftPrincipal (Ps,C) A\""], ["", "inductive rightPrincipal :: \"rule \\<Rightarrow> form \\<Rightarrow> bool\"\n  where\n  sc[intro]: \"C = (\\<Empt> \\<Rightarrow>* \\<LM>A\\<RM>) \\<Longrightarrow> rightPrincipal (Ps,C) A\""], ["", "(* What it means to be a derivable sequent.  Can have this as a predicate or as a set.\n   The two formation rules say that the supplied premisses are derivable, and the second says\n   that if all the premisses of some rule are derivable, then so is the conclusion. *)"], ["", "inductive_set derivable :: \"rule set \\<Rightarrow> deriv set\"\n  for R :: \"rule set\"\n  where\n   base[intro]: \"\\<lbrakk>([],C) \\<in> R\\<rbrakk> \\<Longrightarrow> (C,0) \\<in> derivable R\"\n|  step[intro]: \"\\<lbrakk> r \\<in> R ; (fst r)\\<noteq>[] ; \\<forall> p \\<in> set (fst r). \\<exists> n \\<le> m. (p,n) \\<in> derivable R \\<rbrakk> \n                       \\<Longrightarrow> (snd r,m + 1) \\<in> derivable R\""], ["", "(* Characterisation of a sequent *)"], ["", "lemma characteriseSeq:\nshows \"\\<exists> A B. (C :: sequent) = (A \\<Rightarrow>* B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A B. C = ( A \\<Rightarrow>* B)", "apply (rule_tac x=\"antec C\" in exI, rule_tac x=\"succ C\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. C = ( antec C \\<Rightarrow>* succ C)", "by (cases C) (auto)"], ["", "(* Helper function for later *)"], ["", "lemma nonEmptySet:\nshows \"A \\<noteq> [] \\<longrightarrow> (\\<exists> a. a \\<in> set A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> [] \\<longrightarrow> (\\<exists>a. a \\<in> set A)", "by (auto simp add:neq_Nil_conv)"], ["", "(* Lemma which says that if we have extended an identity rule, then the propositional variable is\n   contained in the extended multisets *)"], ["", "lemma extendID:\nassumes \"extend S (\\<LM> At i xs \\<RM> \\<Rightarrow>* \\<LM> At i xs \\<RM>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>", "using assms"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n    At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>", "from assms"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"\\<exists> \\<Gamma>' \\<Delta>'. \\<Gamma> = \\<Gamma>' \\<oplus> At i xs \\<and> \\<Delta> = \\<Delta>' \\<oplus> At i xs\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>' \\<Delta>'.\n       \\<Gamma> = \\<Gamma>' \\<oplus> At i xs \\<and>\n       \\<Delta> = \\<Delta>' \\<oplus> At i xs", "using extend_def[where forms=S and seq=\"\\<LM> At i xs \\<RM> \\<Rightarrow>* \\<LM> At i xs \\<RM>\"]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  extend S\n   ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<equiv>\n   antec S +\n   antec\n    ( \\<LM> At i\n             xs  \\<RM> \\<Rightarrow>* \\<LM> At i\n       xs  \\<RM>) \\<Rightarrow>* succ S +\n                                 succ\n                                  ( \\<LM> At i\n     xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>' \\<Delta>'.\n       \\<Gamma> = \\<Gamma>' \\<oplus> At i xs \\<and>\n       \\<Delta> = \\<Delta>' \\<oplus> At i xs", "by (rule_tac x=\"antec S\" in exI,rule_tac x=\"succ S\" in exI) auto"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>' \\<Delta>'.\n     \\<Gamma> = \\<Gamma>' \\<oplus> At i xs \\<and>\n     \\<Delta> = \\<Delta>' \\<oplus> At i xs\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n    At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Gamma>' \\<Delta>'.\n     \\<Gamma> = \\<Gamma>' \\<oplus> At i xs \\<and>\n     \\<Delta> = \\<Delta>' \\<oplus> At i xs", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>\\<Gamma>' \\<Delta>'.\n     \\<Gamma> = \\<Gamma>' \\<oplus> At i xs \\<and>\n     \\<Delta> = \\<Delta>' \\<oplus> At i xs\n\ngoal (1 subgoal):\n 1. At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>", "by auto"], ["proof (state)\nthis:\n  At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extendFalsum:\nassumes \"extend S (\\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"ff \\<in># \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "from assms"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"\\<exists> \\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff", "using extend_def[where forms=S and seq=\"\\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>\"]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<equiv>\n   antec S +\n   antec\n    ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Rightarrow>* succ S +\n                       succ ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff", "by (rule_tac x=\"antec S\" in exI) auto"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Lemma that says if a propositional variable is in both the antecedent and succedent of a sequent,\n   then it is derivable from idscRules *)"], ["", "lemma containID:\nassumes a:\"At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>\"\n    and b:\"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* \\<Delta>,0) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "from a"], ["proof (chain)\npicking this:\n  At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>", "have \"\\<Gamma> = \\<Gamma> \\<ominus> At i xs \\<oplus> At i xs \\<and> \\<Delta> = \\<Delta> \\<ominus> At i xs \\<oplus> At i xs\""], ["proof (prove)\nusing this:\n  At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<Gamma> = \\<Gamma> \\<ominus> At i xs \\<oplus> At i xs \\<and>\n    \\<Delta> = \\<Delta> \\<ominus> At i xs \\<oplus> At i xs", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i xs \\<oplus> At i xs \\<and>\n  \\<Delta> = \\<Delta> \\<ominus> At i xs \\<oplus> At i xs\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i xs \\<oplus> At i xs \\<and>\n  \\<Delta> = \\<Delta> \\<ominus> At i xs \\<oplus> At i xs", "have \"extend ((\\<Gamma> \\<ominus> At i xs) \\<Rightarrow>* (\\<Delta> \\<ominus> At i xs)) (\\<LM> At i xs \\<RM> \\<Rightarrow>* \\<LM> At i xs \\<RM>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i xs \\<oplus> At i xs \\<and>\n  \\<Delta> = \\<Delta> \\<ominus> At i xs \\<oplus> At i xs\n\ngoal (1 subgoal):\n 1. extend\n     ( \\<Gamma> \\<ominus> At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs)\n     ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "using extend_def[where forms=\"\\<Gamma> \\<ominus> At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs\" and seq=\"\\<LM>At i xs\\<RM> \\<Rightarrow>* \\<LM>At i xs\\<RM>\"]"], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i xs \\<oplus> At i xs \\<and>\n  \\<Delta> = \\<Delta> \\<ominus> At i xs \\<oplus> At i xs\n  extend\n   ( \\<Gamma> \\<ominus> At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs)\n   ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<equiv>\n   antec\n    ( \\<Gamma> \\<ominus>\n      At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs) +\n   antec\n    ( \\<LM> At i\n             xs  \\<RM> \\<Rightarrow>* \\<LM> At i\n       xs  \\<RM>) \\<Rightarrow>* succ\n                                  ( \\<Gamma> \\<ominus>\n                                    At i\n                                     xs \\<Rightarrow>* \\<Delta> \\<ominus>\n                 At i xs) +\n                                 succ\n                                  ( \\<LM> At i\n     xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)\n\ngoal (1 subgoal):\n 1. extend\n     ( \\<Gamma> \\<ominus> At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs)\n     ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "by auto"], ["proof (state)\nthis:\n  extend\n   ( \\<Gamma> \\<ominus> At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs)\n   ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  extend\n   ( \\<Gamma> \\<ominus> At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs)\n   ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "have \"([],\\<LM> At i xs \\<RM> \\<Rightarrow>* \\<LM> At i xs \\<RM>) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<in> R", "using b"], ["proof (prove)\nusing this:\n  Ax \\<subseteq> R\n\ngoal (1 subgoal):\n 1. ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<in> R", "by auto"], ["proof (state)\nthis:\n  ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<in> R\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  extend\n   ( \\<Gamma> \\<ominus> At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs)\n   ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<in> R", "have \"([],\\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> extRules R\""], ["proof (prove)\nusing this:\n  extend\n   ( \\<Gamma> \\<ominus> At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs)\n   ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<in> R\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in>  R*", "using extRules.id[where R=R and r=\"([],  \\<LM>At i xs\\<RM> \\<Rightarrow>* \\<LM>At i xs\\<RM>)\" and S=\"\\<Gamma> \\<ominus> At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs\"] \n       and extendRule_def[where forms=\"\\<Gamma> \\<ominus> At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs\" and R=\"([],  \\<LM>At i xs\\<RM> \\<Rightarrow>* \\<LM>At i xs\\<RM>)\"]"], ["proof (prove)\nusing this:\n  extend\n   ( \\<Gamma> \\<ominus> At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs)\n   ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<in> R\n  \\<lbrakk>([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)\n           \\<in> R;\n   case ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) of\n   (x, xa) \\<Rightarrow> (x, xa) \\<in> Ax\\<rbrakk>\n  \\<Longrightarrow> extendRule\n                     ( \\<Gamma> \\<ominus>\n                       At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs)\n                     ([],\n                       \\<LM> At i\n                              xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)\n                    \\<in>  R*\n  extendRule\n   ( \\<Gamma> \\<ominus> At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs)\n   ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<equiv>\n  (map (extend\n         ( \\<Gamma> \\<ominus>\n           At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs))\n    (fst ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)),\n   extend\n    ( \\<Gamma> \\<ominus> At i xs \\<Rightarrow>* \\<Delta> \\<ominus> At i xs)\n    (snd ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)))\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in>  R*", "by auto"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in>  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in>  R*", "show ?thesis"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in>  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "using derivable.base[where R=\"R*\" and C=\"\\<Gamma> \\<Rightarrow>* \\<Delta>\"]"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in>  R*\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in>  R* \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma containFalsum:\nassumes a: \"ff \\<in># \\<Gamma>\"\n   and  b: \"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* \\<Delta>,0) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "from a"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma>", "have \"\\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff", "have \"extend (\\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>) (\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n     ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "using extend_def[where forms=\"\\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>\" and seq=\"\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>\"]"], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<equiv>\n   antec ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>) +\n   antec\n    ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Rightarrow>* succ\n                        ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>) +\n                       succ ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n     ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "by auto"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "have \"([],\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R", "using b"], ["proof (prove)\nusing this:\n  Ax \\<subseteq> R\n\ngoal (1 subgoal):\n 1. ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R", "by auto"], ["proof (state)\nthis:\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R", "have \"([],\\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\""], ["proof (prove)\nusing this:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in>  R*", "using extRules.id[where R=R and r=\"([],  \\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\" and S=\"\\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>\"]\n       and extendRule_def[where forms=\"\\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>\" and R=\"([],  \\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\"]"], ["proof (prove)\nusing this:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R\n  \\<lbrakk>([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R;\n   case ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) of\n   (x, xa) \\<Rightarrow> (x, xa) \\<in> Ax\\<rbrakk>\n  \\<Longrightarrow> extendRule\n                     ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n                     ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n                    \\<in>  R*\n  extendRule ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<equiv>\n  (map (extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>))\n    (fst ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)),\n   extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n    (snd ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)))\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in>  R*", "by auto"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in>  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in>  R*", "show ?thesis"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in>  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "using derivable.base[where R=\"R*\" and C=\"\\<Gamma> \\<Rightarrow>* \\<Delta>\"]"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in>  R*\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in>  R* \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable  R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Lemma which says that if r is an identity rule, then r is of the form\n   ([], P \\<Rightarrow>* P) *)"], ["", "lemma characteriseAx:\nshows \"r \\<in> Ax \\<Longrightarrow> r = ([],\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>) \\<or> (\\<exists> i xs. r = ([], \\<LM> At i xs\\<RM> \\<Rightarrow>* \\<LM> At i xs\\<RM>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<Longrightarrow>\n    r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n    (\\<exists>i xs.\n        r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>))", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> Ax; r = (a, b)\\<rbrakk>\n       \\<Longrightarrow> r =\n                         ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n                         (\\<exists>i xs.\n                             r =\n                             ([],\n                               \\<LM> At i\nxs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>))", "by (rule Ax.cases) auto"], ["", "(* A lemma about the last rule used in a derivation, i.e. that one exists *)"], ["", "lemma characteriseLast:\nassumes \"(C,m+1) \\<in> derivable R\"\nshows \"\\<exists> Ps. Ps \\<noteq> [] \\<and>\n             (Ps,C) \\<in> R \\<and> \n             (\\<forall> p \\<in> set Ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Ps.\n       Ps \\<noteq> [] \\<and>\n       (Ps, C) \\<in> R \\<and>\n       (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "using assms"], ["proof (prove)\nusing this:\n  (C, m + 1) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>Ps.\n       Ps \\<noteq> [] \\<and>\n       (Ps, C) \\<in> R \\<and>\n       (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>m + 1 = 0; ([], C) \\<in> R\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Ps.\n                         Ps \\<noteq> [] \\<and>\n                         (Ps, C) \\<in> R \\<and>\n                         (\\<forall>p\\<in>set Ps.\n                             \\<exists>n\\<le>m. (p, n) \\<in> derivable R)\n 2. \\<And>r ma.\n       \\<lbrakk>C = snd r; m + 1 = ma + 1; r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           \\<exists>n\\<le>ma. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ps.\n                            Ps \\<noteq> [] \\<and>\n                            (Ps, C) \\<in> R \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "case base"], ["proof (state)\nthis:\n  m + 1 = 0\n  ([], C) \\<in> R\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m + 1 = 0; ([], C) \\<in> R\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Ps.\n                         Ps \\<noteq> [] \\<and>\n                         (Ps, C) \\<in> R \\<and>\n                         (\\<forall>p\\<in>set Ps.\n                             \\<exists>n\\<le>m. (p, n) \\<in> derivable R)\n 2. \\<And>r ma.\n       \\<lbrakk>C = snd r; m + 1 = ma + 1; r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           \\<exists>n\\<le>ma. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ps.\n                            Ps \\<noteq> [] \\<and>\n                            (Ps, C) \\<in> R \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "then"], ["proof (chain)\npicking this:\n  m + 1 = 0\n  ([], C) \\<in> R", "show \"\\<exists> Ps. Ps \\<noteq> [] \\<and>\n    (Ps,C) \\<in> R \\<and> \n    (\\<forall> p \\<in> set Ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R)\""], ["proof (prove)\nusing this:\n  m + 1 = 0\n  ([], C) \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>Ps.\n       Ps \\<noteq> [] \\<and>\n       (Ps, C) \\<in> R \\<and>\n       (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "using assms"], ["proof (prove)\nusing this:\n  m + 1 = 0\n  ([], C) \\<in> R\n  (C, m + 1) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>Ps.\n       Ps \\<noteq> [] \\<and>\n       (Ps, C) \\<in> R \\<and>\n       (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "by simp"], ["proof (state)\nthis:\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps, C) \\<in> R \\<and>\n     (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R)\n\ngoal (1 subgoal):\n 1. \\<And>r ma.\n       \\<lbrakk>C = snd r; m + 1 = ma + 1; r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           \\<exists>n\\<le>ma. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ps.\n                            Ps \\<noteq> [] \\<and>\n                            (Ps, C) \\<in> R \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r ma.\n       \\<lbrakk>C = snd r; m + 1 = ma + 1; r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           \\<exists>n\\<le>ma. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ps.\n                            Ps \\<noteq> [] \\<and>\n                            (Ps, C) \\<in> R \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "case (step r n)"], ["proof (state)\nthis:\n  C = snd r\n  m + 1 = n + 1\n  r \\<in> R\n  fst r \\<noteq> []\n  \\<forall>p\\<in>set (fst r). \\<exists>na\\<le>n. (p, na) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r ma.\n       \\<lbrakk>C = snd r; m + 1 = ma + 1; r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           \\<exists>n\\<le>ma. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ps.\n                            Ps \\<noteq> [] \\<and>\n                            (Ps, C) \\<in> R \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "then"], ["proof (chain)\npicking this:\n  C = snd r\n  m + 1 = n + 1\n  r \\<in> R\n  fst r \\<noteq> []\n  \\<forall>p\\<in>set (fst r). \\<exists>na\\<le>n. (p, na) \\<in> derivable R", "obtain Ps where \"r = (Ps,C)\" and \"m=n\""], ["proof (prove)\nusing this:\n  C = snd r\n  m + 1 = n + 1\n  r \\<in> R\n  fst r \\<noteq> []\n  \\<forall>p\\<in>set (fst r). \\<exists>na\\<le>n. (p, na) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>r = (Ps, C); m = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) (auto)"], ["proof (state)\nthis:\n  r = (Ps, C)\n  m = n\n\ngoal (1 subgoal):\n 1. \\<And>r ma.\n       \\<lbrakk>C = snd r; m + 1 = ma + 1; r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           \\<exists>n\\<le>ma. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ps.\n                            Ps \\<noteq> [] \\<and>\n                            (Ps, C) \\<in> R \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "then"], ["proof (chain)\npicking this:\n  r = (Ps, C)\n  m = n", "have \"fst r = Ps\" and \"snd r = C\""], ["proof (prove)\nusing this:\n  r = (Ps, C)\n  m = n\n\ngoal (1 subgoal):\n 1. fst r = Ps &&& snd r = C", "by auto"], ["proof (state)\nthis:\n  fst r = Ps\n  snd r = C\n\ngoal (1 subgoal):\n 1. \\<And>r ma.\n       \\<lbrakk>C = snd r; m + 1 = ma + 1; r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           \\<exists>n\\<le>ma. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ps.\n                            Ps \\<noteq> [] \\<and>\n                            (Ps, C) \\<in> R \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "then"], ["proof (chain)\npicking this:\n  fst r = Ps\n  snd r = C", "show \"\\<exists> Ps. Ps \\<noteq> [] \\<and>\n    (Ps,C) \\<in> R \\<and> \n    (\\<forall> p \\<in> set Ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R)\""], ["proof (prove)\nusing this:\n  fst r = Ps\n  snd r = C\n\ngoal (1 subgoal):\n 1. \\<exists>Ps.\n       Ps \\<noteq> [] \\<and>\n       (Ps, C) \\<in> R \\<and>\n       (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "using \\<open>r \\<in> R\\<close> and \\<open>m=n\\<close> and step(4,5)"], ["proof (prove)\nusing this:\n  fst r = Ps\n  snd r = C\n  r \\<in> R\n  m = n\n  fst r \\<noteq> []\n  \\<forall>p\\<in>set (fst r). \\<exists>na\\<le>n. (p, na) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>Ps.\n       Ps \\<noteq> [] \\<and>\n       (Ps, C) \\<in> R \\<and>\n       (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "by (rule_tac x=Ps in exI) (auto)"], ["proof (state)\nthis:\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps, C) \\<in> R \\<and>\n     (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma propRuleCharacterise:\nassumes \"(Ps,C) \\<in> upRules\"\nshows \"\\<exists> F Fs. C = (\\<Empt> \\<Rightarrow>* \\<LM>Cpd0 F Fs\\<RM>) \\<or> C = (\\<LM>Cpd0 F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 F Fs  \\<RM>) \\<or>\n       C = ( \\<LM> Cpd0 F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "using assms"], ["proof (prove)\nusing this:\n  (Ps, C) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 F Fs  \\<RM>) \\<or>\n       C = ( \\<LM> Cpd0 F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "proof (cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>NominalSequents.mset C \\<equiv> \\<LM> Cpd0 R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F Fs.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 F\n                      Fs  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> Cpd0 F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "case (I F Fs)"], ["proof (state)\nthis:\n  NominalSequents.mset C \\<equiv> \\<LM> Cpd0 F Fs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>NominalSequents.mset C \\<equiv> \\<LM> Cpd0 R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F Fs.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 F\n                      Fs  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> Cpd0 F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "then"], ["proof (chain)\npicking this:\n  NominalSequents.mset C \\<equiv> \\<LM> Cpd0 F Fs  \\<RM>\n  Ps \\<noteq> []", "obtain \\<Gamma> \\<Delta> where \"C = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  NominalSequents.mset C \\<equiv> \\<LM> Cpd0 F Fs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma> \\<Delta>.\n        C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseSeq[where C=C]"], ["proof (prove)\nusing this:\n  NominalSequents.mset C \\<equiv> \\<LM> Cpd0 F Fs  \\<RM>\n  Ps \\<noteq> []\n  \\<exists>A B. C = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma> \\<Delta>.\n        C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>NominalSequents.mset C \\<equiv> \\<LM> Cpd0 R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F Fs.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 F\n                      Fs  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> Cpd0 F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "then"], ["proof (chain)\npicking this:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"(Ps,\\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules\""], ["proof (prove)\nusing this:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules", "using assms"], ["proof (prove)\nusing this:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  (Ps, C) \\<in> upRules\n\ngoal (1 subgoal):\n 1. (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules", "by simp"], ["proof (state)\nthis:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>NominalSequents.mset C \\<equiv> \\<LM> Cpd0 R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F Fs.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 F\n                      Fs  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> Cpd0 F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "then"], ["proof (chain)\npicking this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules", "show \"\\<exists> F Fs. C = (\\<Empt> \\<Rightarrow>* \\<LM>Cpd0 F Fs\\<RM>) \\<or> C = (\\<LM>Cpd0 F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 F Fs  \\<RM>) \\<or>\n       C = ( \\<LM> Cpd0 F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "using \\<open>mset C \\<equiv> \\<LM>Cpd0 F Fs\\<RM>\\<close> and \\<open>C = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\\<close>\n      and mset.simps[where ant=\\<Gamma> and suc=\\<Delta>] and union_is_single[where M=\\<Gamma> and N=\\<Delta> and a=\"Cpd0 F Fs\"]"], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules\n  NominalSequents.mset C \\<equiv> \\<LM> Cpd0 F Fs  \\<RM>\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  NominalSequents.mset ( \\<Gamma> \\<Rightarrow>* \\<Delta>) =\n  \\<Gamma> + \\<Delta>\n  (\\<Gamma> + \\<Delta> = \\<LM> Cpd0 F Fs  \\<RM>) =\n  (\\<Gamma> = \\<LM> Cpd0 F Fs  \\<RM> \\<and> \\<Delta> = \\<Empt> \\<or>\n   \\<Gamma> = \\<Empt> \\<and> \\<Delta> = \\<LM> Cpd0 F Fs  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 F Fs  \\<RM>) \\<or>\n       C = ( \\<LM> Cpd0 F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>F Fs.\n     C = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 F Fs  \\<RM>) \\<or>\n     C = ( \\<LM> Cpd0 F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma provRuleCharacterise:\nassumes \"(Ps,C) \\<in> provRules\"\nshows \"\\<exists> F x A. (C = (\\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A \\<RM>) \\<or> C = (\\<LM> F \\<nabla> [x].A \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and> x \\<sharp> set_of_prem (Ps - A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F x A.\n       (C = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n        C = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n       x \\<sharp> set_of_prem ( Ps - A )", "using assms"], ["proof (prove)\nusing this:\n  (Ps, C) \\<in> provRules\n\ngoal (1 subgoal):\n 1. \\<exists>F x A.\n       (C = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n        C = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n       x \\<sharp> set_of_prem ( Ps - A )", "proof (cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F x A.\n       \\<lbrakk>NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>;\n        Ps \\<noteq> []; x \\<sharp> set_of_prem ( Ps - A )\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F x A.\n                            (C =\n                             ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n                             C =\n                             ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n                            x \\<sharp> set_of_prem ( Ps - A )", "case (I F x A)"], ["proof (state)\nthis:\n  NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>\n  Ps \\<noteq> []\n  x \\<sharp> set_of_prem ( Ps - A )\n\ngoal (1 subgoal):\n 1. \\<And>F x A.\n       \\<lbrakk>NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>;\n        Ps \\<noteq> []; x \\<sharp> set_of_prem ( Ps - A )\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F x A.\n                            (C =\n                             ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n                             C =\n                             ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n                            x \\<sharp> set_of_prem ( Ps - A )", "then"], ["proof (chain)\npicking this:\n  NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>\n  Ps \\<noteq> []\n  x \\<sharp> set_of_prem ( Ps - A )", "obtain \\<Gamma> \\<Delta> where \"C = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>\n  Ps \\<noteq> []\n  x \\<sharp> set_of_prem ( Ps - A )\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma> \\<Delta>.\n        C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseSeq[where C=C]"], ["proof (prove)\nusing this:\n  NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>\n  Ps \\<noteq> []\n  x \\<sharp> set_of_prem ( Ps - A )\n  \\<exists>A B. C = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma> \\<Delta>.\n        C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>F x A.\n       \\<lbrakk>NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>;\n        Ps \\<noteq> []; x \\<sharp> set_of_prem ( Ps - A )\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F x A.\n                            (C =\n                             ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n                             C =\n                             ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n                            x \\<sharp> set_of_prem ( Ps - A )", "then"], ["proof (chain)\npicking this:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"(Ps,\\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> provRules\""], ["proof (prove)\nusing this:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> provRules", "using assms"], ["proof (prove)\nusing this:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  (Ps, C) \\<in> provRules\n\ngoal (1 subgoal):\n 1. (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> provRules", "by simp"], ["proof (state)\nthis:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> provRules\n\ngoal (1 subgoal):\n 1. \\<And>F x A.\n       \\<lbrakk>NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>;\n        Ps \\<noteq> []; x \\<sharp> set_of_prem ( Ps - A )\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F x A.\n                            (C =\n                             ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n                             C =\n                             ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n                            x \\<sharp> set_of_prem ( Ps - A )", "then"], ["proof (chain)\npicking this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> provRules", "show \"\\<exists> F x A. (C = (\\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A \\<RM>) \\<or> C = (\\<LM> F \\<nabla> [x].A \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and> x \\<sharp> set_of_prem (Ps - A)\""], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> provRules\n\ngoal (1 subgoal):\n 1. \\<exists>F x A.\n       (C = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n        C = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n       x \\<sharp> set_of_prem ( Ps - A )", "using \\<open>mset C = \\<LM> F \\<nabla> [x].A \\<RM>\\<close> and \\<open>C = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\\<close> and \\<open>x \\<sharp> set_of_prem (Ps - A)\\<close>\n      and mset.simps[where ant=\\<Gamma> and suc=\\<Delta>] and union_is_single[where M=\\<Gamma> and N=\\<Delta> and a=\"F \\<nabla> [x].A\"]"], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> provRules\n  NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  x \\<sharp> set_of_prem ( Ps - A )\n  NominalSequents.mset ( \\<Gamma> \\<Rightarrow>* \\<Delta>) =\n  \\<Gamma> + \\<Delta>\n  (\\<Gamma> + \\<Delta> = \\<LM> F \\<nabla> [x].A  \\<RM>) =\n  (\\<Gamma> = \\<LM> F \\<nabla> [x].A  \\<RM> \\<and> \\<Delta> = \\<Empt> \\<or>\n   \\<Gamma> = \\<Empt> \\<and> \\<Delta> = \\<LM> F \\<nabla> [x].A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<exists>F x A.\n       (C = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n        C = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n       x \\<sharp> set_of_prem ( Ps - A )", "by auto"], ["proof (state)\nthis:\n  \\<exists>F x A.\n     (C = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n      C = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n     x \\<sharp> set_of_prem ( Ps - A )\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nprovRuleCharacterise:\nassumes \"(Ps,C) \\<in> nprovRules\"\nshows \"\\<exists> F x A. C = (\\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A \\<RM>) \\<or> C = (\\<LM> F \\<nabla> [x].A \\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F x A.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n       C = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "using assms"], ["proof (prove)\nusing this:\n  (Ps, C) \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. \\<exists>F x A.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n       C = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "proof (cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F x A.\n       \\<lbrakk>NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F x A.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "case (I F x A)"], ["proof (state)\nthis:\n  NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>F x A.\n       \\<lbrakk>NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F x A.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "then"], ["proof (chain)\npicking this:\n  NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>\n  Ps \\<noteq> []", "obtain \\<Gamma> \\<Delta> where \"C = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma> \\<Delta>.\n        C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseSeq[where C=C]"], ["proof (prove)\nusing this:\n  NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>\n  Ps \\<noteq> []\n  \\<exists>A B. C = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma> \\<Delta>.\n        C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>F x A.\n       \\<lbrakk>NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F x A.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "then"], ["proof (chain)\npicking this:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"(Ps,\\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> nprovRules\""], ["proof (prove)\nusing this:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> nprovRules", "using assms"], ["proof (prove)\nusing this:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  (Ps, C) \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> nprovRules", "by simp"], ["proof (state)\nthis:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. \\<And>F x A.\n       \\<lbrakk>NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F x A.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "then"], ["proof (chain)\npicking this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> nprovRules", "show \"\\<exists> F x A. C = (\\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A \\<RM>) \\<or> C = (\\<LM> F \\<nabla> [x].A \\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. \\<exists>F x A.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n       C = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "using \\<open>mset C = \\<LM> F \\<nabla> [x].A \\<RM>\\<close> and \\<open>C = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\\<close>\n      and mset.simps[where ant=\\<Gamma> and suc=\\<Delta>] and union_is_single[where M=\\<Gamma> and N=\\<Delta> and a=\"F \\<nabla> [x].A\"]"], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> nprovRules\n  NominalSequents.mset C = \\<LM> F \\<nabla> [x].A  \\<RM>\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  NominalSequents.mset ( \\<Gamma> \\<Rightarrow>* \\<Delta>) =\n  \\<Gamma> + \\<Delta>\n  (\\<Gamma> + \\<Delta> = \\<LM> F \\<nabla> [x].A  \\<RM>) =\n  (\\<Gamma> = \\<LM> F \\<nabla> [x].A  \\<RM> \\<and> \\<Delta> = \\<Empt> \\<or>\n   \\<Gamma> = \\<Empt> \\<and> \\<Delta> = \\<LM> F \\<nabla> [x].A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<exists>F x A.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n       C = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>F x A.\n     C = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n     C = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extendEmpty:\nshows \"extend (\\<Empt> \\<Rightarrow>* \\<Empt>) C = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend ( \\<Empt> \\<Rightarrow>* \\<Empt>) C = C", "apply (auto simp add:extend_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ( antec C \\<Rightarrow>* succ C) = C", "by (cases C) auto"], ["", "lemma extendContain:\nassumes \"r = (ps,c)\"\n    and \"(Ps,C) = extendRule S r\"\n    and \"p \\<in> set ps\"\nshows \"extend S p \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "from \\<open>p \\<in> set ps\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> set ps", "have \"extend S p \\<in> set (map (extend S) ps)\""], ["proof (prove)\nusing this:\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set (map (extend S) ps)", "by auto"], ["proof (state)\nthis:\n  extend S p \\<in> set (map (extend S) ps)\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "moreover"], ["proof (state)\nthis:\n  extend S p \\<in> set (map (extend S) ps)\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "from \\<open>(Ps,C) = extendRule S r\\<close> and \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  (Ps, C) = extendRule S r\n  r = (ps, c)", "have \"map (extend S) ps = Ps\""], ["proof (prove)\nusing this:\n  (Ps, C) = extendRule S r\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. map (extend S) ps = Ps", "by (simp add:extendRule_def)"], ["proof (state)\nthis:\n  map (extend S) ps = Ps\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "ultimately"], ["proof (chain)\npicking this:\n  extend S p \\<in> set (map (extend S) ps)\n  map (extend S) ps = Ps", "show ?thesis"], ["proof (prove)\nusing this:\n  extend S p \\<in> set (map (extend S) ps)\n  map (extend S) ps = Ps\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "by auto"], ["proof (state)\nthis:\n  extend S p \\<in> set Ps\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finSeqSet:\nfixes S :: \"sequent\"\nshows \"finite (set_of_seq S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (NominalSequents.set_of_seq S)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (NominalSequents.set_of_seq S)", "obtain \\<Gamma> \\<Delta> where \"S = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma> \\<Delta>.\n        S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases S) auto"], ["proof (state)\nthis:\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. finite (NominalSequents.set_of_seq S)", "then"], ["proof (chain)\npicking this:\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "show ?thesis"], ["proof (prove)\nusing this:\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. finite (NominalSequents.set_of_seq S)", "by (auto simp add:finite_set_mset)"], ["proof (state)\nthis:\n  finite (NominalSequents.set_of_seq S)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finPremSet:\nfixes Ps :: \"sequent list\"\nshows \"finite (set_of_prem Ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set_of_prem Ps)", "by (induct Ps) (auto simp add:finSeqSet)"], ["", "lemma finSupp:\nfixes A :: \"form\" and As :: \"form_list\"\nshows \"finite ((supp A) :: var set)\" and \"finite ((supp As) :: var set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp A) &&& finite (supp As)", "proof (nominal_induct A and As rule:form_form_list.strong_inducts)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>nat list. finite (supp (At nat list))\n 2. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 3. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 4. finite (supp ff)\n 5. finite (supp FNil)\n 6. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "print_cases"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>nat list. finite (supp (At nat list))\n 2. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 3. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 4. finite (supp ff)\n 5. finite (supp FNil)\n 6. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "case (At n xs)"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>nat list. finite (supp (At nat list))\n 2. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 3. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 4. finite (supp ff)\n 5. finite (supp FNil)\n 6. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "have \"finite (set xs :: var set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set xs)", "by (induct xs) auto"], ["proof (state)\nthis:\n  finite (set xs)\n\ngoal (6 subgoals):\n 1. \\<And>nat list. finite (supp (At nat list))\n 2. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 3. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 4. finite (supp ff)\n 5. finite (supp FNil)\n 6. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "moreover"], ["proof (state)\nthis:\n  finite (set xs)\n\ngoal (6 subgoals):\n 1. \\<And>nat list. finite (supp (At nat list))\n 2. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 3. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 4. finite (supp ff)\n 5. finite (supp FNil)\n 6. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "have \"set xs = (supp xs :: var set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs = supp xs", "by (induct xs) (auto simp add:supp_list_nil supp_set_empty supp_list_cons supp_atm)"], ["proof (state)\nthis:\n  set xs = supp xs\n\ngoal (6 subgoals):\n 1. \\<And>nat list. finite (supp (At nat list))\n 2. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 3. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 4. finite (supp ff)\n 5. finite (supp FNil)\n 6. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "ultimately"], ["proof (chain)\npicking this:\n  finite (set xs)\n  set xs = supp xs", "have \"finite (supp xs :: var set)\""], ["proof (prove)\nusing this:\n  finite (set xs)\n  set xs = supp xs\n\ngoal (1 subgoal):\n 1. finite (supp xs)", "by auto"], ["proof (state)\nthis:\n  finite (supp xs)\n\ngoal (6 subgoals):\n 1. \\<And>nat list. finite (supp (At nat list))\n 2. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 3. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 4. finite (supp ff)\n 5. finite (supp FNil)\n 6. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "moreover"], ["proof (state)\nthis:\n  finite (supp xs)\n\ngoal (6 subgoals):\n 1. \\<And>nat list. finite (supp (At nat list))\n 2. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 3. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 4. finite (supp ff)\n 5. finite (supp FNil)\n 6. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "have \"supp (At n xs) = supp n \\<union> (supp xs :: var set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (At n xs) = supp n \\<union> supp xs", "using form.supp(1)[where ?x2.0=n and ?x1.0=xs]"], ["proof (prove)\nusing this:\n  supp (At n xs) = supp n \\<union> supp xs\n\ngoal (1 subgoal):\n 1. supp (At n xs) = supp n \\<union> supp xs", "by auto"], ["proof (state)\nthis:\n  supp (At n xs) = supp n \\<union> supp xs\n\ngoal (6 subgoals):\n 1. \\<And>nat list. finite (supp (At nat list))\n 2. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 3. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 4. finite (supp ff)\n 5. finite (supp FNil)\n 6. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "then"], ["proof (chain)\npicking this:\n  supp (At n xs) = supp n \\<union> supp xs", "have \"supp (At n xs) = (supp xs :: var set)\""], ["proof (prove)\nusing this:\n  supp (At n xs) = supp n \\<union> supp xs\n\ngoal (1 subgoal):\n 1. supp (At n xs) = supp xs", "using supp_nat[where n=n]"], ["proof (prove)\nusing this:\n  supp (At n xs) = supp n \\<union> supp xs\n  supp n = {}\n\ngoal (1 subgoal):\n 1. supp (At n xs) = supp xs", "by force"], ["proof (state)\nthis:\n  supp (At n xs) = supp xs\n\ngoal (6 subgoals):\n 1. \\<And>nat list. finite (supp (At nat list))\n 2. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 3. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 4. finite (supp ff)\n 5. finite (supp FNil)\n 6. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "ultimately"], ["proof (chain)\npicking this:\n  finite (supp xs)\n  supp (At n xs) = supp xs", "show ?case"], ["proof (prove)\nusing this:\n  finite (supp xs)\n  supp (At n xs) = supp xs\n\ngoal (1 subgoal):\n 1. finite (supp (At n xs))", "by auto"], ["proof (state)\nthis:\n  finite (supp (At n xs))\n\ngoal (5 subgoals):\n 1. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 2. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 3. finite (supp ff)\n 4. finite (supp FNil)\n 5. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 2. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 3. finite (supp ff)\n 4. finite (supp FNil)\n 5. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "case FNil"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 2. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 3. finite (supp ff)\n 4. finite (supp FNil)\n 5. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "have \"supp FNil = ({} :: var set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp FNil = {}", "using form_list.supp"], ["proof (prove)\nusing this:\n  supp FNil = {}\n  supp (FCons ?x2.0 ?x1.0) = supp ?x2.0 \\<union> supp ?x1.0\n\ngoal (1 subgoal):\n 1. supp FNil = {}", "by auto"], ["proof (state)\nthis:\n  supp FNil = {}\n\ngoal (5 subgoals):\n 1. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 2. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 3. finite (supp ff)\n 4. finite (supp FNil)\n 5. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "then"], ["proof (chain)\npicking this:\n  supp FNil = {}", "show ?case"], ["proof (prove)\nusing this:\n  supp FNil = {}\n\ngoal (1 subgoal):\n 1. finite (supp FNil)", "by auto"], ["proof (state)\nthis:\n  finite (supp FNil)\n\ngoal (4 subgoals):\n 1. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 2. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 3. finite (supp ff)\n 4. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 2. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 3. finite (supp ff)\n 4. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "case (FCons F Fs)"], ["proof (state)\nthis:\n  finite (supp F)\n  finite (supp Fs)\n\ngoal (4 subgoals):\n 1. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 2. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 3. finite (supp ff)\n 4. \\<And>form form_list.\n       \\<lbrakk>finite (supp form); finite (supp form_list)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (FCons form form_list))", "then"], ["proof (chain)\npicking this:\n  finite (supp F)\n  finite (supp Fs)", "show ?case"], ["proof (prove)\nusing this:\n  finite (supp F)\n  finite (supp Fs)\n\ngoal (1 subgoal):\n 1. finite (supp (FCons F Fs))", "using form_list.supp"], ["proof (prove)\nusing this:\n  finite (supp F)\n  finite (supp Fs)\n  supp FNil = {}\n  supp (FCons ?x2.0 ?x1.0) = supp ?x2.0 \\<union> supp ?x1.0\n\ngoal (1 subgoal):\n 1. finite (supp (FCons F Fs))", "by auto"], ["proof (state)\nthis:\n  finite (supp (FCons F Fs))\n\ngoal (3 subgoals):\n 1. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 2. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 3. finite (supp ff)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 2. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 3. finite (supp ff)", "case (Cpd0 Str Fs)"], ["proof (state)\nthis:\n  finite (supp Fs)\n\ngoal (3 subgoals):\n 1. \\<And>list form_list.\n       finite (supp form_list) \\<Longrightarrow>\n       finite (supp (Cpd0 list form_list))\n 2. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 3. finite (supp ff)", "then"], ["proof (chain)\npicking this:\n  finite (supp Fs)", "show ?case"], ["proof (prove)\nusing this:\n  finite (supp Fs)\n\ngoal (1 subgoal):\n 1. finite (supp (Cpd0 Str Fs))", "using form.supp(2)[where ?x2.0=\"Str\" and ?x1.0=Fs] and supp_string[where s=Str]"], ["proof (prove)\nusing this:\n  finite (supp Fs)\n  supp (Cpd0 Str Fs) = supp Str \\<union> supp Fs\n  supp Str = {}\n\ngoal (1 subgoal):\n 1. finite (supp (Cpd0 Str Fs))", "by auto"], ["proof (state)\nthis:\n  finite (supp (Cpd0 Str Fs))\n\ngoal (2 subgoals):\n 1. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 2. finite (supp ff)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 2. finite (supp ff)", "case (Cpd1 F x B)"], ["proof (state)\nthis:\n  x \\<sharp> F\n  finite (supp B)\n\ngoal (2 subgoals):\n 1. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 2. finite (supp ff)", "from \\<open>finite (supp B)\\<close>"], ["proof (chain)\npicking this:\n  finite (supp B)", "have \"supp ([x].B) = supp B - {x}\""], ["proof (prove)\nusing this:\n  finite (supp B)\n\ngoal (1 subgoal):\n 1. supp ([x].B) = supp B - {x}", "using abs_fun_supp[OF pt_var_inst, OF at_var_inst]"], ["proof (prove)\nusing this:\n  finite (supp B)\n  finite (supp ?x) \\<Longrightarrow> supp ([?a].?x) = supp ?x - {?a}\n\ngoal (1 subgoal):\n 1. supp ([x].B) = supp B - {x}", "by auto"], ["proof (state)\nthis:\n  supp ([x].B) = supp B - {x}\n\ngoal (2 subgoals):\n 1. \\<And>list var form.\n       \\<lbrakk>var \\<sharp> list; finite (supp form)\\<rbrakk>\n       \\<Longrightarrow> finite (supp (list \\<nabla> [var].form))\n 2. finite (supp ff)", "then"], ["proof (chain)\npicking this:\n  supp ([x].B) = supp B - {x}", "show ?case"], ["proof (prove)\nusing this:\n  supp ([x].B) = supp B - {x}\n\ngoal (1 subgoal):\n 1. finite (supp (F \\<nabla> [x].B))", "using form.supp(3)[where ?x3.0=F and ?x1.0=x and ?x2.0=B] and supp_string[where s=F]\n                   and \\<open>finite (supp B)\\<close>"], ["proof (prove)\nusing this:\n  supp ([x].B) = supp B - {x}\n  supp (F \\<nabla> [x].B) = supp F \\<union> supp ([x].B)\n  supp F = {}\n  finite (supp B)\n\ngoal (1 subgoal):\n 1. finite (supp (F \\<nabla> [x].B))", "by force"], ["proof (state)\nthis:\n  finite (supp (F \\<nabla> [x].B))\n\ngoal (1 subgoal):\n 1. finite (supp ff)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (supp ff)", "case ff"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. finite (supp ff)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp ff)", "using form.supp"], ["proof (prove)\nusing this:\n  supp (At ?x2.0 ?x1.0) = supp ?x2.0 \\<union> supp ?x1.0\n  supp (Cpd0 ?x2.0 ?x1.0) = supp ?x2.0 \\<union> supp ?x1.0\n  supp (?x3.0 \\<nabla> [?x1.0].?x2.0) =\n  supp ?x3.0 \\<union> supp ([?x1.0].?x2.0)\n  supp ff = {}\n\ngoal (1 subgoal):\n 1. finite (supp ff)", "by auto"], ["proof (state)\nthis:\n  finite (supp ff)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma getFresh:\nfixes x :: \"var\" and A :: \"form\" and S :: \"sequent\" and Ps :: \"sequent list\"\nshows \"\\<exists> (y :: var). y \\<sharp> x \\<and> y \\<sharp> A \\<and> y \\<sharp> set_of_seq S \\<and> y \\<sharp> set_of_prem Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<sharp> x \\<and>\n       y \\<sharp> A \\<and>\n       y \\<sharp> NominalSequents.set_of_seq S \\<and>\n       y \\<sharp> set_of_prem Ps", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<sharp> x \\<and>\n       y \\<sharp> A \\<and>\n       y \\<sharp> NominalSequents.set_of_seq S \\<and>\n       y \\<sharp> set_of_prem Ps", "have \"finite ({A} \\<union> set_of_seq S \\<union> set_of_prem Ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ({A} \\<union> NominalSequents.set_of_seq S \\<union> set_of_prem Ps)", "using finSeqSet and finPremSet"], ["proof (prove)\nusing this:\n  finite (NominalSequents.set_of_seq ?S)\n  finite (set_of_prem ?Ps)\n\ngoal (1 subgoal):\n 1. finite\n     ({A} \\<union> NominalSequents.set_of_seq S \\<union> set_of_prem Ps)", "by auto"], ["proof (state)\nthis:\n  finite ({A} \\<union> NominalSequents.set_of_seq S \\<union> set_of_prem Ps)\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<sharp> x \\<and>\n       y \\<sharp> A \\<and>\n       y \\<sharp> NominalSequents.set_of_seq S \\<and>\n       y \\<sharp> set_of_prem Ps", "then"], ["proof (chain)\npicking this:\n  finite ({A} \\<union> NominalSequents.set_of_seq S \\<union> set_of_prem Ps)", "have \"finite (supp ({A} \\<union> set_of_seq S \\<union> set_of_prem Ps) :: var set)\""], ["proof (prove)\nusing this:\n  finite ({A} \\<union> NominalSequents.set_of_seq S \\<union> set_of_prem Ps)\n\ngoal (1 subgoal):\n 1. finite\n     (supp\n       ({A} \\<union> NominalSequents.set_of_seq S \\<union> set_of_prem Ps))", "using finSupp(1) and supp_of_fin_sets[OF pt_var_inst, OF at_var_inst, OF fs_var_inst,\n                                           where X=\"({A} \\<union> set_of_seq S \\<union> set_of_prem Ps)\"]"], ["proof (prove)\nusing this:\n  finite ({A} \\<union> NominalSequents.set_of_seq S \\<union> set_of_prem Ps)\n  finite (supp ?A)\n  finite\n   ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n    set_of_prem Ps) \\<Longrightarrow>\n  supp ({A} \\<union> NominalSequents.set_of_seq S \\<union> set_of_prem Ps) =\n  \\<Union>\n   (supp `\n    ({A} \\<union> NominalSequents.set_of_seq S \\<union> set_of_prem Ps))\n\ngoal (1 subgoal):\n 1. finite\n     (supp\n       ({A} \\<union> NominalSequents.set_of_seq S \\<union> set_of_prem Ps))", "by auto"], ["proof (state)\nthis:\n  finite\n   (supp\n     ({A} \\<union> NominalSequents.set_of_seq S \\<union> set_of_prem Ps))\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<sharp> x \\<and>\n       y \\<sharp> A \\<and>\n       y \\<sharp> NominalSequents.set_of_seq S \\<and>\n       y \\<sharp> set_of_prem Ps", "then"], ["proof (chain)\npicking this:\n  finite\n   (supp\n     ({A} \\<union> NominalSequents.set_of_seq S \\<union> set_of_prem Ps))", "have \"finite (supp ({A} \\<union> set_of_seq S \\<union> set_of_prem Ps) \\<union> supp x :: var set)\""], ["proof (prove)\nusing this:\n  finite\n   (supp\n     ({A} \\<union> NominalSequents.set_of_seq S \\<union> set_of_prem Ps))\n\ngoal (1 subgoal):\n 1. finite\n     (supp\n       ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n        set_of_prem Ps) \\<union>\n      supp x)", "using supp_atm"], ["proof (prove)\nusing this:\n  finite\n   (supp\n     ({A} \\<union> NominalSequents.set_of_seq S \\<union> set_of_prem Ps))\n  supp ?x = {?x}\n\ngoal (1 subgoal):\n 1. finite\n     (supp\n       ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n        set_of_prem Ps) \\<union>\n      supp x)", "by auto"], ["proof (state)\nthis:\n  finite\n   (supp\n     ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n      set_of_prem Ps) \\<union>\n    supp x)\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<sharp> x \\<and>\n       y \\<sharp> A \\<and>\n       y \\<sharp> NominalSequents.set_of_seq S \\<and>\n       y \\<sharp> set_of_prem Ps", "then"], ["proof (chain)\npicking this:\n  finite\n   (supp\n     ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n      set_of_prem Ps) \\<union>\n    supp x)", "obtain y where \"y \\<notin> (supp ({A} \\<union> set_of_seq S \\<union> set_of_prem Ps) \\<union> supp x :: var set)\""], ["proof (prove)\nusing this:\n  finite\n   (supp\n     ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n      set_of_prem Ps) \\<union>\n    supp x)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y \\<notin> supp\n                    ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n                     set_of_prem Ps) \\<union>\n                   supp x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ex_in_inf[OF at_var_inst,where A=\"supp ({A} \\<union> set_of_seq S \\<union> set_of_prem Ps) \\<union> supp x\"]"], ["proof (prove)\nusing this:\n  finite\n   (supp\n     ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n      set_of_prem Ps) \\<union>\n    supp x)\n  \\<lbrakk>finite\n            (supp\n              ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n               set_of_prem Ps) \\<union>\n             supp x);\n   \\<And>c.\n      c \\<notin> supp\n                  ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n                   set_of_prem Ps) \\<union>\n                 supp x \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y \\<notin> supp\n                    ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n                     set_of_prem Ps) \\<union>\n                   supp x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<notin> supp\n              ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n               set_of_prem Ps) \\<union>\n             supp x\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<sharp> x \\<and>\n       y \\<sharp> A \\<and>\n       y \\<sharp> NominalSequents.set_of_seq S \\<and>\n       y \\<sharp> set_of_prem Ps", "then"], ["proof (chain)\npicking this:\n  y \\<notin> supp\n              ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n               set_of_prem Ps) \\<union>\n             supp x", "have \"y \\<notin> supp x \\<and> y \\<notin> supp ({A} \\<union> set_of_seq S \\<union> set_of_prem Ps)\""], ["proof (prove)\nusing this:\n  y \\<notin> supp\n              ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n               set_of_prem Ps) \\<union>\n             supp x\n\ngoal (1 subgoal):\n 1. y \\<notin> supp x \\<and>\n    y \\<notin> supp\n                ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n                 set_of_prem Ps)", "by auto"], ["proof (state)\nthis:\n  y \\<notin> supp x \\<and>\n  y \\<notin> supp\n              ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n               set_of_prem Ps)\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<sharp> x \\<and>\n       y \\<sharp> A \\<and>\n       y \\<sharp> NominalSequents.set_of_seq S \\<and>\n       y \\<sharp> set_of_prem Ps", "then"], ["proof (chain)\npicking this:\n  y \\<notin> supp x \\<and>\n  y \\<notin> supp\n              ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n               set_of_prem Ps)", "have \"y \\<sharp> ({A} \\<union> set_of_seq S \\<union> set_of_prem Ps) \\<and> y \\<sharp> x\""], ["proof (prove)\nusing this:\n  y \\<notin> supp x \\<and>\n  y \\<notin> supp\n              ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n               set_of_prem Ps)\n\ngoal (1 subgoal):\n 1. y \\<sharp> ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n                set_of_prem Ps) \\<and>\n    y \\<sharp> x", "using fresh_def[where a=y and x=x]\n     and fresh_def[where a=y and x=\"{A} \\<union> set_of_seq S \\<union> set_of_prem Ps\"]"], ["proof (prove)\nusing this:\n  y \\<notin> supp x \\<and>\n  y \\<notin> supp\n              ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n               set_of_prem Ps)\n  y \\<sharp> x = (y \\<notin> supp x)\n  y \\<sharp> ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n              set_of_prem Ps) =\n  (y \\<notin> supp\n               ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n                set_of_prem Ps))\n\ngoal (1 subgoal):\n 1. y \\<sharp> ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n                set_of_prem Ps) \\<and>\n    y \\<sharp> x", "by auto"], ["proof (state)\nthis:\n  y \\<sharp> ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n              set_of_prem Ps) \\<and>\n  y \\<sharp> x\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<sharp> x \\<and>\n       y \\<sharp> A \\<and>\n       y \\<sharp> NominalSequents.set_of_seq S \\<and>\n       y \\<sharp> set_of_prem Ps", "then"], ["proof (chain)\npicking this:\n  y \\<sharp> ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n              set_of_prem Ps) \\<and>\n  y \\<sharp> x", "have \"y \\<sharp> A \\<and> y \\<sharp> (set_of_seq S \\<union> set_of_prem Ps) \\<and> y \\<sharp> x\""], ["proof (prove)\nusing this:\n  y \\<sharp> ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n              set_of_prem Ps) \\<and>\n  y \\<sharp> x\n\ngoal (1 subgoal):\n 1. y \\<sharp> A \\<and>\n    y \\<sharp> (NominalSequents.set_of_seq S \\<union> set_of_prem Ps) \\<and>\n    y \\<sharp> x", "using fresh_fin_insert[OF pt_var_inst, OF at_var_inst, OF fs_var_inst,where X=\"set_of_seq S \\<union> set_of_prem Ps\" and x=A]\n       and finSeqSet and finPremSet"], ["proof (prove)\nusing this:\n  y \\<sharp> ({A} \\<union> NominalSequents.set_of_seq S \\<union>\n              set_of_prem Ps) \\<and>\n  y \\<sharp> x\n  finite\n   (NominalSequents.set_of_seq S \\<union> set_of_prem Ps) \\<Longrightarrow>\n  ?a \\<sharp> insert A\n               (NominalSequents.set_of_seq S \\<union> set_of_prem Ps) =\n  (?a \\<sharp> A \\<and>\n   ?a \\<sharp> (NominalSequents.set_of_seq S \\<union> set_of_prem Ps))\n  finite (NominalSequents.set_of_seq ?S)\n  finite (set_of_prem ?Ps)\n\ngoal (1 subgoal):\n 1. y \\<sharp> A \\<and>\n    y \\<sharp> (NominalSequents.set_of_seq S \\<union> set_of_prem Ps) \\<and>\n    y \\<sharp> x", "by auto"], ["proof (state)\nthis:\n  y \\<sharp> A \\<and>\n  y \\<sharp> (NominalSequents.set_of_seq S \\<union> set_of_prem Ps) \\<and>\n  y \\<sharp> x\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<sharp> x \\<and>\n       y \\<sharp> A \\<and>\n       y \\<sharp> NominalSequents.set_of_seq S \\<and>\n       y \\<sharp> set_of_prem Ps", "then"], ["proof (chain)\npicking this:\n  y \\<sharp> A \\<and>\n  y \\<sharp> (NominalSequents.set_of_seq S \\<union> set_of_prem Ps) \\<and>\n  y \\<sharp> x", "have \"y \\<sharp> A \\<and> y \\<sharp> set_of_seq S \\<and> y \\<sharp> set_of_prem Ps \\<and> y \\<sharp> x\""], ["proof (prove)\nusing this:\n  y \\<sharp> A \\<and>\n  y \\<sharp> (NominalSequents.set_of_seq S \\<union> set_of_prem Ps) \\<and>\n  y \\<sharp> x\n\ngoal (1 subgoal):\n 1. y \\<sharp> A \\<and>\n    y \\<sharp> NominalSequents.set_of_seq S \\<and>\n    y \\<sharp> set_of_prem Ps \\<and> y \\<sharp> x", "using fresh_fin_union[OF pt_var_inst,OF at_var_inst, OF fs_var_inst, where X=\"set_of_seq S\" and Y=\"set_of_prem Ps\"]\n       and finSeqSet and finPremSet"], ["proof (prove)\nusing this:\n  y \\<sharp> A \\<and>\n  y \\<sharp> (NominalSequents.set_of_seq S \\<union> set_of_prem Ps) \\<and>\n  y \\<sharp> x\n  \\<lbrakk>finite (NominalSequents.set_of_seq S);\n   finite (set_of_prem Ps)\\<rbrakk>\n  \\<Longrightarrow> ?a \\<sharp> (NominalSequents.set_of_seq S \\<union>\n                                 set_of_prem Ps) =\n                    (?a \\<sharp> NominalSequents.set_of_seq S \\<and>\n                     ?a \\<sharp> set_of_prem Ps)\n  finite (NominalSequents.set_of_seq ?S)\n  finite (set_of_prem ?Ps)\n\ngoal (1 subgoal):\n 1. y \\<sharp> A \\<and>\n    y \\<sharp> NominalSequents.set_of_seq S \\<and>\n    y \\<sharp> set_of_prem Ps \\<and> y \\<sharp> x", "by auto"], ["proof (state)\nthis:\n  y \\<sharp> A \\<and>\n  y \\<sharp> NominalSequents.set_of_seq S \\<and>\n  y \\<sharp> set_of_prem Ps \\<and> y \\<sharp> x\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<sharp> x \\<and>\n       y \\<sharp> A \\<and>\n       y \\<sharp> NominalSequents.set_of_seq S \\<and>\n       y \\<sharp> set_of_prem Ps", "then"], ["proof (chain)\npicking this:\n  y \\<sharp> A \\<and>\n  y \\<sharp> NominalSequents.set_of_seq S \\<and>\n  y \\<sharp> set_of_prem Ps \\<and> y \\<sharp> x", "show ?thesis"], ["proof (prove)\nusing this:\n  y \\<sharp> A \\<and>\n  y \\<sharp> NominalSequents.set_of_seq S \\<and>\n  y \\<sharp> set_of_prem Ps \\<and> y \\<sharp> x\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<sharp> x \\<and>\n       y \\<sharp> A \\<and>\n       y \\<sharp> NominalSequents.set_of_seq S \\<and>\n       y \\<sharp> set_of_prem Ps", "by auto"], ["proof (state)\nthis:\n  \\<exists>y.\n     y \\<sharp> x \\<and>\n     y \\<sharp> A \\<and>\n     y \\<sharp> NominalSequents.set_of_seq S \\<and>\n     y \\<sharp> set_of_prem Ps\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma switchAux:\nfixes Xs :: \"var list\"\nassumes \"y \\<sharp> Xs\"\nshows \"[y;x]Xs = [(y,x)]\\<bullet>Xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [y;x]Xs = [(y, x)] \\<bullet> Xs", "using assms"], ["proof (prove)\nusing this:\n  y \\<sharp> Xs\n\ngoal (1 subgoal):\n 1. [y;x]Xs = [(y, x)] \\<bullet> Xs", "proof (induct Xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<sharp> [] \\<Longrightarrow> [y;x][] = [(y, x)] \\<bullet> []\n 2. \\<And>a Xs.\n       \\<lbrakk>y \\<sharp> Xs \\<Longrightarrow>\n                [y;x]Xs = [(y, x)] \\<bullet> Xs;\n        y \\<sharp> (a # Xs)\\<rbrakk>\n       \\<Longrightarrow> [y;x](a # Xs) = [(y, x)] \\<bullet> (a # Xs)", "print_cases"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<sharp> [] \\<Longrightarrow> [y;x][] = [(y, x)] \\<bullet> []\n 2. \\<And>a Xs.\n       \\<lbrakk>y \\<sharp> Xs \\<Longrightarrow>\n                [y;x]Xs = [(y, x)] \\<bullet> Xs;\n        y \\<sharp> (a # Xs)\\<rbrakk>\n       \\<Longrightarrow> [y;x](a # Xs) = [(y, x)] \\<bullet> (a # Xs)", "case Nil"], ["proof (state)\nthis:\n  y \\<sharp> []\n\ngoal (2 subgoals):\n 1. y \\<sharp> [] \\<Longrightarrow> [y;x][] = [(y, x)] \\<bullet> []\n 2. \\<And>a Xs.\n       \\<lbrakk>y \\<sharp> Xs \\<Longrightarrow>\n                [y;x]Xs = [(y, x)] \\<bullet> Xs;\n        y \\<sharp> (a # Xs)\\<rbrakk>\n       \\<Longrightarrow> [y;x](a # Xs) = [(y, x)] \\<bullet> (a # Xs)", "then"], ["proof (chain)\npicking this:\n  y \\<sharp> []", "show ?case"], ["proof (prove)\nusing this:\n  y \\<sharp> []\n\ngoal (1 subgoal):\n 1. [y;x][] = [(y, x)] \\<bullet> []", "using nil_eqvt"], ["proof (prove)\nusing this:\n  y \\<sharp> []\n  ?pi \\<bullet> [] = []\n\ngoal (1 subgoal):\n 1. [y;x][] = [(y, x)] \\<bullet> []", "by auto"], ["proof (state)\nthis:\n  [y;x][] = [(y, x)] \\<bullet> []\n\ngoal (1 subgoal):\n 1. \\<And>a Xs.\n       \\<lbrakk>y \\<sharp> Xs \\<Longrightarrow>\n                [y;x]Xs = [(y, x)] \\<bullet> Xs;\n        y \\<sharp> (a # Xs)\\<rbrakk>\n       \\<Longrightarrow> [y;x](a # Xs) = [(y, x)] \\<bullet> (a # Xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Xs.\n       \\<lbrakk>y \\<sharp> Xs \\<Longrightarrow>\n                [y;x]Xs = [(y, x)] \\<bullet> Xs;\n        y \\<sharp> (a # Xs)\\<rbrakk>\n       \\<Longrightarrow> [y;x](a # Xs) = [(y, x)] \\<bullet> (a # Xs)", "case (Cons a As)"], ["proof (state)\nthis:\n  y \\<sharp> As \\<Longrightarrow> [y;x]As = [(y, x)] \\<bullet> As\n  y \\<sharp> (a # As)\n\ngoal (1 subgoal):\n 1. \\<And>a Xs.\n       \\<lbrakk>y \\<sharp> Xs \\<Longrightarrow>\n                [y;x]Xs = [(y, x)] \\<bullet> Xs;\n        y \\<sharp> (a # Xs)\\<rbrakk>\n       \\<Longrightarrow> [y;x](a # Xs) = [(y, x)] \\<bullet> (a # Xs)", "then"], ["proof (chain)\npicking this:\n  y \\<sharp> As \\<Longrightarrow> [y;x]As = [(y, x)] \\<bullet> As\n  y \\<sharp> (a # As)", "have \"y \\<sharp> a \\<and> y \\<sharp> As\" and \"[y;x]As = [(y,x)]\\<bullet>As\""], ["proof (prove)\nusing this:\n  y \\<sharp> As \\<Longrightarrow> [y;x]As = [(y, x)] \\<bullet> As\n  y \\<sharp> (a # As)\n\ngoal (1 subgoal):\n 1. y \\<sharp> a \\<and> y \\<sharp> As &&& [y;x]As = [(y, x)] \\<bullet> As", "using fresh_list_cons[where a=y and x=a and xs=As]"], ["proof (prove)\nusing this:\n  y \\<sharp> As \\<Longrightarrow> [y;x]As = [(y, x)] \\<bullet> As\n  y \\<sharp> (a # As)\n  y \\<sharp> (a # As) = (y \\<sharp> a \\<and> y \\<sharp> As)\n\ngoal (1 subgoal):\n 1. y \\<sharp> a \\<and> y \\<sharp> As &&& [y;x]As = [(y, x)] \\<bullet> As", "by auto"], ["proof (state)\nthis:\n  y \\<sharp> a \\<and> y \\<sharp> As\n  [y;x]As = [(y, x)] \\<bullet> As\n\ngoal (1 subgoal):\n 1. \\<And>a Xs.\n       \\<lbrakk>y \\<sharp> Xs \\<Longrightarrow>\n                [y;x]Xs = [(y, x)] \\<bullet> Xs;\n        y \\<sharp> (a # Xs)\\<rbrakk>\n       \\<Longrightarrow> [y;x](a # Xs) = [(y, x)] \\<bullet> (a # Xs)", "then"], ["proof (chain)\npicking this:\n  y \\<sharp> a \\<and> y \\<sharp> As\n  [y;x]As = [(y, x)] \\<bullet> As", "show ?case"], ["proof (prove)\nusing this:\n  y \\<sharp> a \\<and> y \\<sharp> As\n  [y;x]As = [(y, x)] \\<bullet> As\n\ngoal (1 subgoal):\n 1. [y;x](a # As) = [(y, x)] \\<bullet> (a # As)", "using NEmpt[where z=y and y=x and x=a and ys= As] \n                 and cons_eqvt[where pi=\"[(y,x)]\" and x=a and xs=As]"], ["proof (prove)\nusing this:\n  y \\<sharp> a \\<and> y \\<sharp> As\n  [y;x]As = [(y, x)] \\<bullet> As\n  [y;x](a # As) = (if a = x then y # [y;x]As else a # [y;x]As)\n  [(y, x)] \\<bullet> (a # As) = [(y, x)] \\<bullet> a # [(y, x)] \\<bullet> As\n\ngoal (1 subgoal):\n 1. [y;x](a # As) = [(y, x)] \\<bullet> (a # As)", "by (perm_simp add:fresh_atm)"], ["proof (state)\nthis:\n  [y;x](a # As) = [(y, x)] \\<bullet> (a # As)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma switch:\nfixes A :: \"form\" and As :: \"form_list\"\nshows \"y \\<sharp> A \\<Longrightarrow> [y,x]A = [(y,x)]\\<bullet>A\" and \"y \\<sharp> As \\<Longrightarrow> [y,x]As = [(y,x)]\\<bullet>As\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<sharp> A \\<Longrightarrow> [y,x]A = [(y, x)] \\<bullet> A) &&&\n    (y \\<sharp> As \\<Longrightarrow> [y,x]As = [(y, x)] \\<bullet> As)", "proof (nominal_induct A and As avoiding: x y rule:form_form_list.strong_inducts)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>nat list x y.\n       y \\<sharp> At nat list \\<Longrightarrow>\n       [y,x]At nat list = [(y, x)] \\<bullet> At nat list\n 2. \\<And>list form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form_list \\<Longrightarrow>\n                   [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> Cpd0 list form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]Cpd0 list form_list =\n                         [(y, x)] \\<bullet> Cpd0 list form_list\n 3. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 4. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff\n 5. \\<And>x y.\n       y \\<sharp> FNil \\<Longrightarrow> [y,x]FNil = [(y, x)] \\<bullet> FNil\n 6. \\<And>form form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form \\<Longrightarrow>\n                   [ba,b]form = [(ba, b)] \\<bullet> form;\n        \\<And>b ba.\n           ba \\<sharp> form_list \\<Longrightarrow>\n           [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> FCons form form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]FCons form form_list =\n                         [(y, x)] \\<bullet> FCons form form_list", "case (At n xs s t)"], ["proof (state)\nthis:\n  t \\<sharp> At n xs\n\ngoal (6 subgoals):\n 1. \\<And>nat list x y.\n       y \\<sharp> At nat list \\<Longrightarrow>\n       [y,x]At nat list = [(y, x)] \\<bullet> At nat list\n 2. \\<And>list form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form_list \\<Longrightarrow>\n                   [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> Cpd0 list form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]Cpd0 list form_list =\n                         [(y, x)] \\<bullet> Cpd0 list form_list\n 3. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 4. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff\n 5. \\<And>x y.\n       y \\<sharp> FNil \\<Longrightarrow> [y,x]FNil = [(y, x)] \\<bullet> FNil\n 6. \\<And>form form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form \\<Longrightarrow>\n                   [ba,b]form = [(ba, b)] \\<bullet> form;\n        \\<And>b ba.\n           ba \\<sharp> form_list \\<Longrightarrow>\n           [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> FCons form form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]FCons form form_list =\n                         [(y, x)] \\<bullet> FCons form form_list", "then"], ["proof (chain)\npicking this:\n  t \\<sharp> At n xs", "have \"t \\<sharp> xs\""], ["proof (prove)\nusing this:\n  t \\<sharp> At n xs\n\ngoal (1 subgoal):\n 1. t \\<sharp> xs", "using form.fresh"], ["proof (prove)\nusing this:\n  t \\<sharp> At n xs\n  ?a \\<sharp> At ?x2.0 ?x1.0 = (?a \\<sharp> ?x2.0 \\<and> ?a \\<sharp> ?x1.0)\n  ?a \\<sharp> Cpd0 ?x2.0 ?x1.0 =\n  (?a \\<sharp> ?x2.0 \\<and> ?a \\<sharp> ?x1.0)\n  ?a \\<sharp> ?x3.0 \\<nabla> [?x1.0].?x2.0 =\n  (?a \\<sharp> ?x3.0 \\<and> ?a \\<sharp> [?x1.0].?x2.0)\n  ?a \\<sharp> ff = True\n\ngoal (1 subgoal):\n 1. t \\<sharp> xs", "by auto"], ["proof (state)\nthis:\n  t \\<sharp> xs\n\ngoal (6 subgoals):\n 1. \\<And>nat list x y.\n       y \\<sharp> At nat list \\<Longrightarrow>\n       [y,x]At nat list = [(y, x)] \\<bullet> At nat list\n 2. \\<And>list form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form_list \\<Longrightarrow>\n                   [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> Cpd0 list form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]Cpd0 list form_list =\n                         [(y, x)] \\<bullet> Cpd0 list form_list\n 3. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 4. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff\n 5. \\<And>x y.\n       y \\<sharp> FNil \\<Longrightarrow> [y,x]FNil = [(y, x)] \\<bullet> FNil\n 6. \\<And>form form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form \\<Longrightarrow>\n                   [ba,b]form = [(ba, b)] \\<bullet> form;\n        \\<And>b ba.\n           ba \\<sharp> form_list \\<Longrightarrow>\n           [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> FCons form form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]FCons form form_list =\n                         [(y, x)] \\<bullet> FCons form form_list", "then"], ["proof (chain)\npicking this:\n  t \\<sharp> xs", "show ?case"], ["proof (prove)\nusing this:\n  t \\<sharp> xs\n\ngoal (1 subgoal):\n 1. [t,s]At n xs = [(t, s)] \\<bullet> At n xs", "using perm_nat_def[where pi=\"[(t,s)]\" and i=n] and switchAux[where y=t and Xs=xs]"], ["proof (prove)\nusing this:\n  t \\<sharp> xs\n  [(t, s)] \\<bullet> n = n\n  t \\<sharp> xs \\<Longrightarrow> [t;?x]xs = [(t, ?x)] \\<bullet> xs\n\ngoal (1 subgoal):\n 1. [t,s]At n xs = [(t, s)] \\<bullet> At n xs", "by auto"], ["proof (state)\nthis:\n  [t,s]At n xs = [(t, s)] \\<bullet> At n xs\n\ngoal (5 subgoals):\n 1. \\<And>list form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form_list \\<Longrightarrow>\n                   [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> Cpd0 list form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]Cpd0 list form_list =\n                         [(y, x)] \\<bullet> Cpd0 list form_list\n 2. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 3. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff\n 4. \\<And>x y.\n       y \\<sharp> FNil \\<Longrightarrow> [y,x]FNil = [(y, x)] \\<bullet> FNil\n 5. \\<And>form form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form \\<Longrightarrow>\n                   [ba,b]form = [(ba, b)] \\<bullet> form;\n        \\<And>b ba.\n           ba \\<sharp> form_list \\<Longrightarrow>\n           [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> FCons form form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]FCons form form_list =\n                         [(y, x)] \\<bullet> FCons form form_list", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>list form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form_list \\<Longrightarrow>\n                   [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> Cpd0 list form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]Cpd0 list form_list =\n                         [(y, x)] \\<bullet> Cpd0 list form_list\n 2. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 3. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff\n 4. \\<And>x y.\n       y \\<sharp> FNil \\<Longrightarrow> [y,x]FNil = [(y, x)] \\<bullet> FNil\n 5. \\<And>form form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form \\<Longrightarrow>\n                   [ba,b]form = [(ba, b)] \\<bullet> form;\n        \\<And>b ba.\n           ba \\<sharp> form_list \\<Longrightarrow>\n           [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> FCons form form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]FCons form form_list =\n                         [(y, x)] \\<bullet> FCons form form_list", "case FNil"], ["proof (state)\nthis:\n  y \\<sharp> FNil\n\ngoal (5 subgoals):\n 1. \\<And>list form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form_list \\<Longrightarrow>\n                   [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> Cpd0 list form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]Cpd0 list form_list =\n                         [(y, x)] \\<bullet> Cpd0 list form_list\n 2. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 3. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff\n 4. \\<And>x y.\n       y \\<sharp> FNil \\<Longrightarrow> [y,x]FNil = [(y, x)] \\<bullet> FNil\n 5. \\<And>form form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form \\<Longrightarrow>\n                   [ba,b]form = [(ba, b)] \\<bullet> form;\n        \\<And>b ba.\n           ba \\<sharp> form_list \\<Longrightarrow>\n           [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> FCons form form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]FCons form form_list =\n                         [(y, x)] \\<bullet> FCons form form_list", "then"], ["proof (chain)\npicking this:\n  y \\<sharp> FNil", "show ?case"], ["proof (prove)\nusing this:\n  y \\<sharp> FNil\n\ngoal (1 subgoal):\n 1. [y,x]FNil = [(y, x)] \\<bullet> FNil", "by auto"], ["proof (state)\nthis:\n  [y,x]FNil = [(y, x)] \\<bullet> FNil\n\ngoal (4 subgoals):\n 1. \\<And>list form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form_list \\<Longrightarrow>\n                   [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> Cpd0 list form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]Cpd0 list form_list =\n                         [(y, x)] \\<bullet> Cpd0 list form_list\n 2. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 3. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff\n 4. \\<And>form form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form \\<Longrightarrow>\n                   [ba,b]form = [(ba, b)] \\<bullet> form;\n        \\<And>b ba.\n           ba \\<sharp> form_list \\<Longrightarrow>\n           [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> FCons form form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]FCons form form_list =\n                         [(y, x)] \\<bullet> FCons form form_list", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>list form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form_list \\<Longrightarrow>\n                   [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> Cpd0 list form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]Cpd0 list form_list =\n                         [(y, x)] \\<bullet> Cpd0 list form_list\n 2. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 3. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff\n 4. \\<And>form form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form \\<Longrightarrow>\n                   [ba,b]form = [(ba, b)] \\<bullet> form;\n        \\<And>b ba.\n           ba \\<sharp> form_list \\<Longrightarrow>\n           [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> FCons form form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]FCons form form_list =\n                         [(y, x)] \\<bullet> FCons form form_list", "case (FCons B Bs s t)"], ["proof (state)\nthis:\n  ?ba \\<sharp> B \\<Longrightarrow> [?ba,?b]B = [(?ba, ?b)] \\<bullet> B\n  ?ba \\<sharp> Bs \\<Longrightarrow> [?ba,?b]Bs = [(?ba, ?b)] \\<bullet> Bs\n  t \\<sharp> FCons B Bs\n\ngoal (4 subgoals):\n 1. \\<And>list form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form_list \\<Longrightarrow>\n                   [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> Cpd0 list form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]Cpd0 list form_list =\n                         [(y, x)] \\<bullet> Cpd0 list form_list\n 2. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 3. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff\n 4. \\<And>form form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form \\<Longrightarrow>\n                   [ba,b]form = [(ba, b)] \\<bullet> form;\n        \\<And>b ba.\n           ba \\<sharp> form_list \\<Longrightarrow>\n           [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> FCons form form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]FCons form form_list =\n                         [(y, x)] \\<bullet> FCons form form_list", "then"], ["proof (chain)\npicking this:\n  ?ba \\<sharp> B \\<Longrightarrow> [?ba,?b]B = [(?ba, ?b)] \\<bullet> B\n  ?ba \\<sharp> Bs \\<Longrightarrow> [?ba,?b]Bs = [(?ba, ?b)] \\<bullet> Bs\n  t \\<sharp> FCons B Bs", "show ?case"], ["proof (prove)\nusing this:\n  ?ba \\<sharp> B \\<Longrightarrow> [?ba,?b]B = [(?ba, ?b)] \\<bullet> B\n  ?ba \\<sharp> Bs \\<Longrightarrow> [?ba,?b]Bs = [(?ba, ?b)] \\<bullet> Bs\n  t \\<sharp> FCons B Bs\n\ngoal (1 subgoal):\n 1. [t,s]FCons B Bs = [(t, s)] \\<bullet> FCons B Bs", "by auto"], ["proof (state)\nthis:\n  [t,s]FCons B Bs = [(t, s)] \\<bullet> FCons B Bs\n\ngoal (3 subgoals):\n 1. \\<And>list form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form_list \\<Longrightarrow>\n                   [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> Cpd0 list form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]Cpd0 list form_list =\n                         [(y, x)] \\<bullet> Cpd0 list form_list\n 2. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 3. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>list form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form_list \\<Longrightarrow>\n                   [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> Cpd0 list form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]Cpd0 list form_list =\n                         [(y, x)] \\<bullet> Cpd0 list form_list\n 2. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 3. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff", "case (Cpd0 Str Bs s t)"], ["proof (state)\nthis:\n  ?ba \\<sharp> Bs \\<Longrightarrow> [?ba,?b]Bs = [(?ba, ?b)] \\<bullet> Bs\n  t \\<sharp> Cpd0 Str Bs\n\ngoal (3 subgoals):\n 1. \\<And>list form_list x y.\n       \\<lbrakk>\\<And>b ba.\n                   ba \\<sharp> form_list \\<Longrightarrow>\n                   [ba,b]form_list = [(ba, b)] \\<bullet> form_list;\n        y \\<sharp> Cpd0 list form_list\\<rbrakk>\n       \\<Longrightarrow> [y,x]Cpd0 list form_list =\n                         [(y, x)] \\<bullet> Cpd0 list form_list\n 2. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 3. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff", "then"], ["proof (chain)\npicking this:\n  ?ba \\<sharp> Bs \\<Longrightarrow> [?ba,?b]Bs = [(?ba, ?b)] \\<bullet> Bs\n  t \\<sharp> Cpd0 Str Bs", "show ?case"], ["proof (prove)\nusing this:\n  ?ba \\<sharp> Bs \\<Longrightarrow> [?ba,?b]Bs = [(?ba, ?b)] \\<bullet> Bs\n  t \\<sharp> Cpd0 Str Bs\n\ngoal (1 subgoal):\n 1. [t,s]Cpd0 Str Bs = [(t, s)] \\<bullet> Cpd0 Str Bs", "using Cpd0.hyps[where ba=t and b=s] and form.fresh\n    and perm_string[where s=\"Str\" and pi=\"[(t,s)]\"]"], ["proof (prove)\nusing this:\n  ?ba \\<sharp> Bs \\<Longrightarrow> [?ba,?b]Bs = [(?ba, ?b)] \\<bullet> Bs\n  t \\<sharp> Cpd0 Str Bs\n  t \\<sharp> Bs \\<Longrightarrow> [t,s]Bs = [(t, s)] \\<bullet> Bs\n  ?a \\<sharp> At ?x2.0 ?x1.0 = (?a \\<sharp> ?x2.0 \\<and> ?a \\<sharp> ?x1.0)\n  ?a \\<sharp> Cpd0 ?x2.0 ?x1.0 =\n  (?a \\<sharp> ?x2.0 \\<and> ?a \\<sharp> ?x1.0)\n  ?a \\<sharp> ?x3.0 \\<nabla> [?x1.0].?x2.0 =\n  (?a \\<sharp> ?x3.0 \\<and> ?a \\<sharp> [?x1.0].?x2.0)\n  ?a \\<sharp> ff = True\n  [(t, s)] \\<bullet> Str = Str\n\ngoal (1 subgoal):\n 1. [t,s]Cpd0 Str Bs = [(t, s)] \\<bullet> Cpd0 Str Bs", "by auto"], ["proof (state)\nthis:\n  [t,s]Cpd0 Str Bs = [(t, s)] \\<bullet> Cpd0 Str Bs\n\ngoal (2 subgoals):\n 1. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 2. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 2. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff", "case (Cpd1 F a B s t)"], ["proof (state)\nthis:\n  a \\<sharp> s\n  a \\<sharp> t\n  a \\<sharp> F\n  ?ba \\<sharp> B \\<Longrightarrow> [?ba,?b]B = [(?ba, ?b)] \\<bullet> B\n  t \\<sharp> F \\<nabla> [a].B\n\ngoal (2 subgoals):\n 1. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 2. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff", "then"], ["proof (chain)\npicking this:\n  a \\<sharp> s\n  a \\<sharp> t\n  a \\<sharp> F\n  ?ba \\<sharp> B \\<Longrightarrow> [?ba,?b]B = [(?ba, ?b)] \\<bullet> B\n  t \\<sharp> F \\<nabla> [a].B", "have \"t \\<sharp> B\""], ["proof (prove)\nusing this:\n  a \\<sharp> s\n  a \\<sharp> t\n  a \\<sharp> F\n  ?ba \\<sharp> B \\<Longrightarrow> [?ba,?b]B = [(?ba, ?b)] \\<bullet> B\n  t \\<sharp> F \\<nabla> [a].B\n\ngoal (1 subgoal):\n 1. t \\<sharp> B", "using form.fresh(3)[where ?x3.0=F and ?x1.0=a and ?x2.0=B and a=t] \n    and fresh_atm[where a=a and b=t] and fresh_string[where a=t and s=F] \n    and fresh_abs_funE[OF pt_var_inst, OF at_var_inst,where x=B and b=t and a=a]\n    and finSupp(1)[where A=B]"], ["proof (prove)\nusing this:\n  a \\<sharp> s\n  a \\<sharp> t\n  a \\<sharp> F\n  ?ba \\<sharp> B \\<Longrightarrow> [?ba,?b]B = [(?ba, ?b)] \\<bullet> B\n  t \\<sharp> F \\<nabla> [a].B\n  t \\<sharp> F \\<nabla> [a].B = (t \\<sharp> F \\<and> t \\<sharp> [a].B)\n  a \\<sharp> t = (a \\<noteq> t)\n  t \\<sharp> F\n  \\<lbrakk>finite (supp B); t \\<sharp> [a].B; t \\<noteq> a\\<rbrakk>\n  \\<Longrightarrow> t \\<sharp> B\n  finite (supp B)\n\ngoal (1 subgoal):\n 1. t \\<sharp> B", "by auto"], ["proof (state)\nthis:\n  t \\<sharp> B\n\ngoal (2 subgoals):\n 1. \\<And>list var form x y.\n       \\<lbrakk>var \\<sharp> x; var \\<sharp> y; var \\<sharp> list;\n        \\<And>b ba.\n           ba \\<sharp> form \\<Longrightarrow>\n           [ba,b]form = [(ba, b)] \\<bullet> form;\n        y \\<sharp> list \\<nabla> [var].form\\<rbrakk>\n       \\<Longrightarrow> [y,x]list \\<nabla> [var].form =\n                         [(y, x)] \\<bullet> list \\<nabla> [var].form\n 2. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff", "then"], ["proof (chain)\npicking this:\n  t \\<sharp> B", "show ?case"], ["proof (prove)\nusing this:\n  t \\<sharp> B\n\ngoal (1 subgoal):\n 1. [t,s]F \\<nabla> [a].B = [(t, s)] \\<bullet> F \\<nabla> [a].B", "using Cpd1(4)[where ba=t and b=s] and form.fresh and Cpd1(1,2)\n    and perm_string[where pi=\"[(t,s)]\" and s=F] and fresh_atm"], ["proof (prove)\nusing this:\n  t \\<sharp> B\n  t \\<sharp> B \\<Longrightarrow> [t,s]B = [(t, s)] \\<bullet> B\n  ?a \\<sharp> At ?x2.0 ?x1.0 = (?a \\<sharp> ?x2.0 \\<and> ?a \\<sharp> ?x1.0)\n  ?a \\<sharp> Cpd0 ?x2.0 ?x1.0 =\n  (?a \\<sharp> ?x2.0 \\<and> ?a \\<sharp> ?x1.0)\n  ?a \\<sharp> ?x3.0 \\<nabla> [?x1.0].?x2.0 =\n  (?a \\<sharp> ?x3.0 \\<and> ?a \\<sharp> [?x1.0].?x2.0)\n  ?a \\<sharp> ff = True\n  a \\<sharp> s\n  a \\<sharp> t\n  [(t, s)] \\<bullet> F = F\n  ?a \\<sharp> ?b = (?a \\<noteq> ?b)\n\ngoal (1 subgoal):\n 1. [t,s]F \\<nabla> [a].B = [(t, s)] \\<bullet> F \\<nabla> [a].B", "by perm_simp"], ["proof (state)\nthis:\n  [t,s]F \\<nabla> [a].B = [(t, s)] \\<bullet> F \\<nabla> [a].B\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff", "case ff"], ["proof (state)\nthis:\n  y \\<sharp> ff\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       y \\<sharp> ff \\<Longrightarrow> [y,x]ff = [(y, x)] \\<bullet> ff", "then"], ["proof (chain)\npicking this:\n  y \\<sharp> ff", "show ?case"], ["proof (prove)\nusing this:\n  y \\<sharp> ff\n\ngoal (1 subgoal):\n 1. [y,x]ff = [(y, x)] \\<bullet> ff", "by auto"], ["proof (state)\nthis:\n  [y,x]ff = [(y, x)] \\<bullet> ff\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\\noindent The final clause says we can only use an $S$ which is suitable fresh.\n\nThe only lemma which is unique to first-order calculi is the Substitution Lemma.  We show the crucial step in the proof; namely that one can substitute a fresh variable into a formula and the resultant formula is unchanged.  The proof is not particularly edifying and is omitted:\n\\<close>"], ["", "lemma formSubst:\nshows \"y \\<sharp> x \\<and> y \\<sharp> A \\<Longrightarrow> F \\<nabla> [x].A = F \\<nabla> [y].([y,x]A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<sharp> x \\<and> y \\<sharp> A \\<Longrightarrow>\n    F \\<nabla> [x].A = F \\<nabla> [y].[y,x]A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<sharp> x \\<and> y \\<sharp> A \\<Longrightarrow>\n    F \\<nabla> [x].A = F \\<nabla> [y].[y,x]A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<sharp> x \\<and> y \\<sharp> A \\<Longrightarrow>\n    F \\<nabla> [x].A = F \\<nabla> [y].[y,x]A", "assume \"y \\<sharp> x \\<and> y \\<sharp> A\""], ["proof (state)\nthis:\n  y \\<sharp> x \\<and> y \\<sharp> A\n\ngoal (1 subgoal):\n 1. y \\<sharp> x \\<and> y \\<sharp> A \\<Longrightarrow>\n    F \\<nabla> [x].A = F \\<nabla> [y].[y,x]A", "then"], ["proof (chain)\npicking this:\n  y \\<sharp> x \\<and> y \\<sharp> A", "have \"[x].A = [y].([y,x]A)\""], ["proof (prove)\nusing this:\n  y \\<sharp> x \\<and> y \\<sharp> A\n\ngoal (1 subgoal):\n 1. [x].A = [y].[y,x]A", "using abs_fun_eq3[OF pt_var_inst, OF at_var_inst,where x=\"[y,x]A\" and y=A and a=y and b=x]\n  and switch(1)[where y=y and A=A and x=x] and fresh_atm[where a=y and b=x]"], ["proof (prove)\nusing this:\n  y \\<sharp> x \\<and> y \\<sharp> A\n  \\<lbrakk>y \\<noteq> x; [y,x]A = [(y, x)] \\<bullet> A;\n   y \\<sharp> A\\<rbrakk>\n  \\<Longrightarrow> [y].[y,x]A = [x].A\n  y \\<sharp> A \\<Longrightarrow> [y,x]A = [(y, x)] \\<bullet> A\n  y \\<sharp> x = (y \\<noteq> x)\n\ngoal (1 subgoal):\n 1. [x].A = [y].[y,x]A", "by (perm_simp)"], ["proof (state)\nthis:\n  [x].A = [y].[y,x]A\n\ngoal (1 subgoal):\n 1. y \\<sharp> x \\<and> y \\<sharp> A \\<Longrightarrow>\n    F \\<nabla> [x].A = F \\<nabla> [y].[y,x]A", "then"], ["proof (chain)\npicking this:\n  [x].A = [y].[y,x]A", "show ?thesis"], ["proof (prove)\nusing this:\n  [x].A = [y].[y,x]A\n\ngoal (1 subgoal):\n 1. F \\<nabla> [x].A = F \\<nabla> [y].[y,x]A", "using form.inject(3)"], ["proof (prove)\nusing this:\n  [x].A = [y].[y,x]A\n  (?x3.0 \\<nabla> [?x1.0].?x2.0 = ?y3.0 \\<nabla> [?y1.0].?y2.0) =\n  (?x3.0 = ?y3.0 \\<and> [?x1.0].?x2.0 = [?y1.0].?y2.0)\n\ngoal (1 subgoal):\n 1. F \\<nabla> [x].A = F \\<nabla> [y].[y,x]A", "by auto"], ["proof (state)\nthis:\n  F \\<nabla> [x].A = F \\<nabla> [y].[y,x]A\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\\noindent  Using the above lemma, we can change any sequent to an equivalent new sequent which does not contain certain variables.  Therefore, we can extend with any sequent:\n\\<close>"], ["", "lemma extend_for_any_seq:\nfixes S :: \"sequent\"\nassumes rules: \"R1 \\<subseteq> upRules \\<and> R2 \\<subseteq> nprovRules \\<and> R3 \\<subseteq> provRules\"\n    and rules2: \"R = Ax \\<union> R1 \\<union> R2 \\<union> R3\"\n    and rin: \"r \\<in> R\"\nshows \"extendRule S r \\<in> R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "from rin and rules2"], ["proof (chain)\npicking this:\n  r \\<in> R\n  R = Ax \\<union> R1 \\<union> R2 \\<union> R3", "have \"r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3", "by auto"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "assume \"r \\<in> Ax\""], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "have \"extendRule S r \\<in> R*\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "using extRules.id[where r=r and R=R and S=S] and rin"], ["proof (prove)\nusing this:\n  r \\<in> Ax\n  \\<lbrakk>r \\<in> R;\n   case r of (x, xa) \\<Rightarrow> (x, xa) \\<in> Ax\\<rbrakk>\n  \\<Longrightarrow> extendRule S r \\<in>  R*\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "by auto"], ["proof (state)\nthis:\n  extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "}"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow> extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow> extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow> extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "assume \"r \\<in> R1\""], ["proof (state)\nthis:\n  r \\<in> R1\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R1", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> R1\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "using rules"], ["proof (prove)\nusing this:\n  r \\<in> R1\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and> R3 \\<subseteq> provRules\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> upRules", "have \"extendRule S r \\<in> R*\""], ["proof (prove)\nusing this:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "using extRules.sc[where r=r and R=R and S=S] and rin"], ["proof (prove)\nusing this:\n  r \\<in> upRules\n  \\<lbrakk>r \\<in> R;\n   case r of (x, xa) \\<Rightarrow> (x, xa) \\<in> upRules\\<rbrakk>\n  \\<Longrightarrow> extendRule S r \\<in>  R*\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "by auto"], ["proof (state)\nthis:\n  extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "}"], ["proof (state)\nthis:\n  r \\<in> R1 \\<Longrightarrow> extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> R1 \\<Longrightarrow> extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "{"], ["proof (state)\nthis:\n  r \\<in> R1 \\<Longrightarrow> extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "assume \"r \\<in> R2\""], ["proof (state)\nthis:\n  r \\<in> R2\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R2", "have \"r \\<in> nprovRules\""], ["proof (prove)\nusing this:\n  r \\<in> R2\n\ngoal (1 subgoal):\n 1. r \\<in> nprovRules", "using rules"], ["proof (prove)\nusing this:\n  r \\<in> R2\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and> R3 \\<subseteq> provRules\n\ngoal (1 subgoal):\n 1. r \\<in> nprovRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> nprovRules", "have \"extendRule S r \\<in> R*\""], ["proof (prove)\nusing this:\n  r \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "using extRules.np[where r=r and R=R and S=S] and rin"], ["proof (prove)\nusing this:\n  r \\<in> nprovRules\n  \\<lbrakk>r \\<in> R;\n   case r of (x, xa) \\<Rightarrow> (x, xa) \\<in> nprovRules\\<rbrakk>\n  \\<Longrightarrow> extendRule S r \\<in>  R*\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "by auto"], ["proof (state)\nthis:\n  extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "}"], ["proof (state)\nthis:\n  r \\<in> R2 \\<Longrightarrow> extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> R2 \\<Longrightarrow> extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "{"], ["proof (state)\nthis:\n  r \\<in> R2 \\<Longrightarrow> extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "(*>*)"], ["proof (state)\nthis:\n  r \\<in> R2 \\<Longrightarrow> extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "txt\\<open>\\noindent  We only show the interesting case: where the last inference had a freshness proviso:\\<close>"], ["proof (state)\nthis:\n  r \\<in> R2 \\<Longrightarrow> extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "assume \"r \\<in> R3\""], ["proof (state)\nthis:\n  r \\<in> R3\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R3", "have \"r \\<in> provRules\""], ["proof (prove)\nusing this:\n  r \\<in> R3\n\ngoal (1 subgoal):\n 1. r \\<in> provRules", "using rules"], ["proof (prove)\nusing this:\n  r \\<in> R3\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and> R3 \\<subseteq> provRules\n\ngoal (1 subgoal):\n 1. r \\<in> provRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> provRules\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "obtain ps c where \"r = (ps,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps c. r = (ps, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "then"], ["proof (chain)\npicking this:\n  r = (ps, c)", "have r1: \"(ps,c) \\<in> R\" \n          and r2: \"(ps,c) \\<in> provRules\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. (ps, c) \\<in> R &&& (ps, c) \\<in> provRules", "using \\<open>r \\<in> provRules\\<close> and rin"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> provRules\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. (ps, c) \\<in> R &&& (ps, c) \\<in> provRules", "by auto"], ["proof (state)\nthis:\n  (ps, c) \\<in> R\n  (ps, c) \\<in> provRules\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "with \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  (ps, c) \\<in> R\n  (ps, c) \\<in> provRules", "obtain F x A \n       where \"(c = ( \\<Empt> \\<Rightarrow>* \\<LM>F \\<nabla> [x].A\\<RM>) \\<or> \n                 c = ( \\<LM>F \\<nabla> [x].A\\<RM> \\<Rightarrow>* \\<Empt>)) \\<and> x \\<sharp> set_of_prem ( ps - A )\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  (ps, c) \\<in> R\n  (ps, c) \\<in> provRules\n\ngoal (1 subgoal):\n 1. (\\<And>F x A.\n        (c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n         c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n        x \\<sharp> set_of_prem ( ps - A ) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using provRuleCharacterise(*<*)[where Ps=ps and C=c](*>*) and \\<open>r \\<in> provRules\\<close>"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  (ps, c) \\<in> R\n  (ps, c) \\<in> provRules\n  (ps, c) \\<in> provRules \\<Longrightarrow>\n  \\<exists>F x A.\n     (c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n      c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n     x \\<sharp> set_of_prem ( ps - A )\n  r \\<in> provRules\n\ngoal (1 subgoal):\n 1. (\\<And>F x A.\n        (c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n         c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n        x \\<sharp> set_of_prem ( ps - A ) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n   c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n  x \\<sharp> set_of_prem ( ps - A )\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "then"], ["proof (chain)\npicking this:\n  (c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n   c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n  x \\<sharp> set_of_prem ( ps - A )", "have \"mset c = \\<LM> F \\<nabla> [x].A \\<RM> \\<and> x \\<sharp> set_of_prem (ps - A)\""], ["proof (prove)\nusing this:\n  (c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n   c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n  x \\<sharp> set_of_prem ( ps - A )\n\ngoal (1 subgoal):\n 1. NominalSequents.mset c = \\<LM> F \\<nabla> [x].A  \\<RM> \\<and>\n    x \\<sharp> set_of_prem ( ps - A )", "(*<*)"], ["proof (prove)\nusing this:\n  (c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n   c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n  x \\<sharp> set_of_prem ( ps - A )\n\ngoal (1 subgoal):\n 1. NominalSequents.mset c = \\<LM> F \\<nabla> [x].A  \\<RM> \\<and>\n    x \\<sharp> set_of_prem ( ps - A )", "using mset.simps"], ["proof (prove)\nusing this:\n  (c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n   c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n  x \\<sharp> set_of_prem ( ps - A )\n  NominalSequents.mset ( ?ant \\<Rightarrow>* ?suc) = ?ant + ?suc\n\ngoal (1 subgoal):\n 1. NominalSequents.mset c = \\<LM> F \\<nabla> [x].A  \\<RM> \\<and>\n    x \\<sharp> set_of_prem ( ps - A )", "(*>*)"], ["proof (prove)\nusing this:\n  (c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n   c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n  x \\<sharp> set_of_prem ( ps - A )\n  NominalSequents.mset ( ?ant \\<Rightarrow>* ?suc) = ?ant + ?suc\n\ngoal (1 subgoal):\n 1. NominalSequents.mset c = \\<LM> F \\<nabla> [x].A  \\<RM> \\<and>\n    x \\<sharp> set_of_prem ( ps - A )", "by auto"], ["proof (state)\nthis:\n  NominalSequents.mset c = \\<LM> F \\<nabla> [x].A  \\<RM> \\<and>\n  x \\<sharp> set_of_prem ( ps - A )\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "moreover"], ["proof (state)\nthis:\n  NominalSequents.mset c = \\<LM> F \\<nabla> [x].A  \\<RM> \\<and>\n  x \\<sharp> set_of_prem ( ps - A )\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "obtain y where fr:  \"y \\<sharp> x \\<and> \n                                  y \\<sharp> A \\<and> \n                                  y \\<sharp> set_of_seq S \\<and> \n                                 (y :: var) \\<sharp> set_of_prem (ps-A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y \\<sharp> x \\<and>\n        y \\<sharp> A \\<and>\n        y \\<sharp> NominalSequents.set_of_seq S \\<and>\n        y \\<sharp> set_of_prem ( ps - A ) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using getFresh(*<*)[where x=x and A=A and S=S and Ps=\"ps-A\"]"], ["proof (prove)\nusing this:\n  \\<exists>y.\n     y \\<sharp> x \\<and>\n     y \\<sharp> A \\<and>\n     y \\<sharp> NominalSequents.set_of_seq S \\<and>\n     y \\<sharp> set_of_prem ( ps - A )\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y \\<sharp> x \\<and>\n        y \\<sharp> A \\<and>\n        y \\<sharp> NominalSequents.set_of_seq S \\<and>\n        y \\<sharp> set_of_prem ( ps - A ) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "(*>*)"], ["proof (prove)\nusing this:\n  \\<exists>y.\n     y \\<sharp> x \\<and>\n     y \\<sharp> A \\<and>\n     y \\<sharp> NominalSequents.set_of_seq S \\<and>\n     y \\<sharp> set_of_prem ( ps - A )\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y \\<sharp> x \\<and>\n        y \\<sharp> A \\<and>\n        y \\<sharp> NominalSequents.set_of_seq S \\<and>\n        y \\<sharp> set_of_prem ( ps - A ) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<sharp> x \\<and>\n  y \\<sharp> A \\<and>\n  y \\<sharp> NominalSequents.set_of_seq S \\<and>\n  y \\<sharp> set_of_prem ( ps - A )\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "then"], ["proof (chain)\npicking this:\n  y \\<sharp> x \\<and>\n  y \\<sharp> A \\<and>\n  y \\<sharp> NominalSequents.set_of_seq S \\<and>\n  y \\<sharp> set_of_prem ( ps - A )", "have fr2: \"y \\<sharp> set_of_seq S\""], ["proof (prove)\nusing this:\n  y \\<sharp> x \\<and>\n  y \\<sharp> A \\<and>\n  y \\<sharp> NominalSequents.set_of_seq S \\<and>\n  y \\<sharp> set_of_prem ( ps - A )\n\ngoal (1 subgoal):\n 1. y \\<sharp> NominalSequents.set_of_seq S", "by auto"], ["proof (state)\nthis:\n  y \\<sharp> NominalSequents.set_of_seq S\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "ultimately"], ["proof (chain)\npicking this:\n  NominalSequents.mset c = \\<LM> F \\<nabla> [x].A  \\<RM> \\<and>\n  x \\<sharp> set_of_prem ( ps - A )\n  y \\<sharp> NominalSequents.set_of_seq S", "have \"mset c = \\<LM> F \\<nabla> [y].([y,x]A) \\<RM> \\<and> y \\<sharp> set_of_prem (ps - A)\""], ["proof (prove)\nusing this:\n  NominalSequents.mset c = \\<LM> F \\<nabla> [x].A  \\<RM> \\<and>\n  x \\<sharp> set_of_prem ( ps - A )\n  y \\<sharp> NominalSequents.set_of_seq S\n\ngoal (1 subgoal):\n 1. NominalSequents.mset c = \\<LM> F \\<nabla> [y].[y,x]A  \\<RM> \\<and>\n    y \\<sharp> set_of_prem ( ps - A )", "using formSubst and fr"], ["proof (prove)\nusing this:\n  NominalSequents.mset c = \\<LM> F \\<nabla> [x].A  \\<RM> \\<and>\n  x \\<sharp> set_of_prem ( ps - A )\n  y \\<sharp> NominalSequents.set_of_seq S\n  ?y \\<sharp> ?x \\<and> ?y \\<sharp> ?A \\<Longrightarrow>\n  ?F \\<nabla> [?x].?A = ?F \\<nabla> [?y].[?y,?x]?A\n  y \\<sharp> x \\<and>\n  y \\<sharp> A \\<and>\n  y \\<sharp> NominalSequents.set_of_seq S \\<and>\n  y \\<sharp> set_of_prem ( ps - A )\n\ngoal (1 subgoal):\n 1. NominalSequents.mset c = \\<LM> F \\<nabla> [y].[y,x]A  \\<RM> \\<and>\n    y \\<sharp> set_of_prem ( ps - A )", "by auto"], ["proof (state)\nthis:\n  NominalSequents.mset c = \\<LM> F \\<nabla> [y].[y,x]A  \\<RM> \\<and>\n  y \\<sharp> set_of_prem ( ps - A )\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "then"], ["proof (chain)\npicking this:\n  NominalSequents.mset c = \\<LM> F \\<nabla> [y].[y,x]A  \\<RM> \\<and>\n  y \\<sharp> set_of_prem ( ps - A )", "have \"mset c = \\<LM> F \\<nabla> [y].([y,x]A) \\<RM>\""], ["proof (prove)\nusing this:\n  NominalSequents.mset c = \\<LM> F \\<nabla> [y].[y,x]A  \\<RM> \\<and>\n  y \\<sharp> set_of_prem ( ps - A )\n\ngoal (1 subgoal):\n 1. NominalSequents.mset c = \\<LM> F \\<nabla> [y].[y,x]A  \\<RM>", "by auto"], ["proof (state)\nthis:\n  NominalSequents.mset c = \\<LM> F \\<nabla> [y].[y,x]A  \\<RM>\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "then"], ["proof (chain)\npicking this:\n  NominalSequents.mset c = \\<LM> F \\<nabla> [y].[y,x]A  \\<RM>", "have \"extendRule S (ps,c) \\<in> R*\""], ["proof (prove)\nusing this:\n  NominalSequents.mset c = \\<LM> F \\<nabla> [y].[y,x]A  \\<RM>\n\ngoal (1 subgoal):\n 1. extendRule S (ps, c) \\<in>  R*", "using r1 and r2 and fr2\n         and extRules.p(*<*)[where ps=ps and c=c and R=R and F=F and x=y and A=\"[y,x]A\" and S=S]"], ["proof (prove)\nusing this:\n  NominalSequents.mset c = \\<LM> F \\<nabla> [y].[y,x]A  \\<RM>\n  (ps, c) \\<in> R\n  (ps, c) \\<in> provRules\n  y \\<sharp> NominalSequents.set_of_seq S\n  \\<lbrakk>(ps, c) \\<in> R; (ps, c) \\<in> provRules;\n   NominalSequents.mset c = \\<LM> F \\<nabla> [y].[y,x]A  \\<RM>;\n   y \\<sharp> NominalSequents.set_of_seq S\\<rbrakk>\n  \\<Longrightarrow> extendRule S (ps, c) \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S (ps, c) \\<in>  R*", "(*>*)"], ["proof (prove)\nusing this:\n  NominalSequents.mset c = \\<LM> F \\<nabla> [y].[y,x]A  \\<RM>\n  (ps, c) \\<in> R\n  (ps, c) \\<in> provRules\n  y \\<sharp> NominalSequents.set_of_seq S\n  \\<lbrakk>(ps, c) \\<in> R; (ps, c) \\<in> provRules;\n   NominalSequents.mset c = \\<LM> F \\<nabla> [y].[y,x]A  \\<RM>;\n   y \\<sharp> NominalSequents.set_of_seq S\\<rbrakk>\n  \\<Longrightarrow> extendRule S (ps, c) \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S (ps, c) \\<in>  R*", "by auto"], ["proof (state)\nthis:\n  extendRule S (ps, c) \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "then"], ["proof (chain)\npicking this:\n  extendRule S (ps, c) \\<in>  R*", "have \"extendRule S r \\<in> R*\""], ["proof (prove)\nusing this:\n  extendRule S (ps, c) \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  extendRule S (ps, c) \\<in>  R*\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "by simp"], ["proof (state)\nthis:\n  extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "(*<*)"], ["proof (state)\nthis:\n  extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "}"], ["proof (state)\nthis:\n  r \\<in> R3 \\<Longrightarrow> extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  r \\<in> Ax \\<Longrightarrow> extendRule S r \\<in>  R*\n  r \\<in> R1 \\<Longrightarrow> extendRule S r \\<in>  R*\n  r \\<in> R2 \\<Longrightarrow> extendRule S r \\<in>  R*\n  r \\<in> R3 \\<Longrightarrow> extendRule S r \\<in>  R*", "show ?thesis"], ["proof (prove)\nusing this:\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  r \\<in> Ax \\<Longrightarrow> extendRule S r \\<in>  R*\n  r \\<in> R1 \\<Longrightarrow> extendRule S r \\<in>  R*\n  r \\<in> R2 \\<Longrightarrow> extendRule S r \\<in>  R*\n  r \\<in> R3 \\<Longrightarrow> extendRule S r \\<in>  R*\n\ngoal (1 subgoal):\n 1. extendRule S r \\<in>  R*", "by blast"], ["proof (state)\nthis:\n  extendRule S r \\<in>  R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Constructing the rule set we will use.  It contains all axioms, but only a subset\n   of the possible logical rules. *)"], ["", "lemma ruleSet:\nassumes \"R1 \\<subseteq> upRules\" and \"R2 \\<subseteq> nprovRules\" and \"R3 \\<subseteq> provRules\"\n    and \"R = Ax \\<union> R1 \\<union> R2 \\<union> R3\"\n    and \"(Ps,C) \\<in> R*\"\nshows \"\\<exists> S r. extendRule S r = (Ps,C) \\<and> (r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and>\n       (r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and>\n       (r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax)", "from \\<open>(Ps,C) \\<in> R*\\<close>"], ["proof (chain)\npicking this:\n  (Ps, C) \\<in>  R*", "have \"\\<exists> S r. extendRule S r = (Ps,C) \\<and> r \\<in> R\""], ["proof (prove)\nusing this:\n  (Ps, C) \\<in>  R*\n\ngoal (1 subgoal):\n 1. \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R", "by (cases) auto"], ["proof (state)\nthis:\n  \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and>\n       (r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax)", "then"], ["proof (chain)\npicking this:\n  \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R", "obtain S r where \"(Ps,C) = extendRule S r\" and \"r \\<in> R\""], ["proof (prove)\nusing this:\n  \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>(Ps, C) = extendRule S r; r \\<in> R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S a b.\n       \\<lbrakk>\\<And>S a b.\n                   \\<lbrakk>(Ps, C) = extendRule S (a, b);\n                    (a, b) \\<in> R\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        extendRule S (a, b) = (Ps, C); (a, b) \\<in> R\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (drule_tac x=S in meta_spec,drule_tac x=a in meta_spec, drule_tac x=b in meta_spec) auto"], ["proof (state)\nthis:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and>\n       (r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax)", "moreover"], ["proof (state)\nthis:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and>\n       (r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax)", "from \\<open>r \\<in> R\\<close> and \\<open>R = Ax \\<union> R1 \\<union> R2 \\<union> R3\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> R\n  R = Ax \\<union> R1 \\<union> R2 \\<union> R3", "have \"r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax", "by blast"], ["proof (state)\nthis:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and>\n       (r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax)", "ultimately"], ["proof (chain)\npicking this:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax", "show ?thesis"], ["proof (prove)\nusing this:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and>\n       (r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax)", "by (rule_tac x=S in exI,rule_tac x=r in exI) (auto)"], ["proof (state)\nthis:\n  \\<exists>S r.\n     extendRule S r = (Ps, C) \\<and>\n     (r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Non-principal rule lemma *)"], ["", "lemma nonPrincipalInvertRight:\nassumes \"R1 \\<subseteq> upRules\" and \"R2 \\<subseteq> nprovRules\" and \"R3 \\<subseteq> provRules\"\n    and \"R = Ax \\<union> R1 \\<union> R2 \\<union> R3\" and \"r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\" and \"r = (ps,c)\"\n    and IH: \"\\<forall>m<n. \\<forall>\\<Gamma> \\<Delta>. ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, m) \\<in> derivable R* \\<longrightarrow>\n              (\\<forall>r' \\<in> R. rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')) \\<longrightarrow>\n              (\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>') \\<longrightarrow>\n              (\\<exists>m'\\<le>m. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m') \\<in> derivable R*)\"\n    and a': \"(\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A,n) \\<in> derivable R*\" \n    and b': \"\\<forall> r' \\<in> R. rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\"\n    and c': \"\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\"\n    and np: \"\\<not> rightPrincipal r (F \\<nabla> [x].A)\"\n    and ext: \"extendRule S r = (Ps,\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\"\n    and num: \"n = n' + 1\"\n    and all: \"\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\"\n    and nonempty: \"Ps \\<noteq> []\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "from ext"], ["proof (chain)\npicking this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)", "obtain \\<Phi> \\<Psi> where \"S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Phi> \\<Psi>.\n        S = ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases S) (auto)"], ["proof (state)\nthis:\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "from \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)", "obtain G H where \"c = (G \\<Rightarrow>* H)\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. (\\<And>G H.\n        c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases c) (auto)"], ["proof (state)\nthis:\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  c = ( G \\<Rightarrow>* H)", "have \"\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\""], ["proof (prove)\nusing this:\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "using \\<open>r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<close>"], ["proof (prove)\nusing this:\n  c = ( G \\<Rightarrow>* H)\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "assume \"r \\<in> R1\""], ["proof (state)\nthis:\n  r \\<in> R1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "then"], ["proof (chain)\npicking this:\n  r \\<in> R1", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> R1\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "using \\<open>R1 \\<subseteq> upRules\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> R1\n  R1 \\<subseteq> upRules\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "with \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  r \\<in> upRules", "obtain T Ts where \"c = (\\<Empt> \\<Rightarrow>* \\<LM>Cpd0 T Ts\\<RM>) \\<or> c = (\\<LM>Cpd0 T Ts\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. (\\<And>T Ts.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n        c =\n        ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using propRuleCharacterise[where Ps=ps and C=c]"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> upRules\n  (ps, c) \\<in> upRules \\<Longrightarrow>\n  \\<exists>F Fs.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 F Fs  \\<RM>) \\<or>\n     c = ( \\<LM> Cpd0 F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. (\\<And>T Ts.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n        c =\n        ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "moreover"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "{"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "assume \"c = (\\<Empt> \\<Rightarrow>* \\<LM>Cpd0 T Ts\\<RM>)\""], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "with \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (chain)\npicking this:\n  c = ( G \\<Rightarrow>* H)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>)", "have \"\\<LM> F \\<nabla> [x].A \\<RM> \\<noteq> H\""], ["proof (prove)\nusing this:\n  c = ( G \\<Rightarrow>* H)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "by auto"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "}"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "moreover"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "{"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "assume \"c = (\\<LM>Cpd0 T Ts\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (state)\nthis:\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "then"], ["proof (chain)\npicking this:\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"\\<LM>F \\<nabla> [x].A \\<RM> \\<noteq> H\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "using \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "by auto"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "}"], ["proof (state)\nthis:\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "ultimately"], ["proof (chain)\npicking this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "have \"\\<LM> F \\<nabla> [x].A \\<RM> \\<noteq> H\""], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "by blast"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "}"], ["proof (state)\nthis:\n  r \\<in> R1 \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "moreover"], ["proof (state)\nthis:\n  r \\<in> R1 \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "{"], ["proof (state)\nthis:\n  r \\<in> R1 \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "assume \"r \\<in> R2 \\<or> r \\<in> R3\""], ["proof (state)\nthis:\n  r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "then"], ["proof (chain)\npicking this:\n  r \\<in> R2 \\<or> r \\<in> R3", "have \"r \\<in> provRules \\<or> r \\<in> nprovRules\""], ["proof (prove)\nusing this:\n  r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (1 subgoal):\n 1. r \\<in> provRules \\<or> r \\<in> nprovRules", "using \\<open>R2 \\<subseteq> nprovRules\\<close> and \\<open>R3 \\<subseteq> provRules\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> R2 \\<or> r \\<in> R3\n  R2 \\<subseteq> nprovRules\n  R3 \\<subseteq> provRules\n\ngoal (1 subgoal):\n 1. r \\<in> provRules \\<or> r \\<in> nprovRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> provRules \\<or> r \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "with \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  r \\<in> provRules \\<or> r \\<in> nprovRules", "obtain T y B where \"c = (\\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B \\<RM>) \\<or> c = (\\<LM> T \\<nabla> [y].B\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> provRules \\<or> r \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. (\\<And>T y B.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<or>\n        c =\n        ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using provRuleCharacterise[where Ps=ps and C=c]\n            and nprovRuleCharacterise[where Ps=ps and C=c]"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> provRules \\<or> r \\<in> nprovRules\n  (ps, c) \\<in> provRules \\<Longrightarrow>\n  \\<exists>F x A.\n     (c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n      c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n     x \\<sharp> set_of_prem ( ps - A )\n  (ps, c) \\<in> nprovRules \\<Longrightarrow>\n  \\<exists>F x A.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n     c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. (\\<And>T y B.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<or>\n        c =\n        ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<or>\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "moreover"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<or>\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "{"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<or>\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "assume \"c = (\\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B\\<RM>)\""], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "then"], ["proof (chain)\npicking this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>)", "have \"rightPrincipal r (T \\<nabla> [y].B)\""], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>)\n\ngoal (1 subgoal):\n 1. rightPrincipal r (T \\<nabla> [y].B)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. rightPrincipal r (T \\<nabla> [y].B)", "by auto"], ["proof (state)\nthis:\n  rightPrincipal r (T \\<nabla> [y].B)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "with \\<open>\\<not> rightPrincipal r (F \\<nabla> [x].A)\\<close>"], ["proof (chain)\npicking this:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n  rightPrincipal r (T \\<nabla> [y].B)", "have \"T \\<nabla> [y].B \\<noteq> F \\<nabla> [x].A\""], ["proof (prove)\nusing this:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n  rightPrincipal r (T \\<nabla> [y].B)\n\ngoal (1 subgoal):\n 1. T \\<nabla> [y].B \\<noteq> F \\<nabla> [x].A", "by auto"], ["proof (state)\nthis:\n  T \\<nabla> [y].B \\<noteq> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "with \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (chain)\npicking this:\n  c = ( G \\<Rightarrow>* H)\n  T \\<nabla> [y].B \\<noteq> F \\<nabla> [x].A", "have \"\\<LM> F \\<nabla> [x].A \\<RM> \\<noteq> H\""], ["proof (prove)\nusing this:\n  c = ( G \\<Rightarrow>* H)\n  T \\<nabla> [y].B \\<noteq> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "using \\<open>c = (\\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B \\<RM>)\\<close>"], ["proof (prove)\nusing this:\n  c = ( G \\<Rightarrow>* H)\n  T \\<nabla> [y].B \\<noteq> F \\<nabla> [x].A\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "by auto"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "}"], ["proof (state)\nthis:\n  c =\n  ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "moreover"], ["proof (state)\nthis:\n  c =\n  ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "{"], ["proof (state)\nthis:\n  c =\n  ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "assume \"c = (\\<LM>T \\<nabla> [y].B \\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (state)\nthis:\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "then"], ["proof (chain)\npicking this:\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"\\<LM>F \\<nabla> [x].A \\<RM> \\<noteq> H\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "using \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "by auto"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "}"], ["proof (state)\nthis:\n  c =\n  ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "ultimately"], ["proof (chain)\npicking this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<or>\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c =\n  ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n  c =\n  ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "have \"\\<LM> F \\<nabla> [x].A \\<RM> \\<noteq> H\""], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<or>\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c =\n  ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n  c =\n  ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "by blast"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "}"], ["proof (state)\nthis:\n  r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> R1 \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n  r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "show ?thesis"], ["proof (prove)\nusing this:\n  r \\<in> R1 \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n  r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "using \\<open>r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> R1 \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n  r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "by blast"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have \"succ S + succ (snd r) = (\\<Delta> \\<oplus> F \\<nabla> [x].A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ S + succ (snd r) = \\<Delta> \\<oplus> F \\<nabla> [x].A", "using ext and extendRule_def[where forms=S and R=r]\n                   and extend_def[where forms=S and seq=\"snd r\"]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n  extend S (snd r) \\<equiv>\n   antec S + antec (snd r) \\<Rightarrow>* succ S + succ (snd r)\n\ngoal (1 subgoal):\n 1. succ S + succ (snd r) = \\<Delta> \\<oplus> F \\<nabla> [x].A", "by auto"], ["proof (state)\nthis:\n  succ S + succ (snd r) = \\<Delta> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  succ S + succ (snd r) = \\<Delta> \\<oplus> F \\<nabla> [x].A", "have \"\\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A\""], ["proof (prove)\nusing this:\n  succ S + succ (snd r) = \\<Delta> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A", "using \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\\<close> and \\<open>r = (ps,c)\\<close> and \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (prove)\nusing this:\n  succ S + succ (snd r) = \\<Delta> \\<oplus> F \\<nabla> [x].A\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n  r = (ps, c)\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A", "by auto"], ["proof (state)\nthis:\n  \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "from \\<open>r = (ps,c)\\<close> and \\<open>r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<close> and \\<open>R1 \\<subseteq> upRules\\<close> and \\<open>R2 \\<subseteq> nprovRules\\<close>\n              and \\<open>R3 \\<subseteq> provRules\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  R1 \\<subseteq> upRules\n  R2 \\<subseteq> nprovRules\n  R3 \\<subseteq> provRules", "have \"(ps,c) \\<in> upRules \\<or> (ps,c) \\<in> nprovRules \\<or> (ps,c) \\<in> provRules\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  R1 \\<subseteq> upRules\n  R2 \\<subseteq> nprovRules\n  R3 \\<subseteq> provRules\n\ngoal (1 subgoal):\n 1. (ps, c) \\<in> upRules \\<or>\n    (ps, c) \\<in> nprovRules \\<or> (ps, c) \\<in> provRules", "by auto"], ["proof (state)\nthis:\n  (ps, c) \\<in> upRules \\<or>\n  (ps, c) \\<in> nprovRules \\<or> (ps, c) \\<in> provRules\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  (ps, c) \\<in> upRules \\<or>\n  (ps, c) \\<in> nprovRules \\<or> (ps, c) \\<in> provRules", "have \"\\<exists> A. c = (\\<Empt> \\<Rightarrow>* \\<LM>A\\<RM>) \\<or> c = (\\<LM>A\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  (ps, c) \\<in> upRules \\<or>\n  (ps, c) \\<in> nprovRules \\<or> (ps, c) \\<in> provRules\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       c = ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<or>\n       c = ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)", "using propRuleCharacterise[where Ps=ps and C=c]\n       and nprovRuleCharacterise[where Ps=ps and C=c]\n       and provRuleCharacterise[where Ps=ps and C=c]"], ["proof (prove)\nusing this:\n  (ps, c) \\<in> upRules \\<or>\n  (ps, c) \\<in> nprovRules \\<or> (ps, c) \\<in> provRules\n  (ps, c) \\<in> upRules \\<Longrightarrow>\n  \\<exists>F Fs.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 F Fs  \\<RM>) \\<or>\n     c = ( \\<LM> Cpd0 F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n  (ps, c) \\<in> nprovRules \\<Longrightarrow>\n  \\<exists>F x A.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n     c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)\n  (ps, c) \\<in> provRules \\<Longrightarrow>\n  \\<exists>F x A.\n     (c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n      c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n     x \\<sharp> set_of_prem ( ps - A )\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       c = ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<or>\n       c = ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>A.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<or>\n     c = ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>A.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<or>\n     c = ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"H = \\<Empt> \\<or> (\\<exists> A. H = \\<LM>A\\<RM>)\""], ["proof (prove)\nusing this:\n  \\<exists>A.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<or>\n     c = ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)", "using \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>A.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<or>\n     c = ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)", "by auto"], ["proof (state)\nthis:\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n  \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)", "have \"F \\<nabla> [x].A \\<in># \\<Psi>\""], ["proof (prove)\nusing this:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n  \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. F \\<nabla> [x].A \\<in># \\<Psi>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "have \"H = \\<Empt> \\<or> (\\<exists> A. H = \\<LM>A\\<RM>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)", "by fact"], ["proof (state)\nthis:\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "moreover"], ["proof (state)\nthis:\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "{"], ["proof (state)\nthis:\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "assume \"H = \\<Empt>\""], ["proof (state)\nthis:\n  H = \\<Empt>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "then"], ["proof (chain)\npicking this:\n  H = \\<Empt>", "have \"\\<Psi> = \\<Delta> \\<oplus> F \\<nabla> [x].A\""], ["proof (prove)\nusing this:\n  H = \\<Empt>\n\ngoal (1 subgoal):\n 1. \\<Psi> = \\<Delta> \\<oplus> F \\<nabla> [x].A", "using \\<open>\\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A\\<close>"], ["proof (prove)\nusing this:\n  H = \\<Empt>\n  \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<Psi> = \\<Delta> \\<oplus> F \\<nabla> [x].A", "by auto"], ["proof (state)\nthis:\n  \\<Psi> = \\<Delta> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "then"], ["proof (chain)\npicking this:\n  \\<Psi> = \\<Delta> \\<oplus> F \\<nabla> [x].A", "have \"F \\<nabla> [x].A \\<in># \\<Psi>\""], ["proof (prove)\nusing this:\n  \\<Psi> = \\<Delta> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. F \\<nabla> [x].A \\<in># \\<Psi>", "by auto"], ["proof (state)\nthis:\n  F \\<nabla> [x].A \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "}"], ["proof (state)\nthis:\n  H = \\<Empt> \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "moreover"], ["proof (state)\nthis:\n  H = \\<Empt> \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "{"], ["proof (state)\nthis:\n  H = \\<Empt> \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "assume \"\\<exists> A. H = \\<LM>A\\<RM>\""], ["proof (state)\nthis:\n  \\<exists>A. H = \\<LM> A  \\<RM>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "then"], ["proof (chain)\npicking this:\n  \\<exists>A. H = \\<LM> A  \\<RM>", "obtain T where \"H = \\<LM>T\\<RM>\""], ["proof (prove)\nusing this:\n  \\<exists>A. H = \\<LM> A  \\<RM>\n\ngoal (1 subgoal):\n 1. (\\<And>T. H = \\<LM> T  \\<RM> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  H = \\<LM> T  \\<RM>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "then"], ["proof (chain)\npicking this:\n  H = \\<LM> T  \\<RM>", "have \"\\<Psi> \\<oplus> T = \\<Delta> \\<oplus> F \\<nabla> [x].A\""], ["proof (prove)\nusing this:\n  H = \\<LM> T  \\<RM>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<oplus> T = \\<Delta> \\<oplus> F \\<nabla> [x].A", "using \\<open>\\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A\\<close>"], ["proof (prove)\nusing this:\n  H = \\<LM> T  \\<RM>\n  \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<oplus> T = \\<Delta> \\<oplus> F \\<nabla> [x].A", "by auto"], ["proof (state)\nthis:\n  \\<Psi> \\<oplus> T = \\<Delta> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "then"], ["proof (chain)\npicking this:\n  \\<Psi> \\<oplus> T = \\<Delta> \\<oplus> F \\<nabla> [x].A", "have \"set_mset (\\<Psi> \\<oplus> T) = set_mset (\\<Delta> \\<oplus> F \\<nabla> [x].A)\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<oplus> T = \\<Delta> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. set_mset (\\<Psi> \\<oplus> T) =\n    set_mset (\\<Delta> \\<oplus> F \\<nabla> [x].A)", "by auto"], ["proof (state)\nthis:\n  set_mset (\\<Psi> \\<oplus> T) =\n  set_mset (\\<Delta> \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "then"], ["proof (chain)\npicking this:\n  set_mset (\\<Psi> \\<oplus> T) =\n  set_mset (\\<Delta> \\<oplus> F \\<nabla> [x].A)", "have \"set_mset \\<Psi> \\<union> {T} = set_mset \\<Delta> \\<union> {F \\<nabla> [x].A}\""], ["proof (prove)\nusing this:\n  set_mset (\\<Psi> \\<oplus> T) =\n  set_mset (\\<Delta> \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. set_mset \\<Psi> \\<union> {T} =\n    set_mset \\<Delta> \\<union> {F \\<nabla> [x].A}", "by auto"], ["proof (state)\nthis:\n  set_mset \\<Psi> \\<union> {T} =\n  set_mset \\<Delta> \\<union> {F \\<nabla> [x].A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "moreover"], ["proof (state)\nthis:\n  set_mset \\<Psi> \\<union> {T} =\n  set_mset \\<Delta> \\<union> {F \\<nabla> [x].A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "from \\<open>H = \\<LM>T\\<RM>\\<close> and \\<open>\\<LM>F \\<nabla> [x].A\\<RM> \\<noteq> H\\<close>"], ["proof (chain)\npicking this:\n  H = \\<LM> T  \\<RM>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H", "have \"F \\<nabla> [x].A \\<noteq> T\""], ["proof (prove)\nusing this:\n  H = \\<LM> T  \\<RM>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H\n\ngoal (1 subgoal):\n 1. F \\<nabla> [x].A \\<noteq> T", "by auto"], ["proof (state)\nthis:\n  F \\<nabla> [x].A \\<noteq> T\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "ultimately"], ["proof (chain)\npicking this:\n  set_mset \\<Psi> \\<union> {T} =\n  set_mset \\<Delta> \\<union> {F \\<nabla> [x].A}\n  F \\<nabla> [x].A \\<noteq> T", "have \"F \\<nabla> [x].A \\<in> set_mset \\<Psi>\""], ["proof (prove)\nusing this:\n  set_mset \\<Psi> \\<union> {T} =\n  set_mset \\<Delta> \\<union> {F \\<nabla> [x].A}\n  F \\<nabla> [x].A \\<noteq> T\n\ngoal (1 subgoal):\n 1. F \\<nabla> [x].A \\<in># \\<Psi>", "by auto"], ["proof (state)\nthis:\n  F \\<nabla> [x].A \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "then"], ["proof (chain)\npicking this:\n  F \\<nabla> [x].A \\<in># \\<Psi>", "have \"F \\<nabla> [x].A \\<in># \\<Psi>\""], ["proof (prove)\nusing this:\n  F \\<nabla> [x].A \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. F \\<nabla> [x].A \\<in># \\<Psi>", "by auto"], ["proof (state)\nthis:\n  F \\<nabla> [x].A \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "}"], ["proof (state)\nthis:\n  \\<exists>A. H = \\<LM> A  \\<RM> \\<Longrightarrow>\n  F \\<nabla> [x].A \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> H;\n     \\<Psi> + H = \\<Delta> \\<oplus> F \\<nabla> [x].A;\n     H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>", "ultimately"], ["proof (chain)\npicking this:\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n  H = \\<Empt> \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>\n  \\<exists>A. H = \\<LM> A  \\<RM> \\<Longrightarrow>\n  F \\<nabla> [x].A \\<in># \\<Psi>", "show \"F \\<nabla> [x].A \\<in># \\<Psi>\""], ["proof (prove)\nusing this:\n  H = \\<Empt> \\<or> (\\<exists>A. H = \\<LM> A  \\<RM>)\n  H = \\<Empt> \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Psi>\n  \\<exists>A. H = \\<LM> A  \\<RM> \\<Longrightarrow>\n  F \\<nabla> [x].A \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. F \\<nabla> [x].A \\<in># \\<Psi>", "by blast"], ["proof (state)\nthis:\n  F \\<nabla> [x].A \\<in># \\<Psi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F \\<nabla> [x].A \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  F \\<nabla> [x].A \\<in># \\<Psi>", "have \"\\<exists> \\<Psi>1. \\<Psi> = \\<Psi>1 \\<oplus> F \\<nabla> [x].A\""], ["proof (prove)\nusing this:\n  F \\<nabla> [x].A \\<in># \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Psi>1. \\<Psi> = \\<Psi>1 \\<oplus> F \\<nabla> [x].A", "by (rule_tac x=\"\\<Psi> \\<ominus> F \\<nabla> [x].A\" in exI) (auto simp add:multiset_eq_iff)"], ["proof (state)\nthis:\n  \\<exists>\\<Psi>1. \\<Psi> = \\<Psi>1 \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Psi>1. \\<Psi> = \\<Psi>1 \\<oplus> F \\<nabla> [x].A", "obtain \\<Psi>1 where \"S = (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<Psi>1. \\<Psi> = \\<Psi>1 \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Psi>1.\n        S =\n        ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n                                F \\<nabla> [x].A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>\\<Psi>1. \\<Psi> = \\<Psi>1 \\<oplus> F \\<nabla> [x].A\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Psi>1.\n        S =\n        ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n                                F \\<nabla> [x].A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have \"Ps = map (extend S) ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ps = map (extend S) ps", "using \\<open>extendRule S r = (Ps,\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\\<close> and extendRule_def and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  extendRule ?forms ?R \\<equiv>\n  (map (extend ?forms) (fst ?R), extend ?forms (snd ?R))\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. Ps = map (extend S) ps", "by auto"], ["proof (state)\nthis:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  Ps = map (extend S) ps", "have \"\\<forall> p \\<in> set Ps. (\\<exists> p'. p = extend S p')\""], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'", "using ex_map_conv[where ys=Ps and f=\"extend S\"]"], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n  (\\<exists>xs. Ps = map (extend S) xs) =\n  (\\<forall>y\\<in>set Ps. \\<exists>x. y = extend S x)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'", "have \"\\<forall> p \\<in> set Ps. (F \\<nabla> [x].A \\<in># succ p)\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. F \\<nabla> [x].A \\<in># succ p", "using \\<open>F \\<nabla> [x].A \\<in># \\<Psi>\\<close> and \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'\n  F \\<nabla> [x].A \\<in># \\<Psi>\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. F \\<nabla> [x].A \\<in># succ p", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set Ps \\<longrightarrow>\n                   (\\<exists>p'.\n                       x = extend ( \\<Phi> \\<Rightarrow>* \\<Psi>) p');\n        F \\<nabla> [x].A \\<in># \\<Psi>; S = ( \\<Phi> \\<Rightarrow>* \\<Psi>);\n        xa \\<in> set Ps\\<rbrakk>\n       \\<Longrightarrow> F \\<nabla> [x].A \\<in># succ xa", "by (drule_tac x=xa in spec) (auto simp add:extend_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. F \\<nabla> [x].A \\<in># succ p\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. F \\<nabla> [x].A \\<in># succ p", "have a1:\"\\<forall> p \\<in> set Ps. \\<exists> \\<Phi>' \\<Psi>'. p = (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. F \\<nabla> [x].A \\<in># succ p\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)", "using characteriseSeq"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. F \\<nabla> [x].A \\<in># succ p\n  \\<exists>A B. ?C = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>xa.\n                   xa \\<in> set Ps \\<longrightarrow>\n                   F \\<nabla> [x].A \\<in># succ xa;\n        \\<And>C. \\<exists>A B. C = ( A \\<Rightarrow>* B);\n        xa \\<in> set Ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>'.\n                            xa =\n                            ( \\<Phi>' \\<Rightarrow>* add_mset\n                (F \\<nabla> [x].A) \\<Psi>')", "apply (drule_tac x=xa in spec,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>C. \\<exists>A B. C = ( A \\<Rightarrow>* B);\n        xa \\<in> set Ps; F \\<nabla> [x].A \\<in># succ xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>'.\n                            xa =\n                            ( \\<Phi>' \\<Rightarrow>* add_mset\n                (F \\<nabla> [x].A) \\<Psi>')", "apply (rule_tac x=\"antec xa\" in exI,rule_tac x=\"succ xa \\<ominus> F \\<nabla> [x].A\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>C. \\<exists>A B. C = ( A \\<Rightarrow>* B);\n        xa \\<in> set Ps; F \\<nabla> [x].A \\<in># succ xa\\<rbrakk>\n       \\<Longrightarrow> xa =\n                         ( antec\n                            xa \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n         (succ xa \\<ominus> F \\<nabla> [x].A))", "by (drule_tac x=xa in meta_spec) (auto simp add:multiset_eq_iff)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "with all"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)", "have \"\\<forall> p \\<in> set Ps. \\<exists> \\<Phi>' \\<Psi>' n. n\\<le>n' \\<and> (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A,n) \\<in> derivable R* \\<and> p = (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>' n.\n          n \\<le> n' \\<and>\n          ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A, n)\n          \\<in> derivable  R* \\<and>\n          p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)", "by (auto simp add:Ball_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A, n)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A, n)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)", "have a2: \"\\<forall> p \\<in> set Ps. \\<exists> \\<Phi>' \\<Psi>' m. m\\<le>n' \\<and> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',m) \\<in> derivable R* \\<and> p = (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A, n)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>' m.\n          m \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n          \\<in> derivable  R* \\<and>\n          p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)", "using num and b' and IH and c'"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A, n)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n  n = n' + 1\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, m)\n        \\<in> derivable  R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n            \\<in> set (fst r')) \\<longrightarrow>\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>' \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n            \\<in> derivable  R*)\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>' m.\n          m \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n          \\<in> derivable  R* \\<and>\n          p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>xa.\n                   xa \\<in> set Ps \\<longrightarrow>\n                   (\\<exists>\\<Phi>' \\<Psi>' n.\n                       n \\<le> n' \\<and>\n                       ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n           \\<Psi>',\n                        n)\n                       \\<in> derivable  R* \\<and>\n                       xa =\n                       ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n           \\<Psi>'));\n        n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           rightPrincipal (a, b) (F \\<nabla> [x].A) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( \\<Gamma> \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n   \\<Delta>,\n               m)\n              \\<in> derivable  R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable  R*);\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        xa \\<in> set Ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' \\<Rightarrow>* add_mset\n                (F \\<nabla> [x].A) \\<Psi>')", "apply (drule_tac x=xa in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           rightPrincipal (a, b) (F \\<nabla> [x].A) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( \\<Gamma> \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n   \\<Delta>,\n               m)\n              \\<in> derivable  R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable  R*);\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        xa \\<in> set Ps;\n        xa \\<in> set Ps \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>' n.\n            n \\<le> n' \\<and>\n            ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>', n)\n            \\<in> derivable  R* \\<and>\n            xa =\n            ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n\\<Psi>'))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' \\<Rightarrow>* add_mset\n                (F \\<nabla> [x].A) \\<Psi>')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           rightPrincipal (a, b) (F \\<nabla> [x].A) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( \\<Gamma> \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n   \\<Delta>,\n               m)\n              \\<in> derivable  R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable  R*);\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        xa \\<in> set Ps;\n        \\<exists>\\<Phi>' \\<Psi>' n.\n           n \\<le> n' \\<and>\n           ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>', n)\n           \\<in> derivable  R* \\<and>\n           xa =\n           ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n                                     \\<Psi>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' \\<Rightarrow>* add_mset\n                (F \\<nabla> [x].A) \\<Psi>')", "apply hypsubst_thin"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>a b.\n                   (a, b) \\<in> R \\<longrightarrow>\n                   rightPrincipal (a, b)\n                    (F \\<nabla> [x].A) \\<longrightarrow>\n                   ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( \\<Gamma> \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n   \\<Delta>,\n               m)\n              \\<in> derivable  R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable  R*);\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        xa \\<in> set Ps;\n        \\<exists>\\<Phi>' \\<Psi>' n.\n           n \\<le> n' \\<and>\n           ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>', n)\n           \\<in> derivable  R* \\<and>\n           xa =\n           ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n                                     \\<Psi>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' \\<Rightarrow>* add_mset\n                (F \\<nabla> [x].A) \\<Psi>')", "apply (elim exE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>\\<forall>a b.\n                   (a, b) \\<in> R \\<longrightarrow>\n                   rightPrincipal (a, b)\n                    (F \\<nabla> [x].A) \\<longrightarrow>\n                   ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( \\<Gamma> \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n   \\<Delta>,\n               m)\n              \\<in> derivable  R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable  R*);\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        xa \\<in> set Ps; n \\<le> n';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>', n)\n        \\<in> derivable  R*;\n        xa =\n        ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n                                  \\<Psi>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' \\<Rightarrow>* add_mset\n                (F \\<nabla> [x].A) \\<Psi>')", "apply (drule_tac x=n in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>\\<forall>a b.\n                   (a, b) \\<in> R \\<longrightarrow>\n                   rightPrincipal (a, b)\n                    (F \\<nabla> [x].A) \\<longrightarrow>\n                   ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        xa \\<in> set Ps; n \\<le> n';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>', n)\n        \\<in> derivable  R*;\n        xa = ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>');\n        n < Suc n' \\<longrightarrow>\n        (\\<forall>\\<Gamma> \\<Delta>.\n            ( \\<Gamma> \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Delta>,\n             n)\n            \\<in> derivable  R* \\<longrightarrow>\n            (\\<exists>m'\\<le>n.\n                ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                 m')\n                \\<in> derivable  R*))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' \\<Rightarrow>* add_mset\n                (F \\<nabla> [x].A) \\<Psi>')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>\\<forall>a b.\n                   (a, b) \\<in> R \\<longrightarrow>\n                   rightPrincipal (a, b)\n                    (F \\<nabla> [x].A) \\<longrightarrow>\n                   ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>', n)\n        \\<in> derivable  R*;\n        xa = ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>');\n        \\<forall>\\<Gamma> \\<Delta>.\n           ( \\<Gamma> \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Delta>,\n            n)\n           \\<in> derivable  R* \\<longrightarrow>\n           (\\<exists>m'\\<le>n.\n               ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                m')\n               \\<in> derivable  R*)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R*", "apply (drule_tac x=\\<Phi>' in spec,drule_tac x=\\<Psi>' in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>\\<forall>a b.\n                   (a, b) \\<in> R \\<longrightarrow>\n                   rightPrincipal (a, b)\n                    (F \\<nabla> [x].A) \\<longrightarrow>\n                   ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>', n)\n        \\<in> derivable  R*;\n        xa = ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>');\n        ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>', n)\n        \\<in> derivable  R* \\<longrightarrow>\n        (\\<exists>m'\\<le>n.\n            ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m')\n            \\<in> derivable  R*)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R*", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>\\<forall>a b.\n                   (a, b) \\<in> R \\<longrightarrow>\n                   rightPrincipal (a, b)\n                    (F \\<nabla> [x].A) \\<longrightarrow>\n                   ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>', n)\n        \\<in> derivable  R*;\n        xa = ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>');\n        \\<exists>m'\\<le>n.\n           ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m')\n           \\<in> derivable  R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R*", "apply (elim exE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>' n m'.\n       \\<lbrakk>\\<forall>a b.\n                   (a, b) \\<in> R \\<longrightarrow>\n                   rightPrincipal (a, b)\n                    (F \\<nabla> [x].A) \\<longrightarrow>\n                   ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>', n)\n        \\<in> derivable  R*;\n        xa = ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>');\n        m' \\<le> n;\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m')\n        \\<in> derivable  R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R*", "by (rule_tac x=m' in exI) (arith)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' m.\n        m \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "obtain Ps' where eq: \"Ps' = map (extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Ps'.\n        Ps' =\n        map (extend\n              ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'))\n         ps \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps' =\n  map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have \"length Ps = length Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length Ps = length Ps'", "using \\<open>Ps' = map (extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\\<close>\n                              and \\<open>Ps = map (extend S) ps\\<close>"], ["proof (prove)\nusing this:\n  Ps' =\n  map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. length Ps = length Ps'", "by auto"], ["proof (state)\nthis:\n  length Ps = length Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  length Ps = length Ps'", "have \"Ps' \\<noteq> []\""], ["proof (prove)\nusing this:\n  length Ps = length Ps'\n\ngoal (1 subgoal):\n 1. Ps' \\<noteq> []", "using nonempty"], ["proof (prove)\nusing this:\n  length Ps = length Ps'\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. Ps' \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  Ps' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "from \\<open>r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3", "have \"r \\<in> R\""], ["proof (prove)\nusing this:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (1 subgoal):\n 1. r \\<in> R", "using \\<open>R = Ax \\<union> R1 \\<union> R2 \\<union> R3\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. r \\<in> R", "by auto"], ["proof (state)\nthis:\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R", "have \"extendRule (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r \\<in> R*\""], ["proof (prove)\nusing this:\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r\n    \\<in>  R*", "using \\<open>R = Ax \\<union> R1 \\<union> R2 \\<union> R3\\<close>\n     and extend_for_any_seq[where ?R1.0=R1 and ?R2.0=R2 and ?R3.0=R3 and R=R and r=r and S=\"\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'\"]\n     and \\<open>R1 \\<subseteq> upRules\\<close> and \\<open>R2 \\<subseteq> nprovRules\\<close> and \\<open>R3 \\<subseteq> provRules\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> R\n  R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<lbrakk>R1 \\<subseteq> upRules \\<and>\n           R2 \\<subseteq> nprovRules \\<and> R3 \\<subseteq> provRules;\n   R = Ax \\<union> R1 \\<union> R2 \\<union> R3; r \\<in> R\\<rbrakk>\n  \\<Longrightarrow> extendRule\n                     ( \\<Phi> +\n                       \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n                     r\n                    \\<in>  R*\n  R1 \\<subseteq> upRules\n  R2 \\<subseteq> nprovRules\n  R3 \\<subseteq> provRules\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r\n    \\<in>  R*", "by auto"], ["proof (state)\nthis:\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r\n  \\<in>  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r\n  \\<in>  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have \"extendRule (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r = (Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r =\n    (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "using \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\\<close> and \\<open>extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\\<close>\n         and \\<open>r = (ps,c)\\<close> and eq"], ["proof (prove)\nusing this:\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r = (ps, c)\n  Ps' =\n  map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r =\n    (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "by (auto simp add:extendRule_def extend_def union_ac)"], ["proof (state)\nthis:\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r =\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r\n  \\<in>  R*\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r =\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "have \"(Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> R*\""], ["proof (prove)\nusing this:\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r\n  \\<in>  R*\n  extendRule ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') r =\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n\ngoal (1 subgoal):\n 1. (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n    \\<in>  R*", "by simp"], ["proof (state)\nthis:\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in>  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have c1:\"\\<forall> p \\<in> set ps. extend S p \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps. extend S p \\<in> set Ps", "using \\<open>Ps = map (extend S) ps\\<close>"], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps. extend S p \\<in> set Ps", "by (simp add:Ball_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps. extend S p \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have c2:\"\\<forall> p \\<in> set ps. extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p \\<in> set Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n       \\<in> set Ps'", "using eq"], ["proof (prove)\nusing this:\n  Ps' =\n  map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n       \\<in> set Ps'", "by (simp add:Ball_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n     \\<in> set Ps'", "have eq2:\"\\<forall> p \\<in> set Ps'. \\<exists> \\<Phi>' \\<Psi>'. p = (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "using eq"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n     \\<in> set Ps'\n  Ps' =\n  map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "by (auto simp add: extend_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have d1:\"\\<forall> p \\<in> set Ps. \\<exists> p' \\<in> set ps. p = extend S p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'", "using \\<open>Ps = map (extend S) ps\\<close>"], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'", "have \"\\<forall> p \\<in> set Ps. \\<exists> p'. p' \\<in> set Ps'\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'", "using c2"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have d2: \"\\<forall> p \\<in> set Ps'. \\<exists> p' \\<in> set ps. p = extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>p'\\<in>set ps.\n          p =\n          extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'", "using eq"], ["proof (prove)\nusing this:\n  Ps' =\n  map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>p'\\<in>set ps.\n          p =\n          extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'", "have \"\\<forall> p \\<in> set Ps'. \\<exists> p'. p' \\<in> set Ps\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'. \\<exists>p'. p' \\<in> set Ps", "using c1"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'\n  \\<forall>p\\<in>set ps. extend S p \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'. \\<exists>p'. p' \\<in> set Ps", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'. \\<exists>p'. p' \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have \"\\<forall> \\<Phi>' \\<Psi>'. (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) \\<in> set Ps \\<longrightarrow> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "fix \\<Phi>' \\<Psi>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "assume \"(\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) \\<in> set Ps\""], ["proof (state)\nthis:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) \\<in> set Ps", "have \"\\<exists> p \\<in> set ps. extend (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) p = (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) p =\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)", "using \\<open>Ps = map (extend S) ps\\<close> and \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\\<close> and a1 and d1"], ["proof (prove)\nusing this:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) \\<in> set Ps\n  Ps = map (extend S) ps\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) p =\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)", "apply (simp only:Ball_def Bex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n             \\<in> set (map (extend\n                              ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n                F \\<nabla> [x].A))\n                         ps);\n     Ps =\n     map (extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A))\n      ps;\n     S = ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A);\n     \\<forall>xa.\n        xa \\<in> set (map (extend\n                            ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n              F \\<nabla> [x].A))\n                       ps) \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            xa =\n            ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A));\n     \\<forall>xa.\n        xa \\<in> set (map (extend\n                            ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n              F \\<nabla> [x].A))\n                       ps) \\<longrightarrow>\n        (\\<exists>xb.\n            xb \\<in> set ps \\<and>\n            xa =\n            extend\n             ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n             xb)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n            F \\<nabla> [x].A)\n                          xa =\n                         ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus>\n            F \\<nabla> [x].A)", "apply (drule_tac x=\" \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n             \\<in> set (map (extend\n                              ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n                F \\<nabla> [x].A))\n                         ps);\n     Ps =\n     map (extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A))\n      ps;\n     S = ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A);\n     \\<forall>xa.\n        xa \\<in> set (map (extend\n                            ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n              F \\<nabla> [x].A))\n                       ps) \\<longrightarrow>\n        (\\<exists>xb.\n            xb \\<in> set ps \\<and>\n            xa =\n            extend\n             ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) xb);\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n     \\<in> set (map (extend\n                      ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n        F \\<nabla> [x].A))\n                 ps) \\<longrightarrow>\n     (\\<exists>\\<Phi>'' \\<Psi>''.\n         ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n         ( \\<Phi>'' \\<Rightarrow>* \\<Psi>'' \\<oplus>\n                                   F \\<nabla> [x].A))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus>\n            F \\<nabla> [x].A)\n                          xa =\n                         ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus>\n            F \\<nabla> [x].A)", "by (drule_tac x=\"\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A\" in spec) (auto)"], ["proof (state)\nthis:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) p =\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) p =\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)", "obtain p where t:\"p \\<in> set ps \\<and> (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) = extend (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) p\""], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) p =\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> set ps \\<and>\n        ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n        extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n         p \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>p.\n                   p \\<in> set ps \\<and>\n                   ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n       \\<Psi>') =\n                   extend\n                    ( \\<Phi> \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n       \\<Psi>1)\n                    p \\<Longrightarrow>\n                   thesis;\n        p \\<in> set ps;\n        extend ( \\<Phi> \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>1)\n         p =\n        ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n                                  \\<Psi>')\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (drule_tac x=p in meta_spec) (simp)"], ["proof (state)\nthis:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) p\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) p", "obtain D B where \"p = (D \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) p\n\ngoal (1 subgoal):\n 1. (\\<And>D B.\n        p = ( D \\<Rightarrow>* B) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases p)"], ["proof (state)\nthis:\n  p = ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  p = ( D \\<Rightarrow>* B)", "have \"(D \\<Rightarrow>* B) \\<in> set ps \\<and> (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) = extend (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) (D \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p = ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n    extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n     ( D \\<Rightarrow>* B)", "using t"], ["proof (prove)\nusing this:\n  p = ( D \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) p\n\ngoal (1 subgoal):\n 1. ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n    extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n     ( D \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n   ( D \\<Rightarrow>* B)", "have ant: \"\\<Phi>' = \\<Phi> + D\" and suc: \"\\<Psi>' \\<oplus> F \\<nabla> [x].A = \\<Psi>1 \\<oplus> F \\<nabla> [x].A + B\""], ["proof (prove)\nusing this:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<Phi>' = \\<Phi> + D &&&\n    \\<Psi>' \\<oplus> F \\<nabla> [x].A =\n    \\<Psi>1 \\<oplus> F \\<nabla> [x].A + B", "using extend_def"], ["proof (prove)\nusing this:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n   ( D \\<Rightarrow>* B)\n  extend ?forms ?seq \\<equiv>\n   antec ?forms + antec ?seq \\<Rightarrow>* succ ?forms + succ ?seq\n\ngoal (1 subgoal):\n 1. \\<Phi>' = \\<Phi> + D &&&\n    \\<Psi>' \\<oplus> F \\<nabla> [x].A =\n    \\<Psi>1 \\<oplus> F \\<nabla> [x].A + B", "by auto"], ["proof (state)\nthis:\n  \\<Phi>' = \\<Phi> + D\n  \\<Psi>' \\<oplus> F \\<nabla> [x].A = \\<Psi>1 \\<oplus> F \\<nabla> [x].A + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "from ant"], ["proof (chain)\npicking this:\n  \\<Phi>' = \\<Phi> + D", "have \"\\<Phi>' + \\<Gamma>' = (\\<Phi> + \\<Gamma>') + D\""], ["proof (prove)\nusing this:\n  \\<Phi>' = \\<Phi> + D\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + D", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + D\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "moreover"], ["proof (state)\nthis:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + D\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "from suc"], ["proof (chain)\npicking this:\n  \\<Psi>' \\<oplus> F \\<nabla> [x].A = \\<Psi>1 \\<oplus> F \\<nabla> [x].A + B", "have \"\\<Psi>' = \\<Psi>1 + B\""], ["proof (prove)\nusing this:\n  \\<Psi>' \\<oplus> F \\<nabla> [x].A = \\<Psi>1 \\<oplus> F \\<nabla> [x].A + B\n\ngoal (1 subgoal):\n 1. \\<Psi>' = \\<Psi>1 + B", "by auto"], ["proof (state)\nthis:\n  \\<Psi>' = \\<Psi>1 + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  \\<Psi>' = \\<Psi>1 + B", "have \"\\<Psi>' + \\<Delta>' = (\\<Psi>1 + \\<Delta>') + B\""], ["proof (prove)\nusing this:\n  \\<Psi>' = \\<Psi>1 + B\n\ngoal (1 subgoal):\n 1. \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + D\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B", "have \"(\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') = extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') (D \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + D\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n     ( D \\<Rightarrow>* B)", "using extend_def"], ["proof (prove)\nusing this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + D\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B\n  extend ?forms ?seq \\<equiv>\n   antec ?forms + antec ?seq \\<Rightarrow>* succ ?forms + succ ?seq\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n     ( D \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "moreover"], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "have \"extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') (D \\<Rightarrow>* B) \\<in> set Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n     ( D \\<Rightarrow>* B)\n    \\<in> set Ps'", "using \\<open>p = (D \\<Rightarrow>* B)\\<close> and t and c2"], ["proof (prove)\nusing this:\n  p = ( D \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) p\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n     ( D \\<Rightarrow>* B)\n    \\<in> set Ps'", "by auto"], ["proof (state)\nthis:\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "ultimately"], ["proof (chain)\npicking this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n  \\<in> set Ps'", "have \"(\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'", "by simp"], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "}"], ["proof (state)\nthis:\n  ( ?\\<Phi>'2 \\<Rightarrow>* ?\\<Psi>'2 \\<oplus> F \\<nabla> [x].A)\n  \\<in> set Ps \\<Longrightarrow>\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "thus ?thesis"], ["proof (prove)\nusing this:\n  ( ?\\<Phi>'2 \\<Rightarrow>* ?\\<Psi>'2 \\<oplus> F \\<nabla> [x].A)\n  \\<in> set Ps \\<Longrightarrow>\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "by blast"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have \"\\<forall> \\<Phi>' \\<Psi>'. (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps' \\<longrightarrow> (\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "fix \\<Phi>' \\<Psi>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "assume \"(\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\""], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'", "have \"\\<exists> p \\<in> set ps. extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p = (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p =\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "using eq and eq2 and d2"], ["proof (prove)\nusing this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n  Ps' =\n  map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')) ps\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p'\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p =\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (simp only:Ball_def Bex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n             \\<in> set (map (extend\n                              ( \\<Phi> +\n                                \\<Gamma>' \\<Rightarrow>* \\<Psi>1 +\n                   \\<Delta>'))\n                         ps);\n     Ps' =\n     map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'))\n      ps;\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi> +\n                             \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'))\n                      ps) \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            x = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'));\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi> +\n                             \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'))\n                      ps) \\<longrightarrow>\n        (\\<exists>xa.\n            xa \\<in> set ps \\<and>\n            x =\n            extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n             xa)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi> +\n                            \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n                          x =\n                         ( \\<Phi>' +\n                           \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (drule_tac x=\"\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n             \\<in> set (map (extend\n                              ( \\<Phi> +\n                                \\<Gamma>' \\<Rightarrow>* \\<Psi>1 +\n                   \\<Delta>'))\n                         ps);\n     Ps' =\n     map (extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'))\n      ps;\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi> +\n                             \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'))\n                      ps) \\<longrightarrow>\n        (\\<exists>xa.\n            xa \\<in> set ps \\<and>\n            x =\n            extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n             xa);\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set (map (extend\n                      ( \\<Phi> +\n                        \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>'))\n                 ps) \\<longrightarrow>\n     (\\<exists>\\<Phi>'' \\<Psi>''.\n         ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n         ( \\<Phi>'' +\n           \\<Gamma>' \\<Rightarrow>* \\<Psi>'' + \\<Delta>'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi> +\n                            \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n                          x =\n                         ( \\<Phi>' +\n                           \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "by (drule_tac x=\"\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'\" in spec) (auto)"], ["proof (state)\nthis:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p =\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p =\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "obtain p where t:\"p \\<in> set ps \\<and> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') = extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\""], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p =\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> set ps \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n        extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n         p \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>p.\n                   p \\<in> set ps \\<and>\n                   ( \\<Phi>' +\n                     \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n                   extend\n                    ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n                    p \\<Longrightarrow>\n                   thesis;\n        p \\<in> set ps;\n        extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p =\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (drule_tac x=p in meta_spec) (simp)"], ["proof (state)\nthis:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p", "obtain D B where \"p = (D \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n\ngoal (1 subgoal):\n 1. (\\<And>D B.\n        p = ( D \\<Rightarrow>* B) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases p)"], ["proof (state)\nthis:\n  p = ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  p = ( D \\<Rightarrow>* B)", "have \"(D \\<Rightarrow>* B) \\<in> set ps \\<and> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') = extend (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') (D \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p = ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n     ( D \\<Rightarrow>* B)", "using t"], ["proof (prove)\nusing this:\n  p = ( D \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n\ngoal (1 subgoal):\n 1. ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n     ( D \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( D \\<Rightarrow>* B)", "have ant: \"\\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + D\" and suc: \"\\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B\""], ["proof (prove)\nusing this:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + D &&&\n    \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B", "using extend_def"], ["proof (prove)\nusing this:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n  extend ?forms ?seq \\<equiv>\n   antec ?forms + antec ?seq \\<Rightarrow>* succ ?forms + succ ?seq\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + D &&&\n    \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B", "by auto"], ["proof (state)\nthis:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + D\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "from ant"], ["proof (chain)\npicking this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + D", "have \"\\<Phi>' + \\<Gamma>' = (\\<Phi> + D) + \\<Gamma>'\""], ["proof (prove)\nusing this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + \\<Gamma>' + D\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi> + D + \\<Gamma>'", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + D + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + D + \\<Gamma>'", "have \"\\<Phi>' = \\<Phi> + D\""], ["proof (prove)\nusing this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi> + D + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<Phi>' = \\<Phi> + D", "by simp"], ["proof (state)\nthis:\n  \\<Phi>' = \\<Phi> + D\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "moreover"], ["proof (state)\nthis:\n  \\<Phi>' = \\<Phi> + D\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "from suc"], ["proof (chain)\npicking this:\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B", "have \"\\<Psi>' + \\<Delta>' = (\\<Psi>1 + B) + \\<Delta>'\""], ["proof (prove)\nusing this:\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. \\<Psi>' + \\<Delta>' = \\<Psi>1 + B + \\<Delta>'", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + B + \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + B + \\<Delta>'", "have \"\\<Psi>' = \\<Psi>1 + B\""], ["proof (prove)\nusing this:\n  \\<Psi>' + \\<Delta>' = \\<Psi>1 + B + \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<Psi>' = \\<Psi>1 + B", "by simp"], ["proof (state)\nthis:\n  \\<Psi>' = \\<Psi>1 + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<Psi>' = \\<Psi>1 + B", "have \"\\<Psi>' \\<oplus> F \\<nabla> [x].A = (\\<Psi>1 \\<oplus> F \\<nabla> [x].A) + B\""], ["proof (prove)\nusing this:\n  \\<Psi>' = \\<Psi>1 + B\n\ngoal (1 subgoal):\n 1. \\<Psi>' \\<oplus> F \\<nabla> [x].A =\n    \\<Psi>1 \\<oplus> F \\<nabla> [x].A + B", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Psi>' \\<oplus> F \\<nabla> [x].A = \\<Psi>1 \\<oplus> F \\<nabla> [x].A + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "ultimately"], ["proof (chain)\npicking this:\n  \\<Phi>' = \\<Phi> + D\n  \\<Psi>' \\<oplus> F \\<nabla> [x].A = \\<Psi>1 \\<oplus> F \\<nabla> [x].A + B", "have \"(\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) = extend (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) (D \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  \\<Phi>' = \\<Phi> + D\n  \\<Psi>' \\<oplus> F \\<nabla> [x].A = \\<Psi>1 \\<oplus> F \\<nabla> [x].A + B\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n    extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n     ( D \\<Rightarrow>* B)", "using extend_def"], ["proof (prove)\nusing this:\n  \\<Phi>' = \\<Phi> + D\n  \\<Psi>' \\<oplus> F \\<nabla> [x].A = \\<Psi>1 \\<oplus> F \\<nabla> [x].A + B\n  extend ?forms ?seq \\<equiv>\n   antec ?forms + antec ?seq \\<Rightarrow>* succ ?forms + succ ?seq\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n    extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n     ( D \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "moreover"], ["proof (state)\nthis:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "have \"extend (\\<Phi>  \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A) (D \\<Rightarrow>* B) \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n     ( D \\<Rightarrow>* B)\n    \\<in> set Ps", "using \\<open>p = (D \\<Rightarrow>* B)\\<close> and t and c1\n                      and \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\\<close>"], ["proof (prove)\nusing this:\n  p = ( D \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi>1 + \\<Delta>') p\n  \\<forall>p\\<in>set ps. extend S p \\<in> set Ps\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n     ( D \\<Rightarrow>* B)\n    \\<in> set Ps", "by auto"], ["proof (state)\nthis:\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n   ( D \\<Rightarrow>* B)\n  \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "ultimately"], ["proof (chain)\npicking this:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n   ( D \\<Rightarrow>* B)\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n   ( D \\<Rightarrow>* B)\n  \\<in> set Ps", "have \"(\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) \\<in> set Ps\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) =\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n   ( D \\<Rightarrow>* B)\n  extend ( \\<Phi> \\<Rightarrow>* \\<Psi>1 \\<oplus> F \\<nabla> [x].A)\n   ( D \\<Rightarrow>* B)\n  \\<in> set Ps\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) \\<in> set Ps", "by simp"], ["proof (state)\nthis:\n  ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "}"], ["proof (state)\nthis:\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps' \\<Longrightarrow>\n  ( ?\\<Phi>'2 \\<Rightarrow>* ?\\<Psi>'2 \\<oplus> F \\<nabla> [x].A)\n  \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "thus ?thesis"], ["proof (prove)\nusing this:\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps' \\<Longrightarrow>\n  ( ?\\<Phi>'2 \\<Rightarrow>* ?\\<Psi>'2 \\<oplus> F \\<nabla> [x].A)\n  \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n       \\<in> set Ps", "by blast"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n     \\<in> set Ps\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n     \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n     \\<in> set Ps", "have \"\\<forall> \\<Phi>' \\<Psi>'. ((\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A) \\<in> set Ps) = ((\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps')\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n     \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       (( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n        \\<in> set Ps) =\n       (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n        \\<in> set Ps')", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')", "have \"\\<forall> p \\<in> set Ps'. \\<exists> \\<Phi>' \\<Psi>' n. n\\<le>n' \\<and> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',n) \\<in> derivable R*\n                \\<and> p = (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\""], ["proof (prove)\nusing this:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>' n.\n          n \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n          \\<in> derivable  R* \\<and>\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "using eq2 and a2"], ["proof (prove)\nusing this:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' m.\n        m \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>' n.\n          n \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n          \\<in> derivable  R* \\<and>\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                (( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n     \\<Psi>')\n                 \\<in> set Ps) =\n                (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                 \\<in> set Ps');\n     \\<forall>x.\n        x \\<in> set Ps' \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            x = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'));\n     \\<forall>xa.\n        xa \\<in> set Ps \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>' m.\n            m \\<le> n' \\<and>\n            ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n            \\<in> derivable  R* \\<and>\n            xa =\n            ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n\\<Psi>'))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         x \\<in> set Ps' \\<longrightarrow>\n                         (\\<exists>\\<Phi>' \\<Psi>' n.\n                             n \\<le> n' \\<and>\n                             ( \\<Phi>' +\n                               \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                              n)\n                             \\<in> derivable  R* \\<and>\n                             x =\n                             ( \\<Phi>' +\n                               \\<Gamma>' \\<Rightarrow>* \\<Psi>' +\n                  \\<Delta>'))", "apply (intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n        \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>x.\n           x \\<in> set Ps' \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>'.\n               x =\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'));\n        \\<forall>xa.\n           xa \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable  R* \\<and>\n               xa =\n               ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n   \\<Psi>'));\n        xa \\<in> set Ps'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (drule_tac x=xa in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n        \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>xa.\n           xa \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable  R* \\<and>\n               xa =\n               ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n   \\<Psi>'));\n        xa \\<in> set Ps';\n        xa \\<in> set Ps' \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            xa =\n            ( \\<Phi>' +\n              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n        \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>xa.\n           xa \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable  R* \\<and>\n               xa =\n               ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n   \\<Psi>'));\n        xa \\<in> set Ps';\n        \\<exists>\\<Phi>' \\<Psi>'.\n           xa =\n           ( \\<Phi>' +\n             \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>'.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n        \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>xa.\n           xa \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable  R* \\<and>\n               xa =\n               ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n   \\<Psi>'));\n        xa \\<in> set Ps';\n        xa =\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (drule_tac x=\\<Phi>' in spec,drule_tac x=\\<Psi>' in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>'.\n       \\<lbrakk>\\<forall>xa.\n                   xa \\<in> set Ps \\<longrightarrow>\n                   (\\<exists>\\<Phi>' \\<Psi>' m.\n                       m \\<le> n' \\<and>\n                       ( \\<Phi>' +\n                         \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                        m)\n                       \\<in> derivable  R* \\<and>\n                       xa =\n                       ( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A)\n           \\<Psi>'));\n        xa \\<in> set Ps';\n        xa = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>');\n        (( \\<Phi>' \\<Rightarrow>* add_mset (F \\<nabla> [x].A) \\<Psi>')\n         \\<in> set Ps) =\n        (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n         \\<in> set Ps')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "by (drule_tac x=\"\\<Phi>' \\<Rightarrow>* \\<Psi>' \\<oplus> F \\<nabla> [x].A\" in spec) (simp)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "have all:\"\\<forall> p \\<in> set Ps'. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*", "show \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using num\n     and \\<open>(Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> R*\\<close> and \\<open>Ps' \\<noteq> []\\<close>\n     and derivable.step[where r=\"(Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\" and R=\"R*\"]"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n  n = n' + 1\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in>  R*\n  Ps' \\<noteq> []\n  \\<lbrakk>(Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n           \\<in>  R*;\n   fst (Ps',\n         \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<noteq>\n   [];\n   \\<forall>p\\<in>set (fst (Ps',\n                             \\<Gamma> +\n                             \\<Gamma>' \\<Rightarrow>* \\<Delta> +\n                \\<Delta>')).\n      \\<exists>n\\<le>?m. (p, n) \\<in> derivable  R*\\<rbrakk>\n  \\<Longrightarrow> (snd (Ps',\n                           \\<Gamma> +\n                           \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>'),\n                     ?m + 1)\n                    \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Non-principal Left *)"], ["", "lemma nonPrincipalInvertLeft:\nassumes \"R1 \\<subseteq> upRules\" and \"R2 \\<subseteq> nprovRules\" and \"R3 \\<subseteq> provRules\"\n    and \"R = Ax \\<union> R1 \\<union> R2 \\<union> R3\" and \"r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\" and \"r = (ps,c)\"\n    and IH: \"\\<forall>m<n. \\<forall>\\<Gamma> \\<Delta>. ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, m) \\<in> derivable R* \\<longrightarrow>\n              (\\<forall>r' \\<in> R. leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')) \\<longrightarrow>\n              (\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>') \\<longrightarrow>\n              (\\<exists>m'\\<le>m. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m') \\<in> derivable R*)\"\n    and a': \"(\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>,n) \\<in> derivable R*\" \n    and b': \"\\<forall> r' \\<in> R. leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\"\n    and c': \"\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\"\n    and np: \"\\<not> leftPrincipal r (F \\<nabla> [x].A)\"\n    and ext: \"extendRule S r = (Ps,\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\"\n    and num: \"n = n' + 1\"\n    and all: \"\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\"\n    and nonempty: \"Ps \\<noteq> []\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "from ext"], ["proof (chain)\npicking this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)", "obtain \\<Phi> \\<Psi> where \"S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Phi> \\<Psi>.\n        S = ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases S) (auto)"], ["proof (state)\nthis:\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "from \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)", "obtain G H where \"c = (G \\<Rightarrow>* H)\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. (\\<And>G H.\n        c = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases c) (auto)"], ["proof (state)\nthis:\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  c = ( G \\<Rightarrow>* H)", "have \"\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\""], ["proof (prove)\nusing this:\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "using \\<open>r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<close>"], ["proof (prove)\nusing this:\n  c = ( G \\<Rightarrow>* H)\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "assume \"r \\<in> R1\""], ["proof (state)\nthis:\n  r \\<in> R1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "then"], ["proof (chain)\npicking this:\n  r \\<in> R1", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> R1\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "using \\<open>R1 \\<subseteq> upRules\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> R1\n  R1 \\<subseteq> upRules\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "with \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  r \\<in> upRules", "obtain T Ts where \"c = (\\<Empt> \\<Rightarrow>* \\<LM>Cpd0 T Ts\\<RM>) \\<or> c = (\\<LM>Cpd0 T Ts\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. (\\<And>T Ts.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n        c =\n        ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using propRuleCharacterise[where Ps=ps and C=c]"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> upRules\n  (ps, c) \\<in> upRules \\<Longrightarrow>\n  \\<exists>F Fs.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 F Fs  \\<RM>) \\<or>\n     c = ( \\<LM> Cpd0 F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. (\\<And>T Ts.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n        c =\n        ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "moreover"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "{"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "assume \"c = (\\<Empt> \\<Rightarrow>* \\<LM>Cpd0 T Ts\\<RM>)\""], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "with \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (chain)\npicking this:\n  c = ( G \\<Rightarrow>* H)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>)", "have \"\\<LM> F \\<nabla> [x].A \\<RM> \\<noteq> G\""], ["proof (prove)\nusing this:\n  c = ( G \\<Rightarrow>* H)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "by auto"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "}"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "moreover"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "{"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "assume \"c = (\\<LM>Cpd0 T Ts\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (state)\nthis:\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "then"], ["proof (chain)\npicking this:\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"\\<LM>F \\<nabla> [x].A \\<RM> \\<noteq> G\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "using \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "by auto"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "}"], ["proof (state)\nthis:\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "ultimately"], ["proof (chain)\npicking this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "have \"\\<LM> F \\<nabla> [x].A \\<RM> \\<noteq> G\""], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "by blast"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "}"], ["proof (state)\nthis:\n  r \\<in> R1 \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "moreover"], ["proof (state)\nthis:\n  r \\<in> R1 \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "{"], ["proof (state)\nthis:\n  r \\<in> R1 \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "assume \"r \\<in> R2 \\<or> r \\<in> R3\""], ["proof (state)\nthis:\n  r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "then"], ["proof (chain)\npicking this:\n  r \\<in> R2 \\<or> r \\<in> R3", "have \"r \\<in> provRules \\<or> r \\<in> nprovRules\""], ["proof (prove)\nusing this:\n  r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (1 subgoal):\n 1. r \\<in> provRules \\<or> r \\<in> nprovRules", "using \\<open>R2 \\<subseteq> nprovRules\\<close> and \\<open>R3 \\<subseteq> provRules\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> R2 \\<or> r \\<in> R3\n  R2 \\<subseteq> nprovRules\n  R3 \\<subseteq> provRules\n\ngoal (1 subgoal):\n 1. r \\<in> provRules \\<or> r \\<in> nprovRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> provRules \\<or> r \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "with \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  r \\<in> provRules \\<or> r \\<in> nprovRules", "obtain T y B where \"c = (\\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B \\<RM>) \\<or> c = (\\<LM> T \\<nabla> [y].B\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> provRules \\<or> r \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. (\\<And>T y B.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<or>\n        c =\n        ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using provRuleCharacterise[where Ps=ps and C=c]\n            and nprovRuleCharacterise[where Ps=ps and C=c]"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> provRules \\<or> r \\<in> nprovRules\n  (ps, c) \\<in> provRules \\<Longrightarrow>\n  \\<exists>F x A.\n     (c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n      c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n     x \\<sharp> set_of_prem ( ps - A )\n  (ps, c) \\<in> nprovRules \\<Longrightarrow>\n  \\<exists>F x A.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n     c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. (\\<And>T y B.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<or>\n        c =\n        ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<or>\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "moreover"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<or>\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "{"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<or>\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "assume \"c = (\\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B\\<RM>)\""], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "then"], ["proof (chain)\npicking this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>)", "have \"\\<LM>F \\<nabla> [x].A \\<RM> \\<noteq> G\""], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "using \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>)\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "by auto"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "}"], ["proof (state)\nthis:\n  c =\n  ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "moreover"], ["proof (state)\nthis:\n  c =\n  ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "{"], ["proof (state)\nthis:\n  c =\n  ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "assume \"c = (\\<LM>T \\<nabla> [y].B \\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (state)\nthis:\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "then"], ["proof (chain)\npicking this:\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"leftPrincipal r (T \\<nabla> [y].B)\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. leftPrincipal r (T \\<nabla> [y].B)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. leftPrincipal r (T \\<nabla> [y].B)", "by auto"], ["proof (state)\nthis:\n  leftPrincipal r (T \\<nabla> [y].B)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "with \\<open>\\<not> leftPrincipal r (F \\<nabla> [x].A)\\<close>"], ["proof (chain)\npicking this:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n  leftPrincipal r (T \\<nabla> [y].B)", "have \"T \\<nabla> [y].B \\<noteq> F \\<nabla> [x].A\""], ["proof (prove)\nusing this:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n  leftPrincipal r (T \\<nabla> [y].B)\n\ngoal (1 subgoal):\n 1. T \\<nabla> [y].B \\<noteq> F \\<nabla> [x].A", "by auto"], ["proof (state)\nthis:\n  T \\<nabla> [y].B \\<noteq> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "with \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (chain)\npicking this:\n  c = ( G \\<Rightarrow>* H)\n  T \\<nabla> [y].B \\<noteq> F \\<nabla> [x].A", "have \"\\<LM> F \\<nabla> [x].A \\<RM> \\<noteq> G\""], ["proof (prove)\nusing this:\n  c = ( G \\<Rightarrow>* H)\n  T \\<nabla> [y].B \\<noteq> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "using \\<open>c = (\\<LM> T \\<nabla> [y].B \\<RM> \\<Rightarrow>* \\<Empt>)\\<close>"], ["proof (prove)\nusing this:\n  c = ( G \\<Rightarrow>* H)\n  T \\<nabla> [y].B \\<noteq> F \\<nabla> [x].A\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "by auto"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "}"], ["proof (state)\nthis:\n  c =\n  ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "ultimately"], ["proof (chain)\npicking this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<or>\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c =\n  ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n  c =\n  ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "have \"\\<LM> F \\<nabla> [x].A \\<RM> \\<noteq> G\""], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<or>\n  c = ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c =\n  ( \\<Empt> \\<Rightarrow>* \\<LM> T \\<nabla> [y].B  \\<RM>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n  c =\n  ( \\<LM> T \\<nabla> [y].B  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "by blast"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "}"], ["proof (state)\nthis:\n  r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( G \\<Rightarrow>* H);\n     r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n    \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> R1 \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n  r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "show ?thesis"], ["proof (prove)\nusing this:\n  r \\<in> R1 \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n  r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "using \\<open>r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> R1 \\<Longrightarrow> \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n  r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (1 subgoal):\n 1. \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "by blast"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have \"antec S + antec (snd r) = (\\<Gamma> \\<oplus> F \\<nabla> [x].A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antec S + antec (snd r) = \\<Gamma> \\<oplus> F \\<nabla> [x].A", "using ext and extendRule_def[where forms=S and R=r]\n                   and extend_def[where forms=S and seq=\"snd r\"]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n  extend S (snd r) \\<equiv>\n   antec S + antec (snd r) \\<Rightarrow>* succ S + succ (snd r)\n\ngoal (1 subgoal):\n 1. antec S + antec (snd r) = \\<Gamma> \\<oplus> F \\<nabla> [x].A", "by auto"], ["proof (state)\nthis:\n  antec S + antec (snd r) = \\<Gamma> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  antec S + antec (snd r) = \\<Gamma> \\<oplus> F \\<nabla> [x].A", "have \"\\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A\""], ["proof (prove)\nusing this:\n  antec S + antec (snd r) = \\<Gamma> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A", "using \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\\<close> and \\<open>r = (ps,c)\\<close> and \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (prove)\nusing this:\n  antec S + antec (snd r) = \\<Gamma> \\<oplus> F \\<nabla> [x].A\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n  r = (ps, c)\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A", "by auto"], ["proof (state)\nthis:\n  \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "from \\<open>r = (ps,c)\\<close> and \\<open>r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<close> and \\<open>R1 \\<subseteq> upRules\\<close> and \\<open>R2 \\<subseteq> nprovRules\\<close>\n              and \\<open>R3 \\<subseteq> provRules\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  R1 \\<subseteq> upRules\n  R2 \\<subseteq> nprovRules\n  R3 \\<subseteq> provRules", "have \"(ps,c) \\<in> upRules \\<or> (ps,c) \\<in> nprovRules \\<or> (ps,c) \\<in> provRules\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  R1 \\<subseteq> upRules\n  R2 \\<subseteq> nprovRules\n  R3 \\<subseteq> provRules\n\ngoal (1 subgoal):\n 1. (ps, c) \\<in> upRules \\<or>\n    (ps, c) \\<in> nprovRules \\<or> (ps, c) \\<in> provRules", "by auto"], ["proof (state)\nthis:\n  (ps, c) \\<in> upRules \\<or>\n  (ps, c) \\<in> nprovRules \\<or> (ps, c) \\<in> provRules\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  (ps, c) \\<in> upRules \\<or>\n  (ps, c) \\<in> nprovRules \\<or> (ps, c) \\<in> provRules", "have \"\\<exists> A. c = (\\<Empt> \\<Rightarrow>* \\<LM>A\\<RM>) \\<or> c = (\\<LM>A\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  (ps, c) \\<in> upRules \\<or>\n  (ps, c) \\<in> nprovRules \\<or> (ps, c) \\<in> provRules\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       c = ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<or>\n       c = ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)", "using propRuleCharacterise[where Ps=ps and C=c]\n       and nprovRuleCharacterise[where Ps=ps and C=c]\n       and provRuleCharacterise[where Ps=ps and C=c]"], ["proof (prove)\nusing this:\n  (ps, c) \\<in> upRules \\<or>\n  (ps, c) \\<in> nprovRules \\<or> (ps, c) \\<in> provRules\n  (ps, c) \\<in> upRules \\<Longrightarrow>\n  \\<exists>F Fs.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 F Fs  \\<RM>) \\<or>\n     c = ( \\<LM> Cpd0 F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n  (ps, c) \\<in> nprovRules \\<Longrightarrow>\n  \\<exists>F x A.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n     c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)\n  (ps, c) \\<in> provRules \\<Longrightarrow>\n  \\<exists>F x A.\n     (c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>) \\<or>\n      c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)) \\<and>\n     x \\<sharp> set_of_prem ( ps - A )\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       c = ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<or>\n       c = ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>A.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<or>\n     c = ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>A.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<or>\n     c = ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"G = \\<Empt> \\<or> (\\<exists> A. G = \\<LM>A\\<RM>)\""], ["proof (prove)\nusing this:\n  \\<exists>A.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<or>\n     c = ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)", "using \\<open>c = (G \\<Rightarrow>* H)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>A.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<or>\n     c = ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)", "by auto"], ["proof (state)\nthis:\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n  \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)", "have \"F \\<nabla> [x].A \\<in># \\<Phi>\""], ["proof (prove)\nusing this:\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n  \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. F \\<nabla> [x].A \\<in># \\<Phi>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "have \"G = \\<Empt> \\<or> (\\<exists> A. G = \\<LM>A\\<RM>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)", "by fact"], ["proof (state)\nthis:\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "moreover"], ["proof (state)\nthis:\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "{"], ["proof (state)\nthis:\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "assume \"G = \\<Empt>\""], ["proof (state)\nthis:\n  G = \\<Empt>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "then"], ["proof (chain)\npicking this:\n  G = \\<Empt>", "have \"\\<Phi> = \\<Gamma> \\<oplus> F \\<nabla> [x].A\""], ["proof (prove)\nusing this:\n  G = \\<Empt>\n\ngoal (1 subgoal):\n 1. \\<Phi> = \\<Gamma> \\<oplus> F \\<nabla> [x].A", "using \\<open>\\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A\\<close>"], ["proof (prove)\nusing this:\n  G = \\<Empt>\n  \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<Phi> = \\<Gamma> \\<oplus> F \\<nabla> [x].A", "by auto"], ["proof (state)\nthis:\n  \\<Phi> = \\<Gamma> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "then"], ["proof (chain)\npicking this:\n  \\<Phi> = \\<Gamma> \\<oplus> F \\<nabla> [x].A", "have \"F \\<nabla> [x].A \\<in># \\<Phi>\""], ["proof (prove)\nusing this:\n  \\<Phi> = \\<Gamma> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. F \\<nabla> [x].A \\<in># \\<Phi>", "by auto"], ["proof (state)\nthis:\n  F \\<nabla> [x].A \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "}"], ["proof (state)\nthis:\n  G = \\<Empt> \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "moreover"], ["proof (state)\nthis:\n  G = \\<Empt> \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "{"], ["proof (state)\nthis:\n  G = \\<Empt> \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "assume \"\\<exists> A. G = \\<LM>A\\<RM>\""], ["proof (state)\nthis:\n  \\<exists>A. G = \\<LM> A  \\<RM>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "then"], ["proof (chain)\npicking this:\n  \\<exists>A. G = \\<LM> A  \\<RM>", "obtain T where \"G = \\<LM>T\\<RM>\""], ["proof (prove)\nusing this:\n  \\<exists>A. G = \\<LM> A  \\<RM>\n\ngoal (1 subgoal):\n 1. (\\<And>T. G = \\<LM> T  \\<RM> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  G = \\<LM> T  \\<RM>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "then"], ["proof (chain)\npicking this:\n  G = \\<LM> T  \\<RM>", "have \"\\<Phi> \\<oplus> T = \\<Gamma> \\<oplus> F \\<nabla> [x].A\""], ["proof (prove)\nusing this:\n  G = \\<LM> T  \\<RM>\n\ngoal (1 subgoal):\n 1. \\<Phi> \\<oplus> T = \\<Gamma> \\<oplus> F \\<nabla> [x].A", "using \\<open>\\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A\\<close>"], ["proof (prove)\nusing this:\n  G = \\<LM> T  \\<RM>\n  \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<Phi> \\<oplus> T = \\<Gamma> \\<oplus> F \\<nabla> [x].A", "by auto"], ["proof (state)\nthis:\n  \\<Phi> \\<oplus> T = \\<Gamma> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "then"], ["proof (chain)\npicking this:\n  \\<Phi> \\<oplus> T = \\<Gamma> \\<oplus> F \\<nabla> [x].A", "have \"set_mset (\\<Phi> \\<oplus> T) = set_mset (\\<Gamma> \\<oplus> F \\<nabla> [x].A)\""], ["proof (prove)\nusing this:\n  \\<Phi> \\<oplus> T = \\<Gamma> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. set_mset (\\<Phi> \\<oplus> T) =\n    set_mset (\\<Gamma> \\<oplus> F \\<nabla> [x].A)", "by auto"], ["proof (state)\nthis:\n  set_mset (\\<Phi> \\<oplus> T) =\n  set_mset (\\<Gamma> \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "then"], ["proof (chain)\npicking this:\n  set_mset (\\<Phi> \\<oplus> T) =\n  set_mset (\\<Gamma> \\<oplus> F \\<nabla> [x].A)", "have \"set_mset \\<Phi> \\<union> {T} = set_mset \\<Gamma> \\<union> {F \\<nabla> [x].A}\""], ["proof (prove)\nusing this:\n  set_mset (\\<Phi> \\<oplus> T) =\n  set_mset (\\<Gamma> \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. set_mset \\<Phi> \\<union> {T} =\n    set_mset \\<Gamma> \\<union> {F \\<nabla> [x].A}", "by auto"], ["proof (state)\nthis:\n  set_mset \\<Phi> \\<union> {T} =\n  set_mset \\<Gamma> \\<union> {F \\<nabla> [x].A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "moreover"], ["proof (state)\nthis:\n  set_mset \\<Phi> \\<union> {T} =\n  set_mset \\<Gamma> \\<union> {F \\<nabla> [x].A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "from \\<open>G = \\<LM>T\\<RM>\\<close> and \\<open>\\<LM>F \\<nabla> [x].A\\<RM> \\<noteq> G\\<close>"], ["proof (chain)\npicking this:\n  G = \\<LM> T  \\<RM>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G", "have \"F \\<nabla> [x].A \\<noteq> T\""], ["proof (prove)\nusing this:\n  G = \\<LM> T  \\<RM>\n  \\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G\n\ngoal (1 subgoal):\n 1. F \\<nabla> [x].A \\<noteq> T", "by auto"], ["proof (state)\nthis:\n  F \\<nabla> [x].A \\<noteq> T\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "ultimately"], ["proof (chain)\npicking this:\n  set_mset \\<Phi> \\<union> {T} =\n  set_mset \\<Gamma> \\<union> {F \\<nabla> [x].A}\n  F \\<nabla> [x].A \\<noteq> T", "have \"F \\<nabla> [x].A \\<in> set_mset \\<Phi>\""], ["proof (prove)\nusing this:\n  set_mset \\<Phi> \\<union> {T} =\n  set_mset \\<Gamma> \\<union> {F \\<nabla> [x].A}\n  F \\<nabla> [x].A \\<noteq> T\n\ngoal (1 subgoal):\n 1. F \\<nabla> [x].A \\<in># \\<Phi>", "by auto"], ["proof (state)\nthis:\n  F \\<nabla> [x].A \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "then"], ["proof (chain)\npicking this:\n  F \\<nabla> [x].A \\<in># \\<Phi>", "have \"F \\<nabla> [x].A \\<in># \\<Phi>\""], ["proof (prove)\nusing this:\n  F \\<nabla> [x].A \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. F \\<nabla> [x].A \\<in># \\<Phi>", "by auto"], ["proof (state)\nthis:\n  F \\<nabla> [x].A \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "}"], ["proof (state)\nthis:\n  \\<exists>A. G = \\<LM> A  \\<RM> \\<Longrightarrow>\n  F \\<nabla> [x].A \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<LM> F \\<nabla> [x].A  \\<RM> \\<noteq> G;\n     \\<Phi> + G = \\<Gamma> \\<oplus> F \\<nabla> [x].A;\n     G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\\<rbrakk>\n    \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>", "ultimately"], ["proof (chain)\npicking this:\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\n  G = \\<Empt> \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>\n  \\<exists>A. G = \\<LM> A  \\<RM> \\<Longrightarrow>\n  F \\<nabla> [x].A \\<in># \\<Phi>", "show \"F \\<nabla> [x].A \\<in># \\<Phi>\""], ["proof (prove)\nusing this:\n  G = \\<Empt> \\<or> (\\<exists>A. G = \\<LM> A  \\<RM>)\n  G = \\<Empt> \\<Longrightarrow> F \\<nabla> [x].A \\<in># \\<Phi>\n  \\<exists>A. G = \\<LM> A  \\<RM> \\<Longrightarrow>\n  F \\<nabla> [x].A \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. F \\<nabla> [x].A \\<in># \\<Phi>", "by blast"], ["proof (state)\nthis:\n  F \\<nabla> [x].A \\<in># \\<Phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F \\<nabla> [x].A \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  F \\<nabla> [x].A \\<in># \\<Phi>", "have \"\\<exists> \\<Phi>1. \\<Phi> = \\<Phi>1 \\<oplus> F \\<nabla> [x].A\""], ["proof (prove)\nusing this:\n  F \\<nabla> [x].A \\<in># \\<Phi>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Phi>1. \\<Phi> = \\<Phi>1 \\<oplus> F \\<nabla> [x].A", "by (rule_tac x=\"\\<Phi> \\<ominus> F \\<nabla> [x].A\" in exI) (auto simp add:multiset_eq_iff)"], ["proof (state)\nthis:\n  \\<exists>\\<Phi>1. \\<Phi> = \\<Phi>1 \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Phi>1. \\<Phi> = \\<Phi>1 \\<oplus> F \\<nabla> [x].A", "obtain \\<Phi>1 where \"S = (\\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<Phi>1. \\<Phi> = \\<Phi>1 \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Phi>1.\n        S =\n        ( \\<Phi>1 \\<oplus>\n          F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>\\<Phi>1. \\<Phi> = \\<Phi>1 \\<oplus> F \\<nabla> [x].A\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Phi>1.\n        S =\n        ( \\<Phi>1 \\<oplus>\n          F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  S = ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have \"Ps = map (extend S) ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ps = map (extend S) ps", "using \\<open>extendRule S r = (Ps,\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\\<close> and extendRule_def and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  extendRule ?forms ?R \\<equiv>\n  (map (extend ?forms) (fst ?R), extend ?forms (snd ?R))\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. Ps = map (extend S) ps", "by auto"], ["proof (state)\nthis:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  Ps = map (extend S) ps", "have \"\\<forall> p \\<in> set Ps. (\\<exists> p'. p = extend S p')\""], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'", "using ex_map_conv[where ys=Ps and f=\"extend S\"]"], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n  (\\<exists>xs. Ps = map (extend S) xs) =\n  (\\<forall>y\\<in>set Ps. \\<exists>x. y = extend S x)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'", "have \"\\<forall> p \\<in> set Ps. (F \\<nabla> [x].A \\<in># antec p)\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. F \\<nabla> [x].A \\<in># antec p", "using \\<open>F \\<nabla> [x].A \\<in># \\<Phi>\\<close> and \\<open>S = (\\<Phi> \\<Rightarrow>* \\<Psi>)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p = extend S p'\n  F \\<nabla> [x].A \\<in># \\<Phi>\n  S = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. F \\<nabla> [x].A \\<in># antec p", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set Ps \\<longrightarrow>\n                   (\\<exists>p'.\n                       x = extend ( \\<Phi> \\<Rightarrow>* \\<Psi>) p');\n        F \\<nabla> [x].A \\<in># \\<Phi>; S = ( \\<Phi> \\<Rightarrow>* \\<Psi>);\n        xa \\<in> set Ps\\<rbrakk>\n       \\<Longrightarrow> F \\<nabla> [x].A \\<in># antec xa", "by (drule_tac x=xa in spec) (auto simp add:extend_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. F \\<nabla> [x].A \\<in># antec p\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. F \\<nabla> [x].A \\<in># antec p", "have a1:\"\\<forall> p \\<in> set Ps. \\<exists> \\<Phi>' \\<Psi>'. p = (\\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. F \\<nabla> [x].A \\<in># antec p\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')", "using characteriseSeq"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. F \\<nabla> [x].A \\<in># antec p\n  \\<exists>A B. ?C = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>xa.\n                   xa \\<in> set Ps \\<longrightarrow>\n                   F \\<nabla> [x].A \\<in># antec xa;\n        \\<And>C. \\<exists>A B. C = ( A \\<Rightarrow>* B);\n        xa \\<in> set Ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>'.\n                            xa =\n                            ( add_mset (F \\<nabla> [x].A)\n                               \\<Phi>' \\<Rightarrow>* \\<Psi>')", "apply (drule_tac x=xa in spec,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>C. \\<exists>A B. C = ( A \\<Rightarrow>* B);\n        xa \\<in> set Ps; F \\<nabla> [x].A \\<in># antec xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>'.\n                            xa =\n                            ( add_mset (F \\<nabla> [x].A)\n                               \\<Phi>' \\<Rightarrow>* \\<Psi>')", "apply (rule_tac x=\"antec xa \\<ominus> F \\<nabla> [x].A\" in exI,rule_tac x=\"succ xa\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>C. \\<exists>A B. C = ( A \\<Rightarrow>* B);\n        xa \\<in> set Ps; F \\<nabla> [x].A \\<in># antec xa\\<rbrakk>\n       \\<Longrightarrow> xa =\n                         ( add_mset (F \\<nabla> [x].A)\n                            (antec xa \\<ominus>\n                             F \\<nabla> [x].A) \\<Rightarrow>* succ xa)", "by (drule_tac x=xa in meta_spec) (auto simp add:multiset_eq_iff)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "with all"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')", "have \"\\<forall> p \\<in> set Ps. \\<exists> \\<Phi>' \\<Psi>' n. n\\<le>n' \\<and> (\\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>',n) \\<in> derivable R* \\<and> p = (\\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>' n.\n          n \\<le> n' \\<and>\n          ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>', n)\n          \\<in> derivable  R* \\<and>\n          p = ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')", "by (auto simp add:Ball_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')", "have a2: \"\\<forall> p \\<in> set Ps. \\<exists> \\<Phi>' \\<Psi>' m. m\\<le>n' \\<and> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',m) \\<in> derivable R* \\<and> p = (\\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>' m.\n          m \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n          \\<in> derivable  R* \\<and>\n          p = ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')", "using num and b' and IH and c'"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n  n = n' + 1\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, m)\n        \\<in> derivable  R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n            \\<in> set (fst r')) \\<longrightarrow>\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>' \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n            \\<in> derivable  R*)\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps.\n       \\<exists>\\<Phi>' \\<Psi>' m.\n          m \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n          \\<in> derivable  R* \\<and>\n          p = ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>xa.\n                   xa \\<in> set Ps \\<longrightarrow>\n                   (\\<exists>\\<Phi>' \\<Psi>' n.\n                       n \\<le> n' \\<and>\n                       ( add_mset (F \\<nabla> [x].A)\n                          \\<Phi>' \\<Rightarrow>* \\<Psi>',\n                        n)\n                       \\<in> derivable  R* \\<and>\n                       xa =\n                       ( add_mset (F \\<nabla> [x].A)\n                          \\<Phi>' \\<Rightarrow>* \\<Psi>'));\n        n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           leftPrincipal (a, b) (F \\<nabla> [x].A) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( add_mset (F \\<nabla> [x].A)\n                 \\<Gamma> \\<Rightarrow>* \\<Delta>,\n               m)\n              \\<in> derivable  R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable  R*);\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        xa \\<in> set Ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( add_mset (F \\<nabla> [x].A)\n                               \\<Phi>' \\<Rightarrow>* \\<Psi>')", "apply (drule_tac x=xa in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           leftPrincipal (a, b) (F \\<nabla> [x].A) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( add_mset (F \\<nabla> [x].A)\n                 \\<Gamma> \\<Rightarrow>* \\<Delta>,\n               m)\n              \\<in> derivable  R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable  R*);\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        xa \\<in> set Ps;\n        xa \\<in> set Ps \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>' n.\n            n \\<le> n' \\<and>\n            ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n            \\<in> derivable  R* \\<and>\n            xa =\n            ( add_mset (F \\<nabla> [x].A)\n               \\<Phi>' \\<Rightarrow>* \\<Psi>'))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( add_mset (F \\<nabla> [x].A)\n                               \\<Phi>' \\<Rightarrow>* \\<Psi>')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>n = Suc n';\n        \\<forall>a b.\n           (a, b) \\<in> R \\<longrightarrow>\n           leftPrincipal (a, b) (F \\<nabla> [x].A) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( add_mset (F \\<nabla> [x].A)\n                 \\<Gamma> \\<Rightarrow>* \\<Delta>,\n               m)\n              \\<in> derivable  R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable  R*);\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        xa \\<in> set Ps;\n        \\<exists>\\<Phi>' \\<Psi>' n.\n           n \\<le> n' \\<and>\n           ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n           \\<in> derivable  R* \\<and>\n           xa =\n           ( add_mset (F \\<nabla> [x].A)\n              \\<Phi>' \\<Rightarrow>* \\<Psi>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( add_mset (F \\<nabla> [x].A)\n                               \\<Phi>' \\<Rightarrow>* \\<Psi>')", "apply hypsubst_thin"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>a b.\n                   (a, b) \\<in> R \\<longrightarrow>\n                   leftPrincipal (a, b) (F \\<nabla> [x].A) \\<longrightarrow>\n                   ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( add_mset (F \\<nabla> [x].A)\n                 \\<Gamma> \\<Rightarrow>* \\<Delta>,\n               m)\n              \\<in> derivable  R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable  R*);\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        xa \\<in> set Ps;\n        \\<exists>\\<Phi>' \\<Psi>' n.\n           n \\<le> n' \\<and>\n           ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n           \\<in> derivable  R* \\<and>\n           xa =\n           ( add_mset (F \\<nabla> [x].A)\n              \\<Phi>' \\<Rightarrow>* \\<Psi>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( add_mset (F \\<nabla> [x].A)\n                               \\<Phi>' \\<Rightarrow>* \\<Psi>')", "apply (elim exE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>\\<forall>a b.\n                   (a, b) \\<in> R \\<longrightarrow>\n                   leftPrincipal (a, b) (F \\<nabla> [x].A) \\<longrightarrow>\n                   ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<forall>m<Suc n'.\n           \\<forall>\\<Gamma> \\<Delta>.\n              ( add_mset (F \\<nabla> [x].A)\n                 \\<Gamma> \\<Rightarrow>* \\<Delta>,\n               m)\n              \\<in> derivable  R* \\<longrightarrow>\n              (\\<exists>m'\\<le>m.\n                  ( \\<Gamma> +\n                    \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                   m')\n                  \\<in> derivable  R*);\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        xa \\<in> set Ps; n \\<le> n';\n        ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable  R*;\n        xa =\n        ( add_mset (F \\<nabla> [x].A)\n           \\<Phi>' \\<Rightarrow>* \\<Psi>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( add_mset (F \\<nabla> [x].A)\n                               \\<Phi>' \\<Rightarrow>* \\<Psi>')", "apply (drule_tac x=n in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>\\<forall>a b.\n                   (a, b) \\<in> R \\<longrightarrow>\n                   leftPrincipal (a, b) (F \\<nabla> [x].A) \\<longrightarrow>\n                   ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        xa \\<in> set Ps; n \\<le> n';\n        ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable  R*;\n        xa = ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>');\n        n < Suc n' \\<longrightarrow>\n        (\\<forall>\\<Gamma> \\<Delta>.\n            ( add_mset (F \\<nabla> [x].A) \\<Gamma> \\<Rightarrow>* \\<Delta>,\n             n)\n            \\<in> derivable  R* \\<longrightarrow>\n            (\\<exists>m'\\<le>n.\n                ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                 m')\n                \\<in> derivable  R*))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' m.\n                            m \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( add_mset (F \\<nabla> [x].A)\n                               \\<Phi>' \\<Rightarrow>* \\<Psi>')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>\\<forall>a b.\n                   (a, b) \\<in> R \\<longrightarrow>\n                   leftPrincipal (a, b) (F \\<nabla> [x].A) \\<longrightarrow>\n                   ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable  R*;\n        xa = ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>');\n        \\<forall>\\<Gamma> \\<Delta>.\n           ( add_mset (F \\<nabla> [x].A) \\<Gamma> \\<Rightarrow>* \\<Delta>,\n            n)\n           \\<in> derivable  R* \\<longrightarrow>\n           (\\<exists>m'\\<le>n.\n               ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                m')\n               \\<in> derivable  R*)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R*", "apply (drule_tac x=\\<Phi>' in spec,drule_tac x=\\<Psi>' in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>\\<forall>a b.\n                   (a, b) \\<in> R \\<longrightarrow>\n                   leftPrincipal (a, b) (F \\<nabla> [x].A) \\<longrightarrow>\n                   ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable  R*;\n        xa = ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>');\n        ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable  R* \\<longrightarrow>\n        (\\<exists>m'\\<le>n.\n            ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m')\n            \\<in> derivable  R*)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R*", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>' n.\n       \\<lbrakk>\\<forall>a b.\n                   (a, b) \\<in> R \\<longrightarrow>\n                   leftPrincipal (a, b) (F \\<nabla> [x].A) \\<longrightarrow>\n                   ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable  R*;\n        xa = ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>');\n        \\<exists>m'\\<le>n.\n           ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m')\n           \\<in> derivable  R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R*", "apply (elim exE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>' n m'.\n       \\<lbrakk>\\<forall>a b.\n                   (a, b) \\<in> R \\<longrightarrow>\n                   leftPrincipal (a, b) (F \\<nabla> [x].A) \\<longrightarrow>\n                   ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set a;\n        \\<not> multSubst \\<Gamma>'; \\<not> multSubst \\<Delta>';\n        ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>')\n        \\<in> set Ps;\n        n \\<le> n';\n        ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>', n)\n        \\<in> derivable  R*;\n        xa = ( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>');\n        m' \\<le> n;\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m')\n        \\<in> derivable  R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             m)\n                            \\<in> derivable  R*", "by (rule_tac x=m' in exI) (arith)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' m.\n        m \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "obtain Ps' where eq: \"Ps' = map (extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Ps'.\n        Ps' =\n        map (extend\n              ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'))\n         ps \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps' =\n  map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have \"length Ps = length Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length Ps = length Ps'", "using \\<open>Ps' = map (extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\\<close>\n                              and \\<open>Ps = map (extend S) ps\\<close>"], ["proof (prove)\nusing this:\n  Ps' =\n  map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. length Ps = length Ps'", "by auto"], ["proof (state)\nthis:\n  length Ps = length Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  length Ps = length Ps'", "have \"Ps' \\<noteq> []\""], ["proof (prove)\nusing this:\n  length Ps = length Ps'\n\ngoal (1 subgoal):\n 1. Ps' \\<noteq> []", "using nonempty"], ["proof (prove)\nusing this:\n  length Ps = length Ps'\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. Ps' \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  Ps' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "from \\<open>r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3", "have \"r \\<in> R\""], ["proof (prove)\nusing this:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (1 subgoal):\n 1. r \\<in> R", "using \\<open>R = Ax \\<union> R1 \\<union> R2 \\<union> R3\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. r \\<in> R", "by auto"], ["proof (state)\nthis:\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R", "have \"extendRule (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r \\<in> R*\""], ["proof (prove)\nusing this:\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r\n    \\<in>  R*", "using \\<open>R = Ax \\<union> R1 \\<union> R2 \\<union> R3\\<close>\n     and extend_for_any_seq[where ?R1.0=R1 and ?R2.0=R2 and ?R3.0=R3 and R=R and r=r and S=\"\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'\"]\n     and \\<open>R1 \\<subseteq> upRules\\<close> and \\<open>R2 \\<subseteq> nprovRules\\<close> and \\<open>R3 \\<subseteq> provRules\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> R\n  R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<lbrakk>R1 \\<subseteq> upRules \\<and>\n           R2 \\<subseteq> nprovRules \\<and> R3 \\<subseteq> provRules;\n   R = Ax \\<union> R1 \\<union> R2 \\<union> R3; r \\<in> R\\<rbrakk>\n  \\<Longrightarrow> extendRule\n                     ( \\<Phi>1 +\n                       \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n                     r\n                    \\<in>  R*\n  R1 \\<subseteq> upRules\n  R2 \\<subseteq> nprovRules\n  R3 \\<subseteq> provRules\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r\n    \\<in>  R*", "by auto"], ["proof (state)\nthis:\n  extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r\n  \\<in>  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r\n  \\<in>  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have \"extendRule (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r = (Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r =\n    (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "using \\<open>S = (\\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\\<close> and \\<open>extendRule S r = (Ps, \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\\<close>\n         and \\<open>r = (ps,c)\\<close> and eq"], ["proof (prove)\nusing this:\n  S = ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r = (ps, c)\n  Ps' =\n  map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r =\n    (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "by (auto simp add:extendRule_def extend_def)"], ["proof (state)\nthis:\n  extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r =\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r\n  \\<in>  R*\n  extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r =\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')", "have \"(Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> R*\""], ["proof (prove)\nusing this:\n  extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r\n  \\<in>  R*\n  extendRule ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') r =\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n\ngoal (1 subgoal):\n 1. (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n    \\<in>  R*", "by simp"], ["proof (state)\nthis:\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in>  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have c1:\"\\<forall> p \\<in> set ps. extend S p \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps. extend S p \\<in> set Ps", "using \\<open>Ps = map (extend S) ps\\<close>"], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps. extend S p \\<in> set Ps", "by (simp add:Ball_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps. extend S p \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have c2:\"\\<forall> p \\<in> set ps. extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p \\<in> set Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n       \\<in> set Ps'", "using eq"], ["proof (prove)\nusing this:\n  Ps' =\n  map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps.\n       extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n       \\<in> set Ps'", "by (simp add:Ball_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n     \\<in> set Ps'", "have eq2:\"\\<forall> p \\<in> set Ps'. \\<exists> \\<Phi>' \\<Psi>'. p = (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "using eq"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n     \\<in> set Ps'\n  Ps' =\n  map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>'.\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "by (auto simp add:Ball_def extend_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have d1:\"\\<forall> p \\<in> set Ps. \\<exists> p' \\<in> set ps. p = extend S p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'", "using \\<open>Ps = map (extend S) ps\\<close>"], ["proof (prove)\nusing this:\n  Ps = map (extend S) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'", "have \"\\<forall> p \\<in> set Ps. \\<exists> p'. p' \\<in> set Ps'\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'", "using c2"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have d2: \"\\<forall> p \\<in> set Ps'. \\<exists> p' \\<in> set ps. p = extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>p'\\<in>set ps.\n          p =\n          extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'", "using eq"], ["proof (prove)\nusing this:\n  Ps' =\n  map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>p'\\<in>set ps.\n          p =\n          extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'", "have \"\\<forall> p \\<in> set Ps'. \\<exists> p'. p' \\<in> set Ps\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'. \\<exists>p'. p' \\<in> set Ps", "using c1"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'\n  \\<forall>p\\<in>set ps. extend S p \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'. \\<exists>p'. p' \\<in> set Ps", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'. \\<exists>p'. p' \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have \"\\<forall> \\<Phi>' \\<Psi>'. (\\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') \\<in> set Ps \\<longrightarrow> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "fix \\<Phi>' \\<Psi>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "assume \"(\\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') \\<in> set Ps\""], ["proof (state)\nthis:\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "have \"\\<exists> p \\<in> set ps. extend (\\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) p = (\\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) p =\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')", "using \\<open>Ps = map (extend S) ps\\<close> and \\<open>S = (\\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\\<close> and a1 and d1"], ["proof (prove)\nusing this:\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') \\<in> set Ps\n  Ps = map (extend S) ps\n  S = ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n  \\<forall>p\\<in>set Ps. \\<exists>p'\\<in>set ps. p = extend S p'\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) p =\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')", "apply (simp only:Ball_def Bex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n             \\<in> set (map (extend\n                              ( \\<Phi>1 \\<oplus>\n                                F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>))\n                         ps);\n     Ps =\n     map (extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>))\n      ps;\n     S = ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>);\n     \\<forall>xa.\n        xa \\<in> set (map (extend\n                            ( \\<Phi>1 \\<oplus>\n                              F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>))\n                       ps) \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            xa =\n            ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>'));\n     \\<forall>xa.\n        xa \\<in> set (map (extend\n                            ( \\<Phi>1 \\<oplus>\n                              F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>))\n                       ps) \\<longrightarrow>\n        (\\<exists>xb.\n            xb \\<in> set ps \\<and>\n            xa =\n            extend\n             ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n             xb)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi>1 \\<oplus>\n                            F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n                          xa =\n                         ( \\<Phi>' \\<oplus>\n                           F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')", "apply (drule_tac x=\" \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>'\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n             \\<in> set (map (extend\n                              ( \\<Phi>1 \\<oplus>\n                                F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>))\n                         ps);\n     Ps =\n     map (extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>))\n      ps;\n     S = ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>);\n     \\<forall>xa.\n        xa \\<in> set (map (extend\n                            ( \\<Phi>1 \\<oplus>\n                              F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>))\n                       ps) \\<longrightarrow>\n        (\\<exists>xb.\n            xb \\<in> set ps \\<and>\n            xa =\n            extend\n             ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) xb);\n     ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n     \\<in> set (map (extend\n                      ( \\<Phi>1 \\<oplus>\n                        F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>))\n                 ps) \\<longrightarrow>\n     (\\<exists>\\<Phi>'' \\<Psi>''.\n         ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n         ( \\<Phi>'' \\<oplus>\n           F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>''))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi>1 \\<oplus>\n                            F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n                          xa =\n                         ( \\<Phi>' \\<oplus>\n                           F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')", "by (drule_tac x=\"\\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>'\" in spec) (auto)"], ["proof (state)\nthis:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) p =\n     ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) p =\n     ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')", "obtain p where t:\"p \\<in> set ps \\<and> (\\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') = extend (\\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) p\""], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) p =\n     ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> set ps \\<and>\n        ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n        extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n         p \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>p.\n                   p \\<in> set ps \\<and>\n                   ( add_mset (F \\<nabla> [x].A)\n                      \\<Phi>' \\<Rightarrow>* \\<Psi>') =\n                   extend\n                    ( add_mset (F \\<nabla> [x].A)\n                       \\<Phi>1 \\<Rightarrow>* \\<Psi>)\n                    p \\<Longrightarrow>\n                   thesis;\n        p \\<in> set ps;\n        extend ( add_mset (F \\<nabla> [x].A) \\<Phi>1 \\<Rightarrow>* \\<Psi>)\n         p =\n        ( add_mset (F \\<nabla> [x].A)\n           \\<Phi>' \\<Rightarrow>* \\<Psi>')\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (drule_tac x=p in meta_spec) (simp)"], ["proof (state)\nthis:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) p\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) p", "obtain D B where \"p = (D \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) p\n\ngoal (1 subgoal):\n 1. (\\<And>D B.\n        p = ( D \\<Rightarrow>* B) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases p)"], ["proof (state)\nthis:\n  p = ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  p = ( D \\<Rightarrow>* B)", "have \"(D \\<Rightarrow>* B) \\<in> set ps \\<and> (\\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') = extend (\\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) (D \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p = ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n    extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n     ( D \\<Rightarrow>* B)", "using t"], ["proof (prove)\nusing this:\n  p = ( D \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) p\n\ngoal (1 subgoal):\n 1. ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n    extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n     ( D \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n   ( D \\<Rightarrow>* B)", "have ant: \"\\<Phi>' \\<oplus> F \\<nabla> [x].A = \\<Phi>1 \\<oplus> F \\<nabla> [x].A + D\" and suc: \"\\<Psi>' = \\<Psi> + B\""], ["proof (prove)\nusing this:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<Phi>' \\<oplus> F \\<nabla> [x].A =\n    \\<Phi>1 \\<oplus> F \\<nabla> [x].A + D &&&\n    \\<Psi>' = \\<Psi> + B", "using extend_def"], ["proof (prove)\nusing this:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n   ( D \\<Rightarrow>* B)\n  extend ?forms ?seq \\<equiv>\n   antec ?forms + antec ?seq \\<Rightarrow>* succ ?forms + succ ?seq\n\ngoal (1 subgoal):\n 1. \\<Phi>' \\<oplus> F \\<nabla> [x].A =\n    \\<Phi>1 \\<oplus> F \\<nabla> [x].A + D &&&\n    \\<Psi>' = \\<Psi> + B", "by auto"], ["proof (state)\nthis:\n  \\<Phi>' \\<oplus> F \\<nabla> [x].A = \\<Phi>1 \\<oplus> F \\<nabla> [x].A + D\n  \\<Psi>' = \\<Psi> + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "from suc"], ["proof (chain)\npicking this:\n  \\<Psi>' = \\<Psi> + B", "have \"\\<Psi>' + \\<Delta>' = (\\<Psi> + \\<Delta>') + B\""], ["proof (prove)\nusing this:\n  \\<Psi>' = \\<Psi> + B\n\ngoal (1 subgoal):\n 1. \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "moreover"], ["proof (state)\nthis:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "from ant"], ["proof (chain)\npicking this:\n  \\<Phi>' \\<oplus> F \\<nabla> [x].A = \\<Phi>1 \\<oplus> F \\<nabla> [x].A + D", "have \"\\<Phi>' = \\<Phi>1 + D\""], ["proof (prove)\nusing this:\n  \\<Phi>' \\<oplus> F \\<nabla> [x].A = \\<Phi>1 \\<oplus> F \\<nabla> [x].A + D\n\ngoal (1 subgoal):\n 1. \\<Phi>' = \\<Phi>1 + D", "by auto"], ["proof (state)\nthis:\n  \\<Phi>' = \\<Phi>1 + D\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "then"], ["proof (chain)\npicking this:\n  \\<Phi>' = \\<Phi>1 + D", "have \"\\<Phi>' + \\<Gamma>' = (\\<Phi>1 + \\<Gamma>') + D\""], ["proof (prove)\nusing this:\n  \\<Phi>' = \\<Phi>1 + D\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + D", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + D\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + D", "have \"(\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') = extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') (D \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + D\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n     ( D \\<Rightarrow>* B)", "using extend_def"], ["proof (prove)\nusing this:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + D\n  extend ?forms ?seq \\<equiv>\n   antec ?forms + antec ?seq \\<Rightarrow>* succ ?forms + succ ?seq\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n     ( D \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "moreover"], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "have \"extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') (D \\<Rightarrow>* B) \\<in> set Ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n     ( D \\<Rightarrow>* B)\n    \\<in> set Ps'", "using \\<open>p = (D \\<Rightarrow>* B)\\<close> and t and c2"], ["proof (prove)\nusing this:\n  p = ( D \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) p\n  \\<forall>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n     \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n     ( D \\<Rightarrow>* B)\n    \\<in> set Ps'", "by auto"], ["proof (state)\nthis:\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "ultimately"], ["proof (chain)\npicking this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n  \\<in> set Ps'", "have \"(\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'", "by simp"], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "}"], ["proof (state)\nthis:\n  ( ?\\<Phi>'2 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* ?\\<Psi>'2)\n  \\<in> set Ps \\<Longrightarrow>\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "thus ?thesis"], ["proof (prove)\nusing this:\n  ( ?\\<Phi>'2 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* ?\\<Psi>'2)\n  \\<in> set Ps \\<Longrightarrow>\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps \\<longrightarrow>\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps'", "by blast"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "have \"\\<forall> \\<Phi>' \\<Psi>'. (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps' \\<longrightarrow> (\\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "fix \\<Phi>' \\<Psi>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "assume \"(\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\""], ["proof (state)\nthis:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'", "have \"\\<exists> p \\<in> set ps. extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p = (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p =\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "using eq and eq2 and d2"], ["proof (prove)\nusing this:\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n  Ps' =\n  map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')) ps\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>p'\\<in>set ps.\n        p =\n        extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p'\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>set ps.\n       extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p =\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (simp only:Ball_def Bex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n             \\<in> set (map (extend\n                              ( \\<Phi>1 +\n                                \\<Gamma>' \\<Rightarrow>* \\<Psi> +\n                   \\<Delta>'))\n                         ps);\n     Ps' =\n     map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'))\n      ps;\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi>1 +\n                             \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'))\n                      ps) \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            x = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'));\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi>1 +\n                             \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'))\n                      ps) \\<longrightarrow>\n        (\\<exists>xa.\n            xa \\<in> set ps \\<and>\n            x =\n            extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n             xa)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi>1 +\n                            \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n                          x =\n                         ( \\<Phi>' +\n                           \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (drule_tac x=\"\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n             \\<in> set (map (extend\n                              ( \\<Phi>1 +\n                                \\<Gamma>' \\<Rightarrow>* \\<Psi> +\n                   \\<Delta>'))\n                         ps);\n     Ps' =\n     map (extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'))\n      ps;\n     \\<forall>x.\n        x \\<in> set (map (extend\n                           ( \\<Phi>1 +\n                             \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'))\n                      ps) \\<longrightarrow>\n        (\\<exists>xa.\n            xa \\<in> set ps \\<and>\n            x =\n            extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n             xa);\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set (map (extend\n                      ( \\<Phi>1 +\n                        \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>'))\n                 ps) \\<longrightarrow>\n     (\\<exists>\\<Phi>'' \\<Psi>''.\n         ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n         ( \\<Phi>'' +\n           \\<Gamma>' \\<Rightarrow>* \\<Psi>'' + \\<Delta>'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> set ps \\<and>\n                         extend\n                          ( \\<Phi>1 +\n                            \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n                          x =\n                         ( \\<Phi>' +\n                           \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "by (drule_tac x=\"\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'\" in spec) (auto)"], ["proof (state)\nthis:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p =\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p =\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "obtain p where t:\"p \\<in> set ps \\<and> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') = extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\""], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>set ps.\n     extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p =\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> set ps \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n        extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n         p \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>p.\n                   p \\<in> set ps \\<and>\n                   ( \\<Phi>' +\n                     \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n                   extend\n                    ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n                    p \\<Longrightarrow>\n                   thesis;\n        p \\<in> set ps;\n        extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p =\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (drule_tac x=p in meta_spec) (simp)"], ["proof (state)\nthis:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p", "obtain D B where \"p = (D \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n\ngoal (1 subgoal):\n 1. (\\<And>D B.\n        p = ( D \\<Rightarrow>* B) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases p)"], ["proof (state)\nthis:\n  p = ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  p = ( D \\<Rightarrow>* B)", "have \"(D \\<Rightarrow>* B) \\<in> set ps \\<and> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') = extend (\\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') (D \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  p = ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n     ( D \\<Rightarrow>* B)", "using t"], ["proof (prove)\nusing this:\n  p = ( D \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n\ngoal (1 subgoal):\n 1. ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n    ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n    extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n     ( D \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( D \\<Rightarrow>* B)", "have ant: \"\\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + D\" and suc: \"\\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B\""], ["proof (prove)\nusing this:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + D &&&\n    \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B", "using extend_def"], ["proof (prove)\nusing this:\n  ( D \\<Rightarrow>* B) \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n   ( D \\<Rightarrow>* B)\n  extend ?forms ?seq \\<equiv>\n   antec ?forms + antec ?seq \\<Rightarrow>* succ ?forms + succ ?seq\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + D &&&\n    \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B", "by auto"], ["proof (state)\nthis:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + D\n  \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "from ant"], ["proof (chain)\npicking this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + D", "have \"\\<Phi>' + \\<Gamma>' = (\\<Phi>1 + D) + \\<Gamma>'\""], ["proof (prove)\nusing this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + \\<Gamma>' + D\n\ngoal (1 subgoal):\n 1. \\<Phi>' + \\<Gamma>' = \\<Phi>1 + D + \\<Gamma>'", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + D + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + D + \\<Gamma>'", "have \"\\<Phi>' = \\<Phi>1 + D\""], ["proof (prove)\nusing this:\n  \\<Phi>' + \\<Gamma>' = \\<Phi>1 + D + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<Phi>' = \\<Phi>1 + D", "by simp"], ["proof (state)\nthis:\n  \\<Phi>' = \\<Phi>1 + D\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<Phi>' = \\<Phi>1 + D", "have \"\\<Phi>' \\<oplus> F \\<nabla> [x].A = (\\<Phi>1 \\<oplus> F \\<nabla> [x].A) + D\""], ["proof (prove)\nusing this:\n  \\<Phi>' = \\<Phi>1 + D\n\ngoal (1 subgoal):\n 1. \\<Phi>' \\<oplus> F \\<nabla> [x].A =\n    \\<Phi>1 \\<oplus> F \\<nabla> [x].A + D", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Phi>' \\<oplus> F \\<nabla> [x].A = \\<Phi>1 \\<oplus> F \\<nabla> [x].A + D\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "moreover"], ["proof (state)\nthis:\n  \\<Phi>' \\<oplus> F \\<nabla> [x].A = \\<Phi>1 \\<oplus> F \\<nabla> [x].A + D\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "from suc"], ["proof (chain)\npicking this:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B", "have \"\\<Psi>' + \\<Delta>' = (\\<Psi> + B) + \\<Delta>'\""], ["proof (prove)\nusing this:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + \\<Delta>' + B\n\ngoal (1 subgoal):\n 1. \\<Psi>' + \\<Delta>' = \\<Psi> + B + \\<Delta>'", "by (auto simp add:union_ac)"], ["proof (state)\nthis:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + B + \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "then"], ["proof (chain)\npicking this:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + B + \\<Delta>'", "have \"\\<Psi>' = \\<Psi> + B\""], ["proof (prove)\nusing this:\n  \\<Psi>' + \\<Delta>' = \\<Psi> + B + \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<Psi>' = \\<Psi> + B", "by simp"], ["proof (state)\nthis:\n  \\<Psi>' = \\<Psi> + B\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "ultimately"], ["proof (chain)\npicking this:\n  \\<Phi>' \\<oplus> F \\<nabla> [x].A = \\<Phi>1 \\<oplus> F \\<nabla> [x].A + D\n  \\<Psi>' = \\<Psi> + B", "have \"(\\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') = extend (\\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>) (D \\<Rightarrow>* B)\""], ["proof (prove)\nusing this:\n  \\<Phi>' \\<oplus> F \\<nabla> [x].A = \\<Phi>1 \\<oplus> F \\<nabla> [x].A + D\n  \\<Psi>' = \\<Psi> + B\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n    extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n     ( D \\<Rightarrow>* B)", "using extend_def"], ["proof (prove)\nusing this:\n  \\<Phi>' \\<oplus> F \\<nabla> [x].A = \\<Phi>1 \\<oplus> F \\<nabla> [x].A + D\n  \\<Psi>' = \\<Psi> + B\n  extend ?forms ?seq \\<equiv>\n   antec ?forms + antec ?seq \\<Rightarrow>* succ ?forms + succ ?seq\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n    extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n     ( D \\<Rightarrow>* B)", "by auto"], ["proof (state)\nthis:\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "moreover"], ["proof (state)\nthis:\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n   ( D \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "have \"extend (\\<Phi>1 \\<oplus> F \\<nabla> [x].A  \\<Rightarrow>* \\<Psi>) (D \\<Rightarrow>* B) \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n     ( D \\<Rightarrow>* B)\n    \\<in> set Ps", "using \\<open>p = (D \\<Rightarrow>* B)\\<close> and t and c1\n                      and \\<open>S = (\\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\\<close>"], ["proof (prove)\nusing this:\n  p = ( D \\<Rightarrow>* B)\n  p \\<in> set ps \\<and>\n  ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') =\n  extend ( \\<Phi>1 + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>') p\n  \\<forall>p\\<in>set ps. extend S p \\<in> set Ps\n  S = ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n     ( D \\<Rightarrow>* B)\n    \\<in> set Ps", "by auto"], ["proof (state)\nthis:\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n   ( D \\<Rightarrow>* B)\n  \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "ultimately"], ["proof (chain)\npicking this:\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n   ( D \\<Rightarrow>* B)\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n   ( D \\<Rightarrow>* B)\n  \\<in> set Ps", "have \"(\\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') \\<in> set Ps\""], ["proof (prove)\nusing this:\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') =\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n   ( D \\<Rightarrow>* B)\n  extend ( \\<Phi>1 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>)\n   ( D \\<Rightarrow>* B)\n  \\<in> set Ps\n\ngoal (1 subgoal):\n 1. ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') \\<in> set Ps", "by simp"], ["proof (state)\nthis:\n  ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "}"], ["proof (state)\nthis:\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps' \\<Longrightarrow>\n  ( ?\\<Phi>'2 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* ?\\<Psi>'2)\n  \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "thus ?thesis"], ["proof (prove)\nusing this:\n  ( ?\\<Phi>'2 + \\<Gamma>' \\<Rightarrow>* ?\\<Psi>'2 + \\<Delta>')\n  \\<in> set Ps' \\<Longrightarrow>\n  ( ?\\<Phi>'2 \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* ?\\<Psi>'2)\n  \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n       \\<in> set Ps' \\<longrightarrow>\n       ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n       \\<in> set Ps", "by blast"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n     \\<in> set Ps\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n     \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n     \\<in> set Ps", "have \"\\<forall> \\<Phi>' \\<Psi>'. ((\\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>') \\<in> set Ps) = ((\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps')\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>p'. p' \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n     \\<in> set Ps \\<longrightarrow>\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>') \\<in> set Ps'\n  \\<forall>\\<Phi>' \\<Psi>'.\n     ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n     \\<in> set Ps' \\<longrightarrow>\n     ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n     \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>\\<Phi>' \\<Psi>'.\n       (( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n        \\<in> set Ps) =\n       (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n        \\<in> set Ps')", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')", "have \"\\<forall> p \\<in> set Ps'. \\<exists> \\<Phi>' \\<Psi>' n. n\\<le>n' \\<and> (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',n) \\<in> derivable R*\n                \\<and> p = (\\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\""], ["proof (prove)\nusing this:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>' n.\n          n \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n          \\<in> derivable  R* \\<and>\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "using eq2 and a2"], ["proof (prove)\nusing this:\n  \\<forall>\\<Phi>' \\<Psi>'.\n     (( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n      \\<in> set Ps) =\n     (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n      \\<in> set Ps')\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>'.\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n  \\<forall>p\\<in>set Ps.\n     \\<exists>\\<Phi>' \\<Psi>' m.\n        m \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'.\n       \\<exists>\\<Phi>' \\<Psi>' n.\n          n \\<le> n' \\<and>\n          ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n          \\<in> derivable  R* \\<and>\n          p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                (( add_mset (F \\<nabla> [x].A)\n                    \\<Phi>' \\<Rightarrow>* \\<Psi>')\n                 \\<in> set Ps) =\n                (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                 \\<in> set Ps');\n     \\<forall>x.\n        x \\<in> set Ps' \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            x = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'));\n     \\<forall>xa.\n        xa \\<in> set Ps \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>' m.\n            m \\<le> n' \\<and>\n            ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n            \\<in> derivable  R* \\<and>\n            xa =\n            ( add_mset (F \\<nabla> [x].A)\n               \\<Phi>' \\<Rightarrow>* \\<Psi>'))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         x \\<in> set Ps' \\<longrightarrow>\n                         (\\<exists>\\<Phi>' \\<Psi>' n.\n                             n \\<le> n' \\<and>\n                             ( \\<Phi>' +\n                               \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                              n)\n                             \\<in> derivable  R* \\<and>\n                             x =\n                             ( \\<Phi>' +\n                               \\<Gamma>' \\<Rightarrow>* \\<Psi>' +\n                  \\<Delta>'))", "apply (intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( add_mset (F \\<nabla> [x].A)\n                       \\<Phi>' \\<Rightarrow>* \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>x.\n           x \\<in> set Ps' \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>'.\n               x =\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'));\n        \\<forall>xa.\n           xa \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable  R* \\<and>\n               xa =\n               ( add_mset (F \\<nabla> [x].A)\n                  \\<Phi>' \\<Rightarrow>* \\<Psi>'));\n        xa \\<in> set Ps'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (drule_tac x=xa in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( add_mset (F \\<nabla> [x].A)\n                       \\<Phi>' \\<Rightarrow>* \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>xa.\n           xa \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable  R* \\<and>\n               xa =\n               ( add_mset (F \\<nabla> [x].A)\n                  \\<Phi>' \\<Rightarrow>* \\<Psi>'));\n        xa \\<in> set Ps';\n        xa \\<in> set Ps' \\<longrightarrow>\n        (\\<exists>\\<Phi>' \\<Psi>'.\n            xa =\n            ( \\<Phi>' +\n              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>'))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( add_mset (F \\<nabla> [x].A)\n                       \\<Phi>' \\<Rightarrow>* \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>xa.\n           xa \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable  R* \\<and>\n               xa =\n               ( add_mset (F \\<nabla> [x].A)\n                  \\<Phi>' \\<Rightarrow>* \\<Psi>'));\n        xa \\<in> set Ps';\n        \\<exists>\\<Phi>' \\<Psi>'.\n           xa =\n           ( \\<Phi>' +\n             \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>'.\n       \\<lbrakk>\\<forall>\\<Phi>' \\<Psi>'.\n                   (( add_mset (F \\<nabla> [x].A)\n                       \\<Phi>' \\<Rightarrow>* \\<Psi>')\n                    \\<in> set Ps) =\n                   (( \\<Phi>' +\n                      \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n                    \\<in> set Ps');\n        \\<forall>xa.\n           xa \\<in> set Ps \\<longrightarrow>\n           (\\<exists>\\<Phi>' \\<Psi>' m.\n               m \\<le> n' \\<and>\n               ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', m)\n               \\<in> derivable  R* \\<and>\n               xa =\n               ( add_mset (F \\<nabla> [x].A)\n                  \\<Phi>' \\<Rightarrow>* \\<Psi>'));\n        xa \\<in> set Ps';\n        xa =\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "apply (drule_tac x=\\<Phi>' in spec,drule_tac x=\\<Psi>' in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<Phi>' \\<Psi>'.\n       \\<lbrakk>\\<forall>xa.\n                   xa \\<in> set Ps \\<longrightarrow>\n                   (\\<exists>\\<Phi>' \\<Psi>' m.\n                       m \\<le> n' \\<and>\n                       ( \\<Phi>' +\n                         \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                        m)\n                       \\<in> derivable  R* \\<and>\n                       xa =\n                       ( add_mset (F \\<nabla> [x].A)\n                          \\<Phi>' \\<Rightarrow>* \\<Psi>'));\n        xa \\<in> set Ps';\n        xa = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>');\n        (( add_mset (F \\<nabla> [x].A) \\<Phi>' \\<Rightarrow>* \\<Psi>')\n         \\<in> set Ps) =\n        (( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n         \\<in> set Ps')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Phi>' \\<Psi>' n.\n                            n \\<le> n' \\<and>\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>',\n                             n)\n                            \\<in> derivable  R* \\<and>\n                            xa =\n                            ( \\<Phi>' +\n                              \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "by (drule_tac x=\"\\<Phi>' \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Psi>'\" in spec) (simp)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')", "have all:\"\\<forall> p \\<in> set Ps'. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'.\n     \\<exists>\\<Phi>' \\<Psi>' n.\n        n \\<le> n' \\<and>\n        ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>', n)\n        \\<in> derivable  R* \\<and>\n        p = ( \\<Phi>' + \\<Gamma>' \\<Rightarrow>* \\<Psi>' + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*", "show \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using num\n     and \\<open>(Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> R*\\<close> and \\<open>Ps' \\<noteq> []\\<close>\n     and derivable.step[where r=\"(Ps',\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\" and R=\"R*\"]"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps'. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n  n = n' + 1\n  (Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in>  R*\n  Ps' \\<noteq> []\n  \\<lbrakk>(Ps',  \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>')\n           \\<in>  R*;\n   fst (Ps',\n         \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<noteq>\n   [];\n   \\<forall>p\\<in>set (fst (Ps',\n                             \\<Gamma> +\n                             \\<Gamma>' \\<Rightarrow>* \\<Delta> +\n                \\<Delta>')).\n      \\<exists>n\\<le>?m. (p, n) \\<in> derivable  R*\\<rbrakk>\n  \\<Longrightarrow> (snd (Ps',\n                           \\<Gamma> +\n                           \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>'),\n                     ?m + 1)\n                    \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by (auto simp add:Ball_def Bex_def)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\\noindent We can then give the two inversion lemmata.  The principal case (where the last inference had a freshness proviso) for the right inversion lemma is shown:\n\\<close>"], ["", "lemma rightInvert:\nfixes \\<Gamma> \\<Delta> :: \"form multiset\"\nassumes rules: \"R1 \\<subseteq> upRules \\<and> R2 \\<subseteq> nprovRules \\<and> R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\"\n    and   a: \"(\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A,n) \\<in> derivable R*\"\n    and   b: \"\\<forall> r' \\<in> R. rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\"\n    and   c: \"\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> +\\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using assms"], ["proof (prove)\nusing this:\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "proof (induct n arbitrary: \\<Gamma> \\<Delta> rule:nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<Delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   R1 \\<subseteq> upRules \\<and>\n                   R2 \\<subseteq> nprovRules \\<and>\n                   R3 \\<subseteq> provRules \\<and>\n                   R =\n                   Ax \\<union> R1 \\<union> R2 \\<union> R3 \\<longrightarrow>\n                   (\\<forall>xa xb.\n                       ( xa \\<Rightarrow>* xb \\<oplus> F \\<nabla> [x].A, m)\n                       \\<in> derivable  R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           rightPrincipal r'\n                            (F \\<nabla> [x].A) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       \\<not> multSubst \\<Gamma>' \\<and>\n                       \\<not> multSubst \\<Delta>' \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( xa + \\<Gamma>' \\<Rightarrow>* xb + \\<Delta>',\n                            ma)\n                           \\<in> derivable  R*));\n        R1 \\<subseteq> upRules \\<and>\n        R2 \\<subseteq> nprovRules \\<and>\n        R3 \\<subseteq> provRules \\<and>\n        R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n        \\<in> derivable  R*;\n        \\<forall>r'\\<in>R.\n           rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r');\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> +\n                              \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                             m)\n                            \\<in> derivable  R*", "case (1 n \\<Gamma> \\<Delta>)"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     R1 \\<subseteq> upRules \\<and>\n     R2 \\<subseteq> nprovRules \\<and>\n     R3 \\<subseteq> provRules \\<and>\n     R = Ax \\<union> R1 \\<union> R2 \\<union> R3 \\<longrightarrow>\n     (\\<forall>xa xb.\n         ( xa \\<Rightarrow>* xb \\<oplus> F \\<nabla> [x].A, m)\n         \\<in> derivable  R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         \\<not> multSubst \\<Gamma>' \\<and>\n         \\<not> multSubst \\<Delta>' \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( xa + \\<Gamma>' \\<Rightarrow>* xb + \\<Delta>', ma)\n             \\<in> derivable  R*))\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<Delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   R1 \\<subseteq> upRules \\<and>\n                   R2 \\<subseteq> nprovRules \\<and>\n                   R3 \\<subseteq> provRules \\<and>\n                   R =\n                   Ax \\<union> R1 \\<union> R2 \\<union> R3 \\<longrightarrow>\n                   (\\<forall>xa xb.\n                       ( xa \\<Rightarrow>* xb \\<oplus> F \\<nabla> [x].A, m)\n                       \\<in> derivable  R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           rightPrincipal r'\n                            (F \\<nabla> [x].A) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       \\<not> multSubst \\<Gamma>' \\<and>\n                       \\<not> multSubst \\<Delta>' \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( xa + \\<Gamma>' \\<Rightarrow>* xb + \\<Delta>',\n                            ma)\n                           \\<in> derivable  R*));\n        R1 \\<subseteq> upRules \\<and>\n        R2 \\<subseteq> nprovRules \\<and>\n        R3 \\<subseteq> provRules \\<and>\n        R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n        \\<in> derivable  R*;\n        \\<forall>r'\\<in>R.\n           rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r');\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> +\n                              \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                             m)\n                            \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     R1 \\<subseteq> upRules \\<and>\n     R2 \\<subseteq> nprovRules \\<and>\n     R3 \\<subseteq> provRules \\<and>\n     R = Ax \\<union> R1 \\<union> R2 \\<union> R3 \\<longrightarrow>\n     (\\<forall>xa xb.\n         ( xa \\<Rightarrow>* xb \\<oplus> F \\<nabla> [x].A, m)\n         \\<in> derivable  R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         \\<not> multSubst \\<Gamma>' \\<and>\n         \\<not> multSubst \\<Delta>' \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( xa + \\<Gamma>' \\<Rightarrow>* xb + \\<Delta>', ma)\n             \\<in> derivable  R*))\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'", "have IH:\"\\<forall>m<n. \\<forall>\\<Gamma> \\<Delta>. ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, m) \\<in> derivable R* \\<longrightarrow>\n              (\\<forall>r' \\<in> R. rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')) \\<longrightarrow>\n              (\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>') \\<longrightarrow>\n              (\\<exists>m'\\<le>m. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m') \\<in> derivable R*)\" \n     and a': \"(\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A,n) \\<in> derivable R*\" \n     and b': \"\\<forall> r' \\<in> R. rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\"\n     and c': \"\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     R1 \\<subseteq> upRules \\<and>\n     R2 \\<subseteq> nprovRules \\<and>\n     R3 \\<subseteq> provRules \\<and>\n     R = Ax \\<union> R1 \\<union> R2 \\<union> R3 \\<longrightarrow>\n     (\\<forall>xa xb.\n         ( xa \\<Rightarrow>* xb \\<oplus> F \\<nabla> [x].A, m)\n         \\<in> derivable  R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         \\<not> multSubst \\<Gamma>' \\<and>\n         \\<not> multSubst \\<Delta>' \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( xa + \\<Gamma>' \\<Rightarrow>* xb + \\<Delta>', ma)\n             \\<in> derivable  R*))\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n\ngoal (1 subgoal):\n 1. (\\<forall>m<n.\n        \\<forall>\\<Gamma> \\<Delta>.\n           ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, m)\n           \\<in> derivable  R* \\<longrightarrow>\n           (\\<forall>r'\\<in>R.\n               rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n               ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n               \\<in> set (fst r')) \\<longrightarrow>\n           \\<not> multSubst \\<Gamma>' \\<and>\n           \\<not> multSubst \\<Delta>' \\<longrightarrow>\n           (\\<exists>m'\\<le>m.\n               ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                m')\n               \\<in> derivable  R*) &&&\n     ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n     \\<in> derivable  R*) &&&\n    \\<forall>r'\\<in>R.\n       rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r') &&&\n    \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'", "by auto"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, m)\n        \\<in> derivable  R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n            \\<in> set (fst r')) \\<longrightarrow>\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>' \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n            \\<in> derivable  R*)\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<Delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   R1 \\<subseteq> upRules \\<and>\n                   R2 \\<subseteq> nprovRules \\<and>\n                   R3 \\<subseteq> provRules \\<and>\n                   R =\n                   Ax \\<union> R1 \\<union> R2 \\<union> R3 \\<longrightarrow>\n                   (\\<forall>xa xb.\n                       ( xa \\<Rightarrow>* xb \\<oplus> F \\<nabla> [x].A, m)\n                       \\<in> derivable  R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           rightPrincipal r'\n                            (F \\<nabla> [x].A) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       \\<not> multSubst \\<Gamma>' \\<and>\n                       \\<not> multSubst \\<Delta>' \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( xa + \\<Gamma>' \\<Rightarrow>* xb + \\<Delta>',\n                            ma)\n                           \\<in> derivable  R*));\n        R1 \\<subseteq> upRules \\<and>\n        R2 \\<subseteq> nprovRules \\<and>\n        R3 \\<subseteq> provRules \\<and>\n        R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n        \\<in> derivable  R*;\n        \\<forall>r'\\<in>R.\n           rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r');\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> +\n                              \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                             m)\n                            \\<in> derivable  R*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  n = 0", "have \"(\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, 0)\n    \\<in> derivable  R*", "using a'"], ["proof (prove)\nusing this:\n  n = 0\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n  \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, 0)\n    \\<in> derivable  R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, 0)\n  \\<in> derivable  R*", "have \"([],\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A) \\<in> R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, 0)\n  \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n    \\<in>  R*", "by (cases) (auto)"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  \\<in>  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  \\<in>  R*", "have \"\\<exists> r S. extendRule S r = ([],\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A) \\<and> (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3)\""], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  \\<in>  R*\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       extendRule S r =\n       ([],\n         \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A) \\<and>\n       (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3)", "using rules and ruleSet[where ?R1.0=R1 and ?R2.0=R2 and ?R3.0=R3 and R=R and Ps=\"[]\" and C=\"\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A\"]"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  \\<in>  R*\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<lbrakk>R1 \\<subseteq> upRules; R2 \\<subseteq> nprovRules;\n   R3 \\<subseteq> provRules; R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n   ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n   \\<in>  R*\\<rbrakk>\n  \\<Longrightarrow> \\<exists>S r.\n                       extendRule S r =\n                       ([],\n                         \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus>\n           F \\<nabla> [x].A) \\<and>\n                       (r \\<in> R1 \\<or>\n                        r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax)\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       extendRule S r =\n       ([],\n         \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A) \\<and>\n       (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3)", "by auto"], ["proof (state)\nthis:\n  \\<exists>r S.\n     extendRule S r =\n     ([],\n       \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>r S.\n     extendRule S r =\n     ([],\n       \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3)", "obtain r S where \"extendRule S r = ([],\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\" and \"r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\""], ["proof (prove)\nusing this:\n  \\<exists>r S.\n     extendRule S r =\n     ([],\n       \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3)\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>extendRule S r =\n                 ([],\n                   \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus>\n     F \\<nabla> [x].A);\n         r \\<in> Ax \\<or>\n         r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r \\<in> Ax\""], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "obtain i xs where \"([], \\<LM> At i xs \\<RM> \\<Rightarrow>* \\<LM> At i xs \\<RM>) = r \\<or> r = ([],\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. (\\<And>i xs.\n        ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n        r \\<or>\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseAx[where r=r]"], ["proof (prove)\nusing this:\n  r \\<in> Ax\n  r \\<in> Ax \\<Longrightarrow>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  (\\<exists>i xs.\n      r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>))\n\ngoal (1 subgoal):\n 1. (\\<And>i xs.\n        ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n        r \\<or>\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) = r \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) = r \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) = r \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r = ([],\\<LM>At i xs\\<RM> \\<Rightarrow>* \\<LM>At i xs\\<RM>)\""], ["proof (state)\nthis:\n  r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "with \\<open>extendRule S r = ([],\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)", "have \"extend S (\\<LM> At i xs \\<RM> \\<Rightarrow>* \\<LM> At i xs \\<RM>) = (\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)", "using extendRule_def[where R=\"([],\\<LM>At i xs\\<RM> \\<Rightarrow>* \\<LM>At i xs\\<RM>)\" and forms=S]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)\n  extendRule S\n   ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<equiv>\n  (map (extend S)\n    (fst ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)),\n   extend S\n    (snd ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)))\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)", "by auto"], ["proof (state)\nthis:\n  extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)", "have \"At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>", "using extendID[where S=S and i=i and xs=xs and \\<Gamma>=\\<Gamma> and \\<Delta>=\"\\<Delta> \\<oplus> F \\<nabla> [x].A\"]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus>\n                            F \\<nabla> [x].A) \\<Longrightarrow>\n  At i xs \\<in># \\<Gamma> \\<and>\n  At i xs \\<in># \\<Delta> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>", "by auto"], ["proof (state)\nthis:\n  At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>", "have \"At i xs \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i xs \\<in># \\<Delta> + \\<Delta>'\""], ["proof (prove)\nusing this:\n  At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>\n\ngoal (1 subgoal):\n 1. At i xs \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n    At i xs \\<in># \\<Delta> + \\<Delta>'", "by auto"], ["proof (state)\nthis:\n  At i xs \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n  At i xs \\<in># \\<Delta> + \\<Delta>'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  At i xs \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n  At i xs \\<in># \\<Delta> + \\<Delta>'", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  At i xs \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n  At i xs \\<in># \\<Delta> + \\<Delta>'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable  R*", "using rules\n                 and containID[where \\<Gamma>=\"\\<Gamma> + \\<Gamma>'\" and i=i and \\<Delta>=\"\\<Delta> + \\<Delta>'\" and R=R]"], ["proof (prove)\nusing this:\n  At i xs \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n  At i xs \\<in># \\<Delta> + \\<Delta>'\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<lbrakk>At i ?xs \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n           At i ?xs \\<in># \\<Delta> + \\<Delta>';\n   Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> +\n                      \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                     0)\n                    \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r =\n  ([],\n    \\<LM> At i\n           xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  r =\n  ([],\n    \\<LM> At i\n           xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  r =\n  ([],\n    \\<LM> At i\n           xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r = ([],\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "with \\<open>extendRule S r = ([],\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"extend S (\\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) = (\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)", "using extendRule_def[where R=\"([],\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\" and forms=S]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  extendRule S ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<equiv>\n  (map (extend S) (fst ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)),\n   extend S (snd ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)))\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)", "by auto"], ["proof (state)\nthis:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)", "have \"ff \\<in># \\<Gamma>\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "using extendFalsum[where S=S and \\<Gamma>=\\<Gamma> and \\<Delta>=\"\\<Delta> \\<oplus> F \\<nabla> [x].A\"]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus>\n                            F \\<nabla> [x].A) \\<Longrightarrow>\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma>", "have \"ff \\<in># \\<Gamma> + \\<Gamma>'\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma> + \\<Gamma>'", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable  R*", "using rules\n                 and containFalsum[where \\<Gamma>=\"\\<Gamma> + \\<Gamma>'\" and \\<Delta>=\"\\<Delta> + \\<Delta>'\" and R=R]"], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<lbrakk>ff \\<in># \\<Gamma> + \\<Gamma>'; Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> +\n                      \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                     0)\n                    \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) = r \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  r =\n  ([],\n    \\<LM> At i\n           xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) = r \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  r =\n  ([],\n    \\<LM> At i\n           xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable  R*", "by blast"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\""], ["proof (state)\nthis:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3", "have \"\\<exists> Ps C. Ps \\<noteq> [] \\<and> r = (Ps,C)\""], ["proof (prove)\nusing this:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "obtain y z where \"r = (y,z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y z. r = (y, z) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r)"], ["proof (state)\nthis:\n  r = (y, z)\n\ngoal (1 subgoal):\n 1. r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "with \\<open>r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  r = (y, z)", "have \"(y,z) \\<in> R1 \\<or> (y,z) \\<in> R2 \\<or> (y,z) \\<in> R3\""], ["proof (prove)\nusing this:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  r = (y, z)\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or> (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3", "by simp"], ["proof (state)\nthis:\n  (y, z) \\<in> R1 \\<or> (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3\n\ngoal (1 subgoal):\n 1. r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "then"], ["proof (chain)\npicking this:\n  (y, z) \\<in> R1 \\<or> (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3", "have \"y \\<noteq> []\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> R1 \\<or> (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3\n\ngoal (1 subgoal):\n 1. y \\<noteq> []", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "assume \"(y,z) \\<in> R1\""], ["proof (state)\nthis:\n  (y, z) \\<in> R1\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  (y, z) \\<in> R1", "have \"(y,z) \\<in> upRules\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> R1\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> upRules", "using rules"], ["proof (prove)\nusing this:\n  (y, z) \\<in> R1\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  (y, z) \\<in> upRules\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  (y, z) \\<in> upRules", "have \"y\\<noteq>[]\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> upRules\n\ngoal (1 subgoal):\n 1. y \\<noteq> []", "by (cases) auto"], ["proof (state)\nthis:\n  y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "}"], ["proof (state)\nthis:\n  (y, z) \\<in> R1 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  (y, z) \\<in> R1 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "{"], ["proof (state)\nthis:\n  (y, z) \\<in> R1 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "assume \"(y,z) \\<in> R2\""], ["proof (state)\nthis:\n  (y, z) \\<in> R2\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  (y, z) \\<in> R2", "have \"(y,z) \\<in> nprovRules\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> R2\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> nprovRules", "using rules"], ["proof (prove)\nusing this:\n  (y, z) \\<in> R2\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> nprovRules", "by auto"], ["proof (state)\nthis:\n  (y, z) \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  (y, z) \\<in> nprovRules", "have \"y\\<noteq>[]\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. y \\<noteq> []", "by (cases) auto"], ["proof (state)\nthis:\n  y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "}"], ["proof (state)\nthis:\n  (y, z) \\<in> R2 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  (y, z) \\<in> R2 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "{"], ["proof (state)\nthis:\n  (y, z) \\<in> R2 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "assume \"(y,z) \\<in> R3\""], ["proof (state)\nthis:\n  (y, z) \\<in> R3\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  (y, z) \\<in> R3", "have \"(y,z) \\<in> provRules\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> R3\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> provRules", "using rules"], ["proof (prove)\nusing this:\n  (y, z) \\<in> R3\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> provRules", "by auto"], ["proof (state)\nthis:\n  (y, z) \\<in> provRules\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  (y, z) \\<in> provRules", "have \"y\\<noteq>[]\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> provRules\n\ngoal (1 subgoal):\n 1. y \\<noteq> []", "by (cases) auto"], ["proof (state)\nthis:\n  y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "}"], ["proof (state)\nthis:\n  (y, z) \\<in> R3 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "ultimately"], ["proof (chain)\npicking this:\n  (y, z) \\<in> R1 \\<Longrightarrow> y \\<noteq> []\n  (y, z) \\<in> R2 \\<Longrightarrow> y \\<noteq> []\n  (y, z) \\<in> R3 \\<Longrightarrow> y \\<noteq> []", "show \"y \\<noteq> []\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> R1 \\<Longrightarrow> y \\<noteq> []\n  (y, z) \\<in> R2 \\<Longrightarrow> y \\<noteq> []\n  (y, z) \\<in> R3 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. y \\<noteq> []", "using \\<open>(y,z) \\<in> R1 \\<or> (y,z) \\<in> R2 \\<or> (y,z) \\<in> R3\\<close>"], ["proof (prove)\nusing this:\n  (y, z) \\<in> R1 \\<Longrightarrow> y \\<noteq> []\n  (y, z) \\<in> R2 \\<Longrightarrow> y \\<noteq> []\n  (y, z) \\<in> R3 \\<Longrightarrow> y \\<noteq> []\n  (y, z) \\<in> R1 \\<or> (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3\n\ngoal (1 subgoal):\n 1. y \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  y \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<noteq> []\n\ngoal (1 subgoal):\n 1. r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "then"], ["proof (chain)\npicking this:\n  y \\<noteq> []", "show \"\\<exists> Ps C. Ps \\<noteq> [] \\<and> r = (Ps,C)\""], ["proof (prove)\nusing this:\n  y \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "using \\<open>r = (y,z)\\<close>"], ["proof (prove)\nusing this:\n  y \\<noteq> []\n  r = (y, z)\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "by blast"], ["proof (state)\nthis:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "obtain Ps C where \"Ps \\<noteq> []\" and \"r = (Ps,C)\""], ["proof (prove)\nusing this:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps C.\n        \\<lbrakk>Ps \\<noteq> []; r = (Ps, C)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "from \\<open>extendRule S r = ([], \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)", "have \"\\<exists> S. r = ([],S)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<exists>S. r = ([], S)", "using extendRule_def[where forms=S and R=r]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n\ngoal (1 subgoal):\n 1. \\<exists>S. r = ([], S)", "by (cases r) (auto)"], ["proof (state)\nthis:\n  \\<exists>S. r = ([], S)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>S. r = ([], S)", "obtain S where \"r = ([],S)\""], ["proof (prove)\nusing this:\n  \\<exists>S. r = ([], S)\n\ngoal (1 subgoal):\n 1. (\\<And>S. r = ([], S) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  r = ([], S)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable  R*", "using rules"], ["proof (prove)\nusing this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable  R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*", "show \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using \\<open>n=0\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "case (Suc n')"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  n = Suc n'", "have \"(\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A,n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n' + 1)\n    \\<in> derivable  R*", "using a'"], ["proof (prove)\nusing this:\n  n = Suc n'\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n  \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n' + 1)\n    \\<in> derivable  R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n' + 1)\n  \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n' + 1)\n  \\<in> derivable  R*", "obtain Ps where \"(Ps, \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A) \\<in> R*\" and \n                          \"Ps \\<noteq> []\" and \n                       d':\"\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n' + 1)\n  \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>(Ps,\n                   \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus>\n     F \\<nabla> [x].A)\n                 \\<in>  R*;\n         Ps \\<noteq> [];\n         \\<forall>p\\<in>set Ps.\n            \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using characteriseLast[where C=\"\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A\" and m=n' and R=\"R*\"]"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n' + 1)\n  \\<in> derivable  R*\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n' + 1)\n  \\<in> derivable  R* \\<Longrightarrow>\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n     \\<in>  R* \\<and>\n     (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>(Ps,\n                   \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus>\n     F \\<nabla> [x].A)\n                 \\<in>  R*;\n         Ps \\<noteq> [];\n         \\<forall>p\\<in>set Ps.\n            \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  \\<in>  R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  \\<in>  R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*", "have \"\\<exists> r S. (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3) \\<and> extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\""], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  \\<in>  R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       (r \\<in> Ax \\<or>\n        r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3) \\<and>\n       extendRule S r =\n       (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)", "using rules \n            and ruleSet[where ?R1.0=R1 and ?R2.0=R2 and ?R3.0=R3 and R=R and Ps=Ps and C=\"\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A\"]"], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  \\<in>  R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<lbrakk>R1 \\<subseteq> upRules; R2 \\<subseteq> nprovRules;\n   R3 \\<subseteq> provRules; R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n   (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n   \\<in>  R*\\<rbrakk>\n  \\<Longrightarrow> \\<exists>S r.\n                       extendRule S r =\n                       (Ps,\n                         \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus>\n           F \\<nabla> [x].A) \\<and>\n                       (r \\<in> R1 \\<or>\n                        r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax)\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       (r \\<in> Ax \\<or>\n        r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3) \\<and>\n       extendRule S r =\n       (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)", "by auto"], ["proof (state)\nthis:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3) \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3) \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)", "obtain r S where \"r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\" \n                    and e':\"extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\""], ["proof (prove)\nusing this:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3) \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. (\\<And>r S.\n        \\<lbrakk>r \\<in> Ax \\<or>\n                 r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3;\n         extendRule S r =\n         (Ps,\n           \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus>\n                                   F \\<nabla> [x].A)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r \\<in> Ax\""], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "have \"fst r = []\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. fst r = []", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> Ax; r = (a, b)\\<rbrakk> \\<Longrightarrow> fst r = []", "by (rule Ax.cases) auto"], ["proof (state)\nthis:\n  fst r = []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  fst r = []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "have \"fst r \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst r \\<noteq> []", "using \\<open>Ps \\<noteq> []\\<close> and \\<open>extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\\<close>\n                            and extendRule_def[where forms=S and R=r]\n                            and extend_def[where forms=S and seq=\"snd r\"]"], ["proof (prove)\nusing this:\n  Ps \\<noteq> []\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n  extend S (snd r) \\<equiv>\n   antec S + antec (snd r) \\<Rightarrow>* succ S + succ (snd r)\n\ngoal (1 subgoal):\n 1. fst r \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  fst r = []\n  fst r \\<noteq> []", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  fst r = []\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by simp"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r \\<in> R1\""], ["proof (state)\nthis:\n  r \\<in> R1\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "obtain ps c where \"r = (ps,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps c. r = (ps, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r = (ps, c)", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "using rules and \\<open>r \\<in> R1\\<close>"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  r \\<in> R1\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> upRules", "obtain T Ts where sw:\"c = (\\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts \\<RM>) \\<or> c = (\\<LM> Cpd0 T Ts \\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. (\\<And>T Ts.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n        c =\n        ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using propRuleCharacterise[where Ps=ps and C=c] and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> upRules\n  (ps, c) \\<in> upRules \\<Longrightarrow>\n  \\<exists>F Fs.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 F Fs  \\<RM>) \\<or>\n     c = ( \\<LM> Cpd0 F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. (\\<And>T Ts.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n        c =\n        ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "have \"(rightPrincipal r (F \\<nabla> [x].A)) \\<or> \\<not>(rightPrincipal r (F \\<nabla> [x].A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rightPrincipal r (F \\<nabla> [x].A) \\<or>\n    \\<not> rightPrincipal r (F \\<nabla> [x].A)", "by blast"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"rightPrincipal r (F \\<nabla> [x].A)\""], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  rightPrincipal r (F \\<nabla> [x].A)", "have \"c = (\\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A \\<RM>)\""], ["proof (prove)\nusing this:\n  rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)", "using \\<open>r=  (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  rightPrincipal r (F \\<nabla> [x].A)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)", "by (cases) auto"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "with sw"], ["proof (chain)\npicking this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"\\<not> rightPrincipal r (F \\<nabla> [x].A)\""], ["proof (state)\nthis:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using nonPrincipalInvertRight[where r=r and F=F and x=x and A=A and ps=ps and c=c and R=R\n                                                and \\<Gamma>'=\\<Gamma>' and \\<Delta>'=\\<Delta>' and ?R1.0=R1 and ?R2.0=R2 and ?R3.0=R3\n                                                and S=S and Ps=Ps and \\<Gamma>=\\<Gamma> and \\<Delta>=\\<Delta> and n=n and n'=n']\n                  and \\<open>n = Suc n'\\<close> and \\<open>Ps \\<noteq> []\\<close> and a' and b' and e'\n                  and c' and rules and IH and \\<open>r \\<in> R1\\<close> and d' and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n  \\<lbrakk>R1 \\<subseteq> upRules; R2 \\<subseteq> nprovRules;\n   R3 \\<subseteq> provRules; R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n   r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3; r = (ps, c);\n   \\<forall>m<n.\n      \\<forall>\\<Gamma> \\<Delta>.\n         ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, m)\n         \\<in> derivable  R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         \\<not> multSubst \\<Gamma>' \\<and>\n         \\<not> multSubst \\<Delta>' \\<longrightarrow>\n         (\\<exists>m'\\<le>m.\n             ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n             \\<in> derivable  R*);\n   ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n   \\<in> derivable  R*;\n   \\<forall>r'\\<in>R.\n      rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n      ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r');\n   \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>';\n   \\<not> rightPrincipal r (F \\<nabla> [x].A);\n   extendRule S r =\n   (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A);\n   n = n' + 1;\n   \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*;\n   Ps \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m\\<le>n.\n                       ( \\<Gamma> +\n                         \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                        m)\n                       \\<in> derivable  R*\n  n = Suc n'\n  Ps \\<noteq> []\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, m)\n        \\<in> derivable  R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n            \\<in> set (fst r')) \\<longrightarrow>\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>' \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n            \\<in> derivable  R*)\n  r \\<in> R1\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  rightPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  \\<not> rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  rightPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  \\<not> rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r \\<in> R1 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> R1 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  r \\<in> R1 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r \\<in> R2\""], ["proof (state)\nthis:\n  r \\<in> R2\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "obtain ps c where \"r = (ps,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps c. r = (ps, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r = (ps, c)", "have \"r \\<in> nprovRules\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. r \\<in> nprovRules", "using rules and \\<open>r \\<in> R2\\<close>"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  r \\<in> R2\n\ngoal (1 subgoal):\n 1. r \\<in> nprovRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "have \"rightPrincipal r (F \\<nabla> [x].A) \\<or> \\<not> rightPrincipal r (F \\<nabla> [x].A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rightPrincipal r (F \\<nabla> [x].A) \\<or>\n    \\<not> rightPrincipal r (F \\<nabla> [x].A)", "by blast"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"rightPrincipal r (F \\<nabla> [x].A)\""], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  rightPrincipal r (F \\<nabla> [x].A)", "have \"(\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\""], ["proof (prove)\nusing this:\n  rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "using b' and \\<open>r = (ps,c)\\<close> and \\<open>r \\<in> R2\\<close> and rules"], ["proof (prove)\nusing this:\n  rightPrincipal r (F \\<nabla> [x].A)\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  r = (ps, c)\n  r \\<in> R2\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "have \"extend S (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps", "using \\<open>extendRule S r = (Ps,\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\\<close>\n                  and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps", "by (simp add:extendContain)"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "from \\<open>rightPrincipal r (F \\<nabla> [x].A)\\<close>"], ["proof (chain)\npicking this:\n  rightPrincipal r (F \\<nabla> [x].A)", "have \"c = (\\<Empt> \\<Rightarrow>* \\<LM>F \\<nabla> [x].A\\<RM>)\""], ["proof (prove)\nusing this:\n  rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  rightPrincipal r (F \\<nabla> [x].A)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)", "by (cases) auto"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "with \\<open>extendRule S r = (Ps,\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)", "have \"S = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "apply (auto simp add:extendRule_def extend_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>);\n     r = (ps,  \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>);\n     Ps = map (extend S) ps; \\<Gamma> = antec S; \\<Delta> = succ S\\<rbrakk>\n    \\<Longrightarrow> S = ( antec S \\<Rightarrow>* succ S)", "by (cases S) auto"], ["proof (state)\nthis:\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\""], ["proof (prove)\nusing this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps", "by (simp add:extend_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps", "have \"\\<exists> m\\<le>n'. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using \\<open>\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by (auto,rule_tac x=m in exI) (simp)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"\\<not> rightPrincipal r (F \\<nabla> [x].A)\""], ["proof (state)\nthis:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using nonPrincipalInvertRight[where r=r and F=F and x=x and A=A and ps=ps and c=c and R=R\n                                                and \\<Gamma>'=\\<Gamma>' and \\<Delta>'=\\<Delta>' and ?R1.0=R1 and ?R2.0=R2 and ?R3.0=R3\n                                                and S=S and Ps=Ps and \\<Gamma>=\\<Gamma> and \\<Delta>=\\<Delta> and n=n and n'=n']\n                  and \\<open>n = Suc n'\\<close> and \\<open>Ps \\<noteq> []\\<close> and a' and b' and e'\n                  and c' and rules and IH and \\<open>r \\<in> R2\\<close> and d' and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n  \\<lbrakk>R1 \\<subseteq> upRules; R2 \\<subseteq> nprovRules;\n   R3 \\<subseteq> provRules; R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n   r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3; r = (ps, c);\n   \\<forall>m<n.\n      \\<forall>\\<Gamma> \\<Delta>.\n         ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, m)\n         \\<in> derivable  R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         \\<not> multSubst \\<Gamma>' \\<and>\n         \\<not> multSubst \\<Delta>' \\<longrightarrow>\n         (\\<exists>m'\\<le>m.\n             ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n             \\<in> derivable  R*);\n   ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n   \\<in> derivable  R*;\n   \\<forall>r'\\<in>R.\n      rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n      ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r');\n   \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>';\n   \\<not> rightPrincipal r (F \\<nabla> [x].A);\n   extendRule S r =\n   (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A);\n   n = n' + 1;\n   \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*;\n   Ps \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m\\<le>n.\n                       ( \\<Gamma> +\n                         \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                        m)\n                       \\<in> derivable  R*\n  n = Suc n'\n  Ps \\<noteq> []\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, m)\n        \\<in> derivable  R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n            \\<in> set (fst r')) \\<longrightarrow>\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>' \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n            \\<in> derivable  R*)\n  r \\<in> R2\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  rightPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  \\<not> rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  rightPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  \\<not> rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r \\<in> R2 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> R2 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  r \\<in> R2 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "(*>*)"], ["proof (state)\nthis:\n  r \\<in> R2 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r \\<in> R3\""], ["proof (state)\nthis:\n  r \\<in> R3\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "obtain ps c where \"r = (ps,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps c. r = (ps, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r = (ps, c)", "have \"r \\<in> provRules\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. r \\<in> provRules", "using rules and \\<open>r \\<in> R3\\<close>"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  r \\<in> R3\n\ngoal (1 subgoal):\n 1. r \\<in> provRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> provRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "have \"rightPrincipal r (F \\<nabla> [x].A) \\<or> \\<not> rightPrincipal r (F \\<nabla> [x].A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rightPrincipal r (F \\<nabla> [x].A) \\<or>\n    \\<not> rightPrincipal r (F \\<nabla> [x].A)", "by blast"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"rightPrincipal r (F \\<nabla> [x].A)\""], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  rightPrincipal r (F \\<nabla> [x].A)", "have \"(\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\""], ["proof (prove)\nusing this:\n  rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "using(*<*) b' and(*>*) \\<open>r = (ps,c)\\<close> and \\<open>r \\<in> R3\\<close> and rules"], ["proof (prove)\nusing this:\n  rightPrincipal r (F \\<nabla> [x].A)\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  r = (ps, c)\n  r \\<in> R3\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "have \"extend S (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps", "using \n           \\<open>extendRule S r = (Ps,\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\\<close>\n            and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps", "by (simp add:extendContain)"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "from \\<open>rightPrincipal r (F \\<nabla> [x].A)\\<close>"], ["proof (chain)\npicking this:\n  rightPrincipal r (F \\<nabla> [x].A)", "have \n            \"c = (\\<Empt> \\<Rightarrow>* \\<LM>F \\<nabla> [x].A\\<RM>)\""], ["proof (prove)\nusing this:\n  rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  rightPrincipal r (F \\<nabla> [x].A)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)", "by (cases) auto"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "with \\<open>extendRule S r = (Ps,\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)", "have \"S = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "(*<*)"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "apply (auto simp add:extendRule_def extend_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>);\n     r = (ps,  \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>);\n     Ps = map (extend S) ps; \\<Gamma> = antec S; \\<Delta> = succ S\\<rbrakk>\n    \\<Longrightarrow> S = ( antec S \\<Rightarrow>* succ S)", "(*>*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>);\n     r = (ps,  \\<Empt> \\<Rightarrow>* \\<LM> F \\<nabla> [x].A  \\<RM>);\n     Ps = map (extend S) ps; \\<Gamma> = antec S; \\<Delta> = succ S\\<rbrakk>\n    \\<Longrightarrow> S = ( antec S \\<Rightarrow>* succ S)", "by (cases S) auto"], ["proof (state)\nthis:\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\""], ["proof (prove)\nusing this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps", "by (simp add:extend_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps", "have \"\\<exists> m\\<le>n'. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using \\<open>\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by (*<*)(auto,rule_tac x=m in exI)(*>*) (simp)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "(*<*)"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"\\<not> rightPrincipal r (F \\<nabla> [x].A)\""], ["proof (state)\nthis:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using nonPrincipalInvertRight[where r=r and F=F and x=x and A=A and ps=ps and c=c and R=R\n                                                and \\<Gamma>'=\\<Gamma>' and \\<Delta>'=\\<Delta>' and ?R1.0=R1 and ?R2.0=R2 and ?R3.0=R3\n                                                and S=S and Ps=Ps and \\<Gamma>=\\<Gamma> and \\<Delta>=\\<Delta> and n=n and n'=n']\n                  and \\<open>n = Suc n'\\<close> and \\<open>Ps \\<noteq> []\\<close> and a' and b' and e'\n                  and c' and rules and IH and \\<open>r \\<in> R3\\<close> and d' and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n  \\<lbrakk>R1 \\<subseteq> upRules; R2 \\<subseteq> nprovRules;\n   R3 \\<subseteq> provRules; R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n   r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3; r = (ps, c);\n   \\<forall>m<n.\n      \\<forall>\\<Gamma> \\<Delta>.\n         ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, m)\n         \\<in> derivable  R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         \\<not> multSubst \\<Gamma>' \\<and>\n         \\<not> multSubst \\<Delta>' \\<longrightarrow>\n         (\\<exists>m'\\<le>m.\n             ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n             \\<in> derivable  R*);\n   ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n   \\<in> derivable  R*;\n   \\<forall>r'\\<in>R.\n      rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n      ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r');\n   \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>';\n   \\<not> rightPrincipal r (F \\<nabla> [x].A);\n   extendRule S r =\n   (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A);\n   n = n' + 1;\n   \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*;\n   Ps \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m\\<le>n.\n                       ( \\<Gamma> +\n                         \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                        m)\n                       \\<in> derivable  R*\n  n = Suc n'\n  Ps \\<noteq> []\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A, m)\n        \\<in> derivable  R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            rightPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n            \\<in> set (fst r')) \\<longrightarrow>\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>' \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n            \\<in> derivable  R*)\n  r \\<in> R3\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  rightPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  \\<not> rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  rightPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> rightPrincipal r (F \\<nabla> [x].A)\n  rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  \\<not> rightPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r \\<in> R3 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  r \\<in> R1 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  r \\<in> R2 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  r \\<in> R3 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*", "show \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> F \\<nabla> [x].A)\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  r \\<in> R1 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  r \\<in> R2 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  r \\<in> R3 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma leftInvert:\nfixes \\<Gamma> \\<Delta> :: \"form multiset\"\nassumes rules: \"R1 \\<subseteq> upRules \\<and> R2 \\<subseteq> nprovRules \\<and> R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\"\n    and   a: \"(\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>,n) \\<in> derivable R*\"\n    and   b: \"\\<forall> r' \\<in> R. leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\"\n    and   c: \"\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\"\nshows \"\\<exists> m\\<le>n. (\\<Gamma> +\\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using assms"], ["proof (prove)\nusing this:\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "proof (induct n arbitrary: \\<Gamma> \\<Delta> rule:nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<Delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   R1 \\<subseteq> upRules \\<and>\n                   R2 \\<subseteq> nprovRules \\<and>\n                   R3 \\<subseteq> provRules \\<and>\n                   R =\n                   Ax \\<union> R1 \\<union> R2 \\<union> R3 \\<longrightarrow>\n                   (\\<forall>xa xb.\n                       ( xa \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* xb, m)\n                       \\<in> derivable  R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           leftPrincipal r'\n                            (F \\<nabla> [x].A) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       \\<not> multSubst \\<Gamma>' \\<and>\n                       \\<not> multSubst \\<Delta>' \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( xa + \\<Gamma>' \\<Rightarrow>* xb + \\<Delta>',\n                            ma)\n                           \\<in> derivable  R*));\n        R1 \\<subseteq> upRules \\<and>\n        R2 \\<subseteq> nprovRules \\<and>\n        R3 \\<subseteq> provRules \\<and>\n        R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n        ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n        \\<in> derivable  R*;\n        \\<forall>r'\\<in>R.\n           leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r');\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> +\n                              \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                             m)\n                            \\<in> derivable  R*", "case (1 n \\<Gamma> \\<Delta>)"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     R1 \\<subseteq> upRules \\<and>\n     R2 \\<subseteq> nprovRules \\<and>\n     R3 \\<subseteq> provRules \\<and>\n     R = Ax \\<union> R1 \\<union> R2 \\<union> R3 \\<longrightarrow>\n     (\\<forall>xa xb.\n         ( xa \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* xb, m)\n         \\<in> derivable  R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         \\<not> multSubst \\<Gamma>' \\<and>\n         \\<not> multSubst \\<Delta>' \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( xa + \\<Gamma>' \\<Rightarrow>* xb + \\<Delta>', ma)\n             \\<in> derivable  R*))\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<Delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   R1 \\<subseteq> upRules \\<and>\n                   R2 \\<subseteq> nprovRules \\<and>\n                   R3 \\<subseteq> provRules \\<and>\n                   R =\n                   Ax \\<union> R1 \\<union> R2 \\<union> R3 \\<longrightarrow>\n                   (\\<forall>xa xb.\n                       ( xa \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* xb, m)\n                       \\<in> derivable  R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           leftPrincipal r'\n                            (F \\<nabla> [x].A) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       \\<not> multSubst \\<Gamma>' \\<and>\n                       \\<not> multSubst \\<Delta>' \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( xa + \\<Gamma>' \\<Rightarrow>* xb + \\<Delta>',\n                            ma)\n                           \\<in> derivable  R*));\n        R1 \\<subseteq> upRules \\<and>\n        R2 \\<subseteq> nprovRules \\<and>\n        R3 \\<subseteq> provRules \\<and>\n        R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n        ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n        \\<in> derivable  R*;\n        \\<forall>r'\\<in>R.\n           leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r');\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> +\n                              \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                             m)\n                            \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     R1 \\<subseteq> upRules \\<and>\n     R2 \\<subseteq> nprovRules \\<and>\n     R3 \\<subseteq> provRules \\<and>\n     R = Ax \\<union> R1 \\<union> R2 \\<union> R3 \\<longrightarrow>\n     (\\<forall>xa xb.\n         ( xa \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* xb, m)\n         \\<in> derivable  R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         \\<not> multSubst \\<Gamma>' \\<and>\n         \\<not> multSubst \\<Delta>' \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( xa + \\<Gamma>' \\<Rightarrow>* xb + \\<Delta>', ma)\n             \\<in> derivable  R*))\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'", "have IH:\"\\<forall>m<n. \\<forall>\\<Gamma> \\<Delta>. ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, m) \\<in> derivable R* \\<longrightarrow>\n              (\\<forall>r' \\<in> R. leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')) \\<longrightarrow>\n              (\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>') \\<longrightarrow>\n              (\\<exists>m'\\<le>m. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m') \\<in> derivable R*)\" \n     and a': \"(\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>,n) \\<in> derivable R*\" \n     and b': \"\\<forall> r' \\<in> R. leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow> (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\"\n     and c': \"\\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     R1 \\<subseteq> upRules \\<and>\n     R2 \\<subseteq> nprovRules \\<and>\n     R3 \\<subseteq> provRules \\<and>\n     R = Ax \\<union> R1 \\<union> R2 \\<union> R3 \\<longrightarrow>\n     (\\<forall>xa xb.\n         ( xa \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* xb, m)\n         \\<in> derivable  R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         \\<not> multSubst \\<Gamma>' \\<and>\n         \\<not> multSubst \\<Delta>' \\<longrightarrow>\n         (\\<exists>ma\\<le>m.\n             ( xa + \\<Gamma>' \\<Rightarrow>* xb + \\<Delta>', ma)\n             \\<in> derivable  R*))\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n\ngoal (1 subgoal):\n 1. (\\<forall>m<n.\n        \\<forall>\\<Gamma> \\<Delta>.\n           ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, m)\n           \\<in> derivable  R* \\<longrightarrow>\n           (\\<forall>r'\\<in>R.\n               leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n               ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n               \\<in> set (fst r')) \\<longrightarrow>\n           \\<not> multSubst \\<Gamma>' \\<and>\n           \\<not> multSubst \\<Delta>' \\<longrightarrow>\n           (\\<exists>m'\\<le>m.\n               ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                m')\n               \\<in> derivable  R*) &&&\n     ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n     \\<in> derivable  R*) &&&\n    \\<forall>r'\\<in>R.\n       leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n       ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r') &&&\n    \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'", "by auto"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, m)\n        \\<in> derivable  R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n            \\<in> set (fst r')) \\<longrightarrow>\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>' \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n            \\<in> derivable  R*)\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<Delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   R1 \\<subseteq> upRules \\<and>\n                   R2 \\<subseteq> nprovRules \\<and>\n                   R3 \\<subseteq> provRules \\<and>\n                   R =\n                   Ax \\<union> R1 \\<union> R2 \\<union> R3 \\<longrightarrow>\n                   (\\<forall>xa xb.\n                       ( xa \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* xb, m)\n                       \\<in> derivable  R* \\<longrightarrow>\n                       (\\<forall>r'\\<in>R.\n                           leftPrincipal r'\n                            (F \\<nabla> [x].A) \\<longrightarrow>\n                           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n                           \\<in> set (fst r')) \\<longrightarrow>\n                       \\<not> multSubst \\<Gamma>' \\<and>\n                       \\<not> multSubst \\<Delta>' \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           ( xa + \\<Gamma>' \\<Rightarrow>* xb + \\<Delta>',\n                            ma)\n                           \\<in> derivable  R*));\n        R1 \\<subseteq> upRules \\<and>\n        R2 \\<subseteq> nprovRules \\<and>\n        R3 \\<subseteq> provRules \\<and>\n        R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n        ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n        \\<in> derivable  R*;\n        \\<forall>r'\\<in>R.\n           leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n           ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r');\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            ( \\<Gamma> +\n                              \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                             m)\n                            \\<in> derivable  R*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  n = 0", "have \"(\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, 0)\n    \\<in> derivable  R*", "using a'"], ["proof (prove)\nusing this:\n  n = 0\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, 0)\n    \\<in> derivable  R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, 0)\n  \\<in> derivable  R*", "have \"([],\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>) \\<in> R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, 0)\n  \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n    \\<in>  R*", "by (cases) (auto)"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  \\<in>  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  \\<in>  R*", "have \"\\<exists> r S. extendRule S r = ([],\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>) \\<and> (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3)\""], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  \\<in>  R*\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       extendRule S r =\n       ([],\n         \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>) \\<and>\n       (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3)", "using rules and ruleSet[where ?R1.0=R1 and ?R2.0=R2 and ?R3.0=R3 and R=R and Ps=\"[]\" and C=\"\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>*\\<Delta>\"]"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  \\<in>  R*\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<lbrakk>R1 \\<subseteq> upRules; R2 \\<subseteq> nprovRules;\n   R3 \\<subseteq> provRules; R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n   ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n   \\<in>  R*\\<rbrakk>\n  \\<Longrightarrow> \\<exists>S r.\n                       extendRule S r =\n                       ([],\n                         \\<Gamma> \\<oplus>\n                         F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>) \\<and>\n                       (r \\<in> R1 \\<or>\n                        r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax)\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       extendRule S r =\n       ([],\n         \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>) \\<and>\n       (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3)", "by auto"], ["proof (state)\nthis:\n  \\<exists>r S.\n     extendRule S r =\n     ([],\n       \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>r S.\n     extendRule S r =\n     ([],\n       \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3)", "obtain r S where \"extendRule S r = ([],\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\" and \"r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\""], ["proof (prove)\nusing this:\n  \\<exists>r S.\n     extendRule S r =\n     ([],\n       \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>) \\<and>\n     (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3)\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>extendRule S r =\n                 ([],\n                   \\<Gamma> \\<oplus>\n                   F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>);\n         r \\<in> Ax \\<or>\n         r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r \\<in> Ax\""], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "obtain i xs where \"r = ([],\\<LM>At i xs\\<RM> \\<Rightarrow>* \\<LM>At i xs\\<RM>) \\<or> r = ([], \\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. (\\<And>i xs.\n        r =\n        ([],\n          \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<or>\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseAx[where r=r]"], ["proof (prove)\nusing this:\n  r \\<in> Ax\n  r \\<in> Ax \\<Longrightarrow>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  (\\<exists>i xs.\n      r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>))\n\ngoal (1 subgoal):\n 1. (\\<And>i xs.\n        r =\n        ([],\n          \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<or>\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r = ([],\\<LM>At i xs\\<RM> \\<Rightarrow>* \\<LM>At i xs\\<RM>)\""], ["proof (state)\nthis:\n  r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "with \\<open>extendRule S r = ([],\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)", "have \"extend S (\\<LM> At i xs \\<RM> \\<Rightarrow>* \\<LM> At i xs \\<RM>) = (\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n    ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)", "using extendRule_def[where R=\"([],\\<LM>At i xs\\<RM> \\<Rightarrow>* \\<LM>At i xs\\<RM>)\" and forms=S]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)\n  extendRule S\n   ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<equiv>\n  (map (extend S)\n    (fst ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)),\n   extend S\n    (snd ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>)))\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n    ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)", "by auto"], ["proof (state)\nthis:\n  extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)", "have \"At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>", "using extendID[where S=S and i=i and xs=xs and \\<Gamma>=\"\\<Gamma>\\<oplus> F \\<nabla> [x].A\" and \\<Delta>=\\<Delta>]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  extend S ( \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) =\n  ( \\<Gamma> \\<oplus>\n    F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n  At i xs \\<in># \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<and>\n  At i xs \\<in># \\<Delta>\n\ngoal (1 subgoal):\n 1. At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>", "by auto"], ["proof (state)\nthis:\n  At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>", "have \"At i xs \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i xs \\<in># \\<Delta> + \\<Delta>'\""], ["proof (prove)\nusing this:\n  At i xs \\<in># \\<Gamma> \\<and> At i xs \\<in># \\<Delta>\n\ngoal (1 subgoal):\n 1. At i xs \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n    At i xs \\<in># \\<Delta> + \\<Delta>'", "by auto"], ["proof (state)\nthis:\n  At i xs \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n  At i xs \\<in># \\<Delta> + \\<Delta>'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  At i xs \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n  At i xs \\<in># \\<Delta> + \\<Delta>'", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  At i xs \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n  At i xs \\<in># \\<Delta> + \\<Delta>'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable  R*", "using rules\n                 and containID[where \\<Gamma>=\"\\<Gamma> + \\<Gamma>'\" and i=i and \\<Delta>=\"\\<Delta> + \\<Delta>'\" and R=R]"], ["proof (prove)\nusing this:\n  At i xs \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n  At i xs \\<in># \\<Delta> + \\<Delta>'\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<lbrakk>At i ?xs \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n           At i ?xs \\<in># \\<Delta> + \\<Delta>';\n   Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> +\n                      \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                     0)\n                    \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r =\n  ([],\n    \\<LM> At i\n           xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  r =\n  ([],\n    \\<LM> At i\n           xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  r =\n  ([],\n    \\<LM> At i\n           xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r = ([],\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "with \\<open>extendRule S r = ([],\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"extend S (\\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) = (\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)", "using extendRule_def[where R=\"([],\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\" and forms=S]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  extendRule S ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<equiv>\n  (map (extend S) (fst ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)),\n   extend S (snd ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)))\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)", "by auto"], ["proof (state)\nthis:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)", "have \"ff \\<in># \\<Gamma>\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "using extendFalsum[where S=S and \\<Gamma>=\"\\<Gamma>\\<oplus>F \\<nabla> [x].A\" and \\<Delta>=\\<Delta>]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<oplus>\n    F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n  ff \\<in># \\<Gamma> \\<oplus> F \\<nabla> [x].A\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma>", "have \"ff \\<in># \\<Gamma> + \\<Gamma>'\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma> + \\<Gamma>'", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable  R*", "using rules\n                 and containFalsum[where \\<Gamma>=\"\\<Gamma> + \\<Gamma>'\" and \\<Delta>=\"\\<Delta> + \\<Delta>'\" and R=R]"], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<lbrakk>ff \\<in># \\<Gamma> + \\<Gamma>'; Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> +\n                      \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                     0)\n                    \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  r =\n  ([],\n    \\<LM> At i\n           xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  r = ([],  \\<LM> At i xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<or>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  r =\n  ([],\n    \\<LM> At i\n           xs  \\<RM> \\<Rightarrow>* \\<LM> At i xs  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable  R*", "by blast"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\""], ["proof (state)\nthis:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3", "have \"\\<exists> Ps C. Ps \\<noteq> [] \\<and> r = (Ps,C)\""], ["proof (prove)\nusing this:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "obtain y z where \"r = (y,z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y z. r = (y, z) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r)"], ["proof (state)\nthis:\n  r = (y, z)\n\ngoal (1 subgoal):\n 1. r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "with \\<open>r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  r = (y, z)", "have \"(y,z) \\<in> R1 \\<or> (y,z) \\<in> R2 \\<or> (y,z) \\<in> R3\""], ["proof (prove)\nusing this:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  r = (y, z)\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or> (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3", "by simp"], ["proof (state)\nthis:\n  (y, z) \\<in> R1 \\<or> (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3\n\ngoal (1 subgoal):\n 1. r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "then"], ["proof (chain)\npicking this:\n  (y, z) \\<in> R1 \\<or> (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3", "have \"y \\<noteq> []\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> R1 \\<or> (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3\n\ngoal (1 subgoal):\n 1. y \\<noteq> []", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "assume \"(y,z) \\<in> R1\""], ["proof (state)\nthis:\n  (y, z) \\<in> R1\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  (y, z) \\<in> R1", "have \"(y,z) \\<in> upRules\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> R1\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> upRules", "using rules"], ["proof (prove)\nusing this:\n  (y, z) \\<in> R1\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  (y, z) \\<in> upRules\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  (y, z) \\<in> upRules", "have \"y\\<noteq>[]\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> upRules\n\ngoal (1 subgoal):\n 1. y \\<noteq> []", "by (cases) auto"], ["proof (state)\nthis:\n  y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "}"], ["proof (state)\nthis:\n  (y, z) \\<in> R1 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  (y, z) \\<in> R1 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "{"], ["proof (state)\nthis:\n  (y, z) \\<in> R1 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "assume \"(y,z) \\<in> R2\""], ["proof (state)\nthis:\n  (y, z) \\<in> R2\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  (y, z) \\<in> R2", "have \"(y,z) \\<in> nprovRules\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> R2\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> nprovRules", "using rules"], ["proof (prove)\nusing this:\n  (y, z) \\<in> R2\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> nprovRules", "by auto"], ["proof (state)\nthis:\n  (y, z) \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  (y, z) \\<in> nprovRules", "have \"y\\<noteq>[]\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. y \\<noteq> []", "by (cases) auto"], ["proof (state)\nthis:\n  y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "}"], ["proof (state)\nthis:\n  (y, z) \\<in> R2 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  (y, z) \\<in> R2 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "{"], ["proof (state)\nthis:\n  (y, z) \\<in> R2 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "assume \"(y,z) \\<in> R3\""], ["proof (state)\nthis:\n  (y, z) \\<in> R3\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  (y, z) \\<in> R3", "have \"(y,z) \\<in> provRules\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> R3\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> provRules", "using rules"], ["proof (prove)\nusing this:\n  (y, z) \\<in> R3\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> provRules", "by auto"], ["proof (state)\nthis:\n  (y, z) \\<in> provRules\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  (y, z) \\<in> provRules", "have \"y\\<noteq>[]\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> provRules\n\ngoal (1 subgoal):\n 1. y \\<noteq> []", "by (cases) auto"], ["proof (state)\nthis:\n  y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "}"], ["proof (state)\nthis:\n  (y, z) \\<in> R3 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> R1 \\<or>\n    (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3 \\<Longrightarrow>\n    y \\<noteq> []", "ultimately"], ["proof (chain)\npicking this:\n  (y, z) \\<in> R1 \\<Longrightarrow> y \\<noteq> []\n  (y, z) \\<in> R2 \\<Longrightarrow> y \\<noteq> []\n  (y, z) \\<in> R3 \\<Longrightarrow> y \\<noteq> []", "show \"y \\<noteq> []\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> R1 \\<Longrightarrow> y \\<noteq> []\n  (y, z) \\<in> R2 \\<Longrightarrow> y \\<noteq> []\n  (y, z) \\<in> R3 \\<Longrightarrow> y \\<noteq> []\n\ngoal (1 subgoal):\n 1. y \\<noteq> []", "using \\<open>(y,z) \\<in> R1 \\<or> (y,z) \\<in> R2 \\<or> (y,z) \\<in> R3\\<close>"], ["proof (prove)\nusing this:\n  (y, z) \\<in> R1 \\<Longrightarrow> y \\<noteq> []\n  (y, z) \\<in> R2 \\<Longrightarrow> y \\<noteq> []\n  (y, z) \\<in> R3 \\<Longrightarrow> y \\<noteq> []\n  (y, z) \\<in> R1 \\<or> (y, z) \\<in> R2 \\<or> (y, z) \\<in> R3\n\ngoal (1 subgoal):\n 1. y \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  y \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<noteq> []\n\ngoal (1 subgoal):\n 1. r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n    \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "then"], ["proof (chain)\npicking this:\n  y \\<noteq> []", "show \"\\<exists> Ps C. Ps \\<noteq> [] \\<and> r = (Ps,C)\""], ["proof (prove)\nusing this:\n  y \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "using \\<open>r = (y,z)\\<close>"], ["proof (prove)\nusing this:\n  y \\<noteq> []\n  r = (y, z)\n\ngoal (1 subgoal):\n 1. \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "by blast"], ["proof (state)\nthis:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)", "obtain Ps C where \"Ps \\<noteq> []\" and \"r = (Ps,C)\""], ["proof (prove)\nusing this:\n  \\<exists>Ps C. Ps \\<noteq> [] \\<and> r = (Ps, C)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps C.\n        \\<lbrakk>Ps \\<noteq> []; r = (Ps, C)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  r = (Ps, C)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "from \\<open>extendRule S r = ([], \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)", "have \"\\<exists> S. r = ([],S)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>S. r = ([], S)", "using extendRule_def[where forms=S and R=r]"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n\ngoal (1 subgoal):\n 1. \\<exists>S. r = ([], S)", "by (cases r) (auto)"], ["proof (state)\nthis:\n  \\<exists>S. r = ([], S)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>S. r = ([], S)", "obtain S where \"r = ([],S)\""], ["proof (prove)\nusing this:\n  \\<exists>S. r = ([], S)\n\ngoal (1 subgoal):\n 1. (\\<And>S. r = ([], S) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  r = ([], S)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable  R*", "using rules"], ["proof (prove)\nusing this:\n  Ps \\<noteq> []\n  r = (Ps, C)\n  r = ([], S)\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable  R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*", "show \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using \\<open>n=0\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  ([],  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  r \\<in> Ax \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n  r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3 \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable  R*\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "case (Suc n')"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  n = Suc n'", "have \"(\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>,n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n' + 1)\n    \\<in> derivable  R*", "using a'"], ["proof (prove)\nusing this:\n  n = Suc n'\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n' + 1)\n    \\<in> derivable  R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n' + 1)\n  \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n' + 1)\n  \\<in> derivable  R*", "obtain Ps where \"(Ps, \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>) \\<in> R*\" and \n                          \"Ps \\<noteq> []\" and \n                       d':\"\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n' + 1)\n  \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>(Ps,\n                   \\<Gamma> \\<oplus>\n                   F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n                 \\<in>  R*;\n         Ps \\<noteq> [];\n         \\<forall>p\\<in>set Ps.\n            \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using characteriseLast[where C=\"\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>\" and m=n' and R=\"R*\"]"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n' + 1)\n  \\<in> derivable  R*\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n' + 1)\n  \\<in> derivable  R* \\<Longrightarrow>\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n     \\<in>  R* \\<and>\n     (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>(Ps,\n                   \\<Gamma> \\<oplus>\n                   F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n                 \\<in>  R*;\n         Ps \\<noteq> [];\n         \\<forall>p\\<in>set Ps.\n            \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  \\<in>  R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  \\<in>  R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*", "have \"\\<exists> r S. (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3) \\<and> extendRule S r = (Ps, \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  \\<in>  R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       (r \\<in> Ax \\<or>\n        r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3) \\<and>\n       extendRule S r =\n       (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)", "using rules \n            and ruleSet[where ?R1.0=R1 and ?R2.0=R2 and ?R3.0=R3 and R=R and Ps=Ps and C=\"\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>\"]"], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  \\<in>  R*\n  Ps \\<noteq> []\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<lbrakk>R1 \\<subseteq> upRules; R2 \\<subseteq> nprovRules;\n   R3 \\<subseteq> provRules; R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n   (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n   \\<in>  R*\\<rbrakk>\n  \\<Longrightarrow> \\<exists>S r.\n                       extendRule S r =\n                       (Ps,\n                         \\<Gamma> \\<oplus>\n                         F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>) \\<and>\n                       (r \\<in> R1 \\<or>\n                        r \\<in> R2 \\<or> r \\<in> R3 \\<or> r \\<in> Ax)\n\ngoal (1 subgoal):\n 1. \\<exists>r S.\n       (r \\<in> Ax \\<or>\n        r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3) \\<and>\n       extendRule S r =\n       (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3) \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3) \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)", "obtain r S where \"r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\" \n                    and e':\"extendRule S r = (Ps, \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  \\<exists>r S.\n     (r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3) \\<and>\n     extendRule S r =\n     (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. (\\<And>r S.\n        \\<lbrakk>r \\<in> Ax \\<or>\n                 r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3;\n         extendRule S r =\n         (Ps,\n           \\<Gamma> \\<oplus>\n           F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r \\<in> Ax\""], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "have \"fst r = []\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. fst r = []", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> Ax; r = (a, b)\\<rbrakk> \\<Longrightarrow> fst r = []", "by (rule Ax.cases) auto"], ["proof (state)\nthis:\n  fst r = []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  fst r = []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "have \"fst r \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst r \\<noteq> []", "using \\<open>Ps \\<noteq> []\\<close> and \\<open>extendRule S r = (Ps, \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\\<close>\n                            and extendRule_def[where forms=S and R=r]\n                            and extend_def[where forms=S and seq=\"snd r\"]"], ["proof (prove)\nusing this:\n  Ps \\<noteq> []\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  extendRule S r \\<equiv> (map (extend S) (fst r), extend S (snd r))\n  extend S (snd r) \\<equiv>\n   antec S + antec (snd r) \\<Rightarrow>* succ S + succ (snd r)\n\ngoal (1 subgoal):\n 1. fst r \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  fst r = []\n  fst r \\<noteq> []", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  fst r = []\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r \\<in> R1\""], ["proof (state)\nthis:\n  r \\<in> R1\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "obtain ps c where \"r = (ps,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps c. r = (ps, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r = (ps, c)", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "using rules and \\<open>r \\<in> R1\\<close>"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  r \\<in> R1\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> upRules", "obtain T Ts where sw:\"c = (\\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts \\<RM>) \\<or> c = (\\<LM> Cpd0 T Ts \\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. (\\<And>T Ts.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n        c =\n        ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using propRuleCharacterise[where Ps=ps and C=c] and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> upRules\n  (ps, c) \\<in> upRules \\<Longrightarrow>\n  \\<exists>F Fs.\n     c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 F Fs  \\<RM>) \\<or>\n     c = ( \\<LM> Cpd0 F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. (\\<And>T Ts.\n        c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n        c =\n        ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "have \"(leftPrincipal r (F \\<nabla> [x].A)) \\<or> \\<not>(leftPrincipal r (F \\<nabla> [x].A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftPrincipal r (F \\<nabla> [x].A) \\<or>\n    \\<not> leftPrincipal r (F \\<nabla> [x].A)", "by blast"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"leftPrincipal r (F \\<nabla> [x].A)\""], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  leftPrincipal r (F \\<nabla> [x].A)", "have \"c = (\\<LM> F \\<nabla> [x].A \\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "using \\<open>r=  (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  leftPrincipal r (F \\<nabla> [x].A)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "by (cases) auto"], ["proof (state)\nthis:\n  c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "with sw"], ["proof (chain)\npicking this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  c = ( \\<Empt> \\<Rightarrow>* \\<LM> Cpd0 T Ts  \\<RM>) \\<or>\n  c = ( \\<LM> Cpd0 T Ts  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"\\<not> leftPrincipal r (F \\<nabla> [x].A)\""], ["proof (state)\nthis:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using nonPrincipalInvertLeft[where r=r and F=F and x=x and A=A and ps=ps and c=c and R=R\n                                                and \\<Gamma>'=\\<Gamma>' and \\<Delta>'=\\<Delta>' and ?R1.0=R1 and ?R2.0=R2 and ?R3.0=R3\n                                                and S=S and Ps=Ps and \\<Gamma>=\\<Gamma> and \\<Delta>=\\<Delta> and n=n and n'=n']\n                  and \\<open>n = Suc n'\\<close> and \\<open>Ps \\<noteq> []\\<close> and a' and b' and e'\n                  and c' and rules and IH and \\<open>r \\<in> R1\\<close> and d' and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n  \\<lbrakk>R1 \\<subseteq> upRules; R2 \\<subseteq> nprovRules;\n   R3 \\<subseteq> provRules; R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n   r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3; r = (ps, c);\n   \\<forall>m<n.\n      \\<forall>\\<Gamma> \\<Delta>.\n         ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, m)\n         \\<in> derivable  R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         \\<not> multSubst \\<Gamma>' \\<and>\n         \\<not> multSubst \\<Delta>' \\<longrightarrow>\n         (\\<exists>m'\\<le>m.\n             ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n             \\<in> derivable  R*);\n   ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n   \\<in> derivable  R*;\n   \\<forall>r'\\<in>R.\n      leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n      ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r');\n   \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>';\n   \\<not> leftPrincipal r (F \\<nabla> [x].A);\n   extendRule S r =\n   (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>);\n   n = n' + 1;\n   \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*;\n   Ps \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m\\<le>n.\n                       ( \\<Gamma> +\n                         \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                        m)\n                       \\<in> derivable  R*\n  n = Suc n'\n  Ps \\<noteq> []\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, m)\n        \\<in> derivable  R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n            \\<in> set (fst r')) \\<longrightarrow>\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>' \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n            \\<in> derivable  R*)\n  r \\<in> R1\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  leftPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n  leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  \\<not> leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  leftPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n  leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  \\<not> leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r \\<in> R1 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> R1 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  r \\<in> R1 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r \\<in> R2\""], ["proof (state)\nthis:\n  r \\<in> R2\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "obtain ps c where \"r = (ps,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps c. r = (ps, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r = (ps, c)", "have \"r \\<in> nprovRules\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. r \\<in> nprovRules", "using rules and \\<open>r \\<in> R2\\<close>"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  r \\<in> R2\n\ngoal (1 subgoal):\n 1. r \\<in> nprovRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> nprovRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "have \"leftPrincipal r (F \\<nabla> [x].A) \\<or> \\<not> leftPrincipal r (F \\<nabla> [x].A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftPrincipal r (F \\<nabla> [x].A) \\<or>\n    \\<not> leftPrincipal r (F \\<nabla> [x].A)", "by blast"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"leftPrincipal r (F \\<nabla> [x].A)\""], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  leftPrincipal r (F \\<nabla> [x].A)", "have \"(\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\""], ["proof (prove)\nusing this:\n  leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "using b' and \\<open>r = (ps,c)\\<close> and \\<open>r \\<in> R2\\<close> and rules"], ["proof (prove)\nusing this:\n  leftPrincipal r (F \\<nabla> [x].A)\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  r = (ps, c)\n  r \\<in> R2\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "have \"extend S (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps", "using \\<open>extendRule S r = (Ps,\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\\<close>\n                  and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps", "by (simp add:extendContain)"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "from \\<open>leftPrincipal r (F \\<nabla> [x].A)\\<close>"], ["proof (chain)\npicking this:\n  leftPrincipal r (F \\<nabla> [x].A)", "have \"c = (\\<LM>F \\<nabla> [x].A\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  leftPrincipal r (F \\<nabla> [x].A)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "by (cases) auto"], ["proof (state)\nthis:\n  c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "with \\<open>extendRule S r = (Ps,\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"S = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "apply (auto simp add:extendRule_def extend_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>);\n     r = (ps,  \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>);\n     Ps = map (extend S) ps; \\<Gamma> = antec S; \\<Delta> = succ S\\<rbrakk>\n    \\<Longrightarrow> S = ( antec S \\<Rightarrow>* succ S)", "by (cases S) auto"], ["proof (state)\nthis:\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\""], ["proof (prove)\nusing this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps", "by (simp add:extend_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps", "have \"\\<exists> m\\<le>n'. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using \\<open>\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by (auto,rule_tac x=m in exI) (simp)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"\\<not> leftPrincipal r (F \\<nabla> [x].A)\""], ["proof (state)\nthis:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using nonPrincipalInvertLeft[where r=r and F=F and x=x and A=A and ps=ps and c=c and R=R\n                                                and \\<Gamma>'=\\<Gamma>' and \\<Delta>'=\\<Delta>' and ?R1.0=R1 and ?R2.0=R2 and ?R3.0=R3\n                                                and S=S and Ps=Ps and \\<Gamma>=\\<Gamma> and \\<Delta>=\\<Delta> and n=n and n'=n']\n                  and \\<open>n = Suc n'\\<close> and \\<open>Ps \\<noteq> []\\<close> and a' and b' and e'\n                  and c' and rules and IH and \\<open>r \\<in> R2\\<close> and d' and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n  \\<lbrakk>R1 \\<subseteq> upRules; R2 \\<subseteq> nprovRules;\n   R3 \\<subseteq> provRules; R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n   r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3; r = (ps, c);\n   \\<forall>m<n.\n      \\<forall>\\<Gamma> \\<Delta>.\n         ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, m)\n         \\<in> derivable  R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         \\<not> multSubst \\<Gamma>' \\<and>\n         \\<not> multSubst \\<Delta>' \\<longrightarrow>\n         (\\<exists>m'\\<le>m.\n             ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n             \\<in> derivable  R*);\n   ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n   \\<in> derivable  R*;\n   \\<forall>r'\\<in>R.\n      leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n      ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r');\n   \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>';\n   \\<not> leftPrincipal r (F \\<nabla> [x].A);\n   extendRule S r =\n   (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>);\n   n = n' + 1;\n   \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*;\n   Ps \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m\\<le>n.\n                       ( \\<Gamma> +\n                         \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                        m)\n                       \\<in> derivable  R*\n  n = Suc n'\n  Ps \\<noteq> []\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, m)\n        \\<in> derivable  R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n            \\<in> set (fst r')) \\<longrightarrow>\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>' \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n            \\<in> derivable  R*)\n  r \\<in> R2\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  leftPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n  leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  \\<not> leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  leftPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n  leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  \\<not> leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r \\<in> R2 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> R2 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  r \\<in> R2 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"r \\<in> R3\""], ["proof (state)\nthis:\n  r \\<in> R3\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "obtain ps c where \"r = (ps,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps c. r = (ps, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  r = (ps, c)", "have \"r \\<in> provRules\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. r \\<in> provRules", "using rules and \\<open>r \\<in> R3\\<close>"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  r \\<in> R3\n\ngoal (1 subgoal):\n 1. r \\<in> provRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> provRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "have \"leftPrincipal r (F \\<nabla> [x].A) \\<or> \\<not> leftPrincipal r (F \\<nabla> [x].A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftPrincipal r (F \\<nabla> [x].A) \\<or>\n    \\<not> leftPrincipal r (F \\<nabla> [x].A)", "by blast"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"leftPrincipal r (F \\<nabla> [x].A)\""], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  leftPrincipal r (F \\<nabla> [x].A)", "have \"(\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\""], ["proof (prove)\nusing this:\n  leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "using b' and \\<open>r = (ps,c)\\<close> and \\<open>r \\<in> R3\\<close> and rules"], ["proof (prove)\nusing this:\n  leftPrincipal r (F \\<nabla> [x].A)\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  r = (ps, c)\n  r \\<in> R3\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n\ngoal (1 subgoal):\n 1. ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps", "have \"extend S (\\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\""], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps", "using \\<open>extendRule S r = (Ps,\\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\\<close>\n                  and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set ps\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps", "by (simp add:extendContain)"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "from \\<open>leftPrincipal r (F \\<nabla> [x].A)\\<close>"], ["proof (chain)\npicking this:\n  leftPrincipal r (F \\<nabla> [x].A)", "have \"c = (\\<LM>F \\<nabla> [x].A\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  leftPrincipal r (F \\<nabla> [x].A)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "by (cases) auto"], ["proof (state)\nthis:\n  c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "with \\<open>extendRule S r = (Ps,\\<Gamma> \\<oplus> F \\<nabla> [x].A\\<Rightarrow>* \\<Delta>)\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"S = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>)\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "apply (auto simp add:extendRule_def extend_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = ( \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>);\n     r = (ps,  \\<LM> F \\<nabla> [x].A  \\<RM> \\<Rightarrow>* \\<Empt>);\n     Ps = map (extend S) ps; \\<Gamma> = antec S; \\<Delta> = succ S\\<rbrakk>\n    \\<Longrightarrow> S = ( antec S \\<Rightarrow>* succ S)", "by (cases S) auto"], ["proof (state)\nthis:\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\""], ["proof (prove)\nusing this:\n  extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set Ps\n  S = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps", "by (simp add:extend_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps", "have \"\\<exists> m\\<le>n'. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using \\<open>\\<forall> p \\<in> set Ps. \\<exists> n\\<le>n'. (p,n) \\<in> derivable R*\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') \\<in> set Ps\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by (auto,rule_tac x=m in exI) (simp)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "moreover"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "{"], ["proof (state)\nthis:\n  leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "assume \"\\<not> leftPrincipal r (F \\<nabla> [x].A)\""], ["proof (state)\nthis:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "then"], ["proof (chain)\npicking this:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "using nonPrincipalInvertLeft[where r=r and F=F and x=x and A=A and ps=ps and c=c and R=R\n                                                and \\<Gamma>'=\\<Gamma>' and \\<Delta>'=\\<Delta>' and ?R1.0=R1 and ?R2.0=R2 and ?R3.0=R3\n                                                and S=S and Ps=Ps and \\<Gamma>=\\<Gamma> and \\<Delta>=\\<Delta> and n=n and n'=n']\n                  and \\<open>n = Suc n'\\<close> and \\<open>Ps \\<noteq> []\\<close> and a' and b' and e'\n                  and c' and rules and IH and \\<open>r \\<in> R3\\<close> and d' and \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n  \\<lbrakk>R1 \\<subseteq> upRules; R2 \\<subseteq> nprovRules;\n   R3 \\<subseteq> provRules; R = Ax \\<union> R1 \\<union> R2 \\<union> R3;\n   r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3; r = (ps, c);\n   \\<forall>m<n.\n      \\<forall>\\<Gamma> \\<Delta>.\n         ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, m)\n         \\<in> derivable  R* \\<longrightarrow>\n         (\\<forall>r'\\<in>R.\n             leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n             ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n             \\<in> set (fst r')) \\<longrightarrow>\n         \\<not> multSubst \\<Gamma>' \\<and>\n         \\<not> multSubst \\<Delta>' \\<longrightarrow>\n         (\\<exists>m'\\<le>m.\n             ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n             \\<in> derivable  R*);\n   ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n   \\<in> derivable  R*;\n   \\<forall>r'\\<in>R.\n      leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n      ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r');\n   \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>';\n   \\<not> leftPrincipal r (F \\<nabla> [x].A);\n   extendRule S r =\n   (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>);\n   n = n' + 1;\n   \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*;\n   Ps \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m\\<le>n.\n                       ( \\<Gamma> +\n                         \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                        m)\n                       \\<in> derivable  R*\n  n = Suc n'\n  Ps \\<noteq> []\n  ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, n)\n  \\<in> derivable  R*\n  \\<forall>r'\\<in>R.\n     leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n     ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') \\<in> set (fst r')\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  \\<not> multSubst \\<Gamma>' \\<and> \\<not> multSubst \\<Delta>'\n  R1 \\<subseteq> upRules \\<and>\n  R2 \\<subseteq> nprovRules \\<and>\n  R3 \\<subseteq> provRules \\<and> R = Ax \\<union> R1 \\<union> R2 \\<union> R3\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>, m)\n        \\<in> derivable  R* \\<longrightarrow>\n        (\\<forall>r'\\<in>R.\n            leftPrincipal r' (F \\<nabla> [x].A) \\<longrightarrow>\n            ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\n            \\<in> set (fst r')) \\<longrightarrow>\n        \\<not> multSubst \\<Gamma>' \\<and>\n        \\<not> multSubst \\<Delta>' \\<longrightarrow>\n        (\\<exists>m'\\<le>m.\n            ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m')\n            \\<in> derivable  R*)\n  r \\<in> R3\n  \\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable  R*\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  \\<not> leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  leftPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n  leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  \\<not> leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*", "have \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  leftPrincipal r (F \\<nabla> [x].A) \\<or>\n  \\<not> leftPrincipal r (F \\<nabla> [x].A)\n  leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  \\<not> leftPrincipal r (F \\<nabla> [x].A) \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "}"], ["proof (state)\nthis:\n  r \\<in> R3 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n.\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable  R*", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  r \\<in> R1 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  r \\<in> R2 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  r \\<in> R3 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*", "show \"\\<exists> m\\<le>n. (\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  r \\<in> Ax \\<or> r \\<in> R1 \\<or> r \\<in> R2 \\<or> r \\<in> R3\n  extendRule S r =\n  (Ps,  \\<Gamma> \\<oplus> F \\<nabla> [x].A \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  r \\<in> R1 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  r \\<in> R2 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n  r \\<in> R3 \\<Longrightarrow>\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n.\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n       \\<in> derivable  R*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n.\n     ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n     \\<in> derivable  R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\\noindent In both cases, the assumption labelled $c$ captures the ``no specific substitution'' condition.  Interestingly, it is never used throughout the proof.  This highlights the difference between the object- and meta-level existential quantifiers.\n\nOwing to the lack of indexing within datatypes, it is difficult to give an example demonstrating these results.  It would be little effort to change the theory file to accommodate type variables when they are supported in \\textit{Nominal Isabelle}, at which time an example would be simple to write.  \n\\<close>"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}