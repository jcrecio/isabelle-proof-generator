{"file_name": "/home/qj213/afp-2021-10-22/thys/Free-Groups/PingPongLemma.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Free-Groups", "problem_names": ["lemma Bij_one[simp]:\n  assumes \"x \\<in> X\"\n  shows \"\\<one>\\<^bsub>BijGroup X\\<^esub> x = x\"", "lemma other_member:\n   assumes \"I \\<noteq> {}\" and \"i \\<in> I\" and \"card I \\<noteq> 1\"\n   obtains j where \"j\\<in>I\" and \"j\\<noteq>i\"", "lemma ping_pong_lemma:\n  assumes \"group G\"\n  and \"act \\<in> hom G (BijGroup X)\"\n  and \"g \\<in> (I \\<rightarrow> carrier G)\"\n  and \"\\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub> = carrier G\"\n  and sub1: \"\\<forall>i\\<in>I. Xout i \\<subseteq> X\"\n  and sub2: \"\\<forall>i\\<in>I. Xin i \\<subseteq> X\"\n  and disj1: \"\\<forall>i\\<in>I. \\<forall>j\\<in>I. i \\<noteq> j \\<longrightarrow> Xout i \\<inter> Xout j = {}\"\n  and disj2: \"\\<forall>i\\<in>I. \\<forall>j\\<in>I. i \\<noteq> j \\<longrightarrow> Xin i \\<inter> Xin j = {}\"\n  and disj3: \"\\<forall>i\\<in>I. \\<forall>j\\<in>I. Xin i \\<inter> Xout j = {}\"\n  and \"x \\<in> X\"\n  and gencount: \"\\<forall> i . I = {i} \\<longrightarrow> (x \\<notin> Xout i \\<and> x \\<notin> Xin i)\"\n  and ping: \"\\<forall>i\\<in>I. act (g i) ` (X - Xout i) \\<subseteq> Xin i\"\n  and pong: \"\\<forall>i\\<in>I. act (inv\\<^bsub>G\\<^esub> (g i)) ` (X - Xin i) \\<subseteq> Xout i\"\n  shows \"group.lift G g \\<in> iso (\\<F>\\<^bsub>I\\<^esub>) G\""], "translations": [["", "lemma Bij_one[simp]:\n  assumes \"x \\<in> X\"\n  shows \"\\<one>\\<^bsub>BijGroup X\\<^esub> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one>\\<^bsub>BijGroup X\\<^esub> x = x", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<one>\\<^bsub>BijGroup X\\<^esub> x = x", "by (auto simp add: BijGroup_def)"], ["", "lemma other_member:\n   assumes \"I \\<noteq> {}\" and \"i \\<in> I\" and \"card I \\<noteq> 1\"\n   obtains j where \"j\\<in>I\" and \"j\\<noteq>i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<in> I; j \\<noteq> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(cases \"finite I\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>j.\n                \\<lbrakk>j \\<in> I; j \\<noteq> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     finite I\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>j.\n                \\<lbrakk>j \\<in> I; j \\<noteq> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     infinite I\\<rbrakk>\n    \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  finite I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>j.\n                \\<lbrakk>j \\<in> I; j \\<noteq> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     finite I\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>j.\n                \\<lbrakk>j \\<in> I; j \\<noteq> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     infinite I\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \"I - {i} \\<noteq> {}\""], ["proof (prove)\nusing this:\n  finite I\n\ngoal (1 subgoal):\n 1. I - {i} \\<noteq> {}", "using \\<open>card I \\<noteq> 1\\<close> and \\<open>i\\<in>I\\<close>"], ["proof (prove)\nusing this:\n  finite I\n  card I \\<noteq> 1\n  i \\<in> I\n\ngoal (1 subgoal):\n 1. I - {i} \\<noteq> {}", "by (metis Suc_eq_plus1_left card_Diff_subset_Int card_Suc_Diff1 diff_add_inverse2 diff_self_eq_0 empty_Diff finite.emptyI inf_bot_left minus_nat.diff_0)"], ["proof (state)\nthis:\n  I - {i} \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>j.\n                \\<lbrakk>j \\<in> I; j \\<noteq> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     finite I\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>j.\n                \\<lbrakk>j \\<in> I; j \\<noteq> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     infinite I\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  I - {i} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  I - {i} \\<noteq> {}\n  \\<lbrakk>?j \\<in> I; ?j \\<noteq> i\\<rbrakk> \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>j.\n                \\<lbrakk>j \\<in> I; j \\<noteq> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     infinite I\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>j.\n                \\<lbrakk>j \\<in> I; j \\<noteq> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     infinite I\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  infinite I\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>j.\n                \\<lbrakk>j \\<in> I; j \\<noteq> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     infinite I\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \"I - {i} \\<noteq> {}\""], ["proof (prove)\nusing this:\n  infinite I\n\ngoal (1 subgoal):\n 1. I - {i} \\<noteq> {}", "by (metis Diff_empty finite.emptyI finite_Diff_insert)"], ["proof (state)\nthis:\n  I - {i} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>j.\n                \\<lbrakk>j \\<in> I; j \\<noteq> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     infinite I\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  I - {i} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  I - {i} \\<noteq> {}\n  \\<lbrakk>?j \\<in> I; ?j \\<noteq> i\\<rbrakk> \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nAnd now we can attempt the lemma. The gencount condition is a weaker variant\nof ``x has to lie outside all subsets'' that is only required if the set of\ngenerators is one. Otherwise, we will be able to find a suitable x to start\nwith in the proof.\n\\<close>"], ["", "lemma ping_pong_lemma:\n  assumes \"group G\"\n  and \"act \\<in> hom G (BijGroup X)\"\n  and \"g \\<in> (I \\<rightarrow> carrier G)\"\n  and \"\\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub> = carrier G\"\n  and sub1: \"\\<forall>i\\<in>I. Xout i \\<subseteq> X\"\n  and sub2: \"\\<forall>i\\<in>I. Xin i \\<subseteq> X\"\n  and disj1: \"\\<forall>i\\<in>I. \\<forall>j\\<in>I. i \\<noteq> j \\<longrightarrow> Xout i \\<inter> Xout j = {}\"\n  and disj2: \"\\<forall>i\\<in>I. \\<forall>j\\<in>I. i \\<noteq> j \\<longrightarrow> Xin i \\<inter> Xin j = {}\"\n  and disj3: \"\\<forall>i\\<in>I. \\<forall>j\\<in>I. Xin i \\<inter> Xout j = {}\"\n  and \"x \\<in> X\"\n  and gencount: \"\\<forall> i . I = {i} \\<longrightarrow> (x \\<notin> Xout i \\<and> x \\<notin> Xin i)\"\n  and ping: \"\\<forall>i\\<in>I. act (g i) ` (X - Xout i) \\<subseteq> Xin i\"\n  and pong: \"\\<forall>i\\<in>I. act (inv\\<^bsub>G\\<^esub> (g i)) ` (X - Xin i) \\<subseteq> Xout i\"\n  shows \"group.lift G g \\<in> iso (\\<F>\\<^bsub>I\\<^esub>) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. group.lift G g \\<in> Group.iso \\<F>\\<^bsub>I\\<^esub> G", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. group.lift G g \\<in> Group.iso \\<F>\\<^bsub>I\\<^esub> G", "interpret F: group \"\\<F>\\<^bsub>I\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group \\<F>\\<^bsub>I\\<^esub>", "using assms"], ["proof (prove)\nusing this:\n  Group.group G\n  act \\<in> hom G (BijGroup X)\n  g \\<in> I \\<rightarrow> carrier G\n  \\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub> = carrier G\n  \\<forall>i\\<in>I. Xout i \\<subseteq> X\n  \\<forall>i\\<in>I. Xin i \\<subseteq> X\n  \\<forall>i\\<in>I.\n     \\<forall>j\\<in>I.\n        i \\<noteq> j \\<longrightarrow> Xout i \\<inter> Xout j = {}\n  \\<forall>i\\<in>I.\n     \\<forall>j\\<in>I.\n        i \\<noteq> j \\<longrightarrow> Xin i \\<inter> Xin j = {}\n  \\<forall>i\\<in>I. \\<forall>j\\<in>I. Xin i \\<inter> Xout j = {}\n  x \\<in> X\n  \\<forall>i.\n     I = {i} \\<longrightarrow> x \\<notin> Xout i \\<and> x \\<notin> Xin i\n  \\<forall>i\\<in>I. act (g i) ` (X - Xout i) \\<subseteq> Xin i\n  \\<forall>i\\<in>I.\n     act (inv\\<^bsub>G\\<^esub> g i) ` (X - Xin i) \\<subseteq> Xout i\n\ngoal (1 subgoal):\n 1. Group.group \\<F>\\<^bsub>I\\<^esub>", "by (auto simp add: free_group_is_group)"], ["proof (state)\ngoal (1 subgoal):\n 1. group.lift G g \\<in> Group.iso \\<F>\\<^bsub>I\\<^esub> G", "interpret G: group G"], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group G", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. G.lift g \\<in> Group.iso \\<F>\\<^bsub>I\\<^esub> G", "interpret B: group \"BijGroup X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group (BijGroup X)", "using group_BijGroup"], ["proof (prove)\nusing this:\n  Group.group (BijGroup ?S)\n\ngoal (1 subgoal):\n 1. Group.group (BijGroup X)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. G.lift g \\<in> Group.iso \\<F>\\<^bsub>I\\<^esub> G", "interpret act: group_hom G \"BijGroup X\" act"], ["proof (prove)\ngoal (1 subgoal):\n 1. group_hom G (BijGroup X) act", "by (unfold_locales) fact"], ["proof (state)\ngoal (1 subgoal):\n 1. G.lift g \\<in> Group.iso \\<F>\\<^bsub>I\\<^esub> G", "interpret h: group_hom \"\\<F>\\<^bsub>I\\<^esub>\" G \"G.lift g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. group_hom \\<F>\\<^bsub>I\\<^esub> G (G.lift g)", "using F.is_group G.is_group G.lift_is_hom assms"], ["proof (prove)\nusing this:\n  Group.group \\<F>\\<^bsub>I\\<^esub>\n  Group.group G\n  ?f \\<in> ?gens \\<rightarrow> carrier G \\<Longrightarrow>\n  G.lift ?f \\<in> hom \\<F>\\<^bsub>?gens\\<^esub> G\n  Group.group G\n  act \\<in> hom G (BijGroup X)\n  g \\<in> I \\<rightarrow> carrier G\n  \\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub> = carrier G\n  \\<forall>i\\<in>I. Xout i \\<subseteq> X\n  \\<forall>i\\<in>I. Xin i \\<subseteq> X\n  \\<forall>i\\<in>I.\n     \\<forall>j\\<in>I.\n        i \\<noteq> j \\<longrightarrow> Xout i \\<inter> Xout j = {}\n  \\<forall>i\\<in>I.\n     \\<forall>j\\<in>I.\n        i \\<noteq> j \\<longrightarrow> Xin i \\<inter> Xin j = {}\n  \\<forall>i\\<in>I. \\<forall>j\\<in>I. Xin i \\<inter> Xout j = {}\n  x \\<in> X\n  \\<forall>i.\n     I = {i} \\<longrightarrow> x \\<notin> Xout i \\<and> x \\<notin> Xin i\n  \\<forall>i\\<in>I. act (g i) ` (X - Xout i) \\<subseteq> Xin i\n  \\<forall>i\\<in>I.\n     act (inv\\<^bsub>G\\<^esub> g i) ` (X - Xin i) \\<subseteq> Xout i\n\ngoal (1 subgoal):\n 1. group_hom \\<F>\\<^bsub>I\\<^esub> G (G.lift g)", "by (auto intro!: group_hom.intro group_hom_axioms.intro)"], ["proof (state)\ngoal (1 subgoal):\n 1. G.lift g \\<in> Group.iso \\<F>\\<^bsub>I\\<^esub> G", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. G.lift g \\<in> Group.iso \\<F>\\<^bsub>I\\<^esub> G", "proof(rule h.group_hom_isoI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>carrier \\<F>\\<^bsub>I\\<^esub>.\n       G.lift g x = \\<one>\\<^bsub>G\\<^esub> \\<longrightarrow>\n       x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>\n 2. G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G", "txt \\<open>Injectivity is the hard part of the proof.\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>carrier \\<F>\\<^bsub>I\\<^esub>.\n       G.lift g x = \\<one>\\<^bsub>G\\<^esub> \\<longrightarrow>\n       x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>\n 2. G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G", "show \"\\<forall>x\\<in>carrier \\<F>\\<^bsub>I\\<^esub>. G.lift g x = \\<one>\\<^bsub>G\\<^esub> \\<longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>carrier \\<F>\\<^bsub>I\\<^esub>.\n       G.lift g x = \\<one>\\<^bsub>G\\<^esub> \\<longrightarrow>\n       x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "proof(rule+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>I\\<^esub>;\n        G.lift g x = \\<one>\\<^bsub>G\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "txt \\<open>We lift the Xout and Xin sets to generators and their inveres, and\n         create variants of the disj-conditions:\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>I\\<^esub>;\n        G.lift g x = \\<one>\\<^bsub>G\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "define Xout' where \"Xout' = (\\<lambda>(b,i::'d). if b then Xin i else Xout i)\""], ["proof (state)\nthis:\n  Xout' = (\\<lambda>(b, i). if b then Xin i else Xout i)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>I\\<^esub>;\n        G.lift g x = \\<one>\\<^bsub>G\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "define Xin' where \"Xin' = (\\<lambda>(b,i::'d). if b then Xout i else Xin i)\""], ["proof (state)\nthis:\n  Xin' = (\\<lambda>(b, i). if b then Xout i else Xin i)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>I\\<^esub>;\n        G.lift g x = \\<one>\\<^bsub>G\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "have disj1': \"\\<forall>i\\<in>(UNIV \\<times> I). \\<forall>j\\<in>(UNIV \\<times> I). i \\<noteq> j \\<longrightarrow> Xout' i \\<inter> Xout' j = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>UNIV \\<times> I.\n       \\<forall>j\\<in>UNIV \\<times> I.\n          i \\<noteq> j \\<longrightarrow> Xout' i \\<inter> Xout' j = {}", "using disj1[rule_format] disj2[rule_format] disj3[rule_format]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i \\<in> I; ?j \\<in> I; ?i \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> Xout ?i \\<inter> Xout ?j = {}\n  \\<lbrakk>?i \\<in> I; ?j \\<in> I; ?i \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> Xin ?i \\<inter> Xin ?j = {}\n  \\<lbrakk>?i \\<in> I; ?j \\<in> I\\<rbrakk>\n  \\<Longrightarrow> Xin ?i \\<inter> Xout ?j = {}\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>UNIV \\<times> I.\n       \\<forall>j\\<in>UNIV \\<times> I.\n          i \\<noteq> j \\<longrightarrow> Xout' i \\<inter> Xout' j = {}", "by (auto simp add:Xout'_def Xin'_def split:if_splits, blast+)"], ["proof (state)\nthis:\n  \\<forall>i\\<in>UNIV \\<times> I.\n     \\<forall>j\\<in>UNIV \\<times> I.\n        i \\<noteq> j \\<longrightarrow> Xout' i \\<inter> Xout' j = {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>I\\<^esub>;\n        G.lift g x = \\<one>\\<^bsub>G\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "have disj2': \"\\<forall>i\\<in>(UNIV \\<times> I). \\<forall>j\\<in>(UNIV \\<times> I). i \\<noteq> j \\<longrightarrow> Xin' i \\<inter> Xin' j = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>UNIV \\<times> I.\n       \\<forall>j\\<in>UNIV \\<times> I.\n          i \\<noteq> j \\<longrightarrow> Xin' i \\<inter> Xin' j = {}", "using disj1[rule_format] disj2[rule_format] disj3[rule_format]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i \\<in> I; ?j \\<in> I; ?i \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> Xout ?i \\<inter> Xout ?j = {}\n  \\<lbrakk>?i \\<in> I; ?j \\<in> I; ?i \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> Xin ?i \\<inter> Xin ?j = {}\n  \\<lbrakk>?i \\<in> I; ?j \\<in> I\\<rbrakk>\n  \\<Longrightarrow> Xin ?i \\<inter> Xout ?j = {}\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>UNIV \\<times> I.\n       \\<forall>j\\<in>UNIV \\<times> I.\n          i \\<noteq> j \\<longrightarrow> Xin' i \\<inter> Xin' j = {}", "by (auto simp add:Xout'_def Xin'_def split:if_splits, blast+)"], ["proof (state)\nthis:\n  \\<forall>i\\<in>UNIV \\<times> I.\n     \\<forall>j\\<in>UNIV \\<times> I.\n        i \\<noteq> j \\<longrightarrow> Xin' i \\<inter> Xin' j = {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>I\\<^esub>;\n        G.lift g x = \\<one>\\<^bsub>G\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "have disj3': \"\\<forall>i\\<in>(UNIV \\<times> I). \\<forall>j\\<in>(UNIV \\<times> I). \\<not> canceling i j \\<longrightarrow> Xin' i \\<inter> Xout' j = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>UNIV \\<times> I.\n       \\<forall>j\\<in>UNIV \\<times> I.\n          \\<not> canceling i j \\<longrightarrow>\n          Xin' i \\<inter> Xout' j = {}", "using disj1[rule_format] disj2[rule_format] disj3[rule_format]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i \\<in> I; ?j \\<in> I; ?i \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> Xout ?i \\<inter> Xout ?j = {}\n  \\<lbrakk>?i \\<in> I; ?j \\<in> I; ?i \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> Xin ?i \\<inter> Xin ?j = {}\n  \\<lbrakk>?i \\<in> I; ?j \\<in> I\\<rbrakk>\n  \\<Longrightarrow> Xin ?i \\<inter> Xout ?j = {}\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>UNIV \\<times> I.\n       \\<forall>j\\<in>UNIV \\<times> I.\n          \\<not> canceling i j \\<longrightarrow>\n          Xin' i \\<inter> Xout' j = {}", "by (auto simp add:canceling_def Xout'_def Xin'_def split:if_splits, blast)"], ["proof (state)\nthis:\n  \\<forall>i\\<in>UNIV \\<times> I.\n     \\<forall>j\\<in>UNIV \\<times> I.\n        \\<not> canceling i j \\<longrightarrow> Xin' i \\<inter> Xout' j = {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>I\\<^esub>;\n        G.lift g x = \\<one>\\<^bsub>G\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "txt \\<open>We need to pick a suitable element of the set to play ping pong\n         with. In particular, it needs to be outside of the Xout-set of the last\n         generator in the list, and outside the in-set of the first element. This\n         part of the proof is surprisingly tedious, because there are several\n         cases, some similar but not the same.\n\\<close>"], ["proof (state)\nthis:\n  \\<forall>i\\<in>UNIV \\<times> I.\n     \\<forall>j\\<in>UNIV \\<times> I.\n        \\<not> canceling i j \\<longrightarrow> Xin' i \\<inter> Xout' j = {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>I\\<^esub>;\n        G.lift g x = \\<one>\\<^bsub>G\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>I\\<^esub>;\n        G.lift g x = \\<one>\\<^bsub>G\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "assume w: \"w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\""], ["proof (state)\nthis:\n  w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>I\\<^esub>;\n        G.lift g x = \\<one>\\<^bsub>G\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "obtain x where \"x \\<in> X\"\n           and x1: \"w = [] \\<or> x \\<notin> Xout' (last w)\" \n           and x2: \"w = [] \\<or> x \\<notin> Xin' (hd w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume \"I = {}\""], ["proof (state)\nthis:\n  I = {}\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"w = []\""], ["proof (prove)\nusing this:\n  I = {}\n\ngoal (1 subgoal):\n 1. w = []", "using w"], ["proof (prove)\nusing this:\n  I = {}\n  w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (1 subgoal):\n 1. w = []", "by (auto simp add:free_group_def)"], ["proof (state)\nthis:\n  w = []\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence ?thesis"], ["proof (prove)\nusing this:\n  w = []\n\ngoal (1 subgoal):\n 1. thesis", "using that \\<open>x\\<in>X\\<close>"], ["proof (prove)\nusing this:\n  w = []\n  \\<lbrakk>?x1 \\<in> X; w = [] \\<or> ?x1 \\<notin> Xout' (last w);\n   w = [] \\<or> ?x1 \\<notin> Xin' (hd w)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  I = {} \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  I = {} \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  I = {} \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume \"card I = 1\""], ["proof (state)\nthis:\n  card I = 1\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  card I = 1", "obtain i where \"I={i}\""], ["proof (prove)\nusing this:\n  card I = 1\n\ngoal (1 subgoal):\n 1. (\\<And>i. I = {i} \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto dest: card_eq_SucD)"], ["proof (state)\nthis:\n  I = {i}\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume \"w\\<noteq>[]\""], ["proof (state)\nthis:\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"snd (hd w) = i\" and \"snd (last w) = i\""], ["proof (prove)\nusing this:\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. snd (hd w) = i &&& snd (last w) = i", "using w \\<open>I={i}\\<close>"], ["proof (prove)\nusing this:\n  w \\<noteq> []\n  w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  I = {i}\n\ngoal (1 subgoal):\n 1. snd (hd w) = i &&& snd (last w) = i", "apply (cases w, auto simp add:free_group_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>w \\<noteq> []; I = {i}; canceled w;\n     \\<forall>x\\<in>set w. x \\<in> UNIV \\<times> {i}\\<rbrakk>\n    \\<Longrightarrow> snd (last w) = i", "apply (cases w rule:rev_exhaust, auto simp add:free_group_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  snd (hd w) = i\n  snd (last w) = i\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence ?thesis"], ["proof (prove)\nusing this:\n  snd (hd w) = i\n  snd (last w) = i\n\ngoal (1 subgoal):\n 1. thesis", "using gencount[rule_format, OF \\<open>I={i}\\<close>] that[OF \\<open>x\\<in>X\\<close>] \\<open>w\\<noteq>[]\\<close>"], ["proof (prove)\nusing this:\n  snd (hd w) = i\n  snd (last w) = i\n  x \\<notin> Xout i \\<and> x \\<notin> Xin i\n  \\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n   w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. thesis", "by (cases \"last w\", cases \"hd w\", auto simp add:Xout'_def Xin'_def split:if_splits)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  \\<lbrakk>card I = 1; w \\<noteq> []\\<rbrakk> \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>card I = 1; w \\<noteq> []\\<rbrakk> \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  \\<lbrakk>card I = 1; w \\<noteq> []\\<rbrakk> \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume \"I \\<noteq> {}\" and \"card I \\<noteq> 1\" and \"w \\<noteq> []\""], ["proof (state)\nthis:\n  I \\<noteq> {}\n  card I \\<noteq> 1\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>w \\<noteq> []\\<close> and w"], ["proof (chain)\npicking this:\n  w \\<noteq> []\n  w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>", "obtain b i where hd: \"hd w = (b,i)\" and \"i\\<in>I\""], ["proof (prove)\nusing this:\n  w \\<noteq> []\n  w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>b i.\n        \\<lbrakk>hd w = (b, i); i \\<in> I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases w, auto simp add:free_group_def)"], ["proof (state)\nthis:\n  hd w = (b, i)\n  i \\<in> I\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>w \\<noteq> []\\<close> and w"], ["proof (chain)\npicking this:\n  w \\<noteq> []\n  w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>", "obtain b' i' where last: \"last w = (b',i')\" and \"i'\\<in>I\""], ["proof (prove)\nusing this:\n  w \\<noteq> []\n  w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>b' i'.\n        \\<lbrakk>last w = (b', i'); i' \\<in> I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases w rule: rev_exhaust, auto simp add:free_group_def)"], ["proof (state)\nthis:\n  last w = (b', i')\n  i' \\<in> I\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "txt \\<open>What follows are two very similar cases, but the correct\n             choice of variables depends on where we find x.\\<close>"], ["proof (state)\nthis:\n  last w = (b', i')\n  i' \\<in> I\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  last w = (b', i')\n  i' \\<in> I\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain b'' i'' where\n               \"(b'',i'') \\<noteq> (b,i)\" and\n               \"(b'',i'') \\<noteq> (b',i')\" and\n               \"\\<not> canceling (b'', i'') (b',i')\" and\n               \"i''\\<in>I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b'' i''.\n        \\<lbrakk>(b'', i'') \\<noteq> (b, i); (b'', i'') \\<noteq> (b', i');\n         \\<not> canceling (b'', i'') (b', i'); i'' \\<in> I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(cases \"i=i'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>(b'', i'') \\<noteq> (b, i);\n                 (b'', i'') \\<noteq> (b', i');\n                 \\<not> canceling (b'', i'') (b', i'); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i = i'\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>(b'', i'') \\<noteq> (b, i);\n                 (b'', i'') \\<noteq> (b', i');\n                 \\<not> canceling (b'', i'') (b', i'); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  i = i'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>(b'', i'') \\<noteq> (b, i);\n                 (b'', i'') \\<noteq> (b', i');\n                 \\<not> canceling (b'', i'') (b', i'); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i = i'\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>(b'', i'') \\<noteq> (b, i);\n                 (b'', i'') \\<noteq> (b', i');\n                 \\<not> canceling (b'', i'') (b', i'); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> thesis", "obtain j where \"j\\<in>I\" and \"j\\<noteq>i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<in> I; j \\<noteq> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using  \\<open>card I \\<noteq> 1\\<close> and \\<open>i\\<in>I\\<close>"], ["proof (prove)\nusing this:\n  card I \\<noteq> 1\n  i \\<in> I\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<in> I; j \\<noteq> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(rule other_member, auto)"], ["proof (state)\nthis:\n  j \\<in> I\n  j \\<noteq> i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>(b'', i'') \\<noteq> (b, i);\n                 (b'', i'') \\<noteq> (b', i');\n                 \\<not> canceling (b'', i'') (b', i'); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i = i'\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>(b'', i'') \\<noteq> (b, i);\n                 (b'', i'') \\<noteq> (b', i');\n                 \\<not> canceling (b'', i'') (b', i'); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> thesis", "with True"], ["proof (chain)\npicking this:\n  i = i'\n  j \\<in> I\n  j \\<noteq> i", "show ?thesis"], ["proof (prove)\nusing this:\n  i = i'\n  j \\<in> I\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  i = i'\n  j \\<in> I\n  j \\<noteq> i\n  \\<lbrakk>(?b''1, ?i''1) \\<noteq> (b, i); (?b''1, ?i''1) \\<noteq> (b', i');\n   \\<not> canceling (?b''1, ?i''1) (b', i'); ?i''1 \\<in> I\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by (auto simp add:canceling_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>(b'', i'') \\<noteq> (b, i);\n                 (b'', i'') \\<noteq> (b', i');\n                 \\<not> canceling (b'', i'') (b', i'); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>(b'', i'') \\<noteq> (b, i);\n                 (b'', i'') \\<noteq> (b', i');\n                 \\<not> canceling (b'', i'') (b', i'); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>(b'', i'') \\<noteq> (b, i);\n                 (b'', i'') \\<noteq> (b', i');\n                 \\<not> canceling (b'', i'') (b', i'); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. thesis", "using that \\<open>i\\<in>I\\<close> \\<open>i' \\<in> I\\<close>"], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  \\<lbrakk>(?b''1, ?i''1) \\<noteq> (b, i); (?b''1, ?i''1) \\<noteq> (b', i');\n   \\<not> canceling (?b''1, ?i''1) (b', i'); ?i''1 \\<in> I\\<rbrakk>\n  \\<Longrightarrow> thesis\n  i \\<in> I\n  i' \\<in> I\n\ngoal (1 subgoal):\n 1. thesis", "by (simp add:canceling_def, metis)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (b'', i'') \\<noteq> (b, i)\n  (b'', i'') \\<noteq> (b', i')\n  \\<not> canceling (b'', i'') (b', i')\n  i'' \\<in> I\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?g = \"(b'',i'')\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume \"x \\<in> Xout' (last w)\""], ["proof (state)\nthis:\n  x \\<in> Xout' (last w)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"x \\<notin> Xout' ?g\""], ["proof (prove)\nusing this:\n  x \\<in> Xout' (last w)\n\ngoal (1 subgoal):\n 1. x \\<notin> Xout' (b'', i'')", "using disj1'[rule_format, OF _ _ \\<open>?g \\<noteq> (b',i')\\<close>]\n                   \\<open>i \\<in> I\\<close> \\<open>i'\\<in>I\\<close> \\<open>i''\\<in>I\\<close> hd last"], ["proof (prove)\nusing this:\n  x \\<in> Xout' (last w)\n  \\<lbrakk>(b'', i'') \\<in> UNIV \\<times> I;\n   (b', i') \\<in> UNIV \\<times> I\\<rbrakk>\n  \\<Longrightarrow> Xout' (b'', i'') \\<inter> Xout' (b', i') = {}\n  i \\<in> I\n  i' \\<in> I\n  i'' \\<in> I\n  hd w = (b, i)\n  last w = (b', i')\n\ngoal (1 subgoal):\n 1. x \\<notin> Xout' (b'', i'')", "by auto"], ["proof (state)\nthis:\n  x \\<notin> Xout' (b'', i'')\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"act (G.lift_gi g ?g) x \\<in> Xin' ?g\" (is \"?x \\<in> _\")"], ["proof (prove)\nusing this:\n  x \\<notin> Xout' (b'', i'')\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) x \\<in> Xin' (b'', i'')", "using \\<open>i'' \\<in> I\\<close> \\<open>x \\<in> X\\<close>\n               ping[rule_format, OF \\<open>i'' \\<in> I\\<close>, THEN subsetD]\n               pong[rule_format, OF \\<open>i'' \\<in> I\\<close>, THEN subsetD]"], ["proof (prove)\nusing this:\n  x \\<notin> Xout' (b'', i'')\n  i'' \\<in> I\n  x \\<in> X\n  ?c \\<in> act (g i'') ` (X - Xout i'') \\<Longrightarrow> ?c \\<in> Xin i''\n  ?c \\<in> act (inv\\<^bsub>G\\<^esub> g i'') `\n           (X - Xin i'') \\<Longrightarrow>\n  ?c \\<in> Xout i''\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) x \\<in> Xin' (b'', i'')", "by (auto simp add:G.lift_def G.lift_gi_def Xout'_def Xin'_def)"], ["proof (state)\nthis:\n  act (G.lift_gi g (b'', i'')) x \\<in> Xin' (b'', i'')\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"?x \\<notin> Xout' (last w) \\<and> ?x \\<notin> Xin' (hd w)\""], ["proof (prove)\nusing this:\n  act (G.lift_gi g (b'', i'')) x \\<in> Xin' (b'', i'')\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w) \\<and>\n    act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)", "using \n                 disj3'[rule_format, OF _ _ \\<open>\\<not> canceling (b'', i'') (b',i')\\<close>]\n                 disj2'[rule_format, OF _ _  \\<open>?g \\<noteq> (b,i)\\<close>]\n                 \\<open>i \\<in> I\\<close> \\<open>i'\\<in>I\\<close> \\<open>i''\\<in>I\\<close> hd last"], ["proof (prove)\nusing this:\n  act (G.lift_gi g (b'', i'')) x \\<in> Xin' (b'', i'')\n  \\<lbrakk>(b'', i'') \\<in> UNIV \\<times> I;\n   (b', i') \\<in> UNIV \\<times> I\\<rbrakk>\n  \\<Longrightarrow> Xin' (b'', i'') \\<inter> Xout' (b', i') = {}\n  \\<lbrakk>(b'', i'') \\<in> UNIV \\<times> I;\n   (b, i) \\<in> UNIV \\<times> I\\<rbrakk>\n  \\<Longrightarrow> Xin' (b'', i'') \\<inter> Xin' (b, i) = {}\n  i \\<in> I\n  i' \\<in> I\n  i'' \\<in> I\n  hd w = (b, i)\n  last w = (b', i')\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w) \\<and>\n    act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)", "by (auto simp add: canceling_def)"], ["proof (state)\nthis:\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w) \\<and>\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w) \\<and>\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note \\<open>i'' \\<in> I\\<close>"], ["proof (state)\nthis:\n  i'' \\<in> I\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"g i'' \\<in> carrier G\""], ["proof (prove)\nusing this:\n  i'' \\<in> I\n\ngoal (1 subgoal):\n 1. g i'' \\<in> carrier G", "using \\<open>g \\<in> (I \\<rightarrow> carrier G)\\<close>"], ["proof (prove)\nusing this:\n  i'' \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n\ngoal (1 subgoal):\n 1. g i'' \\<in> carrier G", "by auto"], ["proof (state)\nthis:\n  g i'' \\<in> carrier G\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"G.lift_gi g ?g \\<in> carrier G\""], ["proof (prove)\nusing this:\n  g i'' \\<in> carrier G\n\ngoal (1 subgoal):\n 1. G.lift_gi g (b'', i'') \\<in> carrier G", "by (auto simp add:G.lift_gi_def inv1_def)"], ["proof (state)\nthis:\n  G.lift_gi g (b'', i'') \\<in> carrier G\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"act (G.lift_gi g ?g) \\<in> carrier (BijGroup X)\""], ["proof (prove)\nusing this:\n  G.lift_gi g (b'', i'') \\<in> carrier G\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) \\<in> carrier (BijGroup X)", "using \\<open>act \\<in> hom G (BijGroup X)\\<close>"], ["proof (prove)\nusing this:\n  G.lift_gi g (b'', i'') \\<in> carrier G\n  act \\<in> hom G (BijGroup X)\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) \\<in> carrier (BijGroup X)", "by auto"], ["proof (state)\nthis:\n  act (G.lift_gi g (b'', i'')) \\<in> carrier (BijGroup X)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"?x \\<in> X\""], ["proof (prove)\nusing this:\n  act (G.lift_gi g (b'', i'')) \\<in> carrier (BijGroup X)\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) x \\<in> X", "using \\<open>x\\<in>X\\<close>"], ["proof (prove)\nusing this:\n  act (G.lift_gi g (b'', i'')) \\<in> carrier (BijGroup X)\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) x \\<in> X", "by (auto simp add:BijGroup_def Bij_def bij_betw_def)"], ["proof (state)\nthis:\n  act (G.lift_gi g (b'', i'')) x \\<in> X\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w) \\<and>\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)\n  act (G.lift_gi g (b'', i'')) x \\<in> X", "have ?thesis"], ["proof (prove)\nusing this:\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w) \\<and>\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)\n  act (G.lift_gi g (b'', i'')) x \\<in> X\n\ngoal (1 subgoal):\n 1. thesis", "using that[of ?x]"], ["proof (prove)\nusing this:\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w) \\<and>\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)\n  act (G.lift_gi g (b'', i'')) x \\<in> X\n  \\<lbrakk>act (G.lift_gi g (b'', i'')) x \\<in> X;\n   w = [] \\<or> act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w);\n   w = [] \\<or> act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  x \\<in> Xout' (last w) \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  x \\<in> Xout' (last w) \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  x \\<in> Xout' (last w) \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain b'' i'' where\n               \"\\<not> canceling (b'',i'') (b,i)\" and\n               \"\\<not> canceling (b'',i'') (b',i')\" and\n               \"(b,i) \\<noteq> (b'',i'')\" and\n               \"i''\\<in>I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b'' i''.\n        \\<lbrakk>\\<not> canceling (b'', i'') (b, i);\n         \\<not> canceling (b'', i'') (b', i'); (b, i) \\<noteq> (b'', i'');\n         i'' \\<in> I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(cases \"i=i'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>\\<not> canceling (b'', i'') (b, i);\n                 \\<not> canceling (b'', i'') (b', i');\n                 (b, i) \\<noteq> (b'', i''); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i = i'\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>\\<not> canceling (b'', i'') (b, i);\n                 \\<not> canceling (b'', i'') (b', i');\n                 (b, i) \\<noteq> (b'', i''); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  i = i'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>\\<not> canceling (b'', i'') (b, i);\n                 \\<not> canceling (b'', i'') (b', i');\n                 (b, i) \\<noteq> (b'', i''); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i = i'\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>\\<not> canceling (b'', i'') (b, i);\n                 \\<not> canceling (b'', i'') (b', i');\n                 (b, i) \\<noteq> (b'', i''); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> thesis", "obtain j where \"j\\<in>I\" and \"j\\<noteq>i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<in> I; j \\<noteq> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using  \\<open>card I \\<noteq> 1\\<close> and \\<open>i\\<in>I\\<close>"], ["proof (prove)\nusing this:\n  card I \\<noteq> 1\n  i \\<in> I\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<in> I; j \\<noteq> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(rule other_member, auto)"], ["proof (state)\nthis:\n  j \\<in> I\n  j \\<noteq> i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>\\<not> canceling (b'', i'') (b, i);\n                 \\<not> canceling (b'', i'') (b', i');\n                 (b, i) \\<noteq> (b'', i''); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i = i'\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>\\<not> canceling (b'', i'') (b, i);\n                 \\<not> canceling (b'', i'') (b', i');\n                 (b, i) \\<noteq> (b'', i''); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> thesis", "with True"], ["proof (chain)\npicking this:\n  i = i'\n  j \\<in> I\n  j \\<noteq> i", "show ?thesis"], ["proof (prove)\nusing this:\n  i = i'\n  j \\<in> I\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  i = i'\n  j \\<in> I\n  j \\<noteq> i\n  \\<lbrakk>\\<not> canceling (?b''1, ?i''1) (b, i);\n   \\<not> canceling (?b''1, ?i''1) (b', i'); (b, i) \\<noteq> (?b''1, ?i''1);\n   ?i''1 \\<in> I\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by (auto simp add:canceling_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>\\<not> canceling (b'', i'') (b, i);\n                 \\<not> canceling (b'', i'') (b', i');\n                 (b, i) \\<noteq> (b'', i''); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>\\<not> canceling (b'', i'') (b, i);\n                 \\<not> canceling (b'', i'') (b', i');\n                 (b, i) \\<noteq> (b'', i''); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>b'' i''.\n                \\<lbrakk>\\<not> canceling (b'', i'') (b, i);\n                 \\<not> canceling (b'', i'') (b', i');\n                 (b, i) \\<noteq> (b'', i''); i'' \\<in> I\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. thesis", "using that \\<open>i\\<in>I\\<close> \\<open>i' \\<in> I\\<close>"], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  \\<lbrakk>\\<not> canceling (?b''1, ?i''1) (b, i);\n   \\<not> canceling (?b''1, ?i''1) (b', i'); (b, i) \\<noteq> (?b''1, ?i''1);\n   ?i''1 \\<in> I\\<rbrakk>\n  \\<Longrightarrow> thesis\n  i \\<in> I\n  i' \\<in> I\n\ngoal (1 subgoal):\n 1. thesis", "by (simp add:canceling_def, metis)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> canceling (b'', i'') (b, i)\n  \\<not> canceling (b'', i'') (b', i')\n  (b, i) \\<noteq> (b'', i'')\n  i'' \\<in> I\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?g = \"(b'',i'')\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note cancel_sym_neg[OF \\<open>\\<not> canceling (b'',i'') (b,i)\\<close>]"], ["proof (state)\nthis:\n  \\<not> canceling (b, i) (b'', i'')\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note cancel_sym_neg[OF \\<open>\\<not> canceling (b'',i'') (b',i')\\<close>]"], ["proof (state)\nthis:\n  \\<not> canceling (b', i') (b'', i'')\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume \"x \\<in> Xin' (hd w)\""], ["proof (state)\nthis:\n  x \\<in> Xin' (hd w)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"x \\<notin> Xout' ?g\""], ["proof (prove)\nusing this:\n  x \\<in> Xin' (hd w)\n\ngoal (1 subgoal):\n 1. x \\<notin> Xout' (b'', i'')", "using disj3'[rule_format, OF _ _ \\<open>\\<not> canceling (b,i) ?g\\<close>]\n                   \\<open>i \\<in> I\\<close> \\<open>i'\\<in>I\\<close> \\<open>i''\\<in>I\\<close> hd last"], ["proof (prove)\nusing this:\n  x \\<in> Xin' (hd w)\n  \\<lbrakk>(b, i) \\<in> UNIV \\<times> I;\n   (b'', i'') \\<in> UNIV \\<times> I\\<rbrakk>\n  \\<Longrightarrow> Xin' (b, i) \\<inter> Xout' (b'', i'') = {}\n  i \\<in> I\n  i' \\<in> I\n  i'' \\<in> I\n  hd w = (b, i)\n  last w = (b', i')\n\ngoal (1 subgoal):\n 1. x \\<notin> Xout' (b'', i'')", "by auto"], ["proof (state)\nthis:\n  x \\<notin> Xout' (b'', i'')\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"act (G.lift_gi g ?g) x \\<in> Xin' ?g\" (is \"?x \\<in> _\")"], ["proof (prove)\nusing this:\n  x \\<notin> Xout' (b'', i'')\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) x \\<in> Xin' (b'', i'')", "using \\<open>i'' \\<in> I\\<close> \\<open>x \\<in> X\\<close>\n               ping[rule_format, OF \\<open>i'' \\<in> I\\<close>, THEN subsetD]\n               pong[rule_format, OF \\<open>i'' \\<in> I\\<close>, THEN subsetD]"], ["proof (prove)\nusing this:\n  x \\<notin> Xout' (b'', i'')\n  i'' \\<in> I\n  x \\<in> X\n  ?c \\<in> act (g i'') ` (X - Xout i'') \\<Longrightarrow> ?c \\<in> Xin i''\n  ?c \\<in> act (inv\\<^bsub>G\\<^esub> g i'') `\n           (X - Xin i'') \\<Longrightarrow>\n  ?c \\<in> Xout i''\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) x \\<in> Xin' (b'', i'')", "by (auto simp add:G.lift_def G.lift_gi_def Xout'_def Xin'_def)"], ["proof (state)\nthis:\n  act (G.lift_gi g (b'', i'')) x \\<in> Xin' (b'', i'')\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"?x \\<notin> Xout' (last w) \\<and> ?x \\<notin> Xin' (hd w)\""], ["proof (prove)\nusing this:\n  act (G.lift_gi g (b'', i'')) x \\<in> Xin' (b'', i'')\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w) \\<and>\n    act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)", "using \n                 disj3'[rule_format, OF _ _ \\<open>\\<not> canceling ?g (b',i')\\<close>]\n                 disj2'[rule_format, OF _ _  \\<open>(b,i) \\<noteq> ?g\\<close>]\n                 \\<open>i \\<in> I\\<close> \\<open>i'\\<in>I\\<close> \\<open>i''\\<in>I\\<close> hd last"], ["proof (prove)\nusing this:\n  act (G.lift_gi g (b'', i'')) x \\<in> Xin' (b'', i'')\n  \\<lbrakk>(b'', i'') \\<in> UNIV \\<times> I;\n   (b', i') \\<in> UNIV \\<times> I\\<rbrakk>\n  \\<Longrightarrow> Xin' (b'', i'') \\<inter> Xout' (b', i') = {}\n  \\<lbrakk>(b, i) \\<in> UNIV \\<times> I;\n   (b'', i'') \\<in> UNIV \\<times> I\\<rbrakk>\n  \\<Longrightarrow> Xin' (b, i) \\<inter> Xin' (b'', i'') = {}\n  i \\<in> I\n  i' \\<in> I\n  i'' \\<in> I\n  hd w = (b, i)\n  last w = (b', i')\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w) \\<and>\n    act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)", "by (auto simp add: canceling_def)"], ["proof (state)\nthis:\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w) \\<and>\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w) \\<and>\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note \\<open>i'' \\<in> I\\<close>"], ["proof (state)\nthis:\n  i'' \\<in> I\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"g i'' \\<in> carrier G\""], ["proof (prove)\nusing this:\n  i'' \\<in> I\n\ngoal (1 subgoal):\n 1. g i'' \\<in> carrier G", "using \\<open>g \\<in> (I \\<rightarrow> carrier G)\\<close>"], ["proof (prove)\nusing this:\n  i'' \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n\ngoal (1 subgoal):\n 1. g i'' \\<in> carrier G", "by auto"], ["proof (state)\nthis:\n  g i'' \\<in> carrier G\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"G.lift_gi g ?g \\<in> carrier G\""], ["proof (prove)\nusing this:\n  g i'' \\<in> carrier G\n\ngoal (1 subgoal):\n 1. G.lift_gi g (b'', i'') \\<in> carrier G", "by (auto simp add:G.lift_gi_def)"], ["proof (state)\nthis:\n  G.lift_gi g (b'', i'') \\<in> carrier G\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"act (G.lift_gi g ?g) \\<in> carrier (BijGroup X)\""], ["proof (prove)\nusing this:\n  G.lift_gi g (b'', i'') \\<in> carrier G\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) \\<in> carrier (BijGroup X)", "using \\<open>act \\<in> hom G (BijGroup X)\\<close>"], ["proof (prove)\nusing this:\n  G.lift_gi g (b'', i'') \\<in> carrier G\n  act \\<in> hom G (BijGroup X)\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) \\<in> carrier (BijGroup X)", "by auto"], ["proof (state)\nthis:\n  act (G.lift_gi g (b'', i'')) \\<in> carrier (BijGroup X)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"?x \\<in> X\""], ["proof (prove)\nusing this:\n  act (G.lift_gi g (b'', i'')) \\<in> carrier (BijGroup X)\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) x \\<in> X", "using \\<open>x\\<in>X\\<close>"], ["proof (prove)\nusing this:\n  act (G.lift_gi g (b'', i'')) \\<in> carrier (BijGroup X)\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. act (G.lift_gi g (b'', i'')) x \\<in> X", "by (auto simp add:BijGroup_def Bij_def bij_betw_def)"], ["proof (state)\nthis:\n  act (G.lift_gi g (b'', i'')) x \\<in> X\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w) \\<and>\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)\n  act (G.lift_gi g (b'', i'')) x \\<in> X", "have ?thesis"], ["proof (prove)\nusing this:\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w) \\<and>\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)\n  act (G.lift_gi g (b'', i'')) x \\<in> X\n\ngoal (1 subgoal):\n 1. thesis", "using that[of ?x]"], ["proof (prove)\nusing this:\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w) \\<and>\n  act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)\n  act (G.lift_gi g (b'', i'')) x \\<in> X\n  \\<lbrakk>act (G.lift_gi g (b'', i'')) x \\<in> X;\n   w = [] \\<or> act (G.lift_gi g (b'', i'')) x \\<notin> Xout' (last w);\n   w = [] \\<or> act (G.lift_gi g (b'', i'')) x \\<notin> Xin' (hd w)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  x \\<in> Xin' (hd w) \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  x \\<in> Xin' (hd w) \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note calculation"], ["proof (state)\nthis:\n  x \\<in> Xout' (last w) \\<Longrightarrow> thesis\n  x \\<in> Xin' (hd w) \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  \\<lbrakk>I \\<noteq> {}; card I \\<noteq> 1; w \\<noteq> [];\n   x \\<in> Xout' (last w)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>I \\<noteq> {}; card I \\<noteq> 1; w \\<noteq> [];\n   x \\<in> Xin' (hd w)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; w = [] \\<or> x \\<notin> Xout' (last w);\n         w = [] \\<or> x \\<notin> Xin' (hd w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  I = {} \\<Longrightarrow> thesis\n  \\<lbrakk>card I = 1; w \\<noteq> []\\<rbrakk> \\<Longrightarrow> thesis\n  \\<lbrakk>I \\<noteq> {}; card I \\<noteq> 1; w \\<noteq> [];\n   x \\<in> Xout' (last w)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>I \\<noteq> {}; card I \\<noteq> 1; w \\<noteq> [];\n   x \\<in> Xin' (hd w)\\<rbrakk>\n  \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  I = {} \\<Longrightarrow> thesis\n  \\<lbrakk>card I = 1; w \\<noteq> []\\<rbrakk> \\<Longrightarrow> thesis\n  \\<lbrakk>I \\<noteq> {}; card I \\<noteq> 1; w \\<noteq> [];\n   x \\<in> Xout' (last w)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>I \\<noteq> {}; card I \\<noteq> 1; w \\<noteq> [];\n   x \\<in> Xin' (hd w)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "using \\<open>x\\<in> X\\<close> that"], ["proof (prove)\nusing this:\n  I = {} \\<Longrightarrow> thesis\n  \\<lbrakk>card I = 1; w \\<noteq> []\\<rbrakk> \\<Longrightarrow> thesis\n  \\<lbrakk>I \\<noteq> {}; card I \\<noteq> 1; w \\<noteq> [];\n   x \\<in> Xout' (last w)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>I \\<noteq> {}; card I \\<noteq> 1; w \\<noteq> [];\n   x \\<in> Xin' (hd w)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  x \\<in> X\n  \\<lbrakk>?x1 \\<in> X; w = [] \\<or> ?x1 \\<notin> Xout' (last w);\n   w = [] \\<or> ?x1 \\<notin> Xin' (hd w)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> X\n  w = [] \\<or> x \\<notin> Xout' (last w)\n  w = [] \\<or> x \\<notin> Xin' (hd w)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>I\\<^esub>;\n        G.lift g x = \\<one>\\<^bsub>G\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "txt \\<open>The proof works by induction over the length of the word. Each\n         inductive step is one ping as in ping pong. At the end, we land in one\n         of the subsets of X, so the word cannot be the identity.\\<close>"], ["proof (state)\nthis:\n  x \\<in> X\n  w = [] \\<or> x \\<notin> Xout' (last w)\n  w = [] \\<or> x \\<notin> Xin' (hd w)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>I\\<^esub>;\n        G.lift g x = \\<one>\\<^bsub>G\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "from x1 and w"], ["proof (chain)\npicking this:\n  w = [] \\<or> x \\<notin> Xout' (last w)\n  w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>", "have \"w = [] \\<or> act (G.lift g w) x \\<in> Xin' (hd w)\""], ["proof (prove)\nusing this:\n  w = [] \\<or> x \\<notin> Xout' (last w)\n  w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (1 subgoal):\n 1. w = [] \\<or> act (G.lift g w) x \\<in> Xin' (hd w)", "proof(induct w)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>[] = [] \\<or> x \\<notin> Xout' (last []);\n     [] \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> [] = [] \\<or> act (G.lift g []) x \\<in> Xin' (hd [])\n 2. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "case Nil"], ["proof (state)\nthis:\n  [] = [] \\<or> x \\<notin> Xout' (last [])\n  [] \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>[] = [] \\<or> x \\<notin> Xout' (last []);\n     [] \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> [] = [] \\<or> act (G.lift g []) x \\<in> Xin' (hd [])\n 2. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. [] = [] \\<or> act (G.lift g []) x \\<in> Xin' (hd [])", "by simp"], ["proof (state)\nthis:\n  [] = [] \\<or> act (G.lift g []) x \\<in> Xin' (hd [])\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "case (Cons w ws)"], ["proof (state)\nthis:\n  \\<lbrakk>ws = [] \\<or> x \\<notin> Xout' (last ws);\n   ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ws = [] \\<or> act (G.lift g ws) x \\<in> Xin' (hd ws)\n  w # ws = [] \\<or> x \\<notin> Xout' (last (w # ws))\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "note C = Cons"], ["proof (state)\nthis:\n  \\<lbrakk>ws = [] \\<or> x \\<notin> Xout' (last ws);\n   ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ws = [] \\<or> act (G.lift g ws) x \\<in> Xin' (hd ws)\n  w # ws = [] \\<or> x \\<notin> Xout' (last (w # ws))\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "txt \\<open>The following lemmas establish all ``obvious'' element relations that will be required during the proof.\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>ws = [] \\<or> x \\<notin> Xout' (last ws);\n   ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ws = [] \\<or> act (G.lift g ws) x \\<in> Xin' (hd ws)\n  w # ws = [] \\<or> x \\<notin> Xout' (last (w # ws))\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "note calculation = Cons(3)"], ["proof (state)\nthis:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "moreover"], ["proof (state)\nthis:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "have \"x\\<in>X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> X", "by fact"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "moreover"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "have \"snd w \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd w \\<in> I", "using calculation"], ["proof (prove)\nusing this:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. snd w \\<in> I", "by (auto simp add:free_group_def)"], ["proof (state)\nthis:\n  snd w \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "moreover"], ["proof (state)\nthis:\n  snd w \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "have \"g \\<in> (I \\<rightarrow> carrier G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> I \\<rightarrow> carrier G", "by fact"], ["proof (state)\nthis:\n  g \\<in> I \\<rightarrow> carrier G\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "moreover"], ["proof (state)\nthis:\n  g \\<in> I \\<rightarrow> carrier G\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "have \"g (snd w) \\<in> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g (snd w) \\<in> carrier G", "using calculation"], ["proof (prove)\nusing this:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n\ngoal (1 subgoal):\n 1. g (snd w) \\<in> carrier G", "by auto"], ["proof (state)\nthis:\n  g (snd w) \\<in> carrier G\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "moreover"], ["proof (state)\nthis:\n  g (snd w) \\<in> carrier G\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "have \"ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>", "using calculation"], ["proof (prove)\nusing this:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n\ngoal (1 subgoal):\n 1. ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>", "by (auto intro:cons_canceled simp add:free_group_def)"], ["proof (state)\nthis:\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "moreover"], ["proof (state)\nthis:\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "have \"G.lift g ws \\<in> carrier G\" and \"G.lift g [w] \\<in> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.lift g ws \\<in> carrier G &&& G.lift g [w] \\<in> carrier G", "using calculation"], ["proof (prove)\nusing this:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (1 subgoal):\n 1. G.lift g ws \\<in> carrier G &&& G.lift g [w] \\<in> carrier G", "by (auto simp add: free_group_def)"], ["proof (state)\nthis:\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "moreover"], ["proof (state)\nthis:\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "have \"act (G.lift g ws) \\<in> carrier (BijGroup X)\"\n                     and \"act (G.lift g [w]) \\<in> carrier (BijGroup X)\"\n                     and \"act (G.lift g (w#ws)) \\<in> carrier (BijGroup X)\"\n                     and \"act (g (snd w)) \\<in> carrier (BijGroup X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (act (G.lift g ws) \\<in> carrier (BijGroup X) &&&\n     act (G.lift g [w]) \\<in> carrier (BijGroup X)) &&&\n    act (G.lift g (w # ws)) \\<in> carrier (BijGroup X) &&&\n    act (g (snd w)) \\<in> carrier (BijGroup X)", "using calculation"], ["proof (prove)\nusing this:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n\ngoal (1 subgoal):\n 1. (act (G.lift g ws) \\<in> carrier (BijGroup X) &&&\n     act (G.lift g [w]) \\<in> carrier (BijGroup X)) &&&\n    act (G.lift g (w # ws)) \\<in> carrier (BijGroup X) &&&\n    act (g (snd w)) \\<in> carrier (BijGroup X)", "by auto"], ["proof (state)\nthis:\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "moreover"], ["proof (state)\nthis:\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "have \"act (g (snd w)) \\<in> Bij X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. act (g (snd w)) \\<in> Bij X", "using calculation"], ["proof (prove)\nusing this:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n\ngoal (1 subgoal):\n 1. act (g (snd w)) \\<in> Bij X", "by (auto simp add:BijGroup_def)"], ["proof (state)\nthis:\n  act (g (snd w)) \\<in> Bij X\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "moreover"], ["proof (state)\nthis:\n  act (g (snd w)) \\<in> Bij X\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "have \"act (G.lift g ws) x \\<in> X\" (is \"?x2 \\<in> X\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. act (G.lift g ws) x \\<in> X", "using calculation"], ["proof (prove)\nusing this:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> Bij X\n\ngoal (1 subgoal):\n 1. act (G.lift g ws) x \\<in> X", "by (auto simp add:BijGroup_def Bij_def bij_betw_def)"], ["proof (state)\nthis:\n  act (G.lift g ws) x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "moreover"], ["proof (state)\nthis:\n  act (G.lift g ws) x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "have \"act (G.lift g [w]) ?x2 \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X", "using calculation"], ["proof (prove)\nusing this:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> Bij X\n  act (G.lift g ws) x \\<in> X\n\ngoal (1 subgoal):\n 1. act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X", "by (auto simp add:BijGroup_def Bij_def bij_betw_def)"], ["proof (state)\nthis:\n  act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "moreover"], ["proof (state)\nthis:\n  act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "have \"act (G.lift g (w#ws)) x \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x \\<in> X", "using calculation"], ["proof (prove)\nusing this:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> Bij X\n  act (G.lift g ws) x \\<in> X\n  act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X\n\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x \\<in> X", "by (auto simp add:BijGroup_def Bij_def bij_betw_def)"], ["proof (state)\nthis:\n  act (G.lift g (w # ws)) x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "moreover"], ["proof (state)\nthis:\n  act (G.lift g (w # ws)) x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "note mems = calculation"], ["proof (state)\nthis:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> Bij X\n  act (G.lift g ws) x \\<in> X\n  act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X\n  act (G.lift g (w # ws)) x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "have \"act (G.lift g ws) x \\<notin> Xout' w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. act (G.lift g ws) x \\<notin> Xout' w", "proof(cases ws)"], ["proof (state)\ngoal (2 subgoals):\n 1. ws = [] \\<Longrightarrow> act (G.lift g ws) x \\<notin> Xout' w\n 2. \\<And>a list.\n       ws = a # list \\<Longrightarrow> act (G.lift g ws) x \\<notin> Xout' w", "case Nil"], ["proof (state)\nthis:\n  ws = []\n\ngoal (2 subgoals):\n 1. ws = [] \\<Longrightarrow> act (G.lift g ws) x \\<notin> Xout' w\n 2. \\<And>a list.\n       ws = a # list \\<Longrightarrow> act (G.lift g ws) x \\<notin> Xout' w", "moreover"], ["proof (state)\nthis:\n  ws = []\n\ngoal (2 subgoals):\n 1. ws = [] \\<Longrightarrow> act (G.lift g ws) x \\<notin> Xout' w\n 2. \\<And>a list.\n       ws = a # list \\<Longrightarrow> act (G.lift g ws) x \\<notin> Xout' w", "have \"x \\<notin> Xout' w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> Xout' w", "using Cons(2) Nil"], ["proof (prove)\nusing this:\n  w # ws = [] \\<or> x \\<notin> Xout' (last (w # ws))\n  ws = []\n\ngoal (1 subgoal):\n 1. x \\<notin> Xout' w", "unfolding Xout'_def"], ["proof (prove)\nusing this:\n  w # ws = [] \\<or>\n  x \\<notin> (case last (w # ws) of\n              (b, i) \\<Rightarrow> if b then Xin i else Xout i)\n  ws = []\n\ngoal (1 subgoal):\n 1. x \\<notin> (case w of (b, i) \\<Rightarrow> if b then Xin i else Xout i)", "using mems"], ["proof (prove)\nusing this:\n  w # ws = [] \\<or>\n  x \\<notin> (case last (w # ws) of\n              (b, i) \\<Rightarrow> if b then Xin i else Xout i)\n  ws = []\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> Bij X\n  act (G.lift g ws) x \\<in> X\n  act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X\n  act (G.lift g (w # ws)) x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<notin> (case w of (b, i) \\<Rightarrow> if b then Xin i else Xout i)", "by (auto split:if_splits)"], ["proof (state)\nthis:\n  x \\<notin> Xout' w\n\ngoal (2 subgoals):\n 1. ws = [] \\<Longrightarrow> act (G.lift g ws) x \\<notin> Xout' w\n 2. \\<And>a list.\n       ws = a # list \\<Longrightarrow> act (G.lift g ws) x \\<notin> Xout' w", "ultimately"], ["proof (chain)\npicking this:\n  ws = []\n  x \\<notin> Xout' w", "show \"act (G.lift g ws) x \\<notin> Xout' w\""], ["proof (prove)\nusing this:\n  ws = []\n  x \\<notin> Xout' w\n\ngoal (1 subgoal):\n 1. act (G.lift g ws) x \\<notin> Xout' w", "using mems"], ["proof (prove)\nusing this:\n  ws = []\n  x \\<notin> Xout' w\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> Bij X\n  act (G.lift g ws) x \\<in> X\n  act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X\n  act (G.lift g (w # ws)) x \\<in> X\n\ngoal (1 subgoal):\n 1. act (G.lift g ws) x \\<notin> Xout' w", "by auto"], ["proof (state)\nthis:\n  act (G.lift g ws) x \\<notin> Xout' w\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ws = a # list \\<Longrightarrow> act (G.lift g ws) x \\<notin> Xout' w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ws = a # list \\<Longrightarrow> act (G.lift g ws) x \\<notin> Xout' w", "case (Cons ww wws)"], ["proof (state)\nthis:\n  ws = ww # wws\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ws = a # list \\<Longrightarrow> act (G.lift g ws) x \\<notin> Xout' w", "hence \"act (G.lift g ws) x \\<in> Xin' (hd ws)\""], ["proof (prove)\nusing this:\n  ws = ww # wws\n\ngoal (1 subgoal):\n 1. act (G.lift g ws) x \\<in> Xin' (hd ws)", "using C mems"], ["proof (prove)\nusing this:\n  ws = ww # wws\n  \\<lbrakk>ws = [] \\<or> x \\<notin> Xout' (last ws);\n   ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ws = [] \\<or> act (G.lift g ws) x \\<in> Xin' (hd ws)\n  w # ws = [] \\<or> x \\<notin> Xout' (last (w # ws))\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> Bij X\n  act (G.lift g ws) x \\<in> X\n  act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X\n  act (G.lift g (w # ws)) x \\<in> X\n\ngoal (1 subgoal):\n 1. act (G.lift g ws) x \\<in> Xin' (hd ws)", "by simp"], ["proof (state)\nthis:\n  act (G.lift g ws) x \\<in> Xin' (hd ws)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ws = a # list \\<Longrightarrow> act (G.lift g ws) x \\<notin> Xout' w", "moreover"], ["proof (state)\nthis:\n  act (G.lift g ws) x \\<in> Xin' (hd ws)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ws = a # list \\<Longrightarrow> act (G.lift g ws) x \\<notin> Xout' w", "have \"Xin' (hd ws) \\<inter> Xout' w = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Xin' (hd ws) \\<inter> Xout' w = {}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Xin' (hd ws) \\<inter> Xout' w = {}", "have \"\\<not> canceling (hd ws) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> canceling (hd ws) w", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. canceling (hd ws) w \\<Longrightarrow> False", "assume \"canceling (hd ws) w\""], ["proof (state)\nthis:\n  canceling (hd ws) w\n\ngoal (1 subgoal):\n 1. canceling (hd ws) w \\<Longrightarrow> False", "hence \"cancels_to_1 (w#ws) wws\""], ["proof (prove)\nusing this:\n  canceling (hd ws) w\n\ngoal (1 subgoal):\n 1. cancels_to_1 (w # ws) wws", "using Cons"], ["proof (prove)\nusing this:\n  canceling (hd ws) w\n  ws = ww # wws\n\ngoal (1 subgoal):\n 1. cancels_to_1 (w # ws) wws", "by(auto simp add:cancel_sym cancels_to_1_def cancels_to_1_at_def cancel_at_def)"], ["proof (state)\nthis:\n  cancels_to_1 (w # ws) wws\n\ngoal (1 subgoal):\n 1. canceling (hd ws) w \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  cancels_to_1 (w # ws) wws\n\ngoal (1 subgoal):\n 1. False", "using \\<open>w#ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  cancels_to_1 (w # ws) wws\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (1 subgoal):\n 1. False", "by(auto simp add:free_group_def canceled_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> canceling (hd ws) w\n\ngoal (1 subgoal):\n 1. Xin' (hd ws) \\<inter> Xout' w = {}", "have \"w \\<in> UNIV \\<times> I\" \"hd ws \\<in> UNIV \\<times> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<in> UNIV \\<times> I &&& hd ws \\<in> UNIV \\<times> I", "using \\<open>snd w \\<in> I\\<close> mems Cons"], ["proof (prove)\nusing this:\n  snd w \\<in> I\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> Bij X\n  act (G.lift g ws) x \\<in> X\n  act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X\n  act (G.lift g (w # ws)) x \\<in> X\n  ws = ww # wws\n\ngoal (1 subgoal):\n 1. w \\<in> UNIV \\<times> I &&& hd ws \\<in> UNIV \\<times> I", "by (cases w, auto, cases \"hd ws\", auto simp add:free_group_def)"], ["proof (state)\nthis:\n  w \\<in> UNIV \\<times> I\n  hd ws \\<in> UNIV \\<times> I\n\ngoal (1 subgoal):\n 1. Xin' (hd ws) \\<inter> Xout' w = {}", "thus ?thesis"], ["proof (prove)\nusing this:\n  w \\<in> UNIV \\<times> I\n  hd ws \\<in> UNIV \\<times> I\n\ngoal (1 subgoal):\n 1. Xin' (hd ws) \\<inter> Xout' w = {}", "by- (rule disj3'[rule_format, OF _ _ \\<open>\\<not> canceling (hd ws) w\\<close>], auto)"], ["proof (state)\nthis:\n  Xin' (hd ws) \\<inter> Xout' w = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Xin' (hd ws) \\<inter> Xout' w = {}\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ws = a # list \\<Longrightarrow> act (G.lift g ws) x \\<notin> Xout' w", "ultimately"], ["proof (chain)\npicking this:\n  act (G.lift g ws) x \\<in> Xin' (hd ws)\n  Xin' (hd ws) \\<inter> Xout' w = {}", "show \"act (G.lift g ws) x \\<notin> Xout' w\""], ["proof (prove)\nusing this:\n  act (G.lift g ws) x \\<in> Xin' (hd ws)\n  Xin' (hd ws) \\<inter> Xout' w = {}\n\ngoal (1 subgoal):\n 1. act (G.lift g ws) x \\<notin> Xout' w", "using Cons"], ["proof (prove)\nusing this:\n  act (G.lift g ws) x \\<in> Xin' (hd ws)\n  Xin' (hd ws) \\<inter> Xout' w = {}\n  ws = ww # wws\n\ngoal (1 subgoal):\n 1. act (G.lift g ws) x \\<notin> Xout' w", "by auto"], ["proof (state)\nthis:\n  act (G.lift g ws) x \\<notin> Xout' w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  act (G.lift g ws) x \\<notin> Xout' w\n\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<lbrakk>\\<lbrakk>w = [] \\<or> x \\<notin> Xout' (last w);\n                 w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> w = [] \\<or>\n                                  act (G.lift g w) x \\<in> Xin' (hd w);\n        a # w = [] \\<or> x \\<notin> Xout' (last (a # w));\n        a # w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # w = [] \\<or>\n                         act (G.lift g (a # w)) x \\<in> Xin' (hd (a # w))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. w # ws = [] \\<or> act (G.lift g (w # ws)) x \\<in> Xin' (hd (w # ws))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. w # ws = [] \\<or> act (G.lift g (w # ws)) x \\<in> Xin' (hd (w # ws))", "have \"act (G.lift g (w # ws)) x = act (G.lift g ([w] @ ws)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x = act (G.lift g ([w] @ ws)) x", "by simp"], ["proof (state)\nthis:\n  act (G.lift g (w # ws)) x = act (G.lift g ([w] @ ws)) x\n\ngoal (1 subgoal):\n 1. w # ws = [] \\<or> act (G.lift g (w # ws)) x \\<in> Xin' (hd (w # ws))", "also"], ["proof (state)\nthis:\n  act (G.lift g (w # ws)) x = act (G.lift g ([w] @ ws)) x\n\ngoal (1 subgoal):\n 1. w # ws = [] \\<or> act (G.lift g (w # ws)) x \\<in> Xin' (hd (w # ws))", "have \"\\<dots> = act (G.lift g [w] \\<otimes>\\<^bsub>G\\<^esub> G.lift g ws) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. act (G.lift g ([w] @ ws)) x =\n    act (G.lift g [w] \\<otimes>\\<^bsub>G\\<^esub> G.lift g ws) x", "using mems"], ["proof (prove)\nusing this:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> Bij X\n  act (G.lift g ws) x \\<in> X\n  act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X\n  act (G.lift g (w # ws)) x \\<in> X\n\ngoal (1 subgoal):\n 1. act (G.lift g ([w] @ ws)) x =\n    act (G.lift g [w] \\<otimes>\\<^bsub>G\\<^esub> G.lift g ws) x", "by (subst G.lift_append, auto simp add:free_group_def)"], ["proof (state)\nthis:\n  act (G.lift g ([w] @ ws)) x =\n  act (G.lift g [w] \\<otimes>\\<^bsub>G\\<^esub> G.lift g ws) x\n\ngoal (1 subgoal):\n 1. w # ws = [] \\<or> act (G.lift g (w # ws)) x \\<in> Xin' (hd (w # ws))", "also"], ["proof (state)\nthis:\n  act (G.lift g ([w] @ ws)) x =\n  act (G.lift g [w] \\<otimes>\\<^bsub>G\\<^esub> G.lift g ws) x\n\ngoal (1 subgoal):\n 1. w # ws = [] \\<or> act (G.lift g (w # ws)) x \\<in> Xin' (hd (w # ws))", "have \"\\<dots> = (act (G.lift g [w]) \\<otimes>\\<^bsub>BijGroup X\\<^esub> act (G.lift g ws)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. act (G.lift g [w] \\<otimes>\\<^bsub>G\\<^esub> G.lift g ws) x =\n    (act (G.lift g [w]) \\<otimes>\\<^bsub>BijGroup X\\<^esub>\n     act (G.lift g ws))\n     x", "using mems"], ["proof (prove)\nusing this:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> Bij X\n  act (G.lift g ws) x \\<in> X\n  act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X\n  act (G.lift g (w # ws)) x \\<in> X\n\ngoal (1 subgoal):\n 1. act (G.lift g [w] \\<otimes>\\<^bsub>G\\<^esub> G.lift g ws) x =\n    (act (G.lift g [w]) \\<otimes>\\<^bsub>BijGroup X\\<^esub>\n     act (G.lift g ws))\n     x", "by (auto simp add:act.hom_mult free_group_def intro!:G.lift_closed)"], ["proof (state)\nthis:\n  act (G.lift g [w] \\<otimes>\\<^bsub>G\\<^esub> G.lift g ws) x =\n  (act (G.lift g [w]) \\<otimes>\\<^bsub>BijGroup X\\<^esub> act (G.lift g ws))\n   x\n\ngoal (1 subgoal):\n 1. w # ws = [] \\<or> act (G.lift g (w # ws)) x \\<in> Xin' (hd (w # ws))", "also"], ["proof (state)\nthis:\n  act (G.lift g [w] \\<otimes>\\<^bsub>G\\<^esub> G.lift g ws) x =\n  (act (G.lift g [w]) \\<otimes>\\<^bsub>BijGroup X\\<^esub> act (G.lift g ws))\n   x\n\ngoal (1 subgoal):\n 1. w # ws = [] \\<or> act (G.lift g (w # ws)) x \\<in> Xin' (hd (w # ws))", "have \"\\<dots> = act (G.lift g [w]) (act (G.lift g ws) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (act (G.lift g [w]) \\<otimes>\\<^bsub>BijGroup X\\<^esub>\n     act (G.lift g ws))\n     x =\n    act (G.lift g [w]) (act (G.lift g ws) x)", "using mems"], ["proof (prove)\nusing this:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> Bij X\n  act (G.lift g ws) x \\<in> X\n  act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X\n  act (G.lift g (w # ws)) x \\<in> X\n\ngoal (1 subgoal):\n 1. (act (G.lift g [w]) \\<otimes>\\<^bsub>BijGroup X\\<^esub>\n     act (G.lift g ws))\n     x =\n    act (G.lift g [w]) (act (G.lift g ws) x)", "by (auto simp add:BijGroup_def compose_def)"], ["proof (state)\nthis:\n  (act (G.lift g [w]) \\<otimes>\\<^bsub>BijGroup X\\<^esub> act (G.lift g ws))\n   x =\n  act (G.lift g [w]) (act (G.lift g ws) x)\n\ngoal (1 subgoal):\n 1. w # ws = [] \\<or> act (G.lift g (w # ws)) x \\<in> Xin' (hd (w # ws))", "also"], ["proof (state)\nthis:\n  (act (G.lift g [w]) \\<otimes>\\<^bsub>BijGroup X\\<^esub> act (G.lift g ws))\n   x =\n  act (G.lift g [w]) (act (G.lift g ws) x)\n\ngoal (1 subgoal):\n 1. w # ws = [] \\<or> act (G.lift g (w # ws)) x \\<in> Xin' (hd (w # ws))", "have \"\\<dots> \\<notin> act (G.lift g [w]) ` Xout' w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. act (G.lift g [w]) (act (G.lift g ws) x)\n    \\<notin> act (G.lift g [w]) ` Xout' w", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> act (G.lift g [w]) (act (G.lift g ws) x)\n           \\<notin> act (G.lift g [w]) ` Xout' w \\<Longrightarrow>\n    False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. act (G.lift g [w]) (act (G.lift g ws) x)\n    \\<in> act (G.lift g [w]) ` Xout' w \\<Longrightarrow>\n    False", "apply (erule imageE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>act (G.lift g [w]) (act (G.lift g ws) x) =\n                act (G.lift g [w]) x;\n        x \\<in> Xout' w\\<rbrakk>\n       \\<Longrightarrow> False", "apply (subst (asm) inj_on_eq_iff[of \"act (G.lift g [w])\" \"X\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x. x \\<in> Xout' w \\<Longrightarrow> inj_on (act (G.lift g [w])) X\n 2. \\<And>x. x \\<in> Xout' w \\<Longrightarrow> act (G.lift g ws) x \\<in> X\n 3. \\<And>x. x \\<in> Xout' w \\<Longrightarrow> x \\<in> X\n 4. \\<And>x.\n       \\<lbrakk>act (G.lift g ws) x = x; x \\<in> Xout' w\\<rbrakk>\n       \\<Longrightarrow> False", "using mems \\<open>act (G.lift g ws) x \\<notin> Xout' w\\<close> \\<open>\\<forall>i\\<in>I. Xout i \\<subseteq> X\\<close> \\<open>\\<forall>i\\<in>I. Xin i \\<subseteq> X\\<close>"], ["proof (prove)\nusing this:\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> Bij X\n  act (G.lift g ws) x \\<in> X\n  act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X\n  act (G.lift g (w # ws)) x \\<in> X\n  act (G.lift g ws) x \\<notin> Xout' w\n  \\<forall>i\\<in>I. Xout i \\<subseteq> X\n  \\<forall>i\\<in>I. Xin i \\<subseteq> X\n\ngoal (4 subgoals):\n 1. \\<And>x. x \\<in> Xout' w \\<Longrightarrow> inj_on (act (G.lift g [w])) X\n 2. \\<And>x. x \\<in> Xout' w \\<Longrightarrow> act (G.lift g ws) x \\<in> X\n 3. \\<And>x. x \\<in> Xout' w \\<Longrightarrow> x \\<in> X\n 4. \\<And>x.\n       \\<lbrakk>act (G.lift g ws) x = x; x \\<in> Xout' w\\<rbrakk>\n       \\<Longrightarrow> False", "apply (auto simp add:BijGroup_def Bij_def bij_betw_def free_group_def Xout'_def split:if_splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xaa y.\n       \\<lbrakk>\\<forall>i\\<in>I. Xout i \\<subseteq> X;\n        \\<forall>i\\<in>I. Xin i \\<subseteq> X; x \\<in> Xin y; w = (True, y);\n        act (G.lift g ws) \\<in> extensional X;\n        act (G.lift g [(True, y)]) \\<in> extensional X;\n        act (G.lift g ((True, y) # ws)) \\<in> extensional X;\n        act (g y) \\<in> extensional X; canceled ((True, y) # ws);\n        \\<forall>x\\<in>set ws. x \\<in> UNIV \\<times> I; y \\<in> I;\n        inj_on (act (G.lift g ws)) X; act (G.lift g ws) ` X = X;\n        inj_on (act (G.lift g [(True, y)])) X;\n        act (G.lift g [(True, y)]) ` X = X;\n        inj_on (act (G.lift g ((True, y) # ws))) X;\n        act (G.lift g ((True, y) # ws)) ` X = X; inj_on (act (g y)) X;\n        act (g y) ` X = X; x \\<in> X; g \\<in> I \\<rightarrow> carrier G;\n        g y \\<in> carrier G; canceled ws; act (G.lift g ws) x \\<in> X;\n        act (G.lift g [(True, y)]) (act (G.lift g ws) x) \\<in> X;\n        act (G.lift g ((True, y) # ws)) x \\<in> X; xaa;\n        act (G.lift g ws) x \\<notin> Xin y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 2. \\<And>x xaa y.\n       \\<lbrakk>\\<forall>i\\<in>I. Xout i \\<subseteq> X;\n        \\<forall>i\\<in>I. Xin i \\<subseteq> X; x \\<in> Xout y;\n        w = (False, y); act (G.lift g ws) \\<in> extensional X;\n        act (G.lift g [(False, y)]) \\<in> extensional X;\n        act (G.lift g ((False, y) # ws)) \\<in> extensional X;\n        act (g y) \\<in> extensional X; canceled ((False, y) # ws);\n        \\<forall>x\\<in>set ws. x \\<in> UNIV \\<times> I; y \\<in> I;\n        inj_on (act (G.lift g ws)) X; act (G.lift g ws) ` X = X;\n        inj_on (act (G.lift g [(False, y)])) X;\n        act (G.lift g [(False, y)]) ` X = X;\n        inj_on (act (G.lift g ((False, y) # ws))) X;\n        act (G.lift g ((False, y) # ws)) ` X = X; inj_on (act (g y)) X;\n        act (g y) ` X = X; x \\<in> X; g \\<in> I \\<rightarrow> carrier G;\n        g y \\<in> carrier G; canceled ws; act (G.lift g ws) x \\<in> X;\n        act (G.lift g [(False, y)]) (act (G.lift g ws) x) \\<in> X;\n        act (G.lift g ((False, y) # ws)) x \\<in> X; \\<not> xaa;\n        act (G.lift g ws) x \\<notin> Xout y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  act (G.lift g [w]) (act (G.lift g ws) x)\n  \\<notin> act (G.lift g [w]) ` Xout' w\n\ngoal (1 subgoal):\n 1. w # ws = [] \\<or> act (G.lift g (w # ws)) x \\<in> Xin' (hd (w # ws))", "finally"], ["proof (chain)\npicking this:\n  act (G.lift g (w # ws)) x \\<notin> act (G.lift g [w]) ` Xout' w", "have \"act (G.lift g (w # ws)) x \\<in> Xin' w\""], ["proof (prove)\nusing this:\n  act (G.lift g (w # ws)) x \\<notin> act (G.lift g [w]) ` Xout' w\n\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x \\<in> Xin' w", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x\n    \\<notin> act (G.lift g [w]) ` Xout' w \\<Longrightarrow>\n    act (G.lift g (w # ws)) x \\<in> Xin' w", "assume \"act (G.lift g (w # ws)) x \\<notin> act (G.lift g [w]) ` Xout' w\""], ["proof (state)\nthis:\n  act (G.lift g (w # ws)) x \\<notin> act (G.lift g [w]) ` Xout' w\n\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x\n    \\<notin> act (G.lift g [w]) ` Xout' w \\<Longrightarrow>\n    act (G.lift g (w # ws)) x \\<in> Xin' w", "hence \"act (G.lift g (w # ws)) x \\<in> (X - act (G.lift g [w]) ` Xout' w)\""], ["proof (prove)\nusing this:\n  act (G.lift g (w # ws)) x \\<notin> act (G.lift g [w]) ` Xout' w\n\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x \\<in> X - act (G.lift g [w]) ` Xout' w", "using mems"], ["proof (prove)\nusing this:\n  act (G.lift g (w # ws)) x \\<notin> act (G.lift g [w]) ` Xout' w\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> Bij X\n  act (G.lift g ws) x \\<in> X\n  act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X\n  act (G.lift g (w # ws)) x \\<in> X\n\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x \\<in> X - act (G.lift g [w]) ` Xout' w", "by auto"], ["proof (state)\nthis:\n  act (G.lift g (w # ws)) x \\<in> X - act (G.lift g [w]) ` Xout' w\n\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x\n    \\<notin> act (G.lift g [w]) ` Xout' w \\<Longrightarrow>\n    act (G.lift g (w # ws)) x \\<in> Xin' w", "also"], ["proof (state)\nthis:\n  act (G.lift g (w # ws)) x \\<in> X - act (G.lift g [w]) ` Xout' w\n\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x\n    \\<notin> act (G.lift g [w]) ` Xout' w \\<Longrightarrow>\n    act (G.lift g (w # ws)) x \\<in> Xin' w", "have \"\\<dots> \\<subseteq> act (G.lift g [w]) ` X - act (G.lift g [w]) ` Xout' w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X - act (G.lift g [w]) ` Xout' w\n    \\<subseteq> act (G.lift g [w]) ` X - act (G.lift g [w]) ` Xout' w", "using \\<open>act (G.lift g [w]) \\<in> carrier (BijGroup X)\\<close>"], ["proof (prove)\nusing this:\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n\ngoal (1 subgoal):\n 1. X - act (G.lift g [w]) ` Xout' w\n    \\<subseteq> act (G.lift g [w]) ` X - act (G.lift g [w]) ` Xout' w", "by (auto simp add:BijGroup_def Bij_def bij_betw_def)"], ["proof (state)\nthis:\n  X - act (G.lift g [w]) ` Xout' w\n  \\<subseteq> act (G.lift g [w]) ` X - act (G.lift g [w]) ` Xout' w\n\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x\n    \\<notin> act (G.lift g [w]) ` Xout' w \\<Longrightarrow>\n    act (G.lift g (w # ws)) x \\<in> Xin' w", "also"], ["proof (state)\nthis:\n  X - act (G.lift g [w]) ` Xout' w\n  \\<subseteq> act (G.lift g [w]) ` X - act (G.lift g [w]) ` Xout' w\n\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x\n    \\<notin> act (G.lift g [w]) ` Xout' w \\<Longrightarrow>\n    act (G.lift g (w # ws)) x \\<in> Xin' w", "have \"\\<dots> \\<subseteq> act (G.lift g [w]) ` (X - Xout' w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. act (G.lift g [w]) ` X - act (G.lift g [w]) ` Xout' w\n    \\<subseteq> act (G.lift g [w]) ` (X - Xout' w)", "by (rule image_diff_subset)"], ["proof (state)\nthis:\n  act (G.lift g [w]) ` X - act (G.lift g [w]) ` Xout' w\n  \\<subseteq> act (G.lift g [w]) ` (X - Xout' w)\n\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x\n    \\<notin> act (G.lift g [w]) ` Xout' w \\<Longrightarrow>\n    act (G.lift g (w # ws)) x \\<in> Xin' w", "also"], ["proof (state)\nthis:\n  act (G.lift g [w]) ` X - act (G.lift g [w]) ` Xout' w\n  \\<subseteq> act (G.lift g [w]) ` (X - Xout' w)\n\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x\n    \\<notin> act (G.lift g [w]) ` Xout' w \\<Longrightarrow>\n    act (G.lift g (w # ws)) x \\<in> Xin' w", "have \"... \\<subseteq> Xin' w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. act (G.lift g [w]) ` (X - Xout' w) \\<subseteq> Xin' w", "proof(cases \"fst w\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fst w \\<Longrightarrow>\n    act (G.lift g [w]) ` (X - Xout' w) \\<subseteq> Xin' w\n 2. \\<not> fst w \\<Longrightarrow>\n    act (G.lift g [w]) ` (X - Xout' w) \\<subseteq> Xin' w", "assume \"\\<not> fst w\""], ["proof (state)\nthis:\n  \\<not> fst w\n\ngoal (2 subgoals):\n 1. fst w \\<Longrightarrow>\n    act (G.lift g [w]) ` (X - Xout' w) \\<subseteq> Xin' w\n 2. \\<not> fst w \\<Longrightarrow>\n    act (G.lift g [w]) ` (X - Xout' w) \\<subseteq> Xin' w", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> fst w\n\ngoal (1 subgoal):\n 1. act (G.lift g [w]) ` (X - Xout' w) \\<subseteq> Xin' w", "using mems"], ["proof (prove)\nusing this:\n  \\<not> fst w\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> Bij X\n  act (G.lift g ws) x \\<in> X\n  act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X\n  act (G.lift g (w # ws)) x \\<in> X\n\ngoal (1 subgoal):\n 1. act (G.lift g [w]) ` (X - Xout' w) \\<subseteq> Xin' w", "by (auto intro!: ping[rule_format, THEN subsetD] simp add: Xout'_def Xin'_def G.lift_def G.lift_gi_def free_group_def)"], ["proof (state)\nthis:\n  act (G.lift g [w]) ` (X - Xout' w) \\<subseteq> Xin' w\n\ngoal (1 subgoal):\n 1. fst w \\<Longrightarrow>\n    act (G.lift g [w]) ` (X - Xout' w) \\<subseteq> Xin' w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. fst w \\<Longrightarrow>\n    act (G.lift g [w]) ` (X - Xout' w) \\<subseteq> Xin' w", "assume \"fst w\""], ["proof (state)\nthis:\n  fst w\n\ngoal (1 subgoal):\n 1. fst w \\<Longrightarrow>\n    act (G.lift g [w]) ` (X - Xout' w) \\<subseteq> Xin' w", "thus ?thesis"], ["proof (prove)\nusing this:\n  fst w\n\ngoal (1 subgoal):\n 1. act (G.lift g [w]) ` (X - Xout' w) \\<subseteq> Xin' w", "using mems"], ["proof (prove)\nusing this:\n  fst w\n  w # ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  x \\<in> X\n  snd w \\<in> I\n  g \\<in> I \\<rightarrow> carrier G\n  g (snd w) \\<in> carrier G\n  ws \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n  G.lift g ws \\<in> carrier G\n  G.lift g [w] \\<in> carrier G\n  act (G.lift g ws) \\<in> carrier (BijGroup X)\n  act (G.lift g [w]) \\<in> carrier (BijGroup X)\n  act (G.lift g (w # ws)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> carrier (BijGroup X)\n  act (g (snd w)) \\<in> Bij X\n  act (G.lift g ws) x \\<in> X\n  act (G.lift g [w]) (act (G.lift g ws) x) \\<in> X\n  act (G.lift g (w # ws)) x \\<in> X\n\ngoal (1 subgoal):\n 1. act (G.lift g [w]) ` (X - Xout' w) \\<subseteq> Xin' w", "by (auto intro!: pong[rule_format, THEN subsetD] simp add: restrict_def inv_BijGroup Xout'_def Xin'_def G.lift_def G.lift_gi_def free_group_def)"], ["proof (state)\nthis:\n  act (G.lift g [w]) ` (X - Xout' w) \\<subseteq> Xin' w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  act (G.lift g [w]) ` (X - Xout' w) \\<subseteq> Xin' w\n\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x\n    \\<notin> act (G.lift g [w]) ` Xout' w \\<Longrightarrow>\n    act (G.lift g (w # ws)) x \\<in> Xin' w", "finally"], ["proof (chain)\npicking this:\n  act (G.lift g (w # ws)) x \\<in> Xin' w", "show ?thesis"], ["proof (prove)\nusing this:\n  act (G.lift g (w # ws)) x \\<in> Xin' w\n\ngoal (1 subgoal):\n 1. act (G.lift g (w # ws)) x \\<in> Xin' w", "."], ["proof (state)\nthis:\n  act (G.lift g (w # ws)) x \\<in> Xin' w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  act (G.lift g (w # ws)) x \\<in> Xin' w\n\ngoal (1 subgoal):\n 1. w # ws = [] \\<or> act (G.lift g (w # ws)) x \\<in> Xin' (hd (w # ws))", "thus ?thesis"], ["proof (prove)\nusing this:\n  act (G.lift g (w # ws)) x \\<in> Xin' w\n\ngoal (1 subgoal):\n 1. w # ws = [] \\<or> act (G.lift g (w # ws)) x \\<in> Xin' (hd (w # ws))", "by simp"], ["proof (state)\nthis:\n  w # ws = [] \\<or> act (G.lift g (w # ws)) x \\<in> Xin' (hd (w # ws))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w # ws = [] \\<or> act (G.lift g (w # ws)) x \\<in> Xin' (hd (w # ws))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w = [] \\<or> act (G.lift g w) x \\<in> Xin' (hd w)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>I\\<^esub>;\n        G.lift g x = \\<one>\\<^bsub>G\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "moreover"], ["proof (state)\nthis:\n  w = [] \\<or> act (G.lift g w) x \\<in> Xin' (hd w)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>I\\<^esub>;\n        G.lift g x = \\<one>\\<^bsub>G\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "assume \"G.lift g w = \\<one>\\<^bsub>G\\<^esub>\""], ["proof (state)\nthis:\n  G.lift g w = \\<one>\\<^bsub>G\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>I\\<^esub>;\n        G.lift g x = \\<one>\\<^bsub>G\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "ultimately"], ["proof (chain)\npicking this:\n  w = [] \\<or> act (G.lift g w) x \\<in> Xin' (hd w)\n  G.lift g w = \\<one>\\<^bsub>G\\<^esub>", "show \"w = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  w = [] \\<or> act (G.lift g w) x \\<in> Xin' (hd w)\n  G.lift g w = \\<one>\\<^bsub>G\\<^esub>\n\ngoal (1 subgoal):\n 1. w = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "using \\<open>x\\<in>X\\<close> Cons(1) x2 \\<open>w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  w = [] \\<or> act (G.lift g w) x \\<in> Xin' (hd w)\n  G.lift g w = \\<one>\\<^bsub>G\\<^esub>\n  x \\<in> X\n  \\<lbrakk>(?x, ?y) \\<in> ?r; (?xs, ?ys) \\<in> listrel ?r\\<rbrakk>\n  \\<Longrightarrow> (?x # ?xs, ?y # ?ys) \\<in> listrel ?r\n  w = [] \\<or> x \\<notin> Xin' (hd w)\n  w \\<in> carrier \\<F>\\<^bsub>I\\<^esub>\n\ngoal (1 subgoal):\n 1. w = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "by (cases w, auto simp add:free_group_def Xin'_def split:if_splits)"], ["proof (state)\nthis:\n  w = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>carrier \\<F>\\<^bsub>I\\<^esub>.\n     G.lift g x = \\<one>\\<^bsub>G\\<^esub> \\<longrightarrow>\n     x = \\<one>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G", "txt \\<open>Surjectivity is relatively simple, and often not even mentioned in\n    human proofs.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G", "have \"G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> =\n          G.lift g ` \\<langle>\\<iota> ` I\\<rangle>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> =\n    G.lift g `\n    \\<langle>\\<iota> ` I\\<rangle>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>", "by (metis gens_span_free_group)"], ["proof (state)\nthis:\n  G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> =\n  G.lift g `\n  \\<langle>\\<iota> ` I\\<rangle>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G", "also"], ["proof (state)\nthis:\n  G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> =\n  G.lift g `\n  \\<langle>\\<iota> ` I\\<rangle>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G", "have \"... = \\<langle>G.lift g ` (\\<iota> ` I) \\<rangle>\\<^bsub>G\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.lift g `\n    \\<langle>\\<iota> ` I\\<rangle>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub> =\n    \\<langle>G.lift g ` \\<iota> ` I\\<rangle>\\<^bsub>G\\<^esub>", "by (auto intro!:h.hom_span simp add: insert_closed)"], ["proof (state)\nthis:\n  G.lift g `\n  \\<langle>\\<iota> ` I\\<rangle>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub> =\n  \\<langle>G.lift g ` \\<iota> ` I\\<rangle>\\<^bsub>G\\<^esub>\n\ngoal (1 subgoal):\n 1. G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G", "also"], ["proof (state)\nthis:\n  G.lift g `\n  \\<langle>\\<iota> ` I\\<rangle>\\<^bsub>\\<F>\\<^bsub>I\\<^esub>\\<^esub> =\n  \\<langle>G.lift g ` \\<iota> ` I\\<rangle>\\<^bsub>G\\<^esub>\n\ngoal (1 subgoal):\n 1. G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G", "have \"\\<dots> = \\<langle>g ` I \\<rangle>\\<^bsub>G\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>G.lift g ` \\<iota> ` I\\<rangle>\\<^bsub>G\\<^esub> =\n    \\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<langle>G.lift g ` \\<iota> ` I\\<rangle>\\<^bsub>G\\<^esub> =\n    \\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub>", "have \"\\<forall> i \\<in> I. G.lift g (\\<iota> i) = g i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>I. G.lift g (\\<iota> i) = g i", "using \\<open>g \\<in> (I \\<rightarrow> carrier G)\\<close>"], ["proof (prove)\nusing this:\n  g \\<in> I \\<rightarrow> carrier G\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>I. G.lift g (\\<iota> i) = g i", "by (auto simp add:insert_def G.lift_def G.lift_gi_def intro:G.r_one)"], ["proof (state)\nthis:\n  \\<forall>i\\<in>I. G.lift g (\\<iota> i) = g i\n\ngoal (1 subgoal):\n 1. \\<langle>G.lift g ` \\<iota> ` I\\<rangle>\\<^bsub>G\\<^esub> =\n    \\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub>", "then"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>I. G.lift g (\\<iota> i) = g i", "have \"G.lift g ` (\\<iota> ` I) = g ` I \""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>I. G.lift g (\\<iota> i) = g i\n\ngoal (1 subgoal):\n 1. G.lift g ` \\<iota> ` I = g ` I", "by (auto intro!: image_cong simp add: image_comp [symmetric, THEN sym])"], ["proof (state)\nthis:\n  G.lift g ` \\<iota> ` I = g ` I\n\ngoal (1 subgoal):\n 1. \\<langle>G.lift g ` \\<iota> ` I\\<rangle>\\<^bsub>G\\<^esub> =\n    \\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub>", "thus ?thesis"], ["proof (prove)\nusing this:\n  G.lift g ` \\<iota> ` I = g ` I\n\ngoal (1 subgoal):\n 1. \\<langle>G.lift g ` \\<iota> ` I\\<rangle>\\<^bsub>G\\<^esub> =\n    \\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<langle>G.lift g ` \\<iota> ` I\\<rangle>\\<^bsub>G\\<^esub> =\n  \\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<langle>G.lift g ` \\<iota> ` I\\<rangle>\\<^bsub>G\\<^esub> =\n  \\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub>\n\ngoal (1 subgoal):\n 1. G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G", "also"], ["proof (state)\nthis:\n  \\<langle>G.lift g ` \\<iota> ` I\\<rangle>\\<^bsub>G\\<^esub> =\n  \\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub>\n\ngoal (1 subgoal):\n 1. G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G", "have \"\\<dots> = carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub> = carrier G", "using assms"], ["proof (prove)\nusing this:\n  Group.group G\n  act \\<in> hom G (BijGroup X)\n  g \\<in> I \\<rightarrow> carrier G\n  \\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub> = carrier G\n  \\<forall>i\\<in>I. Xout i \\<subseteq> X\n  \\<forall>i\\<in>I. Xin i \\<subseteq> X\n  \\<forall>i\\<in>I.\n     \\<forall>j\\<in>I.\n        i \\<noteq> j \\<longrightarrow> Xout i \\<inter> Xout j = {}\n  \\<forall>i\\<in>I.\n     \\<forall>j\\<in>I.\n        i \\<noteq> j \\<longrightarrow> Xin i \\<inter> Xin j = {}\n  \\<forall>i\\<in>I. \\<forall>j\\<in>I. Xin i \\<inter> Xout j = {}\n  x \\<in> X\n  \\<forall>i.\n     I = {i} \\<longrightarrow> x \\<notin> Xout i \\<and> x \\<notin> Xin i\n  \\<forall>i\\<in>I. act (g i) ` (X - Xout i) \\<subseteq> Xin i\n  \\<forall>i\\<in>I.\n     act (inv\\<^bsub>G\\<^esub> g i) ` (X - Xin i) \\<subseteq> Xout i\n\ngoal (1 subgoal):\n 1. \\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub> = carrier G", "by simp"], ["proof (state)\nthis:\n  \\<langle>g ` I\\<rangle>\\<^bsub>G\\<^esub> = carrier G\n\ngoal (1 subgoal):\n 1. G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G", "finally"], ["proof (chain)\npicking this:\n  G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G", "show \"G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G\""], ["proof (prove)\nusing this:\n  G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G\n\ngoal (1 subgoal):\n 1. G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G", "."], ["proof (state)\nthis:\n  G.lift g ` carrier \\<F>\\<^bsub>I\\<^esub> = carrier G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G.lift g \\<in> Group.iso \\<F>\\<^bsub>I\\<^esub> G\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}