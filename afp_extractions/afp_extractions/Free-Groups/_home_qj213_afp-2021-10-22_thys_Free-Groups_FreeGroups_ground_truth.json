{"file_name": "/home/qj213/afp-2021-10-22/thys/Free-Groups/FreeGroups.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Free-Groups", "problem_names": ["lemma inv1_inv1: \"inv1 \\<circ> inv1 = id\"", "lemmas inv1_inv1_simp [simp] = inv1_inv1[unfolded id_def]", "lemma snd_inv1: \"snd \\<circ> inv1 = snd\"", "lemma cancelling_inf[simp]: \"canceling (inv1 a) (inv1 b) = canceling a b\"", "lemma inv_idemp: \"inv_fg (inv_fg l) = l\"", "lemma inv_fg_cancel: \"normalize (l @ inv_fg l) = []\"", "lemma inv_fg_cancel2: \"normalize (inv_fg l @ l) = []\"", "lemma canceled_rev:\n  assumes \"canceled l\"\n  shows \"canceled (rev l)\"", "lemma inv_fg_closure1:\n  assumes \"canceled l\"\n  shows \"canceled (inv_fg l)\"", "lemma inv_fg_closure2:\n  \"l \\<in> lists (UNIV \\<times> gens) \\<Longrightarrow> inv_fg l \\<in> lists (UNIV \\<times> gens)\"", "lemma occuring_gens_in_element:\n  \"x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow> x \\<in> lists (UNIV \\<times> gens)\"", "theorem free_group_is_group: \"group \\<F>\\<^bsub>gens\\<^esub>\"", "lemma inv_is_inv_fg[simp]:\n  \"x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow> inv\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> x = inv_fg x\"", "lemma insert_closed:\n  \"g \\<in> gens \\<Longrightarrow> \\<iota> g \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\"", "lemma (in group) lift_gi_closed:\n  assumes cl: \"f \\<in> gens \\<rightarrow> carrier G\"\n      and \"snd gi \\<in> gens\"\n  shows \"lift_gi f gi \\<in> carrier G\"", "lemma (in group) lift_nil[simp]: \"lift f [] = \\<one>\"", "lemma (in group) lift_closed[simp]:\n  assumes cl: \"f \\<in> gens \\<rightarrow> carrier G\"\n      and \"x \\<in> lists (UNIV \\<times> gens)\"\n  shows \"lift f x \\<in> carrier G\"", "lemma (in group) lift_append[simp]:\n  assumes cl: \"f \\<in> gens \\<rightarrow> carrier G\"\n      and \"x \\<in> lists (UNIV \\<times> gens)\"\n      and \"y \\<in> lists (UNIV \\<times> gens)\"\n  shows \"lift f (x @ y) = lift f x \\<otimes> lift f y\"", "lemma (in group) lift_cancels_to:\n  assumes \"cancels_to x y\"\n      and \"x \\<in> lists (UNIV \\<times> gens)\"\n      and cl: \"f \\<in> gens \\<rightarrow> carrier G\"\n  shows \"lift f x = lift f y\"", "lemma (in group) lift_is_hom:\n  assumes cl: \"f \\<in> gens \\<rightarrow> carrier G\"\n  shows \"lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\"", "lemma gens_span_free_group:\nshows \"\\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> = carrier \\<F>\\<^bsub>gens\\<^esub>\"", "lemma (in group) lift_is_unique:\n  assumes \"group G\"\n  and cl: \"f \\<in> gens \\<rightarrow> carrier G\"\n  and \"h \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\"\n  and \"\\<forall> g \\<in> gens. h (\\<iota> g) = f g\"\n  shows \"\\<forall>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>. h x = lift f x\""], "translations": [["", "lemma inv1_inv1: \"inv1 \\<circ> inv1 = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv1 \\<circ> inv1 = id", "by (simp add: fun_eq_iff comp_def inv1_def)"], ["", "lemmas inv1_inv1_simp [simp] = inv1_inv1[unfolded id_def]"], ["", "lemma snd_inv1: \"snd \\<circ> inv1 = snd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd \\<circ> inv1 = snd", "by(simp add: fun_eq_iff comp_def inv1_def)"], ["", "text \\<open>\nThe inverse of a word is obtained by reversing the order of the generators and\ninverting each generator using @{term inv1}. Some properties of @{term inv_fg}\nare noted.\n\\<close>"], ["", "definition inv_fg :: \"'a word_g_i \\<Rightarrow> 'a word_g_i\"\n where \"inv_fg l = rev (map inv1 l)\""], ["", "lemma cancelling_inf[simp]: \"canceling (inv1 a) (inv1 b) = canceling a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. canceling (inv1 a) (inv1 b) = canceling a b", "by(simp add: canceling_def inv1_def)"], ["", "lemma inv_idemp: \"inv_fg (inv_fg l) = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_fg (inv_fg l) = l", "by (auto simp add:inv_fg_def rev_map)"], ["", "lemma inv_fg_cancel: \"normalize (l @ inv_fg l) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cancelation.normalize (l @ inv_fg l) = []", "proof(induct l rule:rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. Cancelation.normalize ([] @ inv_fg []) = []\n 2. \\<And>x xs.\n       Cancelation.normalize (xs @ inv_fg xs) = [] \\<Longrightarrow>\n       Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. Cancelation.normalize ([] @ inv_fg []) = []\n 2. \\<And>x xs.\n       Cancelation.normalize (xs @ inv_fg xs) = [] \\<Longrightarrow>\n       Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Cancelation.normalize ([] @ inv_fg []) = []", "by (auto simp add: inv_fg_def)"], ["proof (state)\nthis:\n  Cancelation.normalize ([] @ inv_fg []) = []\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       Cancelation.normalize (xs @ inv_fg xs) = [] \\<Longrightarrow>\n       Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       Cancelation.normalize (xs @ inv_fg xs) = [] \\<Longrightarrow>\n       Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []", "case (snoc x xs)"], ["proof (state)\nthis:\n  Cancelation.normalize (xs @ inv_fg xs) = []\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       Cancelation.normalize (xs @ inv_fg xs) = [] \\<Longrightarrow>\n       Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []", "have \"canceling x (inv1 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. canceling x (inv1 x)", "by (simp add:inv1_def canceling_def)"], ["proof (state)\nthis:\n  canceling x (inv1 x)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       Cancelation.normalize (xs @ inv_fg xs) = [] \\<Longrightarrow>\n       Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []", "moreover"], ["proof (state)\nthis:\n  canceling x (inv1 x)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       Cancelation.normalize (xs @ inv_fg xs) = [] \\<Longrightarrow>\n       Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []", "let ?i = \"length xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       Cancelation.normalize (xs @ inv_fg xs) = [] \\<Longrightarrow>\n       Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []", "have \"Suc ?i < length xs + 1 + 1 + length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (length xs) < length xs + 1 + 1 + length xs", "by auto"], ["proof (state)\nthis:\n  Suc (length xs) < length xs + 1 + 1 + length xs\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       Cancelation.normalize (xs @ inv_fg xs) = [] \\<Longrightarrow>\n       Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []", "moreover"], ["proof (state)\nthis:\n  Suc (length xs) < length xs + 1 + 1 + length xs\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       Cancelation.normalize (xs @ inv_fg xs) = [] \\<Longrightarrow>\n       Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []", "have \"inv_fg (xs @ [x]) = [inv1 x] @ inv_fg xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_fg (xs @ [x]) = [inv1 x] @ inv_fg xs", "by (auto simp add:inv_fg_def)"], ["proof (state)\nthis:\n  inv_fg (xs @ [x]) = [inv1 x] @ inv_fg xs\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       Cancelation.normalize (xs @ inv_fg xs) = [] \\<Longrightarrow>\n       Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []", "ultimately"], ["proof (chain)\npicking this:\n  canceling x (inv1 x)\n  Suc (length xs) < length xs + 1 + 1 + length xs\n  inv_fg (xs @ [x]) = [inv1 x] @ inv_fg xs", "have \"cancels_to_1_at ?i (xs @ [x] @ (inv_fg (xs @ [x]))) (xs @ inv_fg xs)\""], ["proof (prove)\nusing this:\n  canceling x (inv1 x)\n  Suc (length xs) < length xs + 1 + 1 + length xs\n  inv_fg (xs @ [x]) = [inv1 x] @ inv_fg xs\n\ngoal (1 subgoal):\n 1. cancels_to_1_at (length xs) (xs @ [x] @ inv_fg (xs @ [x]))\n     (xs @ inv_fg xs)", "by (auto simp add:cancels_to_1_at_def cancel_at_def nth_append)"], ["proof (state)\nthis:\n  cancels_to_1_at (length xs) (xs @ [x] @ inv_fg (xs @ [x]))\n   (xs @ inv_fg xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       Cancelation.normalize (xs @ inv_fg xs) = [] \\<Longrightarrow>\n       Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []", "hence \"cancels_to_1 (xs @ [x] @ (inv_fg (xs @ [x]))) (xs @ inv_fg xs)\""], ["proof (prove)\nusing this:\n  cancels_to_1_at (length xs) (xs @ [x] @ inv_fg (xs @ [x]))\n   (xs @ inv_fg xs)\n\ngoal (1 subgoal):\n 1. cancels_to_1 (xs @ [x] @ inv_fg (xs @ [x])) (xs @ inv_fg xs)", "by (auto simp add: cancels_to_1_def)"], ["proof (state)\nthis:\n  cancels_to_1 (xs @ [x] @ inv_fg (xs @ [x])) (xs @ inv_fg xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       Cancelation.normalize (xs @ inv_fg xs) = [] \\<Longrightarrow>\n       Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []", "hence \"cancels_to (xs @ [x] @ (inv_fg (xs @ [x]))) (xs @ inv_fg xs)\""], ["proof (prove)\nusing this:\n  cancels_to_1 (xs @ [x] @ inv_fg (xs @ [x])) (xs @ inv_fg xs)\n\ngoal (1 subgoal):\n 1. cancels_to (xs @ [x] @ inv_fg (xs @ [x])) (xs @ inv_fg xs)", "by (auto simp add:cancels_to_def)"], ["proof (state)\nthis:\n  cancels_to (xs @ [x] @ inv_fg (xs @ [x])) (xs @ inv_fg xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       Cancelation.normalize (xs @ inv_fg xs) = [] \\<Longrightarrow>\n       Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []", "with \\<open>normalize (xs @ (inv_fg xs)) = []\\<close>"], ["proof (chain)\npicking this:\n  Cancelation.normalize (xs @ inv_fg xs) = []\n  cancels_to (xs @ [x] @ inv_fg (xs @ [x])) (xs @ inv_fg xs)", "show \"normalize ((xs @ [x]) @ (inv_fg (xs @ [x]))) = []\""], ["proof (prove)\nusing this:\n  Cancelation.normalize (xs @ inv_fg xs) = []\n  cancels_to (xs @ [x] @ inv_fg (xs @ [x])) (xs @ inv_fg xs)\n\ngoal (1 subgoal):\n 1. Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []", "by auto"], ["proof (state)\nthis:\n  Cancelation.normalize ((xs @ [x]) @ inv_fg (xs @ [x])) = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inv_fg_cancel2: \"normalize (inv_fg l @ l) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cancelation.normalize (inv_fg l @ l) = []", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Cancelation.normalize (inv_fg l @ l) = []", "have \"normalize (inv_fg l @ inv_fg (inv_fg l)) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cancelation.normalize (inv_fg l @ inv_fg (inv_fg l)) = []", "by (rule inv_fg_cancel)"], ["proof (state)\nthis:\n  Cancelation.normalize (inv_fg l @ inv_fg (inv_fg l)) = []\n\ngoal (1 subgoal):\n 1. Cancelation.normalize (inv_fg l @ l) = []", "thus \"normalize (inv_fg l @ l) = []\""], ["proof (prove)\nusing this:\n  Cancelation.normalize (inv_fg l @ inv_fg (inv_fg l)) = []\n\ngoal (1 subgoal):\n 1. Cancelation.normalize (inv_fg l @ l) = []", "by (simp add: inv_idemp)"], ["proof (state)\nthis:\n  Cancelation.normalize (inv_fg l @ l) = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma canceled_rev:\n  assumes \"canceled l\"\n  shows \"canceled (rev l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. canceled (rev l)", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "assume \"\\<not>canceled (rev l)\""], ["proof (state)\nthis:\n  \\<not> canceled (rev l)\n\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "hence \"Domainp cancels_to_1 (rev l)\""], ["proof (prove)\nusing this:\n  \\<not> canceled (rev l)\n\ngoal (1 subgoal):\n 1. Domainp cancels_to_1 (rev l)", "by (simp add: canceled_def)"], ["proof (state)\nthis:\n  Domainp cancels_to_1 (rev l)\n\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  Domainp cancels_to_1 (rev l)", "obtain l' where \"cancels_to_1 (rev l) l'\""], ["proof (prove)\nusing this:\n  Domainp cancels_to_1 (rev l)\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        cancels_to_1 (rev l) l' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  cancels_to_1 (rev l) l'\n\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  cancels_to_1 (rev l) l'", "obtain i where \"cancels_to_1_at i (rev l) l'\""], ["proof (prove)\nusing this:\n  cancels_to_1 (rev l) l'\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        cancels_to_1_at i (rev l) l' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add:cancels_to_1_def)"], ["proof (state)\nthis:\n  cancels_to_1_at i (rev l) l'\n\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "hence \"Suc i < length (rev l)\"\n    and \"canceling (rev l ! i) (rev l ! Suc i)\""], ["proof (prove)\nusing this:\n  cancels_to_1_at i (rev l) l'\n\ngoal (1 subgoal):\n 1. Suc i < length (rev l) &&& canceling (rev l ! i) (rev l ! Suc i)", "by (auto simp add:cancels_to_1_at_def)"], ["proof (state)\nthis:\n  Suc i < length (rev l)\n  canceling (rev l ! i) (rev l ! Suc i)\n\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "let ?x = \"length l - i - 2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "from \\<open>Suc i < length (rev l)\\<close>"], ["proof (chain)\npicking this:\n  Suc i < length (rev l)", "have \"Suc ?x < length l\""], ["proof (prove)\nusing this:\n  Suc i < length (rev l)\n\ngoal (1 subgoal):\n 1. Suc (length l - i - 2) < length l", "by auto"], ["proof (state)\nthis:\n  Suc (length l - i - 2) < length l\n\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  Suc (length l - i - 2) < length l\n\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "from \\<open>Suc i < length (rev l)\\<close>"], ["proof (chain)\npicking this:\n  Suc i < length (rev l)", "have \"i < length l\" and \"length l - Suc i = Suc(length l - Suc (Suc i))\""], ["proof (prove)\nusing this:\n  Suc i < length (rev l)\n\ngoal (1 subgoal):\n 1. i < length l &&& length l - Suc i = Suc (length l - Suc (Suc i))", "by auto"], ["proof (state)\nthis:\n  i < length l\n  length l - Suc i = Suc (length l - Suc (Suc i))\n\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "hence \"rev l ! i = l ! Suc ?x\" and \"rev l ! Suc i = l ! ?x\""], ["proof (prove)\nusing this:\n  i < length l\n  length l - Suc i = Suc (length l - Suc (Suc i))\n\ngoal (1 subgoal):\n 1. rev l ! i = l ! Suc (length l - i - 2) &&&\n    rev l ! Suc i = l ! (length l - i - 2)", "by (auto simp add: rev_nth map_nth)"], ["proof (state)\nthis:\n  rev l ! i = l ! Suc (length l - i - 2)\n  rev l ! Suc i = l ! (length l - i - 2)\n\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "with \\<open>canceling (rev l ! i) (rev l ! Suc i)\\<close>"], ["proof (chain)\npicking this:\n  canceling (rev l ! i) (rev l ! Suc i)\n  rev l ! i = l ! Suc (length l - i - 2)\n  rev l ! Suc i = l ! (length l - i - 2)", "have \"canceling (l ! Suc ?x) (l ! ?x)\""], ["proof (prove)\nusing this:\n  canceling (rev l ! i) (rev l ! Suc i)\n  rev l ! i = l ! Suc (length l - i - 2)\n  rev l ! Suc i = l ! (length l - i - 2)\n\ngoal (1 subgoal):\n 1. canceling (l ! Suc (length l - i - 2)) (l ! (length l - i - 2))", "by auto"], ["proof (state)\nthis:\n  canceling (l ! Suc (length l - i - 2)) (l ! (length l - i - 2))\n\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "hence \"canceling (l ! ?x) (l ! Suc ?x)\""], ["proof (prove)\nusing this:\n  canceling (l ! Suc (length l - i - 2)) (l ! (length l - i - 2))\n\ngoal (1 subgoal):\n 1. canceling (l ! (length l - i - 2)) (l ! Suc (length l - i - 2))", "by (rule cancel_sym)"], ["proof (state)\nthis:\n  canceling (l ! (length l - i - 2)) (l ! Suc (length l - i - 2))\n\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "hence \"canceling (l ! ?x) (l ! Suc ?x)\""], ["proof (prove)\nusing this:\n  canceling (l ! (length l - i - 2)) (l ! Suc (length l - i - 2))\n\ngoal (1 subgoal):\n 1. canceling (l ! (length l - i - 2)) (l ! Suc (length l - i - 2))", "by simp"], ["proof (state)\nthis:\n  canceling (l ! (length l - i - 2)) (l ! Suc (length l - i - 2))\n\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  Suc (length l - i - 2) < length l\n  canceling (l ! (length l - i - 2)) (l ! Suc (length l - i - 2))", "have \"cancels_to_1_at ?x l (cancel_at ?x l)\""], ["proof (prove)\nusing this:\n  Suc (length l - i - 2) < length l\n  canceling (l ! (length l - i - 2)) (l ! Suc (length l - i - 2))\n\ngoal (1 subgoal):\n 1. cancels_to_1_at (length l - i - 2) l (cancel_at (length l - i - 2) l)", "by (auto simp add:cancels_to_1_at_def)"], ["proof (state)\nthis:\n  cancels_to_1_at (length l - i - 2) l (cancel_at (length l - i - 2) l)\n\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "hence \"cancels_to_1 l (cancel_at ?x l)\""], ["proof (prove)\nusing this:\n  cancels_to_1_at (length l - i - 2) l (cancel_at (length l - i - 2) l)\n\ngoal (1 subgoal):\n 1. cancels_to_1 l (cancel_at (length l - i - 2) l)", "by (auto simp add:cancels_to_1_def)"], ["proof (state)\nthis:\n  cancels_to_1 l (cancel_at (length l - i - 2) l)\n\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "hence \"\\<not>canceled l\""], ["proof (prove)\nusing this:\n  cancels_to_1 l (cancel_at (length l - i - 2) l)\n\ngoal (1 subgoal):\n 1. \\<not> canceled l", "by (auto simp add:canceled_def)"], ["proof (state)\nthis:\n  \\<not> canceled l\n\ngoal (1 subgoal):\n 1. \\<not> canceled (rev l) \\<Longrightarrow> False", "with \\<open>canceled l\\<close>"], ["proof (chain)\npicking this:\n  canceled l\n  \\<not> canceled l", "show False"], ["proof (prove)\nusing this:\n  canceled l\n  \\<not> canceled l\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inv_fg_closure1:\n  assumes \"canceled l\"\n  shows \"canceled (inv_fg l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. canceled (inv_fg l)", "unfolding inv_fg_def and inv1_def and apfst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. canceled (rev (map (map_prod Not id) l))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. canceled (rev (map (map_prod Not id) l))", "have \"inj Not\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj Not", "by (auto intro:injI)"], ["proof (state)\nthis:\n  inj Not\n\ngoal (1 subgoal):\n 1. canceled (rev (map (map_prod Not id) l))", "moreover"], ["proof (state)\nthis:\n  inj Not\n\ngoal (1 subgoal):\n 1. canceled (rev (map (map_prod Not id) l))", "have \"inj_on id (snd ` set l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on id (snd ` set l)", "by auto"], ["proof (state)\nthis:\n  inj_on id (snd ` set l)\n\ngoal (1 subgoal):\n 1. canceled (rev (map (map_prod Not id) l))", "ultimately"], ["proof (chain)\npicking this:\n  inj Not\n  inj_on id (snd ` set l)", "have \"canceled (map (map_prod Not id) l)\""], ["proof (prove)\nusing this:\n  inj Not\n  inj_on id (snd ` set l)\n\ngoal (1 subgoal):\n 1. canceled (map (map_prod Not id) l)", "using \\<open>canceled l\\<close>"], ["proof (prove)\nusing this:\n  inj Not\n  inj_on id (snd ` set l)\n  canceled l\n\ngoal (1 subgoal):\n 1. canceled (map (map_prod Not id) l)", "by -(rule rename_gens_canceled)"], ["proof (state)\nthis:\n  canceled (map (map_prod Not id) l)\n\ngoal (1 subgoal):\n 1. canceled (rev (map (map_prod Not id) l))", "thus \"canceled (rev (map (map_prod Not id) l))\""], ["proof (prove)\nusing this:\n  canceled (map (map_prod Not id) l)\n\ngoal (1 subgoal):\n 1. canceled (rev (map (map_prod Not id) l))", "by (rule canceled_rev)"], ["proof (state)\nthis:\n  canceled (rev (map (map_prod Not id) l))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inv_fg_closure2:\n  \"l \\<in> lists (UNIV \\<times> gens) \\<Longrightarrow> inv_fg l \\<in> lists (UNIV \\<times> gens)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<in> lists (UNIV \\<times> gens) \\<Longrightarrow>\n    inv_fg l \\<in> lists (UNIV \\<times> gens)", "by (auto iff:lists_eq_set simp add:inv1_def inv_fg_def)"], ["", "subsection \\<open>The definition\\<close>"], ["", "text \\<open>\nFinally, we can define the Free Group over a set of generators, and show that it\nis indeed a group.\n\\<close>"], ["", "definition free_group :: \"'a set => ((bool * 'a) list) monoid\" (\"\\<F>\\<index>\")\nwhere \n  \"\\<F>\\<^bsub>gens\\<^esub> \\<equiv> \\<lparr>\n     carrier = {l\\<in>lists (UNIV \\<times> gens). canceled l },\n     mult = \\<lambda> x y. normalize (x @ y),\n     one = []\n  \\<rparr>\""], ["", "lemma occuring_gens_in_element:\n  \"x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow> x \\<in> lists (UNIV \\<times> gens)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n    x \\<in> lists (UNIV \\<times> gens)", "by(auto simp add:free_group_def)"], ["", "theorem free_group_is_group: \"group \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group \\<F>\\<^bsub>gens\\<^esub>", "proof"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y\n                         \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 3. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 5. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 6. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "fix x y"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y\n                         \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 3. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 5. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 6. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "assume \"x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (state)\nthis:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y\n                         \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 3. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 5. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 6. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "hence x: \"x \\<in> lists (UNIV \\<times> gens)\""], ["proof (prove)\nusing this:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. x \\<in> lists (UNIV \\<times> gens)", "by\n    (rule occuring_gens_in_element)"], ["proof (state)\nthis:\n  x \\<in> lists (UNIV \\<times> gens)\n\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y\n                         \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 3. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 5. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 6. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "assume \"y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (state)\nthis:\n  y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y\n                         \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 3. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 5. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 6. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "hence y: \"y \\<in> lists (UNIV \\<times> gens)\""], ["proof (prove)\nusing this:\n  y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. y \\<in> lists (UNIV \\<times> gens)", "by\n    (rule occuring_gens_in_element)"], ["proof (state)\nthis:\n  y \\<in> lists (UNIV \\<times> gens)\n\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y\n                         \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 3. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 5. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 6. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "from x and y"], ["proof (chain)\npicking this:\n  x \\<in> lists (UNIV \\<times> gens)\n  y \\<in> lists (UNIV \\<times> gens)", "have \"x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y \\<in> lists (UNIV \\<times> gens)\""], ["proof (prove)\nusing this:\n  x \\<in> lists (UNIV \\<times> gens)\n  y \\<in> lists (UNIV \\<times> gens)\n\ngoal (1 subgoal):\n 1. x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y\n    \\<in> lists (UNIV \\<times> gens)", "by (auto intro!: normalize_preserves_generators simp add:free_group_def append_in_lists_conv)"], ["proof (state)\nthis:\n  x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y\n  \\<in> lists (UNIV \\<times> gens)\n\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y\n                         \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 3. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 5. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 6. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "thus \"x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (prove)\nusing this:\n  x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y\n  \\<in> lists (UNIV \\<times> gens)\n\ngoal (1 subgoal):\n 1. x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>", "by (auto simp add:free_group_def)"], ["proof (state)\nthis:\n  x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y\n  \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 2. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 3. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 5. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 2. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 3. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 5. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "fix x y z"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 2. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 3. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 5. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "have \"cancels_to (x @ y) (normalize (x @ (y::'a word_g_i)))\"\n   and \"cancels_to z (z::'a word_g_i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cancels_to (x @ y) (Cancelation.normalize (x @ y)) &&& cancels_to z z", "by auto"], ["proof (state)\nthis:\n  cancels_to (x @ y) (Cancelation.normalize (x @ y))\n  cancels_to z z\n\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 2. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 3. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 5. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "hence \"normalize (normalize (x @ y) @ z) = normalize ((x @ y) @ z)\""], ["proof (prove)\nusing this:\n  cancels_to (x @ y) (Cancelation.normalize (x @ y))\n  cancels_to z z\n\ngoal (1 subgoal):\n 1. Cancelation.normalize (Cancelation.normalize (x @ y) @ z) =\n    Cancelation.normalize ((x @ y) @ z)", "by (rule normalize_append_cancel_to[THEN sym])"], ["proof (state)\nthis:\n  Cancelation.normalize (Cancelation.normalize (x @ y) @ z) =\n  Cancelation.normalize ((x @ y) @ z)\n\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 2. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 3. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 5. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "also"], ["proof (state)\nthis:\n  Cancelation.normalize (Cancelation.normalize (x @ y) @ z) =\n  Cancelation.normalize ((x @ y) @ z)\n\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 2. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 3. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 5. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "have \"\\<dots> = normalize (x @ (y @ z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cancelation.normalize ((x @ y) @ z) = Cancelation.normalize (x @ y @ z)", "by auto"], ["proof (state)\nthis:\n  Cancelation.normalize ((x @ y) @ z) = Cancelation.normalize (x @ y @ z)\n\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 2. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 3. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 5. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "also"], ["proof (state)\nthis:\n  Cancelation.normalize ((x @ y) @ z) = Cancelation.normalize (x @ y @ z)\n\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 2. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 3. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 5. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "have \"cancels_to (y @ z) (normalize (y @ (z::'a word_g_i)))\"\n   and \"cancels_to x (x::'a word_g_i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cancels_to (y @ z) (Cancelation.normalize (y @ z)) &&& cancels_to x x", "by auto"], ["proof (state)\nthis:\n  cancels_to (y @ z) (Cancelation.normalize (y @ z))\n  cancels_to x x\n\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 2. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 3. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 5. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "hence \"normalize (x @ (y @ z)) = normalize (x @ normalize (y @ z))\""], ["proof (prove)\nusing this:\n  cancels_to (y @ z) (Cancelation.normalize (y @ z))\n  cancels_to x x\n\ngoal (1 subgoal):\n 1. Cancelation.normalize (x @ y @ z) =\n    Cancelation.normalize (x @ Cancelation.normalize (y @ z))", "by -(rule normalize_append_cancel_to)"], ["proof (state)\nthis:\n  Cancelation.normalize (x @ y @ z) =\n  Cancelation.normalize (x @ Cancelation.normalize (y @ z))\n\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n        z \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                         (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                          z)\n 2. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 3. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 4. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 5. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "finally"], ["proof (chain)\npicking this:\n  Cancelation.normalize (Cancelation.normalize (x @ y) @ z) =\n  Cancelation.normalize (x @ Cancelation.normalize (y @ z))", "show \"x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> z =\n        x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> z)\""], ["proof (prove)\nusing this:\n  Cancelation.normalize (Cancelation.normalize (x @ y) @ z) =\n  Cancelation.normalize (x @ Cancelation.normalize (y @ z))\n\ngoal (1 subgoal):\n 1. x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    z =\n    x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> z)", "by (auto simp add:free_group_def)"], ["proof (state)\nthis:\n  x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n  y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n  z =\n  x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n  (y \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> z)\n\ngoal (4 subgoals):\n 1. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 2. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 3. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 4. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n 2. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 3. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 4. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "show \"\\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>", "by (auto simp add:free_group_def)"], ["proof (state)\nthis:\n  \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n  \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 2. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 3. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 2. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 3. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "fix x"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 2. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 3. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "assume \"x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (state)\nthis:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       x =\n       x\n 2. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 3. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "thus \"\\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> x = x\""], ["proof (prove)\nusing this:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    x =\n    x", "by (auto simp add:free_group_def)"], ["proof (state)\nthis:\n  \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n  x =\n  x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 2. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 2. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 2. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "assume \"x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (state)\nthis:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n       \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n       x\n 2. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "thus \"x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> = x\""], ["proof (prove)\nusing this:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n    x", "by (auto simp add:free_group_def)"], ["proof (state)\nthis:\n  x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n  \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n  x\n\ngoal (1 subgoal):\n 1. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "show \"carrier \\<F>\\<^bsub>gens\\<^esub> \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>", "proof (simp add:free_group_def Units_def, rule subsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {l \\<in> lists (UNIV \\<times> gens).\n                canceled l} \\<Longrightarrow>\n       x \\<in> {y \\<in> lists (UNIV \\<times> gens).\n                canceled y \\<and>\n                (\\<exists>x.\n                    x \\<in> lists (UNIV \\<times> gens) \\<and>\n                    canceled x \\<and>\n                    Cancelation.normalize (x @ y) = [] \\<and>\n                    Cancelation.normalize (y @ x) = [])}", "fix x :: \"'a word_g_i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {l \\<in> lists (UNIV \\<times> gens).\n                canceled l} \\<Longrightarrow>\n       x \\<in> {y \\<in> lists (UNIV \\<times> gens).\n                canceled y \\<and>\n                (\\<exists>x.\n                    x \\<in> lists (UNIV \\<times> gens) \\<and>\n                    canceled x \\<and>\n                    Cancelation.normalize (x @ y) = [] \\<and>\n                    Cancelation.normalize (y @ x) = [])}", "let ?x' = \"inv_fg x\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {l \\<in> lists (UNIV \\<times> gens).\n                canceled l} \\<Longrightarrow>\n       x \\<in> {y \\<in> lists (UNIV \\<times> gens).\n                canceled y \\<and>\n                (\\<exists>x.\n                    x \\<in> lists (UNIV \\<times> gens) \\<and>\n                    canceled x \\<and>\n                    Cancelation.normalize (x @ y) = [] \\<and>\n                    Cancelation.normalize (y @ x) = [])}", "assume \"x \\<in> {y\\<in>lists(UNIV\\<times>gens). canceled y}\""], ["proof (state)\nthis:\n  x \\<in> {y \\<in> lists (UNIV \\<times> gens). canceled y}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {l \\<in> lists (UNIV \\<times> gens).\n                canceled l} \\<Longrightarrow>\n       x \\<in> {y \\<in> lists (UNIV \\<times> gens).\n                canceled y \\<and>\n                (\\<exists>x.\n                    x \\<in> lists (UNIV \\<times> gens) \\<and>\n                    canceled x \\<and>\n                    Cancelation.normalize (x @ y) = [] \\<and>\n                    Cancelation.normalize (y @ x) = [])}", "hence \"?x' \\<in> lists(UNIV\\<times>gens) \\<and> canceled ?x'\""], ["proof (prove)\nusing this:\n  x \\<in> {y \\<in> lists (UNIV \\<times> gens). canceled y}\n\ngoal (1 subgoal):\n 1. inv_fg x \\<in> lists (UNIV \\<times> gens) \\<and> canceled (inv_fg x)", "by (auto elim:inv_fg_closure1 simp add:inv_fg_closure2)"], ["proof (state)\nthis:\n  inv_fg x \\<in> lists (UNIV \\<times> gens) \\<and> canceled (inv_fg x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {l \\<in> lists (UNIV \\<times> gens).\n                canceled l} \\<Longrightarrow>\n       x \\<in> {y \\<in> lists (UNIV \\<times> gens).\n                canceled y \\<and>\n                (\\<exists>x.\n                    x \\<in> lists (UNIV \\<times> gens) \\<and>\n                    canceled x \\<and>\n                    Cancelation.normalize (x @ y) = [] \\<and>\n                    Cancelation.normalize (y @ x) = [])}", "moreover"], ["proof (state)\nthis:\n  inv_fg x \\<in> lists (UNIV \\<times> gens) \\<and> canceled (inv_fg x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {l \\<in> lists (UNIV \\<times> gens).\n                canceled l} \\<Longrightarrow>\n       x \\<in> {y \\<in> lists (UNIV \\<times> gens).\n                canceled y \\<and>\n                (\\<exists>x.\n                    x \\<in> lists (UNIV \\<times> gens) \\<and>\n                    canceled x \\<and>\n                    Cancelation.normalize (x @ y) = [] \\<and>\n                    Cancelation.normalize (y @ x) = [])}", "have \"normalize (?x' @ x) = []\"\n     and \"normalize (x @ ?x') = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cancelation.normalize (inv_fg x @ x) = [] &&&\n    Cancelation.normalize (x @ inv_fg x) = []", "by (auto simp add:inv_fg_cancel inv_fg_cancel2)"], ["proof (state)\nthis:\n  Cancelation.normalize (inv_fg x @ x) = []\n  Cancelation.normalize (x @ inv_fg x) = []\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {l \\<in> lists (UNIV \\<times> gens).\n                canceled l} \\<Longrightarrow>\n       x \\<in> {y \\<in> lists (UNIV \\<times> gens).\n                canceled y \\<and>\n                (\\<exists>x.\n                    x \\<in> lists (UNIV \\<times> gens) \\<and>\n                    canceled x \\<and>\n                    Cancelation.normalize (x @ y) = [] \\<and>\n                    Cancelation.normalize (y @ x) = [])}", "ultimately"], ["proof (chain)\npicking this:\n  inv_fg x \\<in> lists (UNIV \\<times> gens) \\<and> canceled (inv_fg x)\n  Cancelation.normalize (inv_fg x @ x) = []\n  Cancelation.normalize (x @ inv_fg x) = []", "have \"\\<exists>y. y \\<in> lists (UNIV \\<times> gens) \\<and>\n                  canceled y \\<and>\n                  normalize (y @ x) = [] \\<and> normalize (x @ y) = []\""], ["proof (prove)\nusing this:\n  inv_fg x \\<in> lists (UNIV \\<times> gens) \\<and> canceled (inv_fg x)\n  Cancelation.normalize (inv_fg x @ x) = []\n  Cancelation.normalize (x @ inv_fg x) = []\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<in> lists (UNIV \\<times> gens) \\<and>\n       canceled y \\<and>\n       Cancelation.normalize (y @ x) = [] \\<and>\n       Cancelation.normalize (x @ y) = []", "by auto"], ["proof (state)\nthis:\n  \\<exists>y.\n     y \\<in> lists (UNIV \\<times> gens) \\<and>\n     canceled y \\<and>\n     Cancelation.normalize (y @ x) = [] \\<and>\n     Cancelation.normalize (x @ y) = []\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {l \\<in> lists (UNIV \\<times> gens).\n                canceled l} \\<Longrightarrow>\n       x \\<in> {y \\<in> lists (UNIV \\<times> gens).\n                canceled y \\<and>\n                (\\<exists>x.\n                    x \\<in> lists (UNIV \\<times> gens) \\<and>\n                    canceled x \\<and>\n                    Cancelation.normalize (x @ y) = [] \\<and>\n                    Cancelation.normalize (y @ x) = [])}", "with \\<open>x \\<in> {y\\<in>lists(UNIV\\<times>gens). canceled y}\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> {y \\<in> lists (UNIV \\<times> gens). canceled y}\n  \\<exists>y.\n     y \\<in> lists (UNIV \\<times> gens) \\<and>\n     canceled y \\<and>\n     Cancelation.normalize (y @ x) = [] \\<and>\n     Cancelation.normalize (x @ y) = []", "show \"x \\<in> {y \\<in> lists (UNIV \\<times> gens).  canceled y  \\<and>\n          (\\<exists>x. x \\<in> lists (UNIV \\<times> gens) \\<and>\n                  canceled x \\<and>\n                  normalize (x @ y) = [] \\<and> normalize (y @ x) = [])}\""], ["proof (prove)\nusing this:\n  x \\<in> {y \\<in> lists (UNIV \\<times> gens). canceled y}\n  \\<exists>y.\n     y \\<in> lists (UNIV \\<times> gens) \\<and>\n     canceled y \\<and>\n     Cancelation.normalize (y @ x) = [] \\<and>\n     Cancelation.normalize (x @ y) = []\n\ngoal (1 subgoal):\n 1. x \\<in> {y \\<in> lists (UNIV \\<times> gens).\n             canceled y \\<and>\n             (\\<exists>x.\n                 x \\<in> lists (UNIV \\<times> gens) \\<and>\n                 canceled x \\<and>\n                 Cancelation.normalize (x @ y) = [] \\<and>\n                 Cancelation.normalize (y @ x) = [])}", "by auto"], ["proof (state)\nthis:\n  x \\<in> {y \\<in> lists (UNIV \\<times> gens).\n           canceled y \\<and>\n           (\\<exists>x.\n               x \\<in> lists (UNIV \\<times> gens) \\<and>\n               canceled x \\<and>\n               Cancelation.normalize (x @ y) = [] \\<and>\n               Cancelation.normalize (y @ x) = [])}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  carrier \\<F>\\<^bsub>gens\\<^esub>\n  \\<subseteq> Units \\<F>\\<^bsub>gens\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inv_is_inv_fg[simp]:\n  \"x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow> inv\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> x = inv_fg x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n    inv\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> x = inv_fg x", "by (rule group.inv_equality,auto simp add:free_group_is_group,auto simp add: free_group_def inv_fg_cancel inv_fg_cancel2 inv_fg_closure1 inv_fg_closure2)"], ["", "subsection \\<open>The universal property\\<close>"], ["", "text \\<open>Free Groups are important due to their universal property: Every map of\nthe set of generators to another group can be extended uniquely to an\nhomomorphism from the Free Group.\\<close>"], ["", "definition insert (\"\\<iota>\")\n  where \"\\<iota> g = [(False, g)]\""], ["", "lemma insert_closed:\n  \"g \\<in> gens \\<Longrightarrow> \\<iota> g \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> gens \\<Longrightarrow>\n    \\<iota> g \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>", "by (auto simp add:insert_def free_group_def)"], ["", "definition (in group) lift_gi\n  where \"lift_gi f gi = (if fst gi then inv (f (snd gi)) else f (snd gi))\""], ["", "lemma (in group) lift_gi_closed:\n  assumes cl: \"f \\<in> gens \\<rightarrow> carrier G\"\n      and \"snd gi \\<in> gens\"\n  shows \"lift_gi f gi \\<in> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_gi f gi \\<in> carrier G", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> gens \\<rightarrow> carrier G\n  snd gi \\<in> gens\n\ngoal (1 subgoal):\n 1. lift_gi f gi \\<in> carrier G", "by (auto simp add:lift_gi_def)"], ["", "definition (in group) lift\n  where \"lift f w = m_concat (map (lift_gi f) w)\""], ["", "lemma (in group) lift_nil[simp]: \"lift f [] = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift f [] = \\<one>", "by (auto simp add:lift_def)"], ["", "lemma (in group) lift_closed[simp]:\n  assumes cl: \"f \\<in> gens \\<rightarrow> carrier G\"\n      and \"x \\<in> lists (UNIV \\<times> gens)\"\n  shows \"lift f x \\<in> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift f x \\<in> carrier G", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. lift f x \\<in> carrier G", "have \"set (map (lift_gi f) x) \\<subseteq> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (lift_gi f) x) \\<subseteq> carrier G", "using \\<open>x \\<in> lists (UNIV \\<times> gens)\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> lists (UNIV \\<times> gens)\n\ngoal (1 subgoal):\n 1. set (map (lift_gi f) x) \\<subseteq> carrier G", "by (auto simp add:lift_gi_closed[OF cl])"], ["proof (state)\nthis:\n  set (map (lift_gi f) x) \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. lift f x \\<in> carrier G", "thus \"lift f x \\<in> carrier G\""], ["proof (prove)\nusing this:\n  set (map (lift_gi f) x) \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. lift f x \\<in> carrier G", "by (auto simp add:lift_def)"], ["proof (state)\nthis:\n  lift f x \\<in> carrier G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) lift_append[simp]:\n  assumes cl: \"f \\<in> gens \\<rightarrow> carrier G\"\n      and \"x \\<in> lists (UNIV \\<times> gens)\"\n      and \"y \\<in> lists (UNIV \\<times> gens)\"\n  shows \"lift f (x @ y) = lift f x \\<otimes> lift f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift f (x @ y) = lift f x \\<otimes> lift f y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. lift f (x @ y) = lift f x \\<otimes> lift f y", "from \\<open>x \\<in> lists (UNIV \\<times> gens)\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> lists (UNIV \\<times> gens)", "have \"set (map snd x) \\<subseteq> gens\""], ["proof (prove)\nusing this:\n  x \\<in> lists (UNIV \\<times> gens)\n\ngoal (1 subgoal):\n 1. set (map snd x) \\<subseteq> gens", "by auto"], ["proof (state)\nthis:\n  set (map snd x) \\<subseteq> gens\n\ngoal (1 subgoal):\n 1. lift f (x @ y) = lift f x \\<otimes> lift f y", "hence \"set (map (lift_gi f) x) \\<subseteq> carrier G\""], ["proof (prove)\nusing this:\n  set (map snd x) \\<subseteq> gens\n\ngoal (1 subgoal):\n 1. set (map (lift_gi f) x) \\<subseteq> carrier G", "by (induct x)(auto simp add:lift_gi_closed[OF cl])"], ["proof (state)\nthis:\n  set (map (lift_gi f) x) \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. lift f (x @ y) = lift f x \\<otimes> lift f y", "moreover"], ["proof (state)\nthis:\n  set (map (lift_gi f) x) \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. lift f (x @ y) = lift f x \\<otimes> lift f y", "from \\<open>y \\<in> lists (UNIV \\<times> gens)\\<close>"], ["proof (chain)\npicking this:\n  y \\<in> lists (UNIV \\<times> gens)", "have \"set (map snd y) \\<subseteq> gens\""], ["proof (prove)\nusing this:\n  y \\<in> lists (UNIV \\<times> gens)\n\ngoal (1 subgoal):\n 1. set (map snd y) \\<subseteq> gens", "by auto"], ["proof (state)\nthis:\n  set (map snd y) \\<subseteq> gens\n\ngoal (1 subgoal):\n 1. lift f (x @ y) = lift f x \\<otimes> lift f y", "hence \"set (map (lift_gi f) y) \\<subseteq> carrier G\""], ["proof (prove)\nusing this:\n  set (map snd y) \\<subseteq> gens\n\ngoal (1 subgoal):\n 1. set (map (lift_gi f) y) \\<subseteq> carrier G", "by (induct y)(auto simp add:lift_gi_closed[OF cl])"], ["proof (state)\nthis:\n  set (map (lift_gi f) y) \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. lift f (x @ y) = lift f x \\<otimes> lift f y", "ultimately"], ["proof (chain)\npicking this:\n  set (map (lift_gi f) x) \\<subseteq> carrier G\n  set (map (lift_gi f) y) \\<subseteq> carrier G", "show \"lift f (x @ y) = lift f x \\<otimes> lift f y\""], ["proof (prove)\nusing this:\n  set (map (lift_gi f) x) \\<subseteq> carrier G\n  set (map (lift_gi f) y) \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. lift f (x @ y) = lift f x \\<otimes> lift f y", "by (auto simp add:lift_def m_assoc simp del:set_map foldr_append)"], ["proof (state)\nthis:\n  lift f (x @ y) = lift f x \\<otimes> lift f y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) lift_cancels_to:\n  assumes \"cancels_to x y\"\n      and \"x \\<in> lists (UNIV \\<times> gens)\"\n      and cl: \"f \\<in> gens \\<rightarrow> carrier G\"\n  shows \"lift f x = lift f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift f x = lift f y", "using assms"], ["proof (prove)\nusing this:\n  cancels_to x y\n  x \\<in> lists (UNIV \\<times> gens)\n  f \\<in> gens \\<rightarrow> carrier G\n\ngoal (1 subgoal):\n 1. lift f x = lift f y", "unfolding cancels_to_def"], ["proof (prove)\nusing this:\n  cancels_to_1\\<^sup>*\\<^sup>* x y\n  x \\<in> lists (UNIV \\<times> gens)\n  f \\<in> gens \\<rightarrow> carrier G\n\ngoal (1 subgoal):\n 1. lift f x = lift f y", "proof(induct rule:rtranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "case (step y z)"], ["proof (state)\nthis:\n  cancels_to_1\\<^sup>*\\<^sup>* x y\n  cancels_to_1 y z\n  \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n   f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n  \\<Longrightarrow> lift f x = lift f y\n  x \\<in> lists (UNIV \\<times> gens)\n  f \\<in> gens \\<rightarrow> carrier G\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "from \\<open>cancels_to_1\\<^sup>*\\<^sup>* x y\\<close>\n    and \\<open>x \\<in> lists (UNIV \\<times> gens)\\<close>"], ["proof (chain)\npicking this:\n  cancels_to_1\\<^sup>*\\<^sup>* x y\n  x \\<in> lists (UNIV \\<times> gens)", "have \"y \\<in> lists (UNIV \\<times> gens)\""], ["proof (prove)\nusing this:\n  cancels_to_1\\<^sup>*\\<^sup>* x y\n  x \\<in> lists (UNIV \\<times> gens)\n\ngoal (1 subgoal):\n 1. y \\<in> lists (UNIV \\<times> gens)", "by -(rule cancels_to_preserves_generators, simp add:cancels_to_def)"], ["proof (state)\nthis:\n  y \\<in> lists (UNIV \\<times> gens)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "hence \"lift f x = lift f y\""], ["proof (prove)\nusing this:\n  y \\<in> lists (UNIV \\<times> gens)\n\ngoal (1 subgoal):\n 1. lift f x = lift f y", "using step"], ["proof (prove)\nusing this:\n  y \\<in> lists (UNIV \\<times> gens)\n  cancels_to_1\\<^sup>*\\<^sup>* x y\n  cancels_to_1 y z\n  \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n   f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n  \\<Longrightarrow> lift f x = lift f y\n  x \\<in> lists (UNIV \\<times> gens)\n  f \\<in> gens \\<rightarrow> carrier G\n\ngoal (1 subgoal):\n 1. lift f x = lift f y", "by auto"], ["proof (state)\nthis:\n  lift f x = lift f y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "also"], ["proof (state)\nthis:\n  lift f x = lift f y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "from \\<open>cancels_to_1 y z\\<close>"], ["proof (chain)\npicking this:\n  cancels_to_1 y z", "obtain ys1 y1 y2 ys2\n      where y: \"y = ys1 @ y1 # y2 # ys2\"\n      and \"z = ys1 @ ys2\"\n      and \"canceling y1 y2\""], ["proof (prove)\nusing this:\n  cancels_to_1 y z\n\ngoal (1 subgoal):\n 1. (\\<And>ys1 y1 y2 ys2.\n        \\<lbrakk>y = ys1 @ y1 # y2 # ys2; z = ys1 @ ys2;\n         canceling y1 y2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule cancels_to_1_unfold)"], ["proof (state)\nthis:\n  y = ys1 @ y1 # y2 # ys2\n  z = ys1 @ ys2\n  canceling y1 y2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "have \"lift f y  = lift f (ys1 @ [y1] @ [y2] @ ys2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift f y = lift f (ys1 @ [y1] @ [y2] @ ys2)", "using y"], ["proof (prove)\nusing this:\n  y = ys1 @ y1 # y2 # ys2\n\ngoal (1 subgoal):\n 1. lift f y = lift f (ys1 @ [y1] @ [y2] @ ys2)", "by simp"], ["proof (state)\nthis:\n  lift f y = lift f (ys1 @ [y1] @ [y2] @ ys2)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "also"], ["proof (state)\nthis:\n  lift f y = lift f (ys1 @ [y1] @ [y2] @ ys2)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "from y and cl and \\<open>y \\<in> lists (UNIV \\<times> gens)\\<close>"], ["proof (chain)\npicking this:\n  y = ys1 @ y1 # y2 # ys2\n  f \\<in> gens \\<rightarrow> carrier G\n  y \\<in> lists (UNIV \\<times> gens)", "have \"lift f (ys1 @ [y1] @ [y2] @ ys2)\n        = lift f ys1 \\<otimes> (lift f [y1] \\<otimes> lift f [y2]) \\<otimes> lift f ys2\""], ["proof (prove)\nusing this:\n  y = ys1 @ y1 # y2 # ys2\n  f \\<in> gens \\<rightarrow> carrier G\n  y \\<in> lists (UNIV \\<times> gens)\n\ngoal (1 subgoal):\n 1. lift f (ys1 @ [y1] @ [y2] @ ys2) =\n    lift f ys1 \\<otimes> (lift f [y1] \\<otimes> lift f [y2]) \\<otimes>\n    lift f ys2", "by (auto intro:lift_append[OF cl] simp del: append_Cons simp add:m_assoc iff:lists_eq_set)"], ["proof (state)\nthis:\n  lift f (ys1 @ [y1] @ [y2] @ ys2) =\n  lift f ys1 \\<otimes> (lift f [y1] \\<otimes> lift f [y2]) \\<otimes>\n  lift f ys2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "also"], ["proof (state)\nthis:\n  lift f (ys1 @ [y1] @ [y2] @ ys2) =\n  lift f ys1 \\<otimes> (lift f [y1] \\<otimes> lift f [y2]) \\<otimes>\n  lift f ys2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "from cl[THEN funcset_image]\n     and y and \\<open>y \\<in> lists (UNIV \\<times> gens)\\<close>\n     and \\<open>canceling y1 y2\\<close>"], ["proof (chain)\npicking this:\n  f ` gens \\<subseteq> carrier G\n  y = ys1 @ y1 # y2 # ys2\n  y \\<in> lists (UNIV \\<times> gens)\n  canceling y1 y2", "have \"(lift f [y1] \\<otimes> lift f [y2]) = \\<one>\""], ["proof (prove)\nusing this:\n  f ` gens \\<subseteq> carrier G\n  y = ys1 @ y1 # y2 # ys2\n  y \\<in> lists (UNIV \\<times> gens)\n  canceling y1 y2\n\ngoal (1 subgoal):\n 1. lift f [y1] \\<otimes> lift f [y2] = \\<one>", "by (auto simp add:lift_def lift_gi_def canceling_def iff:lists_eq_set)"], ["proof (state)\nthis:\n  lift f [y1] \\<otimes> lift f [y2] = \\<one>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "hence \"lift f ys1 \\<otimes> (lift f [y1] \\<otimes> lift f [y2]) \\<otimes> lift f ys2\n           = lift f ys1 \\<otimes> \\<one> \\<otimes> lift f ys2\""], ["proof (prove)\nusing this:\n  lift f [y1] \\<otimes> lift f [y2] = \\<one>\n\ngoal (1 subgoal):\n 1. lift f ys1 \\<otimes> (lift f [y1] \\<otimes> lift f [y2]) \\<otimes>\n    lift f ys2 =\n    lift f ys1 \\<otimes> \\<one> \\<otimes> lift f ys2", "by simp"], ["proof (state)\nthis:\n  lift f ys1 \\<otimes> (lift f [y1] \\<otimes> lift f [y2]) \\<otimes>\n  lift f ys2 =\n  lift f ys1 \\<otimes> \\<one> \\<otimes> lift f ys2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "also"], ["proof (state)\nthis:\n  lift f ys1 \\<otimes> (lift f [y1] \\<otimes> lift f [y2]) \\<otimes>\n  lift f ys2 =\n  lift f ys1 \\<otimes> \\<one> \\<otimes> lift f ys2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "from y and \\<open>y \\<in> lists (UNIV \\<times> gens)\\<close>\n     and cl"], ["proof (chain)\npicking this:\n  y = ys1 @ y1 # y2 # ys2\n  y \\<in> lists (UNIV \\<times> gens)\n  f \\<in> gens \\<rightarrow> carrier G", "have \"lift f ys1 \\<otimes> \\<one> \\<otimes> lift f ys2 = lift f (ys1 @ ys2)\""], ["proof (prove)\nusing this:\n  y = ys1 @ y1 # y2 # ys2\n  y \\<in> lists (UNIV \\<times> gens)\n  f \\<in> gens \\<rightarrow> carrier G\n\ngoal (1 subgoal):\n 1. lift f ys1 \\<otimes> \\<one> \\<otimes> lift f ys2 = lift f (ys1 @ ys2)", "by (auto intro:lift_append iff:lists_eq_set)"], ["proof (state)\nthis:\n  lift f ys1 \\<otimes> \\<one> \\<otimes> lift f ys2 = lift f (ys1 @ ys2)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "also"], ["proof (state)\nthis:\n  lift f ys1 \\<otimes> \\<one> \\<otimes> lift f ys2 = lift f (ys1 @ ys2)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "from \\<open>z = ys1 @ ys2\\<close>"], ["proof (chain)\npicking this:\n  z = ys1 @ ys2", "have \"lift f (ys1 @ ys2) = lift f z\""], ["proof (prove)\nusing this:\n  z = ys1 @ ys2\n\ngoal (1 subgoal):\n 1. lift f (ys1 @ ys2) = lift f z", "by simp"], ["proof (state)\nthis:\n  lift f (ys1 @ ys2) = lift f z\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x\n 2. \\<And>y z.\n       \\<lbrakk>cancels_to_1\\<^sup>*\\<^sup>* x y; cancels_to_1 y z;\n        \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n         f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n        \\<Longrightarrow> lift f x = lift f y;\n        x \\<in> lists (UNIV \\<times> gens);\n        f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n       \\<Longrightarrow> lift f x = lift f z", "finally"], ["proof (chain)\npicking this:\n  lift f x = lift f z", "show \"lift f x = lift f z\""], ["proof (prove)\nusing this:\n  lift f x = lift f z\n\ngoal (1 subgoal):\n 1. lift f x = lift f z", "."], ["proof (state)\nthis:\n  lift f x = lift f z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> lists (UNIV \\<times> gens);\n     f \\<in> gens \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> lift f x = lift f x", "qed auto"], ["", "lemma (in group) lift_is_hom:\n  assumes cl: \"f \\<in> gens \\<rightarrow> carrier G\"\n  shows \"lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "assume \"x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (state)\nthis:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "hence \"x \\<in> lists (UNIV \\<times> gens)\""], ["proof (prove)\nusing this:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. x \\<in> lists (UNIV \\<times> gens)", "unfolding free_group_def"], ["proof (prove)\nusing this:\n  x \\<in> carrier\n           \\<lparr>carrier =\n                     {l \\<in> lists (UNIV \\<times> gens). canceled l},\n              mult = \\<lambda>x y. Cancelation.normalize (x @ y),\n              one = []\\<rparr>\n\ngoal (1 subgoal):\n 1. x \\<in> lists (UNIV \\<times> gens)", "by simp"], ["proof (state)\nthis:\n  x \\<in> lists (UNIV \\<times> gens)\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "hence \"lift f x \\<in> carrier G\""], ["proof (prove)\nusing this:\n  x \\<in> lists (UNIV \\<times> gens)\n\ngoal (1 subgoal):\n 1. lift f x \\<in> carrier G", "by (induct x, auto simp add:lift_def lift_gi_closed[OF cl])"], ["proof (state)\nthis:\n  lift f x \\<in> carrier G\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "}"], ["proof (state)\nthis:\n  ?x4 \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n  lift f ?x4 \\<in> carrier G\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "moreover"], ["proof (state)\nthis:\n  ?x4 \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n  lift f ?x4 \\<in> carrier G\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "{"], ["proof (state)\nthis:\n  ?x4 \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n  lift f ?x4 \\<in> carrier G\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "assume \"x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (state)\nthis:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "assume \"y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (state)\nthis:\n  y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "from \\<open>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<close> and \\<open>y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n  y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>", "have \"x \\<in> lists (UNIV \\<times> gens)\" and \"y \\<in> lists (UNIV \\<times> gens)\""], ["proof (prove)\nusing this:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n  y \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. x \\<in> lists (UNIV \\<times> gens) &&&\n    y \\<in> lists (UNIV \\<times> gens)", "by (auto simp add:free_group_def)"], ["proof (state)\nthis:\n  x \\<in> lists (UNIV \\<times> gens)\n  y \\<in> lists (UNIV \\<times> gens)\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "have \"cancels_to (x @ y) (normalize (x @ y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cancels_to (x @ y) (Cancelation.normalize (x @ y))", "by simp"], ["proof (state)\nthis:\n  cancels_to (x @ y) (Cancelation.normalize (x @ y))\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "from \\<open>x \\<in> lists (UNIV \\<times> gens)\\<close> and \\<open>y \\<in> lists (UNIV \\<times> gens)\\<close>\n     and lift_cancels_to[THEN sym, OF \\<open>cancels_to (x @ y) (normalize (x @ y))\\<close>] and cl"], ["proof (chain)\npicking this:\n  x \\<in> lists (UNIV \\<times> gens)\n  y \\<in> lists (UNIV \\<times> gens)\n  \\<lbrakk>x @ y \\<in> lists (UNIV \\<times> ?gens1);\n   ?f1 \\<in> ?gens1 \\<rightarrow> carrier G\\<rbrakk>\n  \\<Longrightarrow> lift ?f1 (Cancelation.normalize (x @ y)) =\n                    lift ?f1 (x @ y)\n  f \\<in> gens \\<rightarrow> carrier G", "have \"lift f (x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y) = lift f (x @ y)\""], ["proof (prove)\nusing this:\n  x \\<in> lists (UNIV \\<times> gens)\n  y \\<in> lists (UNIV \\<times> gens)\n  \\<lbrakk>x @ y \\<in> lists (UNIV \\<times> ?gens1);\n   ?f1 \\<in> ?gens1 \\<rightarrow> carrier G\\<rbrakk>\n  \\<Longrightarrow> lift ?f1 (Cancelation.normalize (x @ y)) =\n                    lift ?f1 (x @ y)\n  f \\<in> gens \\<rightarrow> carrier G\n\ngoal (1 subgoal):\n 1. lift f (x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y) =\n    lift f (x @ y)", "by (auto simp add:free_group_def iff:lists_eq_set)"], ["proof (state)\nthis:\n  lift f (x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y) =\n  lift f (x @ y)\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "also"], ["proof (state)\nthis:\n  lift f (x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y) =\n  lift f (x @ y)\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "from \\<open>x \\<in> lists (UNIV \\<times> gens)\\<close> and \\<open>y \\<in> lists (UNIV \\<times> gens)\\<close> and cl"], ["proof (chain)\npicking this:\n  x \\<in> lists (UNIV \\<times> gens)\n  y \\<in> lists (UNIV \\<times> gens)\n  f \\<in> gens \\<rightarrow> carrier G", "have \"lift f (x @ y) = lift f x \\<otimes> lift f y\""], ["proof (prove)\nusing this:\n  x \\<in> lists (UNIV \\<times> gens)\n  y \\<in> lists (UNIV \\<times> gens)\n  f \\<in> gens \\<rightarrow> carrier G\n\ngoal (1 subgoal):\n 1. lift f (x @ y) = lift f x \\<otimes> lift f y", "by simp"], ["proof (state)\nthis:\n  lift f (x @ y) = lift f x \\<otimes> lift f y\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "finally"], ["proof (chain)\npicking this:\n  lift f (x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y) =\n  lift f x \\<otimes> lift f y", "have \"lift f (x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y) = lift f x \\<otimes> lift f y\""], ["proof (prove)\nusing this:\n  lift f (x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y) =\n  lift f x \\<otimes> lift f y\n\ngoal (1 subgoal):\n 1. lift f (x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y) =\n    lift f x \\<otimes> lift f y", "."], ["proof (state)\nthis:\n  lift f (x \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> y) =\n  lift f x \\<otimes> lift f y\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x4 \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n   ?y4 \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> lift f\n                     (?x4 \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                      ?y4) =\n                    lift f ?x4 \\<otimes> lift f ?y4\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "ultimately"], ["proof (chain)\npicking this:\n  ?x4 \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n  lift f ?x4 \\<in> carrier G\n  \\<lbrakk>?x4 \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n   ?y4 \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> lift f\n                     (?x4 \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                      ?y4) =\n                    lift f ?x4 \\<otimes> lift f ?y4", "show \"lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\""], ["proof (prove)\nusing this:\n  ?x4 \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n  lift f ?x4 \\<in> carrier G\n  \\<lbrakk>?x4 \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>;\n   ?y4 \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> lift f\n                     (?x4 \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n                      ?y4) =\n                    lift f ?x4 \\<otimes> lift f ?y4\n\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "by auto"], ["proof (state)\nthis:\n  lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gens_span_free_group:\nshows \"\\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> = carrier \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>\\<iota> `\n             gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> =\n    carrier \\<F>\\<^bsub>gens\\<^esub>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<subseteq> carrier \\<F>\\<^bsub>gens\\<^esub>\n 2. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> \\<langle>\\<iota> `\n                         gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "interpret group \"\\<F>\\<^bsub>gens\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group \\<F>\\<^bsub>gens\\<^esub>", "by (rule free_group_is_group)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<subseteq> carrier \\<F>\\<^bsub>gens\\<^esub>\n 2. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> \\<langle>\\<iota> `\n                         gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "show \"\\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<subseteq> carrier \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<subseteq> carrier \\<F>\\<^bsub>gens\\<^esub>", "by(rule gen_span_closed, auto simp add:insert_def free_group_def)"], ["proof (state)\nthis:\n  \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n  \\<subseteq> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> \\<langle>\\<iota> `\n                         gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "show \"carrier \\<F>\\<^bsub>gens\\<^esub>  \\<subseteq> \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier \\<F>\\<^bsub>gens\\<^esub>\n    \\<subseteq> \\<langle>\\<iota> `\n                         gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<in> \\<langle>\\<iota> `\n                        gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n       x \\<in> \\<langle>\\<iota> `\n                        gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "show \"x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow> x \\<in> \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n    x \\<in> \\<langle>\\<iota> `\n                     gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "proof(induct x)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n    [] \\<in> \\<langle>\\<iota> `\n                      gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n 2. \\<And>a x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n                x \\<in> \\<langle>\\<iota> `\n                                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>;\n        a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # x\n                         \\<in> \\<langle>\\<iota> `\n  gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "case Nil"], ["proof (state)\nthis:\n  [] \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (2 subgoals):\n 1. [] \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n    [] \\<in> \\<langle>\\<iota> `\n                      gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n 2. \\<And>a x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n                x \\<in> \\<langle>\\<iota> `\n                                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>;\n        a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # x\n                         \\<in> \\<langle>\\<iota> `\n  gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "have \"one \\<F>\\<^bsub>gens\\<^esub> \\<in> \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal (2 subgoals):\n 1. [] \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n    [] \\<in> \\<langle>\\<iota> `\n                      gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n 2. \\<And>a x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n                x \\<in> \\<langle>\\<iota> `\n                                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>;\n        a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # x\n                         \\<in> \\<langle>\\<iota> `\n  gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "thus \"[] \\<in> \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<one>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. [] \\<in> \\<langle>\\<iota> `\n                      gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "by (simp add:free_group_def)"], ["proof (state)\nthis:\n  [] \\<in> \\<langle>\\<iota> `\n                    gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n                x \\<in> \\<langle>\\<iota> `\n                                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>;\n        a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # x\n                         \\<in> \\<langle>\\<iota> `\n  gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n                x \\<in> \\<langle>\\<iota> `\n                                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>;\n        a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # x\n                         \\<in> \\<langle>\\<iota> `\n  gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "case (Cons a x)"], ["proof (state)\nthis:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n  x \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n  a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n                x \\<in> \\<langle>\\<iota> `\n                                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>;\n        a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # x\n                         \\<in> \\<langle>\\<iota> `\n  gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "from \\<open>a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>", "have \"x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (prove)\nusing this:\n  a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>", "by (auto intro:cons_canceled simp add:free_group_def)"], ["proof (state)\nthis:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n                x \\<in> \\<langle>\\<iota> `\n                                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>;\n        a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # x\n                         \\<in> \\<langle>\\<iota> `\n  gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "hence \"x \\<in> \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. x \\<in> \\<langle>\\<iota> `\n                     gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "using Cons"], ["proof (prove)\nusing this:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n  x \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n  a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. x \\<in> \\<langle>\\<iota> `\n                     gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  x \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n                x \\<in> \\<langle>\\<iota> `\n                                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>;\n        a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # x\n                         \\<in> \\<langle>\\<iota> `\n  gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "moreover"], ["proof (state)\nthis:\n  x \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n                x \\<in> \\<langle>\\<iota> `\n                                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>;\n        a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # x\n                         \\<in> \\<langle>\\<iota> `\n  gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "from \\<open>a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>", "have \"snd a \\<in> gens\""], ["proof (prove)\nusing this:\n  a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. snd a \\<in> gens", "by (auto simp add:free_group_def)"], ["proof (state)\nthis:\n  snd a \\<in> gens\n\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n                x \\<in> \\<langle>\\<iota> `\n                                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>;\n        a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # x\n                         \\<in> \\<langle>\\<iota> `\n  gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "hence isa: \"\\<iota> (snd a) \\<in> \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  snd a \\<in> gens\n\ngoal (1 subgoal):\n 1. \\<iota> (snd a)\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "by (auto simp add:insert_def intro:gen_gens)"], ["proof (state)\nthis:\n  \\<iota> (snd a)\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n                x \\<in> \\<langle>\\<iota> `\n                                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>;\n        a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # x\n                         \\<in> \\<langle>\\<iota> `\n  gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "have \"[a] \\<in> \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "proof(cases \"fst a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fst a \\<Longrightarrow>\n    [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n 2. \\<not> fst a \\<Longrightarrow>\n    [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "case False"], ["proof (state)\nthis:\n  \\<not> fst a\n\ngoal (2 subgoals):\n 1. fst a \\<Longrightarrow>\n    [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n 2. \\<not> fst a \\<Longrightarrow>\n    [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "hence \"[a] = \\<iota> (snd a)\""], ["proof (prove)\nusing this:\n  \\<not> fst a\n\ngoal (1 subgoal):\n 1. [a] = \\<iota> (snd a)", "by (cases a, auto simp add:insert_def)"], ["proof (state)\nthis:\n  [a] = \\<iota> (snd a)\n\ngoal (2 subgoals):\n 1. fst a \\<Longrightarrow>\n    [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n 2. \\<not> fst a \\<Longrightarrow>\n    [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "with isa"], ["proof (chain)\npicking this:\n  \\<iota> (snd a)\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n  [a] = \\<iota> (snd a)", "show \"[a] \\<in> \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<iota> (snd a)\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n  [a] = \\<iota> (snd a)\n\ngoal (1 subgoal):\n 1. [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  [a]\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. fst a \\<Longrightarrow>\n    [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. fst a \\<Longrightarrow>\n    [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "case True"], ["proof (state)\nthis:\n  fst a\n\ngoal (1 subgoal):\n 1. fst a \\<Longrightarrow>\n    [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "from \\<open>snd a \\<in> gens\\<close>"], ["proof (chain)\npicking this:\n  snd a \\<in> gens", "have \"\\<iota> (snd a) \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (prove)\nusing this:\n  snd a \\<in> gens\n\ngoal (1 subgoal):\n 1. \\<iota> (snd a) \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>", "by (auto simp add:free_group_def insert_def)"], ["proof (state)\nthis:\n  \\<iota> (snd a) \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. fst a \\<Longrightarrow>\n    [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "with True"], ["proof (chain)\npicking this:\n  fst a\n  \\<iota> (snd a) \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>", "have \"[a] = inv\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> (\\<iota> (snd a))\""], ["proof (prove)\nusing this:\n  fst a\n  \\<iota> (snd a) \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (1 subgoal):\n 1. [a] = inv\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<iota> (snd a)", "by (cases a, auto simp add:insert_def inv_fg_def inv1_def)"], ["proof (state)\nthis:\n  [a] = inv\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<iota> (snd a)\n\ngoal (1 subgoal):\n 1. fst a \\<Longrightarrow>\n    [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "moreover"], ["proof (state)\nthis:\n  [a] = inv\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<iota> (snd a)\n\ngoal (1 subgoal):\n 1. fst a \\<Longrightarrow>\n    [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "from isa"], ["proof (chain)\npicking this:\n  \\<iota> (snd a)\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "have \"inv\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> (\\<iota> (snd a)) \\<in> \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<iota> (snd a)\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. inv\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<iota> (snd a)\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "by (auto intro:gen_inv)"], ["proof (state)\nthis:\n  inv\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<iota> (snd a)\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. fst a \\<Longrightarrow>\n    [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "ultimately"], ["proof (chain)\npicking this:\n  [a] = inv\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<iota> (snd a)\n  inv\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<iota> (snd a)\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "show \"[a] \\<in> \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  [a] = inv\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<iota> (snd a)\n  inv\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> \\<iota> (snd a)\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. [a]\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  [a]\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  [a]\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n                x \\<in> \\<langle>\\<iota> `\n                                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>;\n        a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # x\n                         \\<in> \\<langle>\\<iota> `\n  gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n  [a]\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "have \"mult \\<F>\\<^bsub>gens\\<^esub> [a] x \\<in> \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  x \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n  [a]\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. [a] \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> x\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "by (auto intro:gen_mult)"], ["proof (state)\nthis:\n  [a] \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> x\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n                x \\<in> \\<langle>\\<iota> `\n                                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>;\n        a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> a # x\n                         \\<in> \\<langle>\\<iota> `\n  gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "with\n      \\<open>a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n  [a] \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> x\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "show \"a # x \\<in> \\<langle>\\<iota> ` gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  a # x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>\n  [a] \\<otimes>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub> x\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. a # x\n    \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>", "by (simp add:free_group_def)"], ["proof (state)\nthis:\n  a # x\n  \\<in> \\<langle>\\<iota> `\n                 gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub> \\<Longrightarrow>\n  x \\<in> \\<langle>\\<iota> `\n                   gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  carrier \\<F>\\<^bsub>gens\\<^esub>\n  \\<subseteq> \\<langle>\\<iota> `\n                       gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) lift_is_unique:\n  assumes \"group G\"\n  and cl: \"f \\<in> gens \\<rightarrow> carrier G\"\n  and \"h \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\"\n  and \"\\<forall> g \\<in> gens. h (\\<iota> g) = f g\"\n  shows \"\\<forall>x \\<in> carrier \\<F>\\<^bsub>gens\\<^esub>. h x = lift f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>carrier \\<F>\\<^bsub>gens\\<^esub>. h x = lift f x", "unfolding gens_span_free_group[THEN sym]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<langle>\\<iota> `\n                            gens\\<rangle>\\<^bsub>\\<F>\\<^bsub>gens\\<^esub>\\<^esub>.\n       h x = lift f x", "proof(rule hom_unique_on_span[of \"\\<F>\\<^bsub>gens\\<^esub>\" G])"], ["proof (state)\ngoal (6 subgoals):\n 1. Group.group \\<F>\\<^bsub>gens\\<^esub>\n 2. Group.group G\n 3. \\<iota> ` gens \\<subseteq> carrier \\<F>\\<^bsub>gens\\<^esub>\n 4. h \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 5. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 6. \\<forall>g\\<in>\\<iota> ` gens. h g = lift f g", "show \"group \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group \\<F>\\<^bsub>gens\\<^esub>", "by (rule free_group_is_group)"], ["proof (state)\nthis:\n  Group.group \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (5 subgoals):\n 1. Group.group G\n 2. \\<iota> ` gens \\<subseteq> carrier \\<F>\\<^bsub>gens\\<^esub>\n 3. h \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 4. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 5. \\<forall>g\\<in>\\<iota> ` gens. h g = lift f g", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. Group.group G\n 2. \\<iota> ` gens \\<subseteq> carrier \\<F>\\<^bsub>gens\\<^esub>\n 3. h \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 4. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 5. \\<forall>g\\<in>\\<iota> ` gens. h g = lift f g", "show \"group G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group G", "by fact"], ["proof (state)\nthis:\n  Group.group G\n\ngoal (4 subgoals):\n 1. \\<iota> ` gens \\<subseteq> carrier \\<F>\\<^bsub>gens\\<^esub>\n 2. h \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 3. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 4. \\<forall>g\\<in>\\<iota> ` gens. h g = lift f g", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<iota> ` gens \\<subseteq> carrier \\<F>\\<^bsub>gens\\<^esub>\n 2. h \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 3. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 4. \\<forall>g\\<in>\\<iota> ` gens. h g = lift f g", "show \"\\<iota> ` gens \\<subseteq> carrier \\<F>\\<^bsub>gens\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> ` gens \\<subseteq> carrier \\<F>\\<^bsub>gens\\<^esub>", "by(auto intro:insert_closed)"], ["proof (state)\nthis:\n  \\<iota> ` gens \\<subseteq> carrier \\<F>\\<^bsub>gens\\<^esub>\n\ngoal (3 subgoals):\n 1. h \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 2. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 3. \\<forall>g\\<in>\\<iota> ` gens. h g = lift f g", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. h \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 2. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 3. \\<forall>g\\<in>\\<iota> ` gens. h g = lift f g", "show \"h \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "by fact"], ["proof (state)\nthis:\n  h \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n\ngoal (2 subgoals):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 2. \\<forall>g\\<in>\\<iota> ` gens. h g = lift f g", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n 2. \\<forall>g\\<in>\\<iota> ` gens. h g = lift f g", "show \"lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G", "by (rule lift_is_hom[OF cl])"], ["proof (state)\nthis:\n  lift f \\<in> hom \\<F>\\<^bsub>gens\\<^esub> G\n\ngoal (1 subgoal):\n 1. \\<forall>g\\<in>\\<iota> ` gens. h g = lift f g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>g\\<in>\\<iota> ` gens. h g = lift f g", "from \\<open>\\<forall>g\\<in> gens. h (\\<iota> g) = f g\\<close> and cl[THEN funcset_image]"], ["proof (chain)\npicking this:\n  \\<forall>g\\<in>gens. h (\\<iota> g) = f g\n  f ` gens \\<subseteq> carrier G", "show \"\\<forall>g\\<in> \\<iota> ` gens. h g = lift f g\""], ["proof (prove)\nusing this:\n  \\<forall>g\\<in>gens. h (\\<iota> g) = f g\n  f ` gens \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. \\<forall>g\\<in>\\<iota> ` gens. h g = lift f g", "by(auto simp add:insert_def lift_def lift_gi_def)"], ["proof (state)\nthis:\n  \\<forall>g\\<in>\\<iota> ` gens. h g = lift f g\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}