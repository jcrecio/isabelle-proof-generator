{"file_name": "/home/qj213/afp-2021-10-22/thys/Rank_Nullity_Theorem/Dual_Order.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Rank_Nullity_Theorem", "problem_names": ["lemma wf_wellorderI2:\n  assumes wf: \"wf {(x::'a::ord, y). y < x}\"\n  assumes lin: \"class.linorder (\\<lambda>(x::'a) y::'a. y \\<le> x) (\\<lambda>(x::'a) y::'a. y < x)\"\n  shows \"class.wellorder (\\<lambda>(x::'a) y::'a. y \\<le> x) (\\<lambda>(x::'a) y::'a. y < x)\"", "lemma (in preorder) tranclp_less': \"(>)\\<^sup>+\\<^sup>+ = (>)\"", "lemma dual_wellorder_Least_eq_Greatest[simp]: \"dual_wellorder.Least = Greatest\"", "lemmas GreatestI = dual_wellorder.LeastI[unfolded dual_wellorder_Least_eq_Greatest]", "lemmas GreatestI2_ex = dual_wellorder.LeastI2_ex[unfolded dual_wellorder_Least_eq_Greatest]", "lemmas GreatestI2_wellorder = dual_wellorder.LeastI2_wellorder[unfolded dual_wellorder_Least_eq_Greatest]", "lemmas GreatestI_ex = dual_wellorder.LeastI_ex[unfolded dual_wellorder_Least_eq_Greatest]", "lemmas not_greater_Greatest = dual_wellorder.not_less_Least[unfolded dual_wellorder_Least_eq_Greatest]", "lemmas GreatestI2 = dual_wellorder.LeastI2[unfolded dual_wellorder_Least_eq_Greatest]", "lemmas Greatest_ge = dual_wellorder.Least_le[unfolded dual_wellorder_Least_eq_Greatest]"], "translations": [["", "lemma wf_wellorderI2:\n  assumes wf: \"wf {(x::'a::ord, y). y < x}\"\n  assumes lin: \"class.linorder (\\<lambda>(x::'a) y::'a. y \\<le> x) (\\<lambda>(x::'a) y::'a. y < x)\"\n  shows \"class.wellorder (\\<lambda>(x::'a) y::'a. y \\<le> x) (\\<lambda>(x::'a) y::'a. y < x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.wellorder (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x)", "using lin"], ["proof (prove)\nusing this:\n  class.linorder (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x)\n\ngoal (1 subgoal):\n 1. class.wellorder (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x)", "unfolding class.wellorder_def"], ["proof (prove)\nusing this:\n  class.linorder (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x)\n\ngoal (1 subgoal):\n 1. class.linorder (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x) \\<and>\n    class.wellorder_axioms (\\<lambda>x y. y < x)", "apply (rule conjI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.wellorder_axioms (\\<lambda>x y. y < x)", "apply (rule class.wellorder_axioms.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P a.\n       (\\<And>x.\n           (\\<And>y. x < y \\<Longrightarrow> P y) \\<Longrightarrow>\n           P x) \\<Longrightarrow>\n       P a", "by (blast intro: wf_induct_rule [OF wf])"], ["", "lemma (in preorder) tranclp_less': \"(>)\\<^sup>+\\<^sup>+ = (>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y. y < x)\\<^sup>+\\<^sup>+ = (\\<lambda>x y. y < x)", "by(auto simp add: fun_eq_iff intro: less_trans elim: tranclp.induct)"], ["", "interpretation dual_wellorder: wellorder \"(\\<ge>)::('a::{linorder, finite}=>'a=>bool)\" \"(>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.wellorder (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x)", "proof (rule wf_wellorderI2)"], ["proof (state)\ngoal (2 subgoals):\n 1. wf {(x, y). y < x}\n 2. class.linorder (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x)", "show \"wf {(x :: 'a, y). y < x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(x, y). y < x}", "by(auto simp add: trancl_def tranclp_less' intro!: finite_acyclic_wf acyclicI)"], ["proof (state)\nthis:\n  wf {(x, y). y < x}\n\ngoal (1 subgoal):\n 1. class.linorder (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x)", "show \"class.linorder (\\<lambda>(x::'a) y::'a. y \\<le> x) (\\<lambda>(x::'a) y::'a. y < x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x)", "unfolding class.linorder_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.order (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x) \\<and>\n    class.linorder_axioms (\\<lambda>x y. y \\<le> x)", "unfolding class.linorder_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.order (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x) \\<and>\n    (\\<forall>x y. y \\<le> x \\<or> x \\<le> y)", "unfolding class.order_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (class.preorder (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x) \\<and>\n     class.order_axioms (\\<lambda>x y. y \\<le> x)) \\<and>\n    (\\<forall>x y. y \\<le> x \\<or> x \\<le> y)", "unfolding class.preorder_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<forall>x y. (y < x) = (y \\<le> x \\<and> \\<not> x \\<le> y)) \\<and>\n      (\\<forall>x. x \\<le> x) \\<and>\n      (\\<forall>x y z.\n          y \\<le> x \\<longrightarrow>\n          z \\<le> y \\<longrightarrow> z \\<le> x)) \\<and>\n     class.order_axioms (\\<lambda>x y. y \\<le> x)) \\<and>\n    (\\<forall>x y. y \\<le> x \\<or> x \\<le> y)", "unfolding class.order_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<forall>x y. (y < x) = (y \\<le> x \\<and> \\<not> x \\<le> y)) \\<and>\n      (\\<forall>x. x \\<le> x) \\<and>\n      (\\<forall>x y z.\n          y \\<le> x \\<longrightarrow>\n          z \\<le> y \\<longrightarrow> z \\<le> x)) \\<and>\n     (\\<forall>x y.\n         y \\<le> x \\<longrightarrow>\n         x \\<le> y \\<longrightarrow> x = y)) \\<and>\n    (\\<forall>x y. y \\<le> x \\<or> x \\<le> y)", "by auto"], ["proof (state)\nthis:\n  class.linorder (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Properties of the Greatest operator\\<close>"], ["", "lemma dual_wellorder_Least_eq_Greatest[simp]: \"dual_wellorder.Least = Greatest\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual_wellorder.Least = Greatest", "by (auto simp add: Greatest_def dual_wellorder.Least_def)"], ["", "lemmas GreatestI = dual_wellorder.LeastI[unfolded dual_wellorder_Least_eq_Greatest]"], ["", "lemmas GreatestI2_ex = dual_wellorder.LeastI2_ex[unfolded dual_wellorder_Least_eq_Greatest]"], ["", "lemmas GreatestI2_wellorder = dual_wellorder.LeastI2_wellorder[unfolded dual_wellorder_Least_eq_Greatest]"], ["", "lemmas GreatestI_ex = dual_wellorder.LeastI_ex[unfolded dual_wellorder_Least_eq_Greatest]"], ["", "lemmas not_greater_Greatest = dual_wellorder.not_less_Least[unfolded dual_wellorder_Least_eq_Greatest]"], ["", "lemmas GreatestI2 = dual_wellorder.LeastI2[unfolded dual_wellorder_Least_eq_Greatest]"], ["", "lemmas Greatest_ge = dual_wellorder.Least_le[unfolded dual_wellorder_Least_eq_Greatest]"], ["", "end"]]}