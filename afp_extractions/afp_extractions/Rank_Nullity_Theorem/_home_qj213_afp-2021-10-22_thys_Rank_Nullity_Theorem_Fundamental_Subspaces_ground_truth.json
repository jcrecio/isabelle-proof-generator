{"file_name": "/home/qj213/afp-2021-10-22/thys/Rank_Nullity_Theorem/Fundamental_Subspaces.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Rank_Nullity_Theorem", "problem_names": ["lemma left_null_space_eq_null_space_transpose: \"left_null_space A = null_space (transpose A)\"", "lemma null_space_eq_left_null_space_transpose: \"null_space A = left_null_space (transpose A)\"", "lemma row_space_eq_col_space_transpose:\n  fixes A::\"'a::{field}^'columns^'rows\"\n  shows \"row_space A = col_space (transpose A)\"", "lemma col_space_eq_row_space_transpose:\n  fixes A::\"'a::{field}^'n^'m\"\n  shows \"col_space A = row_space (transpose A)\"", "lemma subspace_null_space:\n  fixes A::\"'a::{field}^'n^'m\"\n  shows \"vec.subspace (null_space A)\"", "lemma subspace_left_null_space:\n  fixes A::\"'a::{field}^'n^'m\"\n  shows \"vec.subspace (left_null_space A)\"", "lemma subspace_row_space:\n  shows \"vec.subspace (row_space A)\"", "lemma subspace_col_space:\n  shows \"vec.subspace (col_space A)\"", "lemma col_space_eq:\n  fixes A::\"'a::{field}^'m::{finite, wellorder}^'n\"\n  shows \"col_space A = {y. \\<exists>x. A *v x = y}\"", "lemma row_space_eq:\n  fixes A::\"'a::{field}^'m^'n::{finite, wellorder}\"\n  shows \"row_space A = {w. \\<exists>y. (transpose A) *v y = w}\"", "lemma null_space_eq_ker:\n  fixes f::\"('a::field^'n) => ('a^'m)\"\n  assumes lf: \"Vector_Spaces.linear (*s) (*s) f\"\n  shows \"null_space (matrix f) = {x. f x = 0}\"", "lemma col_space_eq_range:\n  fixes f::\"('a::field^'n::{finite, wellorder}) \\<Rightarrow> ('a^'m)\"\n  assumes lf: \"Vector_Spaces.linear (*s) (*s) f\"\n  shows \"col_space (matrix f) = range f\"", "lemma null_space_is_preserved:\n  fixes A::\"'a::{field}^'cols^'rows\"\n  assumes P: \"invertible P\"\n  shows \"null_space (P**A) = null_space A\"", "lemma row_space_is_preserved:\n  fixes A::\"'a::{field}^'cols^'rows::{finite, wellorder}\" \n    and P::\"'a::{field}^'rows::{finite, wellorder}^'rows::{finite, wellorder}\"\n  assumes P: \"invertible P\"\n  shows \"row_space (P**A) = row_space A\""], "translations": [["", "lemma left_null_space_eq_null_space_transpose: \"left_null_space A = null_space (transpose A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_null_space A = null_space (Finite_Cartesian_Product.transpose A)", "unfolding null_space_def left_null_space_def transpose_vector"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. Finite_Cartesian_Product.transpose A *v x = 0} =\n    {x. Finite_Cartesian_Product.transpose A *v x = 0}", ".."], ["", "lemma null_space_eq_left_null_space_transpose: \"null_space A = left_null_space (transpose A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. null_space A = left_null_space (Finite_Cartesian_Product.transpose A)", "using left_null_space_eq_null_space_transpose[of \"transpose A\"]"], ["proof (prove)\nusing this:\n  left_null_space (Finite_Cartesian_Product.transpose A) =\n  null_space\n   (Finite_Cartesian_Product.transpose\n     (Finite_Cartesian_Product.transpose A))\n\ngoal (1 subgoal):\n 1. null_space A = left_null_space (Finite_Cartesian_Product.transpose A)", "unfolding transpose_transpose"], ["proof (prove)\nusing this:\n  left_null_space (Finite_Cartesian_Product.transpose A) = null_space A\n\ngoal (1 subgoal):\n 1. null_space A = left_null_space (Finite_Cartesian_Product.transpose A)", ".."], ["", "lemma row_space_eq_col_space_transpose:\n  fixes A::\"'a::{field}^'columns^'rows\"\n  shows \"row_space A = col_space (transpose A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_space A = col_space (Finite_Cartesian_Product.transpose A)", "unfolding col_space_def row_space_def columns_transpose[of A]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.span (rows A) = vec.span (rows A)", ".."], ["", "lemma col_space_eq_row_space_transpose:\n  fixes A::\"'a::{field}^'n^'m\"\n  shows \"col_space A = row_space (transpose A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col_space A = row_space (Finite_Cartesian_Product.transpose A)", "unfolding col_space_def row_space_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.span (columns A) =\n    vec.span (rows (Finite_Cartesian_Product.transpose A))", "unfolding rows_transpose[of A]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.span (columns A) = vec.span (columns A)", ".."], ["", "subsection\\<open>Proving that they are subspaces\\<close>"], ["", "lemma subspace_null_space:\n  fixes A::\"'a::{field}^'n^'m\"\n  shows \"vec.subspace (null_space A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.subspace (null_space A)", "by (auto simp: vec.subspace_def null_space_def vec.scale vec.add)"], ["", "lemma subspace_left_null_space:\n  fixes A::\"'a::{field}^'n^'m\"\n  shows \"vec.subspace (left_null_space A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.subspace (left_null_space A)", "unfolding left_null_space_eq_null_space_transpose"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.subspace (null_space (Finite_Cartesian_Product.transpose A))", "using subspace_null_space"], ["proof (prove)\nusing this:\n  vec.subspace (null_space ?A)\n\ngoal (1 subgoal):\n 1. vec.subspace (null_space (Finite_Cartesian_Product.transpose A))", "."], ["", "lemma subspace_row_space:\n  shows \"vec.subspace (row_space A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.subspace (row_space A)", "by (metis row_space_def vec.subspace_span)"], ["", "lemma subspace_col_space:\n  shows \"vec.subspace (col_space A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec.subspace (col_space A)", "by (metis col_space_def vec.subspace_span)"], ["", "subsection\\<open>More useful properties and equivalences\\<close>"], ["", "lemma col_space_eq:\n  fixes A::\"'a::{field}^'m::{finite, wellorder}^'n\"\n  shows \"col_space A = {y. \\<exists>x. A *v x = y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col_space A = {y. \\<exists>x. A *v x = y}", "proof (unfold col_space_def vec.span_finite[OF finite_columns], auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u. \\<exists>x. A *v x = (\\<Sum>v\\<in>columns A. u v *s v)\n 2. \\<And>xa.\n       A *v xa \\<in> range (\\<lambda>u. \\<Sum>v\\<in>columns A. u v *s v)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u. \\<exists>x. A *v x = (\\<Sum>v\\<in>columns A. u v *s v)\n 2. \\<And>xa.\n       A *v xa \\<in> range (\\<lambda>u. \\<Sum>v\\<in>columns A. u v *s v)", "show \"A *v x \\<in> range (\\<lambda>u. \\<Sum>v\\<in>columns A. u v *s v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *v x \\<in> range (\\<lambda>u. \\<Sum>v\\<in>columns A. u v *s v)", "using matrix_vmult_column_sum[of A x]"], ["proof (prove)\nusing this:\n  \\<exists>f. A *v x = (\\<Sum>y\\<in>columns A. f y *s y)\n\ngoal (1 subgoal):\n 1. A *v x \\<in> range (\\<lambda>u. \\<Sum>v\\<in>columns A. u v *s v)", "by auto"], ["proof (state)\nthis:\n  A *v x \\<in> range (\\<lambda>u. \\<Sum>v\\<in>columns A. u v *s v)\n\ngoal (1 subgoal):\n 1. \\<And>u. \\<exists>x. A *v x = (\\<Sum>v\\<in>columns A. u v *s v)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. \\<exists>x. A *v x = (\\<Sum>v\\<in>columns A. u v *s v)", "fix u::\"('a, 'n) vec \\<Rightarrow> 'a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. \\<exists>x. A *v x = (\\<Sum>v\\<in>columns A. u v *s v)", "let ?g=\"\\<lambda>y. {i. y=column i A}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. \\<exists>x. A *v x = (\\<Sum>v\\<in>columns A. u v *s v)", "let ?x=\"(\\<chi> i. if i=(LEAST a. a \\<in> ?g (column i A)) then u (column i A) else 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u. \\<exists>x. A *v x = (\\<Sum>v\\<in>columns A. u v *s v)", "show \"\\<exists>x. A *v x = (\\<Sum>v\\<in>columns A. u v *s v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. A *v x = (\\<Sum>v\\<in>columns A. u v *s v)", "proof (unfold matrix_mult_sum, rule exI[of _ \"?x\"], auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>UNIV.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    (\\<Sum>v\\<in>columns A. u v *s v)", "have inj: \"inj_on ?g (columns A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>y. {i. y = column i A}) (columns A)", "unfolding inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>columns A.\n       \\<forall>y\\<in>columns A.\n          {i. x = column i A} = {i. y = column i A} \\<longrightarrow> x = y", "unfolding columns_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{column i A |i. i \\<in> UNIV}.\n       \\<forall>y\\<in>{column i A |i. i \\<in> UNIV}.\n          {i. x = column i A} = {i. y = column i A} \\<longrightarrow> x = y", "by auto"], ["proof (state)\nthis:\n  inj_on (\\<lambda>y. {i. y = column i A}) (columns A)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>UNIV.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    (\\<Sum>v\\<in>columns A. u v *s v)", "have union_univ: \"\\<Union>(?g`(columns A)) = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>y\\<in>columns A. {i. y = column i A}) = UNIV", "unfolding columns_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>y\\<in>{column i A |i. i \\<in> UNIV}. {i. y = column i A}) =\n    UNIV", "by auto"], ["proof (state)\nthis:\n  (\\<Union>y\\<in>columns A. {i. y = column i A}) = UNIV\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>UNIV.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    (\\<Sum>v\\<in>columns A. u v *s v)", "have \"sum (\\<lambda>i.(if i = (LEAST a. column i A = column a A) then u (column i A) else 0) *s column i A) UNIV \n        = sum (\\<lambda>i. (if i = (LEAST a. column i A = column a A) then u (column i A) else 0) *s column i A) (\\<Union>(?g`(columns A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>UNIV.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    (\\<Sum>i\\<in>(\\<Union>y\\<in>columns A. {i. y = column i A}).\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A)", "unfolding union_univ"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>UNIV.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    (\\<Sum>i\\<in>UNIV.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A)", ".."], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>UNIV.\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A) =\n  (\\<Sum>i\\<in>(\\<Union>y\\<in>columns A. {i. y = column i A}).\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>UNIV.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    (\\<Sum>v\\<in>columns A. u v *s v)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>UNIV.\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A) =\n  (\\<Sum>i\\<in>(\\<Union>y\\<in>columns A. {i. y = column i A}).\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>UNIV.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    (\\<Sum>v\\<in>columns A. u v *s v)", "have \"... = sum (sum (\\<lambda>i.(if i = (LEAST a. column i A = column a A) then u (column i A) else 0) *s column i A)) (?g`(columns A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>(\\<Union>y\\<in>columns A. {i. y = column i A}).\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    sum (sum (\\<lambda>i.\n                 (if i = (LEAST a. column i A = column a A)\n                  then u (column i A) else (0::'a)) *s\n                 column i A))\n     ((\\<lambda>y. {i. y = column i A}) ` columns A)", "by (rule sum.Union_disjoint[unfolded o_def], auto)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>(\\<Union>y\\<in>columns A. {i. y = column i A}).\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A) =\n  sum (sum (\\<lambda>i.\n               (if i = (LEAST a. column i A = column a A)\n                then u (column i A) else (0::'a)) *s\n               column i A))\n   ((\\<lambda>y. {i. y = column i A}) ` columns A)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>UNIV.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    (\\<Sum>v\\<in>columns A. u v *s v)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>(\\<Union>y\\<in>columns A. {i. y = column i A}).\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A) =\n  sum (sum (\\<lambda>i.\n               (if i = (LEAST a. column i A = column a A)\n                then u (column i A) else (0::'a)) *s\n               column i A))\n   ((\\<lambda>y. {i. y = column i A}) ` columns A)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>UNIV.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    (\\<Sum>v\\<in>columns A. u v *s v)", "have \"... = sum ((sum (\\<lambda>i.(if i = (LEAST a. column i A = column a A) then u (column i A) else 0) *s column i A)) \\<circ> ?g) \n        (columns A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (sum (\\<lambda>i.\n                 (if i = (LEAST a. column i A = column a A)\n                  then u (column i A) else (0::'a)) *s\n                 column i A))\n     ((\\<lambda>y. {i. y = column i A}) ` columns A) =\n    sum (sum (\\<lambda>i.\n                 (if i = (LEAST a. column i A = column a A)\n                  then u (column i A) else (0::'a)) *s\n                 column i A) \\<circ>\n         (\\<lambda>y. {i. y = column i A}))\n     (columns A)", "by (rule sum.reindex, simp add: inj)"], ["proof (state)\nthis:\n  sum (sum (\\<lambda>i.\n               (if i = (LEAST a. column i A = column a A)\n                then u (column i A) else (0::'a)) *s\n               column i A))\n   ((\\<lambda>y. {i. y = column i A}) ` columns A) =\n  sum (sum (\\<lambda>i.\n               (if i = (LEAST a. column i A = column a A)\n                then u (column i A) else (0::'a)) *s\n               column i A) \\<circ>\n       (\\<lambda>y. {i. y = column i A}))\n   (columns A)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>UNIV.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    (\\<Sum>v\\<in>columns A. u v *s v)", "also"], ["proof (state)\nthis:\n  sum (sum (\\<lambda>i.\n               (if i = (LEAST a. column i A = column a A)\n                then u (column i A) else (0::'a)) *s\n               column i A))\n   ((\\<lambda>y. {i. y = column i A}) ` columns A) =\n  sum (sum (\\<lambda>i.\n               (if i = (LEAST a. column i A = column a A)\n                then u (column i A) else (0::'a)) *s\n               column i A) \\<circ>\n       (\\<lambda>y. {i. y = column i A}))\n   (columns A)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>UNIV.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    (\\<Sum>v\\<in>columns A. u v *s v)", "have \"... = sum (\\<lambda>y. u y *s y) (columns A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (sum (\\<lambda>i.\n                 (if i = (LEAST a. column i A = column a A)\n                  then u (column i A) else (0::'a)) *s\n                 column i A) \\<circ>\n         (\\<lambda>y. {i. y = column i A}))\n     (columns A) =\n    (\\<Sum>y\\<in>columns A. u y *s y)", "proof (rule sum.cong, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       (\\<Sum>i | x = column i A.\n          (if i = (LEAST a. column i A = column a A) then u (column i A)\n           else (0::'a)) *s\n          column i A) =\n       u x *s x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       (\\<Sum>i | x = column i A.\n          (if i = (LEAST a. column i A = column a A) then u (column i A)\n           else (0::'a)) *s\n          column i A) =\n       u x *s x", "assume x_in_cols: \"x \\<in> columns A\""], ["proof (state)\nthis:\n  x \\<in> columns A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       (\\<Sum>i | x = column i A.\n          (if i = (LEAST a. column i A = column a A) then u (column i A)\n           else (0::'a)) *s\n          column i A) =\n       u x *s x", "obtain b where b: \"x=column b A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b. x = column b A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using x_in_cols"], ["proof (prove)\nusing this:\n  x \\<in> columns A\n\ngoal (1 subgoal):\n 1. (\\<And>b. x = column b A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding columns_def"], ["proof (prove)\nusing this:\n  x \\<in> {column i A |i. i \\<in> UNIV}\n\ngoal (1 subgoal):\n 1. (\\<And>b. x = column b A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = column b A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       (\\<Sum>i | x = column i A.\n          (if i = (LEAST a. column i A = column a A) then u (column i A)\n           else (0::'a)) *s\n          column i A) =\n       u x *s x", "let ?f=\"(\\<lambda>i. (if i = (LEAST a. column i A = column a A) then u (column i A) else 0) *s column i A)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       (\\<Sum>i | x = column i A.\n          (if i = (LEAST a. column i A = column a A) then u (column i A)\n           else (0::'a)) *s\n          column i A) =\n       u x *s x", "have sum_rw: \"sum ?f ({i. x = column i A} - {LEAST a. x = column a A}) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>{i. x = column i A} - {LEAST a. x = column a A}.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    0", "by (rule sum.neutral, auto)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>{i. x = column i A} - {LEAST a. x = column a A}.\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A) =\n  0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       (\\<Sum>i | x = column i A.\n          (if i = (LEAST a. column i A = column a A) then u (column i A)\n           else (0::'a)) *s\n          column i A) =\n       u x *s x", "have \"sum ?f {i. x = column i A} = ?f (LEAST a. x = column a A) + sum ?f ({i. x = column i A} - {LEAST a. x = column a A})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i | x = column i A.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    (if (LEAST a. x = column a A) =\n        (LEAST a. column (LEAST a. x = column a A) A = column a A)\n     then u (column (LEAST a. x = column a A) A) else (0::'a)) *s\n    column (LEAST a. x = column a A) A +\n    (\\<Sum>i\\<in>{i. x = column i A} - {LEAST a. x = column a A}.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A)", "apply (rule sum.remove, auto, rule LeastI_ex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xa. x = column xa A", "using x_in_cols"], ["proof (prove)\nusing this:\n  x \\<in> columns A\n\ngoal (1 subgoal):\n 1. \\<exists>xa. x = column xa A", "unfolding columns_def"], ["proof (prove)\nusing this:\n  x \\<in> {column i A |i. i \\<in> UNIV}\n\ngoal (1 subgoal):\n 1. \\<exists>xa. x = column xa A", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i | x = column i A.\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A) =\n  (if (LEAST a. x = column a A) =\n      (LEAST a. column (LEAST a. x = column a A) A = column a A)\n   then u (column (LEAST a. x = column a A) A) else (0::'a)) *s\n  column (LEAST a. x = column a A) A +\n  (\\<Sum>i\\<in>{i. x = column i A} - {LEAST a. x = column a A}.\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       (\\<Sum>i | x = column i A.\n          (if i = (LEAST a. column i A = column a A) then u (column i A)\n           else (0::'a)) *s\n          column i A) =\n       u x *s x", "also"], ["proof (state)\nthis:\n  (\\<Sum>i | x = column i A.\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A) =\n  (if (LEAST a. x = column a A) =\n      (LEAST a. column (LEAST a. x = column a A) A = column a A)\n   then u (column (LEAST a. x = column a A) A) else (0::'a)) *s\n  column (LEAST a. x = column a A) A +\n  (\\<Sum>i\\<in>{i. x = column i A} - {LEAST a. x = column a A}.\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       (\\<Sum>i | x = column i A.\n          (if i = (LEAST a. column i A = column a A) then u (column i A)\n           else (0::'a)) *s\n          column i A) =\n       u x *s x", "have \"... = ?f (LEAST a. x = column a A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if (LEAST a. x = column a A) =\n        (LEAST a. column (LEAST a. x = column a A) A = column a A)\n     then u (column (LEAST a. x = column a A) A) else (0::'a)) *s\n    column (LEAST a. x = column a A) A +\n    (\\<Sum>i\\<in>{i. x = column i A} - {LEAST a. x = column a A}.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    (if (LEAST a. x = column a A) =\n        (LEAST a. column (LEAST a. x = column a A) A = column a A)\n     then u (column (LEAST a. x = column a A) A) else (0::'a)) *s\n    column (LEAST a. x = column a A) A", "unfolding sum_rw"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if (LEAST a. x = column a A) =\n        (LEAST a. column (LEAST a. x = column a A) A = column a A)\n     then u (column (LEAST a. x = column a A) A) else (0::'a)) *s\n    column (LEAST a. x = column a A) A +\n    0 =\n    (if (LEAST a. x = column a A) =\n        (LEAST a. column (LEAST a. x = column a A) A = column a A)\n     then u (column (LEAST a. x = column a A) A) else (0::'a)) *s\n    column (LEAST a. x = column a A) A", "by simp"], ["proof (state)\nthis:\n  (if (LEAST a. x = column a A) =\n      (LEAST a. column (LEAST a. x = column a A) A = column a A)\n   then u (column (LEAST a. x = column a A) A) else (0::'a)) *s\n  column (LEAST a. x = column a A) A +\n  (\\<Sum>i\\<in>{i. x = column i A} - {LEAST a. x = column a A}.\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A) =\n  (if (LEAST a. x = column a A) =\n      (LEAST a. column (LEAST a. x = column a A) A = column a A)\n   then u (column (LEAST a. x = column a A) A) else (0::'a)) *s\n  column (LEAST a. x = column a A) A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       (\\<Sum>i | x = column i A.\n          (if i = (LEAST a. column i A = column a A) then u (column i A)\n           else (0::'a)) *s\n          column i A) =\n       u x *s x", "also"], ["proof (state)\nthis:\n  (if (LEAST a. x = column a A) =\n      (LEAST a. column (LEAST a. x = column a A) A = column a A)\n   then u (column (LEAST a. x = column a A) A) else (0::'a)) *s\n  column (LEAST a. x = column a A) A +\n  (\\<Sum>i\\<in>{i. x = column i A} - {LEAST a. x = column a A}.\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A) =\n  (if (LEAST a. x = column a A) =\n      (LEAST a. column (LEAST a. x = column a A) A = column a A)\n   then u (column (LEAST a. x = column a A) A) else (0::'a)) *s\n  column (LEAST a. x = column a A) A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       (\\<Sum>i | x = column i A.\n          (if i = (LEAST a. column i A = column a A) then u (column i A)\n           else (0::'a)) *s\n          column i A) =\n       u x *s x", "have \"... = u x *s x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if (LEAST a. x = column a A) =\n        (LEAST a. column (LEAST a. x = column a A) A = column a A)\n     then u (column (LEAST a. x = column a A) A) else (0::'a)) *s\n    column (LEAST a. x = column a A) A =\n    u x *s x", "proof (auto, rule LeastI2)"], ["proof (state)\ngoal (3 subgoals):\n 1. (LEAST a. x = column a A) =\n    (LEAST a.\n        column (LEAST a. x = column a A) A = column a A) \\<Longrightarrow>\n    x = column ?a8 A\n 2. \\<And>xa.\n       \\<lbrakk>(LEAST a. x = column a A) =\n                (LEAST a. column (LEAST a. x = column a A) A = column a A);\n        x = column xa A\\<rbrakk>\n       \\<Longrightarrow> u (column xa A) *s column xa A = u x *s x\n 3. \\<lbrakk>(LEAST a. x = column a A) \\<noteq>\n             (LEAST a. column (LEAST a. x = column a A) A = column a A);\n     x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> u x = (0::'a)", "show \"x = column b A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = column b A", "using b"], ["proof (prove)\nusing this:\n  x = column b A\n\ngoal (1 subgoal):\n 1. x = column b A", "."], ["proof (state)\nthis:\n  x = column b A\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>(LEAST a. x = column a A) =\n                (LEAST a. column (LEAST a. x = column a A) A = column a A);\n        x = column xa A\\<rbrakk>\n       \\<Longrightarrow> u (column xa A) *s column xa A = u x *s x\n 2. \\<lbrakk>(LEAST a. x = column a A) \\<noteq>\n             (LEAST a. column (LEAST a. x = column a A) A = column a A);\n     x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> u x = (0::'a)", "fix xa"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>(LEAST a. x = column a A) =\n                (LEAST a. column (LEAST a. x = column a A) A = column a A);\n        x = column xa A\\<rbrakk>\n       \\<Longrightarrow> u (column xa A) *s column xa A = u x *s x\n 2. \\<lbrakk>(LEAST a. x = column a A) \\<noteq>\n             (LEAST a. column (LEAST a. x = column a A) A = column a A);\n     x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> u x = (0::'a)", "assume x: \"x = column xa A\""], ["proof (state)\nthis:\n  x = column xa A\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>(LEAST a. x = column a A) =\n                (LEAST a. column (LEAST a. x = column a A) A = column a A);\n        x = column xa A\\<rbrakk>\n       \\<Longrightarrow> u (column xa A) *s column xa A = u x *s x\n 2. \\<lbrakk>(LEAST a. x = column a A) \\<noteq>\n             (LEAST a. column (LEAST a. x = column a A) A = column a A);\n     x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> u x = (0::'a)", "show \"u (column xa A) *s column xa A = u x *s x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u (column xa A) *s column xa A = u x *s x", "unfolding x"], ["proof (prove)\ngoal (1 subgoal):\n 1. u (column xa A) *s column xa A = u (column xa A) *s column xa A", ".."], ["proof (state)\nthis:\n  u (column xa A) *s column xa A = u x *s x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(LEAST a. x = column a A) \\<noteq>\n             (LEAST a. column (LEAST a. x = column a A) A = column a A);\n     x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> u x = (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(LEAST a. x = column a A) \\<noteq>\n             (LEAST a. column (LEAST a. x = column a A) A = column a A);\n     x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> u x = (0::'a)", "assume \"(LEAST a. x = column a A) \\<noteq> (LEAST a. column (LEAST c. x = column c A) A = column a A)\""], ["proof (state)\nthis:\n  (LEAST a. x = column a A) \\<noteq>\n  (LEAST a. column (LEAST c. x = column c A) A = column a A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(LEAST a. x = column a A) \\<noteq>\n             (LEAST a. column (LEAST a. x = column a A) A = column a A);\n     x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> u x = (0::'a)", "moreover"], ["proof (state)\nthis:\n  (LEAST a. x = column a A) \\<noteq>\n  (LEAST a. column (LEAST c. x = column c A) A = column a A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(LEAST a. x = column a A) \\<noteq>\n             (LEAST a. column (LEAST a. x = column a A) A = column a A);\n     x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> u x = (0::'a)", "have \"(LEAST a. x = column a A) = (LEAST a. column (LEAST c. x = column c A) A = column a A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST a. x = column a A) =\n    (LEAST a. column (LEAST c. x = column c A) A = column a A)", "by (rule Least_equality[symmetric], rule LeastI2, simp_all add: b, rule Least_le, metis (lifting, full_types) LeastI)"], ["proof (state)\nthis:\n  (LEAST a. x = column a A) =\n  (LEAST a. column (LEAST c. x = column c A) A = column a A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(LEAST a. x = column a A) \\<noteq>\n             (LEAST a. column (LEAST a. x = column a A) A = column a A);\n     x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> u x = (0::'a)", "ultimately"], ["proof (chain)\npicking this:\n  (LEAST a. x = column a A) \\<noteq>\n  (LEAST a. column (LEAST c. x = column c A) A = column a A)\n  (LEAST a. x = column a A) =\n  (LEAST a. column (LEAST c. x = column c A) A = column a A)", "show \"u x = 0\""], ["proof (prove)\nusing this:\n  (LEAST a. x = column a A) \\<noteq>\n  (LEAST a. column (LEAST c. x = column c A) A = column a A)\n  (LEAST a. x = column a A) =\n  (LEAST a. column (LEAST c. x = column c A) A = column a A)\n\ngoal (1 subgoal):\n 1. u x = (0::'a)", "by contradiction"], ["proof (state)\nthis:\n  u x = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (if (LEAST a. x = column a A) =\n      (LEAST a. column (LEAST a. x = column a A) A = column a A)\n   then u (column (LEAST a. x = column a A) A) else (0::'a)) *s\n  column (LEAST a. x = column a A) A =\n  u x *s x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> columns A \\<Longrightarrow>\n       (\\<Sum>i | x = column i A.\n          (if i = (LEAST a. column i A = column a A) then u (column i A)\n           else (0::'a)) *s\n          column i A) =\n       u x *s x", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>i | x = column i A.\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A) =\n  u x *s x", "show \" (\\<Sum>i | x = column i A. (if i = (LEAST a. column i A = column a A) then u (column i A) else 0) *s column i A) = u x *s x\""], ["proof (prove)\nusing this:\n  (\\<Sum>i | x = column i A.\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A) =\n  u x *s x\n\ngoal (1 subgoal):\n 1. (\\<Sum>i | x = column i A.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    u x *s x", "."], ["proof (state)\nthis:\n  (\\<Sum>i | x = column i A.\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A) =\n  u x *s x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum (sum (\\<lambda>i.\n               (if i = (LEAST a. column i A = column a A)\n                then u (column i A) else (0::'a)) *s\n               column i A) \\<circ>\n       (\\<lambda>y. {i. y = column i A}))\n   (columns A) =\n  (\\<Sum>y\\<in>columns A. u y *s y)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>UNIV.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    (\\<Sum>v\\<in>columns A. u v *s v)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>i\\<in>UNIV.\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A) =\n  (\\<Sum>y\\<in>columns A. u y *s y)", "show \"(\\<Sum>i\\<in>UNIV. (if i = (LEAST a. column i A = column a A) then u (column i A) else 0) *s column i A) = (\\<Sum>y\\<in>columns A. u y *s y)\""], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<in>UNIV.\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A) =\n  (\\<Sum>y\\<in>columns A. u y *s y)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>UNIV.\n       (if i = (LEAST a. column i A = column a A) then u (column i A)\n        else (0::'a)) *s\n       column i A) =\n    (\\<Sum>y\\<in>columns A. u y *s y)", "."], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>UNIV.\n     (if i = (LEAST a. column i A = column a A) then u (column i A)\n      else (0::'a)) *s\n     column i A) =\n  (\\<Sum>y\\<in>columns A. u y *s y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x. A *v x = (\\<Sum>v\\<in>columns A. u v *s v)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary col_space_eq':\n  fixes A::\"'a::{field}^'m::{finite, wellorder}^'n\"\n  shows \"col_space A = range (\\<lambda>x. A *v x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col_space A = range ((*v) A)", "unfolding col_space_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x. A *v x = y} = range ((*v) A)", "by auto"], ["", "lemma row_space_eq:\n  fixes A::\"'a::{field}^'m^'n::{finite, wellorder}\"\n  shows \"row_space A = {w. \\<exists>y. (transpose A) *v y = w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_space A =\n    {w. \\<exists>y. Finite_Cartesian_Product.transpose A *v y = w}", "unfolding row_space_eq_col_space_transpose col_space_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x. Finite_Cartesian_Product.transpose A *v x = y} =\n    {w. \\<exists>y. Finite_Cartesian_Product.transpose A *v y = w}", ".."], ["", "lemma null_space_eq_ker:\n  fixes f::\"('a::field^'n) => ('a^'m)\"\n  assumes lf: \"Vector_Spaces.linear (*s) (*s) f\"\n  shows \"null_space (matrix f) = {x. f x = 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. null_space (matrix f) = {x. f x = 0}", "unfolding null_space_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. matrix f *v x = 0} = {x. f x = 0}", "using matrix_works [OF lf]"], ["proof (prove)\nusing this:\n  matrix f *v ?x = f ?x\n\ngoal (1 subgoal):\n 1. {x. matrix f *v x = 0} = {x. f x = 0}", "by auto"], ["", "lemma col_space_eq_range:\n  fixes f::\"('a::field^'n::{finite, wellorder}) \\<Rightarrow> ('a^'m)\"\n  assumes lf: \"Vector_Spaces.linear (*s) (*s) f\"\n  shows \"col_space (matrix f) = range f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col_space (matrix f) = range f", "unfolding col_space_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x. matrix f *v x = y} = range f", "unfolding matrix_works[OF lf]"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x. f x = y} = range f", "by blast"], ["", "lemma null_space_is_preserved:\n  fixes A::\"'a::{field}^'cols^'rows\"\n  assumes P: \"invertible P\"\n  shows \"null_space (P**A) = null_space A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. null_space (P ** A) = null_space A", "unfolding null_space_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. P ** A *v x = 0} = {x. A *v x = 0}", "using P matrix_inv_left matrix_left_invertible_ker matrix_vector_mul_assoc matrix_vector_mult_0_right"], ["proof (prove)\nusing this:\n  invertible P\n  invertible ?M \\<Longrightarrow> matrix_inv ?M ** ?M = mat (1::?'a)\n  (\\<exists>B. B ** ?A = mat (1::?'a)) =\n  (\\<forall>x. ?A *v x = 0 \\<longrightarrow> x = 0)\n  ?A *v (?B *v ?x) = ?A ** ?B *v ?x\n  ?A *v 0 = 0\n\ngoal (1 subgoal):\n 1. {x. P ** A *v x = 0} = {x. A *v x = 0}", "by metis"], ["", "lemma row_space_is_preserved:\n  fixes A::\"'a::{field}^'cols^'rows::{finite, wellorder}\" \n    and P::\"'a::{field}^'rows::{finite, wellorder}^'rows::{finite, wellorder}\"\n  assumes P: \"invertible P\"\n  shows \"row_space (P**A) = row_space A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_space (P ** A) = row_space A", "proof (auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> row_space (P ** A) \\<Longrightarrow> x \\<in> row_space A\n 2. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "fix w"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> row_space (P ** A) \\<Longrightarrow> x \\<in> row_space A\n 2. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "assume w: \"w \\<in> row_space (P**A)\""], ["proof (state)\nthis:\n  w \\<in> row_space (P ** A)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> row_space (P ** A) \\<Longrightarrow> x \\<in> row_space A\n 2. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "from this"], ["proof (chain)\npicking this:\n  w \\<in> row_space (P ** A)", "obtain y where w_By: \"w=(transpose (P**A)) *v y\""], ["proof (prove)\nusing this:\n  w \\<in> row_space (P ** A)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        w =\n        Finite_Cartesian_Product.transpose (P ** A) *v y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding row_space_eq[of \"P ** A\" ]"], ["proof (prove)\nusing this:\n  w \\<in> {w. \\<exists>y.\n                 Finite_Cartesian_Product.transpose (P ** A) *v y = w}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        w =\n        Finite_Cartesian_Product.transpose (P ** A) *v y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  w = Finite_Cartesian_Product.transpose (P ** A) *v y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> row_space (P ** A) \\<Longrightarrow> x \\<in> row_space A\n 2. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "have \"w = (transpose (P**A)) *v y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w = Finite_Cartesian_Product.transpose (P ** A) *v y", "using w_By"], ["proof (prove)\nusing this:\n  w = Finite_Cartesian_Product.transpose (P ** A) *v y\n\ngoal (1 subgoal):\n 1. w = Finite_Cartesian_Product.transpose (P ** A) *v y", "."], ["proof (state)\nthis:\n  w = Finite_Cartesian_Product.transpose (P ** A) *v y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> row_space (P ** A) \\<Longrightarrow> x \\<in> row_space A\n 2. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "also"], ["proof (state)\nthis:\n  w = Finite_Cartesian_Product.transpose (P ** A) *v y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> row_space (P ** A) \\<Longrightarrow> x \\<in> row_space A\n 2. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "have \"... = ((transpose A) ** (transpose P)) *v y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Cartesian_Product.transpose (P ** A) *v y =\n    Finite_Cartesian_Product.transpose A **\n    Finite_Cartesian_Product.transpose P *v\n    y", "unfolding matrix_transpose_mul"], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Cartesian_Product.transpose A **\n    Finite_Cartesian_Product.transpose P *v\n    y =\n    Finite_Cartesian_Product.transpose A **\n    Finite_Cartesian_Product.transpose P *v\n    y", ".."], ["proof (state)\nthis:\n  Finite_Cartesian_Product.transpose (P ** A) *v y =\n  Finite_Cartesian_Product.transpose A **\n  Finite_Cartesian_Product.transpose P *v\n  y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> row_space (P ** A) \\<Longrightarrow> x \\<in> row_space A\n 2. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "also"], ["proof (state)\nthis:\n  Finite_Cartesian_Product.transpose (P ** A) *v y =\n  Finite_Cartesian_Product.transpose A **\n  Finite_Cartesian_Product.transpose P *v\n  y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> row_space (P ** A) \\<Longrightarrow> x \\<in> row_space A\n 2. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "have \"... = (transpose A) *v ((transpose P) *v y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Cartesian_Product.transpose A **\n    Finite_Cartesian_Product.transpose P *v\n    y =\n    Finite_Cartesian_Product.transpose A *v\n    (Finite_Cartesian_Product.transpose P *v y)", "unfolding matrix_vector_mul_assoc"], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Cartesian_Product.transpose A **\n    Finite_Cartesian_Product.transpose P *v\n    y =\n    Finite_Cartesian_Product.transpose A **\n    Finite_Cartesian_Product.transpose P *v\n    y", ".."], ["proof (state)\nthis:\n  Finite_Cartesian_Product.transpose A **\n  Finite_Cartesian_Product.transpose P *v\n  y =\n  Finite_Cartesian_Product.transpose A *v\n  (Finite_Cartesian_Product.transpose P *v y)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> row_space (P ** A) \\<Longrightarrow> x \\<in> row_space A\n 2. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "finally"], ["proof (chain)\npicking this:\n  w =\n  Finite_Cartesian_Product.transpose A *v\n  (Finite_Cartesian_Product.transpose P *v y)", "show \"w \\<in> row_space A\""], ["proof (prove)\nusing this:\n  w =\n  Finite_Cartesian_Product.transpose A *v\n  (Finite_Cartesian_Product.transpose P *v y)\n\ngoal (1 subgoal):\n 1. w \\<in> row_space A", "unfolding row_space_eq"], ["proof (prove)\nusing this:\n  w =\n  Finite_Cartesian_Product.transpose A *v\n  (Finite_Cartesian_Product.transpose P *v y)\n\ngoal (1 subgoal):\n 1. w \\<in> {w. \\<exists>y. Finite_Cartesian_Product.transpose A *v y = w}", "by blast"], ["proof (state)\nthis:\n  w \\<in> row_space A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "assume w: \"w \\<in> row_space A\""], ["proof (state)\nthis:\n  w \\<in> row_space A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "from this"], ["proof (chain)\npicking this:\n  w \\<in> row_space A", "obtain y where w_Ay: \"w=(transpose A) *v y\""], ["proof (prove)\nusing this:\n  w \\<in> row_space A\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        w = Finite_Cartesian_Product.transpose A *v y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding row_space_eq"], ["proof (prove)\nusing this:\n  w \\<in> {w. \\<exists>y. Finite_Cartesian_Product.transpose A *v y = w}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        w = Finite_Cartesian_Product.transpose A *v y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  w = Finite_Cartesian_Product.transpose A *v y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "have \"w = (transpose A) *v y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w = Finite_Cartesian_Product.transpose A *v y", "using w_Ay"], ["proof (prove)\nusing this:\n  w = Finite_Cartesian_Product.transpose A *v y\n\ngoal (1 subgoal):\n 1. w = Finite_Cartesian_Product.transpose A *v y", "."], ["proof (state)\nthis:\n  w = Finite_Cartesian_Product.transpose A *v y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "also"], ["proof (state)\nthis:\n  w = Finite_Cartesian_Product.transpose A *v y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "have \"... = (transpose ((matrix_inv P) ** (P**A))) *v y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Cartesian_Product.transpose A *v y =\n    Finite_Cartesian_Product.transpose (matrix_inv P ** (P ** A)) *v y", "by (metis P matrix_inv_left matrix_mul_assoc matrix_mul_lid)"], ["proof (state)\nthis:\n  Finite_Cartesian_Product.transpose A *v y =\n  Finite_Cartesian_Product.transpose (matrix_inv P ** (P ** A)) *v y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "also"], ["proof (state)\nthis:\n  Finite_Cartesian_Product.transpose A *v y =\n  Finite_Cartesian_Product.transpose (matrix_inv P ** (P ** A)) *v y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "have \"... = (transpose (P**A) ** (transpose (matrix_inv P))) *v y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Cartesian_Product.transpose (matrix_inv P ** (P ** A)) *v y =\n    Finite_Cartesian_Product.transpose (P ** A) **\n    Finite_Cartesian_Product.transpose (matrix_inv P) *v\n    y", "unfolding matrix_transpose_mul"], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Cartesian_Product.transpose A **\n    Finite_Cartesian_Product.transpose P **\n    Finite_Cartesian_Product.transpose (matrix_inv P) *v\n    y =\n    Finite_Cartesian_Product.transpose A **\n    Finite_Cartesian_Product.transpose P **\n    Finite_Cartesian_Product.transpose (matrix_inv P) *v\n    y", ".."], ["proof (state)\nthis:\n  Finite_Cartesian_Product.transpose (matrix_inv P ** (P ** A)) *v y =\n  Finite_Cartesian_Product.transpose (P ** A) **\n  Finite_Cartesian_Product.transpose (matrix_inv P) *v\n  y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "also"], ["proof (state)\nthis:\n  Finite_Cartesian_Product.transpose (matrix_inv P ** (P ** A)) *v y =\n  Finite_Cartesian_Product.transpose (P ** A) **\n  Finite_Cartesian_Product.transpose (matrix_inv P) *v\n  y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "have \"... = transpose (P**A) *v (transpose (matrix_inv P) *v y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Cartesian_Product.transpose (P ** A) **\n    Finite_Cartesian_Product.transpose (matrix_inv P) *v\n    y =\n    Finite_Cartesian_Product.transpose (P ** A) *v\n    (Finite_Cartesian_Product.transpose (matrix_inv P) *v y)", "unfolding matrix_vector_mul_assoc"], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Cartesian_Product.transpose (P ** A) **\n    Finite_Cartesian_Product.transpose (matrix_inv P) *v\n    y =\n    Finite_Cartesian_Product.transpose (P ** A) **\n    Finite_Cartesian_Product.transpose (matrix_inv P) *v\n    y", ".."], ["proof (state)\nthis:\n  Finite_Cartesian_Product.transpose (P ** A) **\n  Finite_Cartesian_Product.transpose (matrix_inv P) *v\n  y =\n  Finite_Cartesian_Product.transpose (P ** A) *v\n  (Finite_Cartesian_Product.transpose (matrix_inv P) *v y)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_space A \\<Longrightarrow> x \\<in> row_space (P ** A)", "finally"], ["proof (chain)\npicking this:\n  w =\n  Finite_Cartesian_Product.transpose (P ** A) *v\n  (Finite_Cartesian_Product.transpose (matrix_inv P) *v y)", "show \"w \\<in> row_space (P**A)\""], ["proof (prove)\nusing this:\n  w =\n  Finite_Cartesian_Product.transpose (P ** A) *v\n  (Finite_Cartesian_Product.transpose (matrix_inv P) *v y)\n\ngoal (1 subgoal):\n 1. w \\<in> row_space (P ** A)", "unfolding row_space_eq"], ["proof (prove)\nusing this:\n  w =\n  Finite_Cartesian_Product.transpose (P ** A) *v\n  (Finite_Cartesian_Product.transpose (matrix_inv P) *v y)\n\ngoal (1 subgoal):\n 1. w \\<in> {w. \\<exists>y.\n                   Finite_Cartesian_Product.transpose (P ** A) *v y = w}", "by blast"], ["proof (state)\nthis:\n  w \\<in> row_space (P ** A)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}