{"file_name": "/home/qj213/afp-2021-10-22/thys/Noninterference_Generic_Unwinding/GenericUnwinding.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Noninterference_Generic_Unwinding", "problem_names": ["lemma ipurge_tr_aux_single_event:\n \"ipurge_tr_aux I D U [x] = (if \\<exists>v \\<in> U. (v, D x) \\<in> I\n   then []\n   else [x])\"", "lemma ipurge_tr_aux_cons:\n \"ipurge_tr_aux I D U (x # xs) = (if \\<exists>v \\<in> U. (v, D x) \\<in> I\n   then ipurge_tr_aux I D (insert (D x) U) xs\n   else x # ipurge_tr_aux I D U xs)\"", "lemma unaffected_domains_subset:\n  assumes\n    A: \"U \\<subseteq> range D\" and\n    B: \"U \\<noteq> {}\"\n  shows \"unaffected_domains I D U xs \\<subseteq> range D \\<inter> (-I) `` range D\"", "lemma ruc_wfc_failures:\n  assumes\n    RUC:  \"ref_union_closed P\" and\n    WFC:  \"weakly_future_consistent P I D R\" and\n    A:    \"U \\<subseteq> range D \\<inter> (-I) `` range D\" and\n    B:    \"U \\<noteq> {}\" and\n    C:    \"\\<forall>u \\<in> U. (xs, xs') \\<in> R u\" and\n    D:    \"(xs, X) \\<in> failures P\"\n  shows \"(xs', X \\<inter> D -` U) \\<in> failures P\"", "lemma ruc_wfc_lr_failures_1:\n  assumes\n    RUC:  \"ref_union_closed P\" and\n    WFC:  \"weakly_future_consistent P I D R\" and\n    LR:   \"locally_respects P I D R\" and\n    A:    \"(xs @ [y], Y) \\<in> failures P\"\n  shows \"(xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\"", "lemma ruc_wfc_lr_failures_2:\n  assumes\n    RUC:  \"ref_union_closed P\" and\n    WFC:  \"weakly_future_consistent P I D R\" and\n    LR:   \"locally_respects P I D R\" and\n    A:    \"(xs, Z) \\<in> failures P\" and\n    Y:    \"xs @ [y] \\<in> traces P\"\n  shows \"(xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\"", "lemma gu_condition_imply_secure_aux [rule_format]:\n  assumes\n    VP:   \"view_partition P D R\" and\n    WFC:  \"weakly_future_consistent P I D R\" and\n    WSC:  \"weakly_step_consistent P D R\" and\n    LR:   \"locally_respects P I D R\"\n  shows \"U \\<subseteq> range D \\<longrightarrow> U \\<noteq> {} \\<longrightarrow> xs @ ys \\<in> traces P \\<longrightarrow>\n    (\\<forall>u \\<in> unaffected_domains I D U []. (xs, xs') \\<in> R u) \\<longrightarrow>\n    (\\<forall>u \\<in> unaffected_domains I D U ys.\n      (xs @ ys, xs' @ ipurge_tr_aux I D U ys) \\<in> R u)\"", "lemma gu_condition_imply_secure_1 [rule_format]:\n  assumes\n    RUC:  \"ref_union_closed P\" and\n    VP:   \"view_partition P D R\" and\n    WFC:  \"weakly_future_consistent P I D R\" and\n    WSC:  \"weakly_step_consistent P D R\" and\n    LR:   \"locally_respects P I D R\"\n  shows \"(xs @ y # ys, Y) \\<in> failures P \\<longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y) \\<in> failures P\"", "lemma gu_condition_imply_secure_2 [rule_format]:\n  assumes\n    RUC:  \"ref_union_closed P\" and\n    VP:   \"view_partition P D R\" and\n    WFC:  \"weakly_future_consistent P I D R\" and\n    WSC:  \"weakly_step_consistent P D R\" and\n    LR:   \"locally_respects P I D R\" and\n    Y:    \"xs @ [y] \\<in> traces P\"\n  shows \"(xs @ zs, Z) \\<in> failures P \\<longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z) \\<in> failures P\"", "theorem generic_unwinding:\n  assumes\n    RUC:  \"ref_union_closed P\" and\n    VP:   \"view_partition P D R\" and\n    WFC:  \"weakly_future_consistent P I D R\" and\n    WSC:  \"weakly_step_consistent P D R\" and\n    LR:   \"locally_respects P I D R\"\n  shows \"secure P I D\"", "theorem d_generic_unwinding:\n \"deterministic P \\<Longrightarrow>\n  view_partition P D R \\<Longrightarrow>\n  d_weakly_future_consistent P I D R \\<Longrightarrow>\n  weakly_step_consistent P D R \\<Longrightarrow>\n  locally_respects P I D R \\<Longrightarrow>\n  secure P I D\"", "theorem ts_generic_unwinding:\n \"trace_set T \\<Longrightarrow>\n  view_partition (ts_process T) D R \\<Longrightarrow>\n  d_weakly_future_consistent (ts_process T) I D R \\<Longrightarrow>\n  weakly_step_consistent (ts_process T) D R \\<Longrightarrow>\n  locally_respects (ts_process T) I D R \\<Longrightarrow>\n  secure (ts_process T) I D\"", "lemma rel_induct_subset:\n  assumes\n    VP:   \"view_partition P D R\" and\n    WSC:  \"weakly_step_consistent P D R\" and\n    LR:   \"locally_respects P I D R\"\n  shows \"rel_induct P I D u \\<subseteq> R u\"", "lemma counterexample_trace_set:\n \"trace_set T\\<^sub>c\"", "lemma counterexample_next_events_1:\n \"(x \\<in> next_events (ts_process T\\<^sub>c) xs) = (xs @ [x] \\<in> T\\<^sub>c)\"", "lemma counterexample_next_events_2:\n \"(x \\<in> next_events P\\<^sub>c xs) = (xs @ [x] \\<in> T\\<^sub>c)\"", "lemma counterexample_secure:\n \"secure P\\<^sub>c I\\<^sub>c id\"", "lemma counterexample_not_gu_condition_aux:\n \"([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]) \\<in> rel_induct P\\<^sub>c I\\<^sub>c id a\\<^sub>c\"", "lemma counterexample_not_gu_condition:\n \"\\<not> (\\<exists>R.  view_partition P\\<^sub>c id R \\<and>\n          weakly_future_consistent P\\<^sub>c I\\<^sub>c id R \\<and>\n          weakly_step_consistent P\\<^sub>c id R \\<and>\n          locally_respects P\\<^sub>c I\\<^sub>c id R)\"", "theorem not_secure_implies_gu_condition:\n \"\\<not> (secure P\\<^sub>c I\\<^sub>c id \\<longrightarrow>\n    (\\<exists>R.  view_partition P\\<^sub>c id R \\<and>\n          weakly_future_consistent P\\<^sub>c I\\<^sub>c id R \\<and>\n          weakly_step_consistent P\\<^sub>c id R \\<and>\n          locally_respects P\\<^sub>c I\\<^sub>c id R))\""], "translations": [["", "lemma ipurge_tr_aux_single_event:\n \"ipurge_tr_aux I D U [x] = (if \\<exists>v \\<in> U. (v, D x) \\<in> I\n   then []\n   else [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "proof (cases \"\\<exists>v \\<in> U. (v, D x) \\<in> I\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D x) \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])\n 2. \\<not> (\\<exists>v\\<in>U. (v, D x) \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "case True"], ["proof (state)\nthis:\n  \\<exists>v\\<in>U. (v, D x) \\<in> I\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D x) \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])\n 2. \\<not> (\\<exists>v\\<in>U. (v, D x) \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "have \"ipurge_tr_aux I D U [x] = ipurge_tr_aux I D U ([] @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U [x] = ipurge_tr_aux I D U ([] @ [x])", "by simp"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U [x] = ipurge_tr_aux I D U ([] @ [x])\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D x) \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])\n 2. \\<not> (\\<exists>v\\<in>U. (v, D x) \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "also"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U [x] = ipurge_tr_aux I D U ([] @ [x])\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D x) \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])\n 2. \\<not> (\\<exists>v\\<in>U. (v, D x) \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "have \"\\<dots> = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U ([] @ [x]) = []", "using True"], ["proof (prove)\nusing this:\n  \\<exists>v\\<in>U. (v, D x) \\<in> I\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U ([] @ [x]) = []", "by (simp only: ipurge_tr_aux.simps, simp)"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U ([] @ [x]) = []\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D x) \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])\n 2. \\<not> (\\<exists>v\\<in>U. (v, D x) \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "finally"], ["proof (chain)\npicking this:\n  ipurge_tr_aux I D U [x] = []", "show ?thesis"], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D U [x] = []\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "using True"], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D U [x] = []\n  \\<exists>v\\<in>U. (v, D x) \\<in> I\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "by simp"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U [x] =\n  (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D x) \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D x) \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>v\\<in>U. (v, D x) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D x) \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "have \"ipurge_tr_aux I D U [x] = ipurge_tr_aux I D U ([] @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U [x] = ipurge_tr_aux I D U ([] @ [x])", "by simp"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U [x] = ipurge_tr_aux I D U ([] @ [x])\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D x) \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "also"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U [x] = ipurge_tr_aux I D U ([] @ [x])\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D x) \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "have \"\\<dots> = [x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U ([] @ [x]) = [x]", "using False"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>v\\<in>U. (v, D x) \\<in> I)\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U ([] @ [x]) = [x]", "by (simp only: ipurge_tr_aux.simps, simp)"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U ([] @ [x]) = [x]\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D x) \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "finally"], ["proof (chain)\npicking this:\n  ipurge_tr_aux I D U [x] = [x]", "show ?thesis"], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D U [x] = [x]\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "using False"], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D U [x] = [x]\n  \\<not> (\\<exists>v\\<in>U. (v, D x) \\<in> I)\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U [x] =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])", "by simp"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U [x] =\n  (if \\<exists>v\\<in>U. (v, D x) \\<in> I then [] else [x])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ipurge_tr_aux_cons:\n \"ipurge_tr_aux I D U (x # xs) = (if \\<exists>v \\<in> U. (v, D x) \\<in> I\n   then ipurge_tr_aux I D (insert (D x) U) xs\n   else x # ipurge_tr_aux I D U xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U (x # xs) =\n    (if \\<exists>v\\<in>U. (v, D x) \\<in> I\n     then ipurge_tr_aux I D (insert (D x) U) xs\n     else x # ipurge_tr_aux I D U xs)", "proof (induction xs rule: rev_induct, case_tac [!] \"\\<exists>v \\<in> U. (v, D x) \\<in> I\",\n simp_all add: ipurge_tr_aux_single_event del: ipurge_tr_aux.simps(2))"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) =\n                ipurge_tr_aux I D (insert (D x) U) xs;\n        \\<exists>v\\<in>U. (v, D x) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         ipurge_tr_aux I D (insert (D x) U) (xs @ [xa])\n 2. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) = x # ipurge_tr_aux I D U xs;\n        \\<forall>v\\<in>U. (v, D x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         x # ipurge_tr_aux I D U (xs @ [xa])", "fix x' xs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) =\n                ipurge_tr_aux I D (insert (D x) U) xs;\n        \\<exists>v\\<in>U. (v, D x) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         ipurge_tr_aux I D (insert (D x) U) (xs @ [xa])\n 2. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) = x # ipurge_tr_aux I D U xs;\n        \\<forall>v\\<in>U. (v, D x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         x # ipurge_tr_aux I D U (xs @ [xa])", "assume A: \"ipurge_tr_aux I D U (x # xs) =\n    ipurge_tr_aux I D (insert (D x) U) xs\"\n    (is \"?T = ?T'\")"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U (x # xs) = ipurge_tr_aux I D (insert (D x) U) xs\n\ngoal (2 subgoals):\n 1. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) =\n                ipurge_tr_aux I D (insert (D x) U) xs;\n        \\<exists>v\\<in>U. (v, D x) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         ipurge_tr_aux I D (insert (D x) U) (xs @ [xa])\n 2. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) = x # ipurge_tr_aux I D U xs;\n        \\<forall>v\\<in>U. (v, D x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         x # ipurge_tr_aux I D U (xs @ [xa])", "assume \"\\<exists>v \\<in> U. (v, D x) \\<in> I\""], ["proof (state)\nthis:\n  \\<exists>v\\<in>U. (v, D x) \\<in> I\n\ngoal (2 subgoals):\n 1. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) =\n                ipurge_tr_aux I D (insert (D x) U) xs;\n        \\<exists>v\\<in>U. (v, D x) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         ipurge_tr_aux I D (insert (D x) U) (xs @ [xa])\n 2. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) = x # ipurge_tr_aux I D U xs;\n        \\<forall>v\\<in>U. (v, D x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         x # ipurge_tr_aux I D U (xs @ [xa])", "hence B: \"sinks_aux I D U (x # xs) = sinks_aux I D (insert (D x) U) xs\"\n    (is \"?S = ?S'\")"], ["proof (prove)\nusing this:\n  \\<exists>v\\<in>U. (v, D x) \\<in> I\n\ngoal (1 subgoal):\n 1. sinks_aux I D U (x # xs) = sinks_aux I D (insert (D x) U) xs", "by (simp add: sinks_aux_cons)"], ["proof (state)\nthis:\n  sinks_aux I D U (x # xs) = sinks_aux I D (insert (D x) U) xs\n\ngoal (2 subgoals):\n 1. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) =\n                ipurge_tr_aux I D (insert (D x) U) xs;\n        \\<exists>v\\<in>U. (v, D x) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         ipurge_tr_aux I D (insert (D x) U) (xs @ [xa])\n 2. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) = x # ipurge_tr_aux I D U xs;\n        \\<forall>v\\<in>U. (v, D x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         x # ipurge_tr_aux I D U (xs @ [xa])", "show \"ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "proof (cases \"\\<exists>v \\<in> ?S. (v, D x') \\<in> I\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>sinks_aux I D U (x # xs).\n       (v, D x') \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])\n 2. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "case True"], ["proof (state)\nthis:\n  \\<exists>v\\<in>sinks_aux I D U (x # xs). (v, D x') \\<in> I\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>sinks_aux I D U (x # xs).\n       (v, D x') \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])\n 2. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "hence \"ipurge_tr_aux I D U ((x # xs) @ [x']) = ?T\""], ["proof (prove)\nusing this:\n  \\<exists>v\\<in>sinks_aux I D U (x # xs). (v, D x') \\<in> I\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U ((x # xs) @ [x']) = ipurge_tr_aux I D U (x # xs)", "by (simp only: ipurge_tr_aux.simps, simp)"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) = ipurge_tr_aux I D U (x # xs)\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>sinks_aux I D U (x # xs).\n       (v, D x') \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])\n 2. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "moreover"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) = ipurge_tr_aux I D U (x # xs)\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>sinks_aux I D U (x # xs).\n       (v, D x') \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])\n 2. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "have \"\\<exists>v \\<in> ?S'. (v, D x') \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>sinks_aux I D (insert (D x) U) xs. (v, D x') \\<in> I", "using B and True"], ["proof (prove)\nusing this:\n  sinks_aux I D U (x # xs) = sinks_aux I D (insert (D x) U) xs\n  \\<exists>v\\<in>sinks_aux I D U (x # xs). (v, D x') \\<in> I\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>sinks_aux I D (insert (D x) U) xs. (v, D x') \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<exists>v\\<in>sinks_aux I D (insert (D x) U) xs. (v, D x') \\<in> I\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>sinks_aux I D U (x # xs).\n       (v, D x') \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])\n 2. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "hence \"ipurge_tr_aux I D (insert (D x) U) (xs @ [x']) = ?T'\""], ["proof (prove)\nusing this:\n  \\<exists>v\\<in>sinks_aux I D (insert (D x) U) xs. (v, D x') \\<in> I\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D (insert (D x) U) (xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) xs", "by simp"], ["proof (state)\nthis:\n  ipurge_tr_aux I D (insert (D x) U) (xs @ [x']) =\n  ipurge_tr_aux I D (insert (D x) U) xs\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>sinks_aux I D U (x # xs).\n       (v, D x') \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])\n 2. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "ultimately"], ["proof (chain)\npicking this:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) = ipurge_tr_aux I D U (x # xs)\n  ipurge_tr_aux I D (insert (D x) U) (xs @ [x']) =\n  ipurge_tr_aux I D (insert (D x) U) xs", "show ?thesis"], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) = ipurge_tr_aux I D U (x # xs)\n  ipurge_tr_aux I D (insert (D x) U) (xs @ [x']) =\n  ipurge_tr_aux I D (insert (D x) U) xs\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "using A"], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) = ipurge_tr_aux I D U (x # xs)\n  ipurge_tr_aux I D (insert (D x) U) (xs @ [x']) =\n  ipurge_tr_aux I D (insert (D x) U) xs\n  ipurge_tr_aux I D U (x # xs) = ipurge_tr_aux I D (insert (D x) U) xs\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "by simp"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U (x # xs @ [x']) =\n  ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs). (v, D x') \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "hence \"ipurge_tr_aux I D U ((x # xs) @ [x']) = ?T @ [x']\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs). (v, D x') \\<in> I)\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U ((x # xs) @ [x']) =\n    ipurge_tr_aux I D U (x # xs) @ [x']", "by (simp only: ipurge_tr_aux.simps, simp)"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) =\n  ipurge_tr_aux I D U (x # xs) @ [x']\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "moreover"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) =\n  ipurge_tr_aux I D U (x # xs) @ [x']\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "have \"\\<not> (\\<exists>v \\<in> ?S'. (v, D x') \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D (insert (D x) U) xs.\n               (v, D x') \\<in> I)", "using B and False"], ["proof (prove)\nusing this:\n  sinks_aux I D U (x # xs) = sinks_aux I D (insert (D x) U) xs\n  \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs). (v, D x') \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D (insert (D x) U) xs.\n               (v, D x') \\<in> I)", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<exists>v\\<in>sinks_aux I D (insert (D x) U) xs.\n             (v, D x') \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "hence \"ipurge_tr_aux I D (insert (D x) U) (xs @ [x']) = ?T' @ [x']\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>v\\<in>sinks_aux I D (insert (D x) U) xs.\n             (v, D x') \\<in> I)\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D (insert (D x) U) (xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) xs @ [x']", "by simp"], ["proof (state)\nthis:\n  ipurge_tr_aux I D (insert (D x) U) (xs @ [x']) =\n  ipurge_tr_aux I D (insert (D x) U) xs @ [x']\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "ultimately"], ["proof (chain)\npicking this:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) =\n  ipurge_tr_aux I D U (x # xs) @ [x']\n  ipurge_tr_aux I D (insert (D x) U) (xs @ [x']) =\n  ipurge_tr_aux I D (insert (D x) U) xs @ [x']", "show ?thesis"], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) =\n  ipurge_tr_aux I D U (x # xs) @ [x']\n  ipurge_tr_aux I D (insert (D x) U) (xs @ [x']) =\n  ipurge_tr_aux I D (insert (D x) U) xs @ [x']\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "using A"], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) =\n  ipurge_tr_aux I D U (x # xs) @ [x']\n  ipurge_tr_aux I D (insert (D x) U) (xs @ [x']) =\n  ipurge_tr_aux I D (insert (D x) U) xs @ [x']\n  ipurge_tr_aux I D U (x # xs) = ipurge_tr_aux I D (insert (D x) U) xs\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U (x # xs @ [x']) =\n    ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])", "by simp"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U (x # xs @ [x']) =\n  ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U (x # xs @ [x']) =\n  ipurge_tr_aux I D (insert (D x) U) (xs @ [x'])\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) = x # ipurge_tr_aux I D U xs;\n        \\<forall>v\\<in>U. (v, D x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         x # ipurge_tr_aux I D U (xs @ [xa])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) = x # ipurge_tr_aux I D U xs;\n        \\<forall>v\\<in>U. (v, D x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         x # ipurge_tr_aux I D U (xs @ [xa])", "fix x' xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) = x # ipurge_tr_aux I D U xs;\n        \\<forall>v\\<in>U. (v, D x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         x # ipurge_tr_aux I D U (xs @ [xa])", "assume A: \"ipurge_tr_aux I D U (x # xs) = x # ipurge_tr_aux I D U xs\"\n    (is \"?T = ?T'\")"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U (x # xs) = x # ipurge_tr_aux I D U xs\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) = x # ipurge_tr_aux I D U xs;\n        \\<forall>v\\<in>U. (v, D x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         x # ipurge_tr_aux I D U (xs @ [xa])", "assume \"\\<forall>v \\<in> U. (v, D x) \\<notin> I\""], ["proof (state)\nthis:\n  \\<forall>v\\<in>U. (v, D x) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) = x # ipurge_tr_aux I D U xs;\n        \\<forall>v\\<in>U. (v, D x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         x # ipurge_tr_aux I D U (xs @ [xa])", "hence B: \"sinks_aux I D U (x # xs) = sinks_aux I D U xs\"\n    (is \"?S = ?S'\")"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>U. (v, D x) \\<notin> I\n\ngoal (1 subgoal):\n 1. sinks_aux I D U (x # xs) = sinks_aux I D U xs", "by (simp add: sinks_aux_cons)"], ["proof (state)\nthis:\n  sinks_aux I D U (x # xs) = sinks_aux I D U xs\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       \\<lbrakk>ipurge_tr_aux I D U (x # xs) = x # ipurge_tr_aux I D U xs;\n        \\<forall>v\\<in>U. (v, D x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D U (x # xs @ [xa]) =\n                         x # ipurge_tr_aux I D U (xs @ [xa])", "show \"ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "proof (cases \"\\<exists>v \\<in> ?S. (v, D x') \\<in> I\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>sinks_aux I D U (x # xs).\n       (v, D x') \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])\n 2. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "case True"], ["proof (state)\nthis:\n  \\<exists>v\\<in>sinks_aux I D U (x # xs). (v, D x') \\<in> I\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>sinks_aux I D U (x # xs).\n       (v, D x') \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])\n 2. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "hence \"ipurge_tr_aux I D U ((x # xs) @ [x']) = ?T\""], ["proof (prove)\nusing this:\n  \\<exists>v\\<in>sinks_aux I D U (x # xs). (v, D x') \\<in> I\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U ((x # xs) @ [x']) = ipurge_tr_aux I D U (x # xs)", "by (simp only: ipurge_tr_aux.simps, simp)"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) = ipurge_tr_aux I D U (x # xs)\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>sinks_aux I D U (x # xs).\n       (v, D x') \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])\n 2. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "moreover"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) = ipurge_tr_aux I D U (x # xs)\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>sinks_aux I D U (x # xs).\n       (v, D x') \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])\n 2. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "have \"\\<exists>v \\<in> ?S'. (v, D x') \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>sinks_aux I D U xs. (v, D x') \\<in> I", "using B and True"], ["proof (prove)\nusing this:\n  sinks_aux I D U (x # xs) = sinks_aux I D U xs\n  \\<exists>v\\<in>sinks_aux I D U (x # xs). (v, D x') \\<in> I\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>sinks_aux I D U xs. (v, D x') \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<exists>v\\<in>sinks_aux I D U xs. (v, D x') \\<in> I\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>sinks_aux I D U (x # xs).\n       (v, D x') \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])\n 2. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "hence \"x # ipurge_tr_aux I D U (xs @ [x']) = ?T'\""], ["proof (prove)\nusing this:\n  \\<exists>v\\<in>sinks_aux I D U xs. (v, D x') \\<in> I\n\ngoal (1 subgoal):\n 1. x # ipurge_tr_aux I D U (xs @ [x']) = x # ipurge_tr_aux I D U xs", "by simp"], ["proof (state)\nthis:\n  x # ipurge_tr_aux I D U (xs @ [x']) = x # ipurge_tr_aux I D U xs\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>sinks_aux I D U (x # xs).\n       (v, D x') \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])\n 2. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "ultimately"], ["proof (chain)\npicking this:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) = ipurge_tr_aux I D U (x # xs)\n  x # ipurge_tr_aux I D U (xs @ [x']) = x # ipurge_tr_aux I D U xs", "show ?thesis"], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) = ipurge_tr_aux I D U (x # xs)\n  x # ipurge_tr_aux I D U (xs @ [x']) = x # ipurge_tr_aux I D U xs\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "using A"], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) = ipurge_tr_aux I D U (x # xs)\n  x # ipurge_tr_aux I D U (xs @ [x']) = x # ipurge_tr_aux I D U xs\n  ipurge_tr_aux I D U (x # xs) = x # ipurge_tr_aux I D U xs\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "by simp"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U (x # xs @ [x']) = x # ipurge_tr_aux I D U (xs @ [x'])\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs). (v, D x') \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "hence \"ipurge_tr_aux I D U ((x # xs) @ [x']) = ?T @ [x']\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs). (v, D x') \\<in> I)\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U ((x # xs) @ [x']) =\n    ipurge_tr_aux I D U (x # xs) @ [x']", "by (simp only: ipurge_tr_aux.simps, simp)"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) =\n  ipurge_tr_aux I D U (x # xs) @ [x']\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "moreover"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) =\n  ipurge_tr_aux I D U (x # xs) @ [x']\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "have \"\\<not> (\\<exists>v \\<in> ?S'. (v, D x') \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U xs. (v, D x') \\<in> I)", "using B and False"], ["proof (prove)\nusing this:\n  sinks_aux I D U (x # xs) = sinks_aux I D U xs\n  \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs). (v, D x') \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U xs. (v, D x') \\<in> I)", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<exists>v\\<in>sinks_aux I D U xs. (v, D x') \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "hence \"x # ipurge_tr_aux I D U (xs @ [x']) = ?T' @ [x']\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>v\\<in>sinks_aux I D U xs. (v, D x') \\<in> I)\n\ngoal (1 subgoal):\n 1. x # ipurge_tr_aux I D U (xs @ [x']) =\n    (x # ipurge_tr_aux I D U xs) @ [x']", "by simp"], ["proof (state)\nthis:\n  x # ipurge_tr_aux I D U (xs @ [x']) = (x # ipurge_tr_aux I D U xs) @ [x']\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>sinks_aux I D U (x # xs).\n               (v, D x') \\<in> I) \\<Longrightarrow>\n    ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "ultimately"], ["proof (chain)\npicking this:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) =\n  ipurge_tr_aux I D U (x # xs) @ [x']\n  x # ipurge_tr_aux I D U (xs @ [x']) = (x # ipurge_tr_aux I D U xs) @ [x']", "show ?thesis"], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) =\n  ipurge_tr_aux I D U (x # xs) @ [x']\n  x # ipurge_tr_aux I D U (xs @ [x']) = (x # ipurge_tr_aux I D U xs) @ [x']\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "using A"], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D U ((x # xs) @ [x']) =\n  ipurge_tr_aux I D U (x # xs) @ [x']\n  x # ipurge_tr_aux I D U (xs @ [x']) = (x # ipurge_tr_aux I D U xs) @ [x']\n  ipurge_tr_aux I D U (x # xs) = x # ipurge_tr_aux I D U xs\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D U (x # xs @ [x']) =\n    x # ipurge_tr_aux I D U (xs @ [x'])", "by simp"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U (x # xs @ [x']) = x # ipurge_tr_aux I D U (xs @ [x'])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_tr_aux I D U (x # xs @ [x']) = x # ipurge_tr_aux I D U (xs @ [x'])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unaffected_domains_subset:\n  assumes\n    A: \"U \\<subseteq> range D\" and\n    B: \"U \\<noteq> {}\"\n  shows \"unaffected_domains I D U xs \\<subseteq> range D \\<inter> (-I) `` range D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unaffected_domains I D U xs\n    \\<subseteq> range D \\<inter> (- I) `` range D", "proof (subst unaffected_domains_def, rule subsetI, simp, erule conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> range D;\n        \\<forall>v\\<in>sinks_aux I D U xs. (v, x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (- I) `` range D", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> range D;\n        \\<forall>v\\<in>sinks_aux I D U xs. (v, x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (- I) `` range D", "have \"U \\<subseteq> sinks_aux I D U xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. U \\<subseteq> sinks_aux I D U xs", "by (rule sinks_aux_subset)"], ["proof (state)\nthis:\n  U \\<subseteq> sinks_aux I D U xs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> range D;\n        \\<forall>v\\<in>sinks_aux I D U xs. (v, x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (- I) `` range D", "moreover"], ["proof (state)\nthis:\n  U \\<subseteq> sinks_aux I D U xs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> range D;\n        \\<forall>v\\<in>sinks_aux I D U xs. (v, x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (- I) `` range D", "have \"\\<exists>u. u \\<in> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u. u \\<in> U", "using B"], ["proof (prove)\nusing this:\n  U \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>u. u \\<in> U", "by (simp add: ex_in_conv)"], ["proof (state)\nthis:\n  \\<exists>u. u \\<in> U\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> range D;\n        \\<forall>v\\<in>sinks_aux I D U xs. (v, x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (- I) `` range D", "then"], ["proof (chain)\npicking this:\n  \\<exists>u. u \\<in> U", "obtain u where C: \"u \\<in> U\""], ["proof (prove)\nusing this:\n  \\<exists>u. u \\<in> U\n\ngoal (1 subgoal):\n 1. (\\<And>u. u \\<in> U \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  u \\<in> U\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> range D;\n        \\<forall>v\\<in>sinks_aux I D U xs. (v, x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (- I) `` range D", "ultimately"], ["proof (chain)\npicking this:\n  U \\<subseteq> sinks_aux I D U xs\n  u \\<in> U", "have D: \"u \\<in> sinks_aux I D U xs\""], ["proof (prove)\nusing this:\n  U \\<subseteq> sinks_aux I D U xs\n  u \\<in> U\n\ngoal (1 subgoal):\n 1. u \\<in> sinks_aux I D U xs", ".."], ["proof (state)\nthis:\n  u \\<in> sinks_aux I D U xs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> range D;\n        \\<forall>v\\<in>sinks_aux I D U xs. (v, x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (- I) `` range D", "assume \"\\<forall>u \\<in> sinks_aux I D U xs. (u, v) \\<notin> I\""], ["proof (state)\nthis:\n  \\<forall>u\\<in>sinks_aux I D U xs. (u, v) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> range D;\n        \\<forall>v\\<in>sinks_aux I D U xs. (v, x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (- I) `` range D", "hence \"(u, v) \\<notin> I\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>sinks_aux I D U xs. (u, v) \\<notin> I\n\ngoal (1 subgoal):\n 1. (u, v) \\<notin> I", "using D"], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>sinks_aux I D U xs. (u, v) \\<notin> I\n  u \\<in> sinks_aux I D U xs\n\ngoal (1 subgoal):\n 1. (u, v) \\<notin> I", ".."], ["proof (state)\nthis:\n  (u, v) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> range D;\n        \\<forall>v\\<in>sinks_aux I D U xs. (v, x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (- I) `` range D", "hence \"(u, v) \\<in> -I\""], ["proof (prove)\nusing this:\n  (u, v) \\<notin> I\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> - I", "by simp"], ["proof (state)\nthis:\n  (u, v) \\<in> - I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> range D;\n        \\<forall>v\\<in>sinks_aux I D U xs. (v, x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (- I) `` range D", "moreover"], ["proof (state)\nthis:\n  (u, v) \\<in> - I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> range D;\n        \\<forall>v\\<in>sinks_aux I D U xs. (v, x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (- I) `` range D", "have \"u \\<in> range D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> range D", "using A and C"], ["proof (prove)\nusing this:\n  U \\<subseteq> range D\n  u \\<in> U\n\ngoal (1 subgoal):\n 1. u \\<in> range D", ".."], ["proof (state)\nthis:\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> range D;\n        \\<forall>v\\<in>sinks_aux I D U xs. (v, x) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (- I) `` range D", "ultimately"], ["proof (chain)\npicking this:\n  (u, v) \\<in> - I\n  u \\<in> range D", "show \"v \\<in> (-I) `` range D\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> - I\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. v \\<in> (- I) `` range D", ".."], ["proof (state)\nthis:\n  v \\<in> (- I) `` range D\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"The Generic Unwinding Theorem: proof of condition sufficiency\""], ["", "text \\<open>\nRushby's \\emph{Unwinding Theorem for Intransitive Policies} \\cite{R4} states that a sufficient\ncondition for a deterministic state machine with outputs to be secure is the existence of some\ndomain-relation map \\emph{R} such that:\n\n\\begin{enumerate}\n\n\\item\n\\emph{R} is a \\emph{view partition}, i.e. the relations over machine states in its range are\nequivalence relations;\n\n\\item\n\\emph{R} is \\emph{output consistent}, i.e. states equivalent with respect to the domain of an action\nproduce the same output as a result of that action;\n\n\\item\n\\emph{R} is weakly step consistent;\n\n\\item\n\\emph{R} locally respects the policy.\n\n\\end{enumerate}\n\nThe idea behind the theorem is that a machine is secure if its states can be partitioned, for each\ndomain \\emph{u}, into equivalence classes (1), such that the states in any such class \\emph{C} are\nindistinguishable with respect to the actions in \\emph{u} (2), transition into the same equivalence\nclass \\emph{C'} as a result of an action (3), and transition remaining inside \\emph{C} as a result\nof an action not allowed to affect \\emph{u} (4).\n\nThis idea can simply be translated into the realm of Communicating Sequential Processes \\cite{R3} by\nreplacing the words \"machine\", \"state\", \"action\" with \"process\", \"trace\", \"event\", respectively, as\nlong as a clarification is provided of what it precisely means for a pair of traces to be\n\"indistinguishable\" with respect to the events in a given domain. Intuitively, this happens just in\ncase the events in that domain being accepted or refused after either trace are the same, thus the\nsimplest choice would be to replace output consistency with \\emph{future consistency} as defined in\n\\cite{R2}. However, indistinguishability between traces in the same equivalence class is not\nrequired in the case of a domain allowed to be affected by any domain, since the policy puts no\nrestriction on the differences in process histories that may be detected by such a domain. Hence, it\nis sufficient to replace output consistency with \\emph{weak future consistency} \\cite{R2}.\n\nFurthermore, indistinguishability with respect to individual refused events does not imply\nindistinguishability with respect to sets of refused events, i.e. refusals, unless for each trace,\nthe corresponding refusals set is closed under set union. Therefore, for the condition to be\nsufficient for process security, the \\emph{refusals union closure} of the process \\cite{R2} is also\nrequired. As remarked in \\cite{R2}, this property holds for any process admitting a meaningful\ninterpretation, so that taking it as an additional assumption does not give rise to any actual\nlimitation on the applicability of the theorem.\n\nAs a result of these considerations, the Generic Unwinding Theorem, formalized in what follows as\ntheorem \\<open>generic_unwinding\\<close>, states that a sufficient condition for the CSP noninterference\nsecurity \\cite{R1} of a process being refusals union closed \\cite{R2} is the existence of some\ndomain-relation map \\emph{R} such that:\n\n\\begin{enumerate}\n\n\\item\n\\emph{R} is a view partition \\cite{R2};\n\n\\item\n\\emph{R} is weakly future consistent \\cite{R2};\n\n\\item\n\\emph{R} is weakly step consistent;\n\n\\item\n\\emph{R} locally respects the policy.\n\n\\end{enumerate}\n\n\\null\n\\<close>"], ["", "lemma ruc_wfc_failures:\n  assumes\n    RUC:  \"ref_union_closed P\" and\n    WFC:  \"weakly_future_consistent P I D R\" and\n    A:    \"U \\<subseteq> range D \\<inter> (-I) `` range D\" and\n    B:    \"U \\<noteq> {}\" and\n    C:    \"\\<forall>u \\<in> U. (xs, xs') \\<in> R u\" and\n    D:    \"(xs, X) \\<in> failures P\"\n  shows \"(xs', X \\<inter> D -` U) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs', X \\<inter> D -` U) \\<in> failures P", "proof (cases \"\\<exists>x. x \\<in> X \\<inter> D -` U\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P\n 2. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "let ?A = \"singleton_set (X \\<inter> D -` U)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P\n 2. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "have \"\\<forall>xs A. (\\<exists>X. X \\<in> A) \\<longrightarrow> (\\<forall>X \\<in> A. (xs, X) \\<in> failures P) \\<longrightarrow>\n    (xs, \\<Union>X \\<in> A. X) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs A.\n       (\\<exists>X. X \\<in> A) \\<longrightarrow>\n       (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n       (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "using RUC"], ["proof (prove)\nusing this:\n  ref_union_closed P\n\ngoal (1 subgoal):\n 1. \\<forall>xs A.\n       (\\<exists>X. X \\<in> A) \\<longrightarrow>\n       (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n       (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "by (simp add: ref_union_closed_def)"], ["proof (state)\nthis:\n  \\<forall>xs A.\n     (\\<exists>X. X \\<in> A) \\<longrightarrow>\n     (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n     (xs, \\<Union>X\\<in>A. X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P\n 2. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "hence \"(\\<exists>X. X \\<in> ?A) \\<longrightarrow> (\\<forall>X \\<in> ?A. (xs', X) \\<in> failures P) \\<longrightarrow>\n    (xs', \\<Union>X \\<in> ?A. X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  \\<forall>xs A.\n     (\\<exists>X. X \\<in> A) \\<longrightarrow>\n     (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n     (xs, \\<Union>X\\<in>A. X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (\\<exists>Xa.\n        Xa \\<in> singleton_set (X \\<inter> D -` U)) \\<longrightarrow>\n    (\\<forall>X\\<in>singleton_set (X \\<inter> D -` U).\n        (xs', X) \\<in> failures P) \\<longrightarrow>\n    (xs', \\<Union>X\\<in>singleton_set (X \\<inter> D -` U). X)\n    \\<in> failures P", "by blast"], ["proof (state)\nthis:\n  (\\<exists>Xa.\n      Xa \\<in> singleton_set (X \\<inter> D -` U)) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set (X \\<inter> D -` U).\n      (xs', X) \\<in> failures P) \\<longrightarrow>\n  (xs', \\<Union>X\\<in>singleton_set (X \\<inter> D -` U). X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P\n 2. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (\\<exists>Xa.\n      Xa \\<in> singleton_set (X \\<inter> D -` U)) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set (X \\<inter> D -` U).\n      (xs', X) \\<in> failures P) \\<longrightarrow>\n  (xs', \\<Union>X\\<in>singleton_set (X \\<inter> D -` U). X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P\n 2. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "case True"], ["proof (state)\nthis:\n  \\<exists>x. x \\<in> X \\<inter> D -` U\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P\n 2. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "hence \"\\<exists>X. X \\<in> ?A\""], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<in> X \\<inter> D -` U\n\ngoal (1 subgoal):\n 1. \\<exists>Xa. Xa \\<in> singleton_set (X \\<inter> D -` U)", "by (simp add: singleton_set_some)"], ["proof (state)\nthis:\n  \\<exists>Xa. Xa \\<in> singleton_set (X \\<inter> D -` U)\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P\n 2. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>Xa.\n      Xa \\<in> singleton_set (X \\<inter> D -` U)) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set (X \\<inter> D -` U).\n      (xs', X) \\<in> failures P) \\<longrightarrow>\n  (xs', \\<Union>X\\<in>singleton_set (X \\<inter> D -` U). X) \\<in> failures P\n  \\<exists>Xa. Xa \\<in> singleton_set (X \\<inter> D -` U)", "have \"(\\<forall>X \\<in> ?A. (xs', X) \\<in> failures P) \\<longrightarrow>\n    (xs', \\<Union>X \\<in> ?A. X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (\\<exists>Xa.\n      Xa \\<in> singleton_set (X \\<inter> D -` U)) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set (X \\<inter> D -` U).\n      (xs', X) \\<in> failures P) \\<longrightarrow>\n  (xs', \\<Union>X\\<in>singleton_set (X \\<inter> D -` U). X) \\<in> failures P\n  \\<exists>Xa. Xa \\<in> singleton_set (X \\<inter> D -` U)\n\ngoal (1 subgoal):\n 1. (\\<forall>X\\<in>singleton_set (X \\<inter> D -` U).\n        (xs', X) \\<in> failures P) \\<longrightarrow>\n    (xs', \\<Union>X\\<in>singleton_set (X \\<inter> D -` U). X)\n    \\<in> failures P", ".."], ["proof (state)\nthis:\n  (\\<forall>X\\<in>singleton_set (X \\<inter> D -` U).\n      (xs', X) \\<in> failures P) \\<longrightarrow>\n  (xs', \\<Union>X\\<in>singleton_set (X \\<inter> D -` U). X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P\n 2. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (\\<forall>X\\<in>singleton_set (X \\<inter> D -` U).\n      (xs', X) \\<in> failures P) \\<longrightarrow>\n  (xs', \\<Union>X\\<in>singleton_set (X \\<inter> D -` U). X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P\n 2. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "have \"\\<forall>X \\<in> ?A. (xs', X) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>singleton_set (X \\<inter> D -` U).\n       (xs', X) \\<in> failures P", "proof (simp add: singleton_set_def, rule allI, rule impI, erule bexE, erule IntE,\n   simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "have \"\\<forall>u \\<in> range D \\<inter> (-I) `` range D. \\<forall>xs ys. (xs, ys) \\<in> R u \\<longrightarrow>\n      next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n      ref_dom_events P D u xs = ref_dom_events P D u ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n          ref_dom_events P D u xs = ref_dom_events P D u ys", "using WFC"], ["proof (prove)\nusing this:\n  weakly_future_consistent P I D R\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n          ref_dom_events P D u xs = ref_dom_events P D u ys", "by (simp add: weakly_future_consistent_def)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "assume E: \"D x \\<in> U\""], ["proof (state)\nthis:\n  D x \\<in> U\n\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "with A"], ["proof (chain)\npicking this:\n  U \\<subseteq> range D \\<inter> (- I) `` range D\n  D x \\<in> U", "have \"D x \\<in> range D \\<inter> (- I) `` range D\""], ["proof (prove)\nusing this:\n  U \\<subseteq> range D \\<inter> (- I) `` range D\n  D x \\<in> U\n\ngoal (1 subgoal):\n 1. D x \\<in> range D \\<inter> (- I) `` range D", ".."], ["proof (state)\nthis:\n  D x \\<in> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n  D x \\<in> range D \\<inter> (- I) `` range D", "have \"\\<forall>xs ys. (xs, ys) \\<in> R (D x) \\<longrightarrow>\n      next_dom_events P D (D x) xs = next_dom_events P D (D x) ys \\<and>\n      ref_dom_events P D (D x) xs = ref_dom_events P D (D x) ys\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n  D x \\<in> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. \\<forall>xs ys.\n       (xs, ys) \\<in> R (D x) \\<longrightarrow>\n       next_dom_events P D (D x) xs = next_dom_events P D (D x) ys \\<and>\n       ref_dom_events P D (D x) xs = ref_dom_events P D (D x) ys", ".."], ["proof (state)\nthis:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> R (D x) \\<longrightarrow>\n     next_dom_events P D (D x) xs = next_dom_events P D (D x) ys \\<and>\n     ref_dom_events P D (D x) xs = ref_dom_events P D (D x) ys\n\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "hence \"(xs, xs') \\<in> R (D x) \\<longrightarrow>\n      next_dom_events P D (D x) xs = next_dom_events P D (D x) xs' \\<and>\n      ref_dom_events P D (D x) xs = ref_dom_events P D (D x) xs'\""], ["proof (prove)\nusing this:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> R (D x) \\<longrightarrow>\n     next_dom_events P D (D x) xs = next_dom_events P D (D x) ys \\<and>\n     ref_dom_events P D (D x) xs = ref_dom_events P D (D x) ys\n\ngoal (1 subgoal):\n 1. (xs, xs') \\<in> R (D x) \\<longrightarrow>\n    next_dom_events P D (D x) xs = next_dom_events P D (D x) xs' \\<and>\n    ref_dom_events P D (D x) xs = ref_dom_events P D (D x) xs'", "by blast"], ["proof (state)\nthis:\n  (xs, xs') \\<in> R (D x) \\<longrightarrow>\n  next_dom_events P D (D x) xs = next_dom_events P D (D x) xs' \\<and>\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) xs'\n\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (xs, xs') \\<in> R (D x) \\<longrightarrow>\n  next_dom_events P D (D x) xs = next_dom_events P D (D x) xs' \\<and>\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) xs'\n\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "have \"(xs, xs') \\<in> R (D x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, xs') \\<in> R (D x)", "using C and E"], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>U. (xs, xs') \\<in> R u\n  D x \\<in> U\n\ngoal (1 subgoal):\n 1. (xs, xs') \\<in> R (D x)", ".."], ["proof (state)\nthis:\n  (xs, xs') \\<in> R (D x)\n\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (xs, xs') \\<in> R (D x) \\<longrightarrow>\n  next_dom_events P D (D x) xs = next_dom_events P D (D x) xs' \\<and>\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) xs'\n  (xs, xs') \\<in> R (D x)", "have \"ref_dom_events P D (D x) xs =\n      ref_dom_events P D (D x) xs'\""], ["proof (prove)\nusing this:\n  (xs, xs') \\<in> R (D x) \\<longrightarrow>\n  next_dom_events P D (D x) xs = next_dom_events P D (D x) xs' \\<and>\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) xs'\n  (xs, xs') \\<in> R (D x)\n\ngoal (1 subgoal):\n 1. ref_dom_events P D (D x) xs = ref_dom_events P D (D x) xs'", "by simp"], ["proof (state)\nthis:\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) xs'\n\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) xs'\n\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "assume \"x \\<in> X\""], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "hence \"{x} \\<subseteq> X\""], ["proof (prove)\nusing this:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. {x} \\<subseteq> X", "by simp"], ["proof (state)\nthis:\n  {x} \\<subseteq> X\n\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "with D"], ["proof (chain)\npicking this:\n  (xs, X) \\<in> failures P\n  {x} \\<subseteq> X", "have \"(xs, {x}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs, X) \\<in> failures P\n  {x} \\<subseteq> X\n\ngoal (1 subgoal):\n 1. (xs, {x}) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs, {x}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "hence \"x \\<in> ref_dom_events P D (D x) xs\""], ["proof (prove)\nusing this:\n  (xs, {x}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. x \\<in> ref_dom_events P D (D x) xs", "by (simp add: ref_dom_events_def refusals_def)"], ["proof (state)\nthis:\n  x \\<in> ref_dom_events P D (D x) xs\n\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) xs'\n  x \\<in> ref_dom_events P D (D x) xs", "have \"x \\<in> ref_dom_events P D (D x) xs'\""], ["proof (prove)\nusing this:\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) xs'\n  x \\<in> ref_dom_events P D (D x) xs\n\ngoal (1 subgoal):\n 1. x \\<in> ref_dom_events P D (D x) xs'", "by simp"], ["proof (state)\nthis:\n  x \\<in> ref_dom_events P D (D x) xs'\n\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Xa = {x}; x \\<in> X; D x \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (xs', {x}) \\<in> failures P", "thus \"(xs', {x}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  x \\<in> ref_dom_events P D (D x) xs'\n\ngoal (1 subgoal):\n 1. (xs', {x}) \\<in> failures P", "by (simp add: ref_dom_events_def refusals_def)"], ["proof (state)\nthis:\n  (xs', {x}) \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>X\\<in>singleton_set (X \\<inter> D -` U).\n     (xs', X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P\n 2. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (\\<forall>X\\<in>singleton_set (X \\<inter> D -` U).\n      (xs', X) \\<in> failures P) \\<longrightarrow>\n  (xs', \\<Union>X\\<in>singleton_set (X \\<inter> D -` U). X) \\<in> failures P\n  \\<forall>X\\<in>singleton_set (X \\<inter> D -` U).\n     (xs', X) \\<in> failures P", "have \"(xs', \\<Union>X \\<in> ?A. X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (\\<forall>X\\<in>singleton_set (X \\<inter> D -` U).\n      (xs', X) \\<in> failures P) \\<longrightarrow>\n  (xs', \\<Union>X\\<in>singleton_set (X \\<inter> D -` U). X) \\<in> failures P\n  \\<forall>X\\<in>singleton_set (X \\<inter> D -` U).\n     (xs', X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs', \\<Union>X\\<in>singleton_set (X \\<inter> D -` U). X)\n    \\<in> failures P", ".."], ["proof (state)\nthis:\n  (xs', \\<Union>X\\<in>singleton_set (X \\<inter> D -` U). X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P\n 2. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "thus \"(xs', X \\<inter> D -` U) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs', \\<Union>X\\<in>singleton_set (X \\<inter> D -` U). X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs', X \\<inter> D -` U) \\<in> failures P", "by (simp only: singleton_set_union)"], ["proof (state)\nthis:\n  (xs', X \\<inter> D -` U) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "have \"\\<exists>u. u \\<in> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u. u \\<in> U", "using B"], ["proof (prove)\nusing this:\n  U \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>u. u \\<in> U", "by (simp add: ex_in_conv)"], ["proof (state)\nthis:\n  \\<exists>u. u \\<in> U\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "then"], ["proof (chain)\npicking this:\n  \\<exists>u. u \\<in> U", "obtain u where E: \"u \\<in> U\""], ["proof (prove)\nusing this:\n  \\<exists>u. u \\<in> U\n\ngoal (1 subgoal):\n 1. (\\<And>u. u \\<in> U \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  u \\<in> U\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "with A"], ["proof (chain)\npicking this:\n  U \\<subseteq> range D \\<inter> (- I) `` range D\n  u \\<in> U", "have \"u \\<in> range D \\<inter> (- I) `` range D\""], ["proof (prove)\nusing this:\n  U \\<subseteq> range D \\<inter> (- I) `` range D\n  u \\<in> U\n\ngoal (1 subgoal):\n 1. u \\<in> range D \\<inter> (- I) `` range D", ".."], ["proof (state)\nthis:\n  u \\<in> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  u \\<in> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "have \"(xs, xs') \\<in> R u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, xs') \\<in> R u", "using C and E"], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>U. (xs, xs') \\<in> R u\n  u \\<in> U\n\ngoal (1 subgoal):\n 1. (xs, xs') \\<in> R u", ".."], ["proof (state)\nthis:\n  (xs, xs') \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  u \\<in> range D \\<inter> (- I) `` range D\n  (xs, xs') \\<in> R u", "have \"(xs \\<in> traces P) = (xs' \\<in> traces P)\""], ["proof (prove)\nusing this:\n  u \\<in> range D \\<inter> (- I) `` range D\n  (xs, xs') \\<in> R u\n\ngoal (1 subgoal):\n 1. (xs \\<in> traces P) = (xs' \\<in> traces P)", "by (rule wfc_traces [OF WFC])"], ["proof (state)\nthis:\n  (xs \\<in> traces P) = (xs' \\<in> traces P)\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (xs \\<in> traces P) = (xs' \\<in> traces P)\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "have \"xs \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> traces P", "using D"], ["proof (prove)\nusing this:\n  (xs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (xs \\<in> traces P) = (xs' \\<in> traces P)\n  xs \\<in> traces P", "have \"xs' \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs \\<in> traces P) = (xs' \\<in> traces P)\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. xs' \\<in> traces P", "by simp"], ["proof (state)\nthis:\n  xs' \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "hence \"(xs', {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  xs' \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs', {}) \\<in> failures P", "by (rule traces_failures)"], ["proof (state)\nthis:\n  (xs', {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (xs', {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "case False"], ["proof (state)\nthis:\n  \\<nexists>x. x \\<in> X \\<inter> D -` U\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "hence \"X \\<inter> D -` U = {}\""], ["proof (prove)\nusing this:\n  \\<nexists>x. x \\<in> X \\<inter> D -` U\n\ngoal (1 subgoal):\n 1. X \\<inter> D -` U = {}", "by (simp only: ex_in_conv, simp)"], ["proof (state)\nthis:\n  X \\<inter> D -` U = {}\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> X \\<inter> D -` U \\<Longrightarrow>\n    (xs', X \\<inter> D -` U) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (xs', {}) \\<in> failures P\n  X \\<inter> D -` U = {}", "show \"(xs', X \\<inter> D -` U) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs', {}) \\<in> failures P\n  X \\<inter> D -` U = {}\n\ngoal (1 subgoal):\n 1. (xs', X \\<inter> D -` U) \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  (xs', X \\<inter> D -` U) \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ruc_wfc_lr_failures_1:\n  assumes\n    RUC:  \"ref_union_closed P\" and\n    WFC:  \"weakly_future_consistent P I D R\" and\n    LR:   \"locally_respects P I D R\" and\n    A:    \"(xs @ [y], Y) \\<in> failures P\"\n  shows \"(xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "proof (cases \"\\<exists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "let ?A = \"singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "have \"\\<forall>xs A. (\\<exists>X. X \\<in> A) \\<longrightarrow> (\\<forall>X \\<in> A. (xs, X) \\<in> failures P) \\<longrightarrow>\n    (xs, \\<Union>X \\<in> A. X) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs A.\n       (\\<exists>X. X \\<in> A) \\<longrightarrow>\n       (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n       (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "using RUC"], ["proof (prove)\nusing this:\n  ref_union_closed P\n\ngoal (1 subgoal):\n 1. \\<forall>xs A.\n       (\\<exists>X. X \\<in> A) \\<longrightarrow>\n       (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n       (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "by (simp add: ref_union_closed_def)"], ["proof (state)\nthis:\n  \\<forall>xs A.\n     (\\<exists>X. X \\<in> A) \\<longrightarrow>\n     (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n     (xs, \\<Union>X\\<in>A. X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "hence \"(\\<exists>X. X \\<in> ?A) \\<longrightarrow> (\\<forall>X \\<in> ?A. (xs, X) \\<in> failures P) \\<longrightarrow>\n    (xs, \\<Union>X \\<in> ?A. X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  \\<forall>xs A.\n     (\\<exists>X. X \\<in> A) \\<longrightarrow>\n     (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n     (xs, \\<Union>X\\<in>A. X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (\\<exists>X.\n        X \\<in> singleton_set\n                 {x \\<in> Y. (D y, D x) \\<notin> I}) \\<longrightarrow>\n    (\\<forall>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}.\n        (xs, X) \\<in> failures P) \\<longrightarrow>\n    (xs, \\<Union>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}. X)\n    \\<in> failures P", "by blast"], ["proof (state)\nthis:\n  (\\<exists>X.\n      X \\<in> singleton_set\n               {x \\<in> Y. (D y, D x) \\<notin> I}) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (\\<exists>X.\n      X \\<in> singleton_set\n               {x \\<in> Y. (D y, D x) \\<notin> I}) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "case True"], ["proof (state)\nthis:\n  \\<exists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I}\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "hence \"\\<exists>X. X \\<in> ?A\""], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I}\n\ngoal (1 subgoal):\n 1. \\<exists>X. X \\<in> singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}", "by (simp add: singleton_set_some)"], ["proof (state)\nthis:\n  \\<exists>X. X \\<in> singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>X.\n      X \\<in> singleton_set\n               {x \\<in> Y. (D y, D x) \\<notin> I}) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n  \\<exists>X. X \\<in> singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}", "have \"(\\<forall>X \\<in> ?A. (xs, X) \\<in> failures P) \\<longrightarrow>\n    (xs, \\<Union>X \\<in> ?A. X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (\\<exists>X.\n      X \\<in> singleton_set\n               {x \\<in> Y. (D y, D x) \\<notin> I}) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n  \\<exists>X. X \\<in> singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}\n\ngoal (1 subgoal):\n 1. (\\<forall>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}.\n        (xs, X) \\<in> failures P) \\<longrightarrow>\n    (xs, \\<Union>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}. X)\n    \\<in> failures P", ".."], ["proof (state)\nthis:\n  (\\<forall>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (\\<forall>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "have \"\\<forall>X \\<in> ?A. (xs, X) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}.\n       (xs, X) \\<in> failures P", "proof (rule ballI, simp add: singleton_set_def, erule exE, (erule conjE)+, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "have \"\\<forall>u \\<in> range D \\<inter> (-I) `` range D. \\<forall>xs ys. (xs, ys) \\<in> R u \\<longrightarrow>\n      next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n      ref_dom_events P D u xs = ref_dom_events P D u ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n          ref_dom_events P D u xs = ref_dom_events P D u ys", "using WFC"], ["proof (prove)\nusing this:\n  weakly_future_consistent P I D R\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n          ref_dom_events P D u xs = ref_dom_events P D u ys", "by (simp add: weakly_future_consistent_def)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "assume B: \"(D y, D x) \\<notin> I\""], ["proof (state)\nthis:\n  (D y, D x) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "hence \"D x \\<in> range D \\<inter> (-I) `` range D\""], ["proof (prove)\nusing this:\n  (D y, D x) \\<notin> I\n\ngoal (1 subgoal):\n 1. D x \\<in> range D \\<inter> (- I) `` range D", "by (simp add: Image_iff, rule exI)"], ["proof (state)\nthis:\n  D x \\<in> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n  D x \\<in> range D \\<inter> (- I) `` range D", "have \"\\<forall>xs ys. (xs, ys) \\<in> R (D x) \\<longrightarrow>\n      next_dom_events P D (D x) xs = next_dom_events P D (D x) ys \\<and>\n      ref_dom_events P D (D x) xs = ref_dom_events P D (D x) ys\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n  D x \\<in> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. \\<forall>xs ys.\n       (xs, ys) \\<in> R (D x) \\<longrightarrow>\n       next_dom_events P D (D x) xs = next_dom_events P D (D x) ys \\<and>\n       ref_dom_events P D (D x) xs = ref_dom_events P D (D x) ys", ".."], ["proof (state)\nthis:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> R (D x) \\<longrightarrow>\n     next_dom_events P D (D x) xs = next_dom_events P D (D x) ys \\<and>\n     ref_dom_events P D (D x) xs = ref_dom_events P D (D x) ys\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "hence C: \"(xs, xs @ [y]) \\<in> R (D x) \\<longrightarrow>\n      ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\""], ["proof (prove)\nusing this:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> R (D x) \\<longrightarrow>\n     next_dom_events P D (D x) xs = next_dom_events P D (D x) ys \\<and>\n     ref_dom_events P D (D x) xs = ref_dom_events P D (D x) ys\n\ngoal (1 subgoal):\n 1. (xs, xs @ [y]) \\<in> R (D x) \\<longrightarrow>\n    ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])", "by simp"], ["proof (state)\nthis:\n  (xs, xs @ [y]) \\<in> R (D x) \\<longrightarrow>\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "have \"\\<forall>xs y. (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n      (xs, xs @ [y]) \\<in> R (D x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs y.\n       (D y, D x) \\<notin> I \\<and>\n       y \\<in> next_events P xs \\<longrightarrow>\n       (xs, xs @ [y]) \\<in> R (D x)", "using LR"], ["proof (prove)\nusing this:\n  locally_respects P I D R\n\ngoal (1 subgoal):\n 1. \\<forall>xs y.\n       (D y, D x) \\<notin> I \\<and>\n       y \\<in> next_events P xs \\<longrightarrow>\n       (xs, xs @ [y]) \\<in> R (D x)", "by (simp add: locally_respects_def)"], ["proof (state)\nthis:\n  \\<forall>xs y.\n     (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n     (xs, xs @ [y]) \\<in> R (D x)\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "hence \"(D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow> (xs, xs @ [y]) \\<in> R (D x)\""], ["proof (prove)\nusing this:\n  \\<forall>xs y.\n     (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n     (xs, xs @ [y]) \\<in> R (D x)\n\ngoal (1 subgoal):\n 1. (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n    (xs, xs @ [y]) \\<in> R (D x)", "by blast"], ["proof (state)\nthis:\n  (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R (D x)\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R (D x)\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "have \"xs @ [y] \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ [y] \\<in> traces P", "using A"], ["proof (prove)\nusing this:\n  (xs @ [y], Y) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ [y] \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ [y] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "hence \"y \\<in> next_events P xs\""], ["proof (prove)\nusing this:\n  xs @ [y] \\<in> traces P\n\ngoal (1 subgoal):\n 1. y \\<in> next_events P xs", "by (simp add: next_events_def)"], ["proof (state)\nthis:\n  y \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R (D x)\n  y \\<in> next_events P xs", "have \"(xs, xs @ [y]) \\<in> R (D x)\""], ["proof (prove)\nusing this:\n  (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R (D x)\n  y \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. (xs, xs @ [y]) \\<in> R (D x)", "using B"], ["proof (prove)\nusing this:\n  (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R (D x)\n  y \\<in> next_events P xs\n  (D y, D x) \\<notin> I\n\ngoal (1 subgoal):\n 1. (xs, xs @ [y]) \\<in> R (D x)", "by simp"], ["proof (state)\nthis:\n  (xs, xs @ [y]) \\<in> R (D x)\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "with C"], ["proof (chain)\npicking this:\n  (xs, xs @ [y]) \\<in> R (D x) \\<longrightarrow>\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\n  (xs, xs @ [y]) \\<in> R (D x)", "have \"ref_dom_events P D (D x) xs =\n      ref_dom_events P D (D x) (xs @ [y])\""], ["proof (prove)\nusing this:\n  (xs, xs @ [y]) \\<in> R (D x) \\<longrightarrow>\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\n  (xs, xs @ [y]) \\<in> R (D x)\n\ngoal (1 subgoal):\n 1. ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])", ".."], ["proof (state)\nthis:\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "assume D: \"x \\<in> Y\""], ["proof (state)\nthis:\n  x \\<in> Y\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "have \"x \\<in> ref_dom_events P D (D x) (xs @ [y])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> ref_dom_events P D (D x) (xs @ [y])", "proof (simp add: ref_dom_events_def refusals_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (xs @ [y], {x}) \\<in> failures P", "have \"{x} \\<subseteq> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x} \\<subseteq> Y", "using D"], ["proof (prove)\nusing this:\n  x \\<in> Y\n\ngoal (1 subgoal):\n 1. {x} \\<subseteq> Y", "by (simp add: ipurge_ref_def)"], ["proof (state)\nthis:\n  {x} \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. (xs @ [y], {x}) \\<in> failures P", "with A"], ["proof (chain)\npicking this:\n  (xs @ [y], Y) \\<in> failures P\n  {x} \\<subseteq> Y", "show \"(xs @ [y], {x}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ [y], Y) \\<in> failures P\n  {x} \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. (xs @ [y], {x}) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs @ [y], {x}) \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> ref_dom_events P D (D x) (xs @ [y])\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\n  x \\<in> ref_dom_events P D (D x) (xs @ [y])", "have \"x \\<in> ref_dom_events P D (D x) xs\""], ["proof (prove)\nusing this:\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\n  x \\<in> ref_dom_events P D (D x) (xs @ [y])\n\ngoal (1 subgoal):\n 1. x \\<in> ref_dom_events P D (D x) xs", "by simp"], ["proof (state)\nthis:\n  x \\<in> ref_dom_events P D (D x) xs\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Y; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "thus \"(xs, {x}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  x \\<in> ref_dom_events P D (D x) xs\n\ngoal (1 subgoal):\n 1. (xs, {x}) \\<in> failures P", "by (simp add: ref_dom_events_def refusals_def)"], ["proof (state)\nthis:\n  (xs, {x}) \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}.\n     (xs, X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (\\<forall>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n  \\<forall>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}.\n     (xs, X) \\<in> failures P", "have \"(xs, \\<Union>X \\<in> ?A. X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (\\<forall>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n  \\<forall>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}.\n     (xs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, \\<Union>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}. X)\n    \\<in> failures P", ".."], ["proof (state)\nthis:\n  (xs, \\<Union>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs, \\<Union>X\\<in>singleton_set {x \\<in> Y. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "by (simp only: singleton_set_union)"], ["proof (state)\nthis:\n  (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "case False"], ["proof (state)\nthis:\n  \\<nexists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I}\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "hence \"{x \\<in> Y. (D y, D x) \\<notin> I} = {}\""], ["proof (prove)\nusing this:\n  \\<nexists>x. x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I}\n\ngoal (1 subgoal):\n 1. {x \\<in> Y. (D y, D x) \\<notin> I} = {}", "by simp"], ["proof (state)\nthis:\n  {x \\<in> Y. (D y, D x) \\<notin> I} = {}\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  {x \\<in> Y. (D y, D x) \\<notin> I} = {}\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "have \"(xs, {}) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> failures P", "using A"], ["proof (prove)\nusing this:\n  (xs @ [y], Y) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> failures P", "by (rule process_rule_2)"], ["proof (state)\nthis:\n  (xs, {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       x \\<in> {x \\<in> Y. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  {x \\<in> Y. (D y, D x) \\<notin> I} = {}\n  (xs, {}) \\<in> failures P", "show ?thesis"], ["proof (prove)\nusing this:\n  {x \\<in> Y. (D y, D x) \\<notin> I} = {}\n  (xs, {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "by (simp (no_asm_simp))"], ["proof (state)\nthis:\n  (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ruc_wfc_lr_failures_2:\n  assumes\n    RUC:  \"ref_union_closed P\" and\n    WFC:  \"weakly_future_consistent P I D R\" and\n    LR:   \"locally_respects P I D R\" and\n    A:    \"(xs, Z) \\<in> failures P\" and\n    Y:    \"xs @ [y] \\<in> traces P\"\n  shows \"(xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "proof (cases \"\\<exists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "let ?A = \"singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "have \"\\<forall>xs A. (\\<exists>X. X \\<in> A) \\<longrightarrow> (\\<forall>X \\<in> A. (xs, X) \\<in> failures P) \\<longrightarrow>\n    (xs, \\<Union>X \\<in> A. X) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs A.\n       (\\<exists>X. X \\<in> A) \\<longrightarrow>\n       (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n       (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "using RUC"], ["proof (prove)\nusing this:\n  ref_union_closed P\n\ngoal (1 subgoal):\n 1. \\<forall>xs A.\n       (\\<exists>X. X \\<in> A) \\<longrightarrow>\n       (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n       (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "by (simp add: ref_union_closed_def)"], ["proof (state)\nthis:\n  \\<forall>xs A.\n     (\\<exists>X. X \\<in> A) \\<longrightarrow>\n     (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n     (xs, \\<Union>X\\<in>A. X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "hence \"(\\<exists>X. X \\<in> ?A) \\<longrightarrow> (\\<forall>X \\<in> ?A. (xs @ [y], X) \\<in> failures P) \\<longrightarrow>\n    (xs @ [y], \\<Union>X \\<in> ?A. X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  \\<forall>xs A.\n     (\\<exists>X. X \\<in> A) \\<longrightarrow>\n     (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n     (xs, \\<Union>X\\<in>A. X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (\\<exists>X.\n        X \\<in> singleton_set\n                 {x \\<in> Z. (D y, D x) \\<notin> I}) \\<longrightarrow>\n    (\\<forall>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}.\n        (xs @ [y], X) \\<in> failures P) \\<longrightarrow>\n    (xs @ [y],\n     \\<Union>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}. X)\n    \\<in> failures P", "by blast"], ["proof (state)\nthis:\n  (\\<exists>X.\n      X \\<in> singleton_set\n               {x \\<in> Z. (D y, D x) \\<notin> I}) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}.\n      (xs @ [y], X) \\<in> failures P) \\<longrightarrow>\n  (xs @ [y],\n   \\<Union>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (\\<exists>X.\n      X \\<in> singleton_set\n               {x \\<in> Z. (D y, D x) \\<notin> I}) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}.\n      (xs @ [y], X) \\<in> failures P) \\<longrightarrow>\n  (xs @ [y],\n   \\<Union>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "case True"], ["proof (state)\nthis:\n  \\<exists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I}\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "hence \"\\<exists>X. X \\<in> ?A\""], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I}\n\ngoal (1 subgoal):\n 1. \\<exists>X. X \\<in> singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}", "by (simp add: singleton_set_some)"], ["proof (state)\nthis:\n  \\<exists>X. X \\<in> singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>X.\n      X \\<in> singleton_set\n               {x \\<in> Z. (D y, D x) \\<notin> I}) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}.\n      (xs @ [y], X) \\<in> failures P) \\<longrightarrow>\n  (xs @ [y],\n   \\<Union>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n  \\<exists>X. X \\<in> singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}", "have \"(\\<forall>X \\<in> ?A. (xs @ [y], X) \\<in> failures P) \\<longrightarrow>\n    (xs @ [y], \\<Union>X \\<in> ?A. X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (\\<exists>X.\n      X \\<in> singleton_set\n               {x \\<in> Z. (D y, D x) \\<notin> I}) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}.\n      (xs @ [y], X) \\<in> failures P) \\<longrightarrow>\n  (xs @ [y],\n   \\<Union>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n  \\<exists>X. X \\<in> singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}\n\ngoal (1 subgoal):\n 1. (\\<forall>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}.\n        (xs @ [y], X) \\<in> failures P) \\<longrightarrow>\n    (xs @ [y],\n     \\<Union>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}. X)\n    \\<in> failures P", ".."], ["proof (state)\nthis:\n  (\\<forall>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}.\n      (xs @ [y], X) \\<in> failures P) \\<longrightarrow>\n  (xs @ [y],\n   \\<Union>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (\\<forall>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}.\n      (xs @ [y], X) \\<in> failures P) \\<longrightarrow>\n  (xs @ [y],\n   \\<Union>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "have \"\\<forall>X \\<in> ?A. (xs @ [y], X) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}.\n       (xs @ [y], X) \\<in> failures P", "proof (rule ballI, simp add: singleton_set_def, erule exE, (erule conjE)+, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "have \"\\<forall>u \\<in> range D \\<inter> (-I) `` range D. \\<forall>xs ys. (xs, ys) \\<in> R u \\<longrightarrow>\n      next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n      ref_dom_events P D u xs = ref_dom_events P D u ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n          ref_dom_events P D u xs = ref_dom_events P D u ys", "using WFC"], ["proof (prove)\nusing this:\n  weakly_future_consistent P I D R\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n          ref_dom_events P D u xs = ref_dom_events P D u ys", "by (simp add: weakly_future_consistent_def)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "assume B: \"(D y, D x) \\<notin> I\""], ["proof (state)\nthis:\n  (D y, D x) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "hence \"D x \\<in> range D \\<inter> (-I) `` range D\""], ["proof (prove)\nusing this:\n  (D y, D x) \\<notin> I\n\ngoal (1 subgoal):\n 1. D x \\<in> range D \\<inter> (- I) `` range D", "by (simp add: Image_iff, rule exI)"], ["proof (state)\nthis:\n  D x \\<in> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n  D x \\<in> range D \\<inter> (- I) `` range D", "have \"\\<forall>xs ys. (xs, ys) \\<in> R (D x) \\<longrightarrow>\n      next_dom_events P D (D x) xs = next_dom_events P D (D x) ys \\<and>\n      ref_dom_events P D (D x) xs = ref_dom_events P D (D x) ys\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n  D x \\<in> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. \\<forall>xs ys.\n       (xs, ys) \\<in> R (D x) \\<longrightarrow>\n       next_dom_events P D (D x) xs = next_dom_events P D (D x) ys \\<and>\n       ref_dom_events P D (D x) xs = ref_dom_events P D (D x) ys", ".."], ["proof (state)\nthis:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> R (D x) \\<longrightarrow>\n     next_dom_events P D (D x) xs = next_dom_events P D (D x) ys \\<and>\n     ref_dom_events P D (D x) xs = ref_dom_events P D (D x) ys\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "hence C: \"(xs, xs @ [y]) \\<in> R (D x) \\<longrightarrow>\n      ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\""], ["proof (prove)\nusing this:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> R (D x) \\<longrightarrow>\n     next_dom_events P D (D x) xs = next_dom_events P D (D x) ys \\<and>\n     ref_dom_events P D (D x) xs = ref_dom_events P D (D x) ys\n\ngoal (1 subgoal):\n 1. (xs, xs @ [y]) \\<in> R (D x) \\<longrightarrow>\n    ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])", "by simp"], ["proof (state)\nthis:\n  (xs, xs @ [y]) \\<in> R (D x) \\<longrightarrow>\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "have \"\\<forall>xs y. (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n      (xs, xs @ [y]) \\<in> R (D x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs y.\n       (D y, D x) \\<notin> I \\<and>\n       y \\<in> next_events P xs \\<longrightarrow>\n       (xs, xs @ [y]) \\<in> R (D x)", "using LR"], ["proof (prove)\nusing this:\n  locally_respects P I D R\n\ngoal (1 subgoal):\n 1. \\<forall>xs y.\n       (D y, D x) \\<notin> I \\<and>\n       y \\<in> next_events P xs \\<longrightarrow>\n       (xs, xs @ [y]) \\<in> R (D x)", "by (simp add: locally_respects_def)"], ["proof (state)\nthis:\n  \\<forall>xs y.\n     (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n     (xs, xs @ [y]) \\<in> R (D x)\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "hence \"(D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow> (xs, xs @ [y]) \\<in> R (D x)\""], ["proof (prove)\nusing this:\n  \\<forall>xs y.\n     (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n     (xs, xs @ [y]) \\<in> R (D x)\n\ngoal (1 subgoal):\n 1. (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n    (xs, xs @ [y]) \\<in> R (D x)", "by blast"], ["proof (state)\nthis:\n  (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R (D x)\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R (D x)\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "have \"y \\<in> next_events P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> next_events P xs", "using Y"], ["proof (prove)\nusing this:\n  xs @ [y] \\<in> traces P\n\ngoal (1 subgoal):\n 1. y \\<in> next_events P xs", "by (simp add: next_events_def)"], ["proof (state)\nthis:\n  y \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R (D x)\n  y \\<in> next_events P xs", "have \"(xs, xs @ [y]) \\<in> R (D x)\""], ["proof (prove)\nusing this:\n  (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R (D x)\n  y \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. (xs, xs @ [y]) \\<in> R (D x)", "using B"], ["proof (prove)\nusing this:\n  (D y, D x) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R (D x)\n  y \\<in> next_events P xs\n  (D y, D x) \\<notin> I\n\ngoal (1 subgoal):\n 1. (xs, xs @ [y]) \\<in> R (D x)", "by simp"], ["proof (state)\nthis:\n  (xs, xs @ [y]) \\<in> R (D x)\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "with C"], ["proof (chain)\npicking this:\n  (xs, xs @ [y]) \\<in> R (D x) \\<longrightarrow>\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\n  (xs, xs @ [y]) \\<in> R (D x)", "have \"ref_dom_events P D (D x) xs =\n      ref_dom_events P D (D x) (xs @ [y])\""], ["proof (prove)\nusing this:\n  (xs, xs @ [y]) \\<in> R (D x) \\<longrightarrow>\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\n  (xs, xs @ [y]) \\<in> R (D x)\n\ngoal (1 subgoal):\n 1. ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])", ".."], ["proof (state)\nthis:\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "assume D: \"x \\<in> Z\""], ["proof (state)\nthis:\n  x \\<in> Z\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "have \"x \\<in> ref_dom_events P D (D x) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> ref_dom_events P D (D x) xs", "proof (simp add: ref_dom_events_def refusals_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (xs, {x}) \\<in> failures P", "have \"{x} \\<subseteq> Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x} \\<subseteq> Z", "using D"], ["proof (prove)\nusing this:\n  x \\<in> Z\n\ngoal (1 subgoal):\n 1. {x} \\<subseteq> Z", "by (simp add: ipurge_ref_def)"], ["proof (state)\nthis:\n  {x} \\<subseteq> Z\n\ngoal (1 subgoal):\n 1. (xs, {x}) \\<in> failures P", "with A"], ["proof (chain)\npicking this:\n  (xs, Z) \\<in> failures P\n  {x} \\<subseteq> Z", "show \"(xs, {x}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs, Z) \\<in> failures P\n  {x} \\<subseteq> Z\n\ngoal (1 subgoal):\n 1. (xs, {x}) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs, {x}) \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> ref_dom_events P D (D x) xs\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\n  x \\<in> ref_dom_events P D (D x) xs", "have \"x \\<in> ref_dom_events P D (D x) (xs @ [y])\""], ["proof (prove)\nusing this:\n  ref_dom_events P D (D x) xs = ref_dom_events P D (D x) (xs @ [y])\n  x \\<in> ref_dom_events P D (D x) xs\n\ngoal (1 subgoal):\n 1. x \\<in> ref_dom_events P D (D x) (xs @ [y])", "by simp"], ["proof (state)\nthis:\n  x \\<in> ref_dom_events P D (D x) (xs @ [y])\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> Z; (D y, D x) \\<notin> I; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {x}) \\<in> failures P", "thus \"(xs @ [y], {x}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  x \\<in> ref_dom_events P D (D x) (xs @ [y])\n\ngoal (1 subgoal):\n 1. (xs @ [y], {x}) \\<in> failures P", "by (simp add: ref_dom_events_def refusals_def)"], ["proof (state)\nthis:\n  (xs @ [y], {x}) \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}.\n     (xs @ [y], X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (\\<forall>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}.\n      (xs @ [y], X) \\<in> failures P) \\<longrightarrow>\n  (xs @ [y],\n   \\<Union>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n  \\<forall>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}.\n     (xs @ [y], X) \\<in> failures P", "have \"(xs @ [y], \\<Union>X \\<in> ?A. X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (\\<forall>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}.\n      (xs @ [y], X) \\<in> failures P) \\<longrightarrow>\n  (xs @ [y],\n   \\<Union>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n  \\<forall>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}.\n     (xs @ [y], X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ [y],\n     \\<Union>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}. X)\n    \\<in> failures P", ".."], ["proof (state)\nthis:\n  (xs @ [y],\n   \\<Union>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs @ [y],\n   \\<Union>X\\<in>singleton_set {x \\<in> Z. (D y, D x) \\<notin> I}. X)\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "by (simp only: singleton_set_union)"], ["proof (state)\nthis:\n  (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "case False"], ["proof (state)\nthis:\n  \\<nexists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I}\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "hence \"{x \\<in> Z. (D y, D x) \\<notin> I} = {}\""], ["proof (prove)\nusing this:\n  \\<nexists>x. x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I}\n\ngoal (1 subgoal):\n 1. {x \\<in> Z. (D y, D x) \\<notin> I} = {}", "by simp"], ["proof (state)\nthis:\n  {x \\<in> Z. (D y, D x) \\<notin> I} = {}\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  {x \\<in> Z. (D y, D x) \\<notin> I} = {}\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "have \"(xs @ [y], {}) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P", "using Y"], ["proof (prove)\nusing this:\n  xs @ [y] \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P", "by (rule traces_failures)"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       x \\<in> {x \\<in> Z. (D y, D x) \\<notin> I} \\<Longrightarrow>\n    (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  {x \\<in> Z. (D y, D x) \\<notin> I} = {}\n  (xs @ [y], {}) \\<in> failures P", "show ?thesis"], ["proof (prove)\nusing this:\n  {x \\<in> Z. (D y, D x) \\<notin> I} = {}\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "by (simp (no_asm_simp))"], ["proof (state)\nthis:\n  (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gu_condition_imply_secure_aux [rule_format]:\n  assumes\n    VP:   \"view_partition P D R\" and\n    WFC:  \"weakly_future_consistent P I D R\" and\n    WSC:  \"weakly_step_consistent P D R\" and\n    LR:   \"locally_respects P I D R\"\n  shows \"U \\<subseteq> range D \\<longrightarrow> U \\<noteq> {} \\<longrightarrow> xs @ ys \\<in> traces P \\<longrightarrow>\n    (\\<forall>u \\<in> unaffected_domains I D U []. (xs, xs') \\<in> R u) \\<longrightarrow>\n    (\\<forall>u \\<in> unaffected_domains I D U ys.\n      (xs @ ys, xs' @ ipurge_tr_aux I D U ys) \\<in> R u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. U \\<subseteq> range D \\<longrightarrow>\n    U \\<noteq> {} \\<longrightarrow>\n    xs @ ys \\<in> traces P \\<longrightarrow>\n    (\\<forall>u\\<in>unaffected_domains I D U [].\n        (xs, xs') \\<in> R u) \\<longrightarrow>\n    (\\<forall>u\\<in>unaffected_domains I D U ys.\n        (xs @ ys, xs' @ ipurge_tr_aux I D U ys) \\<in> R u)", "proof (induction ys arbitrary: xs xs' U, simp_all add: unaffected_domains_def,\n ((rule impI)+, (rule allI)?)+, erule conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ys xs xs' U u.\n       \\<lbrakk>\\<And>xs xs' U.\n                   U \\<subseteq> range D \\<longrightarrow>\n                   U \\<noteq> {} \\<longrightarrow>\n                   xs @ ys \\<in> traces P \\<longrightarrow>\n                   (\\<forall>u.\n                       u \\<in> range D \\<and>\n                       (\\<forall>v\\<in>U.\n                           (v, u) \\<notin> I) \\<longrightarrow>\n                       (xs, xs') \\<in> R u) \\<longrightarrow>\n                   (\\<forall>u.\n                       u \\<in> range D \\<and>\n                       (\\<forall>v\\<in>sinks_aux I D U ys.\n                           (v, u) \\<notin> I) \\<longrightarrow>\n                       (xs @ ys, xs' @ ipurge_tr_aux I D U ys) \\<in> R u);\n        U \\<subseteq> range D; U \\<noteq> {}; xs @ a # ys \\<in> traces P;\n        \\<forall>u.\n           u \\<in> range D \\<and>\n           (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n           (xs, xs') \\<in> R u;\n        u \\<in> range D;\n        \\<forall>v\\<in>sinks_aux I D U (a # ys). (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ a # ys, xs' @ ipurge_tr_aux I D U (a # ys))\n                         \\<in> R u", "fix y ys xs xs' U u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ys xs xs' U u.\n       \\<lbrakk>\\<And>xs xs' U.\n                   U \\<subseteq> range D \\<longrightarrow>\n                   U \\<noteq> {} \\<longrightarrow>\n                   xs @ ys \\<in> traces P \\<longrightarrow>\n                   (\\<forall>u.\n                       u \\<in> range D \\<and>\n                       (\\<forall>v\\<in>U.\n                           (v, u) \\<notin> I) \\<longrightarrow>\n                       (xs, xs') \\<in> R u) \\<longrightarrow>\n                   (\\<forall>u.\n                       u \\<in> range D \\<and>\n                       (\\<forall>v\\<in>sinks_aux I D U ys.\n                           (v, u) \\<notin> I) \\<longrightarrow>\n                       (xs @ ys, xs' @ ipurge_tr_aux I D U ys) \\<in> R u);\n        U \\<subseteq> range D; U \\<noteq> {}; xs @ a # ys \\<in> traces P;\n        \\<forall>u.\n           u \\<in> range D \\<and>\n           (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n           (xs, xs') \\<in> R u;\n        u \\<in> range D;\n        \\<forall>v\\<in>sinks_aux I D U (a # ys). (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ a # ys, xs' @ ipurge_tr_aux I D U (a # ys))\n                         \\<in> R u", "assume\n    A: \"\\<And>xs xs' U. U \\<subseteq> range D \\<longrightarrow> U \\<noteq> {} \\<longrightarrow> xs @ ys \\<in> traces P \\<longrightarrow>\n      (\\<forall>u. u \\<in> range D \\<and> (\\<forall>v \\<in> U. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs, xs') \\<in> R u) \\<longrightarrow>\n      (\\<forall>u. u \\<in> range D \\<and> (\\<forall>v \\<in> sinks_aux I D U ys. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ ys, xs' @ ipurge_tr_aux I D U ys) \\<in> R u)\" and\n    B: \"U \\<subseteq> range D\" and\n    C: \"U \\<noteq> {}\" and\n    D: \"xs @ y # ys \\<in> traces P\" and\n    E: \"\\<forall>u. u \\<in> range D \\<and> (\\<forall>v \\<in> U. (v, u) \\<notin> I) \\<longrightarrow> (xs, xs') \\<in> R u\" and\n    F: \"u \\<in> range D\" and\n    G: \"\\<forall>v \\<in> sinks_aux I D U (y # ys). (v, u) \\<notin> I\""], ["proof (state)\nthis:\n  ?U \\<subseteq> range D \\<longrightarrow>\n  ?U \\<noteq> {} \\<longrightarrow>\n  ?xs @ ys \\<in> traces P \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>?U. (v, u) \\<notin> I) \\<longrightarrow>\n      (?xs, ?xs') \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D ?U ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      (?xs @ ys, ?xs' @ ipurge_tr_aux I D ?U ys) \\<in> R u)\n  U \\<subseteq> range D\n  U \\<noteq> {}\n  xs @ y # ys \\<in> traces P\n  \\<forall>u.\n     u \\<in> range D \\<and>\n     (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n     (xs, xs') \\<in> R u\n  u \\<in> range D\n  \\<forall>v\\<in>sinks_aux I D U (y # ys). (v, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs xs' U u.\n       \\<lbrakk>\\<And>xs xs' U.\n                   U \\<subseteq> range D \\<longrightarrow>\n                   U \\<noteq> {} \\<longrightarrow>\n                   xs @ ys \\<in> traces P \\<longrightarrow>\n                   (\\<forall>u.\n                       u \\<in> range D \\<and>\n                       (\\<forall>v\\<in>U.\n                           (v, u) \\<notin> I) \\<longrightarrow>\n                       (xs, xs') \\<in> R u) \\<longrightarrow>\n                   (\\<forall>u.\n                       u \\<in> range D \\<and>\n                       (\\<forall>v\\<in>sinks_aux I D U ys.\n                           (v, u) \\<notin> I) \\<longrightarrow>\n                       (xs @ ys, xs' @ ipurge_tr_aux I D U ys) \\<in> R u);\n        U \\<subseteq> range D; U \\<noteq> {}; xs @ a # ys \\<in> traces P;\n        \\<forall>u.\n           u \\<in> range D \\<and>\n           (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n           (xs, xs') \\<in> R u;\n        u \\<in> range D;\n        \\<forall>v\\<in>sinks_aux I D U (a # ys). (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ a # ys, xs' @ ipurge_tr_aux I D U (a # ys))\n                         \\<in> R u", "show \"(xs @ y # ys, xs' @ ipurge_tr_aux I D U (y # ys)) \\<in> R u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ y # ys, xs' @ ipurge_tr_aux I D U (y # ys)) \\<in> R u", "proof (cases \"\\<exists>v \\<in> U. (v, D y) \\<in> I\",\n   simp_all (no_asm_simp) add: ipurge_tr_aux_cons)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D y) \\<in> I \\<Longrightarrow>\n    (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n 2. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "case True"], ["proof (state)\nthis:\n  \\<exists>v\\<in>U. (v, D y) \\<in> I\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D y) \\<in> I \\<Longrightarrow>\n    (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n 2. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "let ?U' = \"insert (D y) U\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D y) \\<in> I \\<Longrightarrow>\n    (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n 2. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "have \"?U' \\<subseteq> range D \\<longrightarrow> ?U' \\<noteq> {} \\<longrightarrow> (xs @ [y]) @ ys \\<in> traces P \\<longrightarrow>\n      (\\<forall>u. u \\<in> range D \\<and> (\\<forall>v \\<in> ?U'. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ [y], xs') \\<in> R u) \\<longrightarrow>\n      (\\<forall>u. u \\<in> range D \\<and> (\\<forall>v \\<in> sinks_aux I D ?U' ys. (v, u) \\<notin> I) \\<longrightarrow>\n        ((xs @ [y]) @ ys, xs' @ ipurge_tr_aux I D ?U' ys) \\<in> R u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (D y) U \\<subseteq> range D \\<longrightarrow>\n    insert (D y) U \\<noteq> {} \\<longrightarrow>\n    (xs @ [y]) @ ys \\<in> traces P \\<longrightarrow>\n    (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ [y], xs') \\<in> R u) \\<longrightarrow>\n    (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n            (v, u) \\<notin> I) \\<longrightarrow>\n        ((xs @ [y]) @ ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys)\n        \\<in> R u)", "using A"], ["proof (prove)\nusing this:\n  ?U \\<subseteq> range D \\<longrightarrow>\n  ?U \\<noteq> {} \\<longrightarrow>\n  ?xs @ ys \\<in> traces P \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>?U. (v, u) \\<notin> I) \\<longrightarrow>\n      (?xs, ?xs') \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D ?U ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      (?xs @ ys, ?xs' @ ipurge_tr_aux I D ?U ys) \\<in> R u)\n\ngoal (1 subgoal):\n 1. insert (D y) U \\<subseteq> range D \\<longrightarrow>\n    insert (D y) U \\<noteq> {} \\<longrightarrow>\n    (xs @ [y]) @ ys \\<in> traces P \\<longrightarrow>\n    (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ [y], xs') \\<in> R u) \\<longrightarrow>\n    (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n            (v, u) \\<notin> I) \\<longrightarrow>\n        ((xs @ [y]) @ ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys)\n        \\<in> R u)", "."], ["proof (state)\nthis:\n  insert (D y) U \\<subseteq> range D \\<longrightarrow>\n  insert (D y) U \\<noteq> {} \\<longrightarrow>\n  (xs @ [y]) @ ys \\<in> traces P \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ [y], xs') \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      ((xs @ [y]) @ ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys)\n      \\<in> R u)\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D y) \\<in> I \\<Longrightarrow>\n    (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n 2. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "hence\n     \"(\\<forall>u. u \\<in> range D \\<and> (\\<forall>v \\<in> ?U'. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ [y], xs') \\<in> R u) \\<longrightarrow>\n      (\\<forall>u. u \\<in> range D \\<and> (\\<forall>v \\<in> sinks_aux I D ?U' ys. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ y # ys, xs' @ ipurge_tr_aux I D ?U' ys) \\<in> R u)\""], ["proof (prove)\nusing this:\n  insert (D y) U \\<subseteq> range D \\<longrightarrow>\n  insert (D y) U \\<noteq> {} \\<longrightarrow>\n  (xs @ [y]) @ ys \\<in> traces P \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ [y], xs') \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      ((xs @ [y]) @ ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys)\n      \\<in> R u)\n\ngoal (1 subgoal):\n 1. (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ [y], xs') \\<in> R u) \\<longrightarrow>\n    (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n            (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys)\n        \\<in> R u)", "using B and D"], ["proof (prove)\nusing this:\n  insert (D y) U \\<subseteq> range D \\<longrightarrow>\n  insert (D y) U \\<noteq> {} \\<longrightarrow>\n  (xs @ [y]) @ ys \\<in> traces P \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ [y], xs') \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      ((xs @ [y]) @ ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys)\n      \\<in> R u)\n  U \\<subseteq> range D\n  xs @ y # ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ [y], xs') \\<in> R u) \\<longrightarrow>\n    (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n            (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys)\n        \\<in> R u)", "by simp"], ["proof (state)\nthis:\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ [y], xs') \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u)\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D y) \\<in> I \\<Longrightarrow>\n    (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n 2. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ [y], xs') \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u)\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D y) \\<in> I \\<Longrightarrow>\n    (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n 2. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "have\n     \"\\<forall>u. u \\<in> range D \\<and> (\\<forall>v \\<in> ?U'. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ [y], xs') \\<in> R u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u.\n       u \\<in> range D \\<and>\n       (\\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I) \\<longrightarrow>\n       (xs @ [y], xs') \\<in> R u", "proof (rule allI, rule impI, erule conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "assume F: \"u \\<in> range D\" and G: \"\\<forall>v \\<in> ?U'. (v, u) \\<notin> I\""], ["proof (state)\nthis:\n  u \\<in> range D\n  \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "moreover"], ["proof (state)\nthis:\n  u \\<in> range D\n  \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "have \"u \\<in> range D \\<and> (\\<forall>v \\<in> U. (v, u) \\<notin> I) \\<longrightarrow> (xs, xs') \\<in> R u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> range D \\<and>\n    (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n    (xs, xs') \\<in> R u", "using E"], ["proof (prove)\nusing this:\n  \\<forall>u.\n     u \\<in> range D \\<and>\n     (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n     (xs, xs') \\<in> R u\n\ngoal (1 subgoal):\n 1. u \\<in> range D \\<and>\n    (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n    (xs, xs') \\<in> R u", ".."], ["proof (state)\nthis:\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n  (xs, xs') \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  u \\<in> range D\n  \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n  (xs, xs') \\<in> R u", "have H: \"(xs, xs') \\<in> R u\""], ["proof (prove)\nusing this:\n  u \\<in> range D\n  \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n  (xs, xs') \\<in> R u\n\ngoal (1 subgoal):\n 1. (xs, xs') \\<in> R u", "by simp"], ["proof (state)\nthis:\n  (xs, xs') \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "have \"\\<forall>u \\<in> range D. (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n        (xs, xs @ [y]) \\<in> R u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D.\n       (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n       (xs, xs @ [y]) \\<in> R u", "using LR"], ["proof (prove)\nusing this:\n  locally_respects P I D R\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D.\n       (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n       (xs, xs @ [y]) \\<in> R u", "by (simp add: locally_respects_def)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D.\n     (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n     (xs, xs @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "hence \"(D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow> (xs, xs @ [y]) \\<in> R u\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D.\n     (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n     (xs, xs @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n    (xs, xs @ [y]) \\<in> R u", "using F"], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D.\n     (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n     (xs, xs @ [y]) \\<in> R u\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n    (xs, xs @ [y]) \\<in> R u", ".."], ["proof (state)\nthis:\n  (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "moreover"], ["proof (state)\nthis:\n  (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "have \"D y \\<in> ?U'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D y \\<in> insert (D y) U", "by simp"], ["proof (state)\nthis:\n  D y \\<in> insert (D y) U\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "with G"], ["proof (chain)\npicking this:\n  \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\n  D y \\<in> insert (D y) U", "have \"(D y, u) \\<notin> I\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\n  D y \\<in> insert (D y) U\n\ngoal (1 subgoal):\n 1. (D y, u) \\<notin> I", ".."], ["proof (state)\nthis:\n  (D y, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "moreover"], ["proof (state)\nthis:\n  (D y, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "have \"(xs @ [y]) @ ys \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ [y]) @ ys \\<in> traces P", "using D"], ["proof (prove)\nusing this:\n  xs @ y # ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs @ [y]) @ ys \\<in> traces P", "by simp"], ["proof (state)\nthis:\n  (xs @ [y]) @ ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "hence \"y \\<in> next_events P xs\""], ["proof (prove)\nusing this:\n  (xs @ [y]) @ ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. y \\<in> next_events P xs", "by (simp (no_asm_simp) add: next_events_def, rule process_rule_2_traces)"], ["proof (state)\nthis:\n  y \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R u\n  (D y, u) \\<notin> I\n  y \\<in> next_events P xs", "have I: \"(xs, xs @ [y]) \\<in> R u\""], ["proof (prove)\nusing this:\n  (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R u\n  (D y, u) \\<notin> I\n  y \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. (xs, xs @ [y]) \\<in> R u", "by simp"], ["proof (state)\nthis:\n  (xs, xs @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "have \"\\<forall>u \\<in> range D. equiv (traces P) (R u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. equiv (traces P) (R u)", "using VP"], ["proof (prove)\nusing this:\n  view_partition P D R\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. equiv (traces P) (R u)", "by (simp add: view_partition_def)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D. equiv (traces P) (R u)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "hence J: \"equiv (traces P) (R u)\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D. equiv (traces P) (R u)\n\ngoal (1 subgoal):\n 1. equiv (traces P) (R u)", "using F"], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D. equiv (traces P) (R u)\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. equiv (traces P) (R u)", ".."], ["proof (state)\nthis:\n  equiv (traces P) (R u)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "hence \"trans (R u)\""], ["proof (prove)\nusing this:\n  equiv (traces P) (R u)\n\ngoal (1 subgoal):\n 1. trans (R u)", "by (simp add: equiv_def)"], ["proof (state)\nthis:\n  trans (R u)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "moreover"], ["proof (state)\nthis:\n  trans (R u)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "have \"sym (R u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym (R u)", "using J"], ["proof (prove)\nusing this:\n  equiv (traces P) (R u)\n\ngoal (1 subgoal):\n 1. sym (R u)", "by (simp add: equiv_def)"], ["proof (state)\nthis:\n  sym (R u)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "hence \"(xs @ [y], xs) \\<in> R u\""], ["proof (prove)\nusing this:\n  sym (R u)\n\ngoal (1 subgoal):\n 1. (xs @ [y], xs) \\<in> R u", "using I"], ["proof (prove)\nusing this:\n  sym (R u)\n  (xs, xs @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. (xs @ [y], xs) \\<in> R u", "by (rule symE)"], ["proof (state)\nthis:\n  (xs @ [y], xs) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs') \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  trans (R u)\n  (xs @ [y], xs) \\<in> R u", "show \"(xs @ [y], xs') \\<in> R u\""], ["proof (prove)\nusing this:\n  trans (R u)\n  (xs @ [y], xs) \\<in> R u\n\ngoal (1 subgoal):\n 1. (xs @ [y], xs') \\<in> R u", "using H"], ["proof (prove)\nusing this:\n  trans (R u)\n  (xs @ [y], xs) \\<in> R u\n  (xs, xs') \\<in> R u\n\ngoal (1 subgoal):\n 1. (xs @ [y], xs') \\<in> R u", "by (rule transE)"], ["proof (state)\nthis:\n  (xs @ [y], xs') \\<in> R u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>u.\n     u \\<in> range D \\<and>\n     (\\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I) \\<longrightarrow>\n     (xs @ [y], xs') \\<in> R u\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D y) \\<in> I \\<Longrightarrow>\n    (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n 2. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ [y], xs') \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u)\n  \\<forall>u.\n     u \\<in> range D \\<and>\n     (\\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I) \\<longrightarrow>\n     (xs @ [y], xs') \\<in> R u", "have\n     \"\\<forall>u. u \\<in> range D \\<and> (\\<forall>v \\<in> sinks_aux I D ?U' ys. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ y # ys, xs' @ ipurge_tr_aux I D ?U' ys) \\<in> R u\""], ["proof (prove)\nusing this:\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ [y], xs') \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u)\n  \\<forall>u.\n     u \\<in> range D \\<and>\n     (\\<forall>v\\<in>insert (D y) U. (v, u) \\<notin> I) \\<longrightarrow>\n     (xs @ [y], xs') \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<forall>u.\n       u \\<in> range D \\<and>\n       (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n           (v, u) \\<notin> I) \\<longrightarrow>\n       (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u", ".."], ["proof (state)\nthis:\n  \\<forall>u.\n     u \\<in> range D \\<and>\n     (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n         (v, u) \\<notin> I) \\<longrightarrow>\n     (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D y) \\<in> I \\<Longrightarrow>\n    (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n 2. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "hence\n     \"u \\<in> range D \\<and> (\\<forall>v \\<in> sinks_aux I D ?U' ys. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ y # ys, xs' @ ipurge_tr_aux I D ?U' ys) \\<in> R u\""], ["proof (prove)\nusing this:\n  \\<forall>u.\n     u \\<in> range D \\<and>\n     (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n         (v, u) \\<notin> I) \\<longrightarrow>\n     (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n\ngoal (1 subgoal):\n 1. u \\<in> range D \\<and>\n    (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n        (v, u) \\<notin> I) \\<longrightarrow>\n    (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u", ".."], ["proof (state)\nthis:\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n      (v, u) \\<notin> I) \\<longrightarrow>\n  (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D y) \\<in> I \\<Longrightarrow>\n    (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n 2. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n      (v, u) \\<notin> I) \\<longrightarrow>\n  (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D y) \\<in> I \\<Longrightarrow>\n    (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n 2. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "have \"sinks_aux I D U (y # ys) = sinks_aux I D ?U' ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinks_aux I D U (y # ys) = sinks_aux I D (insert (D y) U) ys", "using Cons and True"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?x, ?y) \\<in> ?r; (?xs, ?ys) \\<in> listrel ?r\\<rbrakk>\n  \\<Longrightarrow> (?x # ?xs, ?y # ?ys) \\<in> listrel ?r\n  \\<exists>v\\<in>U. (v, D y) \\<in> I\n\ngoal (1 subgoal):\n 1. sinks_aux I D U (y # ys) = sinks_aux I D (insert (D y) U) ys", "by (simp add: sinks_aux_cons)"], ["proof (state)\nthis:\n  sinks_aux I D U (y # ys) = sinks_aux I D (insert (D y) U) ys\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D y) \\<in> I \\<Longrightarrow>\n    (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n 2. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "hence \"\\<forall>v \\<in> sinks_aux I D ?U' ys. (v, u) \\<notin> I\""], ["proof (prove)\nusing this:\n  sinks_aux I D U (y # ys) = sinks_aux I D (insert (D y) U) ys\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys. (v, u) \\<notin> I", "using G"], ["proof (prove)\nusing this:\n  sinks_aux I D U (y # ys) = sinks_aux I D (insert (D y) U) ys\n  \\<forall>v\\<in>sinks_aux I D U (y # ys). (v, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys. (v, u) \\<notin> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys. (v, u) \\<notin> I\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D y) \\<in> I \\<Longrightarrow>\n    (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n 2. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "with F"], ["proof (chain)\npicking this:\n  u \\<in> range D\n  \\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys. (v, u) \\<notin> I", "have \"u \\<in> range D \\<and> (\\<forall>v \\<in> sinks_aux I D ?U' ys. (v, u) \\<notin> I)\""], ["proof (prove)\nusing this:\n  u \\<in> range D\n  \\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys. (v, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. u \\<in> range D \\<and>\n    (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys. (v, u) \\<notin> I)", ".."], ["proof (state)\nthis:\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys. (v, u) \\<notin> I)\n\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>U. (v, D y) \\<in> I \\<Longrightarrow>\n    (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n 2. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n      (v, u) \\<notin> I) \\<longrightarrow>\n  (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys. (v, u) \\<notin> I)", "show \"(xs @ y # ys, xs' @ ipurge_tr_aux I D ?U' ys) \\<in> R u\""], ["proof (prove)\nusing this:\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys.\n      (v, u) \\<notin> I) \\<longrightarrow>\n  (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>sinks_aux I D (insert (D y) U) ys. (v, u) \\<notin> I)\n\ngoal (1 subgoal):\n 1. (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u", ".."], ["proof (state)\nthis:\n  (xs @ y # ys, xs' @ ipurge_tr_aux I D (insert (D y) U) ys) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "have\n     \"U \\<subseteq> range D \\<longrightarrow> U \\<noteq> {} \\<longrightarrow> (xs @ [y]) @ ys \\<in> traces P \\<longrightarrow>\n      (\\<forall>u. u \\<in> range D \\<and> (\\<forall>v \\<in> U. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ [y], xs' @ [y]) \\<in> R u) \\<longrightarrow>\n      (\\<forall>u. u \\<in> range D \\<and> (\\<forall>v \\<in> sinks_aux I D U ys. (v, u) \\<notin> I) \\<longrightarrow>\n        ((xs @ [y]) @ ys, (xs' @ [y]) @ ipurge_tr_aux I D U ys) \\<in> R u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. U \\<subseteq> range D \\<longrightarrow>\n    U \\<noteq> {} \\<longrightarrow>\n    (xs @ [y]) @ ys \\<in> traces P \\<longrightarrow>\n    (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ [y], xs' @ [y]) \\<in> R u) \\<longrightarrow>\n    (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>sinks_aux I D U ys.\n            (v, u) \\<notin> I) \\<longrightarrow>\n        ((xs @ [y]) @ ys, (xs' @ [y]) @ ipurge_tr_aux I D U ys) \\<in> R u)", "using A"], ["proof (prove)\nusing this:\n  ?U \\<subseteq> range D \\<longrightarrow>\n  ?U \\<noteq> {} \\<longrightarrow>\n  ?xs @ ys \\<in> traces P \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>?U. (v, u) \\<notin> I) \\<longrightarrow>\n      (?xs, ?xs') \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D ?U ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      (?xs @ ys, ?xs' @ ipurge_tr_aux I D ?U ys) \\<in> R u)\n\ngoal (1 subgoal):\n 1. U \\<subseteq> range D \\<longrightarrow>\n    U \\<noteq> {} \\<longrightarrow>\n    (xs @ [y]) @ ys \\<in> traces P \\<longrightarrow>\n    (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ [y], xs' @ [y]) \\<in> R u) \\<longrightarrow>\n    (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>sinks_aux I D U ys.\n            (v, u) \\<notin> I) \\<longrightarrow>\n        ((xs @ [y]) @ ys, (xs' @ [y]) @ ipurge_tr_aux I D U ys) \\<in> R u)", "."], ["proof (state)\nthis:\n  U \\<subseteq> range D \\<longrightarrow>\n  U \\<noteq> {} \\<longrightarrow>\n  (xs @ [y]) @ ys \\<in> traces P \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ [y], xs' @ [y]) \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D U ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      ((xs @ [y]) @ ys, (xs' @ [y]) @ ipurge_tr_aux I D U ys) \\<in> R u)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "hence\n     \"(\\<forall>u. u \\<in> range D \\<and> (\\<forall>v \\<in> U. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ [y], xs' @ [y]) \\<in> R u) \\<longrightarrow>\n      (\\<forall>u. u \\<in> range D \\<and> (\\<forall>v \\<in> sinks_aux I D U ys. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u)\""], ["proof (prove)\nusing this:\n  U \\<subseteq> range D \\<longrightarrow>\n  U \\<noteq> {} \\<longrightarrow>\n  (xs @ [y]) @ ys \\<in> traces P \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ [y], xs' @ [y]) \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D U ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      ((xs @ [y]) @ ys, (xs' @ [y]) @ ipurge_tr_aux I D U ys) \\<in> R u)\n\ngoal (1 subgoal):\n 1. (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ [y], xs' @ [y]) \\<in> R u) \\<longrightarrow>\n    (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>sinks_aux I D U ys.\n            (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u)", "using B and C and D"], ["proof (prove)\nusing this:\n  U \\<subseteq> range D \\<longrightarrow>\n  U \\<noteq> {} \\<longrightarrow>\n  (xs @ [y]) @ ys \\<in> traces P \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ [y], xs' @ [y]) \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D U ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      ((xs @ [y]) @ ys, (xs' @ [y]) @ ipurge_tr_aux I D U ys) \\<in> R u)\n  U \\<subseteq> range D\n  U \\<noteq> {}\n  xs @ y # ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ [y], xs' @ [y]) \\<in> R u) \\<longrightarrow>\n    (\\<forall>u.\n        u \\<in> range D \\<and>\n        (\\<forall>v\\<in>sinks_aux I D U ys.\n            (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u)", "by simp"], ["proof (state)\nthis:\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ [y], xs' @ [y]) \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D U ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ [y], xs' @ [y]) \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D U ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "have\n     \"\\<forall>u. u \\<in> range D \\<and> (\\<forall>v \\<in> U. (v, u) \\<notin> I) \\<longrightarrow>\n        (xs @ [y], xs' @ [y]) \\<in> R u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u.\n       u \\<in> range D \\<and>\n       (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n       (xs @ [y], xs' @ [y]) \\<in> R u", "proof (rule allI, rule impI, erule conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "assume F: \"u \\<in> range D\" and G: \"\\<forall>v \\<in> U. (v, u) \\<notin> I\""], ["proof (state)\nthis:\n  u \\<in> range D\n  \\<forall>v\\<in>U. (v, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  u \\<in> range D\n  \\<forall>v\\<in>U. (v, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "have \"u \\<in> range D \\<and> (\\<forall>v \\<in> U. (v, u) \\<notin> I) \\<longrightarrow> (xs, xs') \\<in> R u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> range D \\<and>\n    (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n    (xs, xs') \\<in> R u", "using E"], ["proof (prove)\nusing this:\n  \\<forall>u.\n     u \\<in> range D \\<and>\n     (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n     (xs, xs') \\<in> R u\n\ngoal (1 subgoal):\n 1. u \\<in> range D \\<and>\n    (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n    (xs, xs') \\<in> R u", ".."], ["proof (state)\nthis:\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n  (xs, xs') \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  u \\<in> range D\n  \\<forall>v\\<in>U. (v, u) \\<notin> I\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n  (xs, xs') \\<in> R u", "have \"(xs, xs') \\<in> R u\""], ["proof (prove)\nusing this:\n  u \\<in> range D\n  \\<forall>v\\<in>U. (v, u) \\<notin> I\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n  (xs, xs') \\<in> R u\n\ngoal (1 subgoal):\n 1. (xs, xs') \\<in> R u", "by simp"], ["proof (state)\nthis:\n  (xs, xs') \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  (xs, xs') \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "have \"D y \\<in> range D \\<and>\n        (\\<forall>v \\<in> U. (v, D y) \\<notin> I) \\<longrightarrow> (xs, xs') \\<in> R (D y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D y \\<in> range D \\<and>\n    (\\<forall>v\\<in>U. (v, D y) \\<notin> I) \\<longrightarrow>\n    (xs, xs') \\<in> R (D y)", "using E"], ["proof (prove)\nusing this:\n  \\<forall>u.\n     u \\<in> range D \\<and>\n     (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n     (xs, xs') \\<in> R u\n\ngoal (1 subgoal):\n 1. D y \\<in> range D \\<and>\n    (\\<forall>v\\<in>U. (v, D y) \\<notin> I) \\<longrightarrow>\n    (xs, xs') \\<in> R (D y)", ".."], ["proof (state)\nthis:\n  D y \\<in> range D \\<and>\n  (\\<forall>v\\<in>U. (v, D y) \\<notin> I) \\<longrightarrow>\n  (xs, xs') \\<in> R (D y)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "hence \"(xs, xs') \\<in> R (D y)\""], ["proof (prove)\nusing this:\n  D y \\<in> range D \\<and>\n  (\\<forall>v\\<in>U. (v, D y) \\<notin> I) \\<longrightarrow>\n  (xs, xs') \\<in> R (D y)\n\ngoal (1 subgoal):\n 1. (xs, xs') \\<in> R (D y)", "using False"], ["proof (prove)\nusing this:\n  D y \\<in> range D \\<and>\n  (\\<forall>v\\<in>U. (v, D y) \\<notin> I) \\<longrightarrow>\n  (xs, xs') \\<in> R (D y)\n  \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I)\n\ngoal (1 subgoal):\n 1. (xs, xs') \\<in> R (D y)", "by simp"], ["proof (state)\nthis:\n  (xs, xs') \\<in> R (D y)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  (xs, xs') \\<in> R u\n  (xs, xs') \\<in> R (D y)", "have H: \"(xs, xs') \\<in> R u \\<inter> R (D y)\""], ["proof (prove)\nusing this:\n  (xs, xs') \\<in> R u\n  (xs, xs') \\<in> R (D y)\n\ngoal (1 subgoal):\n 1. (xs, xs') \\<in> R u \\<inter> R (D y)", ".."], ["proof (state)\nthis:\n  (xs, xs') \\<in> R u \\<inter> R (D y)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "have \"\\<exists>v. v \\<in> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v. v \\<in> U", "using C"], ["proof (prove)\nusing this:\n  U \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>v. v \\<in> U", "by (simp add: ex_in_conv)"], ["proof (state)\nthis:\n  \\<exists>v. v \\<in> U\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "then"], ["proof (chain)\npicking this:\n  \\<exists>v. v \\<in> U", "obtain v where I: \"v \\<in> U\""], ["proof (prove)\nusing this:\n  \\<exists>v. v \\<in> U\n\ngoal (1 subgoal):\n 1. (\\<And>v. v \\<in> U \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  v \\<in> U\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "hence \"(v, D y) \\<in> -I\""], ["proof (prove)\nusing this:\n  v \\<in> U\n\ngoal (1 subgoal):\n 1. (v, D y) \\<in> - I", "using False"], ["proof (prove)\nusing this:\n  v \\<in> U\n  \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I)\n\ngoal (1 subgoal):\n 1. (v, D y) \\<in> - I", "by simp"], ["proof (state)\nthis:\n  (v, D y) \\<in> - I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  (v, D y) \\<in> - I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "have \"v \\<in> range D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> range D", "using B and I"], ["proof (prove)\nusing this:\n  U \\<subseteq> range D\n  v \\<in> U\n\ngoal (1 subgoal):\n 1. v \\<in> range D", ".."], ["proof (state)\nthis:\n  v \\<in> range D\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  (v, D y) \\<in> - I\n  v \\<in> range D", "have \"D y \\<in> (-I) `` range D\""], ["proof (prove)\nusing this:\n  (v, D y) \\<in> - I\n  v \\<in> range D\n\ngoal (1 subgoal):\n 1. D y \\<in> (- I) `` range D", ".."], ["proof (state)\nthis:\n  D y \\<in> (- I) `` range D\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "hence J: \"D y \\<in> range D \\<inter> (-I) `` range D\""], ["proof (prove)\nusing this:\n  D y \\<in> (- I) `` range D\n\ngoal (1 subgoal):\n 1. D y \\<in> range D \\<inter> (- I) `` range D", "by simp"], ["proof (state)\nthis:\n  D y \\<in> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "have \"\\<forall>u \\<in> range D \\<inter> (-I) `` range D. \\<forall>xs ys. (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n          ref_dom_events P D u xs = ref_dom_events P D u ys", "using WFC"], ["proof (prove)\nusing this:\n  weakly_future_consistent P I D R\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n          ref_dom_events P D u xs = ref_dom_events P D u ys", "by (simp add: weakly_future_consistent_def)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "hence \"\\<forall>xs ys. (xs, ys) \\<in> R (D y) \\<longrightarrow>\n        next_dom_events P D (D y) xs = next_dom_events P D (D y) ys \\<and>\n        ref_dom_events P D (D y) xs = ref_dom_events P D (D y) ys\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<forall>xs ys.\n       (xs, ys) \\<in> R (D y) \\<longrightarrow>\n       next_dom_events P D (D y) xs = next_dom_events P D (D y) ys \\<and>\n       ref_dom_events P D (D y) xs = ref_dom_events P D (D y) ys", "using J"], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P D u xs = next_dom_events P D u ys \\<and>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n  D y \\<in> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. \\<forall>xs ys.\n       (xs, ys) \\<in> R (D y) \\<longrightarrow>\n       next_dom_events P D (D y) xs = next_dom_events P D (D y) ys \\<and>\n       ref_dom_events P D (D y) xs = ref_dom_events P D (D y) ys", ".."], ["proof (state)\nthis:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> R (D y) \\<longrightarrow>\n     next_dom_events P D (D y) xs = next_dom_events P D (D y) ys \\<and>\n     ref_dom_events P D (D y) xs = ref_dom_events P D (D y) ys\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "hence \"(xs, xs') \\<in> R (D y) \\<longrightarrow>\n        next_dom_events P D (D y) xs = next_dom_events P D (D y) xs' \\<and>\n        ref_dom_events P D (D y) xs = ref_dom_events P D (D y) xs'\""], ["proof (prove)\nusing this:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> R (D y) \\<longrightarrow>\n     next_dom_events P D (D y) xs = next_dom_events P D (D y) ys \\<and>\n     ref_dom_events P D (D y) xs = ref_dom_events P D (D y) ys\n\ngoal (1 subgoal):\n 1. (xs, xs') \\<in> R (D y) \\<longrightarrow>\n    next_dom_events P D (D y) xs = next_dom_events P D (D y) xs' \\<and>\n    ref_dom_events P D (D y) xs = ref_dom_events P D (D y) xs'", "by blast"], ["proof (state)\nthis:\n  (xs, xs') \\<in> R (D y) \\<longrightarrow>\n  next_dom_events P D (D y) xs = next_dom_events P D (D y) xs' \\<and>\n  ref_dom_events P D (D y) xs = ref_dom_events P D (D y) xs'\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "hence \"next_dom_events P D (D y) xs = next_dom_events P D (D y) xs'\""], ["proof (prove)\nusing this:\n  (xs, xs') \\<in> R (D y) \\<longrightarrow>\n  next_dom_events P D (D y) xs = next_dom_events P D (D y) xs' \\<and>\n  ref_dom_events P D (D y) xs = ref_dom_events P D (D y) xs'\n\ngoal (1 subgoal):\n 1. next_dom_events P D (D y) xs = next_dom_events P D (D y) xs'", "using H"], ["proof (prove)\nusing this:\n  (xs, xs') \\<in> R (D y) \\<longrightarrow>\n  next_dom_events P D (D y) xs = next_dom_events P D (D y) xs' \\<and>\n  ref_dom_events P D (D y) xs = ref_dom_events P D (D y) xs'\n  (xs, xs') \\<in> R u \\<inter> R (D y)\n\ngoal (1 subgoal):\n 1. next_dom_events P D (D y) xs = next_dom_events P D (D y) xs'", "by simp"], ["proof (state)\nthis:\n  next_dom_events P D (D y) xs = next_dom_events P D (D y) xs'\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  next_dom_events P D (D y) xs = next_dom_events P D (D y) xs'\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "have \"(xs @ [y]) @ ys \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ [y]) @ ys \\<in> traces P", "using D"], ["proof (prove)\nusing this:\n  xs @ y # ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs @ [y]) @ ys \\<in> traces P", "by simp"], ["proof (state)\nthis:\n  (xs @ [y]) @ ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "hence K: \"y \\<in> next_events P xs\""], ["proof (prove)\nusing this:\n  (xs @ [y]) @ ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. y \\<in> next_events P xs", "by (simp (no_asm_simp) add: next_events_def, rule process_rule_2_traces)"], ["proof (state)\nthis:\n  y \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "hence \"y \\<in> next_dom_events P D (D y) xs\""], ["proof (prove)\nusing this:\n  y \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. y \\<in> next_dom_events P D (D y) xs", "by (simp add: next_dom_events_def)"], ["proof (state)\nthis:\n  y \\<in> next_dom_events P D (D y) xs\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  next_dom_events P D (D y) xs = next_dom_events P D (D y) xs'\n  y \\<in> next_dom_events P D (D y) xs", "have \"y \\<in> next_events P xs'\""], ["proof (prove)\nusing this:\n  next_dom_events P D (D y) xs = next_dom_events P D (D y) xs'\n  y \\<in> next_dom_events P D (D y) xs\n\ngoal (1 subgoal):\n 1. y \\<in> next_events P xs'", "by (simp add: next_dom_events_def)"], ["proof (state)\nthis:\n  y \\<in> next_events P xs'\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "with K"], ["proof (chain)\npicking this:\n  y \\<in> next_events P xs\n  y \\<in> next_events P xs'", "have L: \"y \\<in> next_events P xs \\<inter> next_events P xs'\""], ["proof (prove)\nusing this:\n  y \\<in> next_events P xs\n  y \\<in> next_events P xs'\n\ngoal (1 subgoal):\n 1. y \\<in> next_events P xs \\<inter> next_events P xs'", ".."], ["proof (state)\nthis:\n  y \\<in> next_events P xs \\<inter> next_events P xs'\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "have \"\\<forall>u \\<in> range D. \\<forall>xs ys x.\n        (xs, ys) \\<in> R u \\<inter> R (D x) \\<and> x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n        (xs @ [x], ys @ [x]) \\<in> R u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D.\n       \\<forall>xs ys x.\n          (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n          x \\<in> next_events P xs \\<inter>\n                  next_events P ys \\<longrightarrow>\n          (xs @ [x], ys @ [x]) \\<in> R u", "using WSC"], ["proof (prove)\nusing this:\n  weakly_step_consistent P D R\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D.\n       \\<forall>xs ys x.\n          (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n          x \\<in> next_events P xs \\<inter>\n                  next_events P ys \\<longrightarrow>\n          (xs @ [x], ys @ [x]) \\<in> R u", "by (simp add: weakly_step_consistent_def)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs ys x.\n        (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n        x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n        (xs @ [x], ys @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "hence \"\\<forall>xs ys x.\n        (xs, ys) \\<in> R u \\<inter> R (D x) \\<and> x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n        (xs @ [x], ys @ [x]) \\<in> R u\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs ys x.\n        (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n        x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n        (xs @ [x], ys @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<forall>xs ys x.\n       (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n       x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n       (xs @ [x], ys @ [x]) \\<in> R u", "using F"], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs ys x.\n        (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n        x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n        (xs @ [x], ys @ [x]) \\<in> R u\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. \\<forall>xs ys x.\n       (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n       x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n       (xs @ [x], ys @ [x]) \\<in> R u", ".."], ["proof (state)\nthis:\n  \\<forall>xs ys x.\n     (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n     x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n     (xs @ [x], ys @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "hence\n       \"(xs, xs') \\<in> R u \\<inter> R (D y) \\<and> y \\<in> next_events P xs \\<inter> next_events P xs' \\<longrightarrow>\n        (xs @ [y], xs' @ [y]) \\<in> R u\""], ["proof (prove)\nusing this:\n  \\<forall>xs ys x.\n     (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n     x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n     (xs @ [x], ys @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. (xs, xs') \\<in> R u \\<inter> R (D y) \\<and>\n    y \\<in> next_events P xs \\<inter> next_events P xs' \\<longrightarrow>\n    (xs @ [y], xs' @ [y]) \\<in> R u", "by blast"], ["proof (state)\nthis:\n  (xs, xs') \\<in> R u \\<inter> R (D y) \\<and>\n  y \\<in> next_events P xs \\<inter> next_events P xs' \\<longrightarrow>\n  (xs @ [y], xs' @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>U. (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs' @ [y]) \\<in> R u", "thus \"(xs @ [y], xs' @ [y]) \\<in> R u\""], ["proof (prove)\nusing this:\n  (xs, xs') \\<in> R u \\<inter> R (D y) \\<and>\n  y \\<in> next_events P xs \\<inter> next_events P xs' \\<longrightarrow>\n  (xs @ [y], xs' @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. (xs @ [y], xs' @ [y]) \\<in> R u", "using H and L"], ["proof (prove)\nusing this:\n  (xs, xs') \\<in> R u \\<inter> R (D y) \\<and>\n  y \\<in> next_events P xs \\<inter> next_events P xs' \\<longrightarrow>\n  (xs @ [y], xs' @ [y]) \\<in> R u\n  (xs, xs') \\<in> R u \\<inter> R (D y)\n  y \\<in> next_events P xs \\<inter> next_events P xs'\n\ngoal (1 subgoal):\n 1. (xs @ [y], xs' @ [y]) \\<in> R u", "by simp"], ["proof (state)\nthis:\n  (xs @ [y], xs' @ [y]) \\<in> R u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>u.\n     u \\<in> range D \\<and>\n     (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n     (xs @ [y], xs' @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ [y], xs' @ [y]) \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D U ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u)\n  \\<forall>u.\n     u \\<in> range D \\<and>\n     (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n     (xs @ [y], xs' @ [y]) \\<in> R u", "have\n     \"\\<forall>u. u \\<in> range D \\<and> (\\<forall>v \\<in> sinks_aux I D U ys. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u\""], ["proof (prove)\nusing this:\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ [y], xs' @ [y]) \\<in> R u) \\<longrightarrow>\n  (\\<forall>u.\n      u \\<in> range D \\<and>\n      (\\<forall>v\\<in>sinks_aux I D U ys.\n          (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u)\n  \\<forall>u.\n     u \\<in> range D \\<and>\n     (\\<forall>v\\<in>U. (v, u) \\<notin> I) \\<longrightarrow>\n     (xs @ [y], xs' @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<forall>u.\n       u \\<in> range D \\<and>\n       (\\<forall>v\\<in>sinks_aux I D U ys.\n           (v, u) \\<notin> I) \\<longrightarrow>\n       (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", ".."], ["proof (state)\nthis:\n  \\<forall>u.\n     u \\<in> range D \\<and>\n     (\\<forall>v\\<in>sinks_aux I D U ys.\n         (v, u) \\<notin> I) \\<longrightarrow>\n     (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "hence \"u \\<in> range D \\<and> (\\<forall>v \\<in> sinks_aux I D U ys. (v, u) \\<notin> I) \\<longrightarrow>\n      (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u\""], ["proof (prove)\nusing this:\n  \\<forall>u.\n     u \\<in> range D \\<and>\n     (\\<forall>v\\<in>sinks_aux I D U ys.\n         (v, u) \\<notin> I) \\<longrightarrow>\n     (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u\n\ngoal (1 subgoal):\n 1. u \\<in> range D \\<and>\n    (\\<forall>v\\<in>sinks_aux I D U ys. (v, u) \\<notin> I) \\<longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", ".."], ["proof (state)\nthis:\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>sinks_aux I D U ys. (v, u) \\<notin> I) \\<longrightarrow>\n  (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>sinks_aux I D U ys. (v, u) \\<notin> I) \\<longrightarrow>\n  (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "have \"sinks_aux I D U (y # ys) = sinks_aux I D U ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinks_aux I D U (y # ys) = sinks_aux I D U ys", "using Cons and False"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?x, ?y) \\<in> ?r; (?xs, ?ys) \\<in> listrel ?r\\<rbrakk>\n  \\<Longrightarrow> (?x # ?xs, ?y # ?ys) \\<in> listrel ?r\n  \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I)\n\ngoal (1 subgoal):\n 1. sinks_aux I D U (y # ys) = sinks_aux I D U ys", "by (simp add: sinks_aux_cons)"], ["proof (state)\nthis:\n  sinks_aux I D U (y # ys) = sinks_aux I D U ys\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "hence \"\\<forall>v \\<in> sinks_aux I D U ys. (v, u) \\<notin> I\""], ["proof (prove)\nusing this:\n  sinks_aux I D U (y # ys) = sinks_aux I D U ys\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>sinks_aux I D U ys. (v, u) \\<notin> I", "using G"], ["proof (prove)\nusing this:\n  sinks_aux I D U (y # ys) = sinks_aux I D U ys\n  \\<forall>v\\<in>sinks_aux I D U (y # ys). (v, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>sinks_aux I D U ys. (v, u) \\<notin> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>v\\<in>sinks_aux I D U ys. (v, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "with F"], ["proof (chain)\npicking this:\n  u \\<in> range D\n  \\<forall>v\\<in>sinks_aux I D U ys. (v, u) \\<notin> I", "have \"u \\<in> range D \\<and> (\\<forall>v \\<in> sinks_aux I D U ys. (v, u) \\<notin> I)\""], ["proof (prove)\nusing this:\n  u \\<in> range D\n  \\<forall>v\\<in>sinks_aux I D U ys. (v, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. u \\<in> range D \\<and>\n    (\\<forall>v\\<in>sinks_aux I D U ys. (v, u) \\<notin> I)", ".."], ["proof (state)\nthis:\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>sinks_aux I D U ys. (v, u) \\<notin> I)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v\\<in>U. (v, D y) \\<in> I) \\<Longrightarrow>\n    (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>sinks_aux I D U ys. (v, u) \\<notin> I) \\<longrightarrow>\n  (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>sinks_aux I D U ys. (v, u) \\<notin> I)", "show \"(xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u\""], ["proof (prove)\nusing this:\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>sinks_aux I D U ys. (v, u) \\<notin> I) \\<longrightarrow>\n  (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u\n  u \\<in> range D \\<and>\n  (\\<forall>v\\<in>sinks_aux I D U ys. (v, u) \\<notin> I)\n\ngoal (1 subgoal):\n 1. (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u", ".."], ["proof (state)\nthis:\n  (xs @ y # ys, xs' @ y # ipurge_tr_aux I D U ys) \\<in> R u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ y # ys, xs' @ ipurge_tr_aux I D U (y # ys)) \\<in> R u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gu_condition_imply_secure_1 [rule_format]:\n  assumes\n    RUC:  \"ref_union_closed P\" and\n    VP:   \"view_partition P D R\" and\n    WFC:  \"weakly_future_consistent P I D R\" and\n    WSC:  \"weakly_step_consistent P D R\" and\n    LR:   \"locally_respects P I D R\"\n  shows \"(xs @ y # ys, Y) \\<in> failures P \\<longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ y # ys, Y) \\<in> failures P \\<longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> failures P", "proof (induction ys arbitrary: Y rule: rev_induct, rule_tac [!] impI,\n simp add: ipurge_ref_def)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Y.\n       (xs @ [y], Y) \\<in> failures P \\<Longrightarrow>\n       (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<And>x xsa Y.\n       \\<lbrakk>\\<And>Y.\n                   (xs @ y # xsa, Y) \\<in> failures P \\<longrightarrow>\n                   (xs @ ipurge_tr I D (D y) xsa,\n                    ipurge_ref I D (D y) xsa Y)\n                   \\<in> failures P;\n        (xs @ y # xsa @ [x], Y) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) (xsa @ [x]),\n                          ipurge_ref I D (D y) (xsa @ [x]) Y)\n                         \\<in> failures P", "fix Y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Y.\n       (xs @ [y], Y) \\<in> failures P \\<Longrightarrow>\n       (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<And>x xsa Y.\n       \\<lbrakk>\\<And>Y.\n                   (xs @ y # xsa, Y) \\<in> failures P \\<longrightarrow>\n                   (xs @ ipurge_tr I D (D y) xsa,\n                    ipurge_ref I D (D y) xsa Y)\n                   \\<in> failures P;\n        (xs @ y # xsa @ [x], Y) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) (xsa @ [x]),\n                          ipurge_ref I D (D y) (xsa @ [x]) Y)\n                         \\<in> failures P", "assume \"(xs @ [y], Y) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ [y], Y) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<And>Y.\n       (xs @ [y], Y) \\<in> failures P \\<Longrightarrow>\n       (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<And>x xsa Y.\n       \\<lbrakk>\\<And>Y.\n                   (xs @ y # xsa, Y) \\<in> failures P \\<longrightarrow>\n                   (xs @ ipurge_tr I D (D y) xsa,\n                    ipurge_ref I D (D y) xsa Y)\n                   \\<in> failures P;\n        (xs @ y # xsa @ [x], Y) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) (xsa @ [x]),\n                          ipurge_ref I D (D y) (xsa @ [x]) Y)\n                         \\<in> failures P", "with RUC and WFC and LR"], ["proof (chain)\npicking this:\n  ref_union_closed P\n  weakly_future_consistent P I D R\n  locally_respects P I D R\n  (xs @ [y], Y) \\<in> failures P", "show\n   \"(xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  ref_union_closed P\n  weakly_future_consistent P I D R\n  locally_respects P I D R\n  (xs @ [y], Y) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P", "by (rule ruc_wfc_lr_failures_1)"], ["proof (state)\nthis:\n  (xs, {x \\<in> Y. (D y, D x) \\<notin> I}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>x xsa Y.\n       \\<lbrakk>\\<And>Y.\n                   (xs @ y # xsa, Y) \\<in> failures P \\<longrightarrow>\n                   (xs @ ipurge_tr I D (D y) xsa,\n                    ipurge_ref I D (D y) xsa Y)\n                   \\<in> failures P;\n        (xs @ y # xsa @ [x], Y) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) (xsa @ [x]),\n                          ipurge_ref I D (D y) (xsa @ [x]) Y)\n                         \\<in> failures P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xsa Y.\n       \\<lbrakk>\\<And>Y.\n                   (xs @ y # xsa, Y) \\<in> failures P \\<longrightarrow>\n                   (xs @ ipurge_tr I D (D y) xsa,\n                    ipurge_ref I D (D y) xsa Y)\n                   \\<in> failures P;\n        (xs @ y # xsa @ [x], Y) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) (xsa @ [x]),\n                          ipurge_ref I D (D y) (xsa @ [x]) Y)\n                         \\<in> failures P", "fix y' ys Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xsa Y.\n       \\<lbrakk>\\<And>Y.\n                   (xs @ y # xsa, Y) \\<in> failures P \\<longrightarrow>\n                   (xs @ ipurge_tr I D (D y) xsa,\n                    ipurge_ref I D (D y) xsa Y)\n                   \\<in> failures P;\n        (xs @ y # xsa @ [x], Y) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) (xsa @ [x]),\n                          ipurge_ref I D (D y) (xsa @ [x]) Y)\n                         \\<in> failures P", "assume\n    A: \"\\<And>Y'. (xs @ y # ys, Y') \\<in> failures P \\<longrightarrow>\n      (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y') \\<in> failures P\" and\n    B: \"(xs @ y # ys @ [y'], Y) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ y # ys, ?Y') \\<in> failures P \\<longrightarrow>\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys ?Y')\n  \\<in> failures P\n  (xs @ y # ys @ [y'], Y) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>x xsa Y.\n       \\<lbrakk>\\<And>Y.\n                   (xs @ y # xsa, Y) \\<in> failures P \\<longrightarrow>\n                   (xs @ ipurge_tr I D (D y) xsa,\n                    ipurge_ref I D (D y) xsa Y)\n                   \\<in> failures P;\n        (xs @ y # xsa @ [x], Y) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) (xsa @ [x]),\n                          ipurge_ref I D (D y) (xsa @ [x]) Y)\n                         \\<in> failures P", "show \"(xs @ ipurge_tr I D (D y) (ys @ [y']), ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "proof (cases \"D y' \\<in> sinks I D (D y) (ys @ [y'])\", simp del: sinks.simps)"], ["proof (state)\ngoal (2 subgoals):\n 1. D y' \\<in> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P\n 2. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "let ?Y' = \"{x \\<in> Y. (D y', D x) \\<notin> I}\""], ["proof (state)\ngoal (2 subgoals):\n 1. D y' \\<in> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P\n 2. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "have \"(xs @ y # ys, ?Y') \\<in> failures P \\<longrightarrow>\n      (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys ?Y') \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ y # ys, {x \\<in> Y. (D y', D x) \\<notin> I})\n    \\<in> failures P \\<longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys {x \\<in> Y. (D y', D x) \\<notin> I})\n    \\<in> failures P", "using A"], ["proof (prove)\nusing this:\n  (xs @ y # ys, ?Y') \\<in> failures P \\<longrightarrow>\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys ?Y')\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ y # ys, {x \\<in> Y. (D y', D x) \\<notin> I})\n    \\<in> failures P \\<longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys {x \\<in> Y. (D y', D x) \\<notin> I})\n    \\<in> failures P", "."], ["proof (state)\nthis:\n  (xs @ y # ys, {x \\<in> Y. (D y', D x) \\<notin> I})\n  \\<in> failures P \\<longrightarrow>\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys {x \\<in> Y. (D y', D x) \\<notin> I})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. D y' \\<in> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P\n 2. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (xs @ y # ys, {x \\<in> Y. (D y', D x) \\<notin> I})\n  \\<in> failures P \\<longrightarrow>\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys {x \\<in> Y. (D y', D x) \\<notin> I})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. D y' \\<in> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P\n 2. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "have \"((xs @ y # ys) @ [y'], Y) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((xs @ y # ys) @ [y'], Y) \\<in> failures P", "using B"], ["proof (prove)\nusing this:\n  (xs @ y # ys @ [y'], Y) \\<in> failures P\n\ngoal (1 subgoal):\n 1. ((xs @ y # ys) @ [y'], Y) \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  ((xs @ y # ys) @ [y'], Y) \\<in> failures P\n\ngoal (2 subgoals):\n 1. D y' \\<in> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P\n 2. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "with RUC and WFC and LR"], ["proof (chain)\npicking this:\n  ref_union_closed P\n  weakly_future_consistent P I D R\n  locally_respects P I D R\n  ((xs @ y # ys) @ [y'], Y) \\<in> failures P", "have \"(xs @ y # ys, ?Y') \\<in> failures P\""], ["proof (prove)\nusing this:\n  ref_union_closed P\n  weakly_future_consistent P I D R\n  locally_respects P I D R\n  ((xs @ y # ys) @ [y'], Y) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ y # ys, {x \\<in> Y. (D y', D x) \\<notin> I}) \\<in> failures P", "by (rule ruc_wfc_lr_failures_1)"], ["proof (state)\nthis:\n  (xs @ y # ys, {x \\<in> Y. (D y', D x) \\<notin> I}) \\<in> failures P\n\ngoal (2 subgoals):\n 1. D y' \\<in> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P\n 2. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ y # ys, {x \\<in> Y. (D y', D x) \\<notin> I})\n  \\<in> failures P \\<longrightarrow>\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys {x \\<in> Y. (D y', D x) \\<notin> I})\n  \\<in> failures P\n  (xs @ y # ys, {x \\<in> Y. (D y', D x) \\<notin> I}) \\<in> failures P", "have\n     \"(xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys ?Y') \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ y # ys, {x \\<in> Y. (D y', D x) \\<notin> I})\n  \\<in> failures P \\<longrightarrow>\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys {x \\<in> Y. (D y', D x) \\<notin> I})\n  \\<in> failures P\n  (xs @ y # ys, {x \\<in> Y. (D y', D x) \\<notin> I}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys {x \\<in> Y. (D y', D x) \\<notin> I})\n    \\<in> failures P", ".."], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys {x \\<in> Y. (D y', D x) \\<notin> I})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. D y' \\<in> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P\n 2. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys {x \\<in> Y. (D y', D x) \\<notin> I})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. D y' \\<in> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P\n 2. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "case True"], ["proof (state)\nthis:\n  D y' \\<in> sinks I D (D y) (ys @ [y'])\n\ngoal (2 subgoals):\n 1. D y' \\<in> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P\n 2. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "hence \"ipurge_ref I D (D y) (ys @ [y']) Y = ipurge_ref I D (D y) ys ?Y'\""], ["proof (prove)\nusing this:\n  D y' \\<in> sinks I D (D y) (ys @ [y'])\n\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) (ys @ [y']) Y =\n    ipurge_ref I D (D y) ys {x \\<in> Y. (D y', D x) \\<notin> I}", "by (rule ipurge_ref_eq)"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) (ys @ [y']) Y =\n  ipurge_ref I D (D y) ys {x \\<in> Y. (D y', D x) \\<notin> I}\n\ngoal (2 subgoals):\n 1. D y' \\<in> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P\n 2. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys {x \\<in> Y. (D y', D x) \\<notin> I})\n  \\<in> failures P\n  ipurge_ref I D (D y) (ys @ [y']) Y =\n  ipurge_ref I D (D y) ys {x \\<in> Y. (D y', D x) \\<notin> I}", "show\n     \"(xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) (ys @ [y']) Y) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys {x \\<in> Y. (D y', D x) \\<notin> I})\n  \\<in> failures P\n  ipurge_ref I D (D y) (ys @ [y']) Y =\n  ipurge_ref I D (D y) ys {x \\<in> Y. (D y', D x) \\<notin> I}\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) (ys @ [y']) Y)\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "case False"], ["proof (state)\nthis:\n  D y' \\<notin> sinks I D (D y) (ys @ [y'])\n\ngoal (1 subgoal):\n 1. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "have \"unaffected_domains I D {D y} (ys @ [y']) \\<subseteq> range D \\<inter> (-I) `` range D\"\n     (is \"?U \\<subseteq> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (ys @ [y'])\n    \\<subseteq> range D \\<inter> (- I) `` range D", "by (rule unaffected_domains_subset, simp_all)"], ["proof (state)\nthis:\n  unaffected_domains I D {D y} (ys @ [y'])\n  \\<subseteq> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  unaffected_domains I D {D y} (ys @ [y'])\n  \\<subseteq> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "have \"?U \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (ys @ [y']) \\<noteq> {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (ys @ [y']) \\<noteq> {}", "have \"(D y, D y') \\<notin> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D y, D y') \\<notin> I", "using False"], ["proof (prove)\nusing this:\n  D y' \\<notin> sinks I D (D y) (ys @ [y'])\n\ngoal (1 subgoal):\n 1. (D y, D y') \\<notin> I", "by (rule_tac notI, simp)"], ["proof (state)\nthis:\n  (D y, D y') \\<notin> I\n\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (ys @ [y']) \\<noteq> {}", "moreover"], ["proof (state)\nthis:\n  (D y, D y') \\<notin> I\n\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (ys @ [y']) \\<noteq> {}", "have \"\\<not> ((D y, D y') \\<in> I \\<or> (\\<exists>v \\<in> sinks I D (D y) ys. (v, D y') \\<in> I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ((D y, D y') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D (D y) ys. (v, D y') \\<in> I))", "using False"], ["proof (prove)\nusing this:\n  D y' \\<notin> sinks I D (D y) (ys @ [y'])\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D y') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D (D y) ys. (v, D y') \\<in> I))", "by (simp only: sinks_interference_eq, simp)"], ["proof (state)\nthis:\n  \\<not> ((D y, D y') \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D (D y) ys. (v, D y') \\<in> I))\n\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (ys @ [y']) \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  \\<not> ((D y, D y') \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D (D y) ys. (v, D y') \\<in> I))", "have \"\\<forall>v \\<in> sinks I D (D y) (ys @ [y']). (v, D y') \\<notin> I\""], ["proof (prove)\nusing this:\n  \\<not> ((D y, D y') \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D (D y) ys. (v, D y') \\<in> I))\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>sinks I D (D y) (ys @ [y']). (v, D y') \\<notin> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>v\\<in>sinks I D (D y) (ys @ [y']). (v, D y') \\<notin> I\n\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (ys @ [y']) \\<noteq> {}", "ultimately"], ["proof (chain)\npicking this:\n  (D y, D y') \\<notin> I\n  \\<forall>v\\<in>sinks I D (D y) (ys @ [y']). (v, D y') \\<notin> I", "show \"?U \\<noteq> {}\""], ["proof (prove)\nusing this:\n  (D y, D y') \\<notin> I\n  \\<forall>v\\<in>sinks I D (D y) (ys @ [y']). (v, D y') \\<notin> I\n\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (ys @ [y']) \\<noteq> {}", "apply (simp (no_asm_simp) add: unaffected_domains_def sinks_aux_single_dom set_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(D y, D y') \\<notin> I;\n     \\<forall>v\\<in>sinks I D (D y) (ys @ [y']).\n        (v, D y') \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (D y, D x) \\<notin> I \\<and>\n                         (\\<forall>v\\<in>sinks I D (D y) ys.\n                             (v, D x) \\<notin> I)", "using \\<open>(D y, D y') \\<notin> I\\<close>"], ["proof (prove)\nusing this:\n  (D y, D y') \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(D y, D y') \\<notin> I;\n     \\<forall>v\\<in>sinks I D (D y) (ys @ [y']).\n        (v, D y') \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (D y, D x) \\<notin> I \\<and>\n                         (\\<forall>v\\<in>sinks I D (D y) ys.\n                             (v, D x) \\<notin> I)", "by auto"], ["proof (state)\nthis:\n  unaffected_domains I D {D y} (ys @ [y']) \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  unaffected_domains I D {D y} (ys @ [y']) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  unaffected_domains I D {D y} (ys @ [y']) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "have C: \"xs @ y # ys @ [y'] \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ y # ys @ [y'] \\<in> traces P", "using B"], ["proof (prove)\nusing this:\n  (xs @ y # ys @ [y'], Y) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ y # ys @ [y'] \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ y # ys @ [y'] \\<in> traces P\n\ngoal (1 subgoal):\n 1. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "have \"\\<forall>u \\<in> ?U. ((xs @ [y]) @ ys @ [y'],\n      xs @ ipurge_tr_aux I D {D y} (ys @ [y'])) \\<in> R u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>unaffected_domains I D {D y} (ys @ [y']).\n       ((xs @ [y]) @ ys @ [y'], xs @ ipurge_tr_aux I D {D y} (ys @ [y']))\n       \\<in> R u", "proof (rule ballI, rule gu_condition_imply_secure_aux [OF VP WFC WSC LR],\n       simp_all add: unaffected_domains_def C, (erule conjE)+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "have \"\\<forall>u \\<in> range D. \\<forall>xs x.\n        (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow> (xs, xs @ [x]) \\<in> R u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D.\n       \\<forall>xs x.\n          (D x, u) \\<notin> I \\<and>\n          x \\<in> next_events P xs \\<longrightarrow>\n          (xs, xs @ [x]) \\<in> R u", "using LR"], ["proof (prove)\nusing this:\n  locally_respects P I D R\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D.\n       \\<forall>xs x.\n          (D x, u) \\<notin> I \\<and>\n          x \\<in> next_events P xs \\<longrightarrow>\n          (xs, xs @ [x]) \\<in> R u", "by (simp add: locally_respects_def)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs x.\n        (D x, u) \\<notin> I \\<and>\n        x \\<in> next_events P xs \\<longrightarrow>\n        (xs, xs @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "moreover"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs x.\n        (D x, u) \\<notin> I \\<and>\n        x \\<in> next_events P xs \\<longrightarrow>\n        (xs, xs @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "assume D: \"u \\<in> range D\""], ["proof (state)\nthis:\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs x.\n        (D x, u) \\<notin> I \\<and>\n        x \\<in> next_events P xs \\<longrightarrow>\n        (xs, xs @ [x]) \\<in> R u\n  u \\<in> range D", "have \"\\<forall>xs x.\n        (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow> (xs, xs @ [x]) \\<in> R u\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs x.\n        (D x, u) \\<notin> I \\<and>\n        x \\<in> next_events P xs \\<longrightarrow>\n        (xs, xs @ [x]) \\<in> R u\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. \\<forall>xs x.\n       (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow>\n       (xs, xs @ [x]) \\<in> R u", ".."], ["proof (state)\nthis:\n  \\<forall>xs x.\n     (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow>\n     (xs, xs @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "hence \"(D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n        (xs, xs @ [y]) \\<in> R u\""], ["proof (prove)\nusing this:\n  \\<forall>xs x.\n     (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow>\n     (xs, xs @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n    (xs, xs @ [y]) \\<in> R u", "by blast"], ["proof (state)\nthis:\n  (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "moreover"], ["proof (state)\nthis:\n  (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "assume \"(D y, u) \\<notin> I\""], ["proof (state)\nthis:\n  (D y, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "moreover"], ["proof (state)\nthis:\n  (D y, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "have \"(xs @ [y]) @ ys @ [y'] \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ [y]) @ ys @ [y'] \\<in> traces P", "using C"], ["proof (prove)\nusing this:\n  xs @ y # ys @ [y'] \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs @ [y]) @ ys @ [y'] \\<in> traces P", "by simp"], ["proof (state)\nthis:\n  (xs @ [y]) @ ys @ [y'] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "hence \"xs @ [y] \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs @ [y]) @ ys @ [y'] \\<in> traces P\n\ngoal (1 subgoal):\n 1. xs @ [y] \\<in> traces P", "by (rule process_rule_2_traces)"], ["proof (state)\nthis:\n  xs @ [y] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "hence \"y \\<in> next_events P xs\""], ["proof (prove)\nusing this:\n  xs @ [y] \\<in> traces P\n\ngoal (1 subgoal):\n 1. y \\<in> next_events P xs", "by (simp add: next_events_def)"], ["proof (state)\nthis:\n  y \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "ultimately"], ["proof (chain)\npicking this:\n  (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R u\n  (D y, u) \\<notin> I\n  y \\<in> next_events P xs", "have E: \"(xs, xs @ [y]) \\<in> R u\""], ["proof (prove)\nusing this:\n  (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R u\n  (D y, u) \\<notin> I\n  y \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. (xs, xs @ [y]) \\<in> R u", "by simp"], ["proof (state)\nthis:\n  (xs, xs @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "have \"\\<forall>u \\<in> range D. equiv (traces P) (R u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. equiv (traces P) (R u)", "using VP"], ["proof (prove)\nusing this:\n  view_partition P D R\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. equiv (traces P) (R u)", "by (simp add: view_partition_def)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D. equiv (traces P) (R u)\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "hence \"equiv (traces P) (R u)\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D. equiv (traces P) (R u)\n\ngoal (1 subgoal):\n 1. equiv (traces P) (R u)", "using D"], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D. equiv (traces P) (R u)\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. equiv (traces P) (R u)", ".."], ["proof (state)\nthis:\n  equiv (traces P) (R u)\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "hence \"sym (R u)\""], ["proof (prove)\nusing this:\n  equiv (traces P) (R u)\n\ngoal (1 subgoal):\n 1. sym (R u)", "by (simp add: equiv_def)"], ["proof (state)\nthis:\n  sym (R u)\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} ys.\n                             (v, D y') \\<in> I\n                       then insert (D y') (sinks_aux I D {D y} ys)\n                       else sinks_aux I D {D y} ys.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], xs) \\<in> R ua", "thus \"(xs @ [y], xs) \\<in> R u\""], ["proof (prove)\nusing this:\n  sym (R u)\n\ngoal (1 subgoal):\n 1. (xs @ [y], xs) \\<in> R u", "using E"], ["proof (prove)\nusing this:\n  sym (R u)\n  (xs, xs @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. (xs @ [y], xs) \\<in> R u", "by (rule symE)"], ["proof (state)\nthis:\n  (xs @ [y], xs) \\<in> R u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>u\\<in>unaffected_domains I D {D y} (ys @ [y']).\n     ((xs @ [y]) @ ys @ [y'], xs @ ipurge_tr_aux I D {D y} (ys @ [y']))\n     \\<in> R u\n\ngoal (1 subgoal):\n 1. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "hence \"\\<forall>u \\<in> ?U. (xs @ y # ys @ [y'],\n      xs @ ipurge_tr I D (D y) (ys @ [y'])) \\<in> R u\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>unaffected_domains I D {D y} (ys @ [y']).\n     ((xs @ [y]) @ ys @ [y'], xs @ ipurge_tr_aux I D {D y} (ys @ [y']))\n     \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>unaffected_domains I D {D y} (ys @ [y']).\n       (xs @ y # ys @ [y'], xs @ ipurge_tr I D (D y) (ys @ [y'])) \\<in> R u", "by (simp only: ipurge_tr_aux_single_dom, simp)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>unaffected_domains I D {D y} (ys @ [y']).\n     (xs @ y # ys @ [y'], xs @ ipurge_tr I D (D y) (ys @ [y'])) \\<in> R u\n\ngoal (1 subgoal):\n 1. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  unaffected_domains I D {D y} (ys @ [y'])\n  \\<subseteq> range D \\<inter> (- I) `` range D\n  unaffected_domains I D {D y} (ys @ [y']) \\<noteq> {}\n  \\<forall>u\\<in>unaffected_domains I D {D y} (ys @ [y']).\n     (xs @ y # ys @ [y'], xs @ ipurge_tr I D (D y) (ys @ [y'])) \\<in> R u", "have \"(xs @ ipurge_tr I D (D y) (ys @ [y']), Y \\<inter> D -` ?U)\n      \\<in> failures P\""], ["proof (prove)\nusing this:\n  unaffected_domains I D {D y} (ys @ [y'])\n  \\<subseteq> range D \\<inter> (- I) `` range D\n  unaffected_domains I D {D y} (ys @ [y']) \\<noteq> {}\n  \\<forall>u\\<in>unaffected_domains I D {D y} (ys @ [y']).\n     (xs @ y # ys @ [y'], xs @ ipurge_tr I D (D y) (ys @ [y'])) \\<in> R u\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     Y \\<inter> D -` unaffected_domains I D {D y} (ys @ [y']))\n    \\<in> failures P", "using B"], ["proof (prove)\nusing this:\n  unaffected_domains I D {D y} (ys @ [y'])\n  \\<subseteq> range D \\<inter> (- I) `` range D\n  unaffected_domains I D {D y} (ys @ [y']) \\<noteq> {}\n  \\<forall>u\\<in>unaffected_domains I D {D y} (ys @ [y']).\n     (xs @ y # ys @ [y'], xs @ ipurge_tr I D (D y) (ys @ [y'])) \\<in> R u\n  (xs @ y # ys @ [y'], Y) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     Y \\<inter> D -` unaffected_domains I D {D y} (ys @ [y']))\n    \\<in> failures P", "by (rule ruc_wfc_failures [OF RUC WFC])"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (ys @ [y']),\n   Y \\<inter> D -` unaffected_domains I D {D y} (ys @ [y']))\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (ys @ [y']),\n   Y \\<inter> D -` unaffected_domains I D {D y} (ys @ [y']))\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "have\n     \"Y \\<inter> D -` ?U = {x \\<in> Y. D x \\<in> unaffected_domains I D {D y} (ys @ [y'])}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y \\<inter> D -` unaffected_domains I D {D y} (ys @ [y']) =\n    {x \\<in> Y. D x \\<in> unaffected_domains I D {D y} (ys @ [y'])}", "by (simp add: set_eq_iff)"], ["proof (state)\nthis:\n  Y \\<inter> D -` unaffected_domains I D {D y} (ys @ [y']) =\n  {x \\<in> Y. D x \\<in> unaffected_domains I D {D y} (ys @ [y'])}\n\ngoal (1 subgoal):\n 1. D y' \\<notin> sinks I D (D y) (ys @ [y']) \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ ipurge_tr I D (D y) (ys @ [y']),\n   Y \\<inter> D -` unaffected_domains I D {D y} (ys @ [y']))\n  \\<in> failures P\n  Y \\<inter> D -` unaffected_domains I D {D y} (ys @ [y']) =\n  {x \\<in> Y. D x \\<in> unaffected_domains I D {D y} (ys @ [y'])}", "show ?thesis"], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) (ys @ [y']),\n   Y \\<inter> D -` unaffected_domains I D {D y} (ys @ [y']))\n  \\<in> failures P\n  Y \\<inter> D -` unaffected_domains I D {D y} (ys @ [y']) =\n  {x \\<in> Y. D x \\<in> unaffected_domains I D {D y} (ys @ [y'])}\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (ys @ [y']),\n     ipurge_ref I D (D y) (ys @ [y']) Y)\n    \\<in> failures P", "by (simp only: unaffected_domains_single_dom)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (ys @ [y']), ipurge_ref I D (D y) (ys @ [y']) Y)\n  \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (ys @ [y']), ipurge_ref I D (D y) (ys @ [y']) Y)\n  \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gu_condition_imply_secure_2 [rule_format]:\n  assumes\n    RUC:  \"ref_union_closed P\" and\n    VP:   \"view_partition P D R\" and\n    WFC:  \"weakly_future_consistent P I D R\" and\n    WSC:  \"weakly_step_consistent P D R\" and\n    LR:   \"locally_respects P I D R\" and\n    Y:    \"xs @ [y] \\<in> traces P\"\n  shows \"(xs @ zs, Z) \\<in> failures P \\<longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ zs, Z) \\<in> failures P \\<longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> failures P", "proof (induction zs arbitrary: Z rule: rev_induct, rule_tac [!] impI,\n simp add: ipurge_ref_def)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Z.\n       (xs, Z) \\<in> failures P \\<Longrightarrow>\n       (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<And>x xsa Z.\n       \\<lbrakk>\\<And>Z.\n                   (xs @ xsa, Z) \\<in> failures P \\<longrightarrow>\n                   (xs @ y # ipurge_tr I D (D y) xsa,\n                    ipurge_ref I D (D y) xsa Z)\n                   \\<in> failures P;\n        (xs @ xsa @ [x], Z) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) (xsa @ [x]),\n                          ipurge_ref I D (D y) (xsa @ [x]) Z)\n                         \\<in> failures P", "fix Z"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Z.\n       (xs, Z) \\<in> failures P \\<Longrightarrow>\n       (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<And>x xsa Z.\n       \\<lbrakk>\\<And>Z.\n                   (xs @ xsa, Z) \\<in> failures P \\<longrightarrow>\n                   (xs @ y # ipurge_tr I D (D y) xsa,\n                    ipurge_ref I D (D y) xsa Z)\n                   \\<in> failures P;\n        (xs @ xsa @ [x], Z) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) (xsa @ [x]),\n                          ipurge_ref I D (D y) (xsa @ [x]) Z)\n                         \\<in> failures P", "assume \"(xs, Z) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs, Z) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<And>Z.\n       (xs, Z) \\<in> failures P \\<Longrightarrow>\n       (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n 2. \\<And>x xsa Z.\n       \\<lbrakk>\\<And>Z.\n                   (xs @ xsa, Z) \\<in> failures P \\<longrightarrow>\n                   (xs @ y # ipurge_tr I D (D y) xsa,\n                    ipurge_ref I D (D y) xsa Z)\n                   \\<in> failures P;\n        (xs @ xsa @ [x], Z) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) (xsa @ [x]),\n                          ipurge_ref I D (D y) (xsa @ [x]) Z)\n                         \\<in> failures P", "with RUC and WFC and LR"], ["proof (chain)\npicking this:\n  ref_union_closed P\n  weakly_future_consistent P I D R\n  locally_respects P I D R\n  (xs, Z) \\<in> failures P", "show\n   \"(xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  ref_union_closed P\n  weakly_future_consistent P I D R\n  locally_respects P I D R\n  (xs, Z) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "using Y"], ["proof (prove)\nusing this:\n  ref_union_closed P\n  weakly_future_consistent P I D R\n  locally_respects P I D R\n  (xs, Z) \\<in> failures P\n  xs @ [y] \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P", "by (rule ruc_wfc_lr_failures_2)"], ["proof (state)\nthis:\n  (xs @ [y], {x \\<in> Z. (D y, D x) \\<notin> I}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>x xsa Z.\n       \\<lbrakk>\\<And>Z.\n                   (xs @ xsa, Z) \\<in> failures P \\<longrightarrow>\n                   (xs @ y # ipurge_tr I D (D y) xsa,\n                    ipurge_ref I D (D y) xsa Z)\n                   \\<in> failures P;\n        (xs @ xsa @ [x], Z) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) (xsa @ [x]),\n                          ipurge_ref I D (D y) (xsa @ [x]) Z)\n                         \\<in> failures P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xsa Z.\n       \\<lbrakk>\\<And>Z.\n                   (xs @ xsa, Z) \\<in> failures P \\<longrightarrow>\n                   (xs @ y # ipurge_tr I D (D y) xsa,\n                    ipurge_ref I D (D y) xsa Z)\n                   \\<in> failures P;\n        (xs @ xsa @ [x], Z) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) (xsa @ [x]),\n                          ipurge_ref I D (D y) (xsa @ [x]) Z)\n                         \\<in> failures P", "fix z zs Z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xsa Z.\n       \\<lbrakk>\\<And>Z.\n                   (xs @ xsa, Z) \\<in> failures P \\<longrightarrow>\n                   (xs @ y # ipurge_tr I D (D y) xsa,\n                    ipurge_ref I D (D y) xsa Z)\n                   \\<in> failures P;\n        (xs @ xsa @ [x], Z) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) (xsa @ [x]),\n                          ipurge_ref I D (D y) (xsa @ [x]) Z)\n                         \\<in> failures P", "assume\n    A: \"\\<And>Z'. (xs @ zs, Z') \\<in> failures P \\<longrightarrow>\n      (xs @ y # ipurge_tr I D (D y) zs,\n      ipurge_ref I D (D y) zs Z') \\<in> failures P\" and\n    B: \"(xs @ zs @ [z], Z) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ zs, ?Z') \\<in> failures P \\<longrightarrow>\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs ?Z')\n  \\<in> failures P\n  (xs @ zs @ [z], Z) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>x xsa Z.\n       \\<lbrakk>\\<And>Z.\n                   (xs @ xsa, Z) \\<in> failures P \\<longrightarrow>\n                   (xs @ y # ipurge_tr I D (D y) xsa,\n                    ipurge_ref I D (D y) xsa Z)\n                   \\<in> failures P;\n        (xs @ xsa @ [x], Z) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) (xsa @ [x]),\n                          ipurge_ref I D (D y) (xsa @ [x]) Z)\n                         \\<in> failures P", "show \"(xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n    ipurge_ref I D (D y) (zs @ [z]) Z) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "proof (cases \"D z \\<in> sinks I D (D y) (zs @ [z])\", simp del: sinks.simps)"], ["proof (state)\ngoal (2 subgoals):\n 1. D z \\<in> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P\n 2. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "let ?Z' = \"{x \\<in> Z. (D z, D x) \\<notin> I}\""], ["proof (state)\ngoal (2 subgoals):\n 1. D z \\<in> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P\n 2. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "have \"(xs @ zs, ?Z') \\<in> failures P \\<longrightarrow>\n      (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs ?Z') \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ zs, {x \\<in> Z. (D z, D x) \\<notin> I})\n    \\<in> failures P \\<longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs {x \\<in> Z. (D z, D x) \\<notin> I})\n    \\<in> failures P", "using A"], ["proof (prove)\nusing this:\n  (xs @ zs, ?Z') \\<in> failures P \\<longrightarrow>\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs ?Z')\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ zs, {x \\<in> Z. (D z, D x) \\<notin> I})\n    \\<in> failures P \\<longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs {x \\<in> Z. (D z, D x) \\<notin> I})\n    \\<in> failures P", "."], ["proof (state)\nthis:\n  (xs @ zs, {x \\<in> Z. (D z, D x) \\<notin> I})\n  \\<in> failures P \\<longrightarrow>\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs {x \\<in> Z. (D z, D x) \\<notin> I})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. D z \\<in> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P\n 2. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (xs @ zs, {x \\<in> Z. (D z, D x) \\<notin> I})\n  \\<in> failures P \\<longrightarrow>\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs {x \\<in> Z. (D z, D x) \\<notin> I})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. D z \\<in> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P\n 2. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "have \"((xs @ zs) @ [z], Z) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((xs @ zs) @ [z], Z) \\<in> failures P", "using B"], ["proof (prove)\nusing this:\n  (xs @ zs @ [z], Z) \\<in> failures P\n\ngoal (1 subgoal):\n 1. ((xs @ zs) @ [z], Z) \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  ((xs @ zs) @ [z], Z) \\<in> failures P\n\ngoal (2 subgoals):\n 1. D z \\<in> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P\n 2. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "with RUC and WFC and LR"], ["proof (chain)\npicking this:\n  ref_union_closed P\n  weakly_future_consistent P I D R\n  locally_respects P I D R\n  ((xs @ zs) @ [z], Z) \\<in> failures P", "have \"(xs @ zs, ?Z') \\<in> failures P\""], ["proof (prove)\nusing this:\n  ref_union_closed P\n  weakly_future_consistent P I D R\n  locally_respects P I D R\n  ((xs @ zs) @ [z], Z) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ zs, {x \\<in> Z. (D z, D x) \\<notin> I}) \\<in> failures P", "by (rule ruc_wfc_lr_failures_1)"], ["proof (state)\nthis:\n  (xs @ zs, {x \\<in> Z. (D z, D x) \\<notin> I}) \\<in> failures P\n\ngoal (2 subgoals):\n 1. D z \\<in> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P\n 2. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ zs, {x \\<in> Z. (D z, D x) \\<notin> I})\n  \\<in> failures P \\<longrightarrow>\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs {x \\<in> Z. (D z, D x) \\<notin> I})\n  \\<in> failures P\n  (xs @ zs, {x \\<in> Z. (D z, D x) \\<notin> I}) \\<in> failures P", "have\n     \"(xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs ?Z') \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ zs, {x \\<in> Z. (D z, D x) \\<notin> I})\n  \\<in> failures P \\<longrightarrow>\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs {x \\<in> Z. (D z, D x) \\<notin> I})\n  \\<in> failures P\n  (xs @ zs, {x \\<in> Z. (D z, D x) \\<notin> I}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs {x \\<in> Z. (D z, D x) \\<notin> I})\n    \\<in> failures P", ".."], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs {x \\<in> Z. (D z, D x) \\<notin> I})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. D z \\<in> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P\n 2. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs {x \\<in> Z. (D z, D x) \\<notin> I})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. D z \\<in> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P\n 2. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "case True"], ["proof (state)\nthis:\n  D z \\<in> sinks I D (D y) (zs @ [z])\n\ngoal (2 subgoals):\n 1. D z \\<in> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P\n 2. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "hence \"ipurge_ref I D (D y) (zs @ [z]) Z = ipurge_ref I D (D y) zs ?Z'\""], ["proof (prove)\nusing this:\n  D z \\<in> sinks I D (D y) (zs @ [z])\n\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) (zs @ [z]) Z =\n    ipurge_ref I D (D y) zs {x \\<in> Z. (D z, D x) \\<notin> I}", "by (rule ipurge_ref_eq)"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) (zs @ [z]) Z =\n  ipurge_ref I D (D y) zs {x \\<in> Z. (D z, D x) \\<notin> I}\n\ngoal (2 subgoals):\n 1. D z \\<in> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P\n 2. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs {x \\<in> Z. (D z, D x) \\<notin> I})\n  \\<in> failures P\n  ipurge_ref I D (D y) (zs @ [z]) Z =\n  ipurge_ref I D (D y) zs {x \\<in> Z. (D z, D x) \\<notin> I}", "show\n     \"(xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) (zs @ [z]) Z)\n        \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs {x \\<in> Z. (D z, D x) \\<notin> I})\n  \\<in> failures P\n  ipurge_ref I D (D y) (zs @ [z]) Z =\n  ipurge_ref I D (D y) zs {x \\<in> Z. (D z, D x) \\<notin> I}\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) (zs @ [z]) Z)\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "case False"], ["proof (state)\nthis:\n  D z \\<notin> sinks I D (D y) (zs @ [z])\n\ngoal (1 subgoal):\n 1. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "have \"unaffected_domains I D {D y} (zs @ [z]) \\<subseteq> range D \\<inter> (-I) `` range D\"\n     (is \"?U \\<subseteq> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (zs @ [z])\n    \\<subseteq> range D \\<inter> (- I) `` range D", "by (rule unaffected_domains_subset, simp_all)"], ["proof (state)\nthis:\n  unaffected_domains I D {D y} (zs @ [z])\n  \\<subseteq> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  unaffected_domains I D {D y} (zs @ [z])\n  \\<subseteq> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "have \"?U \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (zs @ [z]) \\<noteq> {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (zs @ [z]) \\<noteq> {}", "have \"(D y, D z) \\<notin> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D y, D z) \\<notin> I", "using False"], ["proof (prove)\nusing this:\n  D z \\<notin> sinks I D (D y) (zs @ [z])\n\ngoal (1 subgoal):\n 1. (D y, D z) \\<notin> I", "by (rule_tac notI, simp)"], ["proof (state)\nthis:\n  (D y, D z) \\<notin> I\n\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (zs @ [z]) \\<noteq> {}", "moreover"], ["proof (state)\nthis:\n  (D y, D z) \\<notin> I\n\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (zs @ [z]) \\<noteq> {}", "have \"\\<not> ((D y, D z) \\<in> I \\<or> (\\<exists>v \\<in> sinks I D (D y) zs. (v, D z) \\<in> I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ((D y, D z) \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D (D y) zs. (v, D z) \\<in> I))", "using False"], ["proof (prove)\nusing this:\n  D z \\<notin> sinks I D (D y) (zs @ [z])\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D z) \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D (D y) zs. (v, D z) \\<in> I))", "by (simp only: sinks_interference_eq, simp)"], ["proof (state)\nthis:\n  \\<not> ((D y, D z) \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D (D y) zs. (v, D z) \\<in> I))\n\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (zs @ [z]) \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  \\<not> ((D y, D z) \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D (D y) zs. (v, D z) \\<in> I))", "have \"\\<forall>v \\<in> sinks I D (D y) (zs @ [z]). (v, D z) \\<notin> I\""], ["proof (prove)\nusing this:\n  \\<not> ((D y, D z) \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D (D y) zs. (v, D z) \\<in> I))\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>sinks I D (D y) (zs @ [z]). (v, D z) \\<notin> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>v\\<in>sinks I D (D y) (zs @ [z]). (v, D z) \\<notin> I\n\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (zs @ [z]) \\<noteq> {}", "ultimately"], ["proof (chain)\npicking this:\n  (D y, D z) \\<notin> I\n  \\<forall>v\\<in>sinks I D (D y) (zs @ [z]). (v, D z) \\<notin> I", "show \"?U \\<noteq> {}\""], ["proof (prove)\nusing this:\n  (D y, D z) \\<notin> I\n  \\<forall>v\\<in>sinks I D (D y) (zs @ [z]). (v, D z) \\<notin> I\n\ngoal (1 subgoal):\n 1. unaffected_domains I D {D y} (zs @ [z]) \\<noteq> {}", "apply (simp (no_asm_simp) add: unaffected_domains_def sinks_aux_single_dom set_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(D y, D z) \\<notin> I;\n     \\<forall>v\\<in>sinks I D (D y) (zs @ [z]). (v, D z) \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (D y, D x) \\<notin> I \\<and>\n                         (\\<forall>v\\<in>sinks I D (D y) zs.\n                             (v, D x) \\<notin> I)", "using \\<open>(D y, D z) \\<notin> I\\<close>"], ["proof (prove)\nusing this:\n  (D y, D z) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(D y, D z) \\<notin> I;\n     \\<forall>v\\<in>sinks I D (D y) (zs @ [z]). (v, D z) \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (D y, D x) \\<notin> I \\<and>\n                         (\\<forall>v\\<in>sinks I D (D y) zs.\n                             (v, D x) \\<notin> I)", "by auto"], ["proof (state)\nthis:\n  unaffected_domains I D {D y} (zs @ [z]) \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  unaffected_domains I D {D y} (zs @ [z]) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  unaffected_domains I D {D y} (zs @ [z]) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "have C: \"xs @ zs @ [z] \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ zs @ [z] \\<in> traces P", "using B"], ["proof (prove)\nusing this:\n  (xs @ zs @ [z], Z) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ zs @ [z] \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ zs @ [z] \\<in> traces P\n\ngoal (1 subgoal):\n 1. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "have \"\\<forall>u \\<in> ?U. (xs @ zs @ [z],\n      (xs @ [y]) @ ipurge_tr_aux I D {D y} (zs @ [z])) \\<in> R u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>unaffected_domains I D {D y} (zs @ [z]).\n       (xs @ zs @ [z], (xs @ [y]) @ ipurge_tr_aux I D {D y} (zs @ [z]))\n       \\<in> R u", "proof (rule ballI, rule gu_condition_imply_secure_aux [OF VP WFC WSC LR],\n       simp_all add: unaffected_domains_def C, (erule conjE)+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} zs.\n                             (v, D z) \\<in> I\n                       then insert (D z) (sinks_aux I D {D y} zs)\n                       else sinks_aux I D {D y} zs.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [y]) \\<in> R ua", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} zs.\n                             (v, D z) \\<in> I\n                       then insert (D z) (sinks_aux I D {D y} zs)\n                       else sinks_aux I D {D y} zs.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [y]) \\<in> R ua", "have \"\\<forall>u \\<in> range D. \\<forall>xs x.\n        (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow> (xs, xs @ [x]) \\<in> R u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D.\n       \\<forall>xs x.\n          (D x, u) \\<notin> I \\<and>\n          x \\<in> next_events P xs \\<longrightarrow>\n          (xs, xs @ [x]) \\<in> R u", "using LR"], ["proof (prove)\nusing this:\n  locally_respects P I D R\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D.\n       \\<forall>xs x.\n          (D x, u) \\<notin> I \\<and>\n          x \\<in> next_events P xs \\<longrightarrow>\n          (xs, xs @ [x]) \\<in> R u", "by (simp add: locally_respects_def)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs x.\n        (D x, u) \\<notin> I \\<and>\n        x \\<in> next_events P xs \\<longrightarrow>\n        (xs, xs @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} zs.\n                             (v, D z) \\<in> I\n                       then insert (D z) (sinks_aux I D {D y} zs)\n                       else sinks_aux I D {D y} zs.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [y]) \\<in> R ua", "moreover"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs x.\n        (D x, u) \\<notin> I \\<and>\n        x \\<in> next_events P xs \\<longrightarrow>\n        (xs, xs @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} zs.\n                             (v, D z) \\<in> I\n                       then insert (D z) (sinks_aux I D {D y} zs)\n                       else sinks_aux I D {D y} zs.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [y]) \\<in> R ua", "assume D: \"u \\<in> range D\""], ["proof (state)\nthis:\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} zs.\n                             (v, D z) \\<in> I\n                       then insert (D z) (sinks_aux I D {D y} zs)\n                       else sinks_aux I D {D y} zs.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [y]) \\<in> R ua", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs x.\n        (D x, u) \\<notin> I \\<and>\n        x \\<in> next_events P xs \\<longrightarrow>\n        (xs, xs @ [x]) \\<in> R u\n  u \\<in> range D", "have \"\\<forall>xs x.\n        (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow> (xs, xs @ [x]) \\<in> R u\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs x.\n        (D x, u) \\<notin> I \\<and>\n        x \\<in> next_events P xs \\<longrightarrow>\n        (xs, xs @ [x]) \\<in> R u\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. \\<forall>xs x.\n       (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow>\n       (xs, xs @ [x]) \\<in> R u", ".."], ["proof (state)\nthis:\n  \\<forall>xs x.\n     (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow>\n     (xs, xs @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} zs.\n                             (v, D z) \\<in> I\n                       then insert (D z) (sinks_aux I D {D y} zs)\n                       else sinks_aux I D {D y} zs.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [y]) \\<in> R ua", "hence \"(D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow> (xs, xs @ [y]) \\<in> R u\""], ["proof (prove)\nusing this:\n  \\<forall>xs x.\n     (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow>\n     (xs, xs @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n    (xs, xs @ [y]) \\<in> R u", "by blast"], ["proof (state)\nthis:\n  (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} zs.\n                             (v, D z) \\<in> I\n                       then insert (D z) (sinks_aux I D {D y} zs)\n                       else sinks_aux I D {D y} zs.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [y]) \\<in> R ua", "moreover"], ["proof (state)\nthis:\n  (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} zs.\n                             (v, D z) \\<in> I\n                       then insert (D z) (sinks_aux I D {D y} zs)\n                       else sinks_aux I D {D y} zs.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [y]) \\<in> R ua", "assume \"(D y, u) \\<notin> I\""], ["proof (state)\nthis:\n  (D y, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} zs.\n                             (v, D z) \\<in> I\n                       then insert (D z) (sinks_aux I D {D y} zs)\n                       else sinks_aux I D {D y} zs.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [y]) \\<in> R ua", "moreover"], ["proof (state)\nthis:\n  (D y, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} zs.\n                             (v, D z) \\<in> I\n                       then insert (D z) (sinks_aux I D {D y} zs)\n                       else sinks_aux I D {D y} zs.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [y]) \\<in> R ua", "have \"y \\<in> next_events P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> next_events P xs", "using Y"], ["proof (prove)\nusing this:\n  xs @ [y] \\<in> traces P\n\ngoal (1 subgoal):\n 1. y \\<in> next_events P xs", "by (simp add: next_events_def)"], ["proof (state)\nthis:\n  y \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> range D;\n        \\<forall>v\\<in>if \\<exists>v\\<in>sinks_aux I D {D y} zs.\n                             (v, D z) \\<in> I\n                       then insert (D z) (sinks_aux I D {D y} zs)\n                       else sinks_aux I D {D y} zs.\n           (v, u) \\<notin> I;\n        ua \\<in> range D; (D y, ua) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [y]) \\<in> R ua", "ultimately"], ["proof (chain)\npicking this:\n  (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R u\n  (D y, u) \\<notin> I\n  y \\<in> next_events P xs", "show \"(xs, xs @ [y]) \\<in> R u\""], ["proof (prove)\nusing this:\n  (D y, u) \\<notin> I \\<and> y \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [y]) \\<in> R u\n  (D y, u) \\<notin> I\n  y \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. (xs, xs @ [y]) \\<in> R u", "by simp"], ["proof (state)\nthis:\n  (xs, xs @ [y]) \\<in> R u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>u\\<in>unaffected_domains I D {D y} (zs @ [z]).\n     (xs @ zs @ [z], (xs @ [y]) @ ipurge_tr_aux I D {D y} (zs @ [z]))\n     \\<in> R u\n\ngoal (1 subgoal):\n 1. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "hence \"\\<forall>u \\<in> ?U. (xs @ zs @ [z],\n      xs @ y # ipurge_tr I D (D y) (zs @ [z])) \\<in> R u\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>unaffected_domains I D {D y} (zs @ [z]).\n     (xs @ zs @ [z], (xs @ [y]) @ ipurge_tr_aux I D {D y} (zs @ [z]))\n     \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>unaffected_domains I D {D y} (zs @ [z]).\n       (xs @ zs @ [z], xs @ y # ipurge_tr I D (D y) (zs @ [z])) \\<in> R u", "by (simp only: ipurge_tr_aux_single_dom, simp)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>unaffected_domains I D {D y} (zs @ [z]).\n     (xs @ zs @ [z], xs @ y # ipurge_tr I D (D y) (zs @ [z])) \\<in> R u\n\ngoal (1 subgoal):\n 1. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  unaffected_domains I D {D y} (zs @ [z])\n  \\<subseteq> range D \\<inter> (- I) `` range D\n  unaffected_domains I D {D y} (zs @ [z]) \\<noteq> {}\n  \\<forall>u\\<in>unaffected_domains I D {D y} (zs @ [z]).\n     (xs @ zs @ [z], xs @ y # ipurge_tr I D (D y) (zs @ [z])) \\<in> R u", "have \"(xs @ y # ipurge_tr I D (D y) (zs @ [z]), Z \\<inter> D -` ?U)\n      \\<in> failures P\""], ["proof (prove)\nusing this:\n  unaffected_domains I D {D y} (zs @ [z])\n  \\<subseteq> range D \\<inter> (- I) `` range D\n  unaffected_domains I D {D y} (zs @ [z]) \\<noteq> {}\n  \\<forall>u\\<in>unaffected_domains I D {D y} (zs @ [z]).\n     (xs @ zs @ [z], xs @ y # ipurge_tr I D (D y) (zs @ [z])) \\<in> R u\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     Z \\<inter> D -` unaffected_domains I D {D y} (zs @ [z]))\n    \\<in> failures P", "using B"], ["proof (prove)\nusing this:\n  unaffected_domains I D {D y} (zs @ [z])\n  \\<subseteq> range D \\<inter> (- I) `` range D\n  unaffected_domains I D {D y} (zs @ [z]) \\<noteq> {}\n  \\<forall>u\\<in>unaffected_domains I D {D y} (zs @ [z]).\n     (xs @ zs @ [z], xs @ y # ipurge_tr I D (D y) (zs @ [z])) \\<in> R u\n  (xs @ zs @ [z], Z) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     Z \\<inter> D -` unaffected_domains I D {D y} (zs @ [z]))\n    \\<in> failures P", "by (rule ruc_wfc_failures [OF RUC WFC])"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n   Z \\<inter> D -` unaffected_domains I D {D y} (zs @ [z]))\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n   Z \\<inter> D -` unaffected_domains I D {D y} (zs @ [z]))\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "have\n     \"Z \\<inter> D -` ?U = {x \\<in> Z. D x \\<in> unaffected_domains I D {D y} (zs @ [z])}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Z \\<inter> D -` unaffected_domains I D {D y} (zs @ [z]) =\n    {x \\<in> Z. D x \\<in> unaffected_domains I D {D y} (zs @ [z])}", "by (simp add: set_eq_iff)"], ["proof (state)\nthis:\n  Z \\<inter> D -` unaffected_domains I D {D y} (zs @ [z]) =\n  {x \\<in> Z. D x \\<in> unaffected_domains I D {D y} (zs @ [z])}\n\ngoal (1 subgoal):\n 1. D z \\<notin> sinks I D (D y) (zs @ [z]) \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n   Z \\<inter> D -` unaffected_domains I D {D y} (zs @ [z]))\n  \\<in> failures P\n  Z \\<inter> D -` unaffected_domains I D {D y} (zs @ [z]) =\n  {x \\<in> Z. D x \\<in> unaffected_domains I D {D y} (zs @ [z])}", "show ?thesis"], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n   Z \\<inter> D -` unaffected_domains I D {D y} (zs @ [z]))\n  \\<in> failures P\n  Z \\<inter> D -` unaffected_domains I D {D y} (zs @ [z]) =\n  {x \\<in> Z. D x \\<in> unaffected_domains I D {D y} (zs @ [z])}\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n     ipurge_ref I D (D y) (zs @ [z]) Z)\n    \\<in> failures P", "by (simp only: unaffected_domains_single_dom)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n   ipurge_ref I D (D y) (zs @ [z]) Z)\n  \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (zs @ [z]),\n   ipurge_ref I D (D y) (zs @ [z]) Z)\n  \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem generic_unwinding:\n  assumes\n    RUC:  \"ref_union_closed P\" and\n    VP:   \"view_partition P D R\" and\n    WFC:  \"weakly_future_consistent P I D R\" and\n    WSC:  \"weakly_step_consistent P D R\" and\n    LR:   \"locally_respects P I D R\"\n  shows \"secure P I D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. secure P I D", "proof (simp add: secure_def futures_def, (rule allI)+, rule impI, erule conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs y ys Y zs Z.\n       \\<lbrakk>(xs @ y # ys, Y) \\<in> failures P;\n        (xs @ zs, Z) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> failures P \\<and>\n                         (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Z)\n                         \\<in> failures P", "fix xs y ys Y zs Z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs y ys Y zs Z.\n       \\<lbrakk>(xs @ y # ys, Y) \\<in> failures P;\n        (xs @ zs, Z) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> failures P \\<and>\n                         (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Z)\n                         \\<in> failures P", "assume\n    A: \"(xs @ y # ys, Y) \\<in> failures P\" and\n    B: \"(xs @ zs, Z) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ y # ys, Y) \\<in> failures P\n  (xs @ zs, Z) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>xs y ys Y zs Z.\n       \\<lbrakk>(xs @ y # ys, Y) \\<in> failures P;\n        (xs @ zs, Z) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> failures P \\<and>\n                         (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Z)\n                         \\<in> failures P", "show \"(xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y) \\<in> failures P \\<and>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z) \\<in> failures P\"\n    (is \"?P \\<and> ?Q\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> failures P \\<and>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> failures P", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> failures P\n 2. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> failures P", "show ?P"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> failures P", "using RUC and VP and WFC and WSC and LR and A"], ["proof (prove)\nusing this:\n  ref_union_closed P\n  view_partition P D R\n  weakly_future_consistent P I D R\n  weakly_step_consistent P D R\n  locally_respects P I D R\n  (xs @ y # ys, Y) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> failures P", "by (rule gu_condition_imply_secure_1)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> failures P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> failures P", "have \"((xs @ [y]) @ ys, Y) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((xs @ [y]) @ ys, Y) \\<in> failures P", "using A"], ["proof (prove)\nusing this:\n  (xs @ y # ys, Y) \\<in> failures P\n\ngoal (1 subgoal):\n 1. ((xs @ [y]) @ ys, Y) \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  ((xs @ [y]) @ ys, Y) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> failures P", "hence \"(xs @ [y], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  ((xs @ [y]) @ ys, Y) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P", "by (rule process_rule_2_failures)"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> failures P", "hence \"xs @ [y] \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ [y] \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ [y] \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> failures P", "with RUC and VP and WFC and WSC and LR"], ["proof (chain)\npicking this:\n  ref_union_closed P\n  view_partition P D R\n  weakly_future_consistent P I D R\n  weakly_step_consistent P D R\n  locally_respects P I D R\n  xs @ [y] \\<in> traces P", "show ?Q"], ["proof (prove)\nusing this:\n  ref_union_closed P\n  view_partition P D R\n  weakly_future_consistent P I D R\n  weakly_step_consistent P D R\n  locally_respects P I D R\n  xs @ [y] \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> failures P", "using B"], ["proof (prove)\nusing this:\n  ref_union_closed P\n  view_partition P D R\n  weakly_future_consistent P I D R\n  weakly_step_consistent P D R\n  locally_respects P I D R\n  xs @ [y] \\<in> traces P\n  (xs @ zs, Z) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> failures P", "by (rule gu_condition_imply_secure_2)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n  \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n  \\<in> failures P \\<and>\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n  \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n\\null\n\nIt is interesting to observe that unlike symmetry and transitivity, the assumed reflexivity of the\nrelations in the range of the domain-relation map is never used in the proof of the Generic\nUnwinding Theorem. Nonetheless, by assuming that such relations be equivalence relations over\nprocess traces rather than just symmetric and transitive ones, reflexivity has been kept among\nassumptions for both historical reasons -- Rushby's Unwinding Theorem for deterministic state\nmachines deals with equivalence relations -- and practical reasons -- predicate\n@{term \"refl_on (traces P)\"} may only be verified by a relation included in\n@{term \"traces P \\<times> traces P\"}, thus ensuring that traces be not correlated with non-trace event\nlists, which is a necessary condition for weak future consistency (cf. \\cite{R2}).\n\nHere below are convenient variants of the Generic Unwinding Theorem applying to deterministic\nprocesses and trace set processes (cf. \\cite{R2}).\n\n\\null\n\\<close>"], ["", "theorem d_generic_unwinding:\n \"deterministic P \\<Longrightarrow>\n  view_partition P D R \\<Longrightarrow>\n  d_weakly_future_consistent P I D R \\<Longrightarrow>\n  weakly_step_consistent P D R \\<Longrightarrow>\n  locally_respects P I D R \\<Longrightarrow>\n  secure P I D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>deterministic P; view_partition P D R;\n     d_weakly_future_consistent P I D R; weakly_step_consistent P D R;\n     locally_respects P I D R\\<rbrakk>\n    \\<Longrightarrow> secure P I D", "proof (rule generic_unwinding, rule d_implies_ruc, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>deterministic P; view_partition P D R;\n     d_weakly_future_consistent P I D R; weakly_step_consistent P D R;\n     locally_respects P I D R\\<rbrakk>\n    \\<Longrightarrow> weakly_future_consistent P I D R", "qed (drule d_wfc_equals_dwfc [of P I D R], simp)"], ["", "theorem ts_generic_unwinding:\n \"trace_set T \\<Longrightarrow>\n  view_partition (ts_process T) D R \\<Longrightarrow>\n  d_weakly_future_consistent (ts_process T) I D R \\<Longrightarrow>\n  weakly_step_consistent (ts_process T) D R \\<Longrightarrow>\n  locally_respects (ts_process T) I D R \\<Longrightarrow>\n  secure (ts_process T) I D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>trace_set T; view_partition (ts_process T) D R;\n     d_weakly_future_consistent (ts_process T) I D R;\n     weakly_step_consistent (ts_process T) D R;\n     locally_respects (ts_process T) I D R\\<rbrakk>\n    \\<Longrightarrow> secure (ts_process T) I D", "proof (rule d_generic_unwinding, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>trace_set T; view_partition (ts_process T) D R;\n     d_weakly_future_consistent (ts_process T) I D R;\n     weakly_step_consistent (ts_process T) D R;\n     locally_respects (ts_process T) I D R\\<rbrakk>\n    \\<Longrightarrow> deterministic (ts_process T)", "qed (rule ts_process_d)"], ["", "subsection \"The Generic Unwinding Theorem: counterexample to condition necessity\""], ["", "text \\<open>\nAt a first glance, it seems reasonable to hypothesize that the Generic Unwinding Theorem expresses\na necessary, as well as sufficient, condition for security, viz. that whenever a process is secure\nwith respect to a policy, there should exist a set of \"views\" of process traces, one per domain,\nsatisfying the apparently simple assumptions of the theorem.\n\nIt can thus be surprising to discover that this hypothesis is false, as proven in what follows by\nconstructing a counterexample. The key observation for attaining this result is that symmetry,\ntransitivity, weak step consistency, and local policy respect permit to infer the correlation of\npairs of traces, and can then be given the form of introduction rules in the inductive definition of\na set. In this way, a \"minimum\" domain-relation map \\<open>rel_induct\\<close> is obtained, viz. a map such\nthat, for each domain \\<open>u\\<close>, the image of \\<open>u\\<close> under this map is included in the image of\n\\<open>u\\<close> under any map which has the aforesaid properties -- particularly, which satisfies the\nassumptions of the Generic Unwinding Theorem.\n\nAlthough reflexivity can be given the form of an introduction rule, too, it has been omitted from\nthe inductive definition. This has been done in order to ensure that the \"minimum\" domain-relation\nmap, and consequently the counterexample as well, still remain such even if reflexivity, being\nunnecessary (cf. above), were removed from the assumptions of the Generic Unwinding Theorem.\n\n\\null\n\\<close>"], ["", "inductive_set rel_induct_aux ::\n \"'a process \\<Rightarrow> ('d \\<times> 'd) set \\<Rightarrow> ('a \\<Rightarrow> 'd) \\<Rightarrow> ('d \\<times> 'a list \\<times> 'a list) set\"\nfor P :: \"'a process\" and I :: \"('d \\<times> 'd) set\" and D :: \"'a \\<Rightarrow> 'd\" where\nrule_sym:   \"(u, xs, ys) \\<in> rel_induct_aux P I D \\<Longrightarrow>\n               (u, ys, xs) \\<in> rel_induct_aux P I D\" |\nrule_trans: \"\\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D;\n             (u, ys, zs) \\<in> rel_induct_aux P I D\\<rbrakk> \\<Longrightarrow>\n               (u, xs, zs) \\<in> rel_induct_aux P I D\" |\nrule_WSC:   \"\\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D;\n             (D x, xs, ys) \\<in> rel_induct_aux P I D;\n             x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk> \\<Longrightarrow>\n               (u, xs @ [x], ys @ [x]) \\<in> rel_induct_aux P I D\" |\nrule_LR:    \"\\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I; x \\<in> next_events P xs\\<rbrakk> \\<Longrightarrow>\n               (u, xs, xs @ [x]) \\<in> rel_induct_aux P I D\""], ["", "definition rel_induct ::\n \"'a process \\<Rightarrow> ('d \\<times> 'd) set \\<Rightarrow> ('a \\<Rightarrow> 'd) \\<Rightarrow> ('a, 'd) dom_rel_map\" where\n\"rel_induct P I D u \\<equiv> rel_induct_aux P I D `` {u}\""], ["", "lemma rel_induct_subset:\n  assumes\n    VP:   \"view_partition P D R\" and\n    WSC:  \"weakly_step_consistent P D R\" and\n    LR:   \"locally_respects P I D R\"\n  shows \"rel_induct P I D u \\<subseteq> R u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_induct P I D u \\<subseteq> R u", "proof (rule subsetI, simp add: rel_induct_def split_paired_all,\n erule rel_induct_aux.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a b u xs ys.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (ys, xs) \\<in> R u\n 2. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 3. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 4. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "fix u xs ys"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a b u xs ys.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (ys, xs) \\<in> R u\n 2. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 3. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 4. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "have \"\\<forall>u \\<in> range D. equiv (traces P) (R u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. equiv (traces P) (R u)", "using VP"], ["proof (prove)\nusing this:\n  view_partition P D R\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. equiv (traces P) (R u)", "by (simp add: view_partition_def)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D. equiv (traces P) (R u)\n\ngoal (4 subgoals):\n 1. \\<And>a b u xs ys.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (ys, xs) \\<in> R u\n 2. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 3. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 4. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D. equiv (traces P) (R u)\n\ngoal (4 subgoals):\n 1. \\<And>a b u xs ys.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (ys, xs) \\<in> R u\n 2. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 3. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 4. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "assume \"(u, xs, ys) \\<in> rel_induct_aux P I D\""], ["proof (state)\nthis:\n  (u, xs, ys) \\<in> rel_induct_aux P I D\n\ngoal (4 subgoals):\n 1. \\<And>a b u xs ys.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (ys, xs) \\<in> R u\n 2. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 3. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 4. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "hence \"u \\<in> range D\""], ["proof (prove)\nusing this:\n  (u, xs, ys) \\<in> rel_induct_aux P I D\n\ngoal (1 subgoal):\n 1. u \\<in> range D", "by (rule rel_induct_aux.induct)"], ["proof (state)\nthis:\n  u \\<in> range D\n\ngoal (4 subgoals):\n 1. \\<And>a b u xs ys.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (ys, xs) \\<in> R u\n 2. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 3. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 4. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>u\\<in>range D. equiv (traces P) (R u)\n  u \\<in> range D", "have \"equiv (traces P) (R u)\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D. equiv (traces P) (R u)\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. equiv (traces P) (R u)", ".."], ["proof (state)\nthis:\n  equiv (traces P) (R u)\n\ngoal (4 subgoals):\n 1. \\<And>a b u xs ys.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (ys, xs) \\<in> R u\n 2. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 3. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 4. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "hence \"sym (R u)\""], ["proof (prove)\nusing this:\n  equiv (traces P) (R u)\n\ngoal (1 subgoal):\n 1. sym (R u)", "by (simp add: equiv_def)"], ["proof (state)\nthis:\n  sym (R u)\n\ngoal (4 subgoals):\n 1. \\<And>a b u xs ys.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (ys, xs) \\<in> R u\n 2. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 3. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 4. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  sym (R u)\n\ngoal (4 subgoals):\n 1. \\<And>a b u xs ys.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (ys, xs) \\<in> R u\n 2. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 3. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 4. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "assume \"(xs, ys) \\<in> R u\""], ["proof (state)\nthis:\n  (xs, ys) \\<in> R u\n\ngoal (4 subgoals):\n 1. \\<And>a b u xs ys.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (ys, xs) \\<in> R u\n 2. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 3. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 4. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  sym (R u)\n  (xs, ys) \\<in> R u", "show \"(ys, xs) \\<in> R u\""], ["proof (prove)\nusing this:\n  sym (R u)\n  (xs, ys) \\<in> R u\n\ngoal (1 subgoal):\n 1. (ys, xs) \\<in> R u", "by (rule symE)"], ["proof (state)\nthis:\n  (ys, xs) \\<in> R u\n\ngoal (3 subgoals):\n 1. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 2. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 3. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 2. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 3. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "fix u xs ys zs"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 2. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 3. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "have \"\\<forall>u \\<in> range D. equiv (traces P) (R u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. equiv (traces P) (R u)", "using VP"], ["proof (prove)\nusing this:\n  view_partition P D R\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. equiv (traces P) (R u)", "by (simp add: view_partition_def)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D. equiv (traces P) (R u)\n\ngoal (3 subgoals):\n 1. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 2. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 3. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D. equiv (traces P) (R u)\n\ngoal (3 subgoals):\n 1. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 2. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 3. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "assume \"(u, xs, ys) \\<in> rel_induct_aux P I D\""], ["proof (state)\nthis:\n  (u, xs, ys) \\<in> rel_induct_aux P I D\n\ngoal (3 subgoals):\n 1. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 2. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 3. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "hence \"u \\<in> range D\""], ["proof (prove)\nusing this:\n  (u, xs, ys) \\<in> rel_induct_aux P I D\n\ngoal (1 subgoal):\n 1. u \\<in> range D", "by (rule rel_induct_aux.induct)"], ["proof (state)\nthis:\n  u \\<in> range D\n\ngoal (3 subgoals):\n 1. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 2. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 3. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>u\\<in>range D. equiv (traces P) (R u)\n  u \\<in> range D", "have \"equiv (traces P) (R u)\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D. equiv (traces P) (R u)\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. equiv (traces P) (R u)", ".."], ["proof (state)\nthis:\n  equiv (traces P) (R u)\n\ngoal (3 subgoals):\n 1. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 2. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 3. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "hence \"trans (R u)\""], ["proof (prove)\nusing this:\n  equiv (traces P) (R u)\n\ngoal (1 subgoal):\n 1. trans (R u)", "by (simp add: equiv_def)"], ["proof (state)\nthis:\n  trans (R u)\n\ngoal (3 subgoals):\n 1. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 2. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 3. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  trans (R u)\n\ngoal (3 subgoals):\n 1. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 2. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 3. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "assume \"(xs, ys) \\<in> R u\" and \"(ys, zs) \\<in> R u\""], ["proof (state)\nthis:\n  (xs, ys) \\<in> R u\n  (ys, zs) \\<in> R u\n\ngoal (3 subgoals):\n 1. \\<And>a b u xs ys zs.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (u, ys, zs) \\<in> rel_induct_aux P I D; (ys, zs) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (xs, zs) \\<in> R u\n 2. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 3. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  trans (R u)\n  (xs, ys) \\<in> R u\n  (ys, zs) \\<in> R u", "show \"(xs, zs) \\<in> R u\""], ["proof (prove)\nusing this:\n  trans (R u)\n  (xs, ys) \\<in> R u\n  (ys, zs) \\<in> R u\n\ngoal (1 subgoal):\n 1. (xs, zs) \\<in> R u", "by (rule transE)"], ["proof (state)\nthis:\n  (xs, zs) \\<in> R u\n\ngoal (2 subgoals):\n 1. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 2. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 2. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "fix u xs ys x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 2. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "have \"\\<forall>u \\<in> range D. \\<forall>xs ys x.\n    (xs, ys) \\<in> R u \\<inter> R (D x) \\<and> x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n    (xs @ [x], ys @ [x]) \\<in> R u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D.\n       \\<forall>xs ys x.\n          (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n          x \\<in> next_events P xs \\<inter>\n                  next_events P ys \\<longrightarrow>\n          (xs @ [x], ys @ [x]) \\<in> R u", "using WSC"], ["proof (prove)\nusing this:\n  weakly_step_consistent P D R\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D.\n       \\<forall>xs ys x.\n          (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n          x \\<in> next_events P xs \\<inter>\n                  next_events P ys \\<longrightarrow>\n          (xs @ [x], ys @ [x]) \\<in> R u", "by (simp add: weakly_step_consistent_def)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs ys x.\n        (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n        x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n        (xs @ [x], ys @ [x]) \\<in> R u\n\ngoal (2 subgoals):\n 1. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 2. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs ys x.\n        (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n        x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n        (xs @ [x], ys @ [x]) \\<in> R u\n\ngoal (2 subgoals):\n 1. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 2. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "assume \"(u, xs, ys) \\<in> rel_induct_aux P I D\""], ["proof (state)\nthis:\n  (u, xs, ys) \\<in> rel_induct_aux P I D\n\ngoal (2 subgoals):\n 1. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 2. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "hence \"u \\<in> range D\""], ["proof (prove)\nusing this:\n  (u, xs, ys) \\<in> rel_induct_aux P I D\n\ngoal (1 subgoal):\n 1. u \\<in> range D", "by (rule rel_induct_aux.induct)"], ["proof (state)\nthis:\n  u \\<in> range D\n\ngoal (2 subgoals):\n 1. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 2. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs ys x.\n        (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n        x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n        (xs @ [x], ys @ [x]) \\<in> R u\n  u \\<in> range D", "have \"\\<forall>xs ys x.\n    (xs, ys) \\<in> R u \\<inter> R (D x) \\<and> x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n    (xs @ [x], ys @ [x]) \\<in> R u\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs ys x.\n        (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n        x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n        (xs @ [x], ys @ [x]) \\<in> R u\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. \\<forall>xs ys x.\n       (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n       x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n       (xs @ [x], ys @ [x]) \\<in> R u", ".."], ["proof (state)\nthis:\n  \\<forall>xs ys x.\n     (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n     x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n     (xs @ [x], ys @ [x]) \\<in> R u\n\ngoal (2 subgoals):\n 1. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 2. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "hence \"(xs, ys) \\<in> R u \\<inter> R (D x) \\<and> x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n    (xs @ [x], ys @ [x]) \\<in> R u\""], ["proof (prove)\nusing this:\n  \\<forall>xs ys x.\n     (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n     x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n     (xs @ [x], ys @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n    x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n    (xs @ [x], ys @ [x]) \\<in> R u", "by blast"], ["proof (state)\nthis:\n  (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n  x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n  (xs @ [x], ys @ [x]) \\<in> R u\n\ngoal (2 subgoals):\n 1. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 2. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n  x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n  (xs @ [x], ys @ [x]) \\<in> R u\n\ngoal (2 subgoals):\n 1. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 2. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "assume\n    \"(xs, ys) \\<in> R u\" and\n    \"(xs, ys) \\<in> R (D x)\" and\n    \"x \\<in> next_events P xs \\<inter> next_events P ys\""], ["proof (state)\nthis:\n  (xs, ys) \\<in> R u\n  (xs, ys) \\<in> R (D x)\n  x \\<in> next_events P xs \\<inter> next_events P ys\n\ngoal (2 subgoals):\n 1. \\<And>a b u xs ys x.\n       \\<lbrakk>(u, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R u;\n        (D x, xs, ys) \\<in> rel_induct_aux P I D; (xs, ys) \\<in> R (D x);\n        x \\<in> next_events P xs \\<inter> next_events P ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], ys @ [x]) \\<in> R u\n 2. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n  x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n  (xs @ [x], ys @ [x]) \\<in> R u\n  (xs, ys) \\<in> R u\n  (xs, ys) \\<in> R (D x)\n  x \\<in> next_events P xs \\<inter> next_events P ys", "show \"(xs @ [x], ys @ [x]) \\<in> R u\""], ["proof (prove)\nusing this:\n  (xs, ys) \\<in> R u \\<inter> R (D x) \\<and>\n  x \\<in> next_events P xs \\<inter> next_events P ys \\<longrightarrow>\n  (xs @ [x], ys @ [x]) \\<in> R u\n  (xs, ys) \\<in> R u\n  (xs, ys) \\<in> R (D x)\n  x \\<in> next_events P xs \\<inter> next_events P ys\n\ngoal (1 subgoal):\n 1. (xs @ [x], ys @ [x]) \\<in> R u", "by simp"], ["proof (state)\nthis:\n  (xs @ [x], ys @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "fix u xs x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "have \"\\<forall>u \\<in> range D. \\<forall>xs x.\n    (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow> (xs, xs @ [x]) \\<in> R u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D.\n       \\<forall>xs x.\n          (D x, u) \\<notin> I \\<and>\n          x \\<in> next_events P xs \\<longrightarrow>\n          (xs, xs @ [x]) \\<in> R u", "using LR"], ["proof (prove)\nusing this:\n  locally_respects P I D R\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D.\n       \\<forall>xs x.\n          (D x, u) \\<notin> I \\<and>\n          x \\<in> next_events P xs \\<longrightarrow>\n          (xs, xs @ [x]) \\<in> R u", "by (simp add: locally_respects_def)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs x.\n        (D x, u) \\<notin> I \\<and>\n        x \\<in> next_events P xs \\<longrightarrow>\n        (xs, xs @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs x.\n        (D x, u) \\<notin> I \\<and>\n        x \\<in> next_events P xs \\<longrightarrow>\n        (xs, xs @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "assume \"u \\<in> range D\""], ["proof (state)\nthis:\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs x.\n        (D x, u) \\<notin> I \\<and>\n        x \\<in> next_events P xs \\<longrightarrow>\n        (xs, xs @ [x]) \\<in> R u\n  u \\<in> range D", "have \"\\<forall>xs x.\n    (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow> (xs, xs @ [x]) \\<in> R u\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs x.\n        (D x, u) \\<notin> I \\<and>\n        x \\<in> next_events P xs \\<longrightarrow>\n        (xs, xs @ [x]) \\<in> R u\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. \\<forall>xs x.\n       (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow>\n       (xs, xs @ [x]) \\<in> R u", ".."], ["proof (state)\nthis:\n  \\<forall>xs x.\n     (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow>\n     (xs, xs @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "hence \"(D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow> (xs, xs @ [x]) \\<in> R u\""], ["proof (prove)\nusing this:\n  \\<forall>xs x.\n     (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow>\n     (xs, xs @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow>\n    (xs, xs @ [x]) \\<in> R u", "by blast"], ["proof (state)\nthis:\n  (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "moreover"], ["proof (state)\nthis:\n  (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [x]) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "assume \"(D x, u) \\<notin> I\" and \"x \\<in> next_events P xs\""], ["proof (state)\nthis:\n  (D x, u) \\<notin> I\n  x \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. \\<And>a b u x xs.\n       \\<lbrakk>u \\<in> range D; (D x, u) \\<notin> I;\n        x \\<in> next_events P xs\\<rbrakk>\n       \\<Longrightarrow> (xs, xs @ [x]) \\<in> R u", "ultimately"], ["proof (chain)\npicking this:\n  (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [x]) \\<in> R u\n  (D x, u) \\<notin> I\n  x \\<in> next_events P xs", "show \"(xs, xs @ [x]) \\<in> R u\""], ["proof (prove)\nusing this:\n  (D x, u) \\<notin> I \\<and> x \\<in> next_events P xs \\<longrightarrow>\n  (xs, xs @ [x]) \\<in> R u\n  (D x, u) \\<notin> I\n  x \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. (xs, xs @ [x]) \\<in> R u", "by simp"], ["proof (state)\nthis:\n  (xs, xs @ [x]) \\<in> R u\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n\\null\n\nThe next step consists of the definition of a trace set \\<open>T\\<^sub>c\\<close>, the corresponding trace set\nprocess \\<open>P\\<^sub>c\\<close> (cf. \\cite{R2}), and a reflexive, intransitive noninterference policy \\<open>I\\<^sub>c\\<close>\nfor this process, where subscript \"c\" stands for \"counterexample\". As event-domain map, the identity\nfunction is used, which explains why the policy is defined over events themselves.\n\n\\null\n\\<close>"], ["", "datatype event\\<^sub>c = a\\<^sub>c | b\\<^sub>c | c\\<^sub>c"], ["", "definition T\\<^sub>c :: \"event\\<^sub>c list set\" where\n\"T\\<^sub>c \\<equiv> {[],\n  [a\\<^sub>c], [a\\<^sub>c, b\\<^sub>c], [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c, a\\<^sub>c],\n  [b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c], [b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]}\""], ["", "definition P\\<^sub>c :: \"event\\<^sub>c process\" where\n\"P\\<^sub>c \\<equiv> ts_process T\\<^sub>c\""], ["", "definition I\\<^sub>c :: \"(event\\<^sub>c \\<times> event\\<^sub>c) set\" where\n\"I\\<^sub>c \\<equiv> {(a\\<^sub>c, a\\<^sub>c), (b\\<^sub>c, b\\<^sub>c), (b\\<^sub>c, c\\<^sub>c), (c\\<^sub>c, c\\<^sub>c), (c\\<^sub>c, a\\<^sub>c)}\""], ["", "text \\<open>\n\\null\n\nProcess @{term P\\<^sub>c} can be shown to be secure with respect to policy @{term I\\<^sub>c}. This result can be\nobtained by applying the Ipurge Unwinding Theorem, in the version for trace set processes \\cite{R2},\nand then performing an exhaustive case distinction over all traces and domains, which obviously is\npossible by virtue of their finiteness.\n\nNevertheless, @{term P\\<^sub>c} and @{term I\\<^sub>c} are such that there exists no domain-relation map satisfying\nthe assumptions of the Generic Unwinding Theorem. A proof \\emph{ad absurdum} is given, based on the\nfact that the pair of traces @{term \"([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\"} can be shown to be contained in\nthe image of @{term a\\<^sub>c} under the \"minimum\" domain-relation map \\<open>rel_induct\\<close>. Therefore, it\nwould also be contained in the image of @{term a\\<^sub>c} under a map satisfying the assumptions of the\nGeneric Unwinding Theorem, so that according to weak future consistency, @{term a\\<^sub>c} should be a\npossible subsequent event for trace @{term \"[a\\<^sub>c, b\\<^sub>c, c\\<^sub>c]\"} just in case it were such for trace\n@{term \"[b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]\"}. However, this conclusion contradicts the fact that @{term a\\<^sub>c} is a possible\nsubsequent event for the former trace only.\n\n\\null\n\\<close>"], ["", "lemma counterexample_trace_set:\n \"trace_set T\\<^sub>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace_set T\\<^sub>c", "by (simp add: trace_set_def T\\<^sub>c_def)"], ["", "lemma counterexample_next_events_1:\n \"(x \\<in> next_events (ts_process T\\<^sub>c) xs) = (xs @ [x] \\<in> T\\<^sub>c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> next_events (ts_process T\\<^sub>c) xs) =\n    (xs @ [x] \\<in> T\\<^sub>c)", "by (rule ts_process_next_events, rule counterexample_trace_set)"], ["", "lemma counterexample_next_events_2:\n \"(x \\<in> next_events P\\<^sub>c xs) = (xs @ [x] \\<in> T\\<^sub>c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> next_events P\\<^sub>c xs) = (xs @ [x] \\<in> T\\<^sub>c)", "by (subst P\\<^sub>c_def, rule counterexample_next_events_1)"], ["", "lemma counterexample_secure:\n \"secure P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. secure P\\<^sub>c I\\<^sub>c id", "proof (simp add: P\\<^sub>c_def ts_ipurge_unwinding [OF counterexample_trace_set]\n dfc_equals_dwfc_rel_ipurge [symmetric] d_future_consistent_def, (rule allI)+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u xs ys.\n       (xs, ys)\n       \\<in> rel_ipurge (ts_process T\\<^sub>c) I\\<^sub>c id\n              u \\<longrightarrow>\n       (xs \\<in> traces (ts_process T\\<^sub>c)) =\n       (ys \\<in> traces (ts_process T\\<^sub>c)) \\<and>\n       next_dom_events (ts_process T\\<^sub>c) id u xs =\n       next_dom_events (ts_process T\\<^sub>c) id u ys", "fix u xs ys"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u xs ys.\n       (xs, ys)\n       \\<in> rel_ipurge (ts_process T\\<^sub>c) I\\<^sub>c id\n              u \\<longrightarrow>\n       (xs \\<in> traces (ts_process T\\<^sub>c)) =\n       (ys \\<in> traces (ts_process T\\<^sub>c)) \\<and>\n       next_dom_events (ts_process T\\<^sub>c) id u xs =\n       next_dom_events (ts_process T\\<^sub>c) id u ys", "show \"(xs, ys) \\<in> rel_ipurge (ts_process T\\<^sub>c) I\\<^sub>c id u \\<longrightarrow>\n    (xs \\<in> traces (ts_process T\\<^sub>c)) = (ys \\<in> traces (ts_process T\\<^sub>c)) \\<and>\n    next_dom_events (ts_process T\\<^sub>c) id u xs =\n    next_dom_events (ts_process T\\<^sub>c) id u ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, ys)\n    \\<in> rel_ipurge (ts_process T\\<^sub>c) I\\<^sub>c id u \\<longrightarrow>\n    (xs \\<in> traces (ts_process T\\<^sub>c)) =\n    (ys \\<in> traces (ts_process T\\<^sub>c)) \\<and>\n    next_dom_events (ts_process T\\<^sub>c) id u xs =\n    next_dom_events (ts_process T\\<^sub>c) id u ys", "proof (simp add: rel_ipurge_def ts_process_traces [OF counterexample_trace_set]\n   next_dom_events_def counterexample_next_events_1)"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<in> T\\<^sub>c \\<and>\n    ys \\<in> T\\<^sub>c \\<and>\n    ipurge_tr_rev I\\<^sub>c id u xs =\n    ipurge_tr_rev I\\<^sub>c id u ys \\<longrightarrow>\n    {x. u = x \\<and> xs @ [x] \\<in> T\\<^sub>c} =\n    {x. u = x \\<and> ys @ [x] \\<in> T\\<^sub>c}", "show \"xs \\<in> T\\<^sub>c \\<and> ys \\<in> T\\<^sub>c \\<and>\n      ipurge_tr_rev I\\<^sub>c id u xs = ipurge_tr_rev I\\<^sub>c id u ys \\<longrightarrow>\n      {x. u = x \\<and> xs @ [x] \\<in> T\\<^sub>c} = {x. u = x \\<and> ys @ [x] \\<in> T\\<^sub>c}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> T\\<^sub>c \\<and>\n    ys \\<in> T\\<^sub>c \\<and>\n    ipurge_tr_rev I\\<^sub>c id u xs =\n    ipurge_tr_rev I\\<^sub>c id u ys \\<longrightarrow>\n    {x. u = x \\<and> xs @ [x] \\<in> T\\<^sub>c} =\n    {x. u = x \\<and> ys @ [x] \\<in> T\\<^sub>c}", "(* The following proof step performs an exhaustive case distinction over all traces and domains,\n       and then could take ca. 20 seconds to be completed. *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> T\\<^sub>c \\<and>\n    ys \\<in> T\\<^sub>c \\<and>\n    ipurge_tr_rev I\\<^sub>c id u xs =\n    ipurge_tr_rev I\\<^sub>c id u ys \\<longrightarrow>\n    {x. u = x \\<and> xs @ [x] \\<in> T\\<^sub>c} =\n    {x. u = x \\<and> ys @ [x] \\<in> T\\<^sub>c}", "apply (simp add: T\\<^sub>c_def I\\<^sub>c_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs = [] \\<or>\n     xs = [a\\<^sub>c] \\<or>\n     xs = [a\\<^sub>c, b\\<^sub>c] \\<or>\n     xs = [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] \\<or>\n     xs = [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c, a\\<^sub>c] \\<or>\n     xs = [b\\<^sub>c] \\<or>\n     xs = [b\\<^sub>c, a\\<^sub>c] \\<or>\n     xs = [b\\<^sub>c, c\\<^sub>c] \\<or>\n     xs = [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]) \\<and>\n    (ys = [] \\<or>\n     ys = [a\\<^sub>c] \\<or>\n     ys = [a\\<^sub>c, b\\<^sub>c] \\<or>\n     ys = [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] \\<or>\n     ys = [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c, a\\<^sub>c] \\<or>\n     ys = [b\\<^sub>c] \\<or>\n     ys = [b\\<^sub>c, a\\<^sub>c] \\<or>\n     ys = [b\\<^sub>c, c\\<^sub>c] \\<or>\n     ys = [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]) \\<and>\n    ipurge_tr_rev\n     {(a\\<^sub>c, a\\<^sub>c), (b\\<^sub>c, b\\<^sub>c),\n      (b\\<^sub>c, c\\<^sub>c), (c\\<^sub>c, c\\<^sub>c),\n      (c\\<^sub>c, a\\<^sub>c)}\n     id u xs =\n    ipurge_tr_rev\n     {(a\\<^sub>c, a\\<^sub>c), (b\\<^sub>c, b\\<^sub>c),\n      (b\\<^sub>c, c\\<^sub>c), (c\\<^sub>c, c\\<^sub>c),\n      (c\\<^sub>c, a\\<^sub>c)}\n     id u ys \\<longrightarrow>\n    {x. u = x \\<and>\n        (xs = [] \\<and> x = a\\<^sub>c \\<or>\n         xs = [a\\<^sub>c] \\<and> x = b\\<^sub>c \\<or>\n         xs = [a\\<^sub>c, b\\<^sub>c] \\<and> x = c\\<^sub>c \\<or>\n         xs = [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] \\<and> x = a\\<^sub>c \\<or>\n         xs = [] \\<and> x = b\\<^sub>c \\<or>\n         xs = [b\\<^sub>c] \\<and> x = a\\<^sub>c \\<or>\n         xs = [b\\<^sub>c] \\<and> x = c\\<^sub>c \\<or>\n         xs = [b\\<^sub>c, a\\<^sub>c] \\<and> x = c\\<^sub>c)} =\n    {x. u = x \\<and>\n        (ys = [] \\<and> x = a\\<^sub>c \\<or>\n         ys = [a\\<^sub>c] \\<and> x = b\\<^sub>c \\<or>\n         ys = [a\\<^sub>c, b\\<^sub>c] \\<and> x = c\\<^sub>c \\<or>\n         ys = [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] \\<and> x = a\\<^sub>c \\<or>\n         ys = [] \\<and> x = b\\<^sub>c \\<or>\n         ys = [b\\<^sub>c] \\<and> x = a\\<^sub>c \\<or>\n         ys = [b\\<^sub>c] \\<and> x = c\\<^sub>c \\<or>\n         ys = [b\\<^sub>c, a\\<^sub>c] \\<and> x = c\\<^sub>c)}", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs = [] \\<or>\n             xs = [a\\<^sub>c] \\<or>\n             xs = [a\\<^sub>c, b\\<^sub>c] \\<or>\n             xs = [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] \\<or>\n             xs = [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c, a\\<^sub>c] \\<or>\n             xs = [b\\<^sub>c] \\<or>\n             xs = [b\\<^sub>c, a\\<^sub>c] \\<or>\n             xs = [b\\<^sub>c, c\\<^sub>c] \\<or>\n             xs = [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c];\n     ys = [] \\<or>\n     ys = [a\\<^sub>c] \\<or>\n     ys = [a\\<^sub>c, b\\<^sub>c] \\<or>\n     ys = [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] \\<or>\n     ys = [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c, a\\<^sub>c] \\<or>\n     ys = [b\\<^sub>c] \\<or>\n     ys = [b\\<^sub>c, a\\<^sub>c] \\<or>\n     ys = [b\\<^sub>c, c\\<^sub>c] \\<or>\n     ys = [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c];\n     ipurge_tr_rev\n      {(a\\<^sub>c, a\\<^sub>c), (b\\<^sub>c, b\\<^sub>c),\n       (b\\<^sub>c, c\\<^sub>c), (c\\<^sub>c, c\\<^sub>c),\n       (c\\<^sub>c, a\\<^sub>c)}\n      id u xs =\n     ipurge_tr_rev\n      {(a\\<^sub>c, a\\<^sub>c), (b\\<^sub>c, b\\<^sub>c),\n       (b\\<^sub>c, c\\<^sub>c), (c\\<^sub>c, c\\<^sub>c),\n       (c\\<^sub>c, a\\<^sub>c)}\n      id u ys\\<rbrakk>\n    \\<Longrightarrow> {x. u = x \\<and>\n                          (xs = [] \\<and> x = a\\<^sub>c \\<or>\n                           xs = [a\\<^sub>c] \\<and> x = b\\<^sub>c \\<or>\n                           xs = [a\\<^sub>c, b\\<^sub>c] \\<and>\n                           x = c\\<^sub>c \\<or>\n                           xs = [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] \\<and>\n                           x = a\\<^sub>c \\<or>\n                           xs = [] \\<and> x = b\\<^sub>c \\<or>\n                           xs = [b\\<^sub>c] \\<and> x = a\\<^sub>c \\<or>\n                           xs = [b\\<^sub>c] \\<and> x = c\\<^sub>c \\<or>\n                           xs = [b\\<^sub>c, a\\<^sub>c] \\<and>\n                           x = c\\<^sub>c)} =\n                      {x. u = x \\<and>\n                          (ys = [] \\<and> x = a\\<^sub>c \\<or>\n                           ys = [a\\<^sub>c] \\<and> x = b\\<^sub>c \\<or>\n                           ys = [a\\<^sub>c, b\\<^sub>c] \\<and>\n                           x = c\\<^sub>c \\<or>\n                           ys = [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] \\<and>\n                           x = a\\<^sub>c \\<or>\n                           ys = [] \\<and> x = b\\<^sub>c \\<or>\n                           ys = [b\\<^sub>c] \\<and> x = a\\<^sub>c \\<or>\n                           ys = [b\\<^sub>c] \\<and> x = c\\<^sub>c \\<or>\n                           ys = [b\\<^sub>c, a\\<^sub>c] \\<and>\n                           x = c\\<^sub>c)}", "apply (cases u; elim disjE; simp; blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  xs \\<in> T\\<^sub>c \\<and>\n  ys \\<in> T\\<^sub>c \\<and>\n  ipurge_tr_rev I\\<^sub>c id u xs =\n  ipurge_tr_rev I\\<^sub>c id u ys \\<longrightarrow>\n  {x. u = x \\<and> xs @ [x] \\<in> T\\<^sub>c} =\n  {x. u = x \\<and> ys @ [x] \\<in> T\\<^sub>c}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs, ys)\n  \\<in> rel_ipurge (ts_process T\\<^sub>c) I\\<^sub>c id u \\<longrightarrow>\n  (xs \\<in> traces (ts_process T\\<^sub>c)) =\n  (ys \\<in> traces (ts_process T\\<^sub>c)) \\<and>\n  next_dom_events (ts_process T\\<^sub>c) id u xs =\n  next_dom_events (ts_process T\\<^sub>c) id u ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma counterexample_not_gu_condition_aux:\n \"([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]) \\<in> rel_induct P\\<^sub>c I\\<^sub>c id a\\<^sub>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n    \\<in> rel_induct P\\<^sub>c I\\<^sub>c id a\\<^sub>c", "proof (simp add: rel_induct_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c],\n     [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have \"(a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have A: \"a\\<^sub>c \\<in> range id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a\\<^sub>c \\<in> range id", "by simp"], ["proof (state)\nthis:\n  a\\<^sub>c \\<in> range id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "moreover"], ["proof (state)\nthis:\n  a\\<^sub>c \\<in> range id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have B: \"(id b\\<^sub>c, a\\<^sub>c) \\<notin> I\\<^sub>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (id b\\<^sub>c, a\\<^sub>c) \\<notin> I\\<^sub>c", "by (simp add: I\\<^sub>c_def)"], ["proof (state)\nthis:\n  (id b\\<^sub>c, a\\<^sub>c) \\<notin> I\\<^sub>c\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "moreover"], ["proof (state)\nthis:\n  (id b\\<^sub>c, a\\<^sub>c) \\<notin> I\\<^sub>c\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have \"b\\<^sub>c \\<in> next_events P\\<^sub>c []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b\\<^sub>c \\<in> next_events P\\<^sub>c []", "by (simp add: counterexample_next_events_2 T\\<^sub>c_def)"], ["proof (state)\nthis:\n  b\\<^sub>c \\<in> next_events P\\<^sub>c []\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "ultimately"], ["proof (chain)\npicking this:\n  a\\<^sub>c \\<in> range id\n  (id b\\<^sub>c, a\\<^sub>c) \\<notin> I\\<^sub>c\n  b\\<^sub>c \\<in> next_events P\\<^sub>c []", "have \"(a\\<^sub>c, [], [] @ [b\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  a\\<^sub>c \\<in> range id\n  (id b\\<^sub>c, a\\<^sub>c) \\<notin> I\\<^sub>c\n  b\\<^sub>c \\<in> next_events P\\<^sub>c []\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [], [] @ [b\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by (rule rule_LR)"], ["proof (state)\nthis:\n  (a\\<^sub>c, [], [] @ [b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "hence C: \"(a\\<^sub>c, [], [b\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  (a\\<^sub>c, [], [] @ [b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [], [b\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by simp"], ["proof (state)\nthis:\n  (a\\<^sub>c, [], [b\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "moreover"], ["proof (state)\nthis:\n  (a\\<^sub>c, [], [b\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "from C"], ["proof (chain)\npicking this:\n  (a\\<^sub>c, [], [b\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have \"(id a\\<^sub>c, [], [b\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  (a\\<^sub>c, [], [b\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (id a\\<^sub>c, [], [b\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by simp"], ["proof (state)\nthis:\n  (id a\\<^sub>c, [], [b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "moreover"], ["proof (state)\nthis:\n  (id a\\<^sub>c, [], [b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have \"a\\<^sub>c \\<in> next_events P\\<^sub>c [] \\<inter> next_events P\\<^sub>c [b\\<^sub>c]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a\\<^sub>c\n    \\<in> next_events P\\<^sub>c [] \\<inter>\n          next_events P\\<^sub>c [b\\<^sub>c]", "by (simp add: counterexample_next_events_2 T\\<^sub>c_def)"], ["proof (state)\nthis:\n  a\\<^sub>c\n  \\<in> next_events P\\<^sub>c [] \\<inter> next_events P\\<^sub>c [b\\<^sub>c]\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "ultimately"], ["proof (chain)\npicking this:\n  (a\\<^sub>c, [], [b\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n  (id a\\<^sub>c, [], [b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n  a\\<^sub>c\n  \\<in> next_events P\\<^sub>c [] \\<inter> next_events P\\<^sub>c [b\\<^sub>c]", "have \"(a\\<^sub>c, [] @ [a\\<^sub>c], [b\\<^sub>c] @ [a\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  (a\\<^sub>c, [], [b\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n  (id a\\<^sub>c, [], [b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n  a\\<^sub>c\n  \\<in> next_events P\\<^sub>c [] \\<inter> next_events P\\<^sub>c [b\\<^sub>c]\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [] @ [a\\<^sub>c], [b\\<^sub>c] @ [a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by (rule rule_WSC)"], ["proof (state)\nthis:\n  (a\\<^sub>c, [] @ [a\\<^sub>c], [b\\<^sub>c] @ [a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "hence D: \"(a\\<^sub>c, [a\\<^sub>c], [b\\<^sub>c, a\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  (a\\<^sub>c, [] @ [a\\<^sub>c], [b\\<^sub>c] @ [a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by simp"], ["proof (state)\nthis:\n  (a\\<^sub>c, [a\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have \"b\\<^sub>c \\<in> next_events P\\<^sub>c [a\\<^sub>c]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b\\<^sub>c \\<in> next_events P\\<^sub>c [a\\<^sub>c]", "by (simp add: counterexample_next_events_2 T\\<^sub>c_def)"], ["proof (state)\nthis:\n  b\\<^sub>c \\<in> next_events P\\<^sub>c [a\\<^sub>c]\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "with A and B"], ["proof (chain)\npicking this:\n  a\\<^sub>c \\<in> range id\n  (id b\\<^sub>c, a\\<^sub>c) \\<notin> I\\<^sub>c\n  b\\<^sub>c \\<in> next_events P\\<^sub>c [a\\<^sub>c]", "have \"(a\\<^sub>c, [a\\<^sub>c], [a\\<^sub>c] @ [b\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  a\\<^sub>c \\<in> range id\n  (id b\\<^sub>c, a\\<^sub>c) \\<notin> I\\<^sub>c\n  b\\<^sub>c \\<in> next_events P\\<^sub>c [a\\<^sub>c]\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c], [a\\<^sub>c] @ [b\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by (rule rule_LR)"], ["proof (state)\nthis:\n  (a\\<^sub>c, [a\\<^sub>c], [a\\<^sub>c] @ [b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "hence \"(a\\<^sub>c, [a\\<^sub>c], [a\\<^sub>c, b\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  (a\\<^sub>c, [a\\<^sub>c], [a\\<^sub>c] @ [b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c], [a\\<^sub>c, b\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by simp"], ["proof (state)\nthis:\n  (a\\<^sub>c, [a\\<^sub>c], [a\\<^sub>c, b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "hence \"(a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [a\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  (a\\<^sub>c, [a\\<^sub>c], [a\\<^sub>c, b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by (rule rule_sym)"], ["proof (state)\nthis:\n  (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "thus ?thesis"], ["proof (prove)\nusing this:\n  (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "using D"], ["proof (prove)\nusing this:\n  (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n  (a\\<^sub>c, [a\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by (rule rule_trans)"], ["proof (state)\nthis:\n  (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c],\n     [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "moreover"], ["proof (state)\nthis:\n  (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c],\n     [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have \"(id c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (id c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "proof simp"], ["proof (state)\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have A: \"c\\<^sub>c \\<in> range id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c\\<^sub>c \\<in> range id", "by simp"], ["proof (state)\nthis:\n  c\\<^sub>c \\<in> range id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "moreover"], ["proof (state)\nthis:\n  c\\<^sub>c \\<in> range id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have B: \"(id a\\<^sub>c, c\\<^sub>c) \\<notin> I\\<^sub>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (id a\\<^sub>c, c\\<^sub>c) \\<notin> I\\<^sub>c", "by (simp add: I\\<^sub>c_def)"], ["proof (state)\nthis:\n  (id a\\<^sub>c, c\\<^sub>c) \\<notin> I\\<^sub>c\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "moreover"], ["proof (state)\nthis:\n  (id a\\<^sub>c, c\\<^sub>c) \\<notin> I\\<^sub>c\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have C: \"a\\<^sub>c \\<in> next_events P\\<^sub>c []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a\\<^sub>c \\<in> next_events P\\<^sub>c []", "by (simp add: counterexample_next_events_2 T\\<^sub>c_def)"], ["proof (state)\nthis:\n  a\\<^sub>c \\<in> next_events P\\<^sub>c []\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "ultimately"], ["proof (chain)\npicking this:\n  c\\<^sub>c \\<in> range id\n  (id a\\<^sub>c, c\\<^sub>c) \\<notin> I\\<^sub>c\n  a\\<^sub>c \\<in> next_events P\\<^sub>c []", "have \"(c\\<^sub>c, [], [] @ [a\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  c\\<^sub>c \\<in> range id\n  (id a\\<^sub>c, c\\<^sub>c) \\<notin> I\\<^sub>c\n  a\\<^sub>c \\<in> next_events P\\<^sub>c []\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [], [] @ [a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by (rule rule_LR)"], ["proof (state)\nthis:\n  (c\\<^sub>c, [], [] @ [a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "hence D: \"(c\\<^sub>c, [], [a\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  (c\\<^sub>c, [], [] @ [a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [], [a\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by simp"], ["proof (state)\nthis:\n  (c\\<^sub>c, [], [a\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have \"b\\<^sub>c \\<in> range id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b\\<^sub>c \\<in> range id", "by simp"], ["proof (state)\nthis:\n  b\\<^sub>c \\<in> range id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "moreover"], ["proof (state)\nthis:\n  b\\<^sub>c \\<in> range id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have \"(id a\\<^sub>c, b\\<^sub>c) \\<notin> I\\<^sub>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (id a\\<^sub>c, b\\<^sub>c) \\<notin> I\\<^sub>c", "by (simp add: I\\<^sub>c_def)"], ["proof (state)\nthis:\n  (id a\\<^sub>c, b\\<^sub>c) \\<notin> I\\<^sub>c\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "ultimately"], ["proof (chain)\npicking this:\n  b\\<^sub>c \\<in> range id\n  (id a\\<^sub>c, b\\<^sub>c) \\<notin> I\\<^sub>c", "have \"(b\\<^sub>c, [], [] @ [a\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  b\\<^sub>c \\<in> range id\n  (id a\\<^sub>c, b\\<^sub>c) \\<notin> I\\<^sub>c\n\ngoal (1 subgoal):\n 1. (b\\<^sub>c, [], [] @ [a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "using C"], ["proof (prove)\nusing this:\n  b\\<^sub>c \\<in> range id\n  (id a\\<^sub>c, b\\<^sub>c) \\<notin> I\\<^sub>c\n  a\\<^sub>c \\<in> next_events P\\<^sub>c []\n\ngoal (1 subgoal):\n 1. (b\\<^sub>c, [], [] @ [a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by (rule rule_LR)"], ["proof (state)\nthis:\n  (b\\<^sub>c, [], [] @ [a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "hence \"(id b\\<^sub>c, [], [a\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  (b\\<^sub>c, [], [] @ [a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (id b\\<^sub>c, [], [a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by simp"], ["proof (state)\nthis:\n  (id b\\<^sub>c, [], [a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "moreover"], ["proof (state)\nthis:\n  (id b\\<^sub>c, [], [a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have \"b\\<^sub>c \\<in> next_events P\\<^sub>c [] \\<inter> next_events P\\<^sub>c [a\\<^sub>c]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b\\<^sub>c\n    \\<in> next_events P\\<^sub>c [] \\<inter>\n          next_events P\\<^sub>c [a\\<^sub>c]", "by (simp add: counterexample_next_events_2 T\\<^sub>c_def)"], ["proof (state)\nthis:\n  b\\<^sub>c\n  \\<in> next_events P\\<^sub>c [] \\<inter> next_events P\\<^sub>c [a\\<^sub>c]\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "ultimately"], ["proof (chain)\npicking this:\n  (id b\\<^sub>c, [], [a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n  b\\<^sub>c\n  \\<in> next_events P\\<^sub>c [] \\<inter> next_events P\\<^sub>c [a\\<^sub>c]", "have \"(c\\<^sub>c, [] @ [b\\<^sub>c], [a\\<^sub>c] @ [b\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  (id b\\<^sub>c, [], [a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n  b\\<^sub>c\n  \\<in> next_events P\\<^sub>c [] \\<inter> next_events P\\<^sub>c [a\\<^sub>c]\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [] @ [b\\<^sub>c], [a\\<^sub>c] @ [b\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by (rule rule_WSC [OF D])"], ["proof (state)\nthis:\n  (c\\<^sub>c, [] @ [b\\<^sub>c], [a\\<^sub>c] @ [b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "hence \"(c\\<^sub>c, [b\\<^sub>c], [a\\<^sub>c, b\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  (c\\<^sub>c, [] @ [b\\<^sub>c], [a\\<^sub>c] @ [b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [b\\<^sub>c], [a\\<^sub>c, b\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by simp"], ["proof (state)\nthis:\n  (c\\<^sub>c, [b\\<^sub>c], [a\\<^sub>c, b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "hence \"(c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  (c\\<^sub>c, [b\\<^sub>c], [a\\<^sub>c, b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by (rule rule_sym)"], ["proof (state)\nthis:\n  (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "moreover"], ["proof (state)\nthis:\n  (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have \"a\\<^sub>c \\<in> next_events P\\<^sub>c [b\\<^sub>c]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a\\<^sub>c \\<in> next_events P\\<^sub>c [b\\<^sub>c]", "by (simp add: counterexample_next_events_2 T\\<^sub>c_def)"], ["proof (state)\nthis:\n  a\\<^sub>c \\<in> next_events P\\<^sub>c [b\\<^sub>c]\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "with A and B"], ["proof (chain)\npicking this:\n  c\\<^sub>c \\<in> range id\n  (id a\\<^sub>c, c\\<^sub>c) \\<notin> I\\<^sub>c\n  a\\<^sub>c \\<in> next_events P\\<^sub>c [b\\<^sub>c]", "have \"(c\\<^sub>c, [b\\<^sub>c], [b\\<^sub>c] @ [a\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  c\\<^sub>c \\<in> range id\n  (id a\\<^sub>c, c\\<^sub>c) \\<notin> I\\<^sub>c\n  a\\<^sub>c \\<in> next_events P\\<^sub>c [b\\<^sub>c]\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [b\\<^sub>c], [b\\<^sub>c] @ [a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by (rule rule_LR)"], ["proof (state)\nthis:\n  (c\\<^sub>c, [b\\<^sub>c], [b\\<^sub>c] @ [a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "hence \"(c\\<^sub>c, [b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  (c\\<^sub>c, [b\\<^sub>c], [b\\<^sub>c] @ [a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by simp"], ["proof (state)\nthis:\n  (c\\<^sub>c, [b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "ultimately"], ["proof (chain)\npicking this:\n  (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n  (c\\<^sub>c, [b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "show \"(c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n  (c\\<^sub>c, [b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by (rule rule_trans)"], ["proof (state)\nthis:\n  (c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (id c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c],\n     [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "moreover"], ["proof (state)\nthis:\n  (id c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c],\n     [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "have \"c\\<^sub>c \\<in> next_events P\\<^sub>c [a\\<^sub>c, b\\<^sub>c] \\<inter> next_events P\\<^sub>c [b\\<^sub>c, a\\<^sub>c]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c\\<^sub>c\n    \\<in> next_events P\\<^sub>c [a\\<^sub>c, b\\<^sub>c] \\<inter>\n          next_events P\\<^sub>c [b\\<^sub>c, a\\<^sub>c]", "by (simp add: counterexample_next_events_2 T\\<^sub>c_def)"], ["proof (state)\nthis:\n  c\\<^sub>c\n  \\<in> next_events P\\<^sub>c [a\\<^sub>c, b\\<^sub>c] \\<inter>\n        next_events P\\<^sub>c [b\\<^sub>c, a\\<^sub>c]\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c],\n     [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "ultimately"], ["proof (chain)\npicking this:\n  (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n  (id c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n  c\\<^sub>c\n  \\<in> next_events P\\<^sub>c [a\\<^sub>c, b\\<^sub>c] \\<inter>\n        next_events P\\<^sub>c [b\\<^sub>c, a\\<^sub>c]", "have \"(a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c] @ [c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c] @ [c\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n  (id c\\<^sub>c, [a\\<^sub>c, b\\<^sub>c], [b\\<^sub>c, a\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n  c\\<^sub>c\n  \\<in> next_events P\\<^sub>c [a\\<^sub>c, b\\<^sub>c] \\<inter>\n        next_events P\\<^sub>c [b\\<^sub>c, a\\<^sub>c]\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c] @ [c\\<^sub>c],\n     [b\\<^sub>c, a\\<^sub>c] @ [c\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by (rule rule_WSC)"], ["proof (state)\nthis:\n  (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c] @ [c\\<^sub>c],\n   [b\\<^sub>c, a\\<^sub>c] @ [c\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c],\n     [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "thus \"(a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]) \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\""], ["proof (prove)\nusing this:\n  (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c] @ [c\\<^sub>c],\n   [b\\<^sub>c, a\\<^sub>c] @ [c\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal (1 subgoal):\n 1. (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c],\n     [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n    \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id", "by simp"], ["proof (state)\nthis:\n  (a\\<^sub>c, [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c],\n   [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n  \\<in> rel_induct_aux P\\<^sub>c I\\<^sub>c id\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma counterexample_not_gu_condition:\n \"\\<not> (\\<exists>R.  view_partition P\\<^sub>c id R \\<and>\n          weakly_future_consistent P\\<^sub>c I\\<^sub>c id R \\<and>\n          weakly_step_consistent P\\<^sub>c id R \\<and>\n          locally_respects P\\<^sub>c I\\<^sub>c id R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>R.\n       view_partition P\\<^sub>c id R \\<and>\n       weakly_future_consistent P\\<^sub>c I\\<^sub>c id R \\<and>\n       weakly_step_consistent P\\<^sub>c id R \\<and>\n       locally_respects P\\<^sub>c I\\<^sub>c id R", "proof (rule notI, erule exE, (erule conjE)+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       \\<lbrakk>view_partition P\\<^sub>c id R;\n        weakly_future_consistent P\\<^sub>c I\\<^sub>c id R;\n        weakly_step_consistent P\\<^sub>c id R;\n        locally_respects P\\<^sub>c I\\<^sub>c id R\\<rbrakk>\n       \\<Longrightarrow> False", "fix R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       \\<lbrakk>view_partition P\\<^sub>c id R;\n        weakly_future_consistent P\\<^sub>c I\\<^sub>c id R;\n        weakly_step_consistent P\\<^sub>c id R;\n        locally_respects P\\<^sub>c I\\<^sub>c id R\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"weakly_future_consistent P\\<^sub>c I\\<^sub>c id R\""], ["proof (state)\nthis:\n  weakly_future_consistent P\\<^sub>c I\\<^sub>c id R\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       \\<lbrakk>view_partition P\\<^sub>c id R;\n        weakly_future_consistent P\\<^sub>c I\\<^sub>c id R;\n        weakly_step_consistent P\\<^sub>c id R;\n        locally_respects P\\<^sub>c I\\<^sub>c id R\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"\\<forall>u \\<in> range id \\<inter> (-I\\<^sub>c) `` range id. \\<forall>xs ys. (xs, ys) \\<in> R u \\<longrightarrow>\n    next_dom_events P\\<^sub>c id u xs = next_dom_events P\\<^sub>c id u ys\""], ["proof (prove)\nusing this:\n  weakly_future_consistent P\\<^sub>c I\\<^sub>c id R\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range id \\<inter> (- I\\<^sub>c) `` range id.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          next_dom_events P\\<^sub>c id u xs =\n          next_dom_events P\\<^sub>c id u ys", "by (simp add: weakly_future_consistent_def)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range id \\<inter> (- I\\<^sub>c) `` range id.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P\\<^sub>c id u xs =\n        next_dom_events P\\<^sub>c id u ys\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       \\<lbrakk>view_partition P\\<^sub>c id R;\n        weakly_future_consistent P\\<^sub>c I\\<^sub>c id R;\n        weakly_step_consistent P\\<^sub>c id R;\n        locally_respects P\\<^sub>c I\\<^sub>c id R\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range id \\<inter> (- I\\<^sub>c) `` range id.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P\\<^sub>c id u xs =\n        next_dom_events P\\<^sub>c id u ys\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       \\<lbrakk>view_partition P\\<^sub>c id R;\n        weakly_future_consistent P\\<^sub>c I\\<^sub>c id R;\n        weakly_step_consistent P\\<^sub>c id R;\n        locally_respects P\\<^sub>c I\\<^sub>c id R\\<rbrakk>\n       \\<Longrightarrow> False", "have \"a\\<^sub>c \\<in> range id \\<inter> (-I\\<^sub>c) `` range id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a\\<^sub>c \\<in> range id \\<inter> (- I\\<^sub>c) `` range id", "by (simp add: I\\<^sub>c_def, rule ImageI [of b\\<^sub>c], simp_all)"], ["proof (state)\nthis:\n  a\\<^sub>c \\<in> range id \\<inter> (- I\\<^sub>c) `` range id\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       \\<lbrakk>view_partition P\\<^sub>c id R;\n        weakly_future_consistent P\\<^sub>c I\\<^sub>c id R;\n        weakly_step_consistent P\\<^sub>c id R;\n        locally_respects P\\<^sub>c I\\<^sub>c id R\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>u\\<in>range id \\<inter> (- I\\<^sub>c) `` range id.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P\\<^sub>c id u xs =\n        next_dom_events P\\<^sub>c id u ys\n  a\\<^sub>c \\<in> range id \\<inter> (- I\\<^sub>c) `` range id", "have \"\\<forall>xs ys. (xs, ys) \\<in> R a\\<^sub>c \\<longrightarrow>\n    next_dom_events P\\<^sub>c id a\\<^sub>c xs = next_dom_events P\\<^sub>c id a\\<^sub>c ys\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range id \\<inter> (- I\\<^sub>c) `` range id.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        next_dom_events P\\<^sub>c id u xs =\n        next_dom_events P\\<^sub>c id u ys\n  a\\<^sub>c \\<in> range id \\<inter> (- I\\<^sub>c) `` range id\n\ngoal (1 subgoal):\n 1. \\<forall>xs ys.\n       (xs, ys) \\<in> R a\\<^sub>c \\<longrightarrow>\n       next_dom_events P\\<^sub>c id a\\<^sub>c xs =\n       next_dom_events P\\<^sub>c id a\\<^sub>c ys", ".."], ["proof (state)\nthis:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> R a\\<^sub>c \\<longrightarrow>\n     next_dom_events P\\<^sub>c id a\\<^sub>c xs =\n     next_dom_events P\\<^sub>c id a\\<^sub>c ys\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       \\<lbrakk>view_partition P\\<^sub>c id R;\n        weakly_future_consistent P\\<^sub>c I\\<^sub>c id R;\n        weakly_step_consistent P\\<^sub>c id R;\n        locally_respects P\\<^sub>c I\\<^sub>c id R\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]) \\<in> R a\\<^sub>c \\<longrightarrow>\n    next_dom_events P\\<^sub>c id a\\<^sub>c [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] = next_dom_events P\\<^sub>c id a\\<^sub>c [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]\""], ["proof (prove)\nusing this:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> R a\\<^sub>c \\<longrightarrow>\n     next_dom_events P\\<^sub>c id a\\<^sub>c xs =\n     next_dom_events P\\<^sub>c id a\\<^sub>c ys\n\ngoal (1 subgoal):\n 1. ([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n    \\<in> R a\\<^sub>c \\<longrightarrow>\n    next_dom_events P\\<^sub>c id a\\<^sub>c\n     [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] =\n    next_dom_events P\\<^sub>c id a\\<^sub>c [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]", "by blast"], ["proof (state)\nthis:\n  ([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n  \\<in> R a\\<^sub>c \\<longrightarrow>\n  next_dom_events P\\<^sub>c id a\\<^sub>c [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] =\n  next_dom_events P\\<^sub>c id a\\<^sub>c [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       \\<lbrakk>view_partition P\\<^sub>c id R;\n        weakly_future_consistent P\\<^sub>c I\\<^sub>c id R;\n        weakly_step_consistent P\\<^sub>c id R;\n        locally_respects P\\<^sub>c I\\<^sub>c id R\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  ([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n  \\<in> R a\\<^sub>c \\<longrightarrow>\n  next_dom_events P\\<^sub>c id a\\<^sub>c [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] =\n  next_dom_events P\\<^sub>c id a\\<^sub>c [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       \\<lbrakk>view_partition P\\<^sub>c id R;\n        weakly_future_consistent P\\<^sub>c I\\<^sub>c id R;\n        weakly_step_consistent P\\<^sub>c id R;\n        locally_respects P\\<^sub>c I\\<^sub>c id R\\<rbrakk>\n       \\<Longrightarrow> False", "assume\n    \"view_partition P\\<^sub>c id R\" and\n    \"weakly_step_consistent P\\<^sub>c id R\" and\n    \"locally_respects P\\<^sub>c I\\<^sub>c id R\""], ["proof (state)\nthis:\n  view_partition P\\<^sub>c id R\n  weakly_step_consistent P\\<^sub>c id R\n  locally_respects P\\<^sub>c I\\<^sub>c id R\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       \\<lbrakk>view_partition P\\<^sub>c id R;\n        weakly_future_consistent P\\<^sub>c I\\<^sub>c id R;\n        weakly_step_consistent P\\<^sub>c id R;\n        locally_respects P\\<^sub>c I\\<^sub>c id R\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"rel_induct P\\<^sub>c I\\<^sub>c id a\\<^sub>c \\<subseteq> R a\\<^sub>c\""], ["proof (prove)\nusing this:\n  view_partition P\\<^sub>c id R\n  weakly_step_consistent P\\<^sub>c id R\n  locally_respects P\\<^sub>c I\\<^sub>c id R\n\ngoal (1 subgoal):\n 1. rel_induct P\\<^sub>c I\\<^sub>c id a\\<^sub>c \\<subseteq> R a\\<^sub>c", "by (rule rel_induct_subset)"], ["proof (state)\nthis:\n  rel_induct P\\<^sub>c I\\<^sub>c id a\\<^sub>c \\<subseteq> R a\\<^sub>c\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       \\<lbrakk>view_partition P\\<^sub>c id R;\n        weakly_future_consistent P\\<^sub>c I\\<^sub>c id R;\n        weakly_step_consistent P\\<^sub>c id R;\n        locally_respects P\\<^sub>c I\\<^sub>c id R\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]) \\<in> R a\\<^sub>c\""], ["proof (prove)\nusing this:\n  rel_induct P\\<^sub>c I\\<^sub>c id a\\<^sub>c \\<subseteq> R a\\<^sub>c\n\ngoal (1 subgoal):\n 1. ([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n    \\<in> R a\\<^sub>c", "using counterexample_not_gu_condition_aux"], ["proof (prove)\nusing this:\n  rel_induct P\\<^sub>c I\\<^sub>c id a\\<^sub>c \\<subseteq> R a\\<^sub>c\n  ([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n  \\<in> rel_induct P\\<^sub>c I\\<^sub>c id a\\<^sub>c\n\ngoal (1 subgoal):\n 1. ([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n    \\<in> R a\\<^sub>c", ".."], ["proof (state)\nthis:\n  ([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n  \\<in> R a\\<^sub>c\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       \\<lbrakk>view_partition P\\<^sub>c id R;\n        weakly_future_consistent P\\<^sub>c I\\<^sub>c id R;\n        weakly_step_consistent P\\<^sub>c id R;\n        locally_respects P\\<^sub>c I\\<^sub>c id R\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  ([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n  \\<in> R a\\<^sub>c \\<longrightarrow>\n  next_dom_events P\\<^sub>c id a\\<^sub>c [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] =\n  next_dom_events P\\<^sub>c id a\\<^sub>c [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]\n  ([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n  \\<in> R a\\<^sub>c", "have\n   \"next_dom_events P\\<^sub>c id a\\<^sub>c [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] = next_dom_events P\\<^sub>c id a\\<^sub>c [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]\""], ["proof (prove)\nusing this:\n  ([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n  \\<in> R a\\<^sub>c \\<longrightarrow>\n  next_dom_events P\\<^sub>c id a\\<^sub>c [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] =\n  next_dom_events P\\<^sub>c id a\\<^sub>c [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]\n  ([a\\<^sub>c, b\\<^sub>c, c\\<^sub>c], [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c])\n  \\<in> R a\\<^sub>c\n\ngoal (1 subgoal):\n 1. next_dom_events P\\<^sub>c id a\\<^sub>c\n     [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] =\n    next_dom_events P\\<^sub>c id a\\<^sub>c [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]", ".."], ["proof (state)\nthis:\n  next_dom_events P\\<^sub>c id a\\<^sub>c [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] =\n  next_dom_events P\\<^sub>c id a\\<^sub>c [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       \\<lbrakk>view_partition P\\<^sub>c id R;\n        weakly_future_consistent P\\<^sub>c I\\<^sub>c id R;\n        weakly_step_consistent P\\<^sub>c id R;\n        locally_respects P\\<^sub>c I\\<^sub>c id R\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  next_dom_events P\\<^sub>c id a\\<^sub>c [a\\<^sub>c, b\\<^sub>c, c\\<^sub>c] =\n  next_dom_events P\\<^sub>c id a\\<^sub>c [b\\<^sub>c, a\\<^sub>c, c\\<^sub>c]\n\ngoal (1 subgoal):\n 1. False", "by (simp add: next_dom_events_def counterexample_next_events_2 T\\<^sub>c_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem not_secure_implies_gu_condition:\n \"\\<not> (secure P\\<^sub>c I\\<^sub>c id \\<longrightarrow>\n    (\\<exists>R.  view_partition P\\<^sub>c id R \\<and>\n          weakly_future_consistent P\\<^sub>c I\\<^sub>c id R \\<and>\n          weakly_step_consistent P\\<^sub>c id R \\<and>\n          locally_respects P\\<^sub>c I\\<^sub>c id R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (secure P\\<^sub>c I\\<^sub>c id \\<longrightarrow>\n            (\\<exists>R.\n                view_partition P\\<^sub>c id R \\<and>\n                weakly_future_consistent P\\<^sub>c I\\<^sub>c id R \\<and>\n                weakly_step_consistent P\\<^sub>c id R \\<and>\n                locally_respects P\\<^sub>c I\\<^sub>c id R))", "proof (simp del: not_ex, rule conjI, rule counterexample_secure)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>R.\n       view_partition P\\<^sub>c id R \\<and>\n       weakly_future_consistent P\\<^sub>c I\\<^sub>c id R \\<and>\n       weakly_step_consistent P\\<^sub>c id R \\<and>\n       locally_respects P\\<^sub>c I\\<^sub>c id R", "qed (rule counterexample_not_gu_condition)"], ["", "end"]]}