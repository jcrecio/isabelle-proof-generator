{"file_name": "/home/qj213/afp-2021-10-22/thys/Knuth_Bendix_Order/Lexicographic_Extension.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Knuth_Bendix_Order", "problem_names": ["lemma lex_two:\n  assumes compat: \"ns O s \\<subseteq> s\"\n    and SN_s: \"SN s\" \n    and SN_s2: \"SN s2\"\n  shows \"SN (lex_two s ns s2)\" (is \"SN ?r\")", "lemma lex_two_compat:\n  assumes compat1: \"ns1 O s1 \\<subseteq> s1\"\n    and compat1': \"s1 O ns1 \\<subseteq> s1\"\n    and trans1: \"s1 O s1 \\<subseteq> s1\"\n    and trans1': \"ns1 O ns1 \\<subseteq> ns1\"\n    and compat2: \"ns2 O s2 \\<subseteq> s2\"\n    and ns: \"(ab1, ab2) \\<in> lex_two s1 ns1 ns2\" \n    and s: \"(ab2, ab3) \\<in> lex_two s1 ns1 s2\"\n  shows \"(ab1, ab3) \\<in> lex_two s1 ns1 s2\"", "lemma lex_two_compat':\n  assumes compat1: \"ns1 O s1 \\<subseteq> s1\"\n    and compat1': \"s1 O ns1 \\<subseteq> s1\"\n    and trans1: \"s1 O s1 \\<subseteq> s1\"\n    and trans1': \"ns1 O ns1 \\<subseteq> ns1\"\n    and compat2': \"s2 O ns2 \\<subseteq> s2\"\n    and s: \"(ab1, ab2) \\<in> lex_two s1 ns1 s2\" \n    and ns: \"(ab2, ab3) \\<in> lex_two s1 ns1 ns2\"\n  shows \"(ab1, ab3) \\<in> lex_two s1 ns1 s2\"", "lemma lex_two_compat2:\n  assumes \"ns1 O s1 \\<subseteq> s1\" \"s1 O ns1 \\<subseteq> s1\" \"s1 O s1 \\<subseteq> s1\" \"ns1 O ns1 \\<subseteq> ns1\" \"ns2 O s2 \\<subseteq> s2\"\n  shows \"lex_two s1 ns1 ns2 O lex_two s1 ns1 s2 \\<subseteq> lex_two s1 ns1 s2\"", "lemma lex_two_compat'2:\n  assumes \"ns1 O s1 \\<subseteq> s1\" \"s1 O ns1 \\<subseteq> s1\" \"s1 O s1 \\<subseteq> s1\" \"ns1 O ns1 \\<subseteq> ns1\" \"s2 O ns2 \\<subseteq> s2\"\n  shows \"lex_two s1 ns1 s2 O lex_two s1 ns1 ns2 \\<subseteq> lex_two s1 ns1 s2\"", "lemma lex_two_refl:\n  assumes r1: \"refl ns1\" and r2: \"refl ns2\"\n  shows \"refl (lex_two s1 ns1 ns2)\"", "lemma lex_two_order_pair:\n  assumes o1: \"order_pair s1 ns1\" and o2: \"order_pair s2 ns2\"\n  shows \"order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)\"", "lemma lex_two_SN_order_pair:\n  assumes o1: \"SN_order_pair s1 ns1\" and o2: \"SN_order_pair s2 ns2\"\n  shows \"SN_order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)\"", "lemma lex_ext_unbounded_iff: \"(lex_ext_unbounded f xs ys) = (\n  ((\\<exists> i < length xs. i < length ys \\<and> (\\<forall> j < i. snd (f (xs ! j) (ys ! j))) \\<and> fst (f (xs ! i) (ys !i))) \\<or> \n  (\\<forall> i < length ys. snd (f (xs ! i) (ys ! i))) \\<and> length xs > length ys),\n  ((\\<exists> i < length xs. i < length ys \\<and> (\\<forall> j < i. snd (f (xs ! j) (ys ! j))) \\<and> fst (f (xs ! i) (ys !i))) \\<or> \n  (\\<forall> i < length ys. snd (f (xs ! i) (ys ! i))) \\<and> length xs \\<ge> length ys))\n  \" (is \"?lex xs ys = (?stri xs ys, ?nstri xs ys)\")", "lemma lex_ext_iff: \"(lex_ext f m xs ys) = (\n  (length xs = length ys \\<or> length ys \\<le> m) \\<and> ((\\<exists> i < length xs. i < length ys \\<and> (\\<forall> j < i. snd (f (xs ! j) (ys ! j))) \\<and> fst (f (xs ! i) (ys !i))) \\<or> \n  (\\<forall> i < length ys. snd (f (xs ! i) (ys ! i))) \\<and> length xs > length ys),\n  (length xs = length ys \\<or> length ys \\<le> m) \\<and>\n  ((\\<exists> i < length xs. i < length ys \\<and> (\\<forall> j < i. snd (f (xs ! j) (ys ! j))) \\<and> fst (f (xs ! i) (ys !i))) \\<or> \n  (\\<forall> i < length ys. snd (f (xs ! i) (ys ! i))) \\<and> length xs \\<ge> length ys))\n  \"", "lemma lex_ext_to_lex_ext_unbounded: \n  assumes \"length xs \\<le> n\" and \"length ys \\<le> n\"\n  shows \"lex_ext f n xs ys = lex_ext_unbounded f xs ys\"", "lemma lex_ext_stri_imp_nstri: \n  assumes \"fst (lex_ext f m xs ys)\" \n  shows \"snd (lex_ext f m xs ys)\"", "lemma lex_ext_unbounded_stri_imp_nstri: \n  assumes \"fst (lex_ext_unbounded f xs ys)\" \n  shows \"snd (lex_ext_unbounded f xs ys)\"", "lemma all_nstri_imp_lex_nstri: assumes \"\\<forall> i < length ys. snd (f (xs ! i) (ys ! i))\" and \"length xs \\<ge> length ys\" and \"length xs = length ys \\<or> length ys \\<le> m\"\n  shows \"snd (lex_ext f m xs ys)\"", "lemma lex_ext_cong[fundef_cong]: fixes f g m1 m2 xs1 xs2 ys1 ys2\n  assumes \"length xs1 = length ys1\" and \"m1 = m2\" and \"length xs2 = length ys2\" and \"\\<And> i. \\<lbrakk>i < length ys1; i < length ys2\\<rbrakk> \\<Longrightarrow> f (xs1 ! i) (xs2 ! i) = g (ys1 ! i) (ys2 ! i)\" \n  shows \"lex_ext f m1 xs1 xs2 = lex_ext g m2 ys1 ys2\"", "lemma lex_ext_unbounded_cong[fundef_cong]: assumes \"as = as'\" and \"bs = bs'\"\n  and \"\\<And> i. i < length as' \\<Longrightarrow> i < length bs' \\<Longrightarrow> f (as' ! i) (bs' ! i) = g (as' ! i) (bs' ! i)\" shows \"lex_ext_unbounded f as bs = lex_ext_unbounded g as' bs'\"", "lemma lex_ext_compat:\n  assumes compat: \"\\<And> s t u. \\<lbrakk>s \\<in> set ss; t \\<in> set ts; u \\<in> set us\\<rbrakk> \\<Longrightarrow>\n    (snd (f s t) \\<and> fst (f t u) \\<longrightarrow> fst (f s u)) \\<and> \n    (fst (f s t) \\<and> snd (f t u) \\<longrightarrow> fst (f s u)) \\<and> \n    (snd (f s t) \\<and> snd (f t u) \\<longrightarrow> snd (f s u)) \\<and>\n    (fst (f s t) \\<and> fst (f t u) \\<longrightarrow> fst (f s u))\"\n  shows \"\n    (snd (lex_ext f n ss ts) \\<and> fst (lex_ext f n ts us) \\<longrightarrow> fst (lex_ext f n ss us)) \\<and> \n    (fst (lex_ext f n ss ts) \\<and> snd (lex_ext f n ts us) \\<longrightarrow> fst (lex_ext f n ss us)) \\<and> \n    (snd (lex_ext f n ss ts) \\<and> snd (lex_ext f n ts us) \\<longrightarrow> snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and> fst (lex_ext f n ts us) \\<longrightarrow> fst (lex_ext f n ss us))\n    \"", "lemma lex_ext_unbounded_map:\n  assumes S: \"\\<And> i. i < length ss \\<Longrightarrow> i < length ts \\<Longrightarrow> fst (r (ss ! i) (ts ! i)) \\<Longrightarrow> fst (r (map f ss ! i) (map f ts ! i))\"\n    and NS: \"\\<And> i. i < length ss \\<Longrightarrow> i < length ts \\<Longrightarrow> snd (r (ss ! i) (ts ! i)) \\<Longrightarrow> snd (r (map f ss ! i) (map f ts ! i))\"\n  shows \"(fst (lex_ext_unbounded r ss ts) \\<longrightarrow> fst (lex_ext_unbounded r (map f ss) (map f ts))) \\<and>\n    (snd (lex_ext_unbounded r ss ts) \\<longrightarrow> snd (lex_ext_unbounded r (map f ss) (map f ts)))\"", "lemma lex_ext_unbounded_map_S:\n  assumes S: \"\\<And> i. i < length ss \\<Longrightarrow> i < length ts \\<Longrightarrow> fst (r (ss ! i) (ts ! i)) \\<Longrightarrow> fst (r (map f ss ! i) (map f ts ! i))\"\n    and NS: \"\\<And> i. i < length ss \\<Longrightarrow> i < length ts \\<Longrightarrow> snd (r (ss ! i) (ts ! i)) \\<Longrightarrow> snd (r (map f ss ! i) (map f ts ! i))\"\n    and stri: \"fst (lex_ext_unbounded r ss ts)\"\n  shows \"fst (lex_ext_unbounded r (map f ss) (map f ts))\"", "lemma lex_ext_unbounded_map_NS:\n  assumes S: \"\\<And> i. i < length ss \\<Longrightarrow> i < length ts \\<Longrightarrow> fst (r (ss ! i) (ts ! i)) \\<Longrightarrow> fst (r (map f ss ! i) (map f ts ! i))\"\n    and NS: \"\\<And> i. i < length ss \\<Longrightarrow> i < length ts \\<Longrightarrow> snd (r (ss ! i) (ts ! i)) \\<Longrightarrow> snd (r (map f ss ! i) (map f ts ! i))\"\n    and nstri: \"snd (lex_ext_unbounded r ss ts)\"\n  shows \"snd (lex_ext_unbounded r (map f ss) (map f ts))\"", "lemma lex_ext_SN:\n  assumes compat: \"\\<And> x y z. \\<lbrakk>snd (g x y); fst (g y z)\\<rbrakk> \\<Longrightarrow> fst (g x z)\"\n  shows \"SN { (ys, xs). (\\<forall> y \\<in> set ys. SN_on { (s, t). fst (g s t) } {y}) \\<and> fst (lex_ext g m ys xs) }\" \n    (is \"SN { (ys, xs). ?cond ys xs }\")", "lemma lex_ext_SN_2:\n  assumes compat: \"\\<And> x y z. \\<lbrakk>snd (g x y); fst (g y z)\\<rbrakk> \\<Longrightarrow> fst (g x z)\"\n    and SN:  \"SN {(s, t). fst (g s t)}\"\n  shows \"SN { (ys, xs). fst (lex_ext g m ys xs) }\"", "lemma lex_ext_least_1: \"snd (lex_ext f m xs [])\"", "lemma lex_ext_least_2: \"\\<not> fst (lex_ext f m [] ys)\"", "lemma lex_ext_unbounded_total:\n  assumes \"\\<forall>(s, t)\\<in>set (zip ss ts). s = t \\<or> fst (f s t) \\<or> fst (f t s)\" \n    and refl: \"\\<And> t. snd (f t t)\" \n    and \"length ss = length ts\" \n  shows \"ss = ts \\<or> fst (lex_ext_unbounded f ss ts) \\<or> fst (lex_ext_unbounded f ts ss)\"", "lemma lex_ext_total:\n  assumes \"\\<forall>(s, t)\\<in>set (zip ss ts). s = t \\<or> fst (f s t) \\<or> fst (f t s)\" \n    and \"\\<And> t. snd (f t t)\" \n    and len: \"length ss = length ts\" \n  shows \"ss = ts \\<or> fst (lex_ext f n ss ts) \\<or> fst (lex_ext f n ts ss)\"", "lemma lex_ext_unbounded_mono:\n  assumes \"\\<And>i. \\<lbrakk>i < length xs; i < length ys; fst (P (xs ! i) (ys ! i))\\<rbrakk> \\<Longrightarrow> fst (P' (xs ! i) (ys ! i))\"\n    and   \"\\<And>i. \\<lbrakk>i < length xs; i < length ys; snd (P (xs ! i) (ys ! i))\\<rbrakk> \\<Longrightarrow> snd (P' (xs ! i) (ys ! i))\"\n  shows\n    \"(fst (lex_ext_unbounded P xs ys) \\<longrightarrow> fst (lex_ext_unbounded P' xs ys)) \\<and>\n     (snd (lex_ext_unbounded P xs ys) \\<longrightarrow> snd (lex_ext_unbounded P' xs ys))\"\n    (is \"(?l1 xs ys \\<longrightarrow> ?r1 xs ys) \\<and> (?l2 xs ys \\<longrightarrow> ?r2 xs ys)\")"], "translations": [["", "lemma lex_two:\n  assumes compat: \"ns O s \\<subseteq> s\"\n    and SN_s: \"SN s\" \n    and SN_s2: \"SN s2\"\n  shows \"SN (lex_two s ns s2)\" (is \"SN ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. SN (lex_two s ns s2)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"\\<forall> i. (f i, f (Suc i)) \\<in> ?r\""], ["proof (state)\nthis:\n  \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2", "have steps: \"\\<And> i. (f i, f (Suc i)) \\<in> ?r\""], ["proof (prove)\nusing this:\n  \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\n\ngoal (1 subgoal):\n 1. \\<And>i. (f i, f (Suc i)) \\<in> lex_two s ns s2", ".."], ["proof (state)\nthis:\n  (f ?i, f (Suc ?i)) \\<in> lex_two s ns s2\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\\<rbrakk>\n       \\<Longrightarrow> False", "let ?a = \"\\<lambda> i. fst (f i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\\<rbrakk>\n       \\<Longrightarrow> False", "let ?b = \"\\<lambda> i. snd (f i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\\<rbrakk>\n       \\<Longrightarrow> False", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\\<rbrakk>\n       \\<Longrightarrow> False", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\\<rbrakk>\n       \\<Longrightarrow> False", "from steps[of i]"], ["proof (chain)\npicking this:\n  (f i, f (Suc i)) \\<in> lex_two s ns s2", "have \"(?a i, ?a (Suc i)) \\<in> s \\<or> (?a i, ?a (Suc i)) \\<in> ns \\<and> (?b i, ?b (Suc i)) \\<in> s2\""], ["proof (prove)\nusing this:\n  (f i, f (Suc i)) \\<in> lex_two s ns s2\n\ngoal (1 subgoal):\n 1. (fst (f i), fst (f (Suc i))) \\<in> s \\<or>\n    (fst (f i), fst (f (Suc i))) \\<in> ns \\<and>\n    (snd (f i), snd (f (Suc i))) \\<in> s2", "by (cases \"f i\", cases \"f (Suc i)\", auto)"], ["proof (state)\nthis:\n  (fst (f i), fst (f (Suc i))) \\<in> s \\<or>\n  (fst (f i), fst (f (Suc i))) \\<in> ns \\<and>\n  (snd (f i), snd (f (Suc i))) \\<in> s2\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\\<rbrakk>\n       \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  (fst (f ?i2), fst (f (Suc ?i2))) \\<in> s \\<or>\n  (fst (f ?i2), fst (f (Suc ?i2))) \\<in> ns \\<and>\n  (snd (f ?i2), snd (f (Suc ?i2))) \\<in> s2\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\\<rbrakk>\n       \\<Longrightarrow> False", "note steps = this"], ["proof (state)\nthis:\n  (fst (f ?i2), fst (f (Suc ?i2))) \\<in> s \\<or>\n  (fst (f ?i2), fst (f (Suc ?i2))) \\<in> ns \\<and>\n  (snd (f ?i2), snd (f (Suc ?i2))) \\<in> s2\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\\<rbrakk>\n       \\<Longrightarrow> False", "have \"\\<exists> j. \\<forall> i \\<ge> j. (?a i, ?a (Suc i)) \\<in> ns - s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j. \\<forall>i\\<ge>j. (fst (f i), fst (f (Suc i))) \\<in> ns - s", "by (rule non_strict_ending[OF _ compat], insert steps SN_s, unfold SN_on_def, auto)"], ["proof (state)\nthis:\n  \\<exists>j. \\<forall>i\\<ge>j. (fst (f i), fst (f (Suc i))) \\<in> ns - s\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\\<rbrakk>\n       \\<Longrightarrow> False", "with steps"], ["proof (chain)\npicking this:\n  (fst (f ?i2), fst (f (Suc ?i2))) \\<in> s \\<or>\n  (fst (f ?i2), fst (f (Suc ?i2))) \\<in> ns \\<and>\n  (snd (f ?i2), snd (f (Suc ?i2))) \\<in> s2\n  \\<exists>j. \\<forall>i\\<ge>j. (fst (f i), fst (f (Suc i))) \\<in> ns - s", "obtain j where steps: \"\\<And> i. i \\<ge> j \\<Longrightarrow> (?b i, ?b (Suc i)) \\<in> s2\""], ["proof (prove)\nusing this:\n  (fst (f ?i2), fst (f (Suc ?i2))) \\<in> s \\<or>\n  (fst (f ?i2), fst (f (Suc ?i2))) \\<in> ns \\<and>\n  (snd (f ?i2), snd (f (Suc ?i2))) \\<in> s2\n  \\<exists>j. \\<forall>i\\<ge>j. (fst (f i), fst (f (Suc i))) \\<in> ns - s\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        (\\<And>i.\n            j \\<le> i \\<Longrightarrow>\n            (snd (f i), snd (f (Suc i))) \\<in> s2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j \\<le> ?i \\<Longrightarrow> (snd (f ?i), snd (f (Suc ?i))) \\<in> s2\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\\<rbrakk>\n       \\<Longrightarrow> False", "obtain g where g: \"g = (\\<lambda> i. ?b (j + i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g.\n        g = (\\<lambda>i. snd (f (j + i))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  g = (\\<lambda>i. snd (f (j + i)))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\\<rbrakk>\n       \\<Longrightarrow> False", "from steps"], ["proof (chain)\npicking this:\n  j \\<le> ?i \\<Longrightarrow> (snd (f ?i), snd (f (Suc ?i))) \\<in> s2", "have \"\\<And> i. (g i, g (Suc i)) \\<in> s2\""], ["proof (prove)\nusing this:\n  j \\<le> ?i \\<Longrightarrow> (snd (f ?i), snd (f (Suc ?i))) \\<in> s2\n\ngoal (1 subgoal):\n 1. \\<And>i. (g i, g (Suc i)) \\<in> s2", "unfolding g"], ["proof (prove)\nusing this:\n  j \\<le> ?i \\<Longrightarrow> (snd (f ?i), snd (f (Suc ?i))) \\<in> s2\n\ngoal (1 subgoal):\n 1. \\<And>i. (snd (f (j + i)), snd (f (j + Suc i))) \\<in> s2", "by auto"], ["proof (state)\nthis:\n  (g ?i, g (Suc ?i)) \\<in> s2\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> lex_two s ns s2\\<rbrakk>\n       \\<Longrightarrow> False", "with SN_s2"], ["proof (chain)\npicking this:\n  SN s2\n  (g ?i, g (Suc ?i)) \\<in> s2", "show False"], ["proof (prove)\nusing this:\n  SN s2\n  (g ?i, g (Suc ?i)) \\<in> s2\n\ngoal (1 subgoal):\n 1. False", "unfolding SN_defs"], ["proof (prove)\nusing this:\n  \\<nexists>f. f 0 \\<in> UNIV \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> s2)\n  (g ?i, g (Suc ?i)) \\<in> s2\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lex_two_compat:\n  assumes compat1: \"ns1 O s1 \\<subseteq> s1\"\n    and compat1': \"s1 O ns1 \\<subseteq> s1\"\n    and trans1: \"s1 O s1 \\<subseteq> s1\"\n    and trans1': \"ns1 O ns1 \\<subseteq> ns1\"\n    and compat2: \"ns2 O s2 \\<subseteq> s2\"\n    and ns: \"(ab1, ab2) \\<in> lex_two s1 ns1 ns2\" \n    and s: \"(ab2, ab3) \\<in> lex_two s1 ns1 s2\"\n  shows \"(ab1, ab3) \\<in> lex_two s1 ns1 s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "obtain a1 b1 where ab1: \"ab1 = (a1, b1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a1 b1. ab1 = (a1, b1) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  ab1 = (a1, b1)\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "obtain a2 b2 where ab2: \"ab2 = (a2, b2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a2 b2. ab2 = (a2, b2) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  ab2 = (a2, b2)\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "obtain a3 b3 where ab3: \"ab3 = (a3, b3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a3 b3. ab3 = (a3, b3) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  ab3 = (a3, b3)\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "note id = ab1 ab2 ab3"], ["proof (state)\nthis:\n  ab1 = (a1, b1)\n  ab2 = (a2, b2)\n  ab3 = (a3, b3)\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "proof (cases \"(a1, a2) \\<in> s1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (a1, a2) \\<in> s1 \\<Longrightarrow> (ab1, ab3) \\<in> lex_two s1 ns1 s2\n 2. (a1, a2) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "case s1: True"], ["proof (state)\nthis:\n  (a1, a2) \\<in> s1\n\ngoal (2 subgoals):\n 1. (a1, a2) \\<in> s1 \\<Longrightarrow> (ab1, ab3) \\<in> lex_two s1 ns1 s2\n 2. (a1, a2) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "proof (cases \"(a2, a3) \\<in> s1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (a2, a3) \\<in> s1 \\<Longrightarrow> (ab1, ab3) \\<in> lex_two s1 ns1 s2\n 2. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "case s2: True"], ["proof (state)\nthis:\n  (a2, a3) \\<in> s1\n\ngoal (2 subgoals):\n 1. (a2, a3) \\<in> s1 \\<Longrightarrow> (ab1, ab3) \\<in> lex_two s1 ns1 s2\n 2. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "from trans1 s1 s2"], ["proof (chain)\npicking this:\n  s1 O s1 \\<subseteq> s1\n  (a1, a2) \\<in> s1\n  (a2, a3) \\<in> s1", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 O s1 \\<subseteq> s1\n  (a1, a2) \\<in> s1\n  (a2, a3) \\<in> s1\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "unfolding id"], ["proof (prove)\nusing this:\n  s1 O s1 \\<subseteq> s1\n  (a1, a2) \\<in> s1\n  (a2, a3) \\<in> s1\n\ngoal (1 subgoal):\n 1. ((a1, b1), a3, b3) \\<in> lex_two s1 ns1 s2", "by auto"], ["proof (state)\nthis:\n  (ab1, ab3) \\<in> lex_two s1 ns1 s2\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "case False"], ["proof (state)\nthis:\n  (a2, a3) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "with s"], ["proof (chain)\npicking this:\n  (ab2, ab3) \\<in> lex_two s1 ns1 s2\n  (a2, a3) \\<notin> s1", "have \"(a2, a3) \\<in> ns1\""], ["proof (prove)\nusing this:\n  (ab2, ab3) \\<in> lex_two s1 ns1 s2\n  (a2, a3) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<in> ns1", "unfolding id"], ["proof (prove)\nusing this:\n  ((a2, b2), a3, b3) \\<in> lex_two s1 ns1 s2\n  (a2, a3) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<in> ns1", "by simp"], ["proof (state)\nthis:\n  (a2, a3) \\<in> ns1\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "from compat1' s1 this"], ["proof (chain)\npicking this:\n  s1 O ns1 \\<subseteq> s1\n  (a1, a2) \\<in> s1\n  (a2, a3) \\<in> ns1", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 O ns1 \\<subseteq> s1\n  (a1, a2) \\<in> s1\n  (a2, a3) \\<in> ns1\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "unfolding id"], ["proof (prove)\nusing this:\n  s1 O ns1 \\<subseteq> s1\n  (a1, a2) \\<in> s1\n  (a2, a3) \\<in> ns1\n\ngoal (1 subgoal):\n 1. ((a1, b1), a3, b3) \\<in> lex_two s1 ns1 s2", "by auto"], ["proof (state)\nthis:\n  (ab1, ab3) \\<in> lex_two s1 ns1 s2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (ab1, ab3) \\<in> lex_two s1 ns1 s2\n\ngoal (1 subgoal):\n 1. (a1, a2) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (a1, a2) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "case False"], ["proof (state)\nthis:\n  (a1, a2) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a1, a2) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "with ns"], ["proof (chain)\npicking this:\n  (ab1, ab2) \\<in> lex_two s1 ns1 ns2\n  (a1, a2) \\<notin> s1", "have ns: \"(a1, a2) \\<in> ns1\" \"(b1, b2) \\<in> ns2\""], ["proof (prove)\nusing this:\n  (ab1, ab2) \\<in> lex_two s1 ns1 ns2\n  (a1, a2) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a1, a2) \\<in> ns1 &&& (b1, b2) \\<in> ns2", "unfolding id"], ["proof (prove)\nusing this:\n  ((a1, b1), a2, b2) \\<in> lex_two s1 ns1 ns2\n  (a1, a2) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a1, a2) \\<in> ns1 &&& (b1, b2) \\<in> ns2", "by auto"], ["proof (state)\nthis:\n  (a1, a2) \\<in> ns1\n  (b1, b2) \\<in> ns2\n\ngoal (1 subgoal):\n 1. (a1, a2) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "proof (cases \"(a2, a3) \\<in> s1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (a2, a3) \\<in> s1 \\<Longrightarrow> (ab1, ab3) \\<in> lex_two s1 ns1 s2\n 2. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "case s2: True"], ["proof (state)\nthis:\n  (a2, a3) \\<in> s1\n\ngoal (2 subgoals):\n 1. (a2, a3) \\<in> s1 \\<Longrightarrow> (ab1, ab3) \\<in> lex_two s1 ns1 s2\n 2. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "from compat1 ns(1) s2"], ["proof (chain)\npicking this:\n  ns1 O s1 \\<subseteq> s1\n  (a1, a2) \\<in> ns1\n  (a2, a3) \\<in> s1", "show ?thesis"], ["proof (prove)\nusing this:\n  ns1 O s1 \\<subseteq> s1\n  (a1, a2) \\<in> ns1\n  (a2, a3) \\<in> s1\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "unfolding id"], ["proof (prove)\nusing this:\n  ns1 O s1 \\<subseteq> s1\n  (a1, a2) \\<in> ns1\n  (a2, a3) \\<in> s1\n\ngoal (1 subgoal):\n 1. ((a1, b1), a3, b3) \\<in> lex_two s1 ns1 s2", "by auto"], ["proof (state)\nthis:\n  (ab1, ab3) \\<in> lex_two s1 ns1 s2\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "case False"], ["proof (state)\nthis:\n  (a2, a3) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "with s"], ["proof (chain)\npicking this:\n  (ab2, ab3) \\<in> lex_two s1 ns1 s2\n  (a2, a3) \\<notin> s1", "have nss: \"(a2, a3) \\<in> ns1\" \"(b2, b3) \\<in> s2\""], ["proof (prove)\nusing this:\n  (ab2, ab3) \\<in> lex_two s1 ns1 s2\n  (a2, a3) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<in> ns1 &&& (b2, b3) \\<in> s2", "unfolding id"], ["proof (prove)\nusing this:\n  ((a2, b2), a3, b3) \\<in> lex_two s1 ns1 s2\n  (a2, a3) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<in> ns1 &&& (b2, b3) \\<in> s2", "by auto"], ["proof (state)\nthis:\n  (a2, a3) \\<in> ns1\n  (b2, b3) \\<in> s2\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "from trans1' ns(1) nss(1) compat2 ns(2) nss(2)"], ["proof (chain)\npicking this:\n  ns1 O ns1 \\<subseteq> ns1\n  (a1, a2) \\<in> ns1\n  (a2, a3) \\<in> ns1\n  ns2 O s2 \\<subseteq> s2\n  (b1, b2) \\<in> ns2\n  (b2, b3) \\<in> s2", "show ?thesis"], ["proof (prove)\nusing this:\n  ns1 O ns1 \\<subseteq> ns1\n  (a1, a2) \\<in> ns1\n  (a2, a3) \\<in> ns1\n  ns2 O s2 \\<subseteq> s2\n  (b1, b2) \\<in> ns2\n  (b2, b3) \\<in> s2\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "unfolding id"], ["proof (prove)\nusing this:\n  ns1 O ns1 \\<subseteq> ns1\n  (a1, a2) \\<in> ns1\n  (a2, a3) \\<in> ns1\n  ns2 O s2 \\<subseteq> s2\n  (b1, b2) \\<in> ns2\n  (b2, b3) \\<in> s2\n\ngoal (1 subgoal):\n 1. ((a1, b1), a3, b3) \\<in> lex_two s1 ns1 s2", "by auto"], ["proof (state)\nthis:\n  (ab1, ab3) \\<in> lex_two s1 ns1 s2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (ab1, ab3) \\<in> lex_two s1 ns1 s2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (ab1, ab3) \\<in> lex_two s1 ns1 s2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lex_two_compat':\n  assumes compat1: \"ns1 O s1 \\<subseteq> s1\"\n    and compat1': \"s1 O ns1 \\<subseteq> s1\"\n    and trans1: \"s1 O s1 \\<subseteq> s1\"\n    and trans1': \"ns1 O ns1 \\<subseteq> ns1\"\n    and compat2': \"s2 O ns2 \\<subseteq> s2\"\n    and s: \"(ab1, ab2) \\<in> lex_two s1 ns1 s2\" \n    and ns: \"(ab2, ab3) \\<in> lex_two s1 ns1 ns2\"\n  shows \"(ab1, ab3) \\<in> lex_two s1 ns1 s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "obtain a1 b1 where ab1: \"ab1 = (a1, b1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a1 b1. ab1 = (a1, b1) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  ab1 = (a1, b1)\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "obtain a2 b2 where ab2: \"ab2 = (a2, b2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a2 b2. ab2 = (a2, b2) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  ab2 = (a2, b2)\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "obtain a3 b3 where ab3: \"ab3 = (a3, b3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a3 b3. ab3 = (a3, b3) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  ab3 = (a3, b3)\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "note id = ab1 ab2 ab3"], ["proof (state)\nthis:\n  ab1 = (a1, b1)\n  ab2 = (a2, b2)\n  ab3 = (a3, b3)\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "proof (cases \"(a1, a2) \\<in> s1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (a1, a2) \\<in> s1 \\<Longrightarrow> (ab1, ab3) \\<in> lex_two s1 ns1 s2\n 2. (a1, a2) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "case s1: True"], ["proof (state)\nthis:\n  (a1, a2) \\<in> s1\n\ngoal (2 subgoals):\n 1. (a1, a2) \\<in> s1 \\<Longrightarrow> (ab1, ab3) \\<in> lex_two s1 ns1 s2\n 2. (a1, a2) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "proof (cases \"(a2, a3) \\<in> s1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (a2, a3) \\<in> s1 \\<Longrightarrow> (ab1, ab3) \\<in> lex_two s1 ns1 s2\n 2. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "case s2: True"], ["proof (state)\nthis:\n  (a2, a3) \\<in> s1\n\ngoal (2 subgoals):\n 1. (a2, a3) \\<in> s1 \\<Longrightarrow> (ab1, ab3) \\<in> lex_two s1 ns1 s2\n 2. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "from trans1 s1 s2"], ["proof (chain)\npicking this:\n  s1 O s1 \\<subseteq> s1\n  (a1, a2) \\<in> s1\n  (a2, a3) \\<in> s1", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 O s1 \\<subseteq> s1\n  (a1, a2) \\<in> s1\n  (a2, a3) \\<in> s1\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "unfolding id"], ["proof (prove)\nusing this:\n  s1 O s1 \\<subseteq> s1\n  (a1, a2) \\<in> s1\n  (a2, a3) \\<in> s1\n\ngoal (1 subgoal):\n 1. ((a1, b1), a3, b3) \\<in> lex_two s1 ns1 s2", "by auto"], ["proof (state)\nthis:\n  (ab1, ab3) \\<in> lex_two s1 ns1 s2\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "case False"], ["proof (state)\nthis:\n  (a2, a3) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "with ns"], ["proof (chain)\npicking this:\n  (ab2, ab3) \\<in> lex_two s1 ns1 ns2\n  (a2, a3) \\<notin> s1", "have \"(a2, a3) \\<in> ns1\""], ["proof (prove)\nusing this:\n  (ab2, ab3) \\<in> lex_two s1 ns1 ns2\n  (a2, a3) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<in> ns1", "unfolding id"], ["proof (prove)\nusing this:\n  ((a2, b2), a3, b3) \\<in> lex_two s1 ns1 ns2\n  (a2, a3) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<in> ns1", "by simp"], ["proof (state)\nthis:\n  (a2, a3) \\<in> ns1\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "from compat1' s1 this"], ["proof (chain)\npicking this:\n  s1 O ns1 \\<subseteq> s1\n  (a1, a2) \\<in> s1\n  (a2, a3) \\<in> ns1", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 O ns1 \\<subseteq> s1\n  (a1, a2) \\<in> s1\n  (a2, a3) \\<in> ns1\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "unfolding id"], ["proof (prove)\nusing this:\n  s1 O ns1 \\<subseteq> s1\n  (a1, a2) \\<in> s1\n  (a2, a3) \\<in> ns1\n\ngoal (1 subgoal):\n 1. ((a1, b1), a3, b3) \\<in> lex_two s1 ns1 s2", "by auto"], ["proof (state)\nthis:\n  (ab1, ab3) \\<in> lex_two s1 ns1 s2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (ab1, ab3) \\<in> lex_two s1 ns1 s2\n\ngoal (1 subgoal):\n 1. (a1, a2) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (a1, a2) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "case False"], ["proof (state)\nthis:\n  (a1, a2) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a1, a2) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "with s"], ["proof (chain)\npicking this:\n  (ab1, ab2) \\<in> lex_two s1 ns1 s2\n  (a1, a2) \\<notin> s1", "have s: \"(a1, a2) \\<in> ns1\" \"(b1, b2) \\<in> s2\""], ["proof (prove)\nusing this:\n  (ab1, ab2) \\<in> lex_two s1 ns1 s2\n  (a1, a2) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a1, a2) \\<in> ns1 &&& (b1, b2) \\<in> s2", "unfolding id"], ["proof (prove)\nusing this:\n  ((a1, b1), a2, b2) \\<in> lex_two s1 ns1 s2\n  (a1, a2) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a1, a2) \\<in> ns1 &&& (b1, b2) \\<in> s2", "by auto"], ["proof (state)\nthis:\n  (a1, a2) \\<in> ns1\n  (b1, b2) \\<in> s2\n\ngoal (1 subgoal):\n 1. (a1, a2) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "proof (cases \"(a2, a3) \\<in> s1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (a2, a3) \\<in> s1 \\<Longrightarrow> (ab1, ab3) \\<in> lex_two s1 ns1 s2\n 2. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "case s2: True"], ["proof (state)\nthis:\n  (a2, a3) \\<in> s1\n\ngoal (2 subgoals):\n 1. (a2, a3) \\<in> s1 \\<Longrightarrow> (ab1, ab3) \\<in> lex_two s1 ns1 s2\n 2. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "from compat1 s(1) s2"], ["proof (chain)\npicking this:\n  ns1 O s1 \\<subseteq> s1\n  (a1, a2) \\<in> ns1\n  (a2, a3) \\<in> s1", "show ?thesis"], ["proof (prove)\nusing this:\n  ns1 O s1 \\<subseteq> s1\n  (a1, a2) \\<in> ns1\n  (a2, a3) \\<in> s1\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "unfolding id"], ["proof (prove)\nusing this:\n  ns1 O s1 \\<subseteq> s1\n  (a1, a2) \\<in> ns1\n  (a2, a3) \\<in> s1\n\ngoal (1 subgoal):\n 1. ((a1, b1), a3, b3) \\<in> lex_two s1 ns1 s2", "by auto"], ["proof (state)\nthis:\n  (ab1, ab3) \\<in> lex_two s1 ns1 s2\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "case False"], ["proof (state)\nthis:\n  (a2, a3) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "with ns"], ["proof (chain)\npicking this:\n  (ab2, ab3) \\<in> lex_two s1 ns1 ns2\n  (a2, a3) \\<notin> s1", "have nss: \"(a2, a3) \\<in> ns1\" \"(b2, b3) \\<in> ns2\""], ["proof (prove)\nusing this:\n  (ab2, ab3) \\<in> lex_two s1 ns1 ns2\n  (a2, a3) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<in> ns1 &&& (b2, b3) \\<in> ns2", "unfolding id"], ["proof (prove)\nusing this:\n  ((a2, b2), a3, b3) \\<in> lex_two s1 ns1 ns2\n  (a2, a3) \\<notin> s1\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<in> ns1 &&& (b2, b3) \\<in> ns2", "by auto"], ["proof (state)\nthis:\n  (a2, a3) \\<in> ns1\n  (b2, b3) \\<in> ns2\n\ngoal (1 subgoal):\n 1. (a2, a3) \\<notin> s1 \\<Longrightarrow>\n    (ab1, ab3) \\<in> lex_two s1 ns1 s2", "from trans1' s(1) nss(1) compat2' s(2) nss(2)"], ["proof (chain)\npicking this:\n  ns1 O ns1 \\<subseteq> ns1\n  (a1, a2) \\<in> ns1\n  (a2, a3) \\<in> ns1\n  s2 O ns2 \\<subseteq> s2\n  (b1, b2) \\<in> s2\n  (b2, b3) \\<in> ns2", "show ?thesis"], ["proof (prove)\nusing this:\n  ns1 O ns1 \\<subseteq> ns1\n  (a1, a2) \\<in> ns1\n  (a2, a3) \\<in> ns1\n  s2 O ns2 \\<subseteq> s2\n  (b1, b2) \\<in> s2\n  (b2, b3) \\<in> ns2\n\ngoal (1 subgoal):\n 1. (ab1, ab3) \\<in> lex_two s1 ns1 s2", "unfolding id"], ["proof (prove)\nusing this:\n  ns1 O ns1 \\<subseteq> ns1\n  (a1, a2) \\<in> ns1\n  (a2, a3) \\<in> ns1\n  s2 O ns2 \\<subseteq> s2\n  (b1, b2) \\<in> s2\n  (b2, b3) \\<in> ns2\n\ngoal (1 subgoal):\n 1. ((a1, b1), a3, b3) \\<in> lex_two s1 ns1 s2", "by auto"], ["proof (state)\nthis:\n  (ab1, ab3) \\<in> lex_two s1 ns1 s2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (ab1, ab3) \\<in> lex_two s1 ns1 s2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (ab1, ab3) \\<in> lex_two s1 ns1 s2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lex_two_compat2:\n  assumes \"ns1 O s1 \\<subseteq> s1\" \"s1 O ns1 \\<subseteq> s1\" \"s1 O s1 \\<subseteq> s1\" \"ns1 O ns1 \\<subseteq> ns1\" \"ns2 O s2 \\<subseteq> s2\"\n  shows \"lex_two s1 ns1 ns2 O lex_two s1 ns1 s2 \\<subseteq> lex_two s1 ns1 s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_two s1 ns1 ns2 O lex_two s1 ns1 s2 \\<subseteq> lex_two s1 ns1 s2", "using lex_two_compat[OF assms]"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?ab1.0, ?ab2.0) \\<in> lex_two s1 ns1 ns2;\n   (?ab2.0, ?ab3.0) \\<in> lex_two s1 ns1 s2\\<rbrakk>\n  \\<Longrightarrow> (?ab1.0, ?ab3.0) \\<in> lex_two s1 ns1 s2\n\ngoal (1 subgoal):\n 1. lex_two s1 ns1 ns2 O lex_two s1 ns1 s2 \\<subseteq> lex_two s1 ns1 s2", "by (intro subsetI, elim relcompE, fast)"], ["", "lemma lex_two_compat'2:\n  assumes \"ns1 O s1 \\<subseteq> s1\" \"s1 O ns1 \\<subseteq> s1\" \"s1 O s1 \\<subseteq> s1\" \"ns1 O ns1 \\<subseteq> ns1\" \"s2 O ns2 \\<subseteq> s2\"\n  shows \"lex_two s1 ns1 s2 O lex_two s1 ns1 ns2 \\<subseteq> lex_two s1 ns1 s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_two s1 ns1 s2 O lex_two s1 ns1 ns2 \\<subseteq> lex_two s1 ns1 s2", "using lex_two_compat'[OF assms]"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?ab1.0, ?ab2.0) \\<in> lex_two s1 ns1 s2;\n   (?ab2.0, ?ab3.0) \\<in> lex_two s1 ns1 ns2\\<rbrakk>\n  \\<Longrightarrow> (?ab1.0, ?ab3.0) \\<in> lex_two s1 ns1 s2\n\ngoal (1 subgoal):\n 1. lex_two s1 ns1 s2 O lex_two s1 ns1 ns2 \\<subseteq> lex_two s1 ns1 s2", "by (intro subsetI, elim relcompE, fast)"], ["", "lemma lex_two_refl:\n  assumes r1: \"refl ns1\" and r2: \"refl ns2\"\n  shows \"refl (lex_two s1 ns1 ns2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refl (lex_two s1 ns1 ns2)", "using refl_onD[OF r1] and refl_onD[OF r2]"], ["proof (prove)\nusing this:\n  ?a \\<in> UNIV \\<Longrightarrow> (?a, ?a) \\<in> ns1\n  ?a \\<in> UNIV \\<Longrightarrow> (?a, ?a) \\<in> ns2\n\ngoal (1 subgoal):\n 1. refl (lex_two s1 ns1 ns2)", "by (intro refl_onI) auto"], ["", "lemma lex_two_order_pair:\n  assumes o1: \"order_pair s1 ns1\" and o2: \"order_pair s2 ns2\"\n  shows \"order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "interpret o1: order_pair s1 ns1"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair s1 ns1", "using o1"], ["proof (prove)\nusing this:\n  order_pair s1 ns1\n\ngoal (1 subgoal):\n 1. order_pair s1 ns1", "."], ["proof (state)\ngoal (1 subgoal):\n 1. order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "interpret o2: order_pair s2 ns2"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair s2 ns2", "using o2"], ["proof (prove)\nusing this:\n  order_pair s2 ns2\n\ngoal (1 subgoal):\n 1. order_pair s2 ns2", "."], ["proof (state)\ngoal (1 subgoal):\n 1. order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "note o1.trans_S o1.trans_NS o2.trans_S o2.trans_NS \n    o1.compat_NS_S o2.compat_NS_S o1.compat_S_NS o2.compat_S_NS"], ["proof (state)\nthis:\n  trans s1\n  trans ns1\n  trans s2\n  trans ns2\n  ns1 O s1 \\<subseteq> s1\n  ns2 O s2 \\<subseteq> s2\n  s1 O ns1 \\<subseteq> s1\n  s2 O ns2 \\<subseteq> s2\n\ngoal (1 subgoal):\n 1. order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "note this [unfolded trans_O_iff]"], ["proof (state)\nthis:\n  s1 O s1 \\<subseteq> s1\n  ns1 O ns1 \\<subseteq> ns1\n  s2 O s2 \\<subseteq> s2\n  ns2 O ns2 \\<subseteq> ns2\n  ns1 O s1 \\<subseteq> s1\n  ns2 O s2 \\<subseteq> s2\n  s1 O ns1 \\<subseteq> s1\n  s2 O ns2 \\<subseteq> s2\n\ngoal (1 subgoal):\n 1. order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "note o1.refl_NS o2.refl_NS"], ["proof (state)\nthis:\n  refl ns1\n  refl ns2\n\ngoal (1 subgoal):\n 1. order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "by (unfold_locales, intro lex_two_refl, fact+, unfold trans_O_iff)\n      (rule lex_two_compat2 lex_two_compat'2;fact)+"], ["proof (state)\nthis:\n  order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lex_two_SN_order_pair:\n  assumes o1: \"SN_order_pair s1 ns1\" and o2: \"SN_order_pair s2 ns2\"\n  shows \"SN_order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. SN_order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "interpret o1: SN_order_pair s1 ns1"], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_order_pair s1 ns1", "using o1"], ["proof (prove)\nusing this:\n  SN_order_pair s1 ns1\n\ngoal (1 subgoal):\n 1. SN_order_pair s1 ns1", "."], ["proof (state)\ngoal (1 subgoal):\n 1. SN_order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "interpret o2: SN_order_pair s2 ns2"], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_order_pair s2 ns2", "using o2"], ["proof (prove)\nusing this:\n  SN_order_pair s2 ns2\n\ngoal (1 subgoal):\n 1. SN_order_pair s2 ns2", "."], ["proof (state)\ngoal (1 subgoal):\n 1. SN_order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "note o1.trans_S o1.trans_NS o2.trans_S o2.trans_NS o1.SN o2.SN\n    o1.compat_NS_S o2.compat_NS_S o1.compat_S_NS o2.compat_S_NS"], ["proof (state)\nthis:\n  trans s1\n  trans ns1\n  trans s2\n  trans ns2\n  SN s1\n  SN s2\n  ns1 O s1 \\<subseteq> s1\n  ns2 O s2 \\<subseteq> s2\n  s1 O ns1 \\<subseteq> s1\n  s2 O ns2 \\<subseteq> s2\n\ngoal (1 subgoal):\n 1. SN_order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "note this [unfolded trans_O_iff]"], ["proof (state)\nthis:\n  s1 O s1 \\<subseteq> s1\n  ns1 O ns1 \\<subseteq> ns1\n  s2 O s2 \\<subseteq> s2\n  ns2 O ns2 \\<subseteq> ns2\n  SN s1\n  SN s2\n  ns1 O s1 \\<subseteq> s1\n  ns2 O s2 \\<subseteq> s2\n  s1 O ns1 \\<subseteq> s1\n  s2 O ns2 \\<subseteq> s2\n\ngoal (1 subgoal):\n 1. SN_order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "interpret order_pair \"(lex_two s1 ns1 s2)\" \"(lex_two s1 ns1 ns2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "by(rule lex_two_order_pair, standard)"], ["proof (state)\ngoal (1 subgoal):\n 1. SN_order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)", "by(standard, rule lex_two; fact)"], ["proof (state)\nthis:\n  SN_order_pair (lex_two s1 ns1 s2) (lex_two s1 ns1 ns2)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  In the unbounded lexicographic extension, there is no restriction on the lengths\n  of the lists. Therefore it is possible to compare lists of different lengths.\n  This usually results a non-terminating relation, e.g., $[1] > [0, 1] > [0, 0, 1] > \\ldots$\n\\<close>"], ["", "fun lex_ext_unbounded :: \"('a \\<Rightarrow> 'a \\<Rightarrow> bool \\<times> bool) \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool \\<times> bool\"\n  where \"lex_ext_unbounded f [] [] = (False, True)\" |\n    \"lex_ext_unbounded f (_ # _) [] = (True, True)\" |\n    \"lex_ext_unbounded f [] (_ # _) = (False, False)\" |\n    \"lex_ext_unbounded f (a # as) (b # bs) =\n      (let (stri, nstri) = f a b in\n      if stri then (True, True)\n      else if nstri then lex_ext_unbounded f as bs\n      else (False, False))\""], ["", "lemma lex_ext_unbounded_iff: \"(lex_ext_unbounded f xs ys) = (\n  ((\\<exists> i < length xs. i < length ys \\<and> (\\<forall> j < i. snd (f (xs ! j) (ys ! j))) \\<and> fst (f (xs ! i) (ys !i))) \\<or> \n  (\\<forall> i < length ys. snd (f (xs ! i) (ys ! i))) \\<and> length xs > length ys),\n  ((\\<exists> i < length xs. i < length ys \\<and> (\\<forall> j < i. snd (f (xs ! j) (ys ! j))) \\<and> fst (f (xs ! i) (ys !i))) \\<or> \n  (\\<forall> i < length ys. snd (f (xs ! i) (ys ! i))) \\<and> length xs \\<ge> length ys))\n  \" (is \"?lex xs ys = (?stri xs ys, ?nstri xs ys)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_ext_unbounded f xs ys =\n    ((\\<exists>i<length xs.\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n         fst (f (xs ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n     length ys < length xs,\n     (\\<exists>i<length xs.\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n         fst (f (xs ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n     length ys \\<le> length xs)", "proof (induct xs arbitrary: ys)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys.\n       lex_ext_unbounded f [] ys =\n       ((\\<exists>i<length [].\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ([] ! j) (ys ! j))) \\<and>\n            fst (f ([] ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ([] ! i) (ys ! i))) \\<and>\n        length ys < length [],\n        (\\<exists>i<length [].\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ([] ! j) (ys ! j))) \\<and>\n            fst (f ([] ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ([] ! i) (ys ! i))) \\<and>\n        length ys \\<le> length [])\n 2. \\<And>a xs ys.\n       (\\<And>ys.\n           lex_ext_unbounded f xs ys =\n           ((\\<exists>i<length xs.\n                i < length ys \\<and>\n                (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n                fst (f (xs ! i) (ys ! i))) \\<or>\n            (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n            length ys < length xs,\n            (\\<exists>i<length xs.\n                i < length ys \\<and>\n                (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n                fst (f (xs ! i) (ys ! i))) \\<or>\n            (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n            length ys \\<le> length xs)) \\<Longrightarrow>\n       lex_ext_unbounded f (a # xs) ys =\n       ((\\<exists>i<length (a # xs).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # xs) ! j) (ys ! j))) \\<and>\n            fst (f ((a # xs) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # xs) ! i) (ys ! i))) \\<and>\n        length ys < length (a # xs),\n        (\\<exists>i<length (a # xs).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # xs) ! j) (ys ! j))) \\<and>\n            fst (f ((a # xs) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # xs) ! i) (ys ! i))) \\<and>\n        length ys \\<le> length (a # xs))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>ys.\n       lex_ext_unbounded f [] ys =\n       ((\\<exists>i<length [].\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ([] ! j) (ys ! j))) \\<and>\n            fst (f ([] ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ([] ! i) (ys ! i))) \\<and>\n        length ys < length [],\n        (\\<exists>i<length [].\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ([] ! j) (ys ! j))) \\<and>\n            fst (f ([] ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ([] ! i) (ys ! i))) \\<and>\n        length ys \\<le> length [])\n 2. \\<And>a xs ys.\n       (\\<And>ys.\n           lex_ext_unbounded f xs ys =\n           ((\\<exists>i<length xs.\n                i < length ys \\<and>\n                (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n                fst (f (xs ! i) (ys ! i))) \\<or>\n            (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n            length ys < length xs,\n            (\\<exists>i<length xs.\n                i < length ys \\<and>\n                (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n                fst (f (xs ! i) (ys ! i))) \\<or>\n            (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n            length ys \\<le> length xs)) \\<Longrightarrow>\n       lex_ext_unbounded f (a # xs) ys =\n       ((\\<exists>i<length (a # xs).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # xs) ! j) (ys ! j))) \\<and>\n            fst (f ((a # xs) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # xs) ! i) (ys ! i))) \\<and>\n        length ys < length (a # xs),\n        (\\<exists>i<length (a # xs).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # xs) ! j) (ys ! j))) \\<and>\n            fst (f ((a # xs) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # xs) ! i) (ys ! i))) \\<and>\n        length ys \\<le> length (a # xs))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_ext_unbounded f [] ys =\n    ((\\<exists>i<length [].\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ([] ! j) (ys ! j))) \\<and>\n         fst (f ([] ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ([] ! i) (ys ! i))) \\<and>\n     length ys < length [],\n     (\\<exists>i<length [].\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ([] ! j) (ys ! j))) \\<and>\n         fst (f ([] ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ([] ! i) (ys ! i))) \\<and>\n     length ys \\<le> length [])", "by (cases ys, auto)"], ["proof (state)\nthis:\n  lex_ext_unbounded f [] ys =\n  ((\\<exists>i<length [].\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ([] ! j) (ys ! j))) \\<and>\n       fst (f ([] ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ([] ! i) (ys ! i))) \\<and>\n   length ys < length [],\n   (\\<exists>i<length [].\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ([] ! j) (ys ! j))) \\<and>\n       fst (f ([] ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ([] ! i) (ys ! i))) \\<and>\n   length ys \\<le> length [])\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       (\\<And>ys.\n           lex_ext_unbounded f xs ys =\n           ((\\<exists>i<length xs.\n                i < length ys \\<and>\n                (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n                fst (f (xs ! i) (ys ! i))) \\<or>\n            (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n            length ys < length xs,\n            (\\<exists>i<length xs.\n                i < length ys \\<and>\n                (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n                fst (f (xs ! i) (ys ! i))) \\<or>\n            (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n            length ys \\<le> length xs)) \\<Longrightarrow>\n       lex_ext_unbounded f (a # xs) ys =\n       ((\\<exists>i<length (a # xs).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # xs) ! j) (ys ! j))) \\<and>\n            fst (f ((a # xs) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # xs) ! i) (ys ! i))) \\<and>\n        length ys < length (a # xs),\n        (\\<exists>i<length (a # xs).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # xs) ! j) (ys ! j))) \\<and>\n            fst (f ((a # xs) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # xs) ! i) (ys ! i))) \\<and>\n        length ys \\<le> length (a # xs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       (\\<And>ys.\n           lex_ext_unbounded f xs ys =\n           ((\\<exists>i<length xs.\n                i < length ys \\<and>\n                (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n                fst (f (xs ! i) (ys ! i))) \\<or>\n            (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n            length ys < length xs,\n            (\\<exists>i<length xs.\n                i < length ys \\<and>\n                (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n                fst (f (xs ! i) (ys ! i))) \\<or>\n            (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n            length ys \\<le> length xs)) \\<Longrightarrow>\n       lex_ext_unbounded f (a # xs) ys =\n       ((\\<exists>i<length (a # xs).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # xs) ! j) (ys ! j))) \\<and>\n            fst (f ((a # xs) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # xs) ! i) (ys ! i))) \\<and>\n        length ys < length (a # xs),\n        (\\<exists>i<length (a # xs).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # xs) ! j) (ys ! j))) \\<and>\n            fst (f ((a # xs) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # xs) ! i) (ys ! i))) \\<and>\n        length ys \\<le> length (a # xs))", "case (Cons a as)"], ["proof (state)\nthis:\n  lex_ext_unbounded f as ?ys =\n  ((\\<exists>i<length as.\n       i < length ?ys \\<and>\n       (\\<forall>j<i. snd (f (as ! j) (?ys ! j))) \\<and>\n       fst (f (as ! i) (?ys ! i))) \\<or>\n   (\\<forall>i<length ?ys. snd (f (as ! i) (?ys ! i))) \\<and>\n   length ?ys < length as,\n   (\\<exists>i<length as.\n       i < length ?ys \\<and>\n       (\\<forall>j<i. snd (f (as ! j) (?ys ! j))) \\<and>\n       fst (f (as ! i) (?ys ! i))) \\<or>\n   (\\<forall>i<length ?ys. snd (f (as ! i) (?ys ! i))) \\<and>\n   length ?ys \\<le> length as)\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       (\\<And>ys.\n           lex_ext_unbounded f xs ys =\n           ((\\<exists>i<length xs.\n                i < length ys \\<and>\n                (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n                fst (f (xs ! i) (ys ! i))) \\<or>\n            (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n            length ys < length xs,\n            (\\<exists>i<length xs.\n                i < length ys \\<and>\n                (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n                fst (f (xs ! i) (ys ! i))) \\<or>\n            (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n            length ys \\<le> length xs)) \\<Longrightarrow>\n       lex_ext_unbounded f (a # xs) ys =\n       ((\\<exists>i<length (a # xs).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # xs) ! j) (ys ! j))) \\<and>\n            fst (f ((a # xs) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # xs) ! i) (ys ! i))) \\<and>\n        length ys < length (a # xs),\n        (\\<exists>i<length (a # xs).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # xs) ! j) (ys ! j))) \\<and>\n            fst (f ((a # xs) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # xs) ! i) (ys ! i))) \\<and>\n        length ys \\<le> length (a # xs))", "note oCons = this"], ["proof (state)\nthis:\n  lex_ext_unbounded f as ?ys =\n  ((\\<exists>i<length as.\n       i < length ?ys \\<and>\n       (\\<forall>j<i. snd (f (as ! j) (?ys ! j))) \\<and>\n       fst (f (as ! i) (?ys ! i))) \\<or>\n   (\\<forall>i<length ?ys. snd (f (as ! i) (?ys ! i))) \\<and>\n   length ?ys < length as,\n   (\\<exists>i<length as.\n       i < length ?ys \\<and>\n       (\\<forall>j<i. snd (f (as ! j) (?ys ! j))) \\<and>\n       fst (f (as ! i) (?ys ! i))) \\<or>\n   (\\<forall>i<length ?ys. snd (f (as ! i) (?ys ! i))) \\<and>\n   length ?ys \\<le> length as)\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       (\\<And>ys.\n           lex_ext_unbounded f xs ys =\n           ((\\<exists>i<length xs.\n                i < length ys \\<and>\n                (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n                fst (f (xs ! i) (ys ! i))) \\<or>\n            (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n            length ys < length xs,\n            (\\<exists>i<length xs.\n                i < length ys \\<and>\n                (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n                fst (f (xs ! i) (ys ! i))) \\<or>\n            (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n            length ys \\<le> length xs)) \\<Longrightarrow>\n       lex_ext_unbounded f (a # xs) ys =\n       ((\\<exists>i<length (a # xs).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # xs) ! j) (ys ! j))) \\<and>\n            fst (f ((a # xs) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # xs) ! i) (ys ! i))) \\<and>\n        length ys < length (a # xs),\n        (\\<exists>i<length (a # xs).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # xs) ! j) (ys ! j))) \\<and>\n            fst (f ((a # xs) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # xs) ! i) (ys ! i))) \\<and>\n        length ys \\<le> length (a # xs))", "from oCons"], ["proof (chain)\npicking this:\n  lex_ext_unbounded f as ?ys =\n  ((\\<exists>i<length as.\n       i < length ?ys \\<and>\n       (\\<forall>j<i. snd (f (as ! j) (?ys ! j))) \\<and>\n       fst (f (as ! i) (?ys ! i))) \\<or>\n   (\\<forall>i<length ?ys. snd (f (as ! i) (?ys ! i))) \\<and>\n   length ?ys < length as,\n   (\\<exists>i<length as.\n       i < length ?ys \\<and>\n       (\\<forall>j<i. snd (f (as ! j) (?ys ! j))) \\<and>\n       fst (f (as ! i) (?ys ! i))) \\<or>\n   (\\<forall>i<length ?ys. snd (f (as ! i) (?ys ! i))) \\<and>\n   length ?ys \\<le> length as)", "show ?case"], ["proof (prove)\nusing this:\n  lex_ext_unbounded f as ?ys =\n  ((\\<exists>i<length as.\n       i < length ?ys \\<and>\n       (\\<forall>j<i. snd (f (as ! j) (?ys ! j))) \\<and>\n       fst (f (as ! i) (?ys ! i))) \\<or>\n   (\\<forall>i<length ?ys. snd (f (as ! i) (?ys ! i))) \\<and>\n   length ?ys < length as,\n   (\\<exists>i<length as.\n       i < length ?ys \\<and>\n       (\\<forall>j<i. snd (f (as ! j) (?ys ! j))) \\<and>\n       fst (f (as ! i) (?ys ! i))) \\<or>\n   (\\<forall>i<length ?ys. snd (f (as ! i) (?ys ! i))) \\<and>\n   length ?ys \\<le> length as)\n\ngoal (1 subgoal):\n 1. lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "proof (cases ys, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>ys.\n                   lex_ext_unbounded f as ys =\n                   ((\\<exists>i<length as.\n                        i < length ys \\<and>\n                        (\\<forall>j<i. snd (f (as ! j) (ys ! j))) \\<and>\n                        fst (f (as ! i) (ys ! i))) \\<or>\n                    (\\<forall>i<length ys. snd (f (as ! i) (ys ! i))) \\<and>\n                    length ys < length as,\n                    (\\<exists>i<length as.\n                        i < length ys \\<and>\n                        (\\<forall>j<i. snd (f (as ! j) (ys ! j))) \\<and>\n                        fst (f (as ! i) (ys ! i))) \\<or>\n                    (\\<forall>i<length ys. snd (f (as ! i) (ys ! i))) \\<and>\n                    length ys \\<le> length as);\n        ys = aa # list\\<rbrakk>\n       \\<Longrightarrow> lex_ext_unbounded f (a # as) ys =\n                         ((\\<exists>i<length (a # as).\n                              i < length ys \\<and>\n                              (\\<forall>j<i.\n                                  snd (f ((a # as) ! j) (ys ! j))) \\<and>\n                              fst (f ((a # as) ! i) (ys ! i))) \\<or>\n                          (\\<forall>i<length ys.\n                              snd (f ((a # as) ! i) (ys ! i))) \\<and>\n                          length ys < length (a # as),\n                          (\\<exists>i<length (a # as).\n                              i < length ys \\<and>\n                              (\\<forall>j<i.\n                                  snd (f ((a # as) ! j) (ys ! j))) \\<and>\n                              fst (f ((a # as) ! i) (ys ! i))) \\<or>\n                          (\\<forall>i<length ys.\n                              snd (f ((a # as) ! i) (ys ! i))) \\<and>\n                          length ys \\<le> length (a # as))", "case (Cons b bs)"], ["proof (state)\nthis:\n  ys = b # bs\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>ys.\n                   lex_ext_unbounded f as ys =\n                   ((\\<exists>i<length as.\n                        i < length ys \\<and>\n                        (\\<forall>j<i. snd (f (as ! j) (ys ! j))) \\<and>\n                        fst (f (as ! i) (ys ! i))) \\<or>\n                    (\\<forall>i<length ys. snd (f (as ! i) (ys ! i))) \\<and>\n                    length ys < length as,\n                    (\\<exists>i<length as.\n                        i < length ys \\<and>\n                        (\\<forall>j<i. snd (f (as ! j) (ys ! j))) \\<and>\n                        fst (f (as ! i) (ys ! i))) \\<or>\n                    (\\<forall>i<length ys. snd (f (as ! i) (ys ! i))) \\<and>\n                    length ys \\<le> length as);\n        ys = aa # list\\<rbrakk>\n       \\<Longrightarrow> lex_ext_unbounded f (a # as) ys =\n                         ((\\<exists>i<length (a # as).\n                              i < length ys \\<and>\n                              (\\<forall>j<i.\n                                  snd (f ((a # as) ! j) (ys ! j))) \\<and>\n                              fst (f ((a # as) ! i) (ys ! i))) \\<or>\n                          (\\<forall>i<length ys.\n                              snd (f ((a # as) ! i) (ys ! i))) \\<and>\n                          length ys < length (a # as),\n                          (\\<exists>i<length (a # as).\n                              i < length ys \\<and>\n                              (\\<forall>j<i.\n                                  snd (f ((a # as) ! j) (ys ! j))) \\<and>\n                              fst (f ((a # as) ! i) (ys ! i))) \\<or>\n                          (\\<forall>i<length ys.\n                              snd (f ((a # as) ! i) (ys ! i))) \\<and>\n                          length ys \\<le> length (a # as))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "proof (cases \"f a b\")"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa ba.\n       f a b = (aa, ba) \\<Longrightarrow>\n       lex_ext_unbounded f (a # as) ys =\n       ((\\<exists>i<length (a # as).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n            fst (f ((a # as) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n        length ys < length (a # as),\n        (\\<exists>i<length (a # as).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n            fst (f ((a # as) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n        length ys \\<le> length (a # as))", "case (Pair stri nstri)"], ["proof (state)\nthis:\n  f a b = (stri, nstri)\n\ngoal (1 subgoal):\n 1. \\<And>aa ba.\n       f a b = (aa, ba) \\<Longrightarrow>\n       lex_ext_unbounded f (a # as) ys =\n       ((\\<exists>i<length (a # as).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n            fst (f ((a # as) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n        length ys < length (a # as),\n        (\\<exists>i<length (a # as).\n            i < length ys \\<and>\n            (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n            fst (f ((a # as) ! i) (ys ! i))) \\<or>\n        (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n        length ys \\<le> length (a # as))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "proof (cases stri)"], ["proof (state)\ngoal (2 subgoals):\n 1. stri \\<Longrightarrow>\n    lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))\n 2. \\<not> stri \\<Longrightarrow>\n    lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "case True"], ["proof (state)\nthis:\n  stri\n\ngoal (2 subgoals):\n 1. stri \\<Longrightarrow>\n    lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))\n 2. \\<not> stri \\<Longrightarrow>\n    lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "with Pair Cons"], ["proof (chain)\npicking this:\n  f a b = (stri, nstri)\n  ys = b # bs\n  stri", "show ?thesis"], ["proof (prove)\nusing this:\n  f a b = (stri, nstri)\n  ys = b # bs\n  stri\n\ngoal (1 subgoal):\n 1. lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "by auto"], ["proof (state)\nthis:\n  lex_ext_unbounded f (a # as) ys =\n  ((\\<exists>i<length (a # as).\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n       fst (f ((a # as) ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n   length ys < length (a # as),\n   (\\<exists>i<length (a # as).\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n       fst (f ((a # as) ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n   length ys \\<le> length (a # as))\n\ngoal (1 subgoal):\n 1. \\<not> stri \\<Longrightarrow>\n    lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> stri \\<Longrightarrow>\n    lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "case False"], ["proof (state)\nthis:\n  \\<not> stri\n\ngoal (1 subgoal):\n 1. \\<not> stri \\<Longrightarrow>\n    lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "proof (cases nstri)"], ["proof (state)\ngoal (2 subgoals):\n 1. nstri \\<Longrightarrow>\n    lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))\n 2. \\<not> nstri \\<Longrightarrow>\n    lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "case False"], ["proof (state)\nthis:\n  \\<not> nstri\n\ngoal (2 subgoals):\n 1. nstri \\<Longrightarrow>\n    lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))\n 2. \\<not> nstri \\<Longrightarrow>\n    lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "with \\<open>\\<not> stri\\<close> Pair Cons"], ["proof (chain)\npicking this:\n  \\<not> stri\n  f a b = (stri, nstri)\n  ys = b # bs\n  \\<not> nstri", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> stri\n  f a b = (stri, nstri)\n  ys = b # bs\n  \\<not> nstri\n\ngoal (1 subgoal):\n 1. lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "by force"], ["proof (state)\nthis:\n  lex_ext_unbounded f (a # as) ys =\n  ((\\<exists>i<length (a # as).\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n       fst (f ((a # as) ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n   length ys < length (a # as),\n   (\\<exists>i<length (a # as).\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n       fst (f ((a # as) ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n   length ys \\<le> length (a # as))\n\ngoal (1 subgoal):\n 1. nstri \\<Longrightarrow>\n    lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. nstri \\<Longrightarrow>\n    lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "case True"], ["proof (state)\nthis:\n  nstri\n\ngoal (1 subgoal):\n 1. nstri \\<Longrightarrow>\n    lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "with False Pair"], ["proof (chain)\npicking this:\n  \\<not> stri\n  f a b = (stri, nstri)\n  nstri", "have f: \"f a b = (False, True)\""], ["proof (prove)\nusing this:\n  \\<not> stri\n  f a b = (stri, nstri)\n  nstri\n\ngoal (1 subgoal):\n 1. f a b = (False, True)", "by auto"], ["proof (state)\nthis:\n  f a b = (False, True)\n\ngoal (1 subgoal):\n 1. nstri \\<Longrightarrow>\n    lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_ext_unbounded f (a # as) ys =\n    ((\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys < length (a # as),\n     (\\<exists>i<length (a # as).\n         i < length ys \\<and>\n         (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n         fst (f ((a # as) ! i) (ys ! i))) \\<or>\n     (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n     length ys \\<le> length (a # as))", "by (simp add: all_Suc_conv ex_Suc_conv Cons f oCons)"], ["proof (state)\nthis:\n  lex_ext_unbounded f (a # as) ys =\n  ((\\<exists>i<length (a # as).\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n       fst (f ((a # as) ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n   length ys < length (a # as),\n   (\\<exists>i<length (a # as).\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n       fst (f ((a # as) ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n   length ys \\<le> length (a # as))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lex_ext_unbounded f (a # as) ys =\n  ((\\<exists>i<length (a # as).\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n       fst (f ((a # as) ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n   length ys < length (a # as),\n   (\\<exists>i<length (a # as).\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n       fst (f ((a # as) ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n   length ys \\<le> length (a # as))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lex_ext_unbounded f (a # as) ys =\n  ((\\<exists>i<length (a # as).\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n       fst (f ((a # as) ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n   length ys < length (a # as),\n   (\\<exists>i<length (a # as).\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n       fst (f ((a # as) ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n   length ys \\<le> length (a # as))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lex_ext_unbounded f (a # as) ys =\n  ((\\<exists>i<length (a # as).\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n       fst (f ((a # as) ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n   length ys < length (a # as),\n   (\\<exists>i<length (a # as).\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n       fst (f ((a # as) ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n   length ys \\<le> length (a # as))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lex_ext_unbounded f (a # as) ys =\n  ((\\<exists>i<length (a # as).\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n       fst (f ((a # as) ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n   length ys < length (a # as),\n   (\\<exists>i<length (a # as).\n       i < length ys \\<and>\n       (\\<forall>j<i. snd (f ((a # as) ! j) (ys ! j))) \\<and>\n       fst (f ((a # as) ! i) (ys ! i))) \\<or>\n   (\\<forall>i<length ys. snd (f ((a # as) ! i) (ys ! i))) \\<and>\n   length ys \\<le> length (a # as))\n\ngoal:\nNo subgoals!", "qed"], ["", "declare lex_ext_unbounded.simps[simp del]"], ["", "text \\<open>\n  The lexicographic extension of an order pair takes a natural number as maximum bound.\n  A decrease with lists of unequal lengths will never be successful if the length of the\n  second list exceeds this bound. The bound is essential to preserve strong normalization.\n\\<close>"], ["", "definition lex_ext :: \"('a \\<Rightarrow> 'a \\<Rightarrow> bool \\<times> bool) \\<Rightarrow> nat \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool \\<times> bool\"\n  where\n    \"lex_ext f n ss ts =\n      (let lts = length ts in \n      if (length ss = lts \\<or> lts \\<le> n) then lex_ext_unbounded f ss ts\n      else (False, False))\""], ["", "lemma lex_ext_iff: \"(lex_ext f m xs ys) = (\n  (length xs = length ys \\<or> length ys \\<le> m) \\<and> ((\\<exists> i < length xs. i < length ys \\<and> (\\<forall> j < i. snd (f (xs ! j) (ys ! j))) \\<and> fst (f (xs ! i) (ys !i))) \\<or> \n  (\\<forall> i < length ys. snd (f (xs ! i) (ys ! i))) \\<and> length xs > length ys),\n  (length xs = length ys \\<or> length ys \\<le> m) \\<and>\n  ((\\<exists> i < length xs. i < length ys \\<and> (\\<forall> j < i. snd (f (xs ! j) (ys ! j))) \\<and> fst (f (xs ! i) (ys !i))) \\<or> \n  (\\<forall> i < length ys. snd (f (xs ! i) (ys ! i))) \\<and> length xs \\<ge> length ys))\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_ext f m xs ys =\n    ((length xs = length ys \\<or> length ys \\<le> m) \\<and>\n     ((\\<exists>i<length xs.\n          i < length ys \\<and>\n          (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n          fst (f (xs ! i) (ys ! i))) \\<or>\n      (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n      length ys < length xs),\n     (length xs = length ys \\<or> length ys \\<le> m) \\<and>\n     ((\\<exists>i<length xs.\n          i < length ys \\<and>\n          (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n          fst (f (xs ! i) (ys ! i))) \\<or>\n      (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n      length ys \\<le> length xs))", "unfolding lex_ext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let lts = length ys\n     in if length xs = lts \\<or> lts \\<le> m then lex_ext_unbounded f xs ys\n        else (False, False)) =\n    ((length xs = length ys \\<or> length ys \\<le> m) \\<and>\n     ((\\<exists>i<length xs.\n          i < length ys \\<and>\n          (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n          fst (f (xs ! i) (ys ! i))) \\<or>\n      (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n      length ys < length xs),\n     (length xs = length ys \\<or> length ys \\<le> m) \\<and>\n     ((\\<exists>i<length xs.\n          i < length ys \\<and>\n          (\\<forall>j<i. snd (f (xs ! j) (ys ! j))) \\<and>\n          fst (f (xs ! i) (ys ! i))) \\<or>\n      (\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))) \\<and>\n      length ys \\<le> length xs))", "by (simp only: lex_ext_unbounded_iff Let_def, auto)"], ["", "lemma lex_ext_to_lex_ext_unbounded: \n  assumes \"length xs \\<le> n\" and \"length ys \\<le> n\"\n  shows \"lex_ext f n xs ys = lex_ext_unbounded f xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_ext f n xs ys = lex_ext_unbounded f xs ys", "using assms"], ["proof (prove)\nusing this:\n  length xs \\<le> n\n  length ys \\<le> n\n\ngoal (1 subgoal):\n 1. lex_ext f n xs ys = lex_ext_unbounded f xs ys", "by (simp add: lex_ext_def)"], ["", "lemma lex_ext_stri_imp_nstri: \n  assumes \"fst (lex_ext f m xs ys)\" \n  shows \"snd (lex_ext f m xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (lex_ext f m xs ys)", "using assms"], ["proof (prove)\nusing this:\n  fst (lex_ext f m xs ys)\n\ngoal (1 subgoal):\n 1. snd (lex_ext f m xs ys)", "by (auto simp: lex_ext_iff)"], ["", "lemma lex_ext_unbounded_stri_imp_nstri: \n  assumes \"fst (lex_ext_unbounded f xs ys)\" \n  shows \"snd (lex_ext_unbounded f xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded f xs ys)", "using assms"], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded f xs ys)\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded f xs ys)", "by (auto simp: lex_ext_unbounded_iff)"], ["", "lemma all_nstri_imp_lex_nstri: assumes \"\\<forall> i < length ys. snd (f (xs ! i) (ys ! i))\" and \"length xs \\<ge> length ys\" and \"length xs = length ys \\<or> length ys \\<le> m\"\n  shows \"snd (lex_ext f m xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (lex_ext f m xs ys)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>i<length ys. snd (f (xs ! i) (ys ! i))\n  length ys \\<le> length xs\n  length xs = length ys \\<or> length ys \\<le> m\n\ngoal (1 subgoal):\n 1. snd (lex_ext f m xs ys)", "by (auto simp: lex_ext_iff)"], ["", "lemma lex_ext_cong[fundef_cong]: fixes f g m1 m2 xs1 xs2 ys1 ys2\n  assumes \"length xs1 = length ys1\" and \"m1 = m2\" and \"length xs2 = length ys2\" and \"\\<And> i. \\<lbrakk>i < length ys1; i < length ys2\\<rbrakk> \\<Longrightarrow> f (xs1 ! i) (xs2 ! i) = g (ys1 ! i) (ys2 ! i)\" \n  shows \"lex_ext f m1 xs1 xs2 = lex_ext g m2 ys1 ys2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_ext f m1 xs1 xs2 = lex_ext g m2 ys1 ys2", "using assms"], ["proof (prove)\nusing this:\n  length xs1 = length ys1\n  m1 = m2\n  length xs2 = length ys2\n  \\<lbrakk>?i < length ys1; ?i < length ys2\\<rbrakk>\n  \\<Longrightarrow> f (xs1 ! ?i) (xs2 ! ?i) = g (ys1 ! ?i) (ys2 ! ?i)\n\ngoal (1 subgoal):\n 1. lex_ext f m1 xs1 xs2 = lex_ext g m2 ys1 ys2", "by (auto simp: lex_ext_iff)"], ["", "lemma lex_ext_unbounded_cong[fundef_cong]: assumes \"as = as'\" and \"bs = bs'\"\n  and \"\\<And> i. i < length as' \\<Longrightarrow> i < length bs' \\<Longrightarrow> f (as' ! i) (bs' ! i) = g (as' ! i) (bs' ! i)\" shows \"lex_ext_unbounded f as bs = lex_ext_unbounded g as' bs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_ext_unbounded f as bs = lex_ext_unbounded g as' bs'", "unfolding assms lex_ext_unbounded_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<exists>i<length as'.\n         i < length bs' \\<and>\n         (\\<forall>j<i. snd (f (as' ! j) (bs' ! j))) \\<and>\n         fst (f (as' ! i) (bs' ! i))) \\<or>\n     (\\<forall>i<length bs'. snd (f (as' ! i) (bs' ! i))) \\<and>\n     length bs' < length as',\n     (\\<exists>i<length as'.\n         i < length bs' \\<and>\n         (\\<forall>j<i. snd (f (as' ! j) (bs' ! j))) \\<and>\n         fst (f (as' ! i) (bs' ! i))) \\<or>\n     (\\<forall>i<length bs'. snd (f (as' ! i) (bs' ! i))) \\<and>\n     length bs' \\<le> length as') =\n    ((\\<exists>i<length as'.\n         i < length bs' \\<and>\n         (\\<forall>j<i. snd (g (as' ! j) (bs' ! j))) \\<and>\n         fst (g (as' ! i) (bs' ! i))) \\<or>\n     (\\<forall>i<length bs'. snd (g (as' ! i) (bs' ! i))) \\<and>\n     length bs' < length as',\n     (\\<exists>i<length as'.\n         i < length bs' \\<and>\n         (\\<forall>j<i. snd (g (as' ! j) (bs' ! j))) \\<and>\n         fst (g (as' ! i) (bs' ! i))) \\<or>\n     (\\<forall>i<length bs'. snd (g (as' ! i) (bs' ! i))) \\<and>\n     length bs' \\<le> length as')", "using assms(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < length as'; ?i < length bs'\\<rbrakk>\n  \\<Longrightarrow> f (as' ! ?i) (bs' ! ?i) = g (as' ! ?i) (bs' ! ?i)\n\ngoal (1 subgoal):\n 1. ((\\<exists>i<length as'.\n         i < length bs' \\<and>\n         (\\<forall>j<i. snd (f (as' ! j) (bs' ! j))) \\<and>\n         fst (f (as' ! i) (bs' ! i))) \\<or>\n     (\\<forall>i<length bs'. snd (f (as' ! i) (bs' ! i))) \\<and>\n     length bs' < length as',\n     (\\<exists>i<length as'.\n         i < length bs' \\<and>\n         (\\<forall>j<i. snd (f (as' ! j) (bs' ! j))) \\<and>\n         fst (f (as' ! i) (bs' ! i))) \\<or>\n     (\\<forall>i<length bs'. snd (f (as' ! i) (bs' ! i))) \\<and>\n     length bs' \\<le> length as') =\n    ((\\<exists>i<length as'.\n         i < length bs' \\<and>\n         (\\<forall>j<i. snd (g (as' ! j) (bs' ! j))) \\<and>\n         fst (g (as' ! i) (bs' ! i))) \\<or>\n     (\\<forall>i<length bs'. snd (g (as' ! i) (bs' ! i))) \\<and>\n     length bs' < length as',\n     (\\<exists>i<length as'.\n         i < length bs' \\<and>\n         (\\<forall>j<i. snd (g (as' ! j) (bs' ! j))) \\<and>\n         fst (g (as' ! i) (bs' ! i))) \\<or>\n     (\\<forall>i<length bs'. snd (g (as' ! i) (bs' ! i))) \\<and>\n     length bs' \\<le> length as')", "by auto"], ["", "text \\<open>Compatibility is the key property to ensure transitivity of the order.\\<close>"], ["", "text \\<open>\n  We prove compatibility locally, i.e., it only has to hold for elements\n  of the argument lists. Locality is essential for being applicable in recursively\n  defined term orders such as KBO.\n\\<close>"], ["", "lemma lex_ext_compat:\n  assumes compat: \"\\<And> s t u. \\<lbrakk>s \\<in> set ss; t \\<in> set ts; u \\<in> set us\\<rbrakk> \\<Longrightarrow>\n    (snd (f s t) \\<and> fst (f t u) \\<longrightarrow> fst (f s u)) \\<and> \n    (fst (f s t) \\<and> snd (f t u) \\<longrightarrow> fst (f s u)) \\<and> \n    (snd (f s t) \\<and> snd (f t u) \\<longrightarrow> snd (f s u)) \\<and>\n    (fst (f s t) \\<and> fst (f t u) \\<longrightarrow> fst (f s u))\"\n  shows \"\n    (snd (lex_ext f n ss ts) \\<and> fst (lex_ext f n ts us) \\<longrightarrow> fst (lex_ext f n ss us)) \\<and> \n    (fst (lex_ext f n ss ts) \\<and> snd (lex_ext f n ts us) \\<longrightarrow> fst (lex_ext f n ss us)) \\<and> \n    (snd (lex_ext f n ss ts) \\<and> snd (lex_ext f n ts us) \\<longrightarrow> snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and> fst (lex_ext f n ts us) \\<longrightarrow> fst (lex_ext f n ss us))\n    \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "let ?ls = \"length ss\""], ["proof (state)\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "let ?lt = \"length ts\""], ["proof (state)\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "let ?lu = \"length us\""], ["proof (state)\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "let ?st = \"lex_ext f n ss ts\""], ["proof (state)\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "let ?tu = \"lex_ext f n ts us\""], ["proof (state)\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "let ?su = \"lex_ext f n ss us\""], ["proof (state)\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "let ?fst = \"\\<lambda> ss ts i. fst (f (ss ! i) (ts ! i))\""], ["proof (state)\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "let ?snd = \"\\<lambda> ss ts i. snd (f (ss ! i) (ts ! i))\""], ["proof (state)\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "let ?ex = \"\\<lambda> ss ts. \\<exists> i < length ss. i < length ts \\<and> (\\<forall> j < i. ?snd ss ts j) \\<and> ?fst ss ts i\""], ["proof (state)\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "let ?all = \"\\<lambda> ss ts. \\<forall> i < length ts. ?snd ss ts i\""], ["proof (state)\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "have lengths: \"(?ls = ?lt \\<or> ?lt \\<le> n) \\<and> (?lt = ?lu \\<or> ?lu \\<le> n) \\<longrightarrow>\n    (?ls = ?lu \\<or> ?lu \\<le> n)\" (is \"?lst \\<and> ?ltu \\<longrightarrow> ?lsu\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (length ss = length ts \\<or> length ts \\<le> n) \\<and>\n    (length ts = length us \\<or> length us \\<le> n) \\<longrightarrow>\n    length ss = length us \\<or> length us \\<le> n", "by arith"], ["proof (state)\nthis:\n  (length ss = length ts \\<or> length ts \\<le> n) \\<and>\n  (length ts = length us \\<or> length us \\<le> n) \\<longrightarrow>\n  length ss = length us \\<or> length us \\<le> n\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "{"], ["proof (state)\nthis:\n  (length ss = length ts \\<or> length ts \\<le> n) \\<and>\n  (length ts = length us \\<or> length us \\<le> n) \\<longrightarrow>\n  length ss = length us \\<or> length us \\<le> n\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "assume st: \"snd ?st\" and tu: \"fst ?tu\""], ["proof (state)\nthis:\n  snd (lex_ext f n ss ts)\n  fst (lex_ext f n ts us)\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "with lengths"], ["proof (chain)\npicking this:\n  (length ss = length ts \\<or> length ts \\<le> n) \\<and>\n  (length ts = length us \\<or> length us \\<le> n) \\<longrightarrow>\n  length ss = length us \\<or> length us \\<le> n\n  snd (lex_ext f n ss ts)\n  fst (lex_ext f n ts us)", "have lsu: \"?lsu\""], ["proof (prove)\nusing this:\n  (length ss = length ts \\<or> length ts \\<le> n) \\<and>\n  (length ts = length us \\<or> length us \\<le> n) \\<longrightarrow>\n  length ss = length us \\<or> length us \\<le> n\n  snd (lex_ext f n ss ts)\n  fst (lex_ext f n ts us)\n\ngoal (1 subgoal):\n 1. length ss = length us \\<or> length us \\<le> n", "by (simp add: lex_ext_iff)"], ["proof (state)\nthis:\n  length ss = length us \\<or> length us \\<le> n\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "from st"], ["proof (chain)\npicking this:\n  snd (lex_ext f n ss ts)", "have st: \"?ex ss ts \\<or> ?all ss ts \\<and> ?lt \\<le> ?ls\""], ["proof (prove)\nusing this:\n  snd (lex_ext f n ss ts)\n\ngoal (1 subgoal):\n 1. (\\<exists>i<length ss.\n        i < length ts \\<and>\n        (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n        fst (f (ss ! i) (ts ! i))) \\<or>\n    (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts \\<le> length ss", "by (simp add: lex_ext_iff)"], ["proof (state)\nthis:\n  (\\<exists>i<length ss.\n      i < length ts \\<and>\n      (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n      fst (f (ss ! i) (ts ! i))) \\<or>\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "from tu"], ["proof (chain)\npicking this:\n  fst (lex_ext f n ts us)", "have tu: \"?ex ts us \\<or> ?all ts us \\<and> ?lu < ?lt\""], ["proof (prove)\nusing this:\n  fst (lex_ext f n ts us)\n\ngoal (1 subgoal):\n 1. (\\<exists>i<length ts.\n        i < length us \\<and>\n        (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n        fst (f (ts ! i) (us ! i))) \\<or>\n    (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts", "by (simp add: lex_ext_iff)"], ["proof (state)\nthis:\n  (\\<exists>i<length ts.\n      i < length us \\<and>\n      (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n      fst (f (ts ! i) (us ! i))) \\<or>\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "from st"], ["proof (chain)\npicking this:\n  (\\<exists>i<length ss.\n      i < length ts \\<and>\n      (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n      fst (f (ss ! i) (ts ! i))) \\<or>\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss", "have \"fst ?su\""], ["proof (prove)\nusing this:\n  (\\<exists>i<length ss.\n      i < length ts \\<and>\n      (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n      fst (f (ss ! i) (ts ! i))) \\<or>\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i<length ss.\n       i < length ts \\<and>\n       (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n       fst (f (ss ! i) (ts ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts \\<le> length ss \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "assume st: \"?ex ss ts\""], ["proof (state)\nthis:\n  \\<exists>i<length ss.\n     i < length ts \\<and>\n     (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n     fst (f (ss ! i) (ts ! i))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ss.\n       i < length ts \\<and>\n       (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n       fst (f (ss ! i) (ts ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts \\<le> length ss \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i<length ss.\n     i < length ts \\<and>\n     (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n     fst (f (ss ! i) (ts ! i))", "obtain i1 where i1: \"i1 < ?ls \\<and> i1 < ?lt\" and fst1: \"?fst ss ts i1\" and snd1: \"\\<forall> j < i1. ?snd ss ts j\""], ["proof (prove)\nusing this:\n  \\<exists>i<length ss.\n     i < length ts \\<and>\n     (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n     fst (f (ss ! i) (ts ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>i1.\n        \\<lbrakk>i1 < length ss \\<and> i1 < length ts;\n         fst (f (ss ! i1) (ts ! i1));\n         \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  i1 < length ss \\<and> i1 < length ts\n  fst (f (ss ! i1) (ts ! i1))\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ss.\n       i < length ts \\<and>\n       (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n       fst (f (ss ! i) (ts ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts \\<le> length ss \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "from tu"], ["proof (chain)\npicking this:\n  (\\<exists>i<length ts.\n      i < length us \\<and>\n      (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n      fst (f (ts ! i) (us ! i))) \\<or>\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>i<length ts.\n      i < length us \\<and>\n      (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n      fst (f (ts ! i) (us ! i))) \\<or>\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts\n\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "assume tu: \"?ex ts us\""], ["proof (state)\nthis:\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))", "obtain i2 where i2: \"i2 < ?lt \\<and> i2 < ?lu\" and fst2: \"?fst ts us i2\" and snd2: \"\\<forall> j < i2. ?snd ts us j\""], ["proof (prove)\nusing this:\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>i2.\n        \\<lbrakk>i2 < length ts \\<and> i2 < length us;\n         fst (f (ts ! i2) (us ! i2));\n         \\<forall>j<i2. snd (f (ts ! j) (us ! j))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i2 < length ts \\<and> i2 < length us\n  fst (f (ts ! i2) (us ! i2))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "let ?i = \"min i1 i2\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "from i1 i2"], ["proof (chain)\npicking this:\n  i1 < length ss \\<and> i1 < length ts\n  i2 < length ts \\<and> i2 < length us", "have i: \"?i < ?ls \\<and> ?i < ?lt \\<and> ?i < ?lu\""], ["proof (prove)\nusing this:\n  i1 < length ss \\<and> i1 < length ts\n  i2 < length ts \\<and> i2 < length us\n\ngoal (1 subgoal):\n 1. min i1 i2 < length ss \\<and>\n    min i1 i2 < length ts \\<and> min i1 i2 < length us", "by auto"], ["proof (state)\nthis:\n  min i1 i2 < length ss \\<and>\n  min i1 i2 < length ts \\<and> min i1 i2 < length us\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "then"], ["proof (chain)\npicking this:\n  min i1 i2 < length ss \\<and>\n  min i1 i2 < length ts \\<and> min i1 i2 < length us", "have ssi: \"ss ! ?i \\<in> set ss\" and tsi: \"ts ! ?i \\<in> set ts\" and usi: \"us ! ?i \\<in> set us\""], ["proof (prove)\nusing this:\n  min i1 i2 < length ss \\<and>\n  min i1 i2 < length ts \\<and> min i1 i2 < length us\n\ngoal (1 subgoal):\n 1. ss ! min i1 i2 \\<in> set ss &&&\n    ts ! min i1 i2 \\<in> set ts &&& us ! min i1 i2 \\<in> set us", "by auto"], ["proof (state)\nthis:\n  ss ! min i1 i2 \\<in> set ss\n  ts ! min i1 i2 \\<in> set ts\n  us ! min i1 i2 \\<in> set us\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "have snd: \"\\<forall> j < ?i. ?snd ss us j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<min i1 i2. snd (f (ss ! j) (us ! j))", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < min i1 i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < min i1 i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "assume j: \"j < ?i\""], ["proof (state)\nthis:\n  j < min i1 i2\n\ngoal (1 subgoal):\n 1. \\<And>j. j < min i1 i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "with snd1 snd2"], ["proof (chain)\npicking this:\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  j < min i1 i2", "have snd1: \"?snd ss ts j\" and snd2: \"?snd ts us j\""], ["proof (prove)\nusing this:\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  j < min i1 i2\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (ts ! j)) &&& snd (f (ts ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. \\<And>j. j < min i1 i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from j i"], ["proof (chain)\npicking this:\n  j < min i1 i2\n  min i1 i2 < length ss \\<and>\n  min i1 i2 < length ts \\<and> min i1 i2 < length us", "have ssj: \"ss ! j \\<in> set ss\" and tsj: \"ts ! j \\<in> set ts\" and usj: \"us ! j \\<in> set us\""], ["proof (prove)\nusing this:\n  j < min i1 i2\n  min i1 i2 < length ss \\<and>\n  min i1 i2 < length ts \\<and> min i1 i2 < length us\n\ngoal (1 subgoal):\n 1. ss ! j \\<in> set ss &&& ts ! j \\<in> set ts &&& us ! j \\<in> set us", "by auto"], ["proof (state)\nthis:\n  ss ! j \\<in> set ss\n  ts ! j \\<in> set ts\n  us ! j \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < min i1 i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from compat[OF ssj tsj usj] snd1 snd2"], ["proof (chain)\npicking this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))", "show \"?snd ss us j\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (us ! j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<min i1 i2. snd (f (ss ! j) (us ! j))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "have fst: \"?fst ss us ?i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (us ! min i1 i2))", "proof (cases \"i1 < i2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i1 < i2 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "case True"], ["proof (state)\nthis:\n  i1 < i2\n\ngoal (2 subgoals):\n 1. i1 < i2 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "then"], ["proof (chain)\npicking this:\n  i1 < i2", "have \"?i = i1\""], ["proof (prove)\nusing this:\n  i1 < i2\n\ngoal (1 subgoal):\n 1. min i1 i2 = i1", "by simp"], ["proof (state)\nthis:\n  min i1 i2 = i1\n\ngoal (2 subgoals):\n 1. i1 < i2 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with True fst1 snd2"], ["proof (chain)\npicking this:\n  i1 < i2\n  fst (f (ss ! i1) (ts ! i1))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  min i1 i2 = i1", "have \"?fst ss ts ?i\" and \"?snd ts us ?i\""], ["proof (prove)\nusing this:\n  i1 < i2\n  fst (f (ss ! i1) (ts ! i1))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  min i1 i2 = i1\n\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (ts ! min i1 i2)) &&&\n    snd (f (ts ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  snd (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (2 subgoals):\n 1. i1 < i2 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with compat[OF ssi tsi usi]"], ["proof (chain)\npicking this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  snd (f (ts ! min i1 i2) (us ! min i1 i2))", "show \"?fst ss us ?i\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  snd (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "case False"], ["proof (state)\nthis:\n  \\<not> i1 < i2\n\ngoal (1 subgoal):\n 1. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (us ! min i1 i2))", "proof (cases \"i2 < i1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i2 < i1 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "case True"], ["proof (state)\nthis:\n  i2 < i1\n\ngoal (2 subgoals):\n 1. i2 < i1 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "then"], ["proof (chain)\npicking this:\n  i2 < i1", "have \"?i = i2\""], ["proof (prove)\nusing this:\n  i2 < i1\n\ngoal (1 subgoal):\n 1. min i1 i2 = i2", "by simp"], ["proof (state)\nthis:\n  min i1 i2 = i2\n\ngoal (2 subgoals):\n 1. i2 < i1 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with True snd1 fst2"], ["proof (chain)\npicking this:\n  i2 < i1\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  fst (f (ts ! i2) (us ! i2))\n  min i1 i2 = i2", "have \"?snd ss ts ?i\" and \"?fst ts us ?i\""], ["proof (prove)\nusing this:\n  i2 < i1\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  fst (f (ts ! i2) (us ! i2))\n  min i1 i2 = i2\n\ngoal (1 subgoal):\n 1. snd (f (ss ! min i1 i2) (ts ! min i1 i2)) &&&\n    fst (f (ts ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (2 subgoals):\n 1. i2 < i1 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with compat[OF ssi tsi usi]"], ["proof (chain)\npicking this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  snd (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))", "show \"?fst ss us ?i\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  snd (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "case False"], ["proof (state)\nthis:\n  \\<not> i2 < i1\n\ngoal (1 subgoal):\n 1. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with \\<open>\\<not> i1 < i2\\<close>"], ["proof (chain)\npicking this:\n  \\<not> i1 < i2\n  \\<not> i2 < i1", "have \"i1 = i2\""], ["proof (prove)\nusing this:\n  \\<not> i1 < i2\n  \\<not> i2 < i1\n\ngoal (1 subgoal):\n 1. i1 = i2", "by simp"], ["proof (state)\nthis:\n  i1 = i2\n\ngoal (1 subgoal):\n 1. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with fst1 fst2"], ["proof (chain)\npicking this:\n  fst (f (ss ! i1) (ts ! i1))\n  fst (f (ts ! i2) (us ! i2))\n  i1 = i2", "have \"?fst ss ts ?i\" and \"?fst ts us ?i\""], ["proof (prove)\nusing this:\n  fst (f (ss ! i1) (ts ! i1))\n  fst (f (ts ! i2) (us ! i2))\n  i1 = i2\n\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (ts ! min i1 i2)) &&&\n    fst (f (ts ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with compat[OF ssi tsi usi]"], ["proof (chain)\npicking this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))", "show \"?fst ss us ?i\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (us ! min i1 i2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (us ! min i1 i2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (us ! min i1 i2))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "by (simp add: lex_ext_iff lsu, rule disjI1, rule exI[of _ ?i], simp add: fst snd i)"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "assume tu: \"?all ts us \\<and> ?lu < ?lt\""], ["proof (state)\nthis:\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "proof (cases \"i1 < ?lu\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "case True"], ["proof (state)\nthis:\n  i1 < length us\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "then"], ["proof (chain)\npicking this:\n  i1 < length us", "have usi: \"us ! i1 \\<in> set us\""], ["proof (prove)\nusing this:\n  i1 < length us\n\ngoal (1 subgoal):\n 1. us ! i1 \\<in> set us", "by auto"], ["proof (state)\nthis:\n  us ! i1 \\<in> set us\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "from i1"], ["proof (chain)\npicking this:\n  i1 < length ss \\<and> i1 < length ts", "have ssi: \"ss ! i1 \\<in> set ss\" and tsi: \"ts ! i1 \\<in> set ts\""], ["proof (prove)\nusing this:\n  i1 < length ss \\<and> i1 < length ts\n\ngoal (1 subgoal):\n 1. ss ! i1 \\<in> set ss &&& ts ! i1 \\<in> set ts", "by auto"], ["proof (state)\nthis:\n  ss ! i1 \\<in> set ss\n  ts ! i1 \\<in> set ts\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "from True tu"], ["proof (chain)\npicking this:\n  i1 < length us\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts", "have \"?snd ts us i1\""], ["proof (prove)\nusing this:\n  i1 < length us\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts\n\ngoal (1 subgoal):\n 1. snd (f (ts ! i1) (us ! i1))", "by auto"], ["proof (state)\nthis:\n  snd (f (ts ! i1) (us ! i1))\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "with fst1 compat[OF ssi tsi usi]"], ["proof (chain)\npicking this:\n  fst (f (ss ! i1) (ts ! i1))\n  (snd (f (ss ! i1) (ts ! i1)) \\<and>\n   fst (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1))) \\<and>\n  (fst (f (ss ! i1) (ts ! i1)) \\<and>\n   snd (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1))) \\<and>\n  (snd (f (ss ! i1) (ts ! i1)) \\<and>\n   snd (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   snd (f (ss ! i1) (us ! i1))) \\<and>\n  (fst (f (ss ! i1) (ts ! i1)) \\<and>\n   fst (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1)))\n  snd (f (ts ! i1) (us ! i1))", "have fst: \"?fst ss us i1\""], ["proof (prove)\nusing this:\n  fst (f (ss ! i1) (ts ! i1))\n  (snd (f (ss ! i1) (ts ! i1)) \\<and>\n   fst (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1))) \\<and>\n  (fst (f (ss ! i1) (ts ! i1)) \\<and>\n   snd (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1))) \\<and>\n  (snd (f (ss ! i1) (ts ! i1)) \\<and>\n   snd (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   snd (f (ss ! i1) (us ! i1))) \\<and>\n  (fst (f (ss ! i1) (ts ! i1)) \\<and>\n   fst (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1)))\n  snd (f (ts ! i1) (us ! i1))\n\ngoal (1 subgoal):\n 1. fst (f (ss ! i1) (us ! i1))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! i1) (us ! i1))\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "have snd: \"\\<forall> j < i1. ?snd ss us j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<i1. snd (f (ss ! j) (us ! j))", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < i1 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < i1 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "assume \"j < i1\""], ["proof (state)\nthis:\n  j < i1\n\ngoal (1 subgoal):\n 1. \\<And>j. j < i1 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "with i1 True snd1 tu"], ["proof (chain)\npicking this:\n  i1 < length ss \\<and> i1 < length ts\n  i1 < length us\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts\n  j < i1", "have snd1: \"?snd ss ts j\" and snd2: \"?snd ts us j\" and \n              ssj: \"ss ! j \\<in> set ss\" and tsj: \"ts ! j \\<in> set ts\" and usj: \"us ! j \\<in> set us\""], ["proof (prove)\nusing this:\n  i1 < length ss \\<and> i1 < length ts\n  i1 < length us\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts\n  j < i1\n\ngoal (1 subgoal):\n 1. (snd (f (ss ! j) (ts ! j)) &&& snd (f (ts ! j) (us ! j))) &&&\n    ss ! j \\<in> set ss &&& ts ! j \\<in> set ts &&& us ! j \\<in> set us", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n  ss ! j \\<in> set ss\n  ts ! j \\<in> set ts\n  us ! j \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < i1 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from compat[OF ssj tsj usj] snd1 snd2"], ["proof (chain)\npicking this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))", "show \"?snd ss us j\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (us ! j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<i1. snd (f (ss ! j) (us ! j))\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "with fst lsu True i1"], ["proof (chain)\npicking this:\n  fst (f (ss ! i1) (us ! i1))\n  length ss = length us \\<or> length us \\<le> n\n  i1 < length us\n  i1 < length ss \\<and> i1 < length ts\n  \\<forall>j<i1. snd (f (ss ! j) (us ! j))", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (f (ss ! i1) (us ! i1))\n  length ss = length us \\<or> length us \\<le> n\n  i1 < length us\n  i1 < length ss \\<and> i1 < length ts\n  \\<forall>j<i1. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "by (auto simp: lex_ext_iff)"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "case False"], ["proof (state)\nthis:\n  \\<not> i1 < length us\n\ngoal (1 subgoal):\n 1. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "with i1"], ["proof (chain)\npicking this:\n  i1 < length ss \\<and> i1 < length ts\n  \\<not> i1 < length us", "have lus: \"?lu < ?ls\""], ["proof (prove)\nusing this:\n  i1 < length ss \\<and> i1 < length ts\n  \\<not> i1 < length us\n\ngoal (1 subgoal):\n 1. length us < length ss", "by auto"], ["proof (state)\nthis:\n  length us < length ss\n\ngoal (1 subgoal):\n 1. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "have snd: \"\\<forall> j < ?lu. ?snd ss us j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<length us. snd (f (ss ! j) (us ! j))", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "assume \"j < ?lu\""], ["proof (state)\nthis:\n  j < length us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "with False i1 snd1 tu"], ["proof (chain)\npicking this:\n  \\<not> i1 < length us\n  i1 < length ss \\<and> i1 < length ts\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts\n  j < length us", "have snd1: \"?snd ss ts j\" and snd2: \"?snd ts us j\" and \n              ssj: \"ss ! j \\<in> set ss\" and tsj: \"ts ! j \\<in> set ts\" and usj: \"us ! j \\<in> set us\""], ["proof (prove)\nusing this:\n  \\<not> i1 < length us\n  i1 < length ss \\<and> i1 < length ts\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts\n  j < length us\n\ngoal (1 subgoal):\n 1. (snd (f (ss ! j) (ts ! j)) &&& snd (f (ts ! j) (us ! j))) &&&\n    ss ! j \\<in> set ss &&& ts ! j \\<in> set ts &&& us ! j \\<in> set us", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n  ss ! j \\<in> set ss\n  ts ! j \\<in> set ts\n  us ! j \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from compat[OF ssj tsj usj] snd1 snd2"], ["proof (chain)\npicking this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))", "show \"?snd ss us j\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (us ! j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "with lus lsu"], ["proof (chain)\npicking this:\n  length us < length ss\n  length ss = length us \\<or> length us \\<le> n\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))", "show ?thesis"], ["proof (prove)\nusing this:\n  length us < length ss\n  length ss = length us \\<or> length us \\<le> n\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "by (auto simp: lex_ext_iff)"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts \\<le> length ss \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts \\<le> length ss \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "assume st: \"?all ss ts \\<and> ?lt \\<le> ?ls\""], ["proof (state)\nthis:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts \\<le> length ss \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "from tu"], ["proof (chain)\npicking this:\n  (\\<exists>i<length ts.\n      i < length us \\<and>\n      (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n      fst (f (ts ! i) (us ! i))) \\<or>\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>i<length ts.\n      i < length us \\<and>\n      (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n      fst (f (ts ! i) (us ! i))) \\<or>\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts\n\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "assume tu: \"?ex ts us\""], ["proof (state)\nthis:\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "with st"], ["proof (chain)\npicking this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))", "obtain i2 where i2: \"i2 < ?lt \\<and> i2 < ?lu\" and fst2: \"?fst ts us i2\" and snd2: \"\\<forall> j < i2. ?snd ts us j\""], ["proof (prove)\nusing this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>i2.\n        \\<lbrakk>i2 < length ts \\<and> i2 < length us;\n         fst (f (ts ! i2) (us ! i2));\n         \\<forall>j<i2. snd (f (ts ! j) (us ! j))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i2 < length ts \\<and> i2 < length us\n  fst (f (ts ! i2) (us ! i2))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "from st i2"], ["proof (chain)\npicking this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  i2 < length ts \\<and> i2 < length us", "have i2: \"i2 < ?ls \\<and> i2 < ?lt \\<and> i2 < ?lu\""], ["proof (prove)\nusing this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  i2 < length ts \\<and> i2 < length us\n\ngoal (1 subgoal):\n 1. i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us", "by auto"], ["proof (state)\nthis:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "then"], ["proof (chain)\npicking this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us", "have ssi: \"ss ! i2 \\<in> set ss\" and tsi: \"ts ! i2 \\<in> set ts\" and usi: \"us ! i2 \\<in> set us\""], ["proof (prove)\nusing this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n\ngoal (1 subgoal):\n 1. ss ! i2 \\<in> set ss &&& ts ! i2 \\<in> set ts &&& us ! i2 \\<in> set us", "by auto"], ["proof (state)\nthis:\n  ss ! i2 \\<in> set ss\n  ts ! i2 \\<in> set ts\n  us ! i2 \\<in> set us\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "from i2 st"], ["proof (chain)\npicking this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss", "have \"?snd ss ts i2\""], ["proof (prove)\nusing this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n\ngoal (1 subgoal):\n 1. snd (f (ss ! i2) (ts ! i2))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! i2) (ts ! i2))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "with fst2 compat[OF ssi tsi usi]"], ["proof (chain)\npicking this:\n  fst (f (ts ! i2) (us ! i2))\n  (snd (f (ss ! i2) (ts ! i2)) \\<and>\n   fst (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2))) \\<and>\n  (fst (f (ss ! i2) (ts ! i2)) \\<and>\n   snd (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2))) \\<and>\n  (snd (f (ss ! i2) (ts ! i2)) \\<and>\n   snd (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   snd (f (ss ! i2) (us ! i2))) \\<and>\n  (fst (f (ss ! i2) (ts ! i2)) \\<and>\n   fst (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2)))\n  snd (f (ss ! i2) (ts ! i2))", "have fst: \"?fst ss us i2\""], ["proof (prove)\nusing this:\n  fst (f (ts ! i2) (us ! i2))\n  (snd (f (ss ! i2) (ts ! i2)) \\<and>\n   fst (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2))) \\<and>\n  (fst (f (ss ! i2) (ts ! i2)) \\<and>\n   snd (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2))) \\<and>\n  (snd (f (ss ! i2) (ts ! i2)) \\<and>\n   snd (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   snd (f (ss ! i2) (us ! i2))) \\<and>\n  (fst (f (ss ! i2) (ts ! i2)) \\<and>\n   fst (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2)))\n  snd (f (ss ! i2) (ts ! i2))\n\ngoal (1 subgoal):\n 1. fst (f (ss ! i2) (us ! i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! i2) (us ! i2))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "have snd: \"\\<forall> j < i2. ?snd ss us j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<i2. snd (f (ss ! j) (us ! j))", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "assume \"j < i2\""], ["proof (state)\nthis:\n  j < i2\n\ngoal (1 subgoal):\n 1. \\<And>j. j < i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "with i2 snd2 st"], ["proof (chain)\npicking this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  j < i2", "have snd1: \"?snd ss ts j\" and snd2: \"?snd ts us j\" and \n            ssj: \"ss ! j \\<in> set ss\" and tsj: \"ts ! j \\<in> set ts\" and usj: \"us ! j \\<in> set us\""], ["proof (prove)\nusing this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  j < i2\n\ngoal (1 subgoal):\n 1. (snd (f (ss ! j) (ts ! j)) &&& snd (f (ts ! j) (us ! j))) &&&\n    ss ! j \\<in> set ss &&& ts ! j \\<in> set ts &&& us ! j \\<in> set us", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n  ss ! j \\<in> set ss\n  ts ! j \\<in> set ts\n  us ! j \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from compat[OF ssj tsj usj] snd1 snd2"], ["proof (chain)\npicking this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))", "show \"?snd ss us j\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (us ! j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<i2. snd (f (ss ! j) (us ! j))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "with fst lsu i2"], ["proof (chain)\npicking this:\n  fst (f (ss ! i2) (us ! i2))\n  length ss = length us \\<or> length us \\<le> n\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  \\<forall>j<i2. snd (f (ss ! j) (us ! j))", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (f (ss ! i2) (us ! i2))\n  length ss = length us \\<or> length us \\<le> n\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  \\<forall>j<i2. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "by (auto simp: lex_ext_iff)"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "assume tu: \"?all ts us \\<and> ?lu < ?lt\""], ["proof (state)\nthis:\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "with st"], ["proof (chain)\npicking this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts", "have lus: \"?lu < ?ls\""], ["proof (prove)\nusing this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts\n\ngoal (1 subgoal):\n 1. length us < length ss", "by auto"], ["proof (state)\nthis:\n  length us < length ss\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "have snd: \"\\<forall> j < ?lu. ?snd ss us j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<length us. snd (f (ss ! j) (us ! j))", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "assume \"j < ?lu\""], ["proof (state)\nthis:\n  j < length us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "with st tu"], ["proof (chain)\npicking this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts\n  j < length us", "have snd1: \"?snd ss ts j\" and snd2: \"?snd ts us j\" and \n            ssj: \"ss ! j \\<in> set ss\" and tsj: \"ts ! j \\<in> set ts\" and usj: \"us ! j \\<in> set us\""], ["proof (prove)\nusing this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us < length ts\n  j < length us\n\ngoal (1 subgoal):\n 1. (snd (f (ss ! j) (ts ! j)) &&& snd (f (ts ! j) (us ! j))) &&&\n    ss ! j \\<in> set ss &&& ts ! j \\<in> set ts &&& us ! j \\<in> set us", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n  ss ! j \\<in> set ss\n  ts ! j \\<in> set ts\n  us ! j \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from compat[OF ssj tsj usj] snd1 snd2"], ["proof (chain)\npicking this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))", "show \"?snd ss us j\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (us ! j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us < length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "with lus lsu"], ["proof (chain)\npicking this:\n  length us < length ss\n  length ss = length us \\<or> length us \\<le> n\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))", "show ?thesis"], ["proof (prove)\nusing this:\n  length us < length ss\n  length ss = length us \\<or> length us \\<le> n\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "by (auto simp: lex_ext_iff)"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>snd (lex_ext f n ss ts); fst (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>snd (lex_ext f n ss ts); fst (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>snd (lex_ext f n ss ts); fst (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "assume st: \"fst ?st\" and tu: \"snd ?tu\""], ["proof (state)\nthis:\n  fst (lex_ext f n ss ts)\n  snd (lex_ext f n ts us)\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "with lengths"], ["proof (chain)\npicking this:\n  (length ss = length ts \\<or> length ts \\<le> n) \\<and>\n  (length ts = length us \\<or> length us \\<le> n) \\<longrightarrow>\n  length ss = length us \\<or> length us \\<le> n\n  fst (lex_ext f n ss ts)\n  snd (lex_ext f n ts us)", "have lsu: \"?lsu\""], ["proof (prove)\nusing this:\n  (length ss = length ts \\<or> length ts \\<le> n) \\<and>\n  (length ts = length us \\<or> length us \\<le> n) \\<longrightarrow>\n  length ss = length us \\<or> length us \\<le> n\n  fst (lex_ext f n ss ts)\n  snd (lex_ext f n ts us)\n\ngoal (1 subgoal):\n 1. length ss = length us \\<or> length us \\<le> n", "by (simp add: lex_ext_iff)"], ["proof (state)\nthis:\n  length ss = length us \\<or> length us \\<le> n\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "from st"], ["proof (chain)\npicking this:\n  fst (lex_ext f n ss ts)", "have st: \"?ex ss ts \\<or> ?all ss ts \\<and> ?lt < ?ls\""], ["proof (prove)\nusing this:\n  fst (lex_ext f n ss ts)\n\ngoal (1 subgoal):\n 1. (\\<exists>i<length ss.\n        i < length ts \\<and>\n        (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n        fst (f (ss ! i) (ts ! i))) \\<or>\n    (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts < length ss", "by (simp add: lex_ext_iff)"], ["proof (state)\nthis:\n  (\\<exists>i<length ss.\n      i < length ts \\<and>\n      (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n      fst (f (ss ! i) (ts ! i))) \\<or>\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "from tu"], ["proof (chain)\npicking this:\n  snd (lex_ext f n ts us)", "have tu: \"?ex ts us \\<or> ?all ts us \\<and> ?lu \\<le> ?lt\""], ["proof (prove)\nusing this:\n  snd (lex_ext f n ts us)\n\ngoal (1 subgoal):\n 1. (\\<exists>i<length ts.\n        i < length us \\<and>\n        (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n        fst (f (ts ! i) (us ! i))) \\<or>\n    (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts", "by (simp add: lex_ext_iff)"], ["proof (state)\nthis:\n  (\\<exists>i<length ts.\n      i < length us \\<and>\n      (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n      fst (f (ts ! i) (us ! i))) \\<or>\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "from st"], ["proof (chain)\npicking this:\n  (\\<exists>i<length ss.\n      i < length ts \\<and>\n      (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n      fst (f (ss ! i) (ts ! i))) \\<or>\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss", "have \"fst ?su\""], ["proof (prove)\nusing this:\n  (\\<exists>i<length ss.\n      i < length ts \\<and>\n      (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n      fst (f (ss ! i) (ts ! i))) \\<or>\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss\n\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i<length ss.\n       i < length ts \\<and>\n       (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n       fst (f (ss ! i) (ts ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts < length ss \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "assume st: \"?ex ss ts\""], ["proof (state)\nthis:\n  \\<exists>i<length ss.\n     i < length ts \\<and>\n     (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n     fst (f (ss ! i) (ts ! i))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ss.\n       i < length ts \\<and>\n       (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n       fst (f (ss ! i) (ts ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts < length ss \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i<length ss.\n     i < length ts \\<and>\n     (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n     fst (f (ss ! i) (ts ! i))", "obtain i1 where i1: \"i1 < ?ls \\<and> i1 < ?lt\" and fst1: \"?fst ss ts i1\" and snd1: \"\\<forall> j < i1. ?snd ss ts j\""], ["proof (prove)\nusing this:\n  \\<exists>i<length ss.\n     i < length ts \\<and>\n     (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n     fst (f (ss ! i) (ts ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>i1.\n        \\<lbrakk>i1 < length ss \\<and> i1 < length ts;\n         fst (f (ss ! i1) (ts ! i1));\n         \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  i1 < length ss \\<and> i1 < length ts\n  fst (f (ss ! i1) (ts ! i1))\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ss.\n       i < length ts \\<and>\n       (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n       fst (f (ss ! i) (ts ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts < length ss \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "from tu"], ["proof (chain)\npicking this:\n  (\\<exists>i<length ts.\n      i < length us \\<and>\n      (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n      fst (f (ts ! i) (us ! i))) \\<or>\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>i<length ts.\n      i < length us \\<and>\n      (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n      fst (f (ts ! i) (us ! i))) \\<or>\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "assume tu: \"?ex ts us\""], ["proof (state)\nthis:\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))", "obtain i2 where i2: \"i2 < ?lt \\<and> i2 < ?lu\" and fst2: \"?fst ts us i2\" and snd2: \"\\<forall> j < i2. ?snd ts us j\""], ["proof (prove)\nusing this:\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>i2.\n        \\<lbrakk>i2 < length ts \\<and> i2 < length us;\n         fst (f (ts ! i2) (us ! i2));\n         \\<forall>j<i2. snd (f (ts ! j) (us ! j))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i2 < length ts \\<and> i2 < length us\n  fst (f (ts ! i2) (us ! i2))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "let ?i = \"min i1 i2\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "from i1 i2"], ["proof (chain)\npicking this:\n  i1 < length ss \\<and> i1 < length ts\n  i2 < length ts \\<and> i2 < length us", "have i: \"?i < ?ls \\<and> ?i < ?lt \\<and> ?i < ?lu\""], ["proof (prove)\nusing this:\n  i1 < length ss \\<and> i1 < length ts\n  i2 < length ts \\<and> i2 < length us\n\ngoal (1 subgoal):\n 1. min i1 i2 < length ss \\<and>\n    min i1 i2 < length ts \\<and> min i1 i2 < length us", "by auto"], ["proof (state)\nthis:\n  min i1 i2 < length ss \\<and>\n  min i1 i2 < length ts \\<and> min i1 i2 < length us\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "then"], ["proof (chain)\npicking this:\n  min i1 i2 < length ss \\<and>\n  min i1 i2 < length ts \\<and> min i1 i2 < length us", "have ssi: \"ss ! ?i \\<in> set ss\" and tsi: \"ts ! ?i \\<in> set ts\" and usi: \"us ! ?i \\<in> set us\""], ["proof (prove)\nusing this:\n  min i1 i2 < length ss \\<and>\n  min i1 i2 < length ts \\<and> min i1 i2 < length us\n\ngoal (1 subgoal):\n 1. ss ! min i1 i2 \\<in> set ss &&&\n    ts ! min i1 i2 \\<in> set ts &&& us ! min i1 i2 \\<in> set us", "by auto"], ["proof (state)\nthis:\n  ss ! min i1 i2 \\<in> set ss\n  ts ! min i1 i2 \\<in> set ts\n  us ! min i1 i2 \\<in> set us\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "have snd: \"\\<forall> j < ?i. ?snd ss us j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<min i1 i2. snd (f (ss ! j) (us ! j))", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < min i1 i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < min i1 i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "assume j: \"j < ?i\""], ["proof (state)\nthis:\n  j < min i1 i2\n\ngoal (1 subgoal):\n 1. \\<And>j. j < min i1 i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "with snd1 snd2"], ["proof (chain)\npicking this:\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  j < min i1 i2", "have snd1: \"?snd ss ts j\" and snd2: \"?snd ts us j\""], ["proof (prove)\nusing this:\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  j < min i1 i2\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (ts ! j)) &&& snd (f (ts ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. \\<And>j. j < min i1 i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from j i"], ["proof (chain)\npicking this:\n  j < min i1 i2\n  min i1 i2 < length ss \\<and>\n  min i1 i2 < length ts \\<and> min i1 i2 < length us", "have ssj: \"ss ! j \\<in> set ss\" and tsj: \"ts ! j \\<in> set ts\" and usj: \"us ! j \\<in> set us\""], ["proof (prove)\nusing this:\n  j < min i1 i2\n  min i1 i2 < length ss \\<and>\n  min i1 i2 < length ts \\<and> min i1 i2 < length us\n\ngoal (1 subgoal):\n 1. ss ! j \\<in> set ss &&& ts ! j \\<in> set ts &&& us ! j \\<in> set us", "by auto"], ["proof (state)\nthis:\n  ss ! j \\<in> set ss\n  ts ! j \\<in> set ts\n  us ! j \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < min i1 i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from compat[OF ssj tsj usj] snd1 snd2"], ["proof (chain)\npicking this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))", "show \"?snd ss us j\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (us ! j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<min i1 i2. snd (f (ss ! j) (us ! j))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "have fst: \"?fst ss us ?i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (us ! min i1 i2))", "proof (cases \"i1 < i2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i1 < i2 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "case True"], ["proof (state)\nthis:\n  i1 < i2\n\ngoal (2 subgoals):\n 1. i1 < i2 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "then"], ["proof (chain)\npicking this:\n  i1 < i2", "have \"?i = i1\""], ["proof (prove)\nusing this:\n  i1 < i2\n\ngoal (1 subgoal):\n 1. min i1 i2 = i1", "by simp"], ["proof (state)\nthis:\n  min i1 i2 = i1\n\ngoal (2 subgoals):\n 1. i1 < i2 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with True fst1 snd2"], ["proof (chain)\npicking this:\n  i1 < i2\n  fst (f (ss ! i1) (ts ! i1))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  min i1 i2 = i1", "have \"?fst ss ts ?i\" and \"?snd ts us ?i\""], ["proof (prove)\nusing this:\n  i1 < i2\n  fst (f (ss ! i1) (ts ! i1))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  min i1 i2 = i1\n\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (ts ! min i1 i2)) &&&\n    snd (f (ts ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  snd (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (2 subgoals):\n 1. i1 < i2 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with compat[OF ssi tsi usi]"], ["proof (chain)\npicking this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  snd (f (ts ! min i1 i2) (us ! min i1 i2))", "show \"?fst ss us ?i\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  snd (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "case False"], ["proof (state)\nthis:\n  \\<not> i1 < i2\n\ngoal (1 subgoal):\n 1. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (us ! min i1 i2))", "proof (cases \"i2 < i1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i2 < i1 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "case True"], ["proof (state)\nthis:\n  i2 < i1\n\ngoal (2 subgoals):\n 1. i2 < i1 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "then"], ["proof (chain)\npicking this:\n  i2 < i1", "have \"?i = i2\""], ["proof (prove)\nusing this:\n  i2 < i1\n\ngoal (1 subgoal):\n 1. min i1 i2 = i2", "by simp"], ["proof (state)\nthis:\n  min i1 i2 = i2\n\ngoal (2 subgoals):\n 1. i2 < i1 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with True snd1 fst2"], ["proof (chain)\npicking this:\n  i2 < i1\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  fst (f (ts ! i2) (us ! i2))\n  min i1 i2 = i2", "have \"?snd ss ts ?i\" and \"?fst ts us ?i\""], ["proof (prove)\nusing this:\n  i2 < i1\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  fst (f (ts ! i2) (us ! i2))\n  min i1 i2 = i2\n\ngoal (1 subgoal):\n 1. snd (f (ss ! min i1 i2) (ts ! min i1 i2)) &&&\n    fst (f (ts ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (2 subgoals):\n 1. i2 < i1 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with compat[OF ssi tsi usi]"], ["proof (chain)\npicking this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  snd (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))", "show \"?fst ss us ?i\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  snd (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "case False"], ["proof (state)\nthis:\n  \\<not> i2 < i1\n\ngoal (1 subgoal):\n 1. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with \\<open>\\<not> i1 < i2\\<close>"], ["proof (chain)\npicking this:\n  \\<not> i1 < i2\n  \\<not> i2 < i1", "have \"i1 = i2\""], ["proof (prove)\nusing this:\n  \\<not> i1 < i2\n  \\<not> i2 < i1\n\ngoal (1 subgoal):\n 1. i1 = i2", "by simp"], ["proof (state)\nthis:\n  i1 = i2\n\ngoal (1 subgoal):\n 1. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with fst1 fst2"], ["proof (chain)\npicking this:\n  fst (f (ss ! i1) (ts ! i1))\n  fst (f (ts ! i2) (us ! i2))\n  i1 = i2", "have \"?fst ss ts ?i\" and \"?fst ts us ?i\""], ["proof (prove)\nusing this:\n  fst (f (ss ! i1) (ts ! i1))\n  fst (f (ts ! i2) (us ! i2))\n  i1 = i2\n\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (ts ! min i1 i2)) &&&\n    fst (f (ts ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with compat[OF ssi tsi usi]"], ["proof (chain)\npicking this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))", "show \"?fst ss us ?i\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (us ! min i1 i2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (us ! min i1 i2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (us ! min i1 i2))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "by (simp add: lex_ext_iff lsu, rule disjI1, rule exI[of _ ?i], simp add: fst snd i)"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "assume tu: \"?all ts us \\<and> ?lu \\<le> ?lt\""], ["proof (state)\nthis:\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "proof (cases \"i1 < ?lu\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "case True"], ["proof (state)\nthis:\n  i1 < length us\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "then"], ["proof (chain)\npicking this:\n  i1 < length us", "have usi: \"us ! i1 \\<in> set us\""], ["proof (prove)\nusing this:\n  i1 < length us\n\ngoal (1 subgoal):\n 1. us ! i1 \\<in> set us", "by auto"], ["proof (state)\nthis:\n  us ! i1 \\<in> set us\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "from i1"], ["proof (chain)\npicking this:\n  i1 < length ss \\<and> i1 < length ts", "have ssi: \"ss ! i1 \\<in> set ss\" and tsi: \"ts ! i1 \\<in> set ts\""], ["proof (prove)\nusing this:\n  i1 < length ss \\<and> i1 < length ts\n\ngoal (1 subgoal):\n 1. ss ! i1 \\<in> set ss &&& ts ! i1 \\<in> set ts", "by auto"], ["proof (state)\nthis:\n  ss ! i1 \\<in> set ss\n  ts ! i1 \\<in> set ts\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "from True tu"], ["proof (chain)\npicking this:\n  i1 < length us\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts", "have \"?snd ts us i1\""], ["proof (prove)\nusing this:\n  i1 < length us\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n\ngoal (1 subgoal):\n 1. snd (f (ts ! i1) (us ! i1))", "by auto"], ["proof (state)\nthis:\n  snd (f (ts ! i1) (us ! i1))\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "with fst1 compat[OF ssi tsi usi]"], ["proof (chain)\npicking this:\n  fst (f (ss ! i1) (ts ! i1))\n  (snd (f (ss ! i1) (ts ! i1)) \\<and>\n   fst (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1))) \\<and>\n  (fst (f (ss ! i1) (ts ! i1)) \\<and>\n   snd (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1))) \\<and>\n  (snd (f (ss ! i1) (ts ! i1)) \\<and>\n   snd (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   snd (f (ss ! i1) (us ! i1))) \\<and>\n  (fst (f (ss ! i1) (ts ! i1)) \\<and>\n   fst (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1)))\n  snd (f (ts ! i1) (us ! i1))", "have fst: \"?fst ss us i1\""], ["proof (prove)\nusing this:\n  fst (f (ss ! i1) (ts ! i1))\n  (snd (f (ss ! i1) (ts ! i1)) \\<and>\n   fst (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1))) \\<and>\n  (fst (f (ss ! i1) (ts ! i1)) \\<and>\n   snd (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1))) \\<and>\n  (snd (f (ss ! i1) (ts ! i1)) \\<and>\n   snd (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   snd (f (ss ! i1) (us ! i1))) \\<and>\n  (fst (f (ss ! i1) (ts ! i1)) \\<and>\n   fst (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1)))\n  snd (f (ts ! i1) (us ! i1))\n\ngoal (1 subgoal):\n 1. fst (f (ss ! i1) (us ! i1))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! i1) (us ! i1))\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "have snd: \"\\<forall> j < i1. ?snd ss us j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<i1. snd (f (ss ! j) (us ! j))", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < i1 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < i1 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "assume \"j < i1\""], ["proof (state)\nthis:\n  j < i1\n\ngoal (1 subgoal):\n 1. \\<And>j. j < i1 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "with i1 True snd1 tu"], ["proof (chain)\npicking this:\n  i1 < length ss \\<and> i1 < length ts\n  i1 < length us\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n  j < i1", "have snd1: \"?snd ss ts j\" and snd2: \"?snd ts us j\" and \n              ssj: \"ss ! j \\<in> set ss\" and tsj: \"ts ! j \\<in> set ts\" and usj: \"us ! j \\<in> set us\""], ["proof (prove)\nusing this:\n  i1 < length ss \\<and> i1 < length ts\n  i1 < length us\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n  j < i1\n\ngoal (1 subgoal):\n 1. (snd (f (ss ! j) (ts ! j)) &&& snd (f (ts ! j) (us ! j))) &&&\n    ss ! j \\<in> set ss &&& ts ! j \\<in> set ts &&& us ! j \\<in> set us", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n  ss ! j \\<in> set ss\n  ts ! j \\<in> set ts\n  us ! j \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < i1 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from compat[OF ssj tsj usj] snd1 snd2"], ["proof (chain)\npicking this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))", "show \"?snd ss us j\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (us ! j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<i1. snd (f (ss ! j) (us ! j))\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "with fst lsu True i1"], ["proof (chain)\npicking this:\n  fst (f (ss ! i1) (us ! i1))\n  length ss = length us \\<or> length us \\<le> n\n  i1 < length us\n  i1 < length ss \\<and> i1 < length ts\n  \\<forall>j<i1. snd (f (ss ! j) (us ! j))", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (f (ss ! i1) (us ! i1))\n  length ss = length us \\<or> length us \\<le> n\n  i1 < length us\n  i1 < length ss \\<and> i1 < length ts\n  \\<forall>j<i1. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "by (auto simp: lex_ext_iff)"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "case False"], ["proof (state)\nthis:\n  \\<not> i1 < length us\n\ngoal (1 subgoal):\n 1. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "with i1"], ["proof (chain)\npicking this:\n  i1 < length ss \\<and> i1 < length ts\n  \\<not> i1 < length us", "have lus: \"?lu < ?ls\""], ["proof (prove)\nusing this:\n  i1 < length ss \\<and> i1 < length ts\n  \\<not> i1 < length us\n\ngoal (1 subgoal):\n 1. length us < length ss", "by auto"], ["proof (state)\nthis:\n  length us < length ss\n\ngoal (1 subgoal):\n 1. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "have snd: \"\\<forall> j < ?lu. ?snd ss us j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<length us. snd (f (ss ! j) (us ! j))", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "assume \"j < ?lu\""], ["proof (state)\nthis:\n  j < length us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "with False i1 snd1 tu"], ["proof (chain)\npicking this:\n  \\<not> i1 < length us\n  i1 < length ss \\<and> i1 < length ts\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n  j < length us", "have snd1: \"?snd ss ts j\" and snd2: \"?snd ts us j\" and \n              ssj: \"ss ! j \\<in> set ss\" and tsj: \"ts ! j \\<in> set ts\" and usj: \"us ! j \\<in> set us\""], ["proof (prove)\nusing this:\n  \\<not> i1 < length us\n  i1 < length ss \\<and> i1 < length ts\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n  j < length us\n\ngoal (1 subgoal):\n 1. (snd (f (ss ! j) (ts ! j)) &&& snd (f (ts ! j) (us ! j))) &&&\n    ss ! j \\<in> set ss &&& ts ! j \\<in> set ts &&& us ! j \\<in> set us", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n  ss ! j \\<in> set ss\n  ts ! j \\<in> set ts\n  us ! j \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from compat[OF ssj tsj usj] snd1 snd2"], ["proof (chain)\npicking this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))", "show \"?snd ss us j\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (us ! j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. \\<not> i1 < length us \\<Longrightarrow> fst (lex_ext f n ss us)", "with lus lsu"], ["proof (chain)\npicking this:\n  length us < length ss\n  length ss = length us \\<or> length us \\<le> n\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))", "show ?thesis"], ["proof (prove)\nusing this:\n  length us < length ss\n  length ss = length us \\<or> length us \\<le> n\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "by (auto simp: lex_ext_iff)"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts < length ss \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts < length ss \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "assume st: \"?all ss ts \\<and> ?lt < ?ls\""], ["proof (state)\nthis:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts < length ss \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "from tu"], ["proof (chain)\npicking this:\n  (\\<exists>i<length ts.\n      i < length us \\<and>\n      (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n      fst (f (ts ! i) (us ! i))) \\<or>\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>i<length ts.\n      i < length us \\<and>\n      (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n      fst (f (ts ! i) (us ! i))) \\<or>\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "assume tu: \"?ex ts us\""], ["proof (state)\nthis:\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "with st"], ["proof (chain)\npicking this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))", "obtain i2 where i2: \"i2 < ?lt \\<and> i2 < ?lu\" and fst2: \"?fst ts us i2\" and snd2: \"\\<forall> j < i2. ?snd ts us j\""], ["proof (prove)\nusing this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>i2.\n        \\<lbrakk>i2 < length ts \\<and> i2 < length us;\n         fst (f (ts ! i2) (us ! i2));\n         \\<forall>j<i2. snd (f (ts ! j) (us ! j))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i2 < length ts \\<and> i2 < length us\n  fst (f (ts ! i2) (us ! i2))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "from st i2"], ["proof (chain)\npicking this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss\n  i2 < length ts \\<and> i2 < length us", "have i2: \"i2 < ?ls \\<and> i2 < ?lt \\<and> i2 < ?lu\""], ["proof (prove)\nusing this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss\n  i2 < length ts \\<and> i2 < length us\n\ngoal (1 subgoal):\n 1. i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us", "by auto"], ["proof (state)\nthis:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "then"], ["proof (chain)\npicking this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us", "have ssi: \"ss ! i2 \\<in> set ss\" and tsi: \"ts ! i2 \\<in> set ts\" and usi: \"us ! i2 \\<in> set us\""], ["proof (prove)\nusing this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n\ngoal (1 subgoal):\n 1. ss ! i2 \\<in> set ss &&& ts ! i2 \\<in> set ts &&& us ! i2 \\<in> set us", "by auto"], ["proof (state)\nthis:\n  ss ! i2 \\<in> set ss\n  ts ! i2 \\<in> set ts\n  us ! i2 \\<in> set us\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "from i2 st"], ["proof (chain)\npicking this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss", "have \"?snd ss ts i2\""], ["proof (prove)\nusing this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss\n\ngoal (1 subgoal):\n 1. snd (f (ss ! i2) (ts ! i2))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! i2) (ts ! i2))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "with fst2 compat[OF ssi tsi usi]"], ["proof (chain)\npicking this:\n  fst (f (ts ! i2) (us ! i2))\n  (snd (f (ss ! i2) (ts ! i2)) \\<and>\n   fst (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2))) \\<and>\n  (fst (f (ss ! i2) (ts ! i2)) \\<and>\n   snd (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2))) \\<and>\n  (snd (f (ss ! i2) (ts ! i2)) \\<and>\n   snd (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   snd (f (ss ! i2) (us ! i2))) \\<and>\n  (fst (f (ss ! i2) (ts ! i2)) \\<and>\n   fst (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2)))\n  snd (f (ss ! i2) (ts ! i2))", "have fst: \"?fst ss us i2\""], ["proof (prove)\nusing this:\n  fst (f (ts ! i2) (us ! i2))\n  (snd (f (ss ! i2) (ts ! i2)) \\<and>\n   fst (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2))) \\<and>\n  (fst (f (ss ! i2) (ts ! i2)) \\<and>\n   snd (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2))) \\<and>\n  (snd (f (ss ! i2) (ts ! i2)) \\<and>\n   snd (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   snd (f (ss ! i2) (us ! i2))) \\<and>\n  (fst (f (ss ! i2) (ts ! i2)) \\<and>\n   fst (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2)))\n  snd (f (ss ! i2) (ts ! i2))\n\ngoal (1 subgoal):\n 1. fst (f (ss ! i2) (us ! i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! i2) (us ! i2))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "have snd: \"\\<forall> j < i2. ?snd ss us j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<i2. snd (f (ss ! j) (us ! j))", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "assume \"j < i2\""], ["proof (state)\nthis:\n  j < i2\n\ngoal (1 subgoal):\n 1. \\<And>j. j < i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "with i2 snd2 st"], ["proof (chain)\npicking this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss\n  j < i2", "have snd1: \"?snd ss ts j\" and snd2: \"?snd ts us j\" and \n            ssj: \"ss ! j \\<in> set ss\" and tsj: \"ts ! j \\<in> set ts\" and usj: \"us ! j \\<in> set us\""], ["proof (prove)\nusing this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss\n  j < i2\n\ngoal (1 subgoal):\n 1. (snd (f (ss ! j) (ts ! j)) &&& snd (f (ts ! j) (us ! j))) &&&\n    ss ! j \\<in> set ss &&& ts ! j \\<in> set ts &&& us ! j \\<in> set us", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n  ss ! j \\<in> set ss\n  ts ! j \\<in> set ts\n  us ! j \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from compat[OF ssj tsj usj] snd1 snd2"], ["proof (chain)\npicking this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))", "show \"?snd ss us j\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (us ! j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<i2. snd (f (ss ! j) (us ! j))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    fst (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "with fst lsu i2"], ["proof (chain)\npicking this:\n  fst (f (ss ! i2) (us ! i2))\n  length ss = length us \\<or> length us \\<le> n\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  \\<forall>j<i2. snd (f (ss ! j) (us ! j))", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (f (ss ! i2) (us ! i2))\n  length ss = length us \\<or> length us \\<le> n\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  \\<forall>j<i2. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "by (auto simp: lex_ext_iff)"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "assume tu: \"?all ts us \\<and> ?lu \\<le> ?lt\""], ["proof (state)\nthis:\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "with st"], ["proof (chain)\npicking this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts", "have lus: \"?lu < ?ls\""], ["proof (prove)\nusing this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n\ngoal (1 subgoal):\n 1. length us < length ss", "by auto"], ["proof (state)\nthis:\n  length us < length ss\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "have snd: \"\\<forall> j < ?lu. ?snd ss us j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<length us. snd (f (ss ! j) (us ! j))", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "assume \"j < ?lu\""], ["proof (state)\nthis:\n  j < length us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "with st tu"], ["proof (chain)\npicking this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n  j < length us", "have snd1: \"?snd ss ts j\" and snd2: \"?snd ts us j\" and \n            ssj: \"ss ! j \\<in> set ss\" and tsj: \"ts ! j \\<in> set ts\" and usj: \"us ! j \\<in> set us\""], ["proof (prove)\nusing this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts < length ss\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n  j < length us\n\ngoal (1 subgoal):\n 1. (snd (f (ss ! j) (ts ! j)) &&& snd (f (ts ! j) (us ! j))) &&&\n    ss ! j \\<in> set ss &&& ts ! j \\<in> set ts &&& us ! j \\<in> set us", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n  ss ! j \\<in> set ss\n  ts ! j \\<in> set ts\n  us ! j \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from compat[OF ssj tsj usj] snd1 snd2"], ["proof (chain)\npicking this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))", "show \"?snd ss us j\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (us ! j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    fst (lex_ext f n ss us)", "with lus lsu"], ["proof (chain)\npicking this:\n  length us < length ss\n  length ss = length us \\<or> length us \\<le> n\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))", "show ?thesis"], ["proof (prove)\nusing this:\n  length us < length ss\n  length ss = length us \\<or> length us \\<le> n\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. fst (lex_ext f n ss us)", "by (auto simp: lex_ext_iff)"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>fst (lex_ext f n ss ts); snd (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>fst (lex_ext f n ss ts); snd (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>fst (lex_ext f n ss ts); snd (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> fst (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "assume st: \"snd ?st\" and tu: \"snd ?tu\""], ["proof (state)\nthis:\n  snd (lex_ext f n ss ts)\n  snd (lex_ext f n ts us)\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "with lengths"], ["proof (chain)\npicking this:\n  (length ss = length ts \\<or> length ts \\<le> n) \\<and>\n  (length ts = length us \\<or> length us \\<le> n) \\<longrightarrow>\n  length ss = length us \\<or> length us \\<le> n\n  snd (lex_ext f n ss ts)\n  snd (lex_ext f n ts us)", "have lsu: \"?lsu\""], ["proof (prove)\nusing this:\n  (length ss = length ts \\<or> length ts \\<le> n) \\<and>\n  (length ts = length us \\<or> length us \\<le> n) \\<longrightarrow>\n  length ss = length us \\<or> length us \\<le> n\n  snd (lex_ext f n ss ts)\n  snd (lex_ext f n ts us)\n\ngoal (1 subgoal):\n 1. length ss = length us \\<or> length us \\<le> n", "by (simp add: lex_ext_iff)"], ["proof (state)\nthis:\n  length ss = length us \\<or> length us \\<le> n\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "from st"], ["proof (chain)\npicking this:\n  snd (lex_ext f n ss ts)", "have st: \"?ex ss ts \\<or> ?all ss ts \\<and> ?lt \\<le> ?ls\""], ["proof (prove)\nusing this:\n  snd (lex_ext f n ss ts)\n\ngoal (1 subgoal):\n 1. (\\<exists>i<length ss.\n        i < length ts \\<and>\n        (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n        fst (f (ss ! i) (ts ! i))) \\<or>\n    (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts \\<le> length ss", "by (simp add: lex_ext_iff)"], ["proof (state)\nthis:\n  (\\<exists>i<length ss.\n      i < length ts \\<and>\n      (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n      fst (f (ss ! i) (ts ! i))) \\<or>\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "from tu"], ["proof (chain)\npicking this:\n  snd (lex_ext f n ts us)", "have tu: \"?ex ts us \\<or> ?all ts us \\<and> ?lu \\<le> ?lt\""], ["proof (prove)\nusing this:\n  snd (lex_ext f n ts us)\n\ngoal (1 subgoal):\n 1. (\\<exists>i<length ts.\n        i < length us \\<and>\n        (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n        fst (f (ts ! i) (us ! i))) \\<or>\n    (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts", "by (simp add: lex_ext_iff)"], ["proof (state)\nthis:\n  (\\<exists>i<length ts.\n      i < length us \\<and>\n      (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n      fst (f (ts ! i) (us ! i))) \\<or>\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "from st"], ["proof (chain)\npicking this:\n  (\\<exists>i<length ss.\n      i < length ts \\<and>\n      (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n      fst (f (ss ! i) (ts ! i))) \\<or>\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss", "have \"snd ?su\""], ["proof (prove)\nusing this:\n  (\\<exists>i<length ss.\n      i < length ts \\<and>\n      (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n      fst (f (ss ! i) (ts ! i))) \\<or>\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n\ngoal (1 subgoal):\n 1. snd (lex_ext f n ss us)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i<length ss.\n       i < length ts \\<and>\n       (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n       fst (f (ss ! i) (ts ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts \\<le> length ss \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "assume st: \"?ex ss ts\""], ["proof (state)\nthis:\n  \\<exists>i<length ss.\n     i < length ts \\<and>\n     (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n     fst (f (ss ! i) (ts ! i))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ss.\n       i < length ts \\<and>\n       (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n       fst (f (ss ! i) (ts ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts \\<le> length ss \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i<length ss.\n     i < length ts \\<and>\n     (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n     fst (f (ss ! i) (ts ! i))", "obtain i1 where i1: \"i1 < ?ls \\<and> i1 < ?lt\" and fst1: \"?fst ss ts i1\" and snd1: \"\\<forall> j < i1. ?snd ss ts j\""], ["proof (prove)\nusing this:\n  \\<exists>i<length ss.\n     i < length ts \\<and>\n     (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n     fst (f (ss ! i) (ts ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>i1.\n        \\<lbrakk>i1 < length ss \\<and> i1 < length ts;\n         fst (f (ss ! i1) (ts ! i1));\n         \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  i1 < length ss \\<and> i1 < length ts\n  fst (f (ss ! i1) (ts ! i1))\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ss.\n       i < length ts \\<and>\n       (\\<forall>j<i. snd (f (ss ! j) (ts ! j))) \\<and>\n       fst (f (ss ! i) (ts ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts \\<le> length ss \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "from tu"], ["proof (chain)\npicking this:\n  (\\<exists>i<length ts.\n      i < length us \\<and>\n      (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n      fst (f (ts ! i) (us ! i))) \\<or>\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>i<length ts.\n      i < length us \\<and>\n      (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n      fst (f (ts ! i) (us ! i))) \\<or>\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n\ngoal (1 subgoal):\n 1. snd (lex_ext f n ss us)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "assume tu: \"?ex ts us\""], ["proof (state)\nthis:\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))", "obtain i2 where i2: \"i2 < ?lt \\<and> i2 < ?lu\" and fst2: \"?fst ts us i2\" and snd2: \"\\<forall> j < i2. ?snd ts us j\""], ["proof (prove)\nusing this:\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>i2.\n        \\<lbrakk>i2 < length ts \\<and> i2 < length us;\n         fst (f (ts ! i2) (us ! i2));\n         \\<forall>j<i2. snd (f (ts ! j) (us ! j))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i2 < length ts \\<and> i2 < length us\n  fst (f (ts ! i2) (us ! i2))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "let ?i = \"min i1 i2\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "from i1 i2"], ["proof (chain)\npicking this:\n  i1 < length ss \\<and> i1 < length ts\n  i2 < length ts \\<and> i2 < length us", "have i: \"?i < ?ls \\<and> ?i < ?lt \\<and> ?i < ?lu\""], ["proof (prove)\nusing this:\n  i1 < length ss \\<and> i1 < length ts\n  i2 < length ts \\<and> i2 < length us\n\ngoal (1 subgoal):\n 1. min i1 i2 < length ss \\<and>\n    min i1 i2 < length ts \\<and> min i1 i2 < length us", "by auto"], ["proof (state)\nthis:\n  min i1 i2 < length ss \\<and>\n  min i1 i2 < length ts \\<and> min i1 i2 < length us\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "then"], ["proof (chain)\npicking this:\n  min i1 i2 < length ss \\<and>\n  min i1 i2 < length ts \\<and> min i1 i2 < length us", "have ssi: \"ss ! ?i \\<in> set ss\" and tsi: \"ts ! ?i \\<in> set ts\" and usi: \"us ! ?i \\<in> set us\""], ["proof (prove)\nusing this:\n  min i1 i2 < length ss \\<and>\n  min i1 i2 < length ts \\<and> min i1 i2 < length us\n\ngoal (1 subgoal):\n 1. ss ! min i1 i2 \\<in> set ss &&&\n    ts ! min i1 i2 \\<in> set ts &&& us ! min i1 i2 \\<in> set us", "by auto"], ["proof (state)\nthis:\n  ss ! min i1 i2 \\<in> set ss\n  ts ! min i1 i2 \\<in> set ts\n  us ! min i1 i2 \\<in> set us\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "have snd: \"\\<forall> j < ?i. ?snd ss us j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<min i1 i2. snd (f (ss ! j) (us ! j))", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < min i1 i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < min i1 i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "assume j: \"j < ?i\""], ["proof (state)\nthis:\n  j < min i1 i2\n\ngoal (1 subgoal):\n 1. \\<And>j. j < min i1 i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "with snd1 snd2"], ["proof (chain)\npicking this:\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  j < min i1 i2", "have snd1: \"?snd ss ts j\" and snd2: \"?snd ts us j\""], ["proof (prove)\nusing this:\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  j < min i1 i2\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (ts ! j)) &&& snd (f (ts ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. \\<And>j. j < min i1 i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from j i"], ["proof (chain)\npicking this:\n  j < min i1 i2\n  min i1 i2 < length ss \\<and>\n  min i1 i2 < length ts \\<and> min i1 i2 < length us", "have ssj: \"ss ! j \\<in> set ss\" and tsj: \"ts ! j \\<in> set ts\" and usj: \"us ! j \\<in> set us\""], ["proof (prove)\nusing this:\n  j < min i1 i2\n  min i1 i2 < length ss \\<and>\n  min i1 i2 < length ts \\<and> min i1 i2 < length us\n\ngoal (1 subgoal):\n 1. ss ! j \\<in> set ss &&& ts ! j \\<in> set ts &&& us ! j \\<in> set us", "by auto"], ["proof (state)\nthis:\n  ss ! j \\<in> set ss\n  ts ! j \\<in> set ts\n  us ! j \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < min i1 i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from compat[OF ssj tsj usj] snd1 snd2"], ["proof (chain)\npicking this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))", "show \"?snd ss us j\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (us ! j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<min i1 i2. snd (f (ss ! j) (us ! j))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "have fst: \"?fst ss us ?i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (us ! min i1 i2))", "proof (cases \"i1 < i2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i1 < i2 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "case True"], ["proof (state)\nthis:\n  i1 < i2\n\ngoal (2 subgoals):\n 1. i1 < i2 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "then"], ["proof (chain)\npicking this:\n  i1 < i2", "have \"?i = i1\""], ["proof (prove)\nusing this:\n  i1 < i2\n\ngoal (1 subgoal):\n 1. min i1 i2 = i1", "by simp"], ["proof (state)\nthis:\n  min i1 i2 = i1\n\ngoal (2 subgoals):\n 1. i1 < i2 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with True fst1 snd2"], ["proof (chain)\npicking this:\n  i1 < i2\n  fst (f (ss ! i1) (ts ! i1))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  min i1 i2 = i1", "have \"?fst ss ts ?i\" and \"?snd ts us ?i\""], ["proof (prove)\nusing this:\n  i1 < i2\n  fst (f (ss ! i1) (ts ! i1))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  min i1 i2 = i1\n\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (ts ! min i1 i2)) &&&\n    snd (f (ts ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  snd (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (2 subgoals):\n 1. i1 < i2 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with compat[OF ssi tsi usi]"], ["proof (chain)\npicking this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  snd (f (ts ! min i1 i2) (us ! min i1 i2))", "show \"?fst ss us ?i\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  snd (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "case False"], ["proof (state)\nthis:\n  \\<not> i1 < i2\n\ngoal (1 subgoal):\n 1. \\<not> i1 < i2 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (us ! min i1 i2))", "proof (cases \"i2 < i1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i2 < i1 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "case True"], ["proof (state)\nthis:\n  i2 < i1\n\ngoal (2 subgoals):\n 1. i2 < i1 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "then"], ["proof (chain)\npicking this:\n  i2 < i1", "have \"?i = i2\""], ["proof (prove)\nusing this:\n  i2 < i1\n\ngoal (1 subgoal):\n 1. min i1 i2 = i2", "by simp"], ["proof (state)\nthis:\n  min i1 i2 = i2\n\ngoal (2 subgoals):\n 1. i2 < i1 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with True snd1 fst2"], ["proof (chain)\npicking this:\n  i2 < i1\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  fst (f (ts ! i2) (us ! i2))\n  min i1 i2 = i2", "have \"?snd ss ts ?i\" and \"?fst ts us ?i\""], ["proof (prove)\nusing this:\n  i2 < i1\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  fst (f (ts ! i2) (us ! i2))\n  min i1 i2 = i2\n\ngoal (1 subgoal):\n 1. snd (f (ss ! min i1 i2) (ts ! min i1 i2)) &&&\n    fst (f (ts ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (2 subgoals):\n 1. i2 < i1 \\<Longrightarrow> fst (f (ss ! min i1 i2) (us ! min i1 i2))\n 2. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with compat[OF ssi tsi usi]"], ["proof (chain)\npicking this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  snd (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))", "show \"?fst ss us ?i\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  snd (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "case False"], ["proof (state)\nthis:\n  \\<not> i2 < i1\n\ngoal (1 subgoal):\n 1. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with \\<open>\\<not> i1 < i2\\<close>"], ["proof (chain)\npicking this:\n  \\<not> i1 < i2\n  \\<not> i2 < i1", "have \"i1 = i2\""], ["proof (prove)\nusing this:\n  \\<not> i1 < i2\n  \\<not> i2 < i1\n\ngoal (1 subgoal):\n 1. i1 = i2", "by simp"], ["proof (state)\nthis:\n  i1 = i2\n\ngoal (1 subgoal):\n 1. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with fst1 fst2"], ["proof (chain)\npicking this:\n  fst (f (ss ! i1) (ts ! i1))\n  fst (f (ts ! i2) (us ! i2))\n  i1 = i2", "have \"?fst ss ts ?i\" and \"?fst ts us ?i\""], ["proof (prove)\nusing this:\n  fst (f (ss ! i1) (ts ! i1))\n  fst (f (ts ! i2) (us ! i2))\n  i1 = i2\n\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (ts ! min i1 i2)) &&&\n    fst (f (ts ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. \\<not> i2 < i1 \\<Longrightarrow>\n    fst (f (ss ! min i1 i2) (us ! min i1 i2))", "with compat[OF ssi tsi usi]"], ["proof (chain)\npicking this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))", "show \"?fst ss us ?i\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (snd (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   snd (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   snd (f (ss ! min i1 i2) (us ! min i1 i2))) \\<and>\n  (fst (f (ss ! min i1 i2) (ts ! min i1 i2)) \\<and>\n   fst (f (ts ! min i1 i2) (us ! min i1 i2)) \\<longrightarrow>\n   fst (f (ss ! min i1 i2) (us ! min i1 i2)))\n  fst (f (ss ! min i1 i2) (ts ! min i1 i2))\n  fst (f (ts ! min i1 i2) (us ! min i1 i2))\n\ngoal (1 subgoal):\n 1. fst (f (ss ! min i1 i2) (us ! min i1 i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (us ! min i1 i2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (us ! min i1 i2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (f (ss ! min i1 i2) (us ! min i1 i2))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (lex_ext f n ss us)", "by (simp add: lex_ext_iff lsu, rule disjI1, rule exI[of _ ?i], simp add: fst snd i)"], ["proof (state)\nthis:\n  snd (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "assume tu: \"?all ts us \\<and> ?lu \\<le> ?lt\""], ["proof (state)\nthis:\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (lex_ext f n ss us)", "proof (cases \"i1 < ?lu\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)", "case True"], ["proof (state)\nthis:\n  i1 < length us\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)", "then"], ["proof (chain)\npicking this:\n  i1 < length us", "have usi: \"us ! i1 \\<in> set us\""], ["proof (prove)\nusing this:\n  i1 < length us\n\ngoal (1 subgoal):\n 1. us ! i1 \\<in> set us", "by auto"], ["proof (state)\nthis:\n  us ! i1 \\<in> set us\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)", "from i1"], ["proof (chain)\npicking this:\n  i1 < length ss \\<and> i1 < length ts", "have ssi: \"ss ! i1 \\<in> set ss\" and tsi: \"ts ! i1 \\<in> set ts\""], ["proof (prove)\nusing this:\n  i1 < length ss \\<and> i1 < length ts\n\ngoal (1 subgoal):\n 1. ss ! i1 \\<in> set ss &&& ts ! i1 \\<in> set ts", "by auto"], ["proof (state)\nthis:\n  ss ! i1 \\<in> set ss\n  ts ! i1 \\<in> set ts\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)", "from True tu"], ["proof (chain)\npicking this:\n  i1 < length us\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts", "have \"?snd ts us i1\""], ["proof (prove)\nusing this:\n  i1 < length us\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n\ngoal (1 subgoal):\n 1. snd (f (ts ! i1) (us ! i1))", "by auto"], ["proof (state)\nthis:\n  snd (f (ts ! i1) (us ! i1))\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)", "with fst1 compat[OF ssi tsi usi]"], ["proof (chain)\npicking this:\n  fst (f (ss ! i1) (ts ! i1))\n  (snd (f (ss ! i1) (ts ! i1)) \\<and>\n   fst (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1))) \\<and>\n  (fst (f (ss ! i1) (ts ! i1)) \\<and>\n   snd (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1))) \\<and>\n  (snd (f (ss ! i1) (ts ! i1)) \\<and>\n   snd (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   snd (f (ss ! i1) (us ! i1))) \\<and>\n  (fst (f (ss ! i1) (ts ! i1)) \\<and>\n   fst (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1)))\n  snd (f (ts ! i1) (us ! i1))", "have fst: \"?fst ss us i1\""], ["proof (prove)\nusing this:\n  fst (f (ss ! i1) (ts ! i1))\n  (snd (f (ss ! i1) (ts ! i1)) \\<and>\n   fst (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1))) \\<and>\n  (fst (f (ss ! i1) (ts ! i1)) \\<and>\n   snd (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1))) \\<and>\n  (snd (f (ss ! i1) (ts ! i1)) \\<and>\n   snd (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   snd (f (ss ! i1) (us ! i1))) \\<and>\n  (fst (f (ss ! i1) (ts ! i1)) \\<and>\n   fst (f (ts ! i1) (us ! i1)) \\<longrightarrow>\n   fst (f (ss ! i1) (us ! i1)))\n  snd (f (ts ! i1) (us ! i1))\n\ngoal (1 subgoal):\n 1. fst (f (ss ! i1) (us ! i1))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! i1) (us ! i1))\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)", "have snd: \"\\<forall> j < i1. ?snd ss us j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<i1. snd (f (ss ! j) (us ! j))", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < i1 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < i1 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "assume \"j < i1\""], ["proof (state)\nthis:\n  j < i1\n\ngoal (1 subgoal):\n 1. \\<And>j. j < i1 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "with i1 True snd1 tu"], ["proof (chain)\npicking this:\n  i1 < length ss \\<and> i1 < length ts\n  i1 < length us\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n  j < i1", "have snd1: \"?snd ss ts j\" and snd2: \"?snd ts us j\" and \n              ssj: \"ss ! j \\<in> set ss\" and tsj: \"ts ! j \\<in> set ts\" and usj: \"us ! j \\<in> set us\""], ["proof (prove)\nusing this:\n  i1 < length ss \\<and> i1 < length ts\n  i1 < length us\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n  j < i1\n\ngoal (1 subgoal):\n 1. (snd (f (ss ! j) (ts ! j)) &&& snd (f (ts ! j) (us ! j))) &&&\n    ss ! j \\<in> set ss &&& ts ! j \\<in> set ts &&& us ! j \\<in> set us", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n  ss ! j \\<in> set ss\n  ts ! j \\<in> set ts\n  us ! j \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < i1 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from compat[OF ssj tsj usj] snd1 snd2"], ["proof (chain)\npicking this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))", "show \"?snd ss us j\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (us ! j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<i1. snd (f (ss ! j) (us ! j))\n\ngoal (2 subgoals):\n 1. i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)\n 2. \\<not> i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)", "with fst lsu True i1"], ["proof (chain)\npicking this:\n  fst (f (ss ! i1) (us ! i1))\n  length ss = length us \\<or> length us \\<le> n\n  i1 < length us\n  i1 < length ss \\<and> i1 < length ts\n  \\<forall>j<i1. snd (f (ss ! j) (us ! j))", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (f (ss ! i1) (us ! i1))\n  length ss = length us \\<or> length us \\<le> n\n  i1 < length us\n  i1 < length ss \\<and> i1 < length ts\n  \\<forall>j<i1. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (lex_ext f n ss us)", "by (auto simp: lex_ext_iff)"], ["proof (state)\nthis:\n  snd (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. \\<not> i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)", "case False"], ["proof (state)\nthis:\n  \\<not> i1 < length us\n\ngoal (1 subgoal):\n 1. \\<not> i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)", "with i1"], ["proof (chain)\npicking this:\n  i1 < length ss \\<and> i1 < length ts\n  \\<not> i1 < length us", "have lus: \"?lu \\<le> ?ls\""], ["proof (prove)\nusing this:\n  i1 < length ss \\<and> i1 < length ts\n  \\<not> i1 < length us\n\ngoal (1 subgoal):\n 1. length us \\<le> length ss", "by auto"], ["proof (state)\nthis:\n  length us \\<le> length ss\n\ngoal (1 subgoal):\n 1. \\<not> i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)", "have snd: \"\\<forall> j < ?lu. ?snd ss us j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<length us. snd (f (ss ! j) (us ! j))", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "assume \"j < ?lu\""], ["proof (state)\nthis:\n  j < length us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "with False i1 snd1 tu"], ["proof (chain)\npicking this:\n  \\<not> i1 < length us\n  i1 < length ss \\<and> i1 < length ts\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n  j < length us", "have snd1: \"?snd ss ts j\" and snd2: \"?snd ts us j\" and \n              ssj: \"ss ! j \\<in> set ss\" and tsj: \"ts ! j \\<in> set ts\" and usj: \"us ! j \\<in> set us\""], ["proof (prove)\nusing this:\n  \\<not> i1 < length us\n  i1 < length ss \\<and> i1 < length ts\n  \\<forall>j<i1. snd (f (ss ! j) (ts ! j))\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n  j < length us\n\ngoal (1 subgoal):\n 1. (snd (f (ss ! j) (ts ! j)) &&& snd (f (ts ! j) (us ! j))) &&&\n    ss ! j \\<in> set ss &&& ts ! j \\<in> set ts &&& us ! j \\<in> set us", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n  ss ! j \\<in> set ss\n  ts ! j \\<in> set ts\n  us ! j \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from compat[OF ssj tsj usj] snd1 snd2"], ["proof (chain)\npicking this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))", "show \"?snd ss us j\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (us ! j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. \\<not> i1 < length us \\<Longrightarrow> snd (lex_ext f n ss us)", "with lus lsu"], ["proof (chain)\npicking this:\n  length us \\<le> length ss\n  length ss = length us \\<or> length us \\<le> n\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))", "show ?thesis"], ["proof (prove)\nusing this:\n  length us \\<le> length ss\n  length ss = length us \\<or> length us \\<le> n\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (lex_ext f n ss us)", "by (auto simp: lex_ext_iff)"], ["proof (state)\nthis:\n  snd (lex_ext f n ss us)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (lex_ext f n ss us)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts \\<le> length ss \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts \\<le> length ss \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "assume st: \"?all ss ts \\<and> ?lt \\<le> ?ls\""], ["proof (state)\nthis:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n    length ts \\<le> length ss \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "from tu"], ["proof (chain)\npicking this:\n  (\\<exists>i<length ts.\n      i < length us \\<and>\n      (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n      fst (f (ts ! i) (us ! i))) \\<or>\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>i<length ts.\n      i < length us \\<and>\n      (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n      fst (f (ts ! i) (us ! i))) \\<or>\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n\ngoal (1 subgoal):\n 1. snd (lex_ext f n ss us)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "assume tu: \"?ex ts us\""], ["proof (state)\nthis:\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "with st"], ["proof (chain)\npicking this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))", "obtain i2 where i2: \"i2 < ?lt \\<and> i2 < ?lu\" and fst2: \"?fst ts us i2\" and snd2: \"\\<forall> j < i2. ?snd ts us j\""], ["proof (prove)\nusing this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  \\<exists>i<length ts.\n     i < length us \\<and>\n     (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n     fst (f (ts ! i) (us ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>i2.\n        \\<lbrakk>i2 < length ts \\<and> i2 < length us;\n         fst (f (ts ! i2) (us ! i2));\n         \\<forall>j<i2. snd (f (ts ! j) (us ! j))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i2 < length ts \\<and> i2 < length us\n  fst (f (ts ! i2) (us ! i2))\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "from st i2"], ["proof (chain)\npicking this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  i2 < length ts \\<and> i2 < length us", "have i2: \"i2 < ?ls \\<and> i2 < ?lt \\<and> i2 < ?lu\""], ["proof (prove)\nusing this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  i2 < length ts \\<and> i2 < length us\n\ngoal (1 subgoal):\n 1. i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us", "by auto"], ["proof (state)\nthis:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "then"], ["proof (chain)\npicking this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us", "have ssi: \"ss ! i2 \\<in> set ss\" and tsi: \"ts ! i2 \\<in> set ts\" and usi: \"us ! i2 \\<in> set us\""], ["proof (prove)\nusing this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n\ngoal (1 subgoal):\n 1. ss ! i2 \\<in> set ss &&& ts ! i2 \\<in> set ts &&& us ! i2 \\<in> set us", "by auto"], ["proof (state)\nthis:\n  ss ! i2 \\<in> set ss\n  ts ! i2 \\<in> set ts\n  us ! i2 \\<in> set us\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "from i2 st"], ["proof (chain)\npicking this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss", "have \"?snd ss ts i2\""], ["proof (prove)\nusing this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n\ngoal (1 subgoal):\n 1. snd (f (ss ! i2) (ts ! i2))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! i2) (ts ! i2))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "with fst2 compat[OF ssi tsi usi]"], ["proof (chain)\npicking this:\n  fst (f (ts ! i2) (us ! i2))\n  (snd (f (ss ! i2) (ts ! i2)) \\<and>\n   fst (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2))) \\<and>\n  (fst (f (ss ! i2) (ts ! i2)) \\<and>\n   snd (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2))) \\<and>\n  (snd (f (ss ! i2) (ts ! i2)) \\<and>\n   snd (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   snd (f (ss ! i2) (us ! i2))) \\<and>\n  (fst (f (ss ! i2) (ts ! i2)) \\<and>\n   fst (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2)))\n  snd (f (ss ! i2) (ts ! i2))", "have fst: \"?fst ss us i2\""], ["proof (prove)\nusing this:\n  fst (f (ts ! i2) (us ! i2))\n  (snd (f (ss ! i2) (ts ! i2)) \\<and>\n   fst (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2))) \\<and>\n  (fst (f (ss ! i2) (ts ! i2)) \\<and>\n   snd (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2))) \\<and>\n  (snd (f (ss ! i2) (ts ! i2)) \\<and>\n   snd (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   snd (f (ss ! i2) (us ! i2))) \\<and>\n  (fst (f (ss ! i2) (ts ! i2)) \\<and>\n   fst (f (ts ! i2) (us ! i2)) \\<longrightarrow>\n   fst (f (ss ! i2) (us ! i2)))\n  snd (f (ss ! i2) (ts ! i2))\n\ngoal (1 subgoal):\n 1. fst (f (ss ! i2) (us ! i2))", "by auto"], ["proof (state)\nthis:\n  fst (f (ss ! i2) (us ! i2))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "have snd: \"\\<forall> j < i2. ?snd ss us j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<i2. snd (f (ss ! j) (us ! j))", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "assume \"j < i2\""], ["proof (state)\nthis:\n  j < i2\n\ngoal (1 subgoal):\n 1. \\<And>j. j < i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "with i2 snd2 st"], ["proof (chain)\npicking this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  j < i2", "have snd1: \"?snd ss ts j\" and snd2: \"?snd ts us j\" and \n            ssj: \"ss ! j \\<in> set ss\" and tsj: \"ts ! j \\<in> set ts\" and usj: \"us ! j \\<in> set us\""], ["proof (prove)\nusing this:\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  \\<forall>j<i2. snd (f (ts ! j) (us ! j))\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  j < i2\n\ngoal (1 subgoal):\n 1. (snd (f (ss ! j) (ts ! j)) &&& snd (f (ts ! j) (us ! j))) &&&\n    ss ! j \\<in> set ss &&& ts ! j \\<in> set ts &&& us ! j \\<in> set us", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n  ss ! j \\<in> set ss\n  ts ! j \\<in> set ts\n  us ! j \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < i2 \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from compat[OF ssj tsj usj] snd1 snd2"], ["proof (chain)\npicking this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))", "show \"?snd ss us j\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (us ! j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<i2. snd (f (ss ! j) (us ! j))\n\ngoal (2 subgoals):\n 1. \\<exists>i<length ts.\n       i < length us \\<and>\n       (\\<forall>j<i. snd (f (ts ! j) (us ! j))) \\<and>\n       fst (f (ts ! i) (us ! i)) \\<Longrightarrow>\n    snd (lex_ext f n ss us)\n 2. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "with fst lsu i2"], ["proof (chain)\npicking this:\n  fst (f (ss ! i2) (us ! i2))\n  length ss = length us \\<or> length us \\<le> n\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  \\<forall>j<i2. snd (f (ss ! j) (us ! j))", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (f (ss ! i2) (us ! i2))\n  length ss = length us \\<or> length us \\<le> n\n  i2 < length ss \\<and> i2 < length ts \\<and> i2 < length us\n  \\<forall>j<i2. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (lex_ext f n ss us)", "by (auto simp: lex_ext_iff)"], ["proof (state)\nthis:\n  snd (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "assume tu: \"?all ts us \\<and> ?lu \\<le> ?lt\""], ["proof (state)\nthis:\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "with st"], ["proof (chain)\npicking this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts", "have lus: \"?lu \\<le> ?ls\""], ["proof (prove)\nusing this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n\ngoal (1 subgoal):\n 1. length us \\<le> length ss", "by auto"], ["proof (state)\nthis:\n  length us \\<le> length ss\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "have snd: \"\\<forall> j < ?lu. ?snd ss us j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<length us. snd (f (ss ! j) (us ! j))", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "assume \"j < ?lu\""], ["proof (state)\nthis:\n  j < length us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "with st tu"], ["proof (chain)\npicking this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n  j < length us", "have snd1: \"?snd ss ts j\" and snd2: \"?snd ts us j\" and \n            ssj: \"ss ! j \\<in> set ss\" and tsj: \"ts ! j \\<in> set ts\" and usj: \"us ! j \\<in> set us\""], ["proof (prove)\nusing this:\n  (\\<forall>i<length ts. snd (f (ss ! i) (ts ! i))) \\<and>\n  length ts \\<le> length ss\n  (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n  length us \\<le> length ts\n  j < length us\n\ngoal (1 subgoal):\n 1. (snd (f (ss ! j) (ts ! j)) &&& snd (f (ts ! j) (us ! j))) &&&\n    ss ! j \\<in> set ss &&& ts ! j \\<in> set ts &&& us ! j \\<in> set us", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n  ss ! j \\<in> set ss\n  ts ! j \\<in> set ts\n  us ! j \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>j. j < length us \\<Longrightarrow> snd (f (ss ! j) (us ! j))", "from compat[OF ssj tsj usj] snd1 snd2"], ["proof (chain)\npicking this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))", "show \"?snd ss us j\""], ["proof (prove)\nusing this:\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j))) \\<and>\n  (snd (f (ss ! j) (ts ! j)) \\<and>\n   snd (f (ts ! j) (us ! j)) \\<longrightarrow>\n   snd (f (ss ! j) (us ! j))) \\<and>\n  (fst (f (ss ! j) (ts ! j)) \\<and>\n   fst (f (ts ! j) (us ! j)) \\<longrightarrow>\n   fst (f (ss ! j) (us ! j)))\n  snd (f (ss ! j) (ts ! j))\n  snd (f (ts ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (f (ss ! j) (us ! j))", "by auto"], ["proof (state)\nthis:\n  snd (f (ss ! j) (us ! j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. (\\<forall>i<length us. snd (f (ts ! i) (us ! i))) \\<and>\n    length us \\<le> length ts \\<Longrightarrow>\n    snd (lex_ext f n ss us)", "with lus lsu"], ["proof (chain)\npicking this:\n  length us \\<le> length ss\n  length ss = length us \\<or> length us \\<le> n\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))", "show ?thesis"], ["proof (prove)\nusing this:\n  length us \\<le> length ss\n  length ss = length us \\<or> length us \\<le> n\n  \\<forall>j<length us. snd (f (ss ! j) (us ! j))\n\ngoal (1 subgoal):\n 1. snd (lex_ext f n ss us)", "by (auto simp: lex_ext_iff)"], ["proof (state)\nthis:\n  snd (lex_ext f n ss us)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (lex_ext f n ss us)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>snd (lex_ext f n ss ts); snd (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> snd (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>snd (lex_ext f n ss ts); fst (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> fst (lex_ext f n ss us)\n  \\<lbrakk>fst (lex_ext f n ss ts); snd (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> fst (lex_ext f n ss us)\n  \\<lbrakk>snd (lex_ext f n ss ts); snd (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> snd (lex_ext f n ss us)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>snd (lex_ext f n ss ts); fst (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> fst (lex_ext f n ss us)\n  \\<lbrakk>fst (lex_ext f n ss ts); snd (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> fst (lex_ext f n ss us)\n  \\<lbrakk>snd (lex_ext f n ss ts); snd (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> snd (lex_ext f n ss us)\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "using lex_ext_stri_imp_nstri"], ["proof (prove)\nusing this:\n  \\<lbrakk>snd (lex_ext f n ss ts); fst (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> fst (lex_ext f n ss us)\n  \\<lbrakk>fst (lex_ext f n ss ts); snd (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> fst (lex_ext f n ss us)\n  \\<lbrakk>snd (lex_ext f n ss ts); snd (lex_ext f n ts us)\\<rbrakk>\n  \\<Longrightarrow> snd (lex_ext f n ss us)\n  fst (lex_ext ?f ?m ?xs ?ys) \\<Longrightarrow> snd (lex_ext ?f ?m ?xs ?ys)\n\ngoal (1 subgoal):\n 1. (snd (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us)) \\<and>\n    (snd (lex_ext f n ss ts) \\<and>\n     snd (lex_ext f n ts us) \\<longrightarrow>\n     snd (lex_ext f n ss us)) \\<and>\n    (fst (lex_ext f n ss ts) \\<and>\n     fst (lex_ext f n ts us) \\<longrightarrow>\n     fst (lex_ext f n ss us))", "by blast"], ["proof (state)\nthis:\n  (snd (lex_ext f n ss ts) \\<and> fst (lex_ext f n ts us) \\<longrightarrow>\n   fst (lex_ext f n ss us)) \\<and>\n  (fst (lex_ext f n ss ts) \\<and> snd (lex_ext f n ts us) \\<longrightarrow>\n   fst (lex_ext f n ss us)) \\<and>\n  (snd (lex_ext f n ss ts) \\<and> snd (lex_ext f n ts us) \\<longrightarrow>\n   snd (lex_ext f n ss us)) \\<and>\n  (fst (lex_ext f n ss ts) \\<and> fst (lex_ext f n ts us) \\<longrightarrow>\n   fst (lex_ext f n ss us))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lex_ext_unbounded_map:\n  assumes S: \"\\<And> i. i < length ss \\<Longrightarrow> i < length ts \\<Longrightarrow> fst (r (ss ! i) (ts ! i)) \\<Longrightarrow> fst (r (map f ss ! i) (map f ts ! i))\"\n    and NS: \"\\<And> i. i < length ss \\<Longrightarrow> i < length ts \\<Longrightarrow> snd (r (ss ! i) (ts ! i)) \\<Longrightarrow> snd (r (map f ss ! i) (map f ts ! i))\"\n  shows \"(fst (lex_ext_unbounded r ss ts) \\<longrightarrow> fst (lex_ext_unbounded r (map f ss) (map f ts))) \\<and>\n    (snd (lex_ext_unbounded r ss ts) \\<longrightarrow> snd (lex_ext_unbounded r (map f ss) (map f ts)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (lex_ext_unbounded r ss ts) \\<longrightarrow>\n     fst (lex_ext_unbounded r (map f ss) (map f ts))) \\<and>\n    (snd (lex_ext_unbounded r ss ts) \\<longrightarrow>\n     snd (lex_ext_unbounded r (map f ss) (map f ts)))", "using S NS"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < length ss; ?i < length ts;\n   fst (r (ss ! ?i) (ts ! ?i))\\<rbrakk>\n  \\<Longrightarrow> fst (r (map f ss ! ?i) (map f ts ! ?i))\n  \\<lbrakk>?i < length ss; ?i < length ts;\n   snd (r (ss ! ?i) (ts ! ?i))\\<rbrakk>\n  \\<Longrightarrow> snd (r (map f ss ! ?i) (map f ts ! ?i))\n\ngoal (1 subgoal):\n 1. (fst (lex_ext_unbounded r ss ts) \\<longrightarrow>\n     fst (lex_ext_unbounded r (map f ss) (map f ts))) \\<and>\n    (snd (lex_ext_unbounded r ss ts) \\<longrightarrow>\n     snd (lex_ext_unbounded r (map f ss) (map f ts)))", "unfolding lex_ext_unbounded_iff"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < length ss; ?i < length ts;\n   fst (r (ss ! ?i) (ts ! ?i))\\<rbrakk>\n  \\<Longrightarrow> fst (r (map f ss ! ?i) (map f ts ! ?i))\n  \\<lbrakk>?i < length ss; ?i < length ts;\n   snd (r (ss ! ?i) (ts ! ?i))\\<rbrakk>\n  \\<Longrightarrow> snd (r (map f ss ! ?i) (map f ts ! ?i))\n\ngoal (1 subgoal):\n 1. (fst ((\\<exists>i<length ss.\n              i < length ts \\<and>\n              (\\<forall>j<i. snd (r (ss ! j) (ts ! j))) \\<and>\n              fst (r (ss ! i) (ts ! i))) \\<or>\n          (\\<forall>i<length ts. snd (r (ss ! i) (ts ! i))) \\<and>\n          length ts < length ss,\n          (\\<exists>i<length ss.\n              i < length ts \\<and>\n              (\\<forall>j<i. snd (r (ss ! j) (ts ! j))) \\<and>\n              fst (r (ss ! i) (ts ! i))) \\<or>\n          (\\<forall>i<length ts. snd (r (ss ! i) (ts ! i))) \\<and>\n          length ts \\<le> length ss) \\<longrightarrow>\n     fst ((\\<exists>i<length (map f ss).\n              i < length (map f ts) \\<and>\n              (\\<forall>j<i. snd (r (map f ss ! j) (map f ts ! j))) \\<and>\n              fst (r (map f ss ! i) (map f ts ! i))) \\<or>\n          (\\<forall>i<length (map f ts).\n              snd (r (map f ss ! i) (map f ts ! i))) \\<and>\n          length (map f ts) < length (map f ss),\n          (\\<exists>i<length (map f ss).\n              i < length (map f ts) \\<and>\n              (\\<forall>j<i. snd (r (map f ss ! j) (map f ts ! j))) \\<and>\n              fst (r (map f ss ! i) (map f ts ! i))) \\<or>\n          (\\<forall>i<length (map f ts).\n              snd (r (map f ss ! i) (map f ts ! i))) \\<and>\n          length (map f ts) \\<le> length (map f ss))) \\<and>\n    (snd ((\\<exists>i<length ss.\n              i < length ts \\<and>\n              (\\<forall>j<i. snd (r (ss ! j) (ts ! j))) \\<and>\n              fst (r (ss ! i) (ts ! i))) \\<or>\n          (\\<forall>i<length ts. snd (r (ss ! i) (ts ! i))) \\<and>\n          length ts < length ss,\n          (\\<exists>i<length ss.\n              i < length ts \\<and>\n              (\\<forall>j<i. snd (r (ss ! j) (ts ! j))) \\<and>\n              fst (r (ss ! i) (ts ! i))) \\<or>\n          (\\<forall>i<length ts. snd (r (ss ! i) (ts ! i))) \\<and>\n          length ts \\<le> length ss) \\<longrightarrow>\n     snd ((\\<exists>i<length (map f ss).\n              i < length (map f ts) \\<and>\n              (\\<forall>j<i. snd (r (map f ss ! j) (map f ts ! j))) \\<and>\n              fst (r (map f ss ! i) (map f ts ! i))) \\<or>\n          (\\<forall>i<length (map f ts).\n              snd (r (map f ss ! i) (map f ts ! i))) \\<and>\n          length (map f ts) < length (map f ss),\n          (\\<exists>i<length (map f ss).\n              i < length (map f ts) \\<and>\n              (\\<forall>j<i. snd (r (map f ss ! j) (map f ts ! j))) \\<and>\n              fst (r (map f ss ! i) (map f ts ! i))) \\<or>\n          (\\<forall>i<length (map f ts).\n              snd (r (map f ss ! i) (map f ts ! i))) \\<and>\n          length (map f ts) \\<le> length (map f ss)))", "by auto"], ["", "lemma lex_ext_unbounded_map_S:\n  assumes S: \"\\<And> i. i < length ss \\<Longrightarrow> i < length ts \\<Longrightarrow> fst (r (ss ! i) (ts ! i)) \\<Longrightarrow> fst (r (map f ss ! i) (map f ts ! i))\"\n    and NS: \"\\<And> i. i < length ss \\<Longrightarrow> i < length ts \\<Longrightarrow> snd (r (ss ! i) (ts ! i)) \\<Longrightarrow> snd (r (map f ss ! i) (map f ts ! i))\"\n    and stri: \"fst (lex_ext_unbounded r ss ts)\"\n  shows \"fst (lex_ext_unbounded r (map f ss) (map f ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded r (map f ss) (map f ts))", "using lex_ext_unbounded_map[of ss ts r f, OF S NS] stri"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>i < length ss; i < length ts;\n               fst (r (ss ! i) (ts ! i))\\<rbrakk>\n              \\<Longrightarrow> i < length ss;\n   \\<And>i.\n      \\<lbrakk>i < length ss; i < length ts;\n       fst (r (ss ! i) (ts ! i))\\<rbrakk>\n      \\<Longrightarrow> i < length ts;\n   \\<And>i.\n      \\<lbrakk>i < length ss; i < length ts;\n       fst (r (ss ! i) (ts ! i))\\<rbrakk>\n      \\<Longrightarrow> fst (r (ss ! i) (ts ! i));\n   \\<And>i.\n      \\<lbrakk>i < length ss; i < length ts;\n       snd (r (ss ! i) (ts ! i))\\<rbrakk>\n      \\<Longrightarrow> i < length ss;\n   \\<And>i.\n      \\<lbrakk>i < length ss; i < length ts;\n       snd (r (ss ! i) (ts ! i))\\<rbrakk>\n      \\<Longrightarrow> i < length ts;\n   \\<And>i.\n      \\<lbrakk>i < length ss; i < length ts;\n       snd (r (ss ! i) (ts ! i))\\<rbrakk>\n      \\<Longrightarrow> snd (r (ss ! i) (ts ! i))\\<rbrakk>\n  \\<Longrightarrow> (fst (lex_ext_unbounded r ss ts) \\<longrightarrow>\n                     fst (lex_ext_unbounded r (map f ss) (map f ts))) \\<and>\n                    (snd (lex_ext_unbounded r ss ts) \\<longrightarrow>\n                     snd (lex_ext_unbounded r (map f ss) (map f ts)))\n  fst (lex_ext_unbounded r ss ts)\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded r (map f ss) (map f ts))", "by blast"], ["", "lemma lex_ext_unbounded_map_NS:\n  assumes S: \"\\<And> i. i < length ss \\<Longrightarrow> i < length ts \\<Longrightarrow> fst (r (ss ! i) (ts ! i)) \\<Longrightarrow> fst (r (map f ss ! i) (map f ts ! i))\"\n    and NS: \"\\<And> i. i < length ss \\<Longrightarrow> i < length ts \\<Longrightarrow> snd (r (ss ! i) (ts ! i)) \\<Longrightarrow> snd (r (map f ss ! i) (map f ts ! i))\"\n    and nstri: \"snd (lex_ext_unbounded r ss ts)\"\n  shows \"snd (lex_ext_unbounded r (map f ss) (map f ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded r (map f ss) (map f ts))", "using lex_ext_unbounded_map[of ss ts r f, OF S NS] nstri"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>i < length ss; i < length ts;\n               fst (r (ss ! i) (ts ! i))\\<rbrakk>\n              \\<Longrightarrow> i < length ss;\n   \\<And>i.\n      \\<lbrakk>i < length ss; i < length ts;\n       fst (r (ss ! i) (ts ! i))\\<rbrakk>\n      \\<Longrightarrow> i < length ts;\n   \\<And>i.\n      \\<lbrakk>i < length ss; i < length ts;\n       fst (r (ss ! i) (ts ! i))\\<rbrakk>\n      \\<Longrightarrow> fst (r (ss ! i) (ts ! i));\n   \\<And>i.\n      \\<lbrakk>i < length ss; i < length ts;\n       snd (r (ss ! i) (ts ! i))\\<rbrakk>\n      \\<Longrightarrow> i < length ss;\n   \\<And>i.\n      \\<lbrakk>i < length ss; i < length ts;\n       snd (r (ss ! i) (ts ! i))\\<rbrakk>\n      \\<Longrightarrow> i < length ts;\n   \\<And>i.\n      \\<lbrakk>i < length ss; i < length ts;\n       snd (r (ss ! i) (ts ! i))\\<rbrakk>\n      \\<Longrightarrow> snd (r (ss ! i) (ts ! i))\\<rbrakk>\n  \\<Longrightarrow> (fst (lex_ext_unbounded r ss ts) \\<longrightarrow>\n                     fst (lex_ext_unbounded r (map f ss) (map f ts))) \\<and>\n                    (snd (lex_ext_unbounded r ss ts) \\<longrightarrow>\n                     snd (lex_ext_unbounded r (map f ss) (map f ts)))\n  snd (lex_ext_unbounded r ss ts)\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded r (map f ss) (map f ts))", "by blast"], ["", "text \\<open>Strong normalization with local SN assumption\\<close>"], ["", "lemma lex_ext_SN:\n  assumes compat: \"\\<And> x y z. \\<lbrakk>snd (g x y); fst (g y z)\\<rbrakk> \\<Longrightarrow> fst (g x z)\"\n  shows \"SN { (ys, xs). (\\<forall> y \\<in> set ys. SN_on { (s, t). fst (g s t) } {y}) \\<and> fst (lex_ext g m ys xs) }\" \n    (is \"SN { (ys, xs). ?cond ys xs }\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (lex_ext g m ys xs)}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> SN {(ys, xs).\n             (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n             fst (lex_ext g m ys xs)}\n\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "from this"], ["proof (chain)\npicking this:\n  \\<not> SN {(ys, xs).\n             (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n             fst (lex_ext g m ys xs)}", "obtain f where f: \"\\<And> n :: nat. ?cond (f n) (f (Suc n))\""], ["proof (prove)\nusing this:\n  \\<not> SN {(ys, xs).\n             (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n             fst (lex_ext g m ys xs)}\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        (\\<And>n.\n            (\\<forall>y\\<in>set (f n).\n                SN_on {(s, t). fst (g s t)} {y}) \\<and>\n            fst (lex_ext g m (f n) (f (Suc n)))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding SN_defs"], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>f.\n             f 0 \\<in> UNIV \\<and>\n             (\\<forall>i.\n                 (f i, f (Suc i))\n                 \\<in> {(ys, xs).\n                        (\\<forall>y\\<in>set ys.\n                            \\<nexists>f.\n                               f 0 \\<in> {y} \\<and>\n                               (\\<forall>i.\n                                   (f i, f (Suc i))\n                                   \\<in> {(s, t). fst (g s t)})) \\<and>\n                        fst (lex_ext g m ys xs)}))\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        (\\<And>n.\n            (\\<forall>y\\<in>set (f n).\n                \\<nexists>f.\n                   f 0 \\<in> {y} \\<and>\n                   (\\<forall>i.\n                       (f i, f (Suc i)) \\<in> {(s, t). fst (g s t)})) \\<and>\n            fst (lex_ext g m (f n) (f (Suc n)))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (\\<forall>y\\<in>set (f ?n). SN_on {(s, t). fst (g s t)} {y}) \\<and>\n  fst (lex_ext g m (f ?n) (f (Suc ?n)))\n\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "have m_imp_m: \"\\<And> n. length (f n) \\<le> m \\<Longrightarrow> length (f (Suc n)) \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       length (f n) \\<le> m \\<Longrightarrow> length (f (Suc n)) \\<le> m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       length (f n) \\<le> m \\<Longrightarrow> length (f (Suc n)) \\<le> m", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       length (f n) \\<le> m \\<Longrightarrow> length (f (Suc n)) \\<le> m", "assume \"length (f n) \\<le> m\""], ["proof (state)\nthis:\n  length (f n) \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       length (f n) \\<le> m \\<Longrightarrow> length (f (Suc n)) \\<le> m", "then"], ["proof (chain)\npicking this:\n  length (f n) \\<le> m", "show \"length (f (Suc n)) \\<le> m\""], ["proof (prove)\nusing this:\n  length (f n) \\<le> m\n\ngoal (1 subgoal):\n 1. length (f (Suc n)) \\<le> m", "using f[of n]"], ["proof (prove)\nusing this:\n  length (f n) \\<le> m\n  (\\<forall>y\\<in>set (f n). SN_on {(s, t). fst (g s t)} {y}) \\<and>\n  fst (lex_ext g m (f n) (f (Suc n)))\n\ngoal (1 subgoal):\n 1. length (f (Suc n)) \\<le> m", "by (auto simp: lex_ext_iff)"], ["proof (state)\nthis:\n  length (f (Suc n)) \\<le> m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (f ?n) \\<le> m \\<Longrightarrow> length (f (Suc ?n)) \\<le> m\n\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "have lm_imp_m_or_eq: \"\\<And> n. length (f n) > m \\<Longrightarrow> length (f (Suc n)) \\<le> m \\<or> length (f n) = length (f (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       m < length (f n) \\<Longrightarrow>\n       length (f (Suc n)) \\<le> m \\<or> length (f n) = length (f (Suc n))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       m < length (f n) \\<Longrightarrow>\n       length (f (Suc n)) \\<le> m \\<or> length (f n) = length (f (Suc n))", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       m < length (f n) \\<Longrightarrow>\n       length (f (Suc n)) \\<le> m \\<or> length (f n) = length (f (Suc n))", "assume \"length (f n) > m\""], ["proof (state)\nthis:\n  m < length (f n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       m < length (f n) \\<Longrightarrow>\n       length (f (Suc n)) \\<le> m \\<or> length (f n) = length (f (Suc n))", "then"], ["proof (chain)\npicking this:\n  m < length (f n)", "have \"\\<not> length (f n) \\<le> m\""], ["proof (prove)\nusing this:\n  m < length (f n)\n\ngoal (1 subgoal):\n 1. \\<not> length (f n) \\<le> m", "by auto"], ["proof (state)\nthis:\n  \\<not> length (f n) \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       m < length (f n) \\<Longrightarrow>\n       length (f (Suc n)) \\<le> m \\<or> length (f n) = length (f (Suc n))", "then"], ["proof (chain)\npicking this:\n  \\<not> length (f n) \\<le> m", "show \"length (f (Suc n)) \\<le> m \\<or> length (f n) = length (f (Suc n))\""], ["proof (prove)\nusing this:\n  \\<not> length (f n) \\<le> m\n\ngoal (1 subgoal):\n 1. length (f (Suc n)) \\<le> m \\<or> length (f n) = length (f (Suc n))", "using f[of n]"], ["proof (prove)\nusing this:\n  \\<not> length (f n) \\<le> m\n  (\\<forall>y\\<in>set (f n). SN_on {(s, t). fst (g s t)} {y}) \\<and>\n  fst (lex_ext g m (f n) (f (Suc n)))\n\ngoal (1 subgoal):\n 1. length (f (Suc n)) \\<le> m \\<or> length (f n) = length (f (Suc n))", "by (simp add: lex_ext_iff, blast)"], ["proof (state)\nthis:\n  length (f (Suc n)) \\<le> m \\<or> length (f n) = length (f (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  m < length (f ?n) \\<Longrightarrow>\n  length (f (Suc ?n)) \\<le> m \\<or> length (f ?n) = length (f (Suc ?n))\n\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "let ?l0 = \"max (length (f 0)) m\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "have \"\\<And> n. length (f n) \\<le> ?l0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. length (f n) \\<le> max (length (f 0)) m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. length (f n) \\<le> max (length (f 0)) m", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. length (f n) \\<le> max (length (f 0)) m", "show \"length (f n) \\<le> ?l0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (f n) \\<le> max (length (f 0)) m", "proof (induct n, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       length (f n) \\<le> max (length (f 0)) m \\<Longrightarrow>\n       length (f (Suc n)) \\<le> max (length (f 0)) m", "case (Suc n)"], ["proof (state)\nthis:\n  length (f n) \\<le> max (length (f 0)) m\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       length (f n) \\<le> max (length (f 0)) m \\<Longrightarrow>\n       length (f (Suc n)) \\<le> max (length (f 0)) m", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (f (Suc n)) \\<le> max (length (f 0)) m", "proof (cases \"length (f n) \\<le> m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length (f n) \\<le> m \\<Longrightarrow>\n    length (f (Suc n)) \\<le> max (length (f 0)) m\n 2. \\<not> length (f n) \\<le> m \\<Longrightarrow>\n    length (f (Suc n)) \\<le> max (length (f 0)) m", "case True"], ["proof (state)\nthis:\n  length (f n) \\<le> m\n\ngoal (2 subgoals):\n 1. length (f n) \\<le> m \\<Longrightarrow>\n    length (f (Suc n)) \\<le> max (length (f 0)) m\n 2. \\<not> length (f n) \\<le> m \\<Longrightarrow>\n    length (f (Suc n)) \\<le> max (length (f 0)) m", "with m_imp_m[of n]"], ["proof (chain)\npicking this:\n  length (f n) \\<le> m \\<Longrightarrow> length (f (Suc n)) \\<le> m\n  length (f n) \\<le> m", "show ?thesis"], ["proof (prove)\nusing this:\n  length (f n) \\<le> m \\<Longrightarrow> length (f (Suc n)) \\<le> m\n  length (f n) \\<le> m\n\ngoal (1 subgoal):\n 1. length (f (Suc n)) \\<le> max (length (f 0)) m", "by auto"], ["proof (state)\nthis:\n  length (f (Suc n)) \\<le> max (length (f 0)) m\n\ngoal (1 subgoal):\n 1. \\<not> length (f n) \\<le> m \\<Longrightarrow>\n    length (f (Suc n)) \\<le> max (length (f 0)) m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length (f n) \\<le> m \\<Longrightarrow>\n    length (f (Suc n)) \\<le> max (length (f 0)) m", "case False"], ["proof (state)\nthis:\n  \\<not> length (f n) \\<le> m\n\ngoal (1 subgoal):\n 1. \\<not> length (f n) \\<le> m \\<Longrightarrow>\n    length (f (Suc n)) \\<le> max (length (f 0)) m", "then"], ["proof (chain)\npicking this:\n  \\<not> length (f n) \\<le> m", "have \"length (f n) > m\""], ["proof (prove)\nusing this:\n  \\<not> length (f n) \\<le> m\n\ngoal (1 subgoal):\n 1. m < length (f n)", "by auto"], ["proof (state)\nthis:\n  m < length (f n)\n\ngoal (1 subgoal):\n 1. \\<not> length (f n) \\<le> m \\<Longrightarrow>\n    length (f (Suc n)) \\<le> max (length (f 0)) m", "with lm_imp_m_or_eq[of n]"], ["proof (chain)\npicking this:\n  m < length (f n) \\<Longrightarrow>\n  length (f (Suc n)) \\<le> m \\<or> length (f n) = length (f (Suc n))\n  m < length (f n)", "have \"length (f n) = length (f (Suc n)) \\<or> length (f (Suc n)) \\<le> m\""], ["proof (prove)\nusing this:\n  m < length (f n) \\<Longrightarrow>\n  length (f (Suc n)) \\<le> m \\<or> length (f n) = length (f (Suc n))\n  m < length (f n)\n\ngoal (1 subgoal):\n 1. length (f n) = length (f (Suc n)) \\<or> length (f (Suc n)) \\<le> m", "by auto"], ["proof (state)\nthis:\n  length (f n) = length (f (Suc n)) \\<or> length (f (Suc n)) \\<le> m\n\ngoal (1 subgoal):\n 1. \\<not> length (f n) \\<le> m \\<Longrightarrow>\n    length (f (Suc n)) \\<le> max (length (f 0)) m", "with Suc"], ["proof (chain)\npicking this:\n  length (f n) \\<le> max (length (f 0)) m\n  length (f n) = length (f (Suc n)) \\<or> length (f (Suc n)) \\<le> m", "show ?thesis"], ["proof (prove)\nusing this:\n  length (f n) \\<le> max (length (f 0)) m\n  length (f n) = length (f (Suc n)) \\<or> length (f (Suc n)) \\<le> m\n\ngoal (1 subgoal):\n 1. length (f (Suc n)) \\<le> max (length (f 0)) m", "by auto"], ["proof (state)\nthis:\n  length (f (Suc n)) \\<le> max (length (f 0)) m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (f (Suc n)) \\<le> max (length (f 0)) m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (f n) \\<le> max (length (f 0)) m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (f ?n) \\<le> max (length (f 0)) m\n\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "from this"], ["proof (chain)\npicking this:\n  length (f ?n) \\<le> max (length (f 0)) m", "obtain m' where len: \"\\<And> n. length (f n) \\<le> m'\""], ["proof (prove)\nusing this:\n  length (f ?n) \\<le> max (length (f 0)) m\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        (\\<And>n. length (f n) \\<le> m') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  length (f ?n) \\<le> m'\n\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "let ?lexgr = \"\\<lambda> ys xs. fst (lex_ext g m ys xs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "let ?lexge = \"\\<lambda> ys xs. snd (lex_ext g m ys xs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "let ?gr = \"\\<lambda> t s. fst (g t s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "let ?ge = \"\\<lambda> t s. snd (g t s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "let ?S = \"{ (y, x). fst (g y x) }\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "let ?NS = \"{ (y, x). snd (g y x) }\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "let ?baseSN = \"\\<lambda> ys. \\<forall> y \\<in> set ys. SN_on ?S {y}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "let ?con = \"\\<lambda> ys xs m'. ?baseSN ys \\<and> length ys \\<le> m' \\<and> ?lexgr ys xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "let ?confn = \"\\<lambda> m' f n . ?con (f n) (f (Suc n)) m'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "from compat"], ["proof (chain)\npicking this:\n  \\<lbrakk>snd (g ?x ?y); fst (g ?y ?z)\\<rbrakk>\n  \\<Longrightarrow> fst (g ?x ?z)", "have compat2: \"?NS O ?S \\<subseteq> ?S\""], ["proof (prove)\nusing this:\n  \\<lbrakk>snd (g ?x ?y); fst (g ?y ?z)\\<rbrakk>\n  \\<Longrightarrow> fst (g ?x ?z)\n\ngoal (1 subgoal):\n 1. {(y, x). snd (g y x)} O {(y, x). fst (g y x)}\n    \\<subseteq> {(y, x). fst (g y x)}", "by auto"], ["proof (state)\nthis:\n  {(y, x). snd (g y x)} O {(y, x). fst (g y x)}\n  \\<subseteq> {(y, x). fst (g y x)}\n\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "from f len"], ["proof (chain)\npicking this:\n  (\\<forall>y\\<in>set (f ?n). SN_on {(s, t). fst (g s t)} {y}) \\<and>\n  fst (lex_ext g m (f ?n) (f (Suc ?n)))\n  length (f ?n) \\<le> m'", "have  \"\\<exists> f. \\<forall> n. ?confn m' f n\""], ["proof (prove)\nusing this:\n  (\\<forall>y\\<in>set (f ?n). SN_on {(s, t). fst (g s t)} {y}) \\<and>\n  fst (lex_ext g m (f ?n) (f (Suc ?n)))\n  length (f ?n) \\<le> m'\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>n.\n          (\\<forall>y\\<in>set (f n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n          length (f n) \\<le> m' \\<and> fst (lex_ext g m (f n) (f (Suc n)))", "by auto"], ["proof (state)\nthis:\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n        length (f n) \\<le> m' \\<and> fst (lex_ext g m (f n) (f (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<not> SN {(ys, xs).\n               (\\<forall>y\\<in>set ys.\n                   SN_on {(s, t). fst (g s t)} {y}) \\<and>\n               fst (lex_ext g m ys xs)} \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n        length (f n) \\<le> m' \\<and> fst (lex_ext g m (f n) (f (Suc n)))", "show False"], ["proof (prove)\nusing this:\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n        length (f n) \\<le> m' \\<and> fst (lex_ext g m (f n) (f (Suc n)))\n\ngoal (1 subgoal):\n 1. False", "proof (induct m')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>f.\n       \\<forall>n.\n          (\\<forall>y\\<in>set (f n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n          length (f n) \\<le> 0 \\<and>\n          fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n    False\n 2. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "case 0"], ["proof (state)\nthis:\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n).\n            SN_on {a. case a of (y, x) \\<Rightarrow> fst (g y x)}\n             {y}) \\<and>\n        length (f n) \\<le> 0 \\<and> fst (lex_ext g m (f n) (f (Suc n)))\n\ngoal (2 subgoals):\n 1. \\<exists>f.\n       \\<forall>n.\n          (\\<forall>y\\<in>set (f n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n          length (f n) \\<le> 0 \\<and>\n          fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n    False\n 2. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "from this"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n).\n            SN_on {a. case a of (y, x) \\<Rightarrow> fst (g y x)}\n             {y}) \\<and>\n        length (f n) \\<le> 0 \\<and> fst (lex_ext g m (f n) (f (Suc n)))", "obtain f where \"?confn 0 f 0\""], ["proof (prove)\nusing this:\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n).\n            SN_on {a. case a of (y, x) \\<Rightarrow> fst (g y x)}\n             {y}) \\<and>\n        length (f n) \\<le> 0 \\<and> fst (lex_ext g m (f n) (f (Suc n)))\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        (\\<forall>y\\<in>set (f 0). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n        length (f 0) \\<le> 0 \\<and>\n        fst (lex_ext g m (f 0) (f (Suc 0))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (\\<forall>y\\<in>set (f 0). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f 0) \\<le> 0 \\<and> fst (lex_ext g m (f 0) (f (Suc 0)))\n\ngoal (2 subgoals):\n 1. \\<exists>f.\n       \\<forall>n.\n          (\\<forall>y\\<in>set (f n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n          length (f n) \\<le> 0 \\<and>\n          fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n    False\n 2. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  (\\<forall>y\\<in>set (f 0). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f 0) \\<le> 0 \\<and> fst (lex_ext g m (f 0) (f (Suc 0)))", "have \"?lexgr [] (f (Suc 0))\""], ["proof (prove)\nusing this:\n  (\\<forall>y\\<in>set (f 0). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f 0) \\<le> 0 \\<and> fst (lex_ext g m (f 0) (f (Suc 0)))\n\ngoal (1 subgoal):\n 1. fst (lex_ext g m [] (f (Suc 0)))", "by force"], ["proof (state)\nthis:\n  fst (lex_ext g m [] (f (Suc 0)))\n\ngoal (2 subgoals):\n 1. \\<exists>f.\n       \\<forall>n.\n          (\\<forall>y\\<in>set (f n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n          length (f n) \\<le> 0 \\<and>\n          fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n    False\n 2. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  fst (lex_ext g m [] (f (Suc 0)))", "show False"], ["proof (prove)\nusing this:\n  fst (lex_ext g m [] (f (Suc 0)))\n\ngoal (1 subgoal):\n 1. False", "by (simp add: lex_ext_iff)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "case (Suc m')"], ["proof (state)\nthis:\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n).\n            SN_on {a. case a of (y, x) \\<Rightarrow> fst (g y x)}\n             {y}) \\<and>\n        length (f n) \\<le> m' \\<and>\n        fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n  False\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n).\n            SN_on {a. case a of (y, x) \\<Rightarrow> fst (g y x)}\n             {y}) \\<and>\n        length (f n) \\<le> Suc m' \\<and> fst (lex_ext g m (f n) (f (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "from this"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n).\n            SN_on {a. case a of (y, x) \\<Rightarrow> fst (g y x)}\n             {y}) \\<and>\n        length (f n) \\<le> m' \\<and>\n        fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n  False\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n).\n            SN_on {a. case a of (y, x) \\<Rightarrow> fst (g y x)}\n             {y}) \\<and>\n        length (f n) \\<le> Suc m' \\<and> fst (lex_ext g m (f n) (f (Suc n)))", "obtain f where confn: \"\\<And> n. ?confn (Suc m') f n\""], ["proof (prove)\nusing this:\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n).\n            SN_on {a. case a of (y, x) \\<Rightarrow> fst (g y x)}\n             {y}) \\<and>\n        length (f n) \\<le> m' \\<and>\n        fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n  False\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n).\n            SN_on {a. case a of (y, x) \\<Rightarrow> fst (g y x)}\n             {y}) \\<and>\n        length (f n) \\<le> Suc m' \\<and> fst (lex_ext g m (f n) (f (Suc n)))\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        (\\<And>n.\n            (\\<forall>y\\<in>set (f n).\n                SN_on {(y, x). fst (g y x)} {y}) \\<and>\n            length (f n) \\<le> Suc m' \\<and>\n            fst (lex_ext g m (f n) (f (Suc n)))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (\\<forall>y\\<in>set (f ?n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f ?n) \\<le> Suc m' \\<and> fst (lex_ext g m (f ?n) (f (Suc ?n)))\n\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "have ne: \"\\<And> n. f n \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. f n \\<noteq> []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. f n \\<noteq> []", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. f n \\<noteq> []", "show \"f n \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n \\<noteq> []", "proof (cases \"f n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f n = [] \\<Longrightarrow> f n \\<noteq> []\n 2. \\<And>a list. f n = a # list \\<Longrightarrow> f n \\<noteq> []", "case (Cons a b)"], ["proof (state)\nthis:\n  f n = a # b\n\ngoal (2 subgoals):\n 1. f n = [] \\<Longrightarrow> f n \\<noteq> []\n 2. \\<And>a list. f n = a # list \\<Longrightarrow> f n \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  f n = a # b", "show ?thesis"], ["proof (prove)\nusing this:\n  f n = a # b\n\ngoal (1 subgoal):\n 1. f n \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  f n \\<noteq> []\n\ngoal (1 subgoal):\n 1. f n = [] \\<Longrightarrow> f n \\<noteq> []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f n = [] \\<Longrightarrow> f n \\<noteq> []", "case Nil"], ["proof (state)\nthis:\n  f n = []\n\ngoal (1 subgoal):\n 1. f n = [] \\<Longrightarrow> f n \\<noteq> []", "with confn[of n]"], ["proof (chain)\npicking this:\n  (\\<forall>y\\<in>set (f n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f n) \\<le> Suc m' \\<and> fst (lex_ext g m (f n) (f (Suc n)))\n  f n = []", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<forall>y\\<in>set (f n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f n) \\<le> Suc m' \\<and> fst (lex_ext g m (f n) (f (Suc n)))\n  f n = []\n\ngoal (1 subgoal):\n 1. f n \\<noteq> []", "by (simp add: lex_ext_iff)"], ["proof (state)\nthis:\n  f n \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f n \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f ?n \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "let ?hf = \"\\<lambda> n. hd (f n)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "have ge: \"\\<And> n. ?ge (?hf n) (?hf (Suc n)) \\<or> ?gr (?hf n) (?hf (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       snd (g (hd (f n)) (hd (f (Suc n)))) \\<or>\n       fst (g (hd (f n)) (hd (f (Suc n))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       snd (g (hd (f n)) (hd (f (Suc n)))) \\<or>\n       fst (g (hd (f n)) (hd (f (Suc n))))", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       snd (g (hd (f n)) (hd (f (Suc n)))) \\<or>\n       fst (g (hd (f n)) (hd (f (Suc n))))", "from ne[of n]"], ["proof (chain)\npicking this:\n  f n \\<noteq> []", "obtain a as where n: \"f n = a # as\""], ["proof (prove)\nusing this:\n  f n \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a as. f n = a # as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"f n\", auto)"], ["proof (state)\nthis:\n  f n = a # as\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       snd (g (hd (f n)) (hd (f (Suc n)))) \\<or>\n       fst (g (hd (f n)) (hd (f (Suc n))))", "from ne[of \"Suc n\"]"], ["proof (chain)\npicking this:\n  f (Suc n) \\<noteq> []", "obtain b bs where sn: \"f (Suc n) = b # bs\""], ["proof (prove)\nusing this:\n  f (Suc n) \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>b bs.\n        f (Suc n) = b # bs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"f (Suc n)\", auto)"], ["proof (state)\nthis:\n  f (Suc n) = b # bs\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       snd (g (hd (f n)) (hd (f (Suc n)))) \\<or>\n       fst (g (hd (f n)) (hd (f (Suc n))))", "from n sn"], ["proof (chain)\npicking this:\n  f n = a # as\n  f (Suc n) = b # bs", "have \"?ge a b \\<or> ?gr a b\""], ["proof (prove)\nusing this:\n  f n = a # as\n  f (Suc n) = b # bs\n\ngoal (1 subgoal):\n 1. snd (g a b) \\<or> fst (g a b)", "proof (cases \"?gr a b\", simp, cases \"?ge a b\", simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>f n = a # as; f (Suc n) = b # bs; \\<not> fst (g a b);\n     f n = a # as; f (Suc n) = b # bs; \\<not> snd (g a b)\\<rbrakk>\n    \\<Longrightarrow> snd (g a b) \\<or> fst (g a b)", "assume \"\\<not> ?gr a b\" and \"\\<not> ?ge a b\""], ["proof (state)\nthis:\n  \\<not> fst (g a b)\n  \\<not> snd (g a b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f n = a # as; f (Suc n) = b # bs; \\<not> fst (g a b);\n     f n = a # as; f (Suc n) = b # bs; \\<not> snd (g a b)\\<rbrakk>\n    \\<Longrightarrow> snd (g a b) \\<or> fst (g a b)", "then"], ["proof (chain)\npicking this:\n  \\<not> fst (g a b)\n  \\<not> snd (g a b)", "have g: \"g a b = (False, False)\""], ["proof (prove)\nusing this:\n  \\<not> fst (g a b)\n  \\<not> snd (g a b)\n\ngoal (1 subgoal):\n 1. g a b = (False, False)", "by (cases \"g a b\", auto)"], ["proof (state)\nthis:\n  g a b = (False, False)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f n = a # as; f (Suc n) = b # bs; \\<not> fst (g a b);\n     f n = a # as; f (Suc n) = b # bs; \\<not> snd (g a b)\\<rbrakk>\n    \\<Longrightarrow> snd (g a b) \\<or> fst (g a b)", "from confn[of n]"], ["proof (chain)\npicking this:\n  (\\<forall>y\\<in>set (f n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f n) \\<le> Suc m' \\<and> fst (lex_ext g m (f n) (f (Suc n)))", "have \"fst (lex_ext g m (f n) (f (Suc n)))\" (is ?fst)"], ["proof (prove)\nusing this:\n  (\\<forall>y\\<in>set (f n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f n) \\<le> Suc m' \\<and> fst (lex_ext g m (f n) (f (Suc n)))\n\ngoal (1 subgoal):\n 1. fst (lex_ext g m (f n) (f (Suc n)))", "by simp"], ["proof (state)\nthis:\n  fst (lex_ext g m (f n) (f (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f n = a # as; f (Suc n) = b # bs; \\<not> fst (g a b);\n     f n = a # as; f (Suc n) = b # bs; \\<not> snd (g a b)\\<rbrakk>\n    \\<Longrightarrow> snd (g a b) \\<or> fst (g a b)", "have \"?fst = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lex_ext g m (f n) (f (Suc n))) = False", "by (simp add: n sn lex_ext_def g lex_ext_unbounded.simps)"], ["proof (state)\nthis:\n  fst (lex_ext g m (f n) (f (Suc n))) = False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f n = a # as; f (Suc n) = b # bs; \\<not> fst (g a b);\n     f n = a # as; f (Suc n) = b # bs; \\<not> snd (g a b)\\<rbrakk>\n    \\<Longrightarrow> snd (g a b) \\<or> fst (g a b)", "with \\<open>?fst\\<close>"], ["proof (chain)\npicking this:\n  fst (lex_ext g m (f n) (f (Suc n)))\n  fst (lex_ext g m (f n) (f (Suc n))) = False", "show \"?ge a b \\<or> ?gr a b\""], ["proof (prove)\nusing this:\n  fst (lex_ext g m (f n) (f (Suc n)))\n  fst (lex_ext g m (f n) (f (Suc n))) = False\n\ngoal (1 subgoal):\n 1. snd (g a b) \\<or> fst (g a b)", "by simp"], ["proof (state)\nthis:\n  snd (g a b) \\<or> fst (g a b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (g a b) \\<or> fst (g a b)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       snd (g (hd (f n)) (hd (f (Suc n)))) \\<or>\n       fst (g (hd (f n)) (hd (f (Suc n))))", "with n sn"], ["proof (chain)\npicking this:\n  f n = a # as\n  f (Suc n) = b # bs\n  snd (g a b) \\<or> fst (g a b)", "show \"?ge (?hf n) (?hf (Suc n)) \\<or> ?gr (?hf n) (?hf (Suc n))\""], ["proof (prove)\nusing this:\n  f n = a # as\n  f (Suc n) = b # bs\n  snd (g a b) \\<or> fst (g a b)\n\ngoal (1 subgoal):\n 1. snd (g (hd (f n)) (hd (f (Suc n)))) \\<or>\n    fst (g (hd (f n)) (hd (f (Suc n))))", "by simp"], ["proof (state)\nthis:\n  snd (g (hd (f n)) (hd (f (Suc n)))) \\<or>\n  fst (g (hd (f n)) (hd (f (Suc n))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (g (hd (f ?n)) (hd (f (Suc ?n)))) \\<or>\n  fst (g (hd (f ?n)) (hd (f (Suc ?n))))\n\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "from ge"], ["proof (chain)\npicking this:\n  snd (g (hd (f ?n)) (hd (f (Suc ?n)))) \\<or>\n  fst (g (hd (f ?n)) (hd (f (Suc ?n))))", "have GE: \"\\<forall> n. (?hf n, ?hf (Suc n)) \\<in> ?NS \\<union> ?S\""], ["proof (prove)\nusing this:\n  snd (g (hd (f ?n)) (hd (f (Suc ?n)))) \\<or>\n  fst (g (hd (f ?n)) (hd (f (Suc ?n))))\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (hd (f n), hd (f (Suc n)))\n       \\<in> {(y, x). snd (g y x)} \\<union> {(y, x). fst (g y x)}", "by auto"], ["proof (state)\nthis:\n  \\<forall>n.\n     (hd (f n), hd (f (Suc n)))\n     \\<in> {(y, x). snd (g y x)} \\<union> {(y, x). fst (g y x)}\n\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "from confn[of 0] ne[of 0]"], ["proof (chain)\npicking this:\n  (\\<forall>y\\<in>set (f 0). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f 0) \\<le> Suc m' \\<and> fst (lex_ext g m (f 0) (f (Suc 0)))\n  f 0 \\<noteq> []", "have SN_0: \"SN_on ?S {?hf 0}\""], ["proof (prove)\nusing this:\n  (\\<forall>y\\<in>set (f 0). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f 0) \\<le> Suc m' \\<and> fst (lex_ext g m (f 0) (f (Suc 0)))\n  f 0 \\<noteq> []\n\ngoal (1 subgoal):\n 1. SN_on {(y, x). fst (g y x)} {hd (f 0)}", "by (cases \"f 0\", auto )"], ["proof (state)\nthis:\n  SN_on {(y, x). fst (g y x)} {hd (f 0)}\n\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "from non_strict_ending[of ?hf, OF GE compat2 SN_0]"], ["proof (chain)\npicking this:\n  \\<exists>j.\n     \\<forall>i\\<ge>j.\n        (hd (f i), hd (f (Suc i)))\n        \\<in> {(y, x). snd (g y x)} - {(y, x). fst (g y x)}", "obtain j where j: \"\\<forall> i \\<ge> j. (?hf i, ?hf (Suc i)) \\<in> ?NS - ?S\""], ["proof (prove)\nusing this:\n  \\<exists>j.\n     \\<forall>i\\<ge>j.\n        (hd (f i), hd (f (Suc i)))\n        \\<in> {(y, x). snd (g y x)} - {(y, x). fst (g y x)}\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<forall>i\\<ge>j.\n           (hd (f i), hd (f (Suc i)))\n           \\<in> {(y, x). snd (g y x)} -\n                 {(y, x). fst (g y x)} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>i\\<ge>j.\n     (hd (f i), hd (f (Suc i)))\n     \\<in> {(y, x). snd (g y x)} - {(y, x). fst (g y x)}\n\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "let ?h = \"\\<lambda> n. tl (f (j + n))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "obtain h where h: \"h = ?h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        h = (\\<lambda>n. tl (f (j + n))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  h = (\\<lambda>n. tl (f (j + n)))\n\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "have \"\\<And> n. ?confn m' h n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "let ?nj = \"j + n\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "from spec[OF j, of ?nj]"], ["proof (chain)\npicking this:\n  j \\<le> j + n \\<longrightarrow>\n  (hd (f (j + n)), hd (f (Suc (j + n))))\n  \\<in> {(y, x). snd (g y x)} - {(y, x). fst (g y x)}", "have ge_not_gr: \"(?hf ?nj, ?hf (Suc ?nj)) \\<in> ?NS - ?S\""], ["proof (prove)\nusing this:\n  j \\<le> j + n \\<longrightarrow>\n  (hd (f (j + n)), hd (f (Suc (j + n))))\n  \\<in> {(y, x). snd (g y x)} - {(y, x). fst (g y x)}\n\ngoal (1 subgoal):\n 1. (hd (f (j + n)), hd (f (Suc (j + n))))\n    \\<in> {(y, x). snd (g y x)} - {(y, x). fst (g y x)}", "by simp"], ["proof (state)\nthis:\n  (hd (f (j + n)), hd (f (Suc (j + n))))\n  \\<in> {(y, x). snd (g y x)} - {(y, x). fst (g y x)}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "from confn[of ?nj]"], ["proof (chain)\npicking this:\n  (\\<forall>y\\<in>set (f (j + n)). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f (j + n)) \\<le> Suc m' \\<and>\n  fst (lex_ext g m (f (j + n)) (f (Suc (j + n))))", "have old: \"?confn (Suc m') f ?nj\""], ["proof (prove)\nusing this:\n  (\\<forall>y\\<in>set (f (j + n)). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f (j + n)) \\<le> Suc m' \\<and>\n  fst (lex_ext g m (f (j + n)) (f (Suc (j + n))))\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set (f (j + n)). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n    length (f (j + n)) \\<le> Suc m' \\<and>\n    fst (lex_ext g m (f (j + n)) (f (Suc (j + n))))", "by simp"], ["proof (state)\nthis:\n  (\\<forall>y\\<in>set (f (j + n)). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f (j + n)) \\<le> Suc m' \\<and>\n  fst (lex_ext g m (f (j + n)) (f (Suc (j + n))))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "from ne[of ?nj]"], ["proof (chain)\npicking this:\n  f (j + n) \\<noteq> []", "obtain a as where n: \"f ?nj = a # as\""], ["proof (prove)\nusing this:\n  f (j + n) \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a as.\n        f (j + n) = a # as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"f ?nj\", auto)"], ["proof (state)\nthis:\n  f (j + n) = a # as\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "from ne[of \"Suc ?nj\"]"], ["proof (chain)\npicking this:\n  f (Suc (j + n)) \\<noteq> []", "obtain b bs where sn: \"f (Suc ?nj) = b # bs\""], ["proof (prove)\nusing this:\n  f (Suc (j + n)) \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>b bs.\n        f (Suc (j + n)) = b # bs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"f (Suc ?nj)\", auto)"], ["proof (state)\nthis:\n  f (Suc (j + n)) = b # bs\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "from old"], ["proof (chain)\npicking this:\n  (\\<forall>y\\<in>set (f (j + n)). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f (j + n)) \\<le> Suc m' \\<and>\n  fst (lex_ext g m (f (j + n)) (f (Suc (j + n))))", "have one: \"\\<forall> y \\<in> set (h n). SN_on ?S {y}\""], ["proof (prove)\nusing this:\n  (\\<forall>y\\<in>set (f (j + n)). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f (j + n)) \\<le> Suc m' \\<and>\n  fst (lex_ext g m (f (j + n)) (f (Suc (j + n))))\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}", "by (simp add: h n)"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "from old"], ["proof (chain)\npicking this:\n  (\\<forall>y\\<in>set (f (j + n)). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f (j + n)) \\<le> Suc m' \\<and>\n  fst (lex_ext g m (f (j + n)) (f (Suc (j + n))))", "have two: \"length (h n) \\<le> m'\""], ["proof (prove)\nusing this:\n  (\\<forall>y\\<in>set (f (j + n)). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f (j + n)) \\<le> Suc m' \\<and>\n  fst (lex_ext g m (f (j + n)) (f (Suc (j + n))))\n\ngoal (1 subgoal):\n 1. length (h n) \\<le> m'", "by (simp add: j n h)"], ["proof (state)\nthis:\n  length (h n) \\<le> m'\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "from ge_not_gr"], ["proof (chain)\npicking this:\n  (hd (f (j + n)), hd (f (Suc (j + n))))\n  \\<in> {(y, x). snd (g y x)} - {(y, x). fst (g y x)}", "have ge_not_gr2: \"g a b = (False, True)\""], ["proof (prove)\nusing this:\n  (hd (f (j + n)), hd (f (Suc (j + n))))\n  \\<in> {(y, x). snd (g y x)} - {(y, x). fst (g y x)}\n\ngoal (1 subgoal):\n 1. g a b = (False, True)", "by (simp add: n sn, cases \"g a b\", auto)"], ["proof (state)\nthis:\n  g a b = (False, True)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "from old"], ["proof (chain)\npicking this:\n  (\\<forall>y\\<in>set (f (j + n)). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f (j + n)) \\<le> Suc m' \\<and>\n  fst (lex_ext g m (f (j + n)) (f (Suc (j + n))))", "have \"fst (lex_ext g m (f (j+ n)) (f (Suc (j+n))))\" (is ?fst)"], ["proof (prove)\nusing this:\n  (\\<forall>y\\<in>set (f (j + n)). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (f (j + n)) \\<le> Suc m' \\<and>\n  fst (lex_ext g m (f (j + n)) (f (Suc (j + n))))\n\ngoal (1 subgoal):\n 1. fst (lex_ext g m (f (j + n)) (f (Suc (j + n))))", "by simp"], ["proof (state)\nthis:\n  fst (lex_ext g m (f (j + n)) (f (Suc (j + n))))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "then"], ["proof (chain)\npicking this:\n  fst (lex_ext g m (f (j + n)) (f (Suc (j + n))))", "have \"length as = length bs \\<or> length bs \\<le> m\" (is ?len)"], ["proof (prove)\nusing this:\n  fst (lex_ext g m (f (j + n)) (f (Suc (j + n))))\n\ngoal (1 subgoal):\n 1. length as = length bs \\<or> length bs \\<le> m", "by (simp add: lex_ext_def n sn, cases ?len, auto)"], ["proof (state)\nthis:\n  length as = length bs \\<or> length bs \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "from \\<open>?fst\\<close>[simplified n sn]"], ["proof (chain)\npicking this:\n  fst (lex_ext g m (a # as) (b # bs))", "have \"fst (lex_ext_unbounded g as bs)\" (is ?fst)"], ["proof (prove)\nusing this:\n  fst (lex_ext g m (a # as) (b # bs))\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded g as bs)", "by (simp add: lex_ext_def, cases \"length as = length bs \\<or> Suc (length bs) \\<le> m\", simp_all add: ge_not_gr2 lex_ext_unbounded.simps)"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded g as bs)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "then"], ["proof (chain)\npicking this:\n  fst (lex_ext_unbounded g as bs)", "have \"fst (lex_ext_unbounded g as bs)\" (is ?fst)"], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded g as bs)\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded g as bs)", "by (simp add: lex_ext_unbounded_iff)"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded g as bs)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "have three: \"?lexgr (h n) (h (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lex_ext g m (h n) (h (Suc n)))", "by (simp add: lex_ext_def h n sn ge_not_gr2 lex_ext_unbounded.simps, simp only: Let_def, simp add: \\<open>?len\\<close> \\<open>?fst\\<close>)"], ["proof (state)\nthis:\n  fst (lex_ext g m (h n) (h (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n       length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "from one two three"], ["proof (chain)\npicking this:\n  \\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}\n  length (h n) \\<le> m'\n  fst (lex_ext g m (h n) (h (Suc n)))", "show \"?confn m' h n\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}\n  length (h n) \\<le> m'\n  fst (lex_ext g m (h n) (h (Suc n)))\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n    length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))", "by blast"], ["proof (state)\nthis:\n  (\\<forall>y\\<in>set (h n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (h n) \\<le> m' \\<and> fst (lex_ext g m (h n) (h (Suc n)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>y\\<in>set (h ?n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (h ?n) \\<le> m' \\<and> fst (lex_ext g m (h ?n) (h (Suc ?n)))\n\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<exists>f.\n                   \\<forall>n.\n                      (\\<forall>y\\<in>set (f n).\n                          SN_on {(y, x). fst (g y x)} {y}) \\<and>\n                      length (f n) \\<le> m' \\<and>\n                      fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n                False;\n        \\<exists>f.\n           \\<forall>n.\n              (\\<forall>y\\<in>set (f n).\n                  SN_on {(y, x). fst (g y x)} {y}) \\<and>\n              length (f n) \\<le> Suc m' \\<and>\n              fst (lex_ext g m (f n) (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> False", "with Suc"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n).\n            SN_on {a. case a of (y, x) \\<Rightarrow> fst (g y x)}\n             {y}) \\<and>\n        length (f n) \\<le> m' \\<and>\n        fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n  False\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n).\n            SN_on {a. case a of (y, x) \\<Rightarrow> fst (g y x)}\n             {y}) \\<and>\n        length (f n) \\<le> Suc m' \\<and> fst (lex_ext g m (f n) (f (Suc n)))\n  (\\<forall>y\\<in>set (h ?n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (h ?n) \\<le> m' \\<and> fst (lex_ext g m (h ?n) (h (Suc ?n)))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n).\n            SN_on {a. case a of (y, x) \\<Rightarrow> fst (g y x)}\n             {y}) \\<and>\n        length (f n) \\<le> m' \\<and>\n        fst (lex_ext g m (f n) (f (Suc n))) \\<Longrightarrow>\n  False\n  \\<exists>f.\n     \\<forall>n.\n        (\\<forall>y\\<in>set (f n).\n            SN_on {a. case a of (y, x) \\<Rightarrow> fst (g y x)}\n             {y}) \\<and>\n        length (f n) \\<le> Suc m' \\<and> fst (lex_ext g m (f n) (f (Suc n)))\n  (\\<forall>y\\<in>set (h ?n). SN_on {(y, x). fst (g y x)} {y}) \\<and>\n  length (h ?n) \\<le> m' \\<and> fst (lex_ext g m (h ?n) (h (Suc ?n)))\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Strong normalization with global SN assumption is immediate consequence.\\<close>"], ["", "lemma lex_ext_SN_2:\n  assumes compat: \"\\<And> x y z. \\<lbrakk>snd (g x y); fst (g y z)\\<rbrakk> \\<Longrightarrow> fst (g x z)\"\n    and SN:  \"SN {(s, t). fst (g s t)}\"\n  shows \"SN { (ys, xs). fst (lex_ext g m ys xs) }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN {(ys, xs). fst (lex_ext g m ys xs)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. SN {(ys, xs). fst (lex_ext g m ys xs)}", "from lex_ext_SN[OF compat]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y z.\n              \\<lbrakk>snd (g (?x2 x y) (?z3 x y));\n               fst (g (?x2 y z) (?z3 y z))\\<rbrakk>\n              \\<Longrightarrow> snd (g (?x2 x z) (?y1 x y z));\n   \\<And>x y z.\n      \\<lbrakk>snd (g (?x2 x y) (?z3 x y));\n       fst (g (?x2 y z) (?z3 y z))\\<rbrakk>\n      \\<Longrightarrow> fst (g (?y1 x y z) (?z3 x z))\\<rbrakk>\n  \\<Longrightarrow> SN {(ys, xs).\n                        (\\<forall>y\\<in>set ys.\n                            SN_on {(s, t). fst (g (?x2 s t) (?z3 s t))}\n                             {y}) \\<and>\n                        fst (lex_ext (\\<lambda>x z. g (?x2 x z) (?z3 x z))\n                              ?m ys xs)}", "have \"SN { (ys, xs). (\\<forall> y \\<in> set ys. SN_on { (s, t). fst (g s t) } {y}) \\<and> fst (lex_ext g m ys xs) }\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y z.\n              \\<lbrakk>snd (g (?x2 x y) (?z3 x y));\n               fst (g (?x2 y z) (?z3 y z))\\<rbrakk>\n              \\<Longrightarrow> snd (g (?x2 x z) (?y1 x y z));\n   \\<And>x y z.\n      \\<lbrakk>snd (g (?x2 x y) (?z3 x y));\n       fst (g (?x2 y z) (?z3 y z))\\<rbrakk>\n      \\<Longrightarrow> fst (g (?y1 x y z) (?z3 x z))\\<rbrakk>\n  \\<Longrightarrow> SN {(ys, xs).\n                        (\\<forall>y\\<in>set ys.\n                            SN_on {(s, t). fst (g (?x2 s t) (?z3 s t))}\n                             {y}) \\<and>\n                        fst (lex_ext (\\<lambda>x z. g (?x2 x z) (?z3 x z))\n                              ?m ys xs)}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (lex_ext g m ys xs)}", "."], ["proof (state)\nthis:\n  SN {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (lex_ext g m ys xs)}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs). fst (lex_ext g m ys xs)}", "then"], ["proof (chain)\npicking this:\n  SN {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (lex_ext g m ys xs)}", "show ?thesis"], ["proof (prove)\nusing this:\n  SN {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (lex_ext g m ys xs)}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs). fst (lex_ext g m ys xs)}", "using SN"], ["proof (prove)\nusing this:\n  SN {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (lex_ext g m ys xs)}\n  SN {(s, t). fst (g s t)}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs). fst (lex_ext g m ys xs)}", "unfolding SN_on_def"], ["proof (prove)\nusing this:\n  \\<nexists>f.\n     f 0 \\<in> UNIV \\<and>\n     (\\<forall>i.\n         (f i, f (Suc i))\n         \\<in> {(ys, xs).\n                (\\<forall>y\\<in>set ys.\n                    \\<nexists>f.\n                       f 0 \\<in> {y} \\<and>\n                       (\\<forall>i.\n                           (f i, f (Suc i))\n                           \\<in> {(s, t). fst (g s t)})) \\<and>\n                fst (lex_ext g m ys xs)})\n  \\<nexists>f.\n     f 0 \\<in> UNIV \\<and>\n     (\\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). fst (g s t)})\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 \\<in> UNIV \\<and>\n       (\\<forall>i.\n           (f i, f (Suc i)) \\<in> {(ys, xs). fst (lex_ext g m ys xs)})", "by fastforce"], ["proof (state)\nthis:\n  SN {(ys, xs). fst (lex_ext g m ys xs)}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The empty list is the least element in the lexicographic extension.\\<close>"], ["", "lemma lex_ext_least_1: \"snd (lex_ext f m xs [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (lex_ext f m xs [])", "by (simp add: lex_ext_iff)"], ["", "lemma lex_ext_least_2: \"\\<not> fst (lex_ext f m [] ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> fst (lex_ext f m [] ys)", "by (simp add: lex_ext_iff)"], ["", "text \\<open>Preservation of totality on lists of same length.\\<close>"], ["", "lemma lex_ext_unbounded_total:\n  assumes \"\\<forall>(s, t)\\<in>set (zip ss ts). s = t \\<or> fst (f s t) \\<or> fst (f t s)\" \n    and refl: \"\\<And> t. snd (f t t)\" \n    and \"length ss = length ts\" \n  shows \"ss = ts \\<or> fst (lex_ext_unbounded f ss ts) \\<or> fst (lex_ext_unbounded f ts ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss = ts \\<or>\n    fst (lex_ext_unbounded f ss ts) \\<or> fst (lex_ext_unbounded f ts ss)", "using assms(3, 1)"], ["proof (prove)\nusing this:\n  length ss = length ts\n  \\<forall>(s, t)\\<in>set (zip ss ts).\n     s = t \\<or> fst (f s t) \\<or> fst (f t s)\n\ngoal (1 subgoal):\n 1. ss = ts \\<or>\n    fst (lex_ext_unbounded f ss ts) \\<or> fst (lex_ext_unbounded f ts ss)", "proof (induct ss ts rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>(s, t)\\<in>set (zip [] []).\n       s = t \\<or> fst (f s t) \\<or> fst (f t s) \\<Longrightarrow>\n    [] = [] \\<or>\n    fst (lex_ext_unbounded f [] []) \\<or> fst (lex_ext_unbounded f [] [])\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<forall>(s, t)\\<in>set (zip xs ys).\n           s = t \\<or> fst (f s t) \\<or> fst (f t s) \\<Longrightarrow>\n        xs = ys \\<or>\n        fst (lex_ext_unbounded f xs ys) \\<or>\n        fst (lex_ext_unbounded f ys xs);\n        \\<forall>(s, t)\\<in>set (zip (x # xs) (y # ys)).\n           s = t \\<or> fst (f s t) \\<or> fst (f t s)\\<rbrakk>\n       \\<Longrightarrow> x # xs = y # ys \\<or>\n                         fst (lex_ext_unbounded f (x # xs) (y # ys)) \\<or>\n                         fst (lex_ext_unbounded f (y # ys) (x # xs))", "case (Cons s ss t ts)"], ["proof (state)\nthis:\n  length ss = length ts\n  \\<forall>a\\<in>set (zip ss ts).\n     case a of\n     (s, t) \\<Rightarrow>\n       s = t \\<or> fst (f s t) \\<or> fst (f t s) \\<Longrightarrow>\n  ss = ts \\<or>\n  fst (lex_ext_unbounded f ss ts) \\<or> fst (lex_ext_unbounded f ts ss)\n  \\<forall>a\\<in>set (zip (s # ss) (t # ts)).\n     case a of\n     (s, t) \\<Rightarrow> s = t \\<or> fst (f s t) \\<or> fst (f t s)\n\ngoal (2 subgoals):\n 1. \\<forall>(s, t)\\<in>set (zip [] []).\n       s = t \\<or> fst (f s t) \\<or> fst (f t s) \\<Longrightarrow>\n    [] = [] \\<or>\n    fst (lex_ext_unbounded f [] []) \\<or> fst (lex_ext_unbounded f [] [])\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<forall>(s, t)\\<in>set (zip xs ys).\n           s = t \\<or> fst (f s t) \\<or> fst (f t s) \\<Longrightarrow>\n        xs = ys \\<or>\n        fst (lex_ext_unbounded f xs ys) \\<or>\n        fst (lex_ext_unbounded f ys xs);\n        \\<forall>(s, t)\\<in>set (zip (x # xs) (y # ys)).\n           s = t \\<or> fst (f s t) \\<or> fst (f t s)\\<rbrakk>\n       \\<Longrightarrow> x # xs = y # ys \\<or>\n                         fst (lex_ext_unbounded f (x # xs) (y # ys)) \\<or>\n                         fst (lex_ext_unbounded f (y # ys) (x # xs))", "from Cons(3)"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>set (zip (s # ss) (t # ts)).\n     case a of\n     (s, t) \\<Rightarrow> s = t \\<or> fst (f s t) \\<or> fst (f t s)", "have \"s = t \\<or> (fst (f s t) \\<or> fst (f t s))\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set (zip (s # ss) (t # ts)).\n     case a of\n     (s, t) \\<Rightarrow> s = t \\<or> fst (f s t) \\<or> fst (f t s)\n\ngoal (1 subgoal):\n 1. s = t \\<or> fst (f s t) \\<or> fst (f t s)", "by auto"], ["proof (state)\nthis:\n  s = t \\<or> fst (f s t) \\<or> fst (f t s)\n\ngoal (2 subgoals):\n 1. \\<forall>(s, t)\\<in>set (zip [] []).\n       s = t \\<or> fst (f s t) \\<or> fst (f t s) \\<Longrightarrow>\n    [] = [] \\<or>\n    fst (lex_ext_unbounded f [] []) \\<or> fst (lex_ext_unbounded f [] [])\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<forall>(s, t)\\<in>set (zip xs ys).\n           s = t \\<or> fst (f s t) \\<or> fst (f t s) \\<Longrightarrow>\n        xs = ys \\<or>\n        fst (lex_ext_unbounded f xs ys) \\<or>\n        fst (lex_ext_unbounded f ys xs);\n        \\<forall>(s, t)\\<in>set (zip (x # xs) (y # ys)).\n           s = t \\<or> fst (f s t) \\<or> fst (f t s)\\<rbrakk>\n       \\<Longrightarrow> x # xs = y # ys \\<or>\n                         fst (lex_ext_unbounded f (x # xs) (y # ys)) \\<or>\n                         fst (lex_ext_unbounded f (y # ys) (x # xs))", "then"], ["proof (chain)\npicking this:\n  s = t \\<or> fst (f s t) \\<or> fst (f t s)", "show ?case"], ["proof (prove)\nusing this:\n  s = t \\<or> fst (f s t) \\<or> fst (f t s)\n\ngoal (1 subgoal):\n 1. s # ss = t # ts \\<or>\n    fst (lex_ext_unbounded f (s # ss) (t # ts)) \\<or>\n    fst (lex_ext_unbounded f (t # ts) (s # ss))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. s = t \\<Longrightarrow>\n    s # ss = t # ts \\<or>\n    fst (lex_ext_unbounded f (s # ss) (t # ts)) \\<or>\n    fst (lex_ext_unbounded f (t # ts) (s # ss))\n 2. fst (f s t) \\<or> fst (f t s) \\<Longrightarrow>\n    s # ss = t # ts \\<or>\n    fst (lex_ext_unbounded f (s # ss) (t # ts)) \\<or>\n    fst (lex_ext_unbounded f (t # ts) (s # ss))", "assume st: \"s = t\""], ["proof (state)\nthis:\n  s = t\n\ngoal (2 subgoals):\n 1. s = t \\<Longrightarrow>\n    s # ss = t # ts \\<or>\n    fst (lex_ext_unbounded f (s # ss) (t # ts)) \\<or>\n    fst (lex_ext_unbounded f (t # ts) (s # ss))\n 2. fst (f s t) \\<or> fst (f t s) \\<Longrightarrow>\n    s # ss = t # ts \\<or>\n    fst (lex_ext_unbounded f (s # ss) (t # ts)) \\<or>\n    fst (lex_ext_unbounded f (t # ts) (s # ss))", "then"], ["proof (chain)\npicking this:\n  s = t", "show ?thesis"], ["proof (prove)\nusing this:\n  s = t\n\ngoal (1 subgoal):\n 1. s # ss = t # ts \\<or>\n    fst (lex_ext_unbounded f (s # ss) (t # ts)) \\<or>\n    fst (lex_ext_unbounded f (t # ts) (s # ss))", "using Cons(2-3) refl[of t]"], ["proof (prove)\nusing this:\n  s = t\n  \\<forall>a\\<in>set (zip ss ts).\n     case a of\n     (s, t) \\<Rightarrow>\n       s = t \\<or> fst (f s t) \\<or> fst (f t s) \\<Longrightarrow>\n  ss = ts \\<or>\n  fst (lex_ext_unbounded f ss ts) \\<or> fst (lex_ext_unbounded f ts ss)\n  \\<forall>a\\<in>set (zip (s # ss) (t # ts)).\n     case a of\n     (s, t) \\<Rightarrow> s = t \\<or> fst (f s t) \\<or> fst (f t s)\n  snd (f t t)\n\ngoal (1 subgoal):\n 1. s # ss = t # ts \\<or>\n    fst (lex_ext_unbounded f (s # ss) (t # ts)) \\<or>\n    fst (lex_ext_unbounded f (t # ts) (s # ss))", "by (cases \"f t t\", auto simp: lex_ext_unbounded.simps)"], ["proof (state)\nthis:\n  s # ss = t # ts \\<or>\n  fst (lex_ext_unbounded f (s # ss) (t # ts)) \\<or>\n  fst (lex_ext_unbounded f (t # ts) (s # ss))\n\ngoal (1 subgoal):\n 1. fst (f s t) \\<or> fst (f t s) \\<Longrightarrow>\n    s # ss = t # ts \\<or>\n    fst (lex_ext_unbounded f (s # ss) (t # ts)) \\<or>\n    fst (lex_ext_unbounded f (t # ts) (s # ss))", "qed (auto simp: lex_ext_unbounded.simps split: prod.splits)"], ["proof (state)\nthis:\n  s # ss = t # ts \\<or>\n  fst (lex_ext_unbounded f (s # ss) (t # ts)) \\<or>\n  fst (lex_ext_unbounded f (t # ts) (s # ss))\n\ngoal (1 subgoal):\n 1. \\<forall>(s, t)\\<in>set (zip [] []).\n       s = t \\<or> fst (f s t) \\<or> fst (f t s) \\<Longrightarrow>\n    [] = [] \\<or>\n    fst (lex_ext_unbounded f [] []) \\<or> fst (lex_ext_unbounded f [] [])", "qed simp"], ["", "lemma lex_ext_total:\n  assumes \"\\<forall>(s, t)\\<in>set (zip ss ts). s = t \\<or> fst (f s t) \\<or> fst (f t s)\" \n    and \"\\<And> t. snd (f t t)\" \n    and len: \"length ss = length ts\" \n  shows \"ss = ts \\<or> fst (lex_ext f n ss ts) \\<or> fst (lex_ext f n ts ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss = ts \\<or> fst (lex_ext f n ss ts) \\<or> fst (lex_ext f n ts ss)", "using lex_ext_unbounded_total[OF assms]"], ["proof (prove)\nusing this:\n  ss = ts \\<or>\n  fst (lex_ext_unbounded f ss ts) \\<or> fst (lex_ext_unbounded f ts ss)\n\ngoal (1 subgoal):\n 1. ss = ts \\<or> fst (lex_ext f n ss ts) \\<or> fst (lex_ext f n ts ss)", "unfolding lex_ext_def Let_def len"], ["proof (prove)\nusing this:\n  ss = ts \\<or>\n  fst (lex_ext_unbounded f ss ts) \\<or> fst (lex_ext_unbounded f ts ss)\n\ngoal (1 subgoal):\n 1. ss = ts \\<or>\n    fst (if length ts = length ts \\<or> length ts \\<le> n\n         then lex_ext_unbounded f ss ts else (False, False)) \\<or>\n    fst (if length ts = length ts \\<or> length ts \\<le> n\n         then lex_ext_unbounded f ts ss else (False, False))", "by auto"], ["", "text \\<open>Monotonicity of the lexicographic extension.\\<close>"], ["", "lemma lex_ext_unbounded_mono:\n  assumes \"\\<And>i. \\<lbrakk>i < length xs; i < length ys; fst (P (xs ! i) (ys ! i))\\<rbrakk> \\<Longrightarrow> fst (P' (xs ! i) (ys ! i))\"\n    and   \"\\<And>i. \\<lbrakk>i < length xs; i < length ys; snd (P (xs ! i) (ys ! i))\\<rbrakk> \\<Longrightarrow> snd (P' (xs ! i) (ys ! i))\"\n  shows\n    \"(fst (lex_ext_unbounded P xs ys) \\<longrightarrow> fst (lex_ext_unbounded P' xs ys)) \\<and>\n     (snd (lex_ext_unbounded P xs ys) \\<longrightarrow> snd (lex_ext_unbounded P' xs ys))\"\n    (is \"(?l1 xs ys \\<longrightarrow> ?r1 xs ys) \\<and> (?l2 xs ys \\<longrightarrow> ?r2 xs ys)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (lex_ext_unbounded P xs ys) \\<longrightarrow>\n     fst (lex_ext_unbounded P' xs ys)) \\<and>\n    (snd (lex_ext_unbounded P xs ys) \\<longrightarrow>\n     snd (lex_ext_unbounded P' xs ys))", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < length xs; ?i < length ys;\n   fst (P (xs ! ?i) (ys ! ?i))\\<rbrakk>\n  \\<Longrightarrow> fst (P' (xs ! ?i) (ys ! ?i))\n  \\<lbrakk>?i < length xs; ?i < length ys;\n   snd (P (xs ! ?i) (ys ! ?i))\\<rbrakk>\n  \\<Longrightarrow> snd (P' (xs ! ?i) (ys ! ?i))\n\ngoal (1 subgoal):\n 1. (fst (lex_ext_unbounded P xs ys) \\<longrightarrow>\n     fst (lex_ext_unbounded P' xs ys)) \\<and>\n    (snd (lex_ext_unbounded P xs ys) \\<longrightarrow>\n     snd (lex_ext_unbounded P' xs ys))", "proof (induct x\\<equiv>P xs ys rule: lex_ext_unbounded.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>i.\n                \\<lbrakk>i < length []; i < length [];\n                 fst (P ([] ! i) ([] ! i))\\<rbrakk>\n                \\<Longrightarrow> fst (P' ([] ! i) ([] ! i));\n     \\<And>i.\n        \\<lbrakk>i < length []; i < length [];\n         snd (P ([] ! i) ([] ! i))\\<rbrakk>\n        \\<Longrightarrow> snd (P' ([] ! i) ([] ! i))\\<rbrakk>\n    \\<Longrightarrow> (fst (lex_ext_unbounded P [] []) \\<longrightarrow>\n                       fst (lex_ext_unbounded P' [] [])) \\<and>\n                      (snd (lex_ext_unbounded P [] []) \\<longrightarrow>\n                       snd (lex_ext_unbounded P' [] []))\n 2. \\<And>uu_ uv_.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length (uu_ # uv_); i < length [];\n                    fst (P ((uu_ # uv_) ! i) ([] ! i))\\<rbrakk>\n                   \\<Longrightarrow> fst (P' ((uu_ # uv_) ! i) ([] ! i));\n        \\<And>i.\n           \\<lbrakk>i < length (uu_ # uv_); i < length [];\n            snd (P ((uu_ # uv_) ! i) ([] ! i))\\<rbrakk>\n           \\<Longrightarrow> snd (P' ((uu_ # uv_) ! i) ([] ! i))\\<rbrakk>\n       \\<Longrightarrow> (fst (lex_ext_unbounded P (uu_ # uv_)\n                                []) \\<longrightarrow>\n                          fst (lex_ext_unbounded P' (uu_ # uv_) [])) \\<and>\n                         (snd (lex_ext_unbounded P (uu_ # uv_)\n                                []) \\<longrightarrow>\n                          snd (lex_ext_unbounded P' (uu_ # uv_) []))\n 3. \\<And>uw_ ux_.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length []; i < length (uw_ # ux_);\n                    fst (P ([] ! i) ((uw_ # ux_) ! i))\\<rbrakk>\n                   \\<Longrightarrow> fst (P' ([] ! i) ((uw_ # ux_) ! i));\n        \\<And>i.\n           \\<lbrakk>i < length []; i < length (uw_ # ux_);\n            snd (P ([] ! i) ((uw_ # ux_) ! i))\\<rbrakk>\n           \\<Longrightarrow> snd (P' ([] ! i) ((uw_ # ux_) ! i))\\<rbrakk>\n       \\<Longrightarrow> (fst (lex_ext_unbounded P []\n                                (uw_ # ux_)) \\<longrightarrow>\n                          fst (lex_ext_unbounded P' [] (uw_ # ux_))) \\<and>\n                         (snd (lex_ext_unbounded P []\n                                (uw_ # ux_)) \\<longrightarrow>\n                          snd (lex_ext_unbounded P' [] (uw_ # ux_)))\n 4. \\<And>a as b bs.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>x = P a b; (xa, y) = x; \\<not> xa; y;\n                    \\<And>i.\n                       \\<lbrakk>i < length as; i < length bs;\n                        fst (P (as ! i) (bs ! i))\\<rbrakk>\n                       \\<Longrightarrow> fst (P' (as ! i) (bs ! i));\n                    \\<And>i.\n                       \\<lbrakk>i < length as; i < length bs;\n                        snd (P (as ! i) (bs ! i))\\<rbrakk>\n                       \\<Longrightarrow> snd (P' (as ! i) (bs ! i))\\<rbrakk>\n                   \\<Longrightarrow> (fst\n (lex_ext_unbounded P as bs) \\<longrightarrow>\nfst (lex_ext_unbounded P' as bs)) \\<and>\n                                     (snd\n (lex_ext_unbounded P as bs) \\<longrightarrow>\nsnd (lex_ext_unbounded P' as bs));\n        \\<And>i.\n           \\<lbrakk>i < length (a # as); i < length (b # bs);\n            fst (P ((a # as) ! i) ((b # bs) ! i))\\<rbrakk>\n           \\<Longrightarrow> fst (P' ((a # as) ! i) ((b # bs) ! i));\n        \\<And>i.\n           \\<lbrakk>i < length (a # as); i < length (b # bs);\n            snd (P ((a # as) ! i) ((b # bs) ! i))\\<rbrakk>\n           \\<Longrightarrow> snd (P' ((a # as) ! i) ((b # bs) ! i))\\<rbrakk>\n       \\<Longrightarrow> (fst (lex_ext_unbounded P (a # as)\n                                (b # bs)) \\<longrightarrow>\n                          fst (lex_ext_unbounded P' (a # as)\n                                (b # bs))) \\<and>\n                         (snd (lex_ext_unbounded P (a # as)\n                                (b # bs)) \\<longrightarrow>\n                          snd (lex_ext_unbounded P' (a # as) (b # bs)))", "note [simp] = lex_ext_unbounded.simps"], ["proof (state)\nthis:\n  lex_ext_unbounded ?f [] [] = (False, True)\n  lex_ext_unbounded ?f (?uu # ?uv) [] = (True, True)\n  lex_ext_unbounded ?f [] (?uw # ?ux) = (False, False)\n  lex_ext_unbounded ?f (?a # ?as) (?b # ?bs) =\n  (let (stri, nstri) = ?f ?a ?b\n   in if stri then (True, True)\n      else if nstri then lex_ext_unbounded ?f ?as ?bs else (False, False))\n\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>i.\n                \\<lbrakk>i < length []; i < length [];\n                 fst (P ([] ! i) ([] ! i))\\<rbrakk>\n                \\<Longrightarrow> fst (P' ([] ! i) ([] ! i));\n     \\<And>i.\n        \\<lbrakk>i < length []; i < length [];\n         snd (P ([] ! i) ([] ! i))\\<rbrakk>\n        \\<Longrightarrow> snd (P' ([] ! i) ([] ! i))\\<rbrakk>\n    \\<Longrightarrow> (fst (lex_ext_unbounded P [] []) \\<longrightarrow>\n                       fst (lex_ext_unbounded P' [] [])) \\<and>\n                      (snd (lex_ext_unbounded P [] []) \\<longrightarrow>\n                       snd (lex_ext_unbounded P' [] []))\n 2. \\<And>uu_ uv_.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length (uu_ # uv_); i < length [];\n                    fst (P ((uu_ # uv_) ! i) ([] ! i))\\<rbrakk>\n                   \\<Longrightarrow> fst (P' ((uu_ # uv_) ! i) ([] ! i));\n        \\<And>i.\n           \\<lbrakk>i < length (uu_ # uv_); i < length [];\n            snd (P ((uu_ # uv_) ! i) ([] ! i))\\<rbrakk>\n           \\<Longrightarrow> snd (P' ((uu_ # uv_) ! i) ([] ! i))\\<rbrakk>\n       \\<Longrightarrow> (fst (lex_ext_unbounded P (uu_ # uv_)\n                                []) \\<longrightarrow>\n                          fst (lex_ext_unbounded P' (uu_ # uv_) [])) \\<and>\n                         (snd (lex_ext_unbounded P (uu_ # uv_)\n                                []) \\<longrightarrow>\n                          snd (lex_ext_unbounded P' (uu_ # uv_) []))\n 3. \\<And>uw_ ux_.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length []; i < length (uw_ # ux_);\n                    fst (P ([] ! i) ((uw_ # ux_) ! i))\\<rbrakk>\n                   \\<Longrightarrow> fst (P' ([] ! i) ((uw_ # ux_) ! i));\n        \\<And>i.\n           \\<lbrakk>i < length []; i < length (uw_ # ux_);\n            snd (P ([] ! i) ((uw_ # ux_) ! i))\\<rbrakk>\n           \\<Longrightarrow> snd (P' ([] ! i) ((uw_ # ux_) ! i))\\<rbrakk>\n       \\<Longrightarrow> (fst (lex_ext_unbounded P []\n                                (uw_ # ux_)) \\<longrightarrow>\n                          fst (lex_ext_unbounded P' [] (uw_ # ux_))) \\<and>\n                         (snd (lex_ext_unbounded P []\n                                (uw_ # ux_)) \\<longrightarrow>\n                          snd (lex_ext_unbounded P' [] (uw_ # ux_)))\n 4. \\<And>a as b bs.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>x = P a b; (xa, y) = x; \\<not> xa; y;\n                    \\<And>i.\n                       \\<lbrakk>i < length as; i < length bs;\n                        fst (P (as ! i) (bs ! i))\\<rbrakk>\n                       \\<Longrightarrow> fst (P' (as ! i) (bs ! i));\n                    \\<And>i.\n                       \\<lbrakk>i < length as; i < length bs;\n                        snd (P (as ! i) (bs ! i))\\<rbrakk>\n                       \\<Longrightarrow> snd (P' (as ! i) (bs ! i))\\<rbrakk>\n                   \\<Longrightarrow> (fst\n (lex_ext_unbounded P as bs) \\<longrightarrow>\nfst (lex_ext_unbounded P' as bs)) \\<and>\n                                     (snd\n (lex_ext_unbounded P as bs) \\<longrightarrow>\nsnd (lex_ext_unbounded P' as bs));\n        \\<And>i.\n           \\<lbrakk>i < length (a # as); i < length (b # bs);\n            fst (P ((a # as) ! i) ((b # bs) ! i))\\<rbrakk>\n           \\<Longrightarrow> fst (P' ((a # as) ! i) ((b # bs) ! i));\n        \\<And>i.\n           \\<lbrakk>i < length (a # as); i < length (b # bs);\n            snd (P ((a # as) ! i) ((b # bs) ! i))\\<rbrakk>\n           \\<Longrightarrow> snd (P' ((a # as) ! i) ((b # bs) ! i))\\<rbrakk>\n       \\<Longrightarrow> (fst (lex_ext_unbounded P (a # as)\n                                (b # bs)) \\<longrightarrow>\n                          fst (lex_ext_unbounded P' (a # as)\n                                (b # bs))) \\<and>\n                         (snd (lex_ext_unbounded P (a # as)\n                                (b # bs)) \\<longrightarrow>\n                          snd (lex_ext_unbounded P' (a # as) (b # bs)))", "case (4 x xs y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>?x = P x y; (?xa, ?y) = ?x; \\<not> ?xa; ?y;\n   \\<And>i.\n      \\<lbrakk>i < length xs; i < length ys;\n       fst (P (xs ! i) (ys ! i))\\<rbrakk>\n      \\<Longrightarrow> fst (P' (xs ! i) (ys ! i));\n   \\<And>i.\n      \\<lbrakk>i < length xs; i < length ys;\n       snd (P (xs ! i) (ys ! i))\\<rbrakk>\n      \\<Longrightarrow> snd (P' (xs ! i) (ys ! i))\\<rbrakk>\n  \\<Longrightarrow> (fst (lex_ext_unbounded P xs ys) \\<longrightarrow>\n                     fst (lex_ext_unbounded P' xs ys)) \\<and>\n                    (snd (lex_ext_unbounded P xs ys) \\<longrightarrow>\n                     snd (lex_ext_unbounded P' xs ys))\n  \\<lbrakk>?i < length (x # xs); ?i < length (y # ys);\n   fst (P ((x # xs) ! ?i) ((y # ys) ! ?i))\\<rbrakk>\n  \\<Longrightarrow> fst (P' ((x # xs) ! ?i) ((y # ys) ! ?i))\n  \\<lbrakk>?i < length (x # xs); ?i < length (y # ys);\n   snd (P ((x # xs) ! ?i) ((y # ys) ! ?i))\\<rbrakk>\n  \\<Longrightarrow> snd (P' ((x # xs) ! ?i) ((y # ys) ! ?i))\n\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>i.\n                \\<lbrakk>i < length []; i < length [];\n                 fst (P ([] ! i) ([] ! i))\\<rbrakk>\n                \\<Longrightarrow> fst (P' ([] ! i) ([] ! i));\n     \\<And>i.\n        \\<lbrakk>i < length []; i < length [];\n         snd (P ([] ! i) ([] ! i))\\<rbrakk>\n        \\<Longrightarrow> snd (P' ([] ! i) ([] ! i))\\<rbrakk>\n    \\<Longrightarrow> (fst (lex_ext_unbounded P [] []) \\<longrightarrow>\n                       fst (lex_ext_unbounded P' [] [])) \\<and>\n                      (snd (lex_ext_unbounded P [] []) \\<longrightarrow>\n                       snd (lex_ext_unbounded P' [] []))\n 2. \\<And>uu_ uv_.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length (uu_ # uv_); i < length [];\n                    fst (P ((uu_ # uv_) ! i) ([] ! i))\\<rbrakk>\n                   \\<Longrightarrow> fst (P' ((uu_ # uv_) ! i) ([] ! i));\n        \\<And>i.\n           \\<lbrakk>i < length (uu_ # uv_); i < length [];\n            snd (P ((uu_ # uv_) ! i) ([] ! i))\\<rbrakk>\n           \\<Longrightarrow> snd (P' ((uu_ # uv_) ! i) ([] ! i))\\<rbrakk>\n       \\<Longrightarrow> (fst (lex_ext_unbounded P (uu_ # uv_)\n                                []) \\<longrightarrow>\n                          fst (lex_ext_unbounded P' (uu_ # uv_) [])) \\<and>\n                         (snd (lex_ext_unbounded P (uu_ # uv_)\n                                []) \\<longrightarrow>\n                          snd (lex_ext_unbounded P' (uu_ # uv_) []))\n 3. \\<And>uw_ ux_.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length []; i < length (uw_ # ux_);\n                    fst (P ([] ! i) ((uw_ # ux_) ! i))\\<rbrakk>\n                   \\<Longrightarrow> fst (P' ([] ! i) ((uw_ # ux_) ! i));\n        \\<And>i.\n           \\<lbrakk>i < length []; i < length (uw_ # ux_);\n            snd (P ([] ! i) ((uw_ # ux_) ! i))\\<rbrakk>\n           \\<Longrightarrow> snd (P' ([] ! i) ((uw_ # ux_) ! i))\\<rbrakk>\n       \\<Longrightarrow> (fst (lex_ext_unbounded P []\n                                (uw_ # ux_)) \\<longrightarrow>\n                          fst (lex_ext_unbounded P' [] (uw_ # ux_))) \\<and>\n                         (snd (lex_ext_unbounded P []\n                                (uw_ # ux_)) \\<longrightarrow>\n                          snd (lex_ext_unbounded P' [] (uw_ # ux_)))\n 4. \\<And>a as b bs.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>x = P a b; (xa, y) = x; \\<not> xa; y;\n                    \\<And>i.\n                       \\<lbrakk>i < length as; i < length bs;\n                        fst (P (as ! i) (bs ! i))\\<rbrakk>\n                       \\<Longrightarrow> fst (P' (as ! i) (bs ! i));\n                    \\<And>i.\n                       \\<lbrakk>i < length as; i < length bs;\n                        snd (P (as ! i) (bs ! i))\\<rbrakk>\n                       \\<Longrightarrow> snd (P' (as ! i) (bs ! i))\\<rbrakk>\n                   \\<Longrightarrow> (fst\n (lex_ext_unbounded P as bs) \\<longrightarrow>\nfst (lex_ext_unbounded P' as bs)) \\<and>\n                                     (snd\n (lex_ext_unbounded P as bs) \\<longrightarrow>\nsnd (lex_ext_unbounded P' as bs));\n        \\<And>i.\n           \\<lbrakk>i < length (a # as); i < length (b # bs);\n            fst (P ((a # as) ! i) ((b # bs) ! i))\\<rbrakk>\n           \\<Longrightarrow> fst (P' ((a # as) ! i) ((b # bs) ! i));\n        \\<And>i.\n           \\<lbrakk>i < length (a # as); i < length (b # bs);\n            snd (P ((a # as) ! i) ((b # bs) ! i))\\<rbrakk>\n           \\<Longrightarrow> snd (P' ((a # as) ! i) ((b # bs) ! i))\\<rbrakk>\n       \\<Longrightarrow> (fst (lex_ext_unbounded P (a # as)\n                                (b # bs)) \\<longrightarrow>\n                          fst (lex_ext_unbounded P' (a # as)\n                                (b # bs))) \\<and>\n                         (snd (lex_ext_unbounded P (a # as)\n                                (b # bs)) \\<longrightarrow>\n                          snd (lex_ext_unbounded P' (a # as) (b # bs)))", "consider (TT) \"P x y = (True, True)\"\n    | (TF) \"P x y = (True, False)\"\n    | (FT) \"P x y = (False, True)\"\n    | (FF) \"P x y = (False, False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P x y = (True, True) \\<Longrightarrow> thesis;\n     P x y = (True, False) \\<Longrightarrow> thesis;\n     P x y = (False, True) \\<Longrightarrow> thesis;\n     P x y = (False, False) \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (cases \"P x y\", auto)"], ["proof (state)\nthis:\n  \\<lbrakk>P x y = (True, True) \\<Longrightarrow> ?thesis;\n   P x y = (True, False) \\<Longrightarrow> ?thesis;\n   P x y = (False, True) \\<Longrightarrow> ?thesis;\n   P x y = (False, False) \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>i.\n                \\<lbrakk>i < length []; i < length [];\n                 fst (P ([] ! i) ([] ! i))\\<rbrakk>\n                \\<Longrightarrow> fst (P' ([] ! i) ([] ! i));\n     \\<And>i.\n        \\<lbrakk>i < length []; i < length [];\n         snd (P ([] ! i) ([] ! i))\\<rbrakk>\n        \\<Longrightarrow> snd (P' ([] ! i) ([] ! i))\\<rbrakk>\n    \\<Longrightarrow> (fst (lex_ext_unbounded P [] []) \\<longrightarrow>\n                       fst (lex_ext_unbounded P' [] [])) \\<and>\n                      (snd (lex_ext_unbounded P [] []) \\<longrightarrow>\n                       snd (lex_ext_unbounded P' [] []))\n 2. \\<And>uu_ uv_.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length (uu_ # uv_); i < length [];\n                    fst (P ((uu_ # uv_) ! i) ([] ! i))\\<rbrakk>\n                   \\<Longrightarrow> fst (P' ((uu_ # uv_) ! i) ([] ! i));\n        \\<And>i.\n           \\<lbrakk>i < length (uu_ # uv_); i < length [];\n            snd (P ((uu_ # uv_) ! i) ([] ! i))\\<rbrakk>\n           \\<Longrightarrow> snd (P' ((uu_ # uv_) ! i) ([] ! i))\\<rbrakk>\n       \\<Longrightarrow> (fst (lex_ext_unbounded P (uu_ # uv_)\n                                []) \\<longrightarrow>\n                          fst (lex_ext_unbounded P' (uu_ # uv_) [])) \\<and>\n                         (snd (lex_ext_unbounded P (uu_ # uv_)\n                                []) \\<longrightarrow>\n                          snd (lex_ext_unbounded P' (uu_ # uv_) []))\n 3. \\<And>uw_ ux_.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length []; i < length (uw_ # ux_);\n                    fst (P ([] ! i) ((uw_ # ux_) ! i))\\<rbrakk>\n                   \\<Longrightarrow> fst (P' ([] ! i) ((uw_ # ux_) ! i));\n        \\<And>i.\n           \\<lbrakk>i < length []; i < length (uw_ # ux_);\n            snd (P ([] ! i) ((uw_ # ux_) ! i))\\<rbrakk>\n           \\<Longrightarrow> snd (P' ([] ! i) ((uw_ # ux_) ! i))\\<rbrakk>\n       \\<Longrightarrow> (fst (lex_ext_unbounded P []\n                                (uw_ # ux_)) \\<longrightarrow>\n                          fst (lex_ext_unbounded P' [] (uw_ # ux_))) \\<and>\n                         (snd (lex_ext_unbounded P []\n                                (uw_ # ux_)) \\<longrightarrow>\n                          snd (lex_ext_unbounded P' [] (uw_ # ux_)))\n 4. \\<And>a as b bs.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>x = P a b; (xa, y) = x; \\<not> xa; y;\n                    \\<And>i.\n                       \\<lbrakk>i < length as; i < length bs;\n                        fst (P (as ! i) (bs ! i))\\<rbrakk>\n                       \\<Longrightarrow> fst (P' (as ! i) (bs ! i));\n                    \\<And>i.\n                       \\<lbrakk>i < length as; i < length bs;\n                        snd (P (as ! i) (bs ! i))\\<rbrakk>\n                       \\<Longrightarrow> snd (P' (as ! i) (bs ! i))\\<rbrakk>\n                   \\<Longrightarrow> (fst\n (lex_ext_unbounded P as bs) \\<longrightarrow>\nfst (lex_ext_unbounded P' as bs)) \\<and>\n                                     (snd\n (lex_ext_unbounded P as bs) \\<longrightarrow>\nsnd (lex_ext_unbounded P' as bs));\n        \\<And>i.\n           \\<lbrakk>i < length (a # as); i < length (b # bs);\n            fst (P ((a # as) ! i) ((b # bs) ! i))\\<rbrakk>\n           \\<Longrightarrow> fst (P' ((a # as) ! i) ((b # bs) ! i));\n        \\<And>i.\n           \\<lbrakk>i < length (a # as); i < length (b # bs);\n            snd (P ((a # as) ! i) ((b # bs) ! i))\\<rbrakk>\n           \\<Longrightarrow> snd (P' ((a # as) ! i) ((b # bs) ! i))\\<rbrakk>\n       \\<Longrightarrow> (fst (lex_ext_unbounded P (a # as)\n                                (b # bs)) \\<longrightarrow>\n                          fst (lex_ext_unbounded P' (a # as)\n                                (b # bs))) \\<and>\n                         (snd (lex_ext_unbounded P (a # as)\n                                (b # bs)) \\<longrightarrow>\n                          snd (lex_ext_unbounded P' (a # as) (b # bs)))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>P x y = (True, True) \\<Longrightarrow> ?thesis;\n   P x y = (True, False) \\<Longrightarrow> ?thesis;\n   P x y = (False, True) \\<Longrightarrow> ?thesis;\n   P x y = (False, False) \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "proof cases"], ["proof (state)\ngoal (4 subgoals):\n 1. P x y = (True, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. P x y = (True, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 3. P x y = (False, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 4. P x y = (False, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "case TT"], ["proof (state)\nthis:\n  P x y = (True, True)\n\ngoal (4 subgoals):\n 1. P x y = (True, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. P x y = (True, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 3. P x y = (False, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 4. P x y = (False, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "moreover"], ["proof (state)\nthis:\n  P x y = (True, True)\n\ngoal (4 subgoals):\n 1. P x y = (True, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. P x y = (True, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 3. P x y = (False, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 4. P x y = (False, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "with 4(2) [of 0] and 4(3) [of 0]"], ["proof (chain)\npicking this:\n  \\<lbrakk>0 < length (x # xs); 0 < length (y # ys);\n   fst (P ((x # xs) ! 0) ((y # ys) ! 0))\\<rbrakk>\n  \\<Longrightarrow> fst (P' ((x # xs) ! 0) ((y # ys) ! 0))\n  \\<lbrakk>0 < length (x # xs); 0 < length (y # ys);\n   snd (P ((x # xs) ! 0) ((y # ys) ! 0))\\<rbrakk>\n  \\<Longrightarrow> snd (P' ((x # xs) ! 0) ((y # ys) ! 0))\n  P x y = (True, True)", "have \"P' x y = (True, True)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < length (x # xs); 0 < length (y # ys);\n   fst (P ((x # xs) ! 0) ((y # ys) ! 0))\\<rbrakk>\n  \\<Longrightarrow> fst (P' ((x # xs) ! 0) ((y # ys) ! 0))\n  \\<lbrakk>0 < length (x # xs); 0 < length (y # ys);\n   snd (P ((x # xs) ! 0) ((y # ys) ! 0))\\<rbrakk>\n  \\<Longrightarrow> snd (P' ((x # xs) ! 0) ((y # ys) ! 0))\n  P x y = (True, True)\n\ngoal (1 subgoal):\n 1. P' x y = (True, True)", "by (auto) (metis (full_types) prod.collapse)"], ["proof (state)\nthis:\n  P' x y = (True, True)\n\ngoal (4 subgoals):\n 1. P x y = (True, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. P x y = (True, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 3. P x y = (False, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 4. P x y = (False, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "ultimately"], ["proof (chain)\npicking this:\n  P x y = (True, True)\n  P' x y = (True, True)", "show ?thesis"], ["proof (prove)\nusing this:\n  P x y = (True, True)\n  P' x y = (True, True)\n\ngoal (1 subgoal):\n 1. (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "by simp"], ["proof (state)\nthis:\n  (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n  (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n\ngoal (3 subgoals):\n 1. P x y = (True, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. P x y = (False, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 3. P x y = (False, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. P x y = (True, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. P x y = (False, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 3. P x y = (False, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "case TF"], ["proof (state)\nthis:\n  P x y = (True, False)\n\ngoal (3 subgoals):\n 1. P x y = (True, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. P x y = (False, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 3. P x y = (False, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "proof (cases \"snd (P' x y)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. snd (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. \\<not> snd (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "case False"], ["proof (state)\nthis:\n  \\<not> snd (P' x y)\n\ngoal (2 subgoals):\n 1. snd (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. \\<not> snd (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "moreover"], ["proof (state)\nthis:\n  \\<not> snd (P' x y)\n\ngoal (2 subgoals):\n 1. snd (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. \\<not> snd (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "with 4(2) [of 0] and TF"], ["proof (chain)\npicking this:\n  \\<lbrakk>0 < length (x # xs); 0 < length (y # ys);\n   fst (P ((x # xs) ! 0) ((y # ys) ! 0))\\<rbrakk>\n  \\<Longrightarrow> fst (P' ((x # xs) ! 0) ((y # ys) ! 0))\n  P x y = (True, False)\n  \\<not> snd (P' x y)", "have \"P' x y = (True, False)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < length (x # xs); 0 < length (y # ys);\n   fst (P ((x # xs) ! 0) ((y # ys) ! 0))\\<rbrakk>\n  \\<Longrightarrow> fst (P' ((x # xs) ! 0) ((y # ys) ! 0))\n  P x y = (True, False)\n  \\<not> snd (P' x y)\n\ngoal (1 subgoal):\n 1. P' x y = (True, False)", "by (cases \"P' x y\", auto)"], ["proof (state)\nthis:\n  P' x y = (True, False)\n\ngoal (2 subgoals):\n 1. snd (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. \\<not> snd (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> snd (P' x y)\n  P' x y = (True, False)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> snd (P' x y)\n  P' x y = (True, False)\n\ngoal (1 subgoal):\n 1. (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "by simp"], ["proof (state)\nthis:\n  (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n  (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n\ngoal (1 subgoal):\n 1. snd (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. snd (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "case True"], ["proof (state)\nthis:\n  snd (P' x y)\n\ngoal (1 subgoal):\n 1. snd (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "with 4(2) [of 0] and TF"], ["proof (chain)\npicking this:\n  \\<lbrakk>0 < length (x # xs); 0 < length (y # ys);\n   fst (P ((x # xs) ! 0) ((y # ys) ! 0))\\<rbrakk>\n  \\<Longrightarrow> fst (P' ((x # xs) ! 0) ((y # ys) ! 0))\n  P x y = (True, False)\n  snd (P' x y)", "have \"P' x y = (True, True)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < length (x # xs); 0 < length (y # ys);\n   fst (P ((x # xs) ! 0) ((y # ys) ! 0))\\<rbrakk>\n  \\<Longrightarrow> fst (P' ((x # xs) ! 0) ((y # ys) ! 0))\n  P x y = (True, False)\n  snd (P' x y)\n\ngoal (1 subgoal):\n 1. P' x y = (True, True)", "by (auto )(metis (full_types) fst_conv snd_conv surj_pair)"], ["proof (state)\nthis:\n  P' x y = (True, True)\n\ngoal (1 subgoal):\n 1. snd (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "then"], ["proof (chain)\npicking this:\n  P' x y = (True, True)", "show ?thesis"], ["proof (prove)\nusing this:\n  P' x y = (True, True)\n\ngoal (1 subgoal):\n 1. (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "by simp"], ["proof (state)\nthis:\n  (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n  (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n  (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n\ngoal (2 subgoals):\n 1. P x y = (False, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. P x y = (False, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. P x y = (False, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. P x y = (False, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "case FF"], ["proof (state)\nthis:\n  P x y = (False, False)\n\ngoal (2 subgoals):\n 1. P x y = (False, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. P x y = (False, False) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "then"], ["proof (chain)\npicking this:\n  P x y = (False, False)", "show ?thesis"], ["proof (prove)\nusing this:\n  P x y = (False, False)\n\ngoal (1 subgoal):\n 1. (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "by simp"], ["proof (state)\nthis:\n  (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n  (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n\ngoal (1 subgoal):\n 1. P x y = (False, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. P x y = (False, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "case FT"], ["proof (state)\nthis:\n  P x y = (False, True)\n\ngoal (1 subgoal):\n 1. P x y = (False, True) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "proof (cases \"fst (P' x y)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. \\<not> fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "case True"], ["proof (state)\nthis:\n  fst (P' x y)\n\ngoal (2 subgoals):\n 1. fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. \\<not> fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "with 4(3) [of 0] and FT"], ["proof (chain)\npicking this:\n  \\<lbrakk>0 < length (x # xs); 0 < length (y # ys);\n   snd (P ((x # xs) ! 0) ((y # ys) ! 0))\\<rbrakk>\n  \\<Longrightarrow> snd (P' ((x # xs) ! 0) ((y # ys) ! 0))\n  P x y = (False, True)\n  fst (P' x y)", "have *: \"P' x y = (True, True)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < length (x # xs); 0 < length (y # ys);\n   snd (P ((x # xs) ! 0) ((y # ys) ! 0))\\<rbrakk>\n  \\<Longrightarrow> snd (P' ((x # xs) ! 0) ((y # ys) ! 0))\n  P x y = (False, True)\n  fst (P' x y)\n\ngoal (1 subgoal):\n 1. P' x y = (True, True)", "by (auto) (metis (full_types) prod.collapse)"], ["proof (state)\nthis:\n  P' x y = (True, True)\n\ngoal (2 subgoals):\n 1. fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. \\<not> fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "have \"?l1 (x#xs) (y#ys) \\<longrightarrow> ?r1 (x#xs) (y#ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n    fst (lex_ext_unbounded P' (x # xs) (y # ys))", "by (simp add: FT *)"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n  fst (lex_ext_unbounded P' (x # xs) (y # ys))\n\ngoal (2 subgoals):\n 1. fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. \\<not> fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "moreover"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n  fst (lex_ext_unbounded P' (x # xs) (y # ys))\n\ngoal (2 subgoals):\n 1. fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. \\<not> fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "have \"?l2 (x#xs) (y#ys) \\<longrightarrow> ?r2 (x#xs) (y#ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n    snd (lex_ext_unbounded P' (x # xs) (y # ys))", "by (simp add: *)"], ["proof (state)\nthis:\n  snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n  snd (lex_ext_unbounded P' (x # xs) (y # ys))\n\ngoal (2 subgoals):\n 1. fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n 2. \\<not> fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "ultimately"], ["proof (chain)\npicking this:\n  fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n  fst (lex_ext_unbounded P' (x # xs) (y # ys))\n  snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n  snd (lex_ext_unbounded P' (x # xs) (y # ys))", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n  fst (lex_ext_unbounded P' (x # xs) (y # ys))\n  snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n  snd (lex_ext_unbounded P' (x # xs) (y # ys))\n\ngoal (1 subgoal):\n 1. (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "by blast"], ["proof (state)\nthis:\n  (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n  (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n\ngoal (1 subgoal):\n 1. \\<not> fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "case False"], ["proof (state)\nthis:\n  \\<not> fst (P' x y)\n\ngoal (1 subgoal):\n 1. \\<not> fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "with 4(3) [of 0] and FT"], ["proof (chain)\npicking this:\n  \\<lbrakk>0 < length (x # xs); 0 < length (y # ys);\n   snd (P ((x # xs) ! 0) ((y # ys) ! 0))\\<rbrakk>\n  \\<Longrightarrow> snd (P' ((x # xs) ! 0) ((y # ys) ! 0))\n  P x y = (False, True)\n  \\<not> fst (P' x y)", "have *: \"P' x y = (False, True)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < length (x # xs); 0 < length (y # ys);\n   snd (P ((x # xs) ! 0) ((y # ys) ! 0))\\<rbrakk>\n  \\<Longrightarrow> snd (P' ((x # xs) ! 0) ((y # ys) ! 0))\n  P x y = (False, True)\n  \\<not> fst (P' x y)\n\ngoal (1 subgoal):\n 1. P' x y = (False, True)", "by (cases \"P' x y\", auto)"], ["proof (state)\nthis:\n  P' x y = (False, True)\n\ngoal (1 subgoal):\n 1. \\<not> fst (P' x y) \\<Longrightarrow>\n    (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "using 4(1) [OF refl FT [symmetric]] and 4(2) and 4(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> False; True;\n   \\<And>i.\n      \\<lbrakk>i < length xs; i < length ys;\n       fst (P (xs ! i) (ys ! i))\\<rbrakk>\n      \\<Longrightarrow> fst (P' (xs ! i) (ys ! i));\n   \\<And>i.\n      \\<lbrakk>i < length xs; i < length ys;\n       snd (P (xs ! i) (ys ! i))\\<rbrakk>\n      \\<Longrightarrow> snd (P' (xs ! i) (ys ! i))\\<rbrakk>\n  \\<Longrightarrow> (fst (lex_ext_unbounded P xs ys) \\<longrightarrow>\n                     fst (lex_ext_unbounded P' xs ys)) \\<and>\n                    (snd (lex_ext_unbounded P xs ys) \\<longrightarrow>\n                     snd (lex_ext_unbounded P' xs ys))\n  \\<lbrakk>?i < length (x # xs); ?i < length (y # ys);\n   fst (P ((x # xs) ! ?i) ((y # ys) ! ?i))\\<rbrakk>\n  \\<Longrightarrow> fst (P' ((x # xs) ! ?i) ((y # ys) ! ?i))\n  \\<lbrakk>?i < length (x # xs); ?i < length (y # ys);\n   snd (P ((x # xs) ! ?i) ((y # ys) ! ?i))\\<rbrakk>\n  \\<Longrightarrow> snd (P' ((x # xs) ! ?i) ((y # ys) ! ?i))\n\ngoal (1 subgoal):\n 1. (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "using FT *"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> False; True;\n   \\<And>i.\n      \\<lbrakk>i < length xs; i < length ys;\n       fst (P (xs ! i) (ys ! i))\\<rbrakk>\n      \\<Longrightarrow> fst (P' (xs ! i) (ys ! i));\n   \\<And>i.\n      \\<lbrakk>i < length xs; i < length ys;\n       snd (P (xs ! i) (ys ! i))\\<rbrakk>\n      \\<Longrightarrow> snd (P' (xs ! i) (ys ! i))\\<rbrakk>\n  \\<Longrightarrow> (fst (lex_ext_unbounded P xs ys) \\<longrightarrow>\n                     fst (lex_ext_unbounded P' xs ys)) \\<and>\n                    (snd (lex_ext_unbounded P xs ys) \\<longrightarrow>\n                     snd (lex_ext_unbounded P' xs ys))\n  \\<lbrakk>?i < length (x # xs); ?i < length (y # ys);\n   fst (P ((x # xs) ! ?i) ((y # ys) ! ?i))\\<rbrakk>\n  \\<Longrightarrow> fst (P' ((x # xs) ! ?i) ((y # ys) ! ?i))\n  \\<lbrakk>?i < length (x # xs); ?i < length (y # ys);\n   snd (P ((x # xs) ! ?i) ((y # ys) ! ?i))\\<rbrakk>\n  \\<Longrightarrow> snd (P' ((x # xs) ! ?i) ((y # ys) ! ?i))\n  P x y = (False, True)\n  P' x y = (False, True)\n\ngoal (1 subgoal):\n 1. (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n    (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n     snd (lex_ext_unbounded P' (x # xs) (y # ys)))", "by (auto) (metis Suc_less_eq nth_Cons_Suc)+"], ["proof (state)\nthis:\n  (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n  (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n  (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (fst (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   fst (lex_ext_unbounded P' (x # xs) (y # ys))) \\<and>\n  (snd (lex_ext_unbounded P (x # xs) (y # ys)) \\<longrightarrow>\n   snd (lex_ext_unbounded P' (x # xs) (y # ys)))\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<And>i.\n                \\<lbrakk>i < length []; i < length [];\n                 fst (P ([] ! i) ([] ! i))\\<rbrakk>\n                \\<Longrightarrow> fst (P' ([] ! i) ([] ! i));\n     \\<And>i.\n        \\<lbrakk>i < length []; i < length [];\n         snd (P ([] ! i) ([] ! i))\\<rbrakk>\n        \\<Longrightarrow> snd (P' ([] ! i) ([] ! i))\\<rbrakk>\n    \\<Longrightarrow> (fst (lex_ext_unbounded P [] []) \\<longrightarrow>\n                       fst (lex_ext_unbounded P' [] [])) \\<and>\n                      (snd (lex_ext_unbounded P [] []) \\<longrightarrow>\n                       snd (lex_ext_unbounded P' [] []))\n 2. \\<And>uu_ uv_.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length (uu_ # uv_); i < length [];\n                    fst (P ((uu_ # uv_) ! i) ([] ! i))\\<rbrakk>\n                   \\<Longrightarrow> fst (P' ((uu_ # uv_) ! i) ([] ! i));\n        \\<And>i.\n           \\<lbrakk>i < length (uu_ # uv_); i < length [];\n            snd (P ((uu_ # uv_) ! i) ([] ! i))\\<rbrakk>\n           \\<Longrightarrow> snd (P' ((uu_ # uv_) ! i) ([] ! i))\\<rbrakk>\n       \\<Longrightarrow> (fst (lex_ext_unbounded P (uu_ # uv_)\n                                []) \\<longrightarrow>\n                          fst (lex_ext_unbounded P' (uu_ # uv_) [])) \\<and>\n                         (snd (lex_ext_unbounded P (uu_ # uv_)\n                                []) \\<longrightarrow>\n                          snd (lex_ext_unbounded P' (uu_ # uv_) []))\n 3. \\<And>uw_ ux_.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length []; i < length (uw_ # ux_);\n                    fst (P ([] ! i) ((uw_ # ux_) ! i))\\<rbrakk>\n                   \\<Longrightarrow> fst (P' ([] ! i) ((uw_ # ux_) ! i));\n        \\<And>i.\n           \\<lbrakk>i < length []; i < length (uw_ # ux_);\n            snd (P ([] ! i) ((uw_ # ux_) ! i))\\<rbrakk>\n           \\<Longrightarrow> snd (P' ([] ! i) ((uw_ # ux_) ! i))\\<rbrakk>\n       \\<Longrightarrow> (fst (lex_ext_unbounded P []\n                                (uw_ # ux_)) \\<longrightarrow>\n                          fst (lex_ext_unbounded P' [] (uw_ # ux_))) \\<and>\n                         (snd (lex_ext_unbounded P []\n                                (uw_ # ux_)) \\<longrightarrow>\n                          snd (lex_ext_unbounded P' [] (uw_ # ux_)))", "qed (simp add: lex_ext_unbounded.simps)+"], ["", "end"]]}