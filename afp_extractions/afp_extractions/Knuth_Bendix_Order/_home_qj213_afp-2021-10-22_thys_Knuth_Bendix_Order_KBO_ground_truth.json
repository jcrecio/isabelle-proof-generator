{"file_name": "/home/qj213/afp-2021-10-22/thys/Knuth_Bendix_Order/KBO.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Knuth_Bendix_Order", "problem_names": ["lemma set_scf_list [simp]:\n  assumes \"\\<forall>i < length xs. scf i > 0\"\n  shows \"set (scf_list scf xs) = set xs\"", "lemma scf_list_subset: \"set (scf_list scf xs) \\<subseteq> set xs\"", "lemma scf_list_empty [simp]:\n  \"scf_list scf [] = []\"", "lemma scf_list_bef_i_aft [simp]:\n  \"scf_list scf (bef @ i # aft) =\n    scf_list scf bef @ replicate (scf (length bef)) i @\n    scf_list (\\<lambda> i. scf (Suc (length bef + i))) aft\"", "lemma scf_list_map [simp]:\n  \"scf_list scf (map f xs) = map f (scf_list scf xs)\"", "lemma vars_term_scf_subset:\n  \"vars_term (scf_term scf s) \\<subseteq> vars_term s\"", "lemma scf_term_subst:\n  \"scf_term scf (t \\<cdot> \\<sigma>) = scf_term scf t \\<cdot> (\\<lambda> x. scf_term scf (\\<sigma> x))\"", "lemma weight_simp [simp]:\n  \"weight (Fun f ts) = w (f, length ts) + sum_list (map weight (scf_list (scf (f, length ts)) ts))\"", "lemma sum_list_scf_list:\n  assumes \"\\<And> i. i < length ts \\<Longrightarrow> f i > 0\"\n  shows \"sum_list (map weight ts) \\<le> sum_list (map weight (scf_list f ts))\"", "lemma kbo_code: \"kbo s t = (let wt = weight t; ws = weight s in\n    if (vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and> wt \\<le> ws)\n    then if wt < ws\n      then (True, True)\n      else (case s of\n        Var y \\<Rightarrow> (False, (case t of Var x \\<Rightarrow> True | Fun g ts \\<Rightarrow> ts = [] \\<and> least g))\n      | Fun f ss \\<Rightarrow> (case t of\n          Var x \\<Rightarrow> (True, True)\n        | Fun g ts \\<Rightarrow> let ff = (f, length ss); gg = (g, length ts) in\n          if pr_strict ff gg\n          then (True, True)\n          else if pr_weak ff gg\n            then lex_ext_unbounded kbo ss ts\n            else (False, False)))\n    else (False, False))\"", "lemma mset_replicate_mono:\n  assumes \"m1 \\<subseteq># m2\"\n  shows \"\\<Sum>\\<^sub># (mset (replicate n m1)) \\<subseteq># \\<Sum>\\<^sub># (mset (replicate n m2))\"", "lemma weight_w0: \"weight t \\<ge> w0\"", "lemma weight_gt_0: \"weight t > 0\"", "lemma weight_0 [iff]: \"weight t = 0 \\<longleftrightarrow> False\"", "lemma not_S_Var: \"\\<not> S (Var x) t\"", "lemma S_imp_NS: \"S s t \\<Longrightarrow> NS s t\"", "lemma NS_refl: \"NS s s\"", "lemma pr_strict_irrefl: \"\\<not> pr_strict fn fn\"", "lemma S_irrefl: \"\\<not> S t t\"", "lemma S_mono_one:\n  assumes S: \"S s t\"\n  shows \"S (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))\"", "lemma S_ctxt: \"S s t \\<Longrightarrow> S (C\\<langle>s\\<rangle>) (C\\<langle>t\\<rangle>)\"", "lemma NS_mono_one:\n  assumes NS: \"NS s t\" shows \"NS (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))\"", "lemma NS_ctxt: \"NS s t \\<Longrightarrow> NS (C\\<langle>s\\<rangle>) (C\\<langle>t\\<rangle>)\"", "lemma NS_Var_imp_eq_least: \"NS (Var x) t \\<Longrightarrow> t = Var x \\<or> (\\<exists> f. t = Fun f [] \\<and> least f)\"", "lemma kbo_supt_one: \"NS s (t :: ('f, 'v) term) \\<Longrightarrow> S (Fun f (bef @ s # aft)) t\"", "lemma S_supt:\n  assumes supt: \"s \\<rhd> t\"\n  shows \"S s t\"", "lemma NS_supteq:\n  assumes \"s \\<unrhd> t\"\n  shows \"NS s t\"", "lemma NS_all_least:\n  assumes l: \"least f\"\n  shows \"NS t (Fun f [])\"", "lemma not_S_least:\n  assumes l: \"least f\"\n  shows \"\\<not> S (Fun f []) t\"", "lemma NS_least_least:\n  assumes l: \"least f\"\n    and NS: \"NS (Fun f []) t\"\n  shows \"\\<exists> g. t = Fun g [] \\<and> least g\"", "lemma weight_subst: \"weight (t \\<cdot> \\<sigma>) =\n  weight t + sum_mset (image_mset (\\<lambda> x. weight (\\<sigma> x) - w0) (vars_term_ms (SCF t)))\"", "lemma weight_stable_le:\n  assumes ws: \"weight s \\<le> weight t\"\n    and vs: \"vars_term_ms (SCF s) \\<subseteq># vars_term_ms (SCF t)\"\n  shows \"weight (s \\<cdot> \\<sigma>) \\<le> weight (t \\<cdot> \\<sigma>)\"", "lemma weight_stable_lt:\n  assumes ws: \"weight s < weight t\"\n    and vs: \"vars_term_ms (SCF s) \\<subseteq># vars_term_ms (SCF t)\"\n shows \"weight (s \\<cdot> \\<sigma>) < weight (t \\<cdot> \\<sigma>)\"", "lemma kbo_stable:\n  fixes \\<sigma> :: \"('f, 'v) subst\"\n  assumes \"NS s t\"\n  shows \"(S s t \\<longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and> NS (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\" (is \"?P s t\")", "lemma S_subst:\n  \"S s t \\<Longrightarrow> S (s \\<cdot> (\\<sigma> :: ('f, 'v) subst)) (t \\<cdot> \\<sigma>)\"", "lemma NS_subst: \"NS s t \\<Longrightarrow> NS (s \\<cdot> (\\<sigma> :: ('f, 'v) subst)) (t \\<cdot> \\<sigma>)\"", "lemma kbo_trans: \"(S s t \\<longrightarrow> NS t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> S t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> NS t u \\<longrightarrow> NS s u)\"\n  (is \"?P s t u\")", "lemma S_trans: \"S s t \\<Longrightarrow> S t u \\<Longrightarrow> S s u\"", "lemma NS_trans: \"NS s t \\<Longrightarrow> NS t u \\<Longrightarrow> NS s u\"", "lemma NS_S_compat: \"NS s t \\<Longrightarrow> S t u \\<Longrightarrow> S s u\"", "lemma S_NS_compat: \"S s t \\<Longrightarrow> NS t u \\<Longrightarrow> S s u\"", "lemma kbo_strongly_normalizing:\n  fixes s :: \"('f, 'v) term\"\n  shows \"SN_on {(s, t). S s t} {s}\"", "lemma S_SN: \"SN {(x, y). S x y}\"", "lemma ground_SCF [simp]:\n  \"ground (SCF t) = ground t\"", "lemma ground_vars_term_ms: \"ground t \\<Longrightarrow> vars_term_ms t = {#}\"", "lemma S_ground_total:\n  assumes \"funas_term s \\<subseteq> F\" and \"ground s\" and \"funas_term t \\<subseteq> F\" and \"ground t\"\n  shows \"s = t \\<or> S s t \\<or> S t s\""], "translations": [["", "lemma set_scf_list [simp]:\n  assumes \"\\<forall>i < length xs. scf i > 0\"\n  shows \"set (scf_list scf xs) = set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (scf_list scf xs) = set xs", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>i<length xs. 0 < scf i\n\ngoal (1 subgoal):\n 1. set (scf_list scf xs) = set xs", "by (auto simp: scf_list_def set_zip set_conv_nth[of xs])"], ["", "lemma scf_list_subset: \"set (scf_list scf xs) \\<subseteq> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (scf_list scf xs) \\<subseteq> set xs", "by (auto simp: scf_list_def set_zip)"], ["", "lemma scf_list_empty [simp]:\n  \"scf_list scf [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scf_list scf [] = []", "by (auto simp: scf_list_def)"], ["", "lemma scf_list_bef_i_aft [simp]:\n  \"scf_list scf (bef @ i # aft) =\n    scf_list scf bef @ replicate (scf (length bef)) i @\n    scf_list (\\<lambda> i. scf (Suc (length bef + i))) aft\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scf_list scf (bef @ i # aft) =\n    scf_list scf bef @\n    replicate (scf (length bef)) i @\n    scf_list (\\<lambda>i. scf (Suc (length bef + i))) aft", "unfolding scf_list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. concat\n     (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # aft)\n       [0..<length (bef @ i # aft)]) =\n    concat (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n    replicate (scf (length bef)) i @\n    concat\n     (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) aft\n       [0..<length aft])", "proof (induct aft rule: List.rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. concat\n     (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ [i])\n       [0..<length (bef @ [i])]) =\n    concat (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n    replicate (scf (length bef)) i @\n    concat\n     (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) []\n       [0..<length []])\n 2. \\<And>x xs.\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # xs)\n          [0..<length (bef @ i # xs)]) =\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n       replicate (scf (length bef)) i @\n       concat\n        (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) xs\n          [0..<length xs]) \\<Longrightarrow>\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # xs @ [x])\n          [0..<length (bef @ i # xs @ [x])]) =\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n       replicate (scf (length bef)) i @\n       concat\n        (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x)\n          (xs @ [x]) [0..<length (xs @ [x])])", "case (snoc a aft)"], ["proof (state)\nthis:\n  concat\n   (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # aft)\n     [0..<length (bef @ i # aft)]) =\n  concat (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n  replicate (scf (length bef)) i @\n  concat\n   (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) aft\n     [0..<length aft])\n\ngoal (2 subgoals):\n 1. concat\n     (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ [i])\n       [0..<length (bef @ [i])]) =\n    concat (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n    replicate (scf (length bef)) i @\n    concat\n     (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) []\n       [0..<length []])\n 2. \\<And>x xs.\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # xs)\n          [0..<length (bef @ i # xs)]) =\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n       replicate (scf (length bef)) i @\n       concat\n        (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) xs\n          [0..<length xs]) \\<Longrightarrow>\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # xs @ [x])\n          [0..<length (bef @ i # xs @ [x])]) =\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n       replicate (scf (length bef)) i @\n       concat\n        (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x)\n          (xs @ [x]) [0..<length (xs @ [x])])", "define bia where \"bia = bef @ i # aft\""], ["proof (state)\nthis:\n  bia = bef @ i # aft\n\ngoal (2 subgoals):\n 1. concat\n     (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ [i])\n       [0..<length (bef @ [i])]) =\n    concat (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n    replicate (scf (length bef)) i @\n    concat\n     (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) []\n       [0..<length []])\n 2. \\<And>x xs.\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # xs)\n          [0..<length (bef @ i # xs)]) =\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n       replicate (scf (length bef)) i @\n       concat\n        (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) xs\n          [0..<length xs]) \\<Longrightarrow>\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # xs @ [x])\n          [0..<length (bef @ i # xs @ [x])]) =\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n       replicate (scf (length bef)) i @\n       concat\n        (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x)\n          (xs @ [x]) [0..<length (xs @ [x])])", "have bia: \"bef @ i # aft @ [a] = bia @ [a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bef @ i # aft @ [a] = bia @ [a]", "by (simp add: bia_def)"], ["proof (state)\nthis:\n  bef @ i # aft @ [a] = bia @ [a]\n\ngoal (2 subgoals):\n 1. concat\n     (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ [i])\n       [0..<length (bef @ [i])]) =\n    concat (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n    replicate (scf (length bef)) i @\n    concat\n     (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) []\n       [0..<length []])\n 2. \\<And>x xs.\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # xs)\n          [0..<length (bef @ i # xs)]) =\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n       replicate (scf (length bef)) i @\n       concat\n        (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) xs\n          [0..<length xs]) \\<Longrightarrow>\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # xs @ [x])\n          [0..<length (bef @ i # xs @ [x])]) =\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n       replicate (scf (length bef)) i @\n       concat\n        (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x)\n          (xs @ [x]) [0..<length (xs @ [x])])", "have zip: \"zip (bia @ [a]) [0..<length (bia @ [a])]\n   = zip bia [0..<length bia] @ [(a, length bia)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zip (bia @ [a]) [0..<length (bia @ [a])] =\n    zip bia [0..<length bia] @ [(a, length bia)]", "by simp"], ["proof (state)\nthis:\n  zip (bia @ [a]) [0..<length (bia @ [a])] =\n  zip bia [0..<length bia] @ [(a, length bia)]\n\ngoal (2 subgoals):\n 1. concat\n     (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ [i])\n       [0..<length (bef @ [i])]) =\n    concat (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n    replicate (scf (length bef)) i @\n    concat\n     (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) []\n       [0..<length []])\n 2. \\<And>x xs.\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # xs)\n          [0..<length (bef @ i # xs)]) =\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n       replicate (scf (length bef)) i @\n       concat\n        (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) xs\n          [0..<length xs]) \\<Longrightarrow>\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # xs @ [x])\n          [0..<length (bef @ i # xs @ [x])]) =\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n       replicate (scf (length bef)) i @\n       concat\n        (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x)\n          (xs @ [x]) [0..<length (xs @ [x])])", "have concat:\n    \"concat (map (\\<lambda>(x, i). replicate (scf i) x) (zip bia [0..<length bia] @ [(a, length bia)])) =\n      concat (map (\\<lambda>(x, i). replicate (scf i) x) (zip bia [0..<length bia])) @\n      replicate (scf (length bia)) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. concat\n     (map (\\<lambda>(x, i). replicate (scf i) x)\n       (zip bia [0..<length bia] @ [(a, length bia)])) =\n    concat (map2 (\\<lambda>x i. replicate (scf i) x) bia [0..<length bia]) @\n    replicate (scf (length bia)) a", "by simp"], ["proof (state)\nthis:\n  concat\n   (map (\\<lambda>(x, i). replicate (scf i) x)\n     (zip bia [0..<length bia] @ [(a, length bia)])) =\n  concat (map2 (\\<lambda>x i. replicate (scf i) x) bia [0..<length bia]) @\n  replicate (scf (length bia)) a\n\ngoal (2 subgoals):\n 1. concat\n     (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ [i])\n       [0..<length (bef @ [i])]) =\n    concat (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n    replicate (scf (length bef)) i @\n    concat\n     (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) []\n       [0..<length []])\n 2. \\<And>x xs.\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # xs)\n          [0..<length (bef @ i # xs)]) =\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n       replicate (scf (length bef)) i @\n       concat\n        (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) xs\n          [0..<length xs]) \\<Longrightarrow>\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # xs @ [x])\n          [0..<length (bef @ i # xs @ [x])]) =\n       concat\n        (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n       replicate (scf (length bef)) i @\n       concat\n        (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x)\n          (xs @ [x]) [0..<length (xs @ [x])])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. concat\n     (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # aft @ [a])\n       [0..<length (bef @ i # aft @ [a])]) =\n    concat (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n    replicate (scf (length bef)) i @\n    concat\n     (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x)\n       (aft @ [a]) [0..<length (aft @ [a])])", "unfolding bia zip concat"], ["proof (prove)\ngoal (1 subgoal):\n 1. concat (map2 (\\<lambda>x i. replicate (scf i) x) bia [0..<length bia]) @\n    replicate (scf (length bia)) a =\n    concat (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n    replicate (scf (length bef)) i @\n    concat\n     (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x)\n       (aft @ [a]) [0..<length (aft @ [a])])", "unfolding bia_def snoc"], ["proof (prove)\ngoal (1 subgoal):\n 1. (concat\n      (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n     replicate (scf (length bef)) i @\n     concat\n      (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) aft\n        [0..<length aft])) @\n    replicate (scf (length (bef @ i # aft))) a =\n    concat (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n    replicate (scf (length bef)) i @\n    concat\n     (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x)\n       (aft @ [a]) [0..<length (aft @ [a])])", "by simp"], ["proof (state)\nthis:\n  concat\n   (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ i # aft @ [a])\n     [0..<length (bef @ i # aft @ [a])]) =\n  concat (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n  replicate (scf (length bef)) i @\n  concat\n   (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x)\n     (aft @ [a]) [0..<length (aft @ [a])])\n\ngoal (1 subgoal):\n 1. concat\n     (map2 (\\<lambda>x i. replicate (scf i) x) (bef @ [i])\n       [0..<length (bef @ [i])]) =\n    concat (map2 (\\<lambda>x i. replicate (scf i) x) bef [0..<length bef]) @\n    replicate (scf (length bef)) i @\n    concat\n     (map2 (\\<lambda>x i. replicate (scf (Suc (length bef + i))) x) []\n       [0..<length []])", "qed simp"], ["", "lemma scf_list_map [simp]:\n  \"scf_list scf (map f xs) = map f (scf_list scf xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scf_list scf (map f xs) = map f (scf_list scf xs)", "by (induct xs rule: List.rev_induct) (auto simp: scf_list_def)"], ["", "text \\<open>\n  The function @{term scf_term} replicates each argument a number of times according to its\n  subterm coefficient function.\n\\<close>"], ["", "fun scf_term :: \"('f \\<times> nat \\<Rightarrow> nat \\<Rightarrow> nat) \\<Rightarrow> ('f, 'v) term \\<Rightarrow> ('f, 'v) term\"\n  where\n    \"scf_term scf (Var x) = (Var x)\" |\n    \"scf_term scf (Fun f ts) = Fun f (scf_list (scf (f, length ts)) (map (scf_term scf) ts))\""], ["", "lemma vars_term_scf_subset:\n  \"vars_term (scf_term scf s) \\<subseteq> vars_term s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_term (scf_term scf s) \\<subseteq> vars_term s", "proof (induct s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. vars_term (scf_term scf (Var x)) \\<subseteq> vars_term (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           vars_term (scf_term scf x2a)\n           \\<subseteq> vars_term x2a) \\<Longrightarrow>\n       vars_term (scf_term scf (Fun x1a x2))\n       \\<subseteq> vars_term (Fun x1a x2)", "case (Fun f ss)"], ["proof (state)\nthis:\n  ?x2a \\<in> set ss \\<Longrightarrow>\n  vars_term (scf_term scf ?x2a) \\<subseteq> vars_term ?x2a\n\ngoal (2 subgoals):\n 1. \\<And>x. vars_term (scf_term scf (Var x)) \\<subseteq> vars_term (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           vars_term (scf_term scf x2a)\n           \\<subseteq> vars_term x2a) \\<Longrightarrow>\n       vars_term (scf_term scf (Fun x1a x2))\n       \\<subseteq> vars_term (Fun x1a x2)", "have \"vars_term (scf_term scf (Fun f ss)) =\n    (\\<Union>x\\<in>set (scf_list (scf (f, length ss)) ss). vars_term (scf_term scf x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_term (scf_term scf (Fun f ss)) =\n    (\\<Union>x\\<in>set (scf_list (scf (f, length ss)) ss).\n        vars_term (scf_term scf x))", "by auto"], ["proof (state)\nthis:\n  vars_term (scf_term scf (Fun f ss)) =\n  (\\<Union>x\\<in>set (scf_list (scf (f, length ss)) ss).\n      vars_term (scf_term scf x))\n\ngoal (2 subgoals):\n 1. \\<And>x. vars_term (scf_term scf (Var x)) \\<subseteq> vars_term (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           vars_term (scf_term scf x2a)\n           \\<subseteq> vars_term x2a) \\<Longrightarrow>\n       vars_term (scf_term scf (Fun x1a x2))\n       \\<subseteq> vars_term (Fun x1a x2)", "also"], ["proof (state)\nthis:\n  vars_term (scf_term scf (Fun f ss)) =\n  (\\<Union>x\\<in>set (scf_list (scf (f, length ss)) ss).\n      vars_term (scf_term scf x))\n\ngoal (2 subgoals):\n 1. \\<And>x. vars_term (scf_term scf (Var x)) \\<subseteq> vars_term (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           vars_term (scf_term scf x2a)\n           \\<subseteq> vars_term x2a) \\<Longrightarrow>\n       vars_term (scf_term scf (Fun x1a x2))\n       \\<subseteq> vars_term (Fun x1a x2)", "have \"\\<dots> \\<subseteq> (\\<Union>x\\<in>set ss. vars_term (scf_term scf x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>set (scf_list (scf (f, length ss)) ss).\n        vars_term (scf_term scf x))\n    \\<subseteq> (\\<Union>x\\<in>set ss. vars_term (scf_term scf x))", "using scf_list_subset [of _ ss]"], ["proof (prove)\nusing this:\n  set (scf_list ?scf ss) \\<subseteq> set ss\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>set (scf_list (scf (f, length ss)) ss).\n        vars_term (scf_term scf x))\n    \\<subseteq> (\\<Union>x\\<in>set ss. vars_term (scf_term scf x))", "by blast"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>set (scf_list (scf (f, length ss)) ss).\n      vars_term (scf_term scf x))\n  \\<subseteq> (\\<Union>x\\<in>set ss. vars_term (scf_term scf x))\n\ngoal (2 subgoals):\n 1. \\<And>x. vars_term (scf_term scf (Var x)) \\<subseteq> vars_term (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           vars_term (scf_term scf x2a)\n           \\<subseteq> vars_term x2a) \\<Longrightarrow>\n       vars_term (scf_term scf (Fun x1a x2))\n       \\<subseteq> vars_term (Fun x1a x2)", "also"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>set (scf_list (scf (f, length ss)) ss).\n      vars_term (scf_term scf x))\n  \\<subseteq> (\\<Union>x\\<in>set ss. vars_term (scf_term scf x))\n\ngoal (2 subgoals):\n 1. \\<And>x. vars_term (scf_term scf (Var x)) \\<subseteq> vars_term (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           vars_term (scf_term scf x2a)\n           \\<subseteq> vars_term x2a) \\<Longrightarrow>\n       vars_term (scf_term scf (Fun x1a x2))\n       \\<subseteq> vars_term (Fun x1a x2)", "have \"\\<dots> \\<subseteq> (\\<Union>x\\<in>set ss. vars_term x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>set ss. vars_term (scf_term scf x))\n    \\<subseteq> \\<Union> (vars_term ` set ss)", "using Fun"], ["proof (prove)\nusing this:\n  ?x2a \\<in> set ss \\<Longrightarrow>\n  vars_term (scf_term scf ?x2a) \\<subseteq> vars_term ?x2a\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>set ss. vars_term (scf_term scf x))\n    \\<subseteq> \\<Union> (vars_term ` set ss)", "by auto"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>set ss. vars_term (scf_term scf x))\n  \\<subseteq> \\<Union> (vars_term ` set ss)\n\ngoal (2 subgoals):\n 1. \\<And>x. vars_term (scf_term scf (Var x)) \\<subseteq> vars_term (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           vars_term (scf_term scf x2a)\n           \\<subseteq> vars_term x2a) \\<Longrightarrow>\n       vars_term (scf_term scf (Fun x1a x2))\n       \\<subseteq> vars_term (Fun x1a x2)", "finally"], ["proof (chain)\npicking this:\n  vars_term (scf_term scf (Fun f ss))\n  \\<subseteq> \\<Union> (vars_term ` set ss)", "show ?case"], ["proof (prove)\nusing this:\n  vars_term (scf_term scf (Fun f ss))\n  \\<subseteq> \\<Union> (vars_term ` set ss)\n\ngoal (1 subgoal):\n 1. vars_term (scf_term scf (Fun f ss)) \\<subseteq> vars_term (Fun f ss)", "by auto"], ["proof (state)\nthis:\n  vars_term (scf_term scf (Fun f ss)) \\<subseteq> vars_term (Fun f ss)\n\ngoal (1 subgoal):\n 1. \\<And>x. vars_term (scf_term scf (Var x)) \\<subseteq> vars_term (Var x)", "qed auto"], ["", "lemma scf_term_subst:\n  \"scf_term scf (t \\<cdot> \\<sigma>) = scf_term scf t \\<cdot> (\\<lambda> x. scf_term scf (\\<sigma> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scf_term scf (t \\<cdot> \\<sigma>) =\n    scf_term scf t \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))", "proof (induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       scf_term scf (Var x \\<cdot> \\<sigma>) =\n       scf_term scf (Var x) \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           scf_term scf (x2a \\<cdot> \\<sigma>) =\n           scf_term scf x2a \\<cdot>\n           (\\<lambda>x. scf_term scf (\\<sigma> x))) \\<Longrightarrow>\n       scf_term scf (Fun x1a x2 \\<cdot> \\<sigma>) =\n       scf_term scf (Fun x1a x2) \\<cdot>\n       (\\<lambda>x. scf_term scf (\\<sigma> x))", "case (Fun f ts)"], ["proof (state)\nthis:\n  ?x2a \\<in> set ts \\<Longrightarrow>\n  scf_term scf (?x2a \\<cdot> \\<sigma>) =\n  scf_term scf ?x2a \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       scf_term scf (Var x \\<cdot> \\<sigma>) =\n       scf_term scf (Var x) \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           scf_term scf (x2a \\<cdot> \\<sigma>) =\n           scf_term scf x2a \\<cdot>\n           (\\<lambda>x. scf_term scf (\\<sigma> x))) \\<Longrightarrow>\n       scf_term scf (Fun x1a x2 \\<cdot> \\<sigma>) =\n       scf_term scf (Fun x1a x2) \\<cdot>\n       (\\<lambda>x. scf_term scf (\\<sigma> x))", "{"], ["proof (state)\nthis:\n  ?x2a \\<in> set ts \\<Longrightarrow>\n  scf_term scf (?x2a \\<cdot> \\<sigma>) =\n  scf_term scf ?x2a \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       scf_term scf (Var x \\<cdot> \\<sigma>) =\n       scf_term scf (Var x) \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           scf_term scf (x2a \\<cdot> \\<sigma>) =\n           scf_term scf x2a \\<cdot>\n           (\\<lambda>x. scf_term scf (\\<sigma> x))) \\<Longrightarrow>\n       scf_term scf (Fun x1a x2 \\<cdot> \\<sigma>) =\n       scf_term scf (Fun x1a x2) \\<cdot>\n       (\\<lambda>x. scf_term scf (\\<sigma> x))", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       scf_term scf (Var x \\<cdot> \\<sigma>) =\n       scf_term scf (Var x) \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           scf_term scf (x2a \\<cdot> \\<sigma>) =\n           scf_term scf x2a \\<cdot>\n           (\\<lambda>x. scf_term scf (\\<sigma> x))) \\<Longrightarrow>\n       scf_term scf (Fun x1a x2 \\<cdot> \\<sigma>) =\n       scf_term scf (Fun x1a x2) \\<cdot>\n       (\\<lambda>x. scf_term scf (\\<sigma> x))", "assume \"t \\<in> set (scf_list (scf (f, length ts)) ts)\""], ["proof (state)\nthis:\n  t \\<in> set (scf_list (scf (f, length ts)) ts)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       scf_term scf (Var x \\<cdot> \\<sigma>) =\n       scf_term scf (Var x) \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           scf_term scf (x2a \\<cdot> \\<sigma>) =\n           scf_term scf x2a \\<cdot>\n           (\\<lambda>x. scf_term scf (\\<sigma> x))) \\<Longrightarrow>\n       scf_term scf (Fun x1a x2 \\<cdot> \\<sigma>) =\n       scf_term scf (Fun x1a x2) \\<cdot>\n       (\\<lambda>x. scf_term scf (\\<sigma> x))", "with scf_list_subset [of _ ts]"], ["proof (chain)\npicking this:\n  set (scf_list ?scf ts) \\<subseteq> set ts\n  t \\<in> set (scf_list (scf (f, length ts)) ts)", "have \"t \\<in> set ts\""], ["proof (prove)\nusing this:\n  set (scf_list ?scf ts) \\<subseteq> set ts\n  t \\<in> set (scf_list (scf (f, length ts)) ts)\n\ngoal (1 subgoal):\n 1. t \\<in> set ts", "by auto"], ["proof (state)\nthis:\n  t \\<in> set ts\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       scf_term scf (Var x \\<cdot> \\<sigma>) =\n       scf_term scf (Var x) \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           scf_term scf (x2a \\<cdot> \\<sigma>) =\n           scf_term scf x2a \\<cdot>\n           (\\<lambda>x. scf_term scf (\\<sigma> x))) \\<Longrightarrow>\n       scf_term scf (Fun x1a x2 \\<cdot> \\<sigma>) =\n       scf_term scf (Fun x1a x2) \\<cdot>\n       (\\<lambda>x. scf_term scf (\\<sigma> x))", "then"], ["proof (chain)\npicking this:\n  t \\<in> set ts", "have \"scf_term scf (t \\<cdot> \\<sigma>) = scf_term scf t \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))\""], ["proof (prove)\nusing this:\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. scf_term scf (t \\<cdot> \\<sigma>) =\n    scf_term scf t \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))", "by (rule Fun)"], ["proof (state)\nthis:\n  scf_term scf (t \\<cdot> \\<sigma>) =\n  scf_term scf t \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       scf_term scf (Var x \\<cdot> \\<sigma>) =\n       scf_term scf (Var x) \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           scf_term scf (x2a \\<cdot> \\<sigma>) =\n           scf_term scf x2a \\<cdot>\n           (\\<lambda>x. scf_term scf (\\<sigma> x))) \\<Longrightarrow>\n       scf_term scf (Fun x1a x2 \\<cdot> \\<sigma>) =\n       scf_term scf (Fun x1a x2) \\<cdot>\n       (\\<lambda>x. scf_term scf (\\<sigma> x))", "}"], ["proof (state)\nthis:\n  ?ta2 \\<in> set (scf_list (scf (f, length ts)) ts) \\<Longrightarrow>\n  scf_term scf (?ta2 \\<cdot> \\<sigma>) =\n  scf_term scf ?ta2 \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       scf_term scf (Var x \\<cdot> \\<sigma>) =\n       scf_term scf (Var x) \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           scf_term scf (x2a \\<cdot> \\<sigma>) =\n           scf_term scf x2a \\<cdot>\n           (\\<lambda>x. scf_term scf (\\<sigma> x))) \\<Longrightarrow>\n       scf_term scf (Fun x1a x2 \\<cdot> \\<sigma>) =\n       scf_term scf (Fun x1a x2) \\<cdot>\n       (\\<lambda>x. scf_term scf (\\<sigma> x))", "then"], ["proof (chain)\npicking this:\n  ?ta2 \\<in> set (scf_list (scf (f, length ts)) ts) \\<Longrightarrow>\n  scf_term scf (?ta2 \\<cdot> \\<sigma>) =\n  scf_term scf ?ta2 \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))", "show ?case"], ["proof (prove)\nusing this:\n  ?ta2 \\<in> set (scf_list (scf (f, length ts)) ts) \\<Longrightarrow>\n  scf_term scf (?ta2 \\<cdot> \\<sigma>) =\n  scf_term scf ?ta2 \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))\n\ngoal (1 subgoal):\n 1. scf_term scf (Fun f ts \\<cdot> \\<sigma>) =\n    scf_term scf (Fun f ts) \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))", "by auto"], ["proof (state)\nthis:\n  scf_term scf (Fun f ts \\<cdot> \\<sigma>) =\n  scf_term scf (Fun f ts) \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       scf_term scf (Var x \\<cdot> \\<sigma>) =\n       scf_term scf (Var x) \\<cdot> (\\<lambda>x. scf_term scf (\\<sigma> x))", "qed auto"], ["", "subsection \\<open>Weight Functions\\<close>"], ["", "locale weight_fun =\n  fixes w :: \"'f \\<times> nat \\<Rightarrow> nat\"\n    and w0 :: nat\n    and scf :: \"'f \\<times> nat \\<Rightarrow> nat \\<Rightarrow> nat\"\nbegin"], ["", "text \\<open>\n  The \\<^emph>\\<open>weight\\<close> of a term is computed recursively, where variables have weight @{term w0}\n  and the weight of a compound term is computed by adding the weight of its root symbol\n  @{term \"w (f, n)\"} to the weighted sum where weights of arguments are multiplied\n  according to their subterm coefficients.\n\\<close>"], ["", "fun weight :: \"('f, 'v) term \\<Rightarrow> nat\"\n  where\n    \"weight (Var x) = w0\" |\n    \"weight (Fun f ts) =\n    (let n = length ts; scff = scf (f, n) in\n    w (f, n) + sum_list (map (\\<lambda> (ti, i). weight ti * scff i) (zip ts [0 ..< n])))\""], ["", "text \\<open>\n  Alternatively, we can replicate arguments via @{const scf_list}.\n  The advantage is that then both @{const weight} and @{const scf_term} are defined\n  via @{const scf_list}.\n\\<close>"], ["", "lemma weight_simp [simp]:\n  \"weight (Fun f ts) = w (f, length ts) + sum_list (map weight (scf_list (scf (f, length ts)) ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (Fun f ts) =\n    w (f, length ts) +\n    sum_list (map weight (scf_list (scf (f, length ts)) ts))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. weight (Fun f ts) =\n    w (f, length ts) +\n    sum_list (map weight (scf_list (scf (f, length ts)) ts))", "define scff where \"scff = (scf (f, length ts) :: nat \\<Rightarrow> nat)\""], ["proof (state)\nthis:\n  scff = scf (f, length ts)\n\ngoal (1 subgoal):\n 1. weight (Fun f ts) =\n    w (f, length ts) +\n    sum_list (map weight (scf_list (scf (f, length ts)) ts))", "have \"(\\<Sum>(ti, i) \\<leftarrow> zip ts [0..<length ts]. weight ti * scff i) =\n   sum_list (map weight (scf_list scff ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map2 (\\<lambda>ti i. weight ti * scff i) ts [0..<length ts]) =\n    sum_list (map weight (scf_list scff ts))", "proof (induct ts rule: List.rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. sum_list (map2 (\\<lambda>ti i. weight ti * scff i) [] [0..<length []]) =\n    sum_list (map weight (scf_list scff []))\n 2. \\<And>x xs.\n       sum_list\n        (map2 (\\<lambda>ti i. weight ti * scff i) xs [0..<length xs]) =\n       sum_list (map weight (scf_list scff xs)) \\<Longrightarrow>\n       sum_list\n        (map2 (\\<lambda>ti i. weight ti * scff i) (xs @ [x])\n          [0..<length (xs @ [x])]) =\n       sum_list (map weight (scf_list scff (xs @ [x])))", "case (snoc t ts)"], ["proof (state)\nthis:\n  sum_list (map2 (\\<lambda>ti i. weight ti * scff i) ts [0..<length ts]) =\n  sum_list (map weight (scf_list scff ts))\n\ngoal (2 subgoals):\n 1. sum_list (map2 (\\<lambda>ti i. weight ti * scff i) [] [0..<length []]) =\n    sum_list (map weight (scf_list scff []))\n 2. \\<And>x xs.\n       sum_list\n        (map2 (\\<lambda>ti i. weight ti * scff i) xs [0..<length xs]) =\n       sum_list (map weight (scf_list scff xs)) \\<Longrightarrow>\n       sum_list\n        (map2 (\\<lambda>ti i. weight ti * scff i) (xs @ [x])\n          [0..<length (xs @ [x])]) =\n       sum_list (map weight (scf_list scff (xs @ [x])))", "moreover"], ["proof (state)\nthis:\n  sum_list (map2 (\\<lambda>ti i. weight ti * scff i) ts [0..<length ts]) =\n  sum_list (map weight (scf_list scff ts))\n\ngoal (2 subgoals):\n 1. sum_list (map2 (\\<lambda>ti i. weight ti * scff i) [] [0..<length []]) =\n    sum_list (map weight (scf_list scff []))\n 2. \\<And>x xs.\n       sum_list\n        (map2 (\\<lambda>ti i. weight ti * scff i) xs [0..<length xs]) =\n       sum_list (map weight (scf_list scff xs)) \\<Longrightarrow>\n       sum_list\n        (map2 (\\<lambda>ti i. weight ti * scff i) (xs @ [x])\n          [0..<length (xs @ [x])]) =\n       sum_list (map weight (scf_list scff (xs @ [x])))", "{"], ["proof (state)\nthis:\n  sum_list (map2 (\\<lambda>ti i. weight ti * scff i) ts [0..<length ts]) =\n  sum_list (map weight (scf_list scff ts))\n\ngoal (2 subgoals):\n 1. sum_list (map2 (\\<lambda>ti i. weight ti * scff i) [] [0..<length []]) =\n    sum_list (map weight (scf_list scff []))\n 2. \\<And>x xs.\n       sum_list\n        (map2 (\\<lambda>ti i. weight ti * scff i) xs [0..<length xs]) =\n       sum_list (map weight (scf_list scff xs)) \\<Longrightarrow>\n       sum_list\n        (map2 (\\<lambda>ti i. weight ti * scff i) (xs @ [x])\n          [0..<length (xs @ [x])]) =\n       sum_list (map weight (scf_list scff (xs @ [x])))", "fix n"], ["proof (state)\ngoal (2 subgoals):\n 1. sum_list (map2 (\\<lambda>ti i. weight ti * scff i) [] [0..<length []]) =\n    sum_list (map weight (scf_list scff []))\n 2. \\<And>x xs.\n       sum_list\n        (map2 (\\<lambda>ti i. weight ti * scff i) xs [0..<length xs]) =\n       sum_list (map weight (scf_list scff xs)) \\<Longrightarrow>\n       sum_list\n        (map2 (\\<lambda>ti i. weight ti * scff i) (xs @ [x])\n          [0..<length (xs @ [x])]) =\n       sum_list (map weight (scf_list scff (xs @ [x])))", "have \"sum_list (replicate n (weight t)) = n * weight t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (replicate n (weight t)) = n * weight t", "by (induct n) auto"], ["proof (state)\nthis:\n  sum_list (replicate n (weight t)) = n * weight t\n\ngoal (2 subgoals):\n 1. sum_list (map2 (\\<lambda>ti i. weight ti * scff i) [] [0..<length []]) =\n    sum_list (map weight (scf_list scff []))\n 2. \\<And>x xs.\n       sum_list\n        (map2 (\\<lambda>ti i. weight ti * scff i) xs [0..<length xs]) =\n       sum_list (map weight (scf_list scff xs)) \\<Longrightarrow>\n       sum_list\n        (map2 (\\<lambda>ti i. weight ti * scff i) (xs @ [x])\n          [0..<length (xs @ [x])]) =\n       sum_list (map weight (scf_list scff (xs @ [x])))", "}"], ["proof (state)\nthis:\n  sum_list (replicate ?n7 (weight t)) = ?n7 * weight t\n\ngoal (2 subgoals):\n 1. sum_list (map2 (\\<lambda>ti i. weight ti * scff i) [] [0..<length []]) =\n    sum_list (map weight (scf_list scff []))\n 2. \\<And>x xs.\n       sum_list\n        (map2 (\\<lambda>ti i. weight ti * scff i) xs [0..<length xs]) =\n       sum_list (map weight (scf_list scff xs)) \\<Longrightarrow>\n       sum_list\n        (map2 (\\<lambda>ti i. weight ti * scff i) (xs @ [x])\n          [0..<length (xs @ [x])]) =\n       sum_list (map weight (scf_list scff (xs @ [x])))", "ultimately"], ["proof (chain)\npicking this:\n  sum_list (map2 (\\<lambda>ti i. weight ti * scff i) ts [0..<length ts]) =\n  sum_list (map weight (scf_list scff ts))\n  sum_list (replicate ?n7 (weight t)) = ?n7 * weight t", "show ?case"], ["proof (prove)\nusing this:\n  sum_list (map2 (\\<lambda>ti i. weight ti * scff i) ts [0..<length ts]) =\n  sum_list (map weight (scf_list scff ts))\n  sum_list (replicate ?n7 (weight t)) = ?n7 * weight t\n\ngoal (1 subgoal):\n 1. sum_list\n     (map2 (\\<lambda>ti i. weight ti * scff i) (ts @ [t])\n       [0..<length (ts @ [t])]) =\n    sum_list (map weight (scf_list scff (ts @ [t])))", "by (simp add: scf_list_def)"], ["proof (state)\nthis:\n  sum_list\n   (map2 (\\<lambda>ti i. weight ti * scff i) (ts @ [t])\n     [0..<length (ts @ [t])]) =\n  sum_list (map weight (scf_list scff (ts @ [t])))\n\ngoal (1 subgoal):\n 1. sum_list (map2 (\\<lambda>ti i. weight ti * scff i) [] [0..<length []]) =\n    sum_list (map weight (scf_list scff []))", "qed simp"], ["proof (state)\nthis:\n  sum_list (map2 (\\<lambda>ti i. weight ti * scff i) ts [0..<length ts]) =\n  sum_list (map weight (scf_list scff ts))\n\ngoal (1 subgoal):\n 1. weight (Fun f ts) =\n    w (f, length ts) +\n    sum_list (map weight (scf_list (scf (f, length ts)) ts))", "then"], ["proof (chain)\npicking this:\n  sum_list (map2 (\\<lambda>ti i. weight ti * scff i) ts [0..<length ts]) =\n  sum_list (map weight (scf_list scff ts))", "show ?thesis"], ["proof (prove)\nusing this:\n  sum_list (map2 (\\<lambda>ti i. weight ti * scff i) ts [0..<length ts]) =\n  sum_list (map weight (scf_list scff ts))\n\ngoal (1 subgoal):\n 1. weight (Fun f ts) =\n    w (f, length ts) +\n    sum_list (map weight (scf_list (scf (f, length ts)) ts))", "by (simp add: Let_def scff_def)"], ["proof (state)\nthis:\n  weight (Fun f ts) =\n  w (f, length ts) +\n  sum_list (map weight (scf_list (scf (f, length ts)) ts))\n\ngoal:\nNo subgoals!", "qed"], ["", "declare weight.simps(2)[simp del]"], ["", "abbreviation \"SCF \\<equiv> scf_term scf\""], ["", "lemma sum_list_scf_list:\n  assumes \"\\<And> i. i < length ts \\<Longrightarrow> f i > 0\"\n  shows \"sum_list (map weight ts) \\<le> sum_list (map weight (scf_list f ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map weight ts) \\<le> sum_list (map weight (scf_list f ts))", "using assms"], ["proof (prove)\nusing this:\n  ?i6 < length ts \\<Longrightarrow> 0 < f ?i6\n\ngoal (1 subgoal):\n 1. sum_list (map weight ts) \\<le> sum_list (map weight (scf_list f ts))", "unfolding scf_list_def"], ["proof (prove)\nusing this:\n  ?i6 < length ts \\<Longrightarrow> 0 < f ?i6\n\ngoal (1 subgoal):\n 1. sum_list (map weight ts)\n    \\<le> sum_list\n           (map weight\n             (concat\n               (map2 (\\<lambda>x i. replicate (f i) x) ts [0..<length ts])))", "proof (induct ts rule: List.rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>i. i < length [] \\<Longrightarrow> 0 < f i) \\<Longrightarrow>\n    sum_list (map weight [])\n    \\<le> sum_list\n           (map weight\n             (concat\n               (map2 (\\<lambda>x i. replicate (f i) x) [] [0..<length []])))\n 2. \\<And>x xs.\n       \\<lbrakk>(\\<And>i.\n                    i < length xs \\<Longrightarrow>\n                    0 < f i) \\<Longrightarrow>\n                sum_list (map weight xs)\n                \\<le> sum_list\n                       (map weight\n                         (concat\n                           (map2 (\\<lambda>x i. replicate (f i) x) xs\n                             [0..<length xs])));\n        \\<And>i. i < length (xs @ [x]) \\<Longrightarrow> 0 < f i\\<rbrakk>\n       \\<Longrightarrow> sum_list (map weight (xs @ [x]))\n                         \\<le> sum_list\n                                (map weight\n                                  (concat\n                                    (map2 (\\<lambda>x i. replicate (f i) x)\n(xs @ [x]) [0..<length (xs @ [x])])))", "case (snoc t ts)"], ["proof (state)\nthis:\n  (\\<And>i. i < length ts \\<Longrightarrow> 0 < f i) \\<Longrightarrow>\n  sum_list (map weight ts)\n  \\<le> sum_list\n         (map weight\n           (concat\n             (map2 (\\<lambda>x i. replicate (f i) x) ts [0..<length ts])))\n  ?i6 < length (ts @ [t]) \\<Longrightarrow> 0 < f ?i6\n\ngoal (2 subgoals):\n 1. (\\<And>i. i < length [] \\<Longrightarrow> 0 < f i) \\<Longrightarrow>\n    sum_list (map weight [])\n    \\<le> sum_list\n           (map weight\n             (concat\n               (map2 (\\<lambda>x i. replicate (f i) x) [] [0..<length []])))\n 2. \\<And>x xs.\n       \\<lbrakk>(\\<And>i.\n                    i < length xs \\<Longrightarrow>\n                    0 < f i) \\<Longrightarrow>\n                sum_list (map weight xs)\n                \\<le> sum_list\n                       (map weight\n                         (concat\n                           (map2 (\\<lambda>x i. replicate (f i) x) xs\n                             [0..<length xs])));\n        \\<And>i. i < length (xs @ [x]) \\<Longrightarrow> 0 < f i\\<rbrakk>\n       \\<Longrightarrow> sum_list (map weight (xs @ [x]))\n                         \\<le> sum_list\n                                (map weight\n                                  (concat\n                                    (map2 (\\<lambda>x i. replicate (f i) x)\n(xs @ [x]) [0..<length (xs @ [x])])))", "have \"sum_list (map weight ts) \\<le>\n    sum_list (map weight (concat (map (\\<lambda>(x, i). replicate (f i) x) (zip ts [0..<length ts]))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map weight ts)\n    \\<le> sum_list\n           (map weight\n             (concat\n               (map2 (\\<lambda>x i. replicate (f i) x) ts [0..<length ts])))", "by (auto intro!: snoc)"], ["proof (state)\nthis:\n  sum_list (map weight ts)\n  \\<le> sum_list\n         (map weight\n           (concat\n             (map2 (\\<lambda>x i. replicate (f i) x) ts [0..<length ts])))\n\ngoal (2 subgoals):\n 1. (\\<And>i. i < length [] \\<Longrightarrow> 0 < f i) \\<Longrightarrow>\n    sum_list (map weight [])\n    \\<le> sum_list\n           (map weight\n             (concat\n               (map2 (\\<lambda>x i. replicate (f i) x) [] [0..<length []])))\n 2. \\<And>x xs.\n       \\<lbrakk>(\\<And>i.\n                    i < length xs \\<Longrightarrow>\n                    0 < f i) \\<Longrightarrow>\n                sum_list (map weight xs)\n                \\<le> sum_list\n                       (map weight\n                         (concat\n                           (map2 (\\<lambda>x i. replicate (f i) x) xs\n                             [0..<length xs])));\n        \\<And>i. i < length (xs @ [x]) \\<Longrightarrow> 0 < f i\\<rbrakk>\n       \\<Longrightarrow> sum_list (map weight (xs @ [x]))\n                         \\<le> sum_list\n                                (map weight\n                                  (concat\n                                    (map2 (\\<lambda>x i. replicate (f i) x)\n(xs @ [x]) [0..<length (xs @ [x])])))", "moreover"], ["proof (state)\nthis:\n  sum_list (map weight ts)\n  \\<le> sum_list\n         (map weight\n           (concat\n             (map2 (\\<lambda>x i. replicate (f i) x) ts [0..<length ts])))\n\ngoal (2 subgoals):\n 1. (\\<And>i. i < length [] \\<Longrightarrow> 0 < f i) \\<Longrightarrow>\n    sum_list (map weight [])\n    \\<le> sum_list\n           (map weight\n             (concat\n               (map2 (\\<lambda>x i. replicate (f i) x) [] [0..<length []])))\n 2. \\<And>x xs.\n       \\<lbrakk>(\\<And>i.\n                    i < length xs \\<Longrightarrow>\n                    0 < f i) \\<Longrightarrow>\n                sum_list (map weight xs)\n                \\<le> sum_list\n                       (map weight\n                         (concat\n                           (map2 (\\<lambda>x i. replicate (f i) x) xs\n                             [0..<length xs])));\n        \\<And>i. i < length (xs @ [x]) \\<Longrightarrow> 0 < f i\\<rbrakk>\n       \\<Longrightarrow> sum_list (map weight (xs @ [x]))\n                         \\<le> sum_list\n                                (map weight\n                                  (concat\n                                    (map2 (\\<lambda>x i. replicate (f i) x)\n(xs @ [x]) [0..<length (xs @ [x])])))", "from snoc(2) [of \"length ts\"]"], ["proof (chain)\npicking this:\n  length ts < length (ts @ [t]) \\<Longrightarrow> 0 < f (length ts)", "obtain n where \"f (length ts) = Suc n\""], ["proof (prove)\nusing this:\n  length ts < length (ts @ [t]) \\<Longrightarrow> 0 < f (length ts)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        f (length ts) = Suc n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: lessE)"], ["proof (state)\nthis:\n  f (length ts) = Suc n\n\ngoal (2 subgoals):\n 1. (\\<And>i. i < length [] \\<Longrightarrow> 0 < f i) \\<Longrightarrow>\n    sum_list (map weight [])\n    \\<le> sum_list\n           (map weight\n             (concat\n               (map2 (\\<lambda>x i. replicate (f i) x) [] [0..<length []])))\n 2. \\<And>x xs.\n       \\<lbrakk>(\\<And>i.\n                    i < length xs \\<Longrightarrow>\n                    0 < f i) \\<Longrightarrow>\n                sum_list (map weight xs)\n                \\<le> sum_list\n                       (map weight\n                         (concat\n                           (map2 (\\<lambda>x i. replicate (f i) x) xs\n                             [0..<length xs])));\n        \\<And>i. i < length (xs @ [x]) \\<Longrightarrow> 0 < f i\\<rbrakk>\n       \\<Longrightarrow> sum_list (map weight (xs @ [x]))\n                         \\<le> sum_list\n                                (map weight\n                                  (concat\n                                    (map2 (\\<lambda>x i. replicate (f i) x)\n(xs @ [x]) [0..<length (xs @ [x])])))", "ultimately"], ["proof (chain)\npicking this:\n  sum_list (map weight ts)\n  \\<le> sum_list\n         (map weight\n           (concat\n             (map2 (\\<lambda>x i. replicate (f i) x) ts [0..<length ts])))\n  f (length ts) = Suc n", "show ?case"], ["proof (prove)\nusing this:\n  sum_list (map weight ts)\n  \\<le> sum_list\n         (map weight\n           (concat\n             (map2 (\\<lambda>x i. replicate (f i) x) ts [0..<length ts])))\n  f (length ts) = Suc n\n\ngoal (1 subgoal):\n 1. sum_list (map weight (ts @ [t]))\n    \\<le> sum_list\n           (map weight\n             (concat\n               (map2 (\\<lambda>x i. replicate (f i) x) (ts @ [t])\n                 [0..<length (ts @ [t])])))", "by simp"], ["proof (state)\nthis:\n  sum_list (map weight (ts @ [t]))\n  \\<le> sum_list\n         (map weight\n           (concat\n             (map2 (\\<lambda>x i. replicate (f i) x) (ts @ [t])\n               [0..<length (ts @ [t])])))\n\ngoal (1 subgoal):\n 1. (\\<And>i. i < length [] \\<Longrightarrow> 0 < f i) \\<Longrightarrow>\n    sum_list (map weight [])\n    \\<le> sum_list\n           (map weight\n             (concat\n               (map2 (\\<lambda>x i. replicate (f i) x) [] [0..<length []])))", "qed simp"], ["", "end"], ["", "subsection \\<open>Definition of KBO\\<close>"], ["", "text \\<open>\n  The precedence is given by three parameters:\n\n  \\<^item> a predicate @{term pr_strict} for strict decrease between two function symbols,\n  \\<^item> a predicate @{term pr_weak} for weak decrease between two function symbols, and\n  \\<^item> a function indicating whether a symbol is least in the precedence.\n\\<close>"], ["", "locale kbo = weight_fun w w0 scf\n  for w w0 and scf :: \"'f \\<times> nat \\<Rightarrow> nat \\<Rightarrow> nat\" +\n  fixes least :: \"'f \\<Rightarrow> bool\"\n    and pr_strict :: \"'f \\<times> nat \\<Rightarrow> 'f \\<times> nat \\<Rightarrow> bool\"\n    and pr_weak :: \"'f \\<times> nat \\<Rightarrow> 'f \\<times> nat \\<Rightarrow> bool\"\nbegin"], ["", "text \\<open>\n  The result of @{term kbo} is a pair of Booleans encoding strict/weak decrease.\n\n  Interestingly, the bound on the lengths of the lists in the lexicographic extension is not \n  required for KBO.\n\\<close>"], ["", "fun kbo :: \"('f, 'v) term \\<Rightarrow> ('f, 'v) term \\<Rightarrow> bool \\<times> bool\"\n  where\n    \"kbo s t = (if (vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and> weight t \\<le> weight s)\n      then if (weight t < weight s)\n        then (True, True)\n        else (case s of\n          Var y \\<Rightarrow> (False, (case t of Var x \\<Rightarrow> x = y | Fun g ts \\<Rightarrow> ts = [] \\<and> least g))\n        | Fun f ss \\<Rightarrow> (case t of\n            Var x \\<Rightarrow> (True, True)\n          | Fun g ts \\<Rightarrow> if pr_strict (f, length ss) (g, length ts)\n            then (True, True)\n            else if pr_weak (f, length ss) (g, length ts)\n            then lex_ext_unbounded kbo ss ts\n            else (False, False)))\n      else (False, False))\""], ["", "text \\<open>Abbreviations for strict (S) and nonstrict (NS) KBO.\\<close>"], ["", "abbreviation \"S \\<equiv> \\<lambda> s t. fst (kbo s t)\""], ["", "abbreviation \"NS \\<equiv> \\<lambda> s t. snd (kbo s t)\""], ["", "text \\<open>\n  For code-generation we do not compute the weights of @{term s} and @{term t} repeatedly.\n\\<close>"], ["", "lemma kbo_code: \"kbo s t = (let wt = weight t; ws = weight s in\n    if (vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and> wt \\<le> ws)\n    then if wt < ws\n      then (True, True)\n      else (case s of\n        Var y \\<Rightarrow> (False, (case t of Var x \\<Rightarrow> True | Fun g ts \\<Rightarrow> ts = [] \\<and> least g))\n      | Fun f ss \\<Rightarrow> (case t of\n          Var x \\<Rightarrow> (True, True)\n        | Fun g ts \\<Rightarrow> let ff = (f, length ss); gg = (g, length ts) in\n          if pr_strict ff gg\n          then (True, True)\n          else if pr_weak ff gg\n            then lex_ext_unbounded kbo ss ts\n            else (False, False)))\n    else (False, False))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kbo s t =\n    (let wt = weight t; ws = weight s\n     in if vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n           wt \\<le> ws\n        then if wt < ws then (True, True)\n             else case s of\n                  Var y \\<Rightarrow>\n                    (False,\n                     case t of Var x \\<Rightarrow> True\n                     | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n                  | Fun f ss \\<Rightarrow>\n                      case t of Var x \\<Rightarrow> (True, True)\n                      | Fun g ts \\<Rightarrow>\n                          let ff = (f, length ss); gg = (g, length ts)\n                          in if pr_strict ff gg then (True, True)\n                             else if pr_weak ff gg\n                                  then lex_ext_unbounded kbo ss ts\n                                  else (False, False)\n        else (False, False))", "unfolding kbo.simps[of s t] Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n        weight t \\<le> weight s\n     then if weight t < weight s then (True, True)\n          else case s of\n               Var y \\<Rightarrow>\n                 (False,\n                  case t of Var x \\<Rightarrow> x = y\n                  | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n               | Fun f ss \\<Rightarrow>\n                   case t of Var x \\<Rightarrow> (True, True)\n                   | Fun g ts \\<Rightarrow>\n                       if pr_strict (f, length ss) (g, length ts)\n                       then (True, True)\n                       else if pr_weak (f, length ss) (g, length ts)\n                            then lex_ext_unbounded kbo ss ts\n                            else (False, False)\n     else (False, False)) =\n    (if vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n        weight t \\<le> weight s\n     then if weight t < weight s then (True, True)\n          else case s of\n               Var y \\<Rightarrow>\n                 (False,\n                  case t of Var x \\<Rightarrow> True\n                  | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n               | Fun f ss \\<Rightarrow>\n                   case t of Var x \\<Rightarrow> (True, True)\n                   | Fun g ts \\<Rightarrow>\n                       if pr_strict (f, length ss) (g, length ts)\n                       then (True, True)\n                       else if pr_weak (f, length ss) (g, length ts)\n                            then lex_ext_unbounded kbo ss ts\n                            else (False, False)\n     else (False, False))", "by (auto simp del: kbo.simps split: term.splits)"], ["", "end"], ["", "declare kbo.kbo_code[code]"], ["", "declare weight_fun.weight.simps[code]"], ["", "lemma mset_replicate_mono:\n  assumes \"m1 \\<subseteq># m2\"\n  shows \"\\<Sum>\\<^sub># (mset (replicate n m1)) \\<subseteq># \\<Sum>\\<^sub># (mset (replicate n m2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset (replicate n m1)) \\<subseteq>#\n    \\<Sum>\\<^sub># (mset (replicate n m2))", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Sum>\\<^sub># (mset (replicate 0 m1)) \\<subseteq>#\n    \\<Sum>\\<^sub># (mset (replicate 0 m2))\n 2. \\<And>n.\n       \\<Sum>\\<^sub># (mset (replicate n m1)) \\<subseteq>#\n       \\<Sum>\\<^sub># (mset (replicate n m2)) \\<Longrightarrow>\n       \\<Sum>\\<^sub># (mset (replicate (Suc n) m1)) \\<subseteq>#\n       \\<Sum>\\<^sub># (mset (replicate (Suc n) m2))", "case (Suc n)"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (mset (replicate n m1)) \\<subseteq>#\n  \\<Sum>\\<^sub># (mset (replicate n m2))\n\ngoal (2 subgoals):\n 1. \\<Sum>\\<^sub># (mset (replicate 0 m1)) \\<subseteq>#\n    \\<Sum>\\<^sub># (mset (replicate 0 m2))\n 2. \\<And>n.\n       \\<Sum>\\<^sub># (mset (replicate n m1)) \\<subseteq>#\n       \\<Sum>\\<^sub># (mset (replicate n m2)) \\<Longrightarrow>\n       \\<Sum>\\<^sub># (mset (replicate (Suc n) m1)) \\<subseteq>#\n       \\<Sum>\\<^sub># (mset (replicate (Suc n) m2))", "have \"\\<Sum>\\<^sub># (mset (replicate (Suc n) m1)) =\n    \\<Sum>\\<^sub># (mset (replicate n m1)) + m1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset (replicate (Suc n) m1)) =\n    \\<Sum>\\<^sub># (mset (replicate n m1)) + m1", "by simp"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (mset (replicate (Suc n) m1)) =\n  \\<Sum>\\<^sub># (mset (replicate n m1)) + m1\n\ngoal (2 subgoals):\n 1. \\<Sum>\\<^sub># (mset (replicate 0 m1)) \\<subseteq>#\n    \\<Sum>\\<^sub># (mset (replicate 0 m2))\n 2. \\<And>n.\n       \\<Sum>\\<^sub># (mset (replicate n m1)) \\<subseteq>#\n       \\<Sum>\\<^sub># (mset (replicate n m2)) \\<Longrightarrow>\n       \\<Sum>\\<^sub># (mset (replicate (Suc n) m1)) \\<subseteq>#\n       \\<Sum>\\<^sub># (mset (replicate (Suc n) m2))", "also"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (mset (replicate (Suc n) m1)) =\n  \\<Sum>\\<^sub># (mset (replicate n m1)) + m1\n\ngoal (2 subgoals):\n 1. \\<Sum>\\<^sub># (mset (replicate 0 m1)) \\<subseteq>#\n    \\<Sum>\\<^sub># (mset (replicate 0 m2))\n 2. \\<And>n.\n       \\<Sum>\\<^sub># (mset (replicate n m1)) \\<subseteq>#\n       \\<Sum>\\<^sub># (mset (replicate n m2)) \\<Longrightarrow>\n       \\<Sum>\\<^sub># (mset (replicate (Suc n) m1)) \\<subseteq>#\n       \\<Sum>\\<^sub># (mset (replicate (Suc n) m2))", "have \"\\<dots> \\<subseteq># \\<Sum>\\<^sub># (mset (replicate n m1)) + m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset (replicate n m1)) + m1 \\<subseteq>#\n    \\<Sum>\\<^sub># (mset (replicate n m1)) + m2", "using \\<open>m1 \\<subseteq># m2\\<close>"], ["proof (prove)\nusing this:\n  m1 \\<subseteq># m2\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset (replicate n m1)) + m1 \\<subseteq>#\n    \\<Sum>\\<^sub># (mset (replicate n m1)) + m2", "by auto"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (mset (replicate n m1)) + m1 \\<subseteq>#\n  \\<Sum>\\<^sub># (mset (replicate n m1)) + m2\n\ngoal (2 subgoals):\n 1. \\<Sum>\\<^sub># (mset (replicate 0 m1)) \\<subseteq>#\n    \\<Sum>\\<^sub># (mset (replicate 0 m2))\n 2. \\<And>n.\n       \\<Sum>\\<^sub># (mset (replicate n m1)) \\<subseteq>#\n       \\<Sum>\\<^sub># (mset (replicate n m2)) \\<Longrightarrow>\n       \\<Sum>\\<^sub># (mset (replicate (Suc n) m1)) \\<subseteq>#\n       \\<Sum>\\<^sub># (mset (replicate (Suc n) m2))", "also"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (mset (replicate n m1)) + m1 \\<subseteq>#\n  \\<Sum>\\<^sub># (mset (replicate n m1)) + m2\n\ngoal (2 subgoals):\n 1. \\<Sum>\\<^sub># (mset (replicate 0 m1)) \\<subseteq>#\n    \\<Sum>\\<^sub># (mset (replicate 0 m2))\n 2. \\<And>n.\n       \\<Sum>\\<^sub># (mset (replicate n m1)) \\<subseteq>#\n       \\<Sum>\\<^sub># (mset (replicate n m2)) \\<Longrightarrow>\n       \\<Sum>\\<^sub># (mset (replicate (Suc n) m1)) \\<subseteq>#\n       \\<Sum>\\<^sub># (mset (replicate (Suc n) m2))", "have \"\\<dots> \\<subseteq># \\<Sum>\\<^sub># (mset (replicate n m2)) + m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset (replicate n m1)) + m2 \\<subseteq>#\n    \\<Sum>\\<^sub># (mset (replicate n m2)) + m2", "using Suc"], ["proof (prove)\nusing this:\n  \\<Sum>\\<^sub># (mset (replicate n m1)) \\<subseteq>#\n  \\<Sum>\\<^sub># (mset (replicate n m2))\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset (replicate n m1)) + m2 \\<subseteq>#\n    \\<Sum>\\<^sub># (mset (replicate n m2)) + m2", "by auto"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (mset (replicate n m1)) + m2 \\<subseteq>#\n  \\<Sum>\\<^sub># (mset (replicate n m2)) + m2\n\ngoal (2 subgoals):\n 1. \\<Sum>\\<^sub># (mset (replicate 0 m1)) \\<subseteq>#\n    \\<Sum>\\<^sub># (mset (replicate 0 m2))\n 2. \\<And>n.\n       \\<Sum>\\<^sub># (mset (replicate n m1)) \\<subseteq>#\n       \\<Sum>\\<^sub># (mset (replicate n m2)) \\<Longrightarrow>\n       \\<Sum>\\<^sub># (mset (replicate (Suc n) m1)) \\<subseteq>#\n       \\<Sum>\\<^sub># (mset (replicate (Suc n) m2))", "finally"], ["proof (chain)\npicking this:\n  \\<Sum>\\<^sub># (mset (replicate (Suc n) m1)) \\<subseteq>#\n  \\<Sum>\\<^sub># (mset (replicate n m2)) + m2", "show ?case"], ["proof (prove)\nusing this:\n  \\<Sum>\\<^sub># (mset (replicate (Suc n) m1)) \\<subseteq>#\n  \\<Sum>\\<^sub># (mset (replicate n m2)) + m2\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset (replicate (Suc n) m1)) \\<subseteq>#\n    \\<Sum>\\<^sub># (mset (replicate (Suc n) m2))", "by (simp add: union_commute)"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (mset (replicate (Suc n) m1)) \\<subseteq>#\n  \\<Sum>\\<^sub># (mset (replicate (Suc n) m2))\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset (replicate 0 m1)) \\<subseteq>#\n    \\<Sum>\\<^sub># (mset (replicate 0 m2))", "qed simp"], ["", "text \\<open>\n  While the locale @{locale kbo} only fixes its parameters, we now demand that these\n  parameters are sensible, e.g., encoding a well-founded precedence, etc.\n\\<close>"], ["", "locale admissible_kbo =\n  kbo w w0 scf least pr_strict pr_weak\n  for w w0 pr_strict pr_weak and least :: \"'f \\<Rightarrow> bool\" and scf +\n  assumes w0: \"w (f, 0) \\<ge> w0\" \"w0 > 0\"\n    and adm: \"w (f, 1) = 0 \\<Longrightarrow> pr_weak (f, 1) (g, n)\"\n    and least: \"least f = (w (f, 0) = w0 \\<and> (\\<forall> g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0)))\"\n    and scf: \"i < n \\<Longrightarrow> scf (f, n) i > 0\"\n    and pr_weak_refl [simp]: \"pr_weak fn fn\"\n    and pr_weak_trans: \"pr_weak fn gm \\<Longrightarrow> pr_weak gm hk \\<Longrightarrow> pr_weak fn hk\"\n    and pr_strict: \"pr_strict fn gm \\<longleftrightarrow> pr_weak fn gm \\<and> \\<not> pr_weak gm fn\"\n    and pr_SN: \"SN {(fn, gm). pr_strict fn gm}\"\nbegin"], ["", "lemma weight_w0: \"weight t \\<ge> w0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w0 \\<le> weight t", "proof (induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. w0 \\<le> weight (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           w0 \\<le> weight x2a) \\<Longrightarrow>\n       w0 \\<le> weight (Fun x1a x2)", "case (Fun f ts)"], ["proof (state)\nthis:\n  ?x2a13 \\<in> set ts \\<Longrightarrow> w0 \\<le> weight ?x2a13\n\ngoal (2 subgoals):\n 1. \\<And>x. w0 \\<le> weight (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           w0 \\<le> weight x2a) \\<Longrightarrow>\n       w0 \\<le> weight (Fun x1a x2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. w0 \\<le> weight (Fun f ts)", "proof (cases ts)"], ["proof (state)\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> w0 \\<le> weight (Fun f ts)\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> w0 \\<le> weight (Fun f ts)", "case Nil"], ["proof (state)\nthis:\n  ts = []\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> w0 \\<le> weight (Fun f ts)\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> w0 \\<le> weight (Fun f ts)", "with w0(1)"], ["proof (chain)\npicking this:\n  w0 \\<le> w (?f, 0)\n  ts = []", "have \"w0 \\<le> w (f, length ts)\""], ["proof (prove)\nusing this:\n  w0 \\<le> w (?f, 0)\n  ts = []\n\ngoal (1 subgoal):\n 1. w0 \\<le> w (f, length ts)", "by auto"], ["proof (state)\nthis:\n  w0 \\<le> w (f, length ts)\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> w0 \\<le> weight (Fun f ts)\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> w0 \\<le> weight (Fun f ts)", "then"], ["proof (chain)\npicking this:\n  w0 \\<le> w (f, length ts)", "show ?thesis"], ["proof (prove)\nusing this:\n  w0 \\<le> w (f, length ts)\n\ngoal (1 subgoal):\n 1. w0 \\<le> weight (Fun f ts)", "by auto"], ["proof (state)\nthis:\n  w0 \\<le> weight (Fun f ts)\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> w0 \\<le> weight (Fun f ts)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> w0 \\<le> weight (Fun f ts)", "case (Cons s ss)"], ["proof (state)\nthis:\n  ts = s # ss\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> w0 \\<le> weight (Fun f ts)", "then"], ["proof (chain)\npicking this:\n  ts = s # ss", "obtain i where i: \"i < length ts\""], ["proof (prove)\nusing this:\n  ts = s # ss\n\ngoal (1 subgoal):\n 1. (\\<And>i. i < length ts \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i < length ts\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> w0 \\<le> weight (Fun f ts)", "from scf[OF this]"], ["proof (chain)\npicking this:\n  0 < scf (?f, length ts) i", "have scf: \"0 < scf (f, length ts) i\""], ["proof (prove)\nusing this:\n  0 < scf (?f, length ts) i\n\ngoal (1 subgoal):\n 1. 0 < scf (f, length ts) i", "by auto"], ["proof (state)\nthis:\n  0 < scf (f, length ts) i\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> w0 \\<le> weight (Fun f ts)", "then"], ["proof (chain)\npicking this:\n  0 < scf (f, length ts) i", "obtain n where scf: \"scf (f, length ts) i = Suc n\""], ["proof (prove)\nusing this:\n  0 < scf (f, length ts) i\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        scf (f, length ts) i = Suc n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: lessE)"], ["proof (state)\nthis:\n  scf (f, length ts) i = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> w0 \\<le> weight (Fun f ts)", "from id_take_nth_drop[OF i] i"], ["proof (chain)\npicking this:\n  ts = take i ts @ ts ! i # drop (Suc i) ts\n  i < length ts", "obtain bef aft where ts: \"ts = bef @ ts ! i # aft\" and ii: \"length bef = i\""], ["proof (prove)\nusing this:\n  ts = take i ts @ ts ! i # drop (Suc i) ts\n  i < length ts\n\ngoal (1 subgoal):\n 1. (\\<And>bef aft.\n        \\<lbrakk>ts = bef @ ts ! i # aft; length bef = i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ts = bef @ ts ! i # aft\n  length bef = i\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> w0 \\<le> weight (Fun f ts)", "define tsi where \"tsi = ts ! i\""], ["proof (state)\nthis:\n  tsi = ts ! i\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> w0 \\<le> weight (Fun f ts)", "note ts = ts[folded tsi_def]"], ["proof (state)\nthis:\n  ts = bef @ tsi # aft\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> w0 \\<le> weight (Fun f ts)", "from i"], ["proof (chain)\npicking this:\n  i < length ts", "have tsi: \"tsi \\<in> set ts\""], ["proof (prove)\nusing this:\n  i < length ts\n\ngoal (1 subgoal):\n 1. tsi \\<in> set ts", "unfolding tsi_def"], ["proof (prove)\nusing this:\n  i < length ts\n\ngoal (1 subgoal):\n 1. ts ! i \\<in> set ts", "by auto"], ["proof (state)\nthis:\n  tsi \\<in> set ts\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> w0 \\<le> weight (Fun f ts)", "from Fun[OF this]"], ["proof (chain)\npicking this:\n  w0 \\<le> weight tsi", "have w0: \"w0 \\<le> weight tsi\""], ["proof (prove)\nusing this:\n  w0 \\<le> weight tsi\n\ngoal (1 subgoal):\n 1. w0 \\<le> weight tsi", "."], ["proof (state)\nthis:\n  w0 \\<le> weight tsi\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> w0 \\<le> weight (Fun f ts)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. w0 \\<le> weight (Fun f ts)", "using scf ii w0"], ["proof (prove)\nusing this:\n  scf (f, length ts) i = Suc n\n  length bef = i\n  w0 \\<le> weight tsi\n\ngoal (1 subgoal):\n 1. w0 \\<le> weight (Fun f ts)", "unfolding ts"], ["proof (prove)\nusing this:\n  scf (f, length (bef @ tsi # aft)) i = Suc n\n  length bef = i\n  w0 \\<le> weight tsi\n\ngoal (1 subgoal):\n 1. w0 \\<le> weight (Fun f (bef @ tsi # aft))", "by simp"], ["proof (state)\nthis:\n  w0 \\<le> weight (Fun f ts)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w0 \\<le> weight (Fun f ts)\n\ngoal (1 subgoal):\n 1. \\<And>x. w0 \\<le> weight (Var x)", "qed simp"], ["", "lemma weight_gt_0: \"weight t > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < weight t", "using weight_w0 [of t] and w0"], ["proof (prove)\nusing this:\n  w0 \\<le> weight t\n  w0 \\<le> w (?f, 0)\n  0 < w0\n\ngoal (1 subgoal):\n 1. 0 < weight t", "by arith"], ["", "lemma weight_0 [iff]: \"weight t = 0 \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (weight t = 0) = False", "using weight_gt_0 [of t]"], ["proof (prove)\nusing this:\n  0 < weight t\n\ngoal (1 subgoal):\n 1. (weight t = 0) = False", "by auto"], ["", "lemma not_S_Var: \"\\<not> S (Var x) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> S (Var x) t", "using weight_w0[of t]"], ["proof (prove)\nusing this:\n  w0 \\<le> weight t\n\ngoal (1 subgoal):\n 1. \\<not> S (Var x) t", "by (cases t, auto)"], ["", "lemma S_imp_NS: \"S s t \\<Longrightarrow> NS s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> NS s t", "proof (induct s t rule: kbo.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>\\<And>x21 x22 x21a x22a i.\n                   \\<lbrakk>vars_term_ms (SCF t) \\<subseteq>#\n                            vars_term_ms (SCF s) \\<and>\n                            weight t \\<le> weight s;\n                    \\<not> weight t < weight s; s = Fun x21 x22;\n                    t = Fun x21a x22a;\n                    \\<not> pr_strict (x21, length x22) (x21a, length x22a);\n                    pr_weak (x21, length x22) (x21a, length x22a);\n                    i < length x22; i < length x22a;\n                    S (x22 ! i) (x22a ! i)\\<rbrakk>\n                   \\<Longrightarrow> NS (x22 ! i) (x22a ! i);\n        S s t\\<rbrakk>\n       \\<Longrightarrow> NS s t", "case (1 s t)"], ["proof (state)\nthis:\n  \\<lbrakk>vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n           weight t \\<le> weight s;\n   \\<not> weight t < weight s; s = Fun ?x21.13 ?x22.13;\n   t = Fun ?x21a13 ?x22a13;\n   \\<not> pr_strict (?x21.13, length ?x22.13) (?x21a13, length ?x22a13);\n   pr_weak (?x21.13, length ?x22.13) (?x21a13, length ?x22a13);\n   ?i13 < length ?x22.13; ?i13 < length ?x22a13;\n   S (?x22.13 ! ?i13) (?x22a13 ! ?i13)\\<rbrakk>\n  \\<Longrightarrow> NS (?x22.13 ! ?i13) (?x22a13 ! ?i13)\n  S s t\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>\\<And>x21 x22 x21a x22a i.\n                   \\<lbrakk>vars_term_ms (SCF t) \\<subseteq>#\n                            vars_term_ms (SCF s) \\<and>\n                            weight t \\<le> weight s;\n                    \\<not> weight t < weight s; s = Fun x21 x22;\n                    t = Fun x21a x22a;\n                    \\<not> pr_strict (x21, length x22) (x21a, length x22a);\n                    pr_weak (x21, length x22) (x21a, length x22a);\n                    i < length x22; i < length x22a;\n                    S (x22 ! i) (x22a ! i)\\<rbrakk>\n                   \\<Longrightarrow> NS (x22 ! i) (x22a ! i);\n        S s t\\<rbrakk>\n       \\<Longrightarrow> NS s t", "from 1(2)"], ["proof (chain)\npicking this:\n  S s t", "have S: \"S s t\""], ["proof (prove)\nusing this:\n  S s t\n\ngoal (1 subgoal):\n 1. S s t", "."], ["proof (state)\nthis:\n  S s t\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>\\<And>x21 x22 x21a x22a i.\n                   \\<lbrakk>vars_term_ms (SCF t) \\<subseteq>#\n                            vars_term_ms (SCF s) \\<and>\n                            weight t \\<le> weight s;\n                    \\<not> weight t < weight s; s = Fun x21 x22;\n                    t = Fun x21a x22a;\n                    \\<not> pr_strict (x21, length x22) (x21a, length x22a);\n                    pr_weak (x21, length x22) (x21a, length x22a);\n                    i < length x22; i < length x22a;\n                    S (x22 ! i) (x22a ! i)\\<rbrakk>\n                   \\<Longrightarrow> NS (x22 ! i) (x22a ! i);\n        S s t\\<rbrakk>\n       \\<Longrightarrow> NS s t", "from S"], ["proof (chain)\npicking this:\n  S s t", "have w: \"vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and> weight t \\<le> weight s\""], ["proof (prove)\nusing this:\n  S s t\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n    weight t \\<le> weight s", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n  weight t \\<le> weight s\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>\\<And>x21 x22 x21a x22a i.\n                   \\<lbrakk>vars_term_ms (SCF t) \\<subseteq>#\n                            vars_term_ms (SCF s) \\<and>\n                            weight t \\<le> weight s;\n                    \\<not> weight t < weight s; s = Fun x21 x22;\n                    t = Fun x21a x22a;\n                    \\<not> pr_strict (x21, length x22) (x21a, length x22a);\n                    pr_weak (x21, length x22) (x21a, length x22a);\n                    i < length x22; i < length x22a;\n                    S (x22 ! i) (x22a ! i)\\<rbrakk>\n                   \\<Longrightarrow> NS (x22 ! i) (x22a ! i);\n        S s t\\<rbrakk>\n       \\<Longrightarrow> NS s t", "note S = S w"], ["proof (state)\nthis:\n  S s t\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n  weight t \\<le> weight s\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>\\<And>x21 x22 x21a x22a i.\n                   \\<lbrakk>vars_term_ms (SCF t) \\<subseteq>#\n                            vars_term_ms (SCF s) \\<and>\n                            weight t \\<le> weight s;\n                    \\<not> weight t < weight s; s = Fun x21 x22;\n                    t = Fun x21a x22a;\n                    \\<not> pr_strict (x21, length x22) (x21a, length x22a);\n                    pr_weak (x21, length x22) (x21a, length x22a);\n                    i < length x22; i < length x22a;\n                    S (x22 ! i) (x22a ! i)\\<rbrakk>\n                   \\<Longrightarrow> NS (x22 ! i) (x22a ! i);\n        S s t\\<rbrakk>\n       \\<Longrightarrow> NS s t", "note IH = 1(1)[OF w]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> weight t < weight s; s = Fun ?x21.13 ?x22.13;\n   t = Fun ?x21a13 ?x22a13;\n   \\<not> pr_strict (?x21.13, length ?x22.13) (?x21a13, length ?x22a13);\n   pr_weak (?x21.13, length ?x22.13) (?x21a13, length ?x22a13);\n   ?i13 < length ?x22.13; ?i13 < length ?x22a13;\n   S (?x22.13 ! ?i13) (?x22a13 ! ?i13)\\<rbrakk>\n  \\<Longrightarrow> NS (?x22.13 ! ?i13) (?x22a13 ! ?i13)\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>\\<And>x21 x22 x21a x22a i.\n                   \\<lbrakk>vars_term_ms (SCF t) \\<subseteq>#\n                            vars_term_ms (SCF s) \\<and>\n                            weight t \\<le> weight s;\n                    \\<not> weight t < weight s; s = Fun x21 x22;\n                    t = Fun x21a x22a;\n                    \\<not> pr_strict (x21, length x22) (x21a, length x22a);\n                    pr_weak (x21, length x22) (x21a, length x22a);\n                    i < length x22; i < length x22a;\n                    S (x22 ! i) (x22a ! i)\\<rbrakk>\n                   \\<Longrightarrow> NS (x22 ! i) (x22a ! i);\n        S s t\\<rbrakk>\n       \\<Longrightarrow> NS s t", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. NS s t", "proof (cases \"weight t < weight s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. weight t < weight s \\<Longrightarrow> NS s t\n 2. \\<not> weight t < weight s \\<Longrightarrow> NS s t", "case True"], ["proof (state)\nthis:\n  weight t < weight s\n\ngoal (2 subgoals):\n 1. weight t < weight s \\<Longrightarrow> NS s t\n 2. \\<not> weight t < weight s \\<Longrightarrow> NS s t", "with S"], ["proof (chain)\npicking this:\n  S s t\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n  weight t \\<le> weight s\n  weight t < weight s", "show ?thesis"], ["proof (prove)\nusing this:\n  S s t\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n  weight t \\<le> weight s\n  weight t < weight s\n\ngoal (1 subgoal):\n 1. NS s t", "by simp"], ["proof (state)\nthis:\n  NS s t\n\ngoal (1 subgoal):\n 1. \\<not> weight t < weight s \\<Longrightarrow> NS s t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> weight t < weight s \\<Longrightarrow> NS s t", "case False"], ["proof (state)\nthis:\n  \\<not> weight t < weight s\n\ngoal (1 subgoal):\n 1. \\<not> weight t < weight s \\<Longrightarrow> NS s t", "note IH = IH[OF False]"], ["proof (state)\nthis:\n  \\<lbrakk>s = Fun ?x21.13 ?x22.13; t = Fun ?x21a13 ?x22a13;\n   \\<not> pr_strict (?x21.13, length ?x22.13) (?x21a13, length ?x22a13);\n   pr_weak (?x21.13, length ?x22.13) (?x21a13, length ?x22a13);\n   ?i13 < length ?x22.13; ?i13 < length ?x22a13;\n   S (?x22.13 ! ?i13) (?x22a13 ! ?i13)\\<rbrakk>\n  \\<Longrightarrow> NS (?x22.13 ! ?i13) (?x22a13 ! ?i13)\n\ngoal (1 subgoal):\n 1. \\<not> weight t < weight s \\<Longrightarrow> NS s t", "note S = S False"], ["proof (state)\nthis:\n  S s t\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n  weight t \\<le> weight s\n  \\<not> weight t < weight s\n\ngoal (1 subgoal):\n 1. \\<not> weight t < weight s \\<Longrightarrow> NS s t", "from not_S_Var[of _ t] S"], ["proof (chain)\npicking this:\n  \\<not> S (Var ?x) t\n  S s t\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n  weight t \\<le> weight s\n  \\<not> weight t < weight s", "obtain f ss where s: \"s = Fun f ss\""], ["proof (prove)\nusing this:\n  \\<not> S (Var ?x) t\n  S s t\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n  weight t \\<le> weight s\n  \\<not> weight t < weight s\n\ngoal (1 subgoal):\n 1. (\\<And>f ss. s = Fun f ss \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases s, auto)"], ["proof (state)\nthis:\n  s = Fun f ss\n\ngoal (1 subgoal):\n 1. \\<not> weight t < weight s \\<Longrightarrow> NS s t", "note IH = IH[OF s]"], ["proof (state)\nthis:\n  \\<lbrakk>t = Fun ?x21a13 ?x22a13;\n   \\<not> pr_strict (f, length ss) (?x21a13, length ?x22a13);\n   pr_weak (f, length ss) (?x21a13, length ?x22a13); ?i13 < length ss;\n   ?i13 < length ?x22a13; S (ss ! ?i13) (?x22a13 ! ?i13)\\<rbrakk>\n  \\<Longrightarrow> NS (ss ! ?i13) (?x22a13 ! ?i13)\n\ngoal (1 subgoal):\n 1. \\<not> weight t < weight s \\<Longrightarrow> NS s t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. NS s t", "proof (cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. t = Var x1 \\<Longrightarrow> NS s t\n 2. \\<And>x21 x22. t = Fun x21 x22 \\<Longrightarrow> NS s t", "case (Var x)"], ["proof (state)\nthis:\n  t = Var x\n\ngoal (2 subgoals):\n 1. \\<And>x1. t = Var x1 \\<Longrightarrow> NS s t\n 2. \\<And>x21 x22. t = Fun x21 x22 \\<Longrightarrow> NS s t", "from S"], ["proof (chain)\npicking this:\n  S s t\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n  weight t \\<le> weight s\n  \\<not> weight t < weight s", "show ?thesis"], ["proof (prove)\nusing this:\n  S s t\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n  weight t \\<le> weight s\n  \\<not> weight t < weight s\n\ngoal (1 subgoal):\n 1. NS s t", "by (auto, insert Var s, auto)"], ["proof (state)\nthis:\n  NS s t\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. t = Fun x21 x22 \\<Longrightarrow> NS s t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22. t = Fun x21 x22 \\<Longrightarrow> NS s t", "case (Fun g ts)"], ["proof (state)\nthis:\n  t = Fun g ts\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. t = Fun x21 x22 \\<Longrightarrow> NS s t", "note IH = IH[OF Fun]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> pr_strict (f, length ss) (g, length ts);\n   pr_weak (f, length ss) (g, length ts); ?i13 < length ss;\n   ?i13 < length ts; S (ss ! ?i13) (ts ! ?i13)\\<rbrakk>\n  \\<Longrightarrow> NS (ss ! ?i13) (ts ! ?i13)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. t = Fun x21 x22 \\<Longrightarrow> NS s t", "let ?f = \"(f, length ss)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22. t = Fun x21 x22 \\<Longrightarrow> NS s t", "let ?g = \"(g, length ts)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22. t = Fun x21 x22 \\<Longrightarrow> NS s t", "let ?lex = \"lex_ext_unbounded kbo ss ts\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22. t = Fun x21 x22 \\<Longrightarrow> NS s t", "from S[simplified, unfolded s Fun]"], ["proof (chain)\npicking this:\n  fst (if vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n          vars_term_ms (SCF (Fun f ss)) \\<and>\n          weight (Fun g ts) \\<le> weight (Fun f ss)\n       then if weight (Fun g ts) < weight (Fun f ss) then (True, True)\n            else case Fun f ss of\n                 Var y \\<Rightarrow>\n                   (False,\n                    case Fun g ts of Var x \\<Rightarrow> x = y\n                    | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n                 | Fun f ss \\<Rightarrow>\n                     case Fun g ts of Var x \\<Rightarrow> (True, True)\n                     | Fun g ts \\<Rightarrow>\n                         if pr_strict (f, length ss) (g, length ts)\n                         then (True, True)\n                         else if pr_weak (f, length ss) (g, length ts)\n                              then lex_ext_unbounded kbo ss ts\n                              else (False, False)\n       else (False, False))\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss)) \\<and>\n  weight (Fun g ts) \\<le> weight (Fun f ss)\n  \\<not> weight (Fun g ts) < weight (Fun f ss)", "have disj: \"pr_strict ?f ?g \\<or> pr_weak ?f ?g \\<and> fst ?lex\""], ["proof (prove)\nusing this:\n  fst (if vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n          vars_term_ms (SCF (Fun f ss)) \\<and>\n          weight (Fun g ts) \\<le> weight (Fun f ss)\n       then if weight (Fun g ts) < weight (Fun f ss) then (True, True)\n            else case Fun f ss of\n                 Var y \\<Rightarrow>\n                   (False,\n                    case Fun g ts of Var x \\<Rightarrow> x = y\n                    | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n                 | Fun f ss \\<Rightarrow>\n                     case Fun g ts of Var x \\<Rightarrow> (True, True)\n                     | Fun g ts \\<Rightarrow>\n                         if pr_strict (f, length ss) (g, length ts)\n                         then (True, True)\n                         else if pr_weak (f, length ss) (g, length ts)\n                              then lex_ext_unbounded kbo ss ts\n                              else (False, False)\n       else (False, False))\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss)) \\<and>\n  weight (Fun g ts) \\<le> weight (Fun f ss)\n  \\<not> weight (Fun g ts) < weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. pr_strict (f, length ss) (g, length ts) \\<or>\n    pr_weak (f, length ss) (g, length ts) \\<and>\n    fst (lex_ext_unbounded kbo ss ts)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  pr_strict (f, length ss) (g, length ts) \\<or>\n  pr_weak (f, length ss) (g, length ts) \\<and>\n  fst (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. t = Fun x21 x22 \\<Longrightarrow> NS s t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. NS s t", "proof (cases \"pr_strict ?f ?g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. pr_strict (f, length ss) (g, length ts) \\<Longrightarrow> NS s t\n 2. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow> NS s t", "case True"], ["proof (state)\nthis:\n  pr_strict (f, length ss) (g, length ts)\n\ngoal (2 subgoals):\n 1. pr_strict (f, length ss) (g, length ts) \\<Longrightarrow> NS s t\n 2. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow> NS s t", "then"], ["proof (chain)\npicking this:\n  pr_strict (f, length ss) (g, length ts)", "show ?thesis"], ["proof (prove)\nusing this:\n  pr_strict (f, length ss) (g, length ts)\n\ngoal (1 subgoal):\n 1. NS s t", "using S s Fun"], ["proof (prove)\nusing this:\n  pr_strict (f, length ss) (g, length ts)\n  S s t\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n  weight t \\<le> weight s\n  \\<not> weight t < weight s\n  s = Fun f ss\n  t = Fun g ts\n\ngoal (1 subgoal):\n 1. NS s t", "by auto"], ["proof (state)\nthis:\n  NS s t\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow> NS s t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow> NS s t", "case False"], ["proof (state)\nthis:\n  \\<not> pr_strict (f, length ss) (g, length ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow> NS s t", "with disj"], ["proof (chain)\npicking this:\n  pr_strict (f, length ss) (g, length ts) \\<or>\n  pr_weak (f, length ss) (g, length ts) \\<and>\n  fst (lex_ext_unbounded kbo ss ts)\n  \\<not> pr_strict (f, length ss) (g, length ts)", "have fg: \"pr_weak ?f ?g\" and lex: \"fst ?lex\""], ["proof (prove)\nusing this:\n  pr_strict (f, length ss) (g, length ts) \\<or>\n  pr_weak (f, length ss) (g, length ts) \\<and>\n  fst (lex_ext_unbounded kbo ss ts)\n  \\<not> pr_strict (f, length ss) (g, length ts)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) &&&\n    fst (lex_ext_unbounded kbo ss ts)", "by auto"], ["proof (state)\nthis:\n  pr_weak (f, length ss) (g, length ts)\n  fst (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow> NS s t", "note IH = IH[OF False fg]"], ["proof (state)\nthis:\n  \\<lbrakk>?i13 < length ss; ?i13 < length ts;\n   S (ss ! ?i13) (ts ! ?i13)\\<rbrakk>\n  \\<Longrightarrow> NS (ss ! ?i13) (ts ! ?i13)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow> NS s t", "from lex"], ["proof (chain)\npicking this:\n  fst (lex_ext_unbounded kbo ss ts)", "have \"fst (lex_ext kbo (length ss + length ts) ss ts)\""], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. fst (lex_ext kbo (length ss + length ts) ss ts)", "unfolding lex_ext_def Let_def"], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. fst (if length ss = length ts \\<or>\n            length ts \\<le> length ss + length ts\n         then lex_ext_unbounded kbo ss ts else (False, False))", "by auto"], ["proof (state)\nthis:\n  fst (lex_ext kbo (length ss + length ts) ss ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow> NS s t", "from lex_ext_stri_imp_nstri[OF this]"], ["proof (chain)\npicking this:\n  snd (lex_ext kbo (length ss + length ts) ss ts)", "have lex: \"snd ?lex\""], ["proof (prove)\nusing this:\n  snd (lex_ext kbo (length ss + length ts) ss ts)\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo ss ts)", "unfolding lex_ext_def Let_def"], ["proof (prove)\nusing this:\n  snd (if length ss = length ts \\<or> length ts \\<le> length ss + length ts\n       then lex_ext_unbounded kbo ss ts else (False, False))\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo ss ts)", "by auto"], ["proof (state)\nthis:\n  snd (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow> NS s t", "with False fg S s Fun"], ["proof (chain)\npicking this:\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  pr_weak (f, length ss) (g, length ts)\n  S s t\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n  weight t \\<le> weight s\n  \\<not> weight t < weight s\n  s = Fun f ss\n  t = Fun g ts\n  snd (lex_ext_unbounded kbo ss ts)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  pr_weak (f, length ss) (g, length ts)\n  S s t\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s) \\<and>\n  weight t \\<le> weight s\n  \\<not> weight t < weight s\n  s = Fun f ss\n  t = Fun g ts\n  snd (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. NS s t", "by auto"], ["proof (state)\nthis:\n  NS s t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  NS s t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  NS s t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  NS s t\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Reflexivity and Irreflexivity\\<close>"], ["", "lemma NS_refl: \"NS s s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NS s s", "proof (induct s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. NS (Var x) (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow> NS x2a x2a) \\<Longrightarrow>\n       NS (Fun x1a x2) (Fun x1a x2)", "case (Fun f ss)"], ["proof (state)\nthis:\n  ?x2a13 \\<in> set ss \\<Longrightarrow> NS ?x2a13 ?x2a13\n\ngoal (2 subgoals):\n 1. \\<And>x. NS (Var x) (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow> NS x2a x2a) \\<Longrightarrow>\n       NS (Fun x1a x2) (Fun x1a x2)", "have \"snd (lex_ext kbo (length ss) ss ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (lex_ext kbo (length ss) ss ss)", "by (rule all_nstri_imp_lex_nstri, insert Fun[unfolded set_conv_nth], auto)"], ["proof (state)\nthis:\n  snd (lex_ext kbo (length ss) ss ss)\n\ngoal (2 subgoals):\n 1. \\<And>x. NS (Var x) (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow> NS x2a x2a) \\<Longrightarrow>\n       NS (Fun x1a x2) (Fun x1a x2)", "then"], ["proof (chain)\npicking this:\n  snd (lex_ext kbo (length ss) ss ss)", "have \"snd (lex_ext_unbounded kbo ss ss)\""], ["proof (prove)\nusing this:\n  snd (lex_ext kbo (length ss) ss ss)\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo ss ss)", "unfolding lex_ext_def Let_def"], ["proof (prove)\nusing this:\n  snd (if length ss = length ss \\<or> length ss \\<le> length ss\n       then lex_ext_unbounded kbo ss ss else (False, False))\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo ss ss)", "by simp"], ["proof (state)\nthis:\n  snd (lex_ext_unbounded kbo ss ss)\n\ngoal (2 subgoals):\n 1. \\<And>x. NS (Var x) (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow> NS x2a x2a) \\<Longrightarrow>\n       NS (Fun x1a x2) (Fun x1a x2)", "then"], ["proof (chain)\npicking this:\n  snd (lex_ext_unbounded kbo ss ss)", "show ?case"], ["proof (prove)\nusing this:\n  snd (lex_ext_unbounded kbo ss ss)\n\ngoal (1 subgoal):\n 1. NS (Fun f ss) (Fun f ss)", "by auto"], ["proof (state)\nthis:\n  NS (Fun f ss) (Fun f ss)\n\ngoal (1 subgoal):\n 1. \\<And>x. NS (Var x) (Var x)", "qed simp"], ["", "lemma pr_strict_irrefl: \"\\<not> pr_strict fn fn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> pr_strict fn fn", "unfolding pr_strict"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (pr_weak fn fn \\<and> \\<not> pr_weak fn fn)", "by auto"], ["", "lemma S_irrefl: \"\\<not> S t t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> S t t", "proof (induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. \\<not> S (Var x) (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           \\<not> S x2a x2a) \\<Longrightarrow>\n       \\<not> S (Fun x1a x2) (Fun x1a x2)", "case (Var x)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x. \\<not> S (Var x) (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           \\<not> S x2a x2a) \\<Longrightarrow>\n       \\<not> S (Fun x1a x2) (Fun x1a x2)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> S (Var x) (Var x)", "by (rule not_S_Var)"], ["proof (state)\nthis:\n  \\<not> S (Var x) (Var x)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           \\<not> S x2a x2a) \\<Longrightarrow>\n       \\<not> S (Fun x1a x2) (Fun x1a x2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           \\<not> S x2a x2a) \\<Longrightarrow>\n       \\<not> S (Fun x1a x2) (Fun x1a x2)", "case (Fun f ts)"], ["proof (state)\nthis:\n  ?x2a13 \\<in> set ts \\<Longrightarrow> \\<not> S ?x2a13 ?x2a13\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           \\<not> S x2a x2a) \\<Longrightarrow>\n       \\<not> S (Fun x1a x2) (Fun x1a x2)", "from pr_strict_irrefl"], ["proof (chain)\npicking this:\n  \\<not> pr_strict ?fn ?fn", "have \"\\<not> pr_strict (f, length ts) (f, length ts)\""], ["proof (prove)\nusing this:\n  \\<not> pr_strict ?fn ?fn\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ts) (f, length ts)", "."], ["proof (state)\nthis:\n  \\<not> pr_strict (f, length ts) (f, length ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           \\<not> S x2a x2a) \\<Longrightarrow>\n       \\<not> S (Fun x1a x2) (Fun x1a x2)", "moreover"], ["proof (state)\nthis:\n  \\<not> pr_strict (f, length ts) (f, length ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           \\<not> S x2a x2a) \\<Longrightarrow>\n       \\<not> S (Fun x1a x2) (Fun x1a x2)", "{"], ["proof (state)\nthis:\n  \\<not> pr_strict (f, length ts) (f, length ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           \\<not> S x2a x2a) \\<Longrightarrow>\n       \\<not> S (Fun x1a x2) (Fun x1a x2)", "assume \"fst (lex_ext_unbounded kbo ts ts)\""], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo ts ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           \\<not> S x2a x2a) \\<Longrightarrow>\n       \\<not> S (Fun x1a x2) (Fun x1a x2)", "then"], ["proof (chain)\npicking this:\n  fst (lex_ext_unbounded kbo ts ts)", "obtain i where \"i < length ts\" and \"S (ts ! i) (ts ! i)\""], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded kbo ts ts)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length ts; S (ts ! i) (ts ! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lex_ext_unbounded_iff"], ["proof (prove)\nusing this:\n  fst ((\\<exists>i<length ts.\n           i < length ts \\<and>\n           (\\<forall>j<i. NS (ts ! j) (ts ! j)) \\<and>\n           S (ts ! i) (ts ! i)) \\<or>\n       (\\<forall>i<length ts. NS (ts ! i) (ts ! i)) \\<and>\n       length ts < length ts,\n       (\\<exists>i<length ts.\n           i < length ts \\<and>\n           (\\<forall>j<i. NS (ts ! j) (ts ! j)) \\<and>\n           S (ts ! i) (ts ! i)) \\<or>\n       (\\<forall>i<length ts. NS (ts ! i) (ts ! i)) \\<and>\n       length ts \\<le> length ts)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length ts; S (ts ! i) (ts ! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i < length ts\n  S (ts ! i) (ts ! i)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           \\<not> S x2a x2a) \\<Longrightarrow>\n       \\<not> S (Fun x1a x2) (Fun x1a x2)", "with Fun"], ["proof (chain)\npicking this:\n  ?x2a13 \\<in> set ts \\<Longrightarrow> \\<not> S ?x2a13 ?x2a13\n  i < length ts\n  S (ts ! i) (ts ! i)", "have False"], ["proof (prove)\nusing this:\n  ?x2a13 \\<in> set ts \\<Longrightarrow> \\<not> S ?x2a13 ?x2a13\n  i < length ts\n  S (ts ! i) (ts ! i)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           \\<not> S x2a x2a) \\<Longrightarrow>\n       \\<not> S (Fun x1a x2) (Fun x1a x2)", "}"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo ts ts) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           \\<not> S x2a x2a) \\<Longrightarrow>\n       \\<not> S (Fun x1a x2) (Fun x1a x2)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> pr_strict (f, length ts) (f, length ts)\n  fst (lex_ext_unbounded kbo ts ts) \\<Longrightarrow> False", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> pr_strict (f, length ts) (f, length ts)\n  fst (lex_ext_unbounded kbo ts ts) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> S (Fun f ts) (Fun f ts)", "by auto"], ["proof (state)\nthis:\n  \\<not> S (Fun f ts) (Fun f ts)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Monotonicity (a.k.a. Closure under Contexts)\\<close>"], ["", "lemma S_mono_one:\n  assumes S: \"S s t\"\n  shows \"S (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "let ?ss = \"ss1 @ s # ss2\""], ["proof (state)\ngoal (1 subgoal):\n 1. S (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "let ?ts = \"ss1 @ t # ss2\""], ["proof (state)\ngoal (1 subgoal):\n 1. S (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "let ?s = \"Fun f ?ss\""], ["proof (state)\ngoal (1 subgoal):\n 1. S (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "let ?t = \"Fun f ?ts\""], ["proof (state)\ngoal (1 subgoal):\n 1. S (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "from S"], ["proof (chain)\npicking this:\n  S s t", "have w: \"weight t \\<le> weight s\" and v: \"vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s)\""], ["proof (prove)\nusing this:\n  S s t\n\ngoal (1 subgoal):\n 1. weight t \\<le> weight s &&&\n    vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  weight t \\<le> weight s\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s)\n\ngoal (1 subgoal):\n 1. S (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "have v': \"vars_term_ms (SCF ?t) \\<subseteq># vars_term_ms (SCF ?s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_term_ms (SCF (Fun f (ss1 @ t # ss2))) \\<subseteq>#\n    vars_term_ms (SCF (Fun f (ss1 @ s # ss2)))", "using mset_replicate_mono[OF v]"], ["proof (prove)\nusing this:\n  \\<Sum>\\<^sub># (mset (replicate ?n (vars_term_ms (SCF t)))) \\<subseteq>#\n  \\<Sum>\\<^sub># (mset (replicate ?n (vars_term_ms (SCF s))))\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF (Fun f (ss1 @ t # ss2))) \\<subseteq>#\n    vars_term_ms (SCF (Fun f (ss1 @ s # ss2)))", "by simp"], ["proof (state)\nthis:\n  vars_term_ms (SCF (Fun f (ss1 @ t # ss2))) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (ss1 @ s # ss2)))\n\ngoal (1 subgoal):\n 1. S (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "have w': \"weight ?t \\<le> weight ?s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (Fun f (ss1 @ t # ss2)) \\<le> weight (Fun f (ss1 @ s # ss2))", "using sum_list_replicate_mono[OF w]"], ["proof (prove)\nusing this:\n  sum_list (replicate ?n (weight t))\n  \\<le> sum_list (replicate ?n (weight s))\n\ngoal (1 subgoal):\n 1. weight (Fun f (ss1 @ t # ss2)) \\<le> weight (Fun f (ss1 @ s # ss2))", "by simp"], ["proof (state)\nthis:\n  weight (Fun f (ss1 @ t # ss2)) \\<le> weight (Fun f (ss1 @ s # ss2))\n\ngoal (1 subgoal):\n 1. S (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "have lex: \"fst (lex_ext_unbounded kbo ?ss ?ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo (ss1 @ s # ss2) (ss1 @ t # ss2))", "unfolding lex_ext_unbounded_iff fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>i<length (ss1 @ s # ss2).\n        i < length (ss1 @ t # ss2) \\<and>\n        (\\<forall>j<i.\n            NS ((ss1 @ s # ss2) ! j) ((ss1 @ t # ss2) ! j)) \\<and>\n        S ((ss1 @ s # ss2) ! i) ((ss1 @ t # ss2) ! i)) \\<or>\n    (\\<forall>i<length (ss1 @ t # ss2).\n        NS ((ss1 @ s # ss2) ! i) ((ss1 @ t # ss2) ! i)) \\<and>\n    length (ss1 @ t # ss2) < length (ss1 @ s # ss2)", "by (rule disjI1, rule exI[of _ \"length ss1\"], insert S NS_refl, auto simp del: kbo.simps simp: nth_append)"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo (ss1 @ s # ss2) (ss1 @ t # ss2))\n\ngoal (1 subgoal):\n 1. S (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. S (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "using v' w' lex"], ["proof (prove)\nusing this:\n  vars_term_ms (SCF (Fun f (ss1 @ t # ss2))) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (ss1 @ s # ss2)))\n  weight (Fun f (ss1 @ t # ss2)) \\<le> weight (Fun f (ss1 @ s # ss2))\n  fst (lex_ext_unbounded kbo (ss1 @ s # ss2) (ss1 @ t # ss2))\n\ngoal (1 subgoal):\n 1. S (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "by simp"], ["proof (state)\nthis:\n  S (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma S_ctxt: \"S s t \\<Longrightarrow> S (C\\<langle>s\\<rangle>) (C\\<langle>t\\<rangle>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S C\\<langle>s\\<rangle> C\\<langle>t\\<rangle>", "by (induct C, auto simp del: kbo.simps intro: S_mono_one)"], ["", "lemma NS_mono_one:\n  assumes NS: \"NS s t\" shows \"NS (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NS (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. NS (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "let ?ss = \"ss1 @ s # ss2\""], ["proof (state)\ngoal (1 subgoal):\n 1. NS (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "let ?ts = \"ss1 @ t # ss2\""], ["proof (state)\ngoal (1 subgoal):\n 1. NS (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "let ?s = \"Fun f ?ss\""], ["proof (state)\ngoal (1 subgoal):\n 1. NS (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "let ?t = \"Fun f ?ts\""], ["proof (state)\ngoal (1 subgoal):\n 1. NS (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "from NS"], ["proof (chain)\npicking this:\n  NS s t", "have w: \"weight t \\<le> weight s\" and v: \"vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s)\""], ["proof (prove)\nusing this:\n  NS s t\n\ngoal (1 subgoal):\n 1. weight t \\<le> weight s &&&\n    vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  weight t \\<le> weight s\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF s)\n\ngoal (1 subgoal):\n 1. NS (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "have v': \"vars_term_ms (SCF ?t) \\<subseteq># vars_term_ms (SCF ?s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_term_ms (SCF (Fun f (ss1 @ t # ss2))) \\<subseteq>#\n    vars_term_ms (SCF (Fun f (ss1 @ s # ss2)))", "using mset_replicate_mono[OF v]"], ["proof (prove)\nusing this:\n  \\<Sum>\\<^sub># (mset (replicate ?n (vars_term_ms (SCF t)))) \\<subseteq>#\n  \\<Sum>\\<^sub># (mset (replicate ?n (vars_term_ms (SCF s))))\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF (Fun f (ss1 @ t # ss2))) \\<subseteq>#\n    vars_term_ms (SCF (Fun f (ss1 @ s # ss2)))", "by simp"], ["proof (state)\nthis:\n  vars_term_ms (SCF (Fun f (ss1 @ t # ss2))) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (ss1 @ s # ss2)))\n\ngoal (1 subgoal):\n 1. NS (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "have w': \"weight ?t \\<le> weight ?s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (Fun f (ss1 @ t # ss2)) \\<le> weight (Fun f (ss1 @ s # ss2))", "using sum_list_replicate_mono[OF w]"], ["proof (prove)\nusing this:\n  sum_list (replicate ?n (weight t))\n  \\<le> sum_list (replicate ?n (weight s))\n\ngoal (1 subgoal):\n 1. weight (Fun f (ss1 @ t # ss2)) \\<le> weight (Fun f (ss1 @ s # ss2))", "by simp"], ["proof (state)\nthis:\n  weight (Fun f (ss1 @ t # ss2)) \\<le> weight (Fun f (ss1 @ s # ss2))\n\ngoal (1 subgoal):\n 1. NS (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "have lex: \"snd (lex_ext_unbounded kbo ?ss ?ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo (ss1 @ s # ss2) (ss1 @ t # ss2))", "unfolding lex_ext_unbounded_iff snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>i<length (ss1 @ s # ss2).\n        i < length (ss1 @ t # ss2) \\<and>\n        (\\<forall>j<i.\n            NS ((ss1 @ s # ss2) ! j) ((ss1 @ t # ss2) ! j)) \\<and>\n        S ((ss1 @ s # ss2) ! i) ((ss1 @ t # ss2) ! i)) \\<or>\n    (\\<forall>i<length (ss1 @ t # ss2).\n        NS ((ss1 @ s # ss2) ! i) ((ss1 @ t # ss2) ! i)) \\<and>\n    length (ss1 @ t # ss2) \\<le> length (ss1 @ s # ss2)", "proof (intro disjI2 conjI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length (ss1 @ t # ss2) \\<Longrightarrow>\n       NS ((ss1 @ s # ss2) ! i) ((ss1 @ t # ss2) ! i)\n 2. length (ss1 @ t # ss2) \\<le> length (ss1 @ s # ss2)", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length (ss1 @ t # ss2) \\<Longrightarrow>\n       NS ((ss1 @ s # ss2) ! i) ((ss1 @ t # ss2) ! i)\n 2. length (ss1 @ t # ss2) \\<le> length (ss1 @ s # ss2)", "assume \"i < length (ss1 @ t # ss2)\""], ["proof (state)\nthis:\n  i < length (ss1 @ t # ss2)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < length (ss1 @ t # ss2) \\<Longrightarrow>\n       NS ((ss1 @ s # ss2) ! i) ((ss1 @ t # ss2) ! i)\n 2. length (ss1 @ t # ss2) \\<le> length (ss1 @ s # ss2)", "then"], ["proof (chain)\npicking this:\n  i < length (ss1 @ t # ss2)", "show \"NS (?ss ! i) (?ts ! i)\""], ["proof (prove)\nusing this:\n  i < length (ss1 @ t # ss2)\n\ngoal (1 subgoal):\n 1. NS ((ss1 @ s # ss2) ! i) ((ss1 @ t # ss2) ! i)", "using NS NS_refl"], ["proof (prove)\nusing this:\n  i < length (ss1 @ t # ss2)\n  NS s t\n  NS ?s ?s\n\ngoal (1 subgoal):\n 1. NS ((ss1 @ s # ss2) ! i) ((ss1 @ t # ss2) ! i)", "by (cases \"i = length ss1\", auto simp del: kbo.simps simp: nth_append)"], ["proof (state)\nthis:\n  NS ((ss1 @ s # ss2) ! i) ((ss1 @ t # ss2) ! i)\n\ngoal (1 subgoal):\n 1. length (ss1 @ t # ss2) \\<le> length (ss1 @ s # ss2)", "qed simp"], ["proof (state)\nthis:\n  snd (lex_ext_unbounded kbo (ss1 @ s # ss2) (ss1 @ t # ss2))\n\ngoal (1 subgoal):\n 1. NS (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. NS (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "using v' w' lex"], ["proof (prove)\nusing this:\n  vars_term_ms (SCF (Fun f (ss1 @ t # ss2))) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (ss1 @ s # ss2)))\n  weight (Fun f (ss1 @ t # ss2)) \\<le> weight (Fun f (ss1 @ s # ss2))\n  snd (lex_ext_unbounded kbo (ss1 @ s # ss2) (ss1 @ t # ss2))\n\ngoal (1 subgoal):\n 1. NS (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "by simp"], ["proof (state)\nthis:\n  NS (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma NS_ctxt: \"NS s t \\<Longrightarrow> NS (C\\<langle>s\\<rangle>) (C\\<langle>t\\<rangle>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NS s t \\<Longrightarrow> NS C\\<langle>s\\<rangle> C\\<langle>t\\<rangle>", "by (induct C, auto simp del: kbo.simps intro: NS_mono_one)"], ["", "subsection \\<open>The Subterm Property\\<close>"], ["", "lemma NS_Var_imp_eq_least: \"NS (Var x) t \\<Longrightarrow> t = Var x \\<or> (\\<exists> f. t = Fun f [] \\<and> least f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NS (Var x) t \\<Longrightarrow>\n    t = Var x \\<or> (\\<exists>f. t = Fun f [] \\<and> least f)", "by (cases t, insert weight_w0[of t], auto split: if_splits)"], ["", "lemma kbo_supt_one: \"NS s (t :: ('f, 'v) term) \\<Longrightarrow> S (Fun f (bef @ s # aft)) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NS s t \\<Longrightarrow> S (Fun f (bef @ s # aft)) t", "proof (induct t arbitrary: f s bef aft)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x f s bef aft.\n       NS s (Var x) \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Var x)\n 2. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "case (Var x)"], ["proof (state)\nthis:\n  NS s (Var x)\n\ngoal (2 subgoals):\n 1. \\<And>x f s bef aft.\n       NS s (Var x) \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Var x)\n 2. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "note NS = this"], ["proof (state)\nthis:\n  NS s (Var x)\n\ngoal (2 subgoals):\n 1. \\<And>x f s bef aft.\n       NS s (Var x) \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Var x)\n 2. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "let ?ss = \"bef @ s # aft\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x f s bef aft.\n       NS s (Var x) \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Var x)\n 2. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "let ?t = \"Var x\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x f s bef aft.\n       NS s (Var x) \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Var x)\n 2. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "have \"length bef < length ?ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length bef < length (bef @ s # aft)", "by auto"], ["proof (state)\nthis:\n  length bef < length (bef @ s # aft)\n\ngoal (2 subgoals):\n 1. \\<And>x f s bef aft.\n       NS s (Var x) \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Var x)\n 2. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "from scf[OF this, of f]"], ["proof (chain)\npicking this:\n  0 < scf (f, length (bef @ s # aft)) (length bef)", "obtain n where scf:\"scf (f, length ?ss) (length bef) = Suc n\""], ["proof (prove)\nusing this:\n  0 < scf (f, length (bef @ s # aft)) (length bef)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        scf (f, length (bef @ s # aft)) (length bef) =\n        Suc n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: lessE)"], ["proof (state)\nthis:\n  scf (f, length (bef @ s # aft)) (length bef) = Suc n\n\ngoal (2 subgoals):\n 1. \\<And>x f s bef aft.\n       NS s (Var x) \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Var x)\n 2. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "obtain X where \"vars_term_ms (SCF (Fun f ?ss)) = vars_term_ms (SCF s) + X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>X.\n        vars_term_ms (SCF (Fun f (bef @ s # aft))) =\n        vars_term_ms (SCF s) + X \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (simp add: o_def scf[simplified])"], ["proof (state)\nthis:\n  vars_term_ms (SCF (Fun f (bef @ s # aft))) = vars_term_ms (SCF s) + X\n\ngoal (2 subgoals):\n 1. \\<And>x f s bef aft.\n       NS s (Var x) \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Var x)\n 2. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "then"], ["proof (chain)\npicking this:\n  vars_term_ms (SCF (Fun f (bef @ s # aft))) = vars_term_ms (SCF s) + X", "have vs: \"vars_term_ms (SCF s) \\<subseteq># vars_term_ms (SCF (Fun f ?ss))\""], ["proof (prove)\nusing this:\n  vars_term_ms (SCF (Fun f (bef @ s # aft))) = vars_term_ms (SCF s) + X\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF s) \\<subseteq>#\n    vars_term_ms (SCF (Fun f (bef @ s # aft)))", "by simp"], ["proof (state)\nthis:\n  vars_term_ms (SCF s) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))\n\ngoal (2 subgoals):\n 1. \\<And>x f s bef aft.\n       NS s (Var x) \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Var x)\n 2. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "from NS"], ["proof (chain)\npicking this:\n  NS s (Var x)", "have vt: \"vars_term_ms (SCF ?t) \\<subseteq># vars_term_ms (SCF s)\""], ["proof (prove)\nusing this:\n  NS s (Var x)\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF (Var x)) \\<subseteq># vars_term_ms (SCF s)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  vars_term_ms (SCF (Var x)) \\<subseteq># vars_term_ms (SCF s)\n\ngoal (2 subgoals):\n 1. \\<And>x f s bef aft.\n       NS s (Var x) \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Var x)\n 2. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "from vt vs"], ["proof (chain)\npicking this:\n  vars_term_ms (SCF (Var x)) \\<subseteq># vars_term_ms (SCF s)\n  vars_term_ms (SCF s) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))", "have v: \"vars_term_ms (SCF ?t) \\<subseteq># vars_term_ms (SCF (Fun f ?ss))\""], ["proof (prove)\nusing this:\n  vars_term_ms (SCF (Var x)) \\<subseteq># vars_term_ms (SCF s)\n  vars_term_ms (SCF s) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF (Var x)) \\<subseteq>#\n    vars_term_ms (SCF (Fun f (bef @ s # aft)))", "by (rule subset_mset.order_trans)"], ["proof (state)\nthis:\n  vars_term_ms (SCF (Var x)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))\n\ngoal (2 subgoals):\n 1. \\<And>x f s bef aft.\n       NS s (Var x) \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Var x)\n 2. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "from weight_w0[of \"Fun f ?ss\"] v"], ["proof (chain)\npicking this:\n  w0 \\<le> weight (Fun f (bef @ s # aft))\n  vars_term_ms (SCF (Var x)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))", "show ?case"], ["proof (prove)\nusing this:\n  w0 \\<le> weight (Fun f (bef @ s # aft))\n  vars_term_ms (SCF (Var x)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))\n\ngoal (1 subgoal):\n 1. S (Fun f (bef @ s # aft)) (Var x)", "by simp"], ["proof (state)\nthis:\n  S (Fun f (bef @ s # aft)) (Var x)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "case (Fun g ts f s bef aft)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a13 \\<in> set ts; NS ?s13 ?x2a13\\<rbrakk>\n  \\<Longrightarrow> S (Fun ?f13 (?bef13 @ ?s13 # ?aft13)) ?x2a13\n  NS s (Fun g ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "let ?t = \"Fun g ts\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "let ?ss = \"bef @ s # aft\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "note NS = Fun(2)"], ["proof (state)\nthis:\n  NS s (Fun g ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "note IH = Fun(1)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a13 \\<in> set ts; NS ?s13 ?x2a13\\<rbrakk>\n  \\<Longrightarrow> S (Fun ?f13 (?bef13 @ ?s13 # ?aft13)) ?x2a13\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "have \"length bef < length ?ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length bef < length (bef @ s # aft)", "by auto"], ["proof (state)\nthis:\n  length bef < length (bef @ s # aft)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "from scf[OF this, of f]"], ["proof (chain)\npicking this:\n  0 < scf (f, length (bef @ s # aft)) (length bef)", "obtain n where scff:\"scf (f, length ?ss) (length bef) = Suc n\""], ["proof (prove)\nusing this:\n  0 < scf (f, length (bef @ s # aft)) (length bef)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        scf (f, length (bef @ s # aft)) (length bef) =\n        Suc n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: lessE)"], ["proof (state)\nthis:\n  scf (f, length (bef @ s # aft)) (length bef) = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "note scff = scff[simplified]"], ["proof (state)\nthis:\n  scf (f, Suc (length bef + length aft)) (length bef) = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "obtain X where \"vars_term_ms (SCF (Fun f ?ss)) = vars_term_ms (SCF s) + X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>X.\n        vars_term_ms (SCF (Fun f (bef @ s # aft))) =\n        vars_term_ms (SCF s) + X \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (simp add: o_def scff)"], ["proof (state)\nthis:\n  vars_term_ms (SCF (Fun f (bef @ s # aft))) = vars_term_ms (SCF s) + X\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "then"], ["proof (chain)\npicking this:\n  vars_term_ms (SCF (Fun f (bef @ s # aft))) = vars_term_ms (SCF s) + X", "have vs: \"vars_term_ms (SCF s) \\<subseteq># vars_term_ms (SCF (Fun f ?ss))\""], ["proof (prove)\nusing this:\n  vars_term_ms (SCF (Fun f (bef @ s # aft))) = vars_term_ms (SCF s) + X\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF s) \\<subseteq>#\n    vars_term_ms (SCF (Fun f (bef @ s # aft)))", "by simp"], ["proof (state)\nthis:\n  vars_term_ms (SCF s) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "have ws: \"weight s \\<le> sum_list (map weight (scf_list (scf (f, length ?ss)) ?ss))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight s\n    \\<le> sum_list\n           (map weight\n             (scf_list (scf (f, length (bef @ s # aft))) (bef @ s # aft)))", "by (simp add: scff)"], ["proof (state)\nthis:\n  weight s\n  \\<le> sum_list\n         (map weight\n           (scf_list (scf (f, length (bef @ s # aft))) (bef @ s # aft)))\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "from NS"], ["proof (chain)\npicking this:\n  NS s (Fun g ts)", "have wt: \"weight ?t \\<le> weight s\" and\n    vt: \"vars_term_ms (SCF ?t) \\<subseteq># vars_term_ms (SCF s)\""], ["proof (prove)\nusing this:\n  NS s (Fun g ts)\n\ngoal (1 subgoal):\n 1. weight (Fun g ts) \\<le> weight s &&&\n    vars_term_ms (SCF (Fun g ts)) \\<subseteq># vars_term_ms (SCF s)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  weight (Fun g ts) \\<le> weight s\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq># vars_term_ms (SCF s)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "from ws wt"], ["proof (chain)\npicking this:\n  weight s\n  \\<le> sum_list\n         (map weight\n           (scf_list (scf (f, length (bef @ s # aft))) (bef @ s # aft)))\n  weight (Fun g ts) \\<le> weight s", "have w: \"weight ?t \\<le> sum_list (map weight (scf_list (scf (f, length ?ss)) ?ss))\""], ["proof (prove)\nusing this:\n  weight s\n  \\<le> sum_list\n         (map weight\n           (scf_list (scf (f, length (bef @ s # aft))) (bef @ s # aft)))\n  weight (Fun g ts) \\<le> weight s\n\ngoal (1 subgoal):\n 1. weight (Fun g ts)\n    \\<le> sum_list\n           (map weight\n             (scf_list (scf (f, length (bef @ s # aft))) (bef @ s # aft)))", "by simp"], ["proof (state)\nthis:\n  weight (Fun g ts)\n  \\<le> sum_list\n         (map weight\n           (scf_list (scf (f, length (bef @ s # aft))) (bef @ s # aft)))\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "from vt vs"], ["proof (chain)\npicking this:\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq># vars_term_ms (SCF s)\n  vars_term_ms (SCF s) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))", "have v: \"vars_term_ms (SCF ?t) \\<subseteq># vars_term_ms (SCF (Fun f ?ss))\""], ["proof (prove)\nusing this:\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq># vars_term_ms (SCF s)\n  vars_term_ms (SCF s) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n    vars_term_ms (SCF (Fun f (bef @ s # aft)))", "by auto"], ["proof (state)\nthis:\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "then"], ["proof (chain)\npicking this:\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))", "have v': \"(vars_term_ms (SCF ?t) \\<subseteq># vars_term_ms (SCF (Fun f ?ss))) = True\""], ["proof (prove)\nusing this:\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))\n\ngoal (1 subgoal):\n 1. (vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n     vars_term_ms (SCF (Fun f (bef @ s # aft)))) =\n    True", "by simp"], ["proof (state)\nthis:\n  (vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n   vars_term_ms (SCF (Fun f (bef @ s # aft)))) =\n  True\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 f s bef aft.\n       \\<lbrakk>\\<And>x2a f s bef aft.\n                   \\<lbrakk>x2a \\<in> set x2; NS s x2a\\<rbrakk>\n                   \\<Longrightarrow> S (Fun f (bef @ s # aft)) x2a;\n        NS s (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun x1a x2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. S (Fun f (bef @ s # aft)) (Fun g ts)", "proof (cases \"weight ?t = weight (Fun f ?ss)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)\n 2. weight (Fun g ts) \\<noteq>\n    weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "case False"], ["proof (state)\nthis:\n  weight (Fun g ts) \\<noteq> weight (Fun f (bef @ s # aft))\n\ngoal (2 subgoals):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)\n 2. weight (Fun g ts) \\<noteq>\n    weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "with w v"], ["proof (chain)\npicking this:\n  weight (Fun g ts)\n  \\<le> sum_list\n         (map weight\n           (scf_list (scf (f, length (bef @ s # aft))) (bef @ s # aft)))\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))\n  weight (Fun g ts) \\<noteq> weight (Fun f (bef @ s # aft))", "show ?thesis"], ["proof (prove)\nusing this:\n  weight (Fun g ts)\n  \\<le> sum_list\n         (map weight\n           (scf_list (scf (f, length (bef @ s # aft))) (bef @ s # aft)))\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))\n  weight (Fun g ts) \\<noteq> weight (Fun f (bef @ s # aft))\n\ngoal (1 subgoal):\n 1. S (Fun f (bef @ s # aft)) (Fun g ts)", "by auto"], ["proof (state)\nthis:\n  S (Fun f (bef @ s # aft)) (Fun g ts)\n\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "case True"], ["proof (state)\nthis:\n  weight (Fun g ts) = weight (Fun f (bef @ s # aft))\n\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "from wt[unfolded True] weight_gt_0[of s]"], ["proof (chain)\npicking this:\n  weight (Fun f (bef @ s # aft)) \\<le> weight s\n  0 < weight s", "have wf: \"w (f, length ?ss) = 0\"\n      and lsum: \"sum_list (map weight (scf_list (scf (f, length ?ss)) bef)) = 0\"\n      \"sum_list (map weight (scf_list (\\<lambda> i. (scf (f, length ?ss) (Suc (length bef) + i))) aft)) = 0\"\n      and n: \"n = 0\""], ["proof (prove)\nusing this:\n  weight (Fun f (bef @ s # aft)) \\<le> weight s\n  0 < weight s\n\ngoal (1 subgoal):\n 1. w (f, length (bef @ s # aft)) = 0 &&&\n    (sum_list\n      (map weight (scf_list (scf (f, length (bef @ s # aft))) bef)) =\n     0 &&&\n     sum_list\n      (map weight\n        (scf_list\n          (\\<lambda>i.\n              scf (f, length (bef @ s # aft)) (Suc (length bef) + i))\n          aft)) =\n     0) &&&\n    n = 0", "by (auto simp: scff)"], ["proof (state)\nthis:\n  w (f, length (bef @ s # aft)) = 0\n  sum_list (map weight (scf_list (scf (f, length (bef @ s # aft))) bef)) = 0\n  sum_list\n   (map weight\n     (scf_list\n       (\\<lambda>i. scf (f, length (bef @ s # aft)) (Suc (length bef) + i))\n       aft)) =\n  0\n  n = 0\n\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "have \"sum_list (map weight bef) \\<le> sum_list (map weight (scf_list (scf (f, length ?ss)) bef))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map weight bef)\n    \\<le> sum_list\n           (map weight (scf_list (scf (f, length (bef @ s # aft))) bef))", "by (rule sum_list_scf_list, rule scf, auto)"], ["proof (state)\nthis:\n  sum_list (map weight bef)\n  \\<le> sum_list\n         (map weight (scf_list (scf (f, length (bef @ s # aft))) bef))\n\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "with lsum(1)"], ["proof (chain)\npicking this:\n  sum_list (map weight (scf_list (scf (f, length (bef @ s # aft))) bef)) = 0\n  sum_list (map weight bef)\n  \\<le> sum_list\n         (map weight (scf_list (scf (f, length (bef @ s # aft))) bef))", "have \"sum_list (map weight bef) = 0\""], ["proof (prove)\nusing this:\n  sum_list (map weight (scf_list (scf (f, length (bef @ s # aft))) bef)) = 0\n  sum_list (map weight bef)\n  \\<le> sum_list\n         (map weight (scf_list (scf (f, length (bef @ s # aft))) bef))\n\ngoal (1 subgoal):\n 1. sum_list (map weight bef) = 0", "by arith"], ["proof (state)\nthis:\n  sum_list (map weight bef) = 0\n\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "then"], ["proof (chain)\npicking this:\n  sum_list (map weight bef) = 0", "have bef: \"bef = []\""], ["proof (prove)\nusing this:\n  sum_list (map weight bef) = 0\n\ngoal (1 subgoal):\n 1. bef = []", "using weight_gt_0[of \"hd bef\"]"], ["proof (prove)\nusing this:\n  sum_list (map weight bef) = 0\n  0 < weight (hd bef)\n\ngoal (1 subgoal):\n 1. bef = []", "by (cases bef, auto)"], ["proof (state)\nthis:\n  bef = []\n\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "have \"sum_list (map weight aft) \\<le> sum_list (map weight (scf_list (\\<lambda> i. (scf (f, length ?ss) (Suc (length bef) + i))) aft))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map weight aft)\n    \\<le> sum_list\n           (map weight\n             (scf_list\n               (\\<lambda>i.\n                   scf (f, length (bef @ s # aft)) (Suc (length bef) + i))\n               aft))", "by (rule sum_list_scf_list, rule scf, auto)"], ["proof (state)\nthis:\n  sum_list (map weight aft)\n  \\<le> sum_list\n         (map weight\n           (scf_list\n             (\\<lambda>i.\n                 scf (f, length (bef @ s # aft)) (Suc (length bef) + i))\n             aft))\n\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "with lsum(2)"], ["proof (chain)\npicking this:\n  sum_list\n   (map weight\n     (scf_list\n       (\\<lambda>i. scf (f, length (bef @ s # aft)) (Suc (length bef) + i))\n       aft)) =\n  0\n  sum_list (map weight aft)\n  \\<le> sum_list\n         (map weight\n           (scf_list\n             (\\<lambda>i.\n                 scf (f, length (bef @ s # aft)) (Suc (length bef) + i))\n             aft))", "have \"sum_list (map weight aft) = 0\""], ["proof (prove)\nusing this:\n  sum_list\n   (map weight\n     (scf_list\n       (\\<lambda>i. scf (f, length (bef @ s # aft)) (Suc (length bef) + i))\n       aft)) =\n  0\n  sum_list (map weight aft)\n  \\<le> sum_list\n         (map weight\n           (scf_list\n             (\\<lambda>i.\n                 scf (f, length (bef @ s # aft)) (Suc (length bef) + i))\n             aft))\n\ngoal (1 subgoal):\n 1. sum_list (map weight aft) = 0", "by arith"], ["proof (state)\nthis:\n  sum_list (map weight aft) = 0\n\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "then"], ["proof (chain)\npicking this:\n  sum_list (map weight aft) = 0", "have aft: \"aft = []\""], ["proof (prove)\nusing this:\n  sum_list (map weight aft) = 0\n\ngoal (1 subgoal):\n 1. aft = []", "using weight_gt_0[of \"hd aft\"]"], ["proof (prove)\nusing this:\n  sum_list (map weight aft) = 0\n  0 < weight (hd aft)\n\ngoal (1 subgoal):\n 1. aft = []", "by (cases aft, auto)"], ["proof (state)\nthis:\n  aft = []\n\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "note scff = scff[unfolded bef aft n, simplified]"], ["proof (state)\nthis:\n  scf (f, Suc 0) 0 = Suc 0\n\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "from bef aft"], ["proof (chain)\npicking this:\n  bef = []\n  aft = []", "have ba: \"bef @ s # aft = [s]\""], ["proof (prove)\nusing this:\n  bef = []\n  aft = []\n\ngoal (1 subgoal):\n 1. bef @ s # aft = [s]", "by simp"], ["proof (state)\nthis:\n  bef @ s # aft = [s]\n\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "with wf"], ["proof (chain)\npicking this:\n  w (f, length (bef @ s # aft)) = 0\n  bef @ s # aft = [s]", "have wf: \"w (f, 1) = 0\""], ["proof (prove)\nusing this:\n  w (f, length (bef @ s # aft)) = 0\n  bef @ s # aft = [s]\n\ngoal (1 subgoal):\n 1. w (f, 1) = 0", "by auto"], ["proof (state)\nthis:\n  w (f, 1) = 0\n\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "from wf"], ["proof (chain)\npicking this:\n  w (f, 1) = 0", "have wst: \"weight s = weight ?t\""], ["proof (prove)\nusing this:\n  w (f, 1) = 0\n\ngoal (1 subgoal):\n 1. weight s = weight (Fun g ts)", "using scff"], ["proof (prove)\nusing this:\n  w (f, 1) = 0\n  scf (f, Suc 0) 0 = Suc 0\n\ngoal (1 subgoal):\n 1. weight s = weight (Fun g ts)", "unfolding True[unfolded ba]"], ["proof (prove)\nusing this:\n  w (f, 1) = 0\n  scf (f, Suc 0) 0 = Suc 0\n\ngoal (1 subgoal):\n 1. weight s = weight (Fun f [s])", "by (simp add: scf_list_def)"], ["proof (state)\nthis:\n  weight s = weight (Fun g ts)\n\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "let ?g = \"(g, length ts)\""], ["proof (state)\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "let ?f = \"(f, 1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun f (bef @ s # aft)) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. S (Fun f (bef @ s # aft)) (Fun g ts)", "proof (cases \"pr_strict ?f ?g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. pr_strict (f, 1) (g, length ts) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)\n 2. \\<not> pr_strict (f, 1) (g, length ts) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "case True"], ["proof (state)\nthis:\n  pr_strict (f, 1) (g, length ts)\n\ngoal (2 subgoals):\n 1. pr_strict (f, 1) (g, length ts) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)\n 2. \\<not> pr_strict (f, 1) (g, length ts) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "with w v"], ["proof (chain)\npicking this:\n  weight (Fun g ts)\n  \\<le> sum_list\n         (map weight\n           (scf_list (scf (f, length (bef @ s # aft))) (bef @ s # aft)))\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))\n  pr_strict (f, 1) (g, length ts)", "show ?thesis"], ["proof (prove)\nusing this:\n  weight (Fun g ts)\n  \\<le> sum_list\n         (map weight\n           (scf_list (scf (f, length (bef @ s # aft))) (bef @ s # aft)))\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))\n  pr_strict (f, 1) (g, length ts)\n\ngoal (1 subgoal):\n 1. S (Fun f (bef @ s # aft)) (Fun g ts)", "unfolding ba"], ["proof (prove)\nusing this:\n  weight (Fun g ts)\n  \\<le> sum_list (map weight (scf_list (scf (f, length [s])) [s]))\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq># vars_term_ms (SCF (Fun f [s]))\n  pr_strict (f, 1) (g, length ts)\n\ngoal (1 subgoal):\n 1. S (Fun f [s]) (Fun g ts)", "by simp"], ["proof (state)\nthis:\n  S (Fun f (bef @ s # aft)) (Fun g ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, 1) (g, length ts) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, 1) (g, length ts) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "case False"], ["proof (state)\nthis:\n  \\<not> pr_strict (f, 1) (g, length ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, 1) (g, length ts) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "note admf = adm[OF wf]"], ["proof (state)\nthis:\n  pr_weak (f, 1) (?g, ?n)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, 1) (g, length ts) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "from admf"], ["proof (chain)\npicking this:\n  pr_weak (f, 1) (?g, ?n)", "have pg: \"pr_weak ?f ?g\""], ["proof (prove)\nusing this:\n  pr_weak (f, 1) (?g, ?n)\n\ngoal (1 subgoal):\n 1. pr_weak (f, 1) (g, length ts)", "."], ["proof (state)\nthis:\n  pr_weak (f, 1) (g, length ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, 1) (g, length ts) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "from pg False[unfolded pr_strict]"], ["proof (chain)\npicking this:\n  pr_weak (f, 1) (g, length ts)\n  \\<not> (pr_weak (f, 1) (g, length ts) \\<and>\n          \\<not> pr_weak (g, length ts) (f, 1))", "have \"pr_weak ?g ?f\""], ["proof (prove)\nusing this:\n  pr_weak (f, 1) (g, length ts)\n  \\<not> (pr_weak (f, 1) (g, length ts) \\<and>\n          \\<not> pr_weak (g, length ts) (f, 1))\n\ngoal (1 subgoal):\n 1. pr_weak (g, length ts) (f, 1)", "by auto"], ["proof (state)\nthis:\n  pr_weak (g, length ts) (f, 1)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, 1) (g, length ts) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "from pr_weak_trans[OF this admf]"], ["proof (chain)\npicking this:\n  pr_weak (g, length ts) (?g1, ?n1)", "have g: \"\\<And> h k. pr_weak ?g (h, k)\""], ["proof (prove)\nusing this:\n  pr_weak (g, length ts) (?g1, ?n1)\n\ngoal (1 subgoal):\n 1. \\<And>h k. pr_weak (g, length ts) (h, k)", "."], ["proof (state)\nthis:\n  pr_weak (g, length ts) (?h14, ?k14)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, 1) (g, length ts) \\<Longrightarrow>\n    S (Fun f (bef @ s # aft)) (Fun g ts)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. S (Fun f (bef @ s # aft)) (Fun g ts)", "proof (cases ts)"], ["proof (state)\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)\n 2. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "case Nil"], ["proof (state)\nthis:\n  ts = []\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)\n 2. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "have \"fst (lex_ext_unbounded kbo [s] ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo [s] ts)", "unfolding Nil lex_ext_unbounded_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ((\\<exists>i<length [s].\n             i < length [] \\<and>\n             (\\<forall>j<i. NS ([s] ! j) ([] ! j)) \\<and>\n             S ([s] ! i) ([] ! i)) \\<or>\n         (\\<forall>i<length []. NS ([s] ! i) ([] ! i)) \\<and>\n         length [] < length [s],\n         (\\<exists>i<length [s].\n             i < length [] \\<and>\n             (\\<forall>j<i. NS ([s] ! j) ([] ! j)) \\<and>\n             S ([s] ! i) ([] ! i)) \\<or>\n         (\\<forall>i<length []. NS ([s] ! i) ([] ! i)) \\<and>\n         length [] \\<le> length [s])", "by auto"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo [s] ts)\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)\n 2. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "with pg w v"], ["proof (chain)\npicking this:\n  pr_weak (f, 1) (g, length ts)\n  weight (Fun g ts)\n  \\<le> sum_list\n         (map weight\n           (scf_list (scf (f, length (bef @ s # aft))) (bef @ s # aft)))\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))\n  fst (lex_ext_unbounded kbo [s] ts)", "show ?thesis"], ["proof (prove)\nusing this:\n  pr_weak (f, 1) (g, length ts)\n  weight (Fun g ts)\n  \\<le> sum_list\n         (map weight\n           (scf_list (scf (f, length (bef @ s # aft))) (bef @ s # aft)))\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (bef @ s # aft)))\n  fst (lex_ext_unbounded kbo [s] ts)\n\ngoal (1 subgoal):\n 1. S (Fun f (bef @ s # aft)) (Fun g ts)", "unfolding ba"], ["proof (prove)\nusing this:\n  pr_weak (f, 1) (g, length ts)\n  weight (Fun g ts)\n  \\<le> sum_list (map weight (scf_list (scf (f, length [s])) [s]))\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq># vars_term_ms (SCF (Fun f [s]))\n  fst (lex_ext_unbounded kbo [s] ts)\n\ngoal (1 subgoal):\n 1. S (Fun f [s]) (Fun g ts)", "by simp"], ["proof (state)\nthis:\n  S (Fun f (bef @ s # aft)) (Fun g ts)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "case (Cons t tts)"], ["proof (state)\nthis:\n  ts = t # tts\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "{"], ["proof (state)\nthis:\n  ts = t # tts\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "assume s: \"s = Var x\""], ["proof (state)\nthis:\n  s = Var x\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "from NS_Var_imp_eq_least[OF NS[unfolded s Cons]]"], ["proof (chain)\npicking this:\n  Fun g (t # tts) = Var x \\<or>\n  (\\<exists>f. Fun g (t # tts) = Fun f [] \\<and> least f)", "have False"], ["proof (prove)\nusing this:\n  Fun g (t # tts) = Var x \\<or>\n  (\\<exists>f. Fun g (t # tts) = Fun f [] \\<and> least f)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "}"], ["proof (state)\nthis:\n  s = Var ?x16 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "then"], ["proof (chain)\npicking this:\n  s = Var ?x16 \\<Longrightarrow> False", "obtain h ss where s: \"s = Fun h ss\""], ["proof (prove)\nusing this:\n  s = Var ?x16 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. (\\<And>h ss. s = Fun h ss \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases s, auto)"], ["proof (state)\nthis:\n  s = Fun h ss\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "from NS wst g[of h \"length ss\"] pr_strict[of \"(h, length ss)\" \"(g, length ts)\"]"], ["proof (chain)\npicking this:\n  NS s (Fun g ts)\n  weight s = weight (Fun g ts)\n  pr_weak (g, length ts) (h, length ss)\n  pr_strict (h, length ss) (g, length ts) =\n  (pr_weak (h, length ss) (g, length ts) \\<and>\n   \\<not> pr_weak (g, length ts) (h, length ss))", "have lex: \"snd (lex_ext_unbounded kbo ss ts)\""], ["proof (prove)\nusing this:\n  NS s (Fun g ts)\n  weight s = weight (Fun g ts)\n  pr_weak (g, length ts) (h, length ss)\n  pr_strict (h, length ss) (g, length ts) =\n  (pr_weak (h, length ss) (g, length ts) \\<and>\n   \\<not> pr_weak (g, length ts) (h, length ss))\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo ss ts)", "unfolding s"], ["proof (prove)\nusing this:\n  NS (Fun h ss) (Fun g ts)\n  weight (Fun h ss) = weight (Fun g ts)\n  pr_weak (g, length ts) (h, length ss)\n  pr_strict (h, length ss) (g, length ts) =\n  (pr_weak (h, length ss) (g, length ts) \\<and>\n   \\<not> pr_weak (g, length ts) (h, length ss))\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo ss ts)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  snd (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "from lex"], ["proof (chain)\npicking this:\n  snd (lex_ext_unbounded kbo ss ts)", "obtain s0 sss where ss: \"ss = s0 # sss\""], ["proof (prove)\nusing this:\n  snd (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. (\\<And>s0 sss. ss = s0 # sss \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding Cons lex_ext_unbounded_iff snd_conv"], ["proof (prove)\nusing this:\n  (\\<exists>i<length ss.\n      i < length (t # tts) \\<and>\n      (\\<forall>j<i. NS (ss ! j) ((t # tts) ! j)) \\<and>\n      S (ss ! i) ((t # tts) ! i)) \\<or>\n  (\\<forall>i<length (t # tts). NS (ss ! i) ((t # tts) ! i)) \\<and>\n  length (t # tts) \\<le> length ss\n\ngoal (1 subgoal):\n 1. (\\<And>s0 sss. ss = s0 # sss \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases ss, auto)"], ["proof (state)\nthis:\n  ss = s0 # sss\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "from lex[unfolded ss Cons]"], ["proof (chain)\npicking this:\n  snd (lex_ext_unbounded kbo (s0 # sss) (t # tts))", "have \"S s0 t \\<or> NS s0 t\""], ["proof (prove)\nusing this:\n  snd (lex_ext_unbounded kbo (s0 # sss) (t # tts))\n\ngoal (1 subgoal):\n 1. S s0 t \\<or> NS s0 t", "by (cases \"kbo s0 t\", simp add: lex_ext_unbounded.simps del: kbo.simps split: if_splits)"], ["proof (state)\nthis:\n  S s0 t \\<or> NS s0 t\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "with S_imp_NS[of s0 t]"], ["proof (chain)\npicking this:\n  S s0 t \\<Longrightarrow> NS s0 t\n  S s0 t \\<or> NS s0 t", "have \"NS s0 t\""], ["proof (prove)\nusing this:\n  S s0 t \\<Longrightarrow> NS s0 t\n  S s0 t \\<or> NS s0 t\n\ngoal (1 subgoal):\n 1. NS s0 t", "by blast"], ["proof (state)\nthis:\n  NS s0 t\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "from IH[OF _ this, of h Nil sss]"], ["proof (chain)\npicking this:\n  t \\<in> set ts \\<Longrightarrow> S (Fun h ([] @ s0 # sss)) t", "have S: \"S s t\""], ["proof (prove)\nusing this:\n  t \\<in> set ts \\<Longrightarrow> S (Fun h ([] @ s0 # sss)) t\n\ngoal (1 subgoal):\n 1. S s t", "unfolding Cons s ss"], ["proof (prove)\nusing this:\n  t \\<in> set (t # tts) \\<Longrightarrow> S (Fun h ([] @ s0 # sss)) t\n\ngoal (1 subgoal):\n 1. S (Fun h (s0 # sss)) t", "by simp"], ["proof (state)\nthis:\n  S s t\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "have \"fst (lex_ext_unbounded kbo [s] ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo [s] ts)", "unfolding Cons"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo [s] (t # tts))", "unfolding lex_ext_unbounded_iff fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>i<length [s].\n        i < length (t # tts) \\<and>\n        (\\<forall>j<i. NS ([s] ! j) ((t # tts) ! j)) \\<and>\n        S ([s] ! i) ((t # tts) ! i)) \\<or>\n    (\\<forall>i<length (t # tts). NS ([s] ! i) ((t # tts) ! i)) \\<and>\n    length (t # tts) < length [s]", "by (rule disjI1[OF exI[of _ 0]], insert S, auto simp del: kbo.simps)"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo [s] ts)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "then"], ["proof (chain)\npicking this:\n  fst (lex_ext_unbounded kbo [s] ts)", "have lex: \"fst (lex_ext_unbounded kbo [s] ts) = True\""], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded kbo [s] ts)\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo [s] ts) = True", "by simp"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo [s] ts) = True\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "note all = lex wst[symmetric] S pg scff v'"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo [s] ts) = True\n  weight (Fun g ts) = weight s\n  S s t\n  pr_weak (f, 1) (g, length ts)\n  scf (f, Suc 0) 0 = Suc 0\n  (vars_term_ms (SCF (Fun g ts)) \\<subseteq>#\n   vars_term_ms (SCF (Fun f (bef @ s # aft)))) =\n  True\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "note all = all[unfolded ba, unfolded s ss Cons]"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo [Fun h (s0 # sss)] (t # tts)) = True\n  weight (Fun g (t # tts)) = weight (Fun h (s0 # sss))\n  S (Fun h (s0 # sss)) t\n  pr_weak (f, 1) (g, length (t # tts))\n  scf (f, Suc 0) 0 = Suc 0\n  (vars_term_ms (SCF (Fun g (t # tts))) \\<subseteq>#\n   vars_term_ms (SCF (Fun f [Fun h (s0 # sss)]))) =\n  True\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "have w: \"weight (Fun f [t]) = weight (t :: ('f, 'v) term)\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (Fun f [t]) = weight t", "using wf scff"], ["proof (prove)\nusing this:\n  w (f, 1) = 0\n  scf (f, Suc 0) 0 = Suc 0\n\ngoal (1 subgoal):\n 1. weight (Fun f [t]) = weight t", "by (simp add: scf_list_def)"], ["proof (state)\nthis:\n  weight (Fun f [?t14]) = weight ?t14\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow> S (Fun f (bef @ s # aft)) (Fun g ts)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. S (Fun f (bef @ s # aft)) (Fun g ts)", "unfolding ba"], ["proof (prove)\ngoal (1 subgoal):\n 1. S (Fun f [s]) (Fun g ts)", "unfolding s ss Cons"], ["proof (prove)\ngoal (1 subgoal):\n 1. S (Fun f [Fun h (s0 # sss)]) (Fun g (t # tts))", "unfolding kbo.simps[of \"Fun f [Fun h (s0 # sss)]\"]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (if vars_term_ms (SCF (Fun g (t # tts))) \\<subseteq>#\n            vars_term_ms (SCF (Fun f [Fun h (s0 # sss)])) \\<and>\n            weight (Fun g (t # tts)) \\<le> weight (Fun f [Fun h (s0 # sss)])\n         then if weight (Fun g (t # tts))\n                 < weight (Fun f [Fun h (s0 # sss)])\n              then (True, True)\n              else case Fun f [Fun h (s0 # sss)] of\n                   Var y \\<Rightarrow>\n                     (False,\n                      case Fun g (t # tts) of Var x \\<Rightarrow> x = y\n                      | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n                   | Fun f ss \\<Rightarrow>\n                       case Fun g (t # tts) of\n                       Var x \\<Rightarrow> (True, True)\n                       | Fun g ts \\<Rightarrow>\n                           if pr_strict (f, length ss) (g, length ts)\n                           then (True, True)\n                           else if pr_weak (f, length ss) (g, length ts)\n                                then lex_ext_unbounded kbo ss ts\n                                else (False, False)\n         else (False, False))", "unfolding all w"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (if True \\<and>\n            weight (Fun h (s0 # sss)) \\<le> weight (Fun h (s0 # sss))\n         then if weight (Fun h (s0 # sss)) < weight (Fun h (s0 # sss))\n              then (True, True)\n              else case Fun f [Fun h (s0 # sss)] of\n                   Var y \\<Rightarrow>\n                     (False,\n                      case Fun g (t # tts) of Var x \\<Rightarrow> x = y\n                      | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n                   | Fun f ss \\<Rightarrow>\n                       case Fun g (t # tts) of\n                       Var x \\<Rightarrow> (True, True)\n                       | Fun g ts \\<Rightarrow>\n                           if pr_strict (f, length ss) (g, length ts)\n                           then (True, True)\n                           else if pr_weak (f, length ss) (g, length ts)\n                                then lex_ext_unbounded kbo ss ts\n                                else (False, False)\n         else (False, False))", "using all"], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded kbo [Fun h (s0 # sss)] (t # tts)) = True\n  weight (Fun g (t # tts)) = weight (Fun h (s0 # sss))\n  S (Fun h (s0 # sss)) t\n  pr_weak (f, 1) (g, length (t # tts))\n  scf (f, Suc 0) 0 = Suc 0\n  (vars_term_ms (SCF (Fun g (t # tts))) \\<subseteq>#\n   vars_term_ms (SCF (Fun f [Fun h (s0 # sss)]))) =\n  True\n\ngoal (1 subgoal):\n 1. fst (if True \\<and>\n            weight (Fun h (s0 # sss)) \\<le> weight (Fun h (s0 # sss))\n         then if weight (Fun h (s0 # sss)) < weight (Fun h (s0 # sss))\n              then (True, True)\n              else case Fun f [Fun h (s0 # sss)] of\n                   Var y \\<Rightarrow>\n                     (False,\n                      case Fun g (t # tts) of Var x \\<Rightarrow> x = y\n                      | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n                   | Fun f ss \\<Rightarrow>\n                       case Fun g (t # tts) of\n                       Var x \\<Rightarrow> (True, True)\n                       | Fun g ts \\<Rightarrow>\n                           if pr_strict (f, length ss) (g, length ts)\n                           then (True, True)\n                           else if pr_weak (f, length ss) (g, length ts)\n                                then lex_ext_unbounded kbo ss ts\n                                else (False, False)\n         else (False, False))", "by simp"], ["proof (state)\nthis:\n  S (Fun f (bef @ s # aft)) (Fun g ts)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S (Fun f (bef @ s # aft)) (Fun g ts)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S (Fun f (bef @ s # aft)) (Fun g ts)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S (Fun f (bef @ s # aft)) (Fun g ts)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma S_supt:\n  assumes supt: \"s \\<rhd> t\"\n  shows \"S s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S s t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S s t", "from supt"], ["proof (chain)\npicking this:\n  s \\<rhd> t", "obtain C where s: \"s = C\\<langle>t\\<rangle>\" and C: \"C \\<noteq> \\<box>\""], ["proof (prove)\nusing this:\n  s \\<rhd> t\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>s = C\\<langle>t\\<rangle>; C \\<noteq> \\<box>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s = C\\<langle>t\\<rangle>\n  C \\<noteq> \\<box>\n\ngoal (1 subgoal):\n 1. S s t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. S s t", "unfolding s"], ["proof (prove)\ngoal (1 subgoal):\n 1. S C\\<langle>t\\<rangle> t", "using C"], ["proof (prove)\nusing this:\n  C \\<noteq> \\<box>\n\ngoal (1 subgoal):\n 1. S C\\<langle>t\\<rangle> t", "proof (induct C arbitrary: t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<box> \\<noteq> \\<box> \\<Longrightarrow>\n       S \\<box>\\<langle>t\\<rangle> t\n 2. \\<And>x1 x2 C x4 t.\n       \\<lbrakk>\\<And>t.\n                   C \\<noteq> \\<box> \\<Longrightarrow>\n                   S C\\<langle>t\\<rangle> t;\n        More x1 x2 C x4 \\<noteq> \\<box>\\<rbrakk>\n       \\<Longrightarrow> S (More x1 x2 C x4)\\<langle>t\\<rangle> t", "case (More f bef C aft t)"], ["proof (state)\nthis:\n  C \\<noteq> \\<box> \\<Longrightarrow> S C\\<langle>?t13\\<rangle> ?t13\n  More f bef C aft \\<noteq> \\<box>\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<box> \\<noteq> \\<box> \\<Longrightarrow>\n       S \\<box>\\<langle>t\\<rangle> t\n 2. \\<And>x1 x2 C x4 t.\n       \\<lbrakk>\\<And>t.\n                   C \\<noteq> \\<box> \\<Longrightarrow>\n                   S C\\<langle>t\\<rangle> t;\n        More x1 x2 C x4 \\<noteq> \\<box>\\<rbrakk>\n       \\<Longrightarrow> S (More x1 x2 C x4)\\<langle>t\\<rangle> t", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. S (More f bef C aft)\\<langle>t\\<rangle> t", "proof (cases \"C = \\<box>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. C = \\<box> \\<Longrightarrow> S (More f bef C aft)\\<langle>t\\<rangle> t\n 2. C \\<noteq> \\<box> \\<Longrightarrow>\n    S (More f bef C aft)\\<langle>t\\<rangle> t", "case True"], ["proof (state)\nthis:\n  C = \\<box>\n\ngoal (2 subgoals):\n 1. C = \\<box> \\<Longrightarrow> S (More f bef C aft)\\<langle>t\\<rangle> t\n 2. C \\<noteq> \\<box> \\<Longrightarrow>\n    S (More f bef C aft)\\<langle>t\\<rangle> t", "from kbo_supt_one[OF NS_refl, of f bef t aft]"], ["proof (chain)\npicking this:\n  S (Fun f (bef @ t # aft)) t", "show ?thesis"], ["proof (prove)\nusing this:\n  S (Fun f (bef @ t # aft)) t\n\ngoal (1 subgoal):\n 1. S (More f bef C aft)\\<langle>t\\<rangle> t", "unfolding True"], ["proof (prove)\nusing this:\n  S (Fun f (bef @ t # aft)) t\n\ngoal (1 subgoal):\n 1. S (More f bef \\<box> aft)\\<langle>t\\<rangle> t", "by simp"], ["proof (state)\nthis:\n  S (More f bef C aft)\\<langle>t\\<rangle> t\n\ngoal (1 subgoal):\n 1. C \\<noteq> \\<box> \\<Longrightarrow>\n    S (More f bef C aft)\\<langle>t\\<rangle> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. C \\<noteq> \\<box> \\<Longrightarrow>\n    S (More f bef C aft)\\<langle>t\\<rangle> t", "case False"], ["proof (state)\nthis:\n  C \\<noteq> \\<box>\n\ngoal (1 subgoal):\n 1. C \\<noteq> \\<box> \\<Longrightarrow>\n    S (More f bef C aft)\\<langle>t\\<rangle> t", "from kbo_supt_one[OF S_imp_NS[OF More(1)[OF False]], of f bef t aft]"], ["proof (chain)\npicking this:\n  S (Fun f (bef @ C\\<langle>t\\<rangle> # aft)) t", "show ?thesis"], ["proof (prove)\nusing this:\n  S (Fun f (bef @ C\\<langle>t\\<rangle> # aft)) t\n\ngoal (1 subgoal):\n 1. S (More f bef C aft)\\<langle>t\\<rangle> t", "by simp"], ["proof (state)\nthis:\n  S (More f bef C aft)\\<langle>t\\<rangle> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S (More f bef C aft)\\<langle>t\\<rangle> t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<box> \\<noteq> \\<box> \\<Longrightarrow>\n       S \\<box>\\<langle>t\\<rangle> t", "qed simp"], ["proof (state)\nthis:\n  S s t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma NS_supteq:\n  assumes \"s \\<unrhd> t\"\n  shows \"NS s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NS s t", "using S_imp_NS[OF S_supt[of s t]] NS_refl[of s]"], ["proof (prove)\nusing this:\n  s \\<rhd> t \\<Longrightarrow> NS s t\n  NS s s\n\ngoal (1 subgoal):\n 1. NS s t", "using assms[unfolded subterm.le_less]"], ["proof (prove)\nusing this:\n  s \\<rhd> t \\<Longrightarrow> NS s t\n  NS s s\n  s \\<rhd> t \\<or> t = s\n\ngoal (1 subgoal):\n 1. NS s t", "by blast"], ["", "subsection \\<open>Least Elements\\<close>"], ["", "lemma NS_all_least:\n  assumes l: \"least f\"\n  shows \"NS t (Fun f [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NS t (Fun f [])", "proof (induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. NS (Var x) (Fun f [])\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           NS x2a (Fun f [])) \\<Longrightarrow>\n       NS (Fun x1a x2) (Fun f [])", "case (Var x)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x. NS (Var x) (Fun f [])\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           NS x2a (Fun f [])) \\<Longrightarrow>\n       NS (Fun x1a x2) (Fun f [])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. NS (Var x) (Fun f [])", "using l[unfolded least] l"], ["proof (prove)\nusing this:\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n  least f\n\ngoal (1 subgoal):\n 1. NS (Var x) (Fun f [])", "by auto"], ["proof (state)\nthis:\n  NS (Var x) (Fun f [])\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           NS x2a (Fun f [])) \\<Longrightarrow>\n       NS (Fun x1a x2) (Fun f [])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           NS x2a (Fun f [])) \\<Longrightarrow>\n       NS (Fun x1a x2) (Fun f [])", "case (Fun g ts)"], ["proof (state)\nthis:\n  ?x2a13 \\<in> set ts \\<Longrightarrow> NS ?x2a13 (Fun f [])\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           NS x2a (Fun f [])) \\<Longrightarrow>\n       NS (Fun x1a x2) (Fun f [])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. NS (Fun g ts) (Fun f [])", "proof (cases ts)"], ["proof (state)\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> NS (Fun g ts) (Fun f [])\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> NS (Fun g ts) (Fun f [])", "case (Cons s ss)"], ["proof (state)\nthis:\n  ts = s # ss\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> NS (Fun g ts) (Fun f [])\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> NS (Fun g ts) (Fun f [])", "with Fun[of s]"], ["proof (chain)\npicking this:\n  s \\<in> set ts \\<Longrightarrow> NS s (Fun f [])\n  ts = s # ss", "have \"NS s (Fun f [])\""], ["proof (prove)\nusing this:\n  s \\<in> set ts \\<Longrightarrow> NS s (Fun f [])\n  ts = s # ss\n\ngoal (1 subgoal):\n 1. NS s (Fun f [])", "by auto"], ["proof (state)\nthis:\n  NS s (Fun f [])\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> NS (Fun g ts) (Fun f [])\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> NS (Fun g ts) (Fun f [])", "from S_imp_NS[OF kbo_supt_one[OF this, of g Nil ss]]"], ["proof (chain)\npicking this:\n  NS (Fun g ([] @ s # ss)) (Fun f [])", "show ?thesis"], ["proof (prove)\nusing this:\n  NS (Fun g ([] @ s # ss)) (Fun f [])\n\ngoal (1 subgoal):\n 1. NS (Fun g ts) (Fun f [])", "unfolding Cons"], ["proof (prove)\nusing this:\n  NS (Fun g ([] @ s # ss)) (Fun f [])\n\ngoal (1 subgoal):\n 1. NS (Fun g (s # ss)) (Fun f [])", "by simp"], ["proof (state)\nthis:\n  NS (Fun g ts) (Fun f [])\n\ngoal (1 subgoal):\n 1. ts = [] \\<Longrightarrow> NS (Fun g ts) (Fun f [])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ts = [] \\<Longrightarrow> NS (Fun g ts) (Fun f [])", "case Nil"], ["proof (state)\nthis:\n  ts = []\n\ngoal (1 subgoal):\n 1. ts = [] \\<Longrightarrow> NS (Fun g ts) (Fun f [])", "from weight_w0[of \"Fun g []\"]"], ["proof (chain)\npicking this:\n  w0 \\<le> weight (Fun g [])", "have w: \"weight (Fun g []) \\<ge> weight (Fun f [])\""], ["proof (prove)\nusing this:\n  w0 \\<le> weight (Fun g [])\n\ngoal (1 subgoal):\n 1. weight (Fun f []) \\<le> weight (Fun g [])", "using l[unfolded least]"], ["proof (prove)\nusing this:\n  w0 \\<le> weight (Fun g [])\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n\ngoal (1 subgoal):\n 1. weight (Fun f []) \\<le> weight (Fun g [])", "by auto"], ["proof (state)\nthis:\n  weight (Fun f []) \\<le> weight (Fun g [])\n\ngoal (1 subgoal):\n 1. ts = [] \\<Longrightarrow> NS (Fun g ts) (Fun f [])", "from lex_ext_least_1"], ["proof (chain)\npicking this:\n  snd (lex_ext ?f ?m ?xs [])", "have \"snd (lex_ext kbo 0 [] [])\""], ["proof (prove)\nusing this:\n  snd (lex_ext ?f ?m ?xs [])\n\ngoal (1 subgoal):\n 1. snd (lex_ext kbo 0 [] [])", "."], ["proof (state)\nthis:\n  snd (lex_ext kbo 0 [] [])\n\ngoal (1 subgoal):\n 1. ts = [] \\<Longrightarrow> NS (Fun g ts) (Fun f [])", "then"], ["proof (chain)\npicking this:\n  snd (lex_ext kbo 0 [] [])", "have lex: \"snd (lex_ext_unbounded kbo [] [])\""], ["proof (prove)\nusing this:\n  snd (lex_ext kbo 0 [] [])\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo [] [])", "unfolding lex_ext_def Let_def"], ["proof (prove)\nusing this:\n  snd (if length [] = length [] \\<or> length [] \\<le> 0\n       then lex_ext_unbounded kbo [] [] else (False, False))\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo [] [])", "by simp"], ["proof (state)\nthis:\n  snd (lex_ext_unbounded kbo [] [])\n\ngoal (1 subgoal):\n 1. ts = [] \\<Longrightarrow> NS (Fun g ts) (Fun f [])", "then"], ["proof (chain)\npicking this:\n  snd (lex_ext_unbounded kbo [] [])", "show ?thesis"], ["proof (prove)\nusing this:\n  snd (lex_ext_unbounded kbo [] [])\n\ngoal (1 subgoal):\n 1. NS (Fun g ts) (Fun f [])", "using w l[unfolded least]"], ["proof (prove)\nusing this:\n  snd (lex_ext_unbounded kbo [] [])\n  weight (Fun f []) \\<le> weight (Fun g [])\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n\ngoal (1 subgoal):\n 1. NS (Fun g ts) (Fun f [])", "unfolding Fun Nil"], ["proof (prove)\nusing this:\n  snd (lex_ext_unbounded kbo [] [])\n  weight (Fun f []) \\<le> weight (Fun g [])\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n\ngoal (1 subgoal):\n 1. NS (Fun g []) (Fun f [])", "by (auto simp: empty_le)"], ["proof (state)\nthis:\n  NS (Fun g ts) (Fun f [])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  NS (Fun g ts) (Fun f [])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_S_least:\n  assumes l: \"least f\"\n  shows \"\\<not> S (Fun f []) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> S (Fun f []) t", "proof (cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. t = Var x1 \\<Longrightarrow> \\<not> S (Fun f []) t\n 2. \\<And>x21 x22. t = Fun x21 x22 \\<Longrightarrow> \\<not> S (Fun f []) t", "case (Fun g ts)"], ["proof (state)\nthis:\n  t = Fun g ts\n\ngoal (2 subgoals):\n 1. \\<And>x1. t = Var x1 \\<Longrightarrow> \\<not> S (Fun f []) t\n 2. \\<And>x21 x22. t = Fun x21 x22 \\<Longrightarrow> \\<not> S (Fun f []) t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> S (Fun f []) t", "unfolding Fun"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> S (Fun f []) (Fun g ts)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. S (Fun f []) (Fun g ts) \\<Longrightarrow> False", "assume S: \"S (Fun f []) (Fun g ts)\""], ["proof (state)\nthis:\n  S (Fun f []) (Fun g ts)\n\ngoal (1 subgoal):\n 1. S (Fun f []) (Fun g ts) \\<Longrightarrow> False", "from S[unfolded Fun, simplified]"], ["proof (chain)\npicking this:\n  fst (if (\\<forall>i\\<in>set (scf_list (scf (g, length ts)) ts).\n              vars_term_ms (SCF i) = {#}) \\<and>\n          w (g, length ts) +\n          sum_list (map weight (scf_list (scf (g, length ts)) ts))\n          \\<le> w (f, 0)\n       then if weight (Fun g ts) < weight (Fun f []) then (True, True)\n            else case Fun f [] of\n                 Var y \\<Rightarrow>\n                   (False,\n                    case Fun g ts of Var x \\<Rightarrow> x = y\n                    | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n                 | Fun f ss \\<Rightarrow>\n                     case Fun g ts of Var x \\<Rightarrow> (True, True)\n                     | Fun g ts \\<Rightarrow>\n                         if pr_strict (f, length ss) (g, length ts)\n                         then (True, True)\n                         else if pr_weak (f, length ss) (g, length ts)\n                              then lex_ext_unbounded kbo ss ts\n                              else (False, False)\n       else (False, False))", "have w: \"w (g, length ts) + sum_list (map weight (scf_list (scf (g, length ts)) ts)) \\<le> weight (Fun f [])\""], ["proof (prove)\nusing this:\n  fst (if (\\<forall>i\\<in>set (scf_list (scf (g, length ts)) ts).\n              vars_term_ms (SCF i) = {#}) \\<and>\n          w (g, length ts) +\n          sum_list (map weight (scf_list (scf (g, length ts)) ts))\n          \\<le> w (f, 0)\n       then if weight (Fun g ts) < weight (Fun f []) then (True, True)\n            else case Fun f [] of\n                 Var y \\<Rightarrow>\n                   (False,\n                    case Fun g ts of Var x \\<Rightarrow> x = y\n                    | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n                 | Fun f ss \\<Rightarrow>\n                     case Fun g ts of Var x \\<Rightarrow> (True, True)\n                     | Fun g ts \\<Rightarrow>\n                         if pr_strict (f, length ss) (g, length ts)\n                         then (True, True)\n                         else if pr_weak (f, length ss) (g, length ts)\n                              then lex_ext_unbounded kbo ss ts\n                              else (False, False)\n       else (False, False))\n\ngoal (1 subgoal):\n 1. w (g, length ts) +\n    sum_list (map weight (scf_list (scf (g, length ts)) ts))\n    \\<le> weight (Fun f [])", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  w (g, length ts) +\n  sum_list (map weight (scf_list (scf (g, length ts)) ts))\n  \\<le> weight (Fun f [])\n\ngoal (1 subgoal):\n 1. S (Fun f []) (Fun g ts) \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases ts)"], ["proof (state)\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> False\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> False", "case Nil"], ["proof (state)\nthis:\n  ts = []\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> False\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> False", "with w"], ["proof (chain)\npicking this:\n  w (g, length ts) +\n  sum_list (map weight (scf_list (scf (g, length ts)) ts))\n  \\<le> weight (Fun f [])\n  ts = []", "have \"w (g, 0) \\<le> weight (Fun f [])\""], ["proof (prove)\nusing this:\n  w (g, length ts) +\n  sum_list (map weight (scf_list (scf (g, length ts)) ts))\n  \\<le> weight (Fun f [])\n  ts = []\n\ngoal (1 subgoal):\n 1. w (g, 0) \\<le> weight (Fun f [])", "by simp"], ["proof (state)\nthis:\n  w (g, 0) \\<le> weight (Fun f [])\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> False\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  w (g, 0) \\<le> weight (Fun f [])\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> False\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> False", "have \"weight (Fun f []) \\<le> w0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (Fun f []) \\<le> w0", "using l[unfolded least]"], ["proof (prove)\nusing this:\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n\ngoal (1 subgoal):\n 1. weight (Fun f []) \\<le> w0", "by simp"], ["proof (state)\nthis:\n  weight (Fun f []) \\<le> w0\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> False\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  w (g, 0) \\<le> w0", "have g: \"w (g, 0) = w0\""], ["proof (prove)\nusing this:\n  w (g, 0) \\<le> w0\n\ngoal (1 subgoal):\n 1. w (g, 0) = w0", "using  w0(1)[of g]"], ["proof (prove)\nusing this:\n  w (g, 0) \\<le> w0\n  w0 \\<le> w (g, 0)\n\ngoal (1 subgoal):\n 1. w (g, 0) = w0", "by auto"], ["proof (state)\nthis:\n  w (g, 0) = w0\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> False\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> False", "with w Nil l[unfolded least]"], ["proof (chain)\npicking this:\n  w (g, length ts) +\n  sum_list (map weight (scf_list (scf (g, length ts)) ts))\n  \\<le> weight (Fun f [])\n  ts = []\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n  w (g, 0) = w0", "have gf: \"w (g, 0) = w (f, 0)\""], ["proof (prove)\nusing this:\n  w (g, length ts) +\n  sum_list (map weight (scf_list (scf (g, length ts)) ts))\n  \\<le> weight (Fun f [])\n  ts = []\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n  w (g, 0) = w0\n\ngoal (1 subgoal):\n 1. w (g, 0) = w (f, 0)", "by simp"], ["proof (state)\nthis:\n  w (g, 0) = w (f, 0)\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> False\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> False", "with S"], ["proof (chain)\npicking this:\n  S (Fun f []) (Fun g ts)\n  w (g, 0) = w (f, 0)", "have p: \"pr_weak (f, 0) (g, 0)\""], ["proof (prove)\nusing this:\n  S (Fun f []) (Fun g ts)\n  w (g, 0) = w (f, 0)\n\ngoal (1 subgoal):\n 1. pr_weak (f, 0) (g, 0)", "unfolding Nil"], ["proof (prove)\nusing this:\n  S (Fun f []) (Fun g [])\n  w (g, 0) = w (f, 0)\n\ngoal (1 subgoal):\n 1. pr_weak (f, 0) (g, 0)", "by (simp split: if_splits add: pr_strict)"], ["proof (state)\nthis:\n  pr_weak (f, 0) (g, 0)\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> False\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> False", "with l[unfolded least, THEN conjunct2, rule_format, OF g]"], ["proof (chain)\npicking this:\n  pr_weak (g, 0) (f, 0)\n  pr_weak (f, 0) (g, 0)", "have p2: \"pr_weak (g, 0) (f, 0)\""], ["proof (prove)\nusing this:\n  pr_weak (g, 0) (f, 0)\n  pr_weak (f, 0) (g, 0)\n\ngoal (1 subgoal):\n 1. pr_weak (g, 0) (f, 0)", "by auto"], ["proof (state)\nthis:\n  pr_weak (g, 0) (f, 0)\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> False\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> False", "from p p2 gf S"], ["proof (chain)\npicking this:\n  pr_weak (f, 0) (g, 0)\n  pr_weak (g, 0) (f, 0)\n  w (g, 0) = w (f, 0)\n  S (Fun f []) (Fun g ts)", "have \"fst (lex_ext_unbounded kbo [] ts)\""], ["proof (prove)\nusing this:\n  pr_weak (f, 0) (g, 0)\n  pr_weak (g, 0) (f, 0)\n  w (g, 0) = w (f, 0)\n  S (Fun f []) (Fun g ts)\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo [] ts)", "unfolding Nil"], ["proof (prove)\nusing this:\n  pr_weak (f, 0) (g, 0)\n  pr_weak (g, 0) (f, 0)\n  w (g, 0) = w (f, 0)\n  S (Fun f []) (Fun g [])\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo [] [])", "by (auto simp: pr_strict)"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo [] ts)\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> False\n 2. \\<And>a list. ts = a # list \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  fst (lex_ext_unbounded kbo [] ts)", "show False"], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded kbo [] ts)\n\ngoal (1 subgoal):\n 1. False", "unfolding lex_ext_unbounded_iff"], ["proof (prove)\nusing this:\n  fst ((\\<exists>i<length [].\n           i < length ts \\<and>\n           (\\<forall>j<i. NS ([] ! j) (ts ! j)) \\<and>\n           S ([] ! i) (ts ! i)) \\<or>\n       (\\<forall>i<length ts. NS ([] ! i) (ts ! i)) \\<and>\n       length ts < length [],\n       (\\<exists>i<length [].\n           i < length ts \\<and>\n           (\\<forall>j<i. NS ([] ! j) (ts ! j)) \\<and>\n           S ([] ! i) (ts ! i)) \\<or>\n       (\\<forall>i<length ts. NS ([] ! i) (ts ! i)) \\<and>\n       length ts \\<le> length [])\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "case (Cons s ss)"], ["proof (state)\nthis:\n  ts = s # ss\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ts = s # ss", "have ts: \"ts = [] @ s # ss\""], ["proof (prove)\nusing this:\n  ts = s # ss\n\ngoal (1 subgoal):\n 1. ts = [] @ s # ss", "by auto"], ["proof (state)\nthis:\n  ts = [] @ s # ss\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "from scf[of 0 \"length ts\" g]"], ["proof (chain)\npicking this:\n  0 < length ts \\<Longrightarrow> 0 < scf (g, length ts) 0", "obtain n where scff: \"scf (g, length ts) 0 = Suc n\""], ["proof (prove)\nusing this:\n  0 < length ts \\<Longrightarrow> 0 < scf (g, length ts) 0\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        scf (g, length ts) 0 = Suc n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding Cons"], ["proof (prove)\nusing this:\n  0 < length (s # ss) \\<Longrightarrow> 0 < scf (g, length (s # ss)) 0\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        scf (g, length (s # ss)) 0 = Suc n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: lessE)"], ["proof (state)\nthis:\n  scf (g, length ts) 0 = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "let ?e = \"sum_list (map weight (\n          scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss\n          ))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "have \"w0 + sum_list (map weight (replicate n s)) \\<le> weight s + sum_list (map weight (replicate n s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w0 + sum_list (map weight (replicate n s))\n    \\<le> weight s + sum_list (map weight (replicate n s))", "using weight_w0[of s]"], ["proof (prove)\nusing this:\n  w0 \\<le> weight s\n\ngoal (1 subgoal):\n 1. w0 + sum_list (map weight (replicate n s))\n    \\<le> weight s + sum_list (map weight (replicate n s))", "by auto"], ["proof (state)\nthis:\n  w0 + sum_list (map weight (replicate n s))\n  \\<le> weight s + sum_list (map weight (replicate n s))\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  w0 + sum_list (map weight (replicate n s))\n  \\<le> weight s + sum_list (map weight (replicate n s))\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "have \"\\<dots> = sum_list (map weight (replicate (scf (g, length ts) 0) s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight s + sum_list (map weight (replicate n s)) =\n    sum_list (map weight (replicate (scf (g, length ts) 0) s))", "unfolding scff"], ["proof (prove)\ngoal (1 subgoal):\n 1. weight s + sum_list (map weight (replicate n s)) =\n    sum_list (map weight (replicate (Suc n) s))", "by simp"], ["proof (state)\nthis:\n  weight s + sum_list (map weight (replicate n s)) =\n  sum_list (map weight (replicate (scf (g, length ts) 0) s))\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  weight s + sum_list (map weight (replicate n s)) =\n  sum_list (map weight (replicate (scf (g, length ts) 0) s))\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "have \"w (g, length ts) + \\<dots> + ?e \\<le> w0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w (g, length ts) +\n    sum_list (map weight (replicate (scf (g, length ts) 0) s)) +\n    sum_list\n     (map weight\n       (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n    \\<le> w0", "using w l[unfolded least]"], ["proof (prove)\nusing this:\n  w (g, length ts) +\n  sum_list (map weight (scf_list (scf (g, length ts)) ts))\n  \\<le> weight (Fun f [])\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n\ngoal (1 subgoal):\n 1. w (g, length ts) +\n    sum_list (map weight (replicate (scf (g, length ts) 0) s)) +\n    sum_list\n     (map weight\n       (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n    \\<le> w0", "unfolding ts scf_list_bef_i_aft"], ["proof (prove)\nusing this:\n  w (g, length ([] @ s # ss)) +\n  sum_list\n   (map weight\n     (scf_list (scf (g, length ([] @ s # ss))) [] @\n      replicate (scf (g, length ([] @ s # ss)) (length [])) s @\n      scf_list\n       (\\<lambda>i. scf (g, length ([] @ s # ss)) (Suc (length [] + i)))\n       ss))\n  \\<le> weight (Fun f [])\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n\ngoal (1 subgoal):\n 1. w (g, length ([] @ s # ss)) +\n    sum_list (map weight (replicate (scf (g, length ([] @ s # ss)) 0) s)) +\n    sum_list\n     (map weight\n       (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n    \\<le> w0", "by auto"], ["proof (state)\nthis:\n  w (g, length ts) +\n  sum_list (map weight (replicate (scf (g, length ts) 0) s)) +\n  sum_list\n   (map weight (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n  \\<le> w0\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      w (g, length ts) + x +\n      sum_list\n       (map weight\n         (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n      \\<le> w (g, length ts) + y +\n            sum_list\n             (map weight\n               (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i))\n                 ss))) \\<Longrightarrow>\n  w (g, length ts) + (w0 + sum_list (map weight (replicate n s))) +\n  sum_list\n   (map weight (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n  \\<le> w0", "have \"w0 + sum_list (map weight (replicate n s)) + w (g, length ts) + ?e \\<le> w0\""], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      w (g, length ts) + x +\n      sum_list\n       (map weight\n         (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n      \\<le> w (g, length ts) + y +\n            sum_list\n             (map weight\n               (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i))\n                 ss))) \\<Longrightarrow>\n  w (g, length ts) + (w0 + sum_list (map weight (replicate n s))) +\n  sum_list\n   (map weight (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n  \\<le> w0\n\ngoal (1 subgoal):\n 1. w0 + sum_list (map weight (replicate n s)) + w (g, length ts) +\n    sum_list\n     (map weight\n       (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n    \\<le> w0", "by arith"], ["proof (state)\nthis:\n  w0 + sum_list (map weight (replicate n s)) + w (g, length ts) +\n  sum_list\n   (map weight (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n  \\<le> w0\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  w0 + sum_list (map weight (replicate n s)) + w (g, length ts) +\n  sum_list\n   (map weight (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n  \\<le> w0", "have wg: \"w (g, length ts) = 0\" and null: \"?e = 0\" \"sum_list (map weight (replicate n s)) = 0\""], ["proof (prove)\nusing this:\n  w0 + sum_list (map weight (replicate n s)) + w (g, length ts) +\n  sum_list\n   (map weight (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n  \\<le> w0\n\ngoal (1 subgoal):\n 1. w (g, length ts) = 0 &&&\n    sum_list\n     (map weight\n       (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss)) =\n    0 &&&\n    sum_list (map weight (replicate n s)) = 0", "by auto"], ["proof (state)\nthis:\n  w (g, length ts) = 0\n  sum_list\n   (map weight\n     (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss)) =\n  0\n  sum_list (map weight (replicate n s)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "from null(2) weight_gt_0[of s]"], ["proof (chain)\npicking this:\n  sum_list (map weight (replicate n s)) = 0\n  0 < weight s", "have n: \"n = 0\""], ["proof (prove)\nusing this:\n  sum_list (map weight (replicate n s)) = 0\n  0 < weight s\n\ngoal (1 subgoal):\n 1. n = 0", "by (cases n, auto)"], ["proof (state)\nthis:\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "have \"sum_list (map weight ss) \\<le> ?e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map weight ss)\n    \\<le> sum_list\n           (map weight\n             (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))", "by (rule sum_list_scf_list, rule scf, auto)"], ["proof (state)\nthis:\n  sum_list (map weight ss)\n  \\<le> sum_list\n         (map weight\n           (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "from this[unfolded null] weight_gt_0[of \"hd ss\"]"], ["proof (chain)\npicking this:\n  sum_list (map weight ss) \\<le> 0\n  0 < weight (hd ss)", "have ss: \"ss = []\""], ["proof (prove)\nusing this:\n  sum_list (map weight ss) \\<le> 0\n  0 < weight (hd ss)\n\ngoal (1 subgoal):\n 1. ss = []", "by (cases ss, auto)"], ["proof (state)\nthis:\n  ss = []\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "with Cons"], ["proof (chain)\npicking this:\n  ts = s # ss\n  ss = []", "have ts: \"ts = [s]\""], ["proof (prove)\nusing this:\n  ts = s # ss\n  ss = []\n\ngoal (1 subgoal):\n 1. ts = [s]", "by simp"], ["proof (state)\nthis:\n  ts = [s]\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "note scff = scff[unfolded ts n, simplified]"], ["proof (state)\nthis:\n  scf (g, Suc 0) 0 = Suc 0\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "from wg ts"], ["proof (chain)\npicking this:\n  w (g, length ts) = 0\n  ts = [s]", "have wg: \"w (g, 1) = 0\""], ["proof (prove)\nusing this:\n  w (g, length ts) = 0\n  ts = [s]\n\ngoal (1 subgoal):\n 1. w (g, 1) = 0", "by auto"], ["proof (state)\nthis:\n  w (g, 1) = 0\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "from adm[OF wg, rule_format, of f]"], ["proof (chain)\npicking this:\n  pr_weak (g, 1) (f, ?n)", "have \"pr_weak (g, 1) (f, 0)\""], ["proof (prove)\nusing this:\n  pr_weak (g, 1) (f, ?n)\n\ngoal (1 subgoal):\n 1. pr_weak (g, 1) (f, 0)", "by auto"], ["proof (state)\nthis:\n  pr_weak (g, 1) (f, 0)\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "with S[unfolded Fun ts] l[unfolded least] weight_w0[of s] scff"], ["proof (chain)\npicking this:\n  S (Fun f []) (Fun g [s])\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n  w0 \\<le> weight s\n  scf (g, Suc 0) 0 = Suc 0\n  pr_weak (g, 1) (f, 0)", "have \"fst (lex_ext_unbounded kbo [] [s])\""], ["proof (prove)\nusing this:\n  S (Fun f []) (Fun g [s])\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n  w0 \\<le> weight s\n  scf (g, Suc 0) 0 = Suc 0\n  pr_weak (g, 1) (f, 0)\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo [] [s])", "by (auto split: if_splits simp: scf_list_def pr_strict)"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo [] [s])\n\ngoal (1 subgoal):\n 1. \\<And>a list. ts = a # list \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  fst (lex_ext_unbounded kbo [] [s])", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded kbo [] [s])\n\ngoal (1 subgoal):\n 1. False", "unfolding lex_ext_unbounded_iff"], ["proof (prove)\nusing this:\n  fst ((\\<exists>i<length [].\n           i < length [s] \\<and>\n           (\\<forall>j<i. NS ([] ! j) ([s] ! j)) \\<and>\n           S ([] ! i) ([s] ! i)) \\<or>\n       (\\<forall>i<length [s]. NS ([] ! i) ([s] ! i)) \\<and>\n       length [s] < length [],\n       (\\<exists>i<length [].\n           i < length [s] \\<and>\n           (\\<forall>j<i. NS ([] ! j) ([s] ! j)) \\<and>\n           S ([] ! i) ([s] ! i)) \\<or>\n       (\\<forall>i<length [s]. NS ([] ! i) ([s] ! i)) \\<and>\n       length [s] \\<le> length [])\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> S (Fun f []) t\n\ngoal (1 subgoal):\n 1. \\<And>x1. t = Var x1 \\<Longrightarrow> \\<not> S (Fun f []) t", "qed simp"], ["", "lemma NS_least_least:\n  assumes l: \"least f\"\n    and NS: \"NS (Fun f []) t\"\n  shows \"\\<exists> g. t = Fun g [] \\<and> least g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g. t = Fun g [] \\<and> least g", "proof (cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow> \\<exists>g. t = Fun g [] \\<and> least g\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "case (Var x)"], ["proof (state)\nthis:\n  t = Var x\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow> \\<exists>g. t = Fun g [] \\<and> least g\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g. t = Fun g [] \\<and> least g", "using NS"], ["proof (prove)\nusing this:\n  NS (Fun f []) t\n\ngoal (1 subgoal):\n 1. \\<exists>g. t = Fun g [] \\<and> least g", "unfolding Var"], ["proof (prove)\nusing this:\n  NS (Fun f []) (Var x)\n\ngoal (1 subgoal):\n 1. \\<exists>g. Var x = Fun g [] \\<and> least g", "by simp"], ["proof (state)\nthis:\n  \\<exists>g. t = Fun g [] \\<and> least g\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "case (Fun g ts)"], ["proof (state)\nthis:\n  t = Fun g ts\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "from NS[unfolded Fun, simplified]"], ["proof (chain)\npicking this:\n  snd (if (\\<forall>i\\<in>set (scf_list (scf (g, length ts)) ts).\n              vars_term_ms (SCF i) = {#}) \\<and>\n          w (g, length ts) +\n          sum_list (map weight (scf_list (scf (g, length ts)) ts))\n          \\<le> w (f, 0)\n       then if weight (Fun g ts) < weight (Fun f []) then (True, True)\n            else case Fun f [] of\n                 Var y \\<Rightarrow>\n                   (False,\n                    case Fun g ts of Var x \\<Rightarrow> x = y\n                    | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n                 | Fun f ss \\<Rightarrow>\n                     case Fun g ts of Var x \\<Rightarrow> (True, True)\n                     | Fun g ts \\<Rightarrow>\n                         if pr_strict (f, length ss) (g, length ts)\n                         then (True, True)\n                         else if pr_weak (f, length ss) (g, length ts)\n                              then lex_ext_unbounded kbo ss ts\n                              else (False, False)\n       else (False, False))", "have w: \"w (g, length ts) + sum_list (map weight (scf_list (scf (g, length ts)) ts)) \\<le> weight (Fun f [])\""], ["proof (prove)\nusing this:\n  snd (if (\\<forall>i\\<in>set (scf_list (scf (g, length ts)) ts).\n              vars_term_ms (SCF i) = {#}) \\<and>\n          w (g, length ts) +\n          sum_list (map weight (scf_list (scf (g, length ts)) ts))\n          \\<le> w (f, 0)\n       then if weight (Fun g ts) < weight (Fun f []) then (True, True)\n            else case Fun f [] of\n                 Var y \\<Rightarrow>\n                   (False,\n                    case Fun g ts of Var x \\<Rightarrow> x = y\n                    | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n                 | Fun f ss \\<Rightarrow>\n                     case Fun g ts of Var x \\<Rightarrow> (True, True)\n                     | Fun g ts \\<Rightarrow>\n                         if pr_strict (f, length ss) (g, length ts)\n                         then (True, True)\n                         else if pr_weak (f, length ss) (g, length ts)\n                              then lex_ext_unbounded kbo ss ts\n                              else (False, False)\n       else (False, False))\n\ngoal (1 subgoal):\n 1. w (g, length ts) +\n    sum_list (map weight (scf_list (scf (g, length ts)) ts))\n    \\<le> weight (Fun f [])", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  w (g, length ts) +\n  sum_list (map weight (scf_list (scf (g, length ts)) ts))\n  \\<le> weight (Fun f [])\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g. t = Fun g [] \\<and> least g", "proof (cases ts)"], ["proof (state)\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> \\<exists>g. t = Fun g [] \\<and> least g\n 2. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "case Nil"], ["proof (state)\nthis:\n  ts = []\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> \\<exists>g. t = Fun g [] \\<and> least g\n 2. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "with w"], ["proof (chain)\npicking this:\n  w (g, length ts) +\n  sum_list (map weight (scf_list (scf (g, length ts)) ts))\n  \\<le> weight (Fun f [])\n  ts = []", "have \"w (g, 0) \\<le> weight (Fun f [])\""], ["proof (prove)\nusing this:\n  w (g, length ts) +\n  sum_list (map weight (scf_list (scf (g, length ts)) ts))\n  \\<le> weight (Fun f [])\n  ts = []\n\ngoal (1 subgoal):\n 1. w (g, 0) \\<le> weight (Fun f [])", "by simp"], ["proof (state)\nthis:\n  w (g, 0) \\<le> weight (Fun f [])\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> \\<exists>g. t = Fun g [] \\<and> least g\n 2. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "also"], ["proof (state)\nthis:\n  w (g, 0) \\<le> weight (Fun f [])\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> \\<exists>g. t = Fun g [] \\<and> least g\n 2. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "have \"weight (Fun f []) \\<le> w0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (Fun f []) \\<le> w0", "using l[unfolded least]"], ["proof (prove)\nusing this:\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n\ngoal (1 subgoal):\n 1. weight (Fun f []) \\<le> w0", "by simp"], ["proof (state)\nthis:\n  weight (Fun f []) \\<le> w0\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> \\<exists>g. t = Fun g [] \\<and> least g\n 2. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "finally"], ["proof (chain)\npicking this:\n  w (g, 0) \\<le> w0", "have g: \"w (g, 0) = w0\""], ["proof (prove)\nusing this:\n  w (g, 0) \\<le> w0\n\ngoal (1 subgoal):\n 1. w (g, 0) = w0", "using  w0(1)[of g]"], ["proof (prove)\nusing this:\n  w (g, 0) \\<le> w0\n  w0 \\<le> w (g, 0)\n\ngoal (1 subgoal):\n 1. w (g, 0) = w0", "by auto"], ["proof (state)\nthis:\n  w (g, 0) = w0\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> \\<exists>g. t = Fun g [] \\<and> least g\n 2. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "with w Nil l[unfolded least]"], ["proof (chain)\npicking this:\n  w (g, length ts) +\n  sum_list (map weight (scf_list (scf (g, length ts)) ts))\n  \\<le> weight (Fun f [])\n  ts = []\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n  w (g, 0) = w0", "have gf: \"w (g, 0) = w (f, 0)\""], ["proof (prove)\nusing this:\n  w (g, length ts) +\n  sum_list (map weight (scf_list (scf (g, length ts)) ts))\n  \\<le> weight (Fun f [])\n  ts = []\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n  w (g, 0) = w0\n\ngoal (1 subgoal):\n 1. w (g, 0) = w (f, 0)", "by simp"], ["proof (state)\nthis:\n  w (g, 0) = w (f, 0)\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> \\<exists>g. t = Fun g [] \\<and> least g\n 2. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "with NS[unfolded Fun]"], ["proof (chain)\npicking this:\n  NS (Fun f []) (Fun g ts)\n  w (g, 0) = w (f, 0)", "have p: \"pr_weak (f, 0) (g, 0)\""], ["proof (prove)\nusing this:\n  NS (Fun f []) (Fun g ts)\n  w (g, 0) = w (f, 0)\n\ngoal (1 subgoal):\n 1. pr_weak (f, 0) (g, 0)", "unfolding Nil"], ["proof (prove)\nusing this:\n  NS (Fun f []) (Fun g [])\n  w (g, 0) = w (f, 0)\n\ngoal (1 subgoal):\n 1. pr_weak (f, 0) (g, 0)", "by (simp split: if_splits add: pr_strict)"], ["proof (state)\nthis:\n  pr_weak (f, 0) (g, 0)\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> \\<exists>g. t = Fun g [] \\<and> least g\n 2. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "have least: \"least g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. least g", "unfolding least"], ["proof (prove)\ngoal (1 subgoal):\n 1. w (g, 0) = w0 \\<and>\n    (\\<forall>ga. w (ga, 0) = w0 \\<longrightarrow> pr_weak (ga, 0) (g, 0))", "proof (rule conjI[OF g], intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ga. w (ga, 0) = w0 \\<longrightarrow> pr_weak (ga, 0) (g, 0)", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ga. w (ga, 0) = w0 \\<longrightarrow> pr_weak (ga, 0) (g, 0)", "from l[unfolded least]"], ["proof (chain)\npicking this:\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))", "have \"w (h, 0) = w0 \\<longrightarrow> pr_weak (h, 0) (f, 0)\""], ["proof (prove)\nusing this:\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n\ngoal (1 subgoal):\n 1. w (h, 0) = w0 \\<longrightarrow> pr_weak (h, 0) (f, 0)", "by blast"], ["proof (state)\nthis:\n  w (h, 0) = w0 \\<longrightarrow> pr_weak (h, 0) (f, 0)\n\ngoal (1 subgoal):\n 1. \\<And>ga. w (ga, 0) = w0 \\<longrightarrow> pr_weak (ga, 0) (g, 0)", "with pr_weak_trans p"], ["proof (chain)\npicking this:\n  \\<lbrakk>pr_weak ?fn ?gm; pr_weak ?gm ?hk\\<rbrakk>\n  \\<Longrightarrow> pr_weak ?fn ?hk\n  pr_weak (f, 0) (g, 0)\n  w (h, 0) = w0 \\<longrightarrow> pr_weak (h, 0) (f, 0)", "show \"w (h, 0) = w0 \\<longrightarrow> pr_weak (h, 0) (g, 0)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>pr_weak ?fn ?gm; pr_weak ?gm ?hk\\<rbrakk>\n  \\<Longrightarrow> pr_weak ?fn ?hk\n  pr_weak (f, 0) (g, 0)\n  w (h, 0) = w0 \\<longrightarrow> pr_weak (h, 0) (f, 0)\n\ngoal (1 subgoal):\n 1. w (h, 0) = w0 \\<longrightarrow> pr_weak (h, 0) (g, 0)", "by blast"], ["proof (state)\nthis:\n  w (h, 0) = w0 \\<longrightarrow> pr_weak (h, 0) (g, 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  least g\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow> \\<exists>g. t = Fun g [] \\<and> least g\n 2. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g. t = Fun g [] \\<and> least g", "by (rule exI[of _ g], unfold Fun Nil, insert least, auto)"], ["proof (state)\nthis:\n  \\<exists>g. t = Fun g [] \\<and> least g\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "case (Cons s ss)"], ["proof (state)\nthis:\n  ts = s # ss\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "then"], ["proof (chain)\npicking this:\n  ts = s # ss", "have ts: \"ts = [] @ s # ss\""], ["proof (prove)\nusing this:\n  ts = s # ss\n\ngoal (1 subgoal):\n 1. ts = [] @ s # ss", "by auto"], ["proof (state)\nthis:\n  ts = [] @ s # ss\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "from scf[of 0 \"length ts\" g]"], ["proof (chain)\npicking this:\n  0 < length ts \\<Longrightarrow> 0 < scf (g, length ts) 0", "obtain n where scff: \"scf (g, length ts) 0 = Suc n\""], ["proof (prove)\nusing this:\n  0 < length ts \\<Longrightarrow> 0 < scf (g, length ts) 0\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        scf (g, length ts) 0 = Suc n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding Cons"], ["proof (prove)\nusing this:\n  0 < length (s # ss) \\<Longrightarrow> 0 < scf (g, length (s # ss)) 0\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        scf (g, length (s # ss)) 0 = Suc n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: lessE)"], ["proof (state)\nthis:\n  scf (g, length ts) 0 = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "let ?e = \"sum_list (map weight (\n        scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss\n      ))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "have \"w0 + sum_list (map weight (replicate n s)) \\<le> weight s + sum_list (map weight (replicate n s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w0 + sum_list (map weight (replicate n s))\n    \\<le> weight s + sum_list (map weight (replicate n s))", "using weight_w0[of s]"], ["proof (prove)\nusing this:\n  w0 \\<le> weight s\n\ngoal (1 subgoal):\n 1. w0 + sum_list (map weight (replicate n s))\n    \\<le> weight s + sum_list (map weight (replicate n s))", "by auto"], ["proof (state)\nthis:\n  w0 + sum_list (map weight (replicate n s))\n  \\<le> weight s + sum_list (map weight (replicate n s))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "also"], ["proof (state)\nthis:\n  w0 + sum_list (map weight (replicate n s))\n  \\<le> weight s + sum_list (map weight (replicate n s))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "have \"\\<dots> = sum_list (map weight (replicate (scf (g, length ts) 0) s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight s + sum_list (map weight (replicate n s)) =\n    sum_list (map weight (replicate (scf (g, length ts) 0) s))", "unfolding scff"], ["proof (prove)\ngoal (1 subgoal):\n 1. weight s + sum_list (map weight (replicate n s)) =\n    sum_list (map weight (replicate (Suc n) s))", "by simp"], ["proof (state)\nthis:\n  weight s + sum_list (map weight (replicate n s)) =\n  sum_list (map weight (replicate (scf (g, length ts) 0) s))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "also"], ["proof (state)\nthis:\n  weight s + sum_list (map weight (replicate n s)) =\n  sum_list (map weight (replicate (scf (g, length ts) 0) s))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "have \"w (g, length ts) + \\<dots> + ?e \\<le> w0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w (g, length ts) +\n    sum_list (map weight (replicate (scf (g, length ts) 0) s)) +\n    sum_list\n     (map weight\n       (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n    \\<le> w0", "using w l[unfolded least]"], ["proof (prove)\nusing this:\n  w (g, length ts) +\n  sum_list (map weight (scf_list (scf (g, length ts)) ts))\n  \\<le> weight (Fun f [])\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n\ngoal (1 subgoal):\n 1. w (g, length ts) +\n    sum_list (map weight (replicate (scf (g, length ts) 0) s)) +\n    sum_list\n     (map weight\n       (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n    \\<le> w0", "unfolding ts scf_list_bef_i_aft"], ["proof (prove)\nusing this:\n  w (g, length ([] @ s # ss)) +\n  sum_list\n   (map weight\n     (scf_list (scf (g, length ([] @ s # ss))) [] @\n      replicate (scf (g, length ([] @ s # ss)) (length [])) s @\n      scf_list\n       (\\<lambda>i. scf (g, length ([] @ s # ss)) (Suc (length [] + i)))\n       ss))\n  \\<le> weight (Fun f [])\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n\ngoal (1 subgoal):\n 1. w (g, length ([] @ s # ss)) +\n    sum_list (map weight (replicate (scf (g, length ([] @ s # ss)) 0) s)) +\n    sum_list\n     (map weight\n       (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n    \\<le> w0", "by auto"], ["proof (state)\nthis:\n  w (g, length ts) +\n  sum_list (map weight (replicate (scf (g, length ts) 0) s)) +\n  sum_list\n   (map weight (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n  \\<le> w0\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      w (g, length ts) + x +\n      sum_list\n       (map weight\n         (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n      \\<le> w (g, length ts) + y +\n            sum_list\n             (map weight\n               (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i))\n                 ss))) \\<Longrightarrow>\n  w (g, length ts) + (w0 + sum_list (map weight (replicate n s))) +\n  sum_list\n   (map weight (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n  \\<le> w0", "have \"w0 + sum_list (map weight (replicate n s)) + w (g, length ts) + ?e \\<le> w0\""], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      w (g, length ts) + x +\n      sum_list\n       (map weight\n         (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n      \\<le> w (g, length ts) + y +\n            sum_list\n             (map weight\n               (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i))\n                 ss))) \\<Longrightarrow>\n  w (g, length ts) + (w0 + sum_list (map weight (replicate n s))) +\n  sum_list\n   (map weight (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n  \\<le> w0\n\ngoal (1 subgoal):\n 1. w0 + sum_list (map weight (replicate n s)) + w (g, length ts) +\n    sum_list\n     (map weight\n       (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n    \\<le> w0", "by arith"], ["proof (state)\nthis:\n  w0 + sum_list (map weight (replicate n s)) + w (g, length ts) +\n  sum_list\n   (map weight (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n  \\<le> w0\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "then"], ["proof (chain)\npicking this:\n  w0 + sum_list (map weight (replicate n s)) + w (g, length ts) +\n  sum_list\n   (map weight (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n  \\<le> w0", "have wg: \"w (g, length ts) = 0\" and null: \"?e = 0\" \"sum_list (map weight (replicate n s)) = 0\""], ["proof (prove)\nusing this:\n  w0 + sum_list (map weight (replicate n s)) + w (g, length ts) +\n  sum_list\n   (map weight (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n  \\<le> w0\n\ngoal (1 subgoal):\n 1. w (g, length ts) = 0 &&&\n    sum_list\n     (map weight\n       (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss)) =\n    0 &&&\n    sum_list (map weight (replicate n s)) = 0", "by auto"], ["proof (state)\nthis:\n  w (g, length ts) = 0\n  sum_list\n   (map weight\n     (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss)) =\n  0\n  sum_list (map weight (replicate n s)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "from null(2) weight_gt_0[of s]"], ["proof (chain)\npicking this:\n  sum_list (map weight (replicate n s)) = 0\n  0 < weight s", "have n: \"n = 0\""], ["proof (prove)\nusing this:\n  sum_list (map weight (replicate n s)) = 0\n  0 < weight s\n\ngoal (1 subgoal):\n 1. n = 0", "by (cases n, auto)"], ["proof (state)\nthis:\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "have \"sum_list (map weight ss) \\<le> ?e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map weight ss)\n    \\<le> sum_list\n           (map weight\n             (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))", "by (rule sum_list_scf_list, rule scf, auto)"], ["proof (state)\nthis:\n  sum_list (map weight ss)\n  \\<le> sum_list\n         (map weight\n           (scf_list (\\<lambda>i. scf (g, Suc (length ss)) (Suc i)) ss))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "from this[unfolded null] weight_gt_0[of \"hd ss\"]"], ["proof (chain)\npicking this:\n  sum_list (map weight ss) \\<le> 0\n  0 < weight (hd ss)", "have ss: \"ss = []\""], ["proof (prove)\nusing this:\n  sum_list (map weight ss) \\<le> 0\n  0 < weight (hd ss)\n\ngoal (1 subgoal):\n 1. ss = []", "by (cases ss, auto)"], ["proof (state)\nthis:\n  ss = []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "with Cons"], ["proof (chain)\npicking this:\n  ts = s # ss\n  ss = []", "have ts: \"ts = [s]\""], ["proof (prove)\nusing this:\n  ts = s # ss\n  ss = []\n\ngoal (1 subgoal):\n 1. ts = [s]", "by simp"], ["proof (state)\nthis:\n  ts = [s]\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "note scff = scff[unfolded ts n, simplified]"], ["proof (state)\nthis:\n  scf (g, Suc 0) 0 = Suc 0\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "from wg ts"], ["proof (chain)\npicking this:\n  w (g, length ts) = 0\n  ts = [s]", "have wg: \"w (g, 1) = 0\""], ["proof (prove)\nusing this:\n  w (g, length ts) = 0\n  ts = [s]\n\ngoal (1 subgoal):\n 1. w (g, 1) = 0", "by auto"], ["proof (state)\nthis:\n  w (g, 1) = 0\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "from adm[OF wg, rule_format, of f]"], ["proof (chain)\npicking this:\n  pr_weak (g, 1) (f, ?n)", "have \"pr_weak (g, 1) (f, 0)\""], ["proof (prove)\nusing this:\n  pr_weak (g, 1) (f, ?n)\n\ngoal (1 subgoal):\n 1. pr_weak (g, 1) (f, 0)", "by auto"], ["proof (state)\nthis:\n  pr_weak (g, 1) (f, 0)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "with NS[unfolded Fun ts] l[unfolded least] weight_w0[of s] scff"], ["proof (chain)\npicking this:\n  NS (Fun f []) (Fun g [s])\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n  w0 \\<le> weight s\n  scf (g, Suc 0) 0 = Suc 0\n  pr_weak (g, 1) (f, 0)", "have \"snd (lex_ext_unbounded kbo [] [s])\""], ["proof (prove)\nusing this:\n  NS (Fun f []) (Fun g [s])\n  w (f, 0) = w0 \\<and>\n  (\\<forall>g. w (g, 0) = w0 \\<longrightarrow> pr_weak (g, 0) (f, 0))\n  w0 \\<le> weight s\n  scf (g, Suc 0) 0 = Suc 0\n  pr_weak (g, 1) (f, 0)\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo [] [s])", "by (auto split: if_splits simp: scf_list_def pr_strict)"], ["proof (state)\nthis:\n  snd (lex_ext_unbounded kbo [] [s])\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ts = a # list \\<Longrightarrow>\n       \\<exists>g. t = Fun g [] \\<and> least g", "then"], ["proof (chain)\npicking this:\n  snd (lex_ext_unbounded kbo [] [s])", "show ?thesis"], ["proof (prove)\nusing this:\n  snd (lex_ext_unbounded kbo [] [s])\n\ngoal (1 subgoal):\n 1. \\<exists>g. t = Fun g [] \\<and> least g", "unfolding lex_ext_unbounded_iff snd_conv"], ["proof (prove)\nusing this:\n  (\\<exists>i<length [].\n      i < length [s] \\<and>\n      (\\<forall>j<i. NS ([] ! j) ([s] ! j)) \\<and>\n      S ([] ! i) ([s] ! i)) \\<or>\n  (\\<forall>i<length [s]. NS ([] ! i) ([s] ! i)) \\<and>\n  length [s] \\<le> length []\n\ngoal (1 subgoal):\n 1. \\<exists>g. t = Fun g [] \\<and> least g", "by auto"], ["proof (state)\nthis:\n  \\<exists>g. t = Fun g [] \\<and> least g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>g. t = Fun g [] \\<and> least g\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Stability (a.k.a. Closure under Substitutions\\<close>"], ["", "lemma weight_subst: \"weight (t \\<cdot> \\<sigma>) =\n  weight t + sum_mset (image_mset (\\<lambda> x. weight (\\<sigma> x) - w0) (vars_term_ms (SCF t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (t \\<cdot> \\<sigma>) =\n    weight t + (\\<Sum>x\\<in>#vars_term_ms (SCF t). weight (\\<sigma> x) - w0)", "proof (induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x \\<cdot> \\<sigma>) =\n       weight (Var x) +\n       (\\<Sum>x\\<in>#vars_term_ms (SCF (Var x)). weight (\\<sigma> x) - w0)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           weight (x2a \\<cdot> \\<sigma>) =\n           weight x2a +\n           (\\<Sum>x\\<in>#vars_term_ms\n                          (SCF x2a). weight (\\<sigma> x) -\n                                     w0)) \\<Longrightarrow>\n       weight (Fun x1a x2 \\<cdot> \\<sigma>) =\n       weight (Fun x1a x2) +\n       (\\<Sum>x\\<in>#vars_term_ms\n                      (SCF (Fun x1a x2)). weight (\\<sigma> x) - w0)", "case (Var x)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x \\<cdot> \\<sigma>) =\n       weight (Var x) +\n       (\\<Sum>x\\<in>#vars_term_ms (SCF (Var x)). weight (\\<sigma> x) - w0)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           weight (x2a \\<cdot> \\<sigma>) =\n           weight x2a +\n           (\\<Sum>x\\<in>#vars_term_ms\n                          (SCF x2a). weight (\\<sigma> x) -\n                                     w0)) \\<Longrightarrow>\n       weight (Fun x1a x2 \\<cdot> \\<sigma>) =\n       weight (Fun x1a x2) +\n       (\\<Sum>x\\<in>#vars_term_ms\n                      (SCF (Fun x1a x2)). weight (\\<sigma> x) - w0)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (Var x \\<cdot> \\<sigma>) =\n    weight (Var x) +\n    (\\<Sum>x\\<in>#vars_term_ms (SCF (Var x)). weight (\\<sigma> x) - w0)", "using weight_w0[of \"\\<sigma> x\"]"], ["proof (prove)\nusing this:\n  w0 \\<le> weight (\\<sigma> x)\n\ngoal (1 subgoal):\n 1. weight (Var x \\<cdot> \\<sigma>) =\n    weight (Var x) +\n    (\\<Sum>x\\<in>#vars_term_ms (SCF (Var x)). weight (\\<sigma> x) - w0)", "by auto"], ["proof (state)\nthis:\n  weight (Var x \\<cdot> \\<sigma>) =\n  weight (Var x) +\n  (\\<Sum>x\\<in>#vars_term_ms (SCF (Var x)). weight (\\<sigma> x) - w0)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           weight (x2a \\<cdot> \\<sigma>) =\n           weight x2a +\n           (\\<Sum>x\\<in>#vars_term_ms\n                          (SCF x2a). weight (\\<sigma> x) -\n                                     w0)) \\<Longrightarrow>\n       weight (Fun x1a x2 \\<cdot> \\<sigma>) =\n       weight (Fun x1a x2) +\n       (\\<Sum>x\\<in>#vars_term_ms\n                      (SCF (Fun x1a x2)). weight (\\<sigma> x) - w0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           weight (x2a \\<cdot> \\<sigma>) =\n           weight x2a +\n           (\\<Sum>x\\<in>#vars_term_ms\n                          (SCF x2a). weight (\\<sigma> x) -\n                                     w0)) \\<Longrightarrow>\n       weight (Fun x1a x2 \\<cdot> \\<sigma>) =\n       weight (Fun x1a x2) +\n       (\\<Sum>x\\<in>#vars_term_ms\n                      (SCF (Fun x1a x2)). weight (\\<sigma> x) - w0)", "case (Fun f ts)"], ["proof (state)\nthis:\n  ?x2a13 \\<in> set ts \\<Longrightarrow>\n  weight (?x2a13 \\<cdot> \\<sigma>) =\n  weight ?x2a13 +\n  (\\<Sum>x\\<in>#vars_term_ms (SCF ?x2a13). weight (\\<sigma> x) - w0)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           weight (x2a \\<cdot> \\<sigma>) =\n           weight x2a +\n           (\\<Sum>x\\<in>#vars_term_ms\n                          (SCF x2a). weight (\\<sigma> x) -\n                                     w0)) \\<Longrightarrow>\n       weight (Fun x1a x2 \\<cdot> \\<sigma>) =\n       weight (Fun x1a x2) +\n       (\\<Sum>x\\<in>#vars_term_ms\n                      (SCF (Fun x1a x2)). weight (\\<sigma> x) - w0)", "let ?ts = \"scf_list (scf (f, length ts)) ts\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           weight (x2a \\<cdot> \\<sigma>) =\n           weight x2a +\n           (\\<Sum>x\\<in>#vars_term_ms\n                          (SCF x2a). weight (\\<sigma> x) -\n                                     w0)) \\<Longrightarrow>\n       weight (Fun x1a x2 \\<cdot> \\<sigma>) =\n       weight (Fun x1a x2) +\n       (\\<Sum>x\\<in>#vars_term_ms\n                      (SCF (Fun x1a x2)). weight (\\<sigma> x) - w0)", "define sts where \"sts = ?ts\""], ["proof (state)\nthis:\n  sts = scf_list (scf (f, length ts)) ts\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           weight (x2a \\<cdot> \\<sigma>) =\n           weight x2a +\n           (\\<Sum>x\\<in>#vars_term_ms\n                          (SCF x2a). weight (\\<sigma> x) -\n                                     w0)) \\<Longrightarrow>\n       weight (Fun x1a x2 \\<cdot> \\<sigma>) =\n       weight (Fun x1a x2) +\n       (\\<Sum>x\\<in>#vars_term_ms\n                      (SCF (Fun x1a x2)). weight (\\<sigma> x) - w0)", "have id: \"map (\\<lambda> t. weight (t \\<cdot> \\<sigma>)) ?ts = map (\\<lambda> t. weight t + sum_mset (image_mset (\\<lambda> x. weight (\\<sigma> x) - w0) (vars_term_ms (scf_term scf t)))) ?ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>t. weight (t \\<cdot> \\<sigma>))\n     (scf_list (scf (f, length ts)) ts) =\n    map (\\<lambda>t.\n            weight t +\n            (\\<Sum>x\\<in>#vars_term_ms (SCF t). weight (\\<sigma> x) - w0))\n     (scf_list (scf (f, length ts)) ts)", "by (rule map_cong[OF refl Fun], insert scf_list_subset[of _ ts], auto)"], ["proof (state)\nthis:\n  map (\\<lambda>t. weight (t \\<cdot> \\<sigma>))\n   (scf_list (scf (f, length ts)) ts) =\n  map (\\<lambda>t.\n          weight t +\n          (\\<Sum>x\\<in>#vars_term_ms (SCF t). weight (\\<sigma> x) - w0))\n   (scf_list (scf (f, length ts)) ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           weight (x2a \\<cdot> \\<sigma>) =\n           weight x2a +\n           (\\<Sum>x\\<in>#vars_term_ms\n                          (SCF x2a). weight (\\<sigma> x) -\n                                     w0)) \\<Longrightarrow>\n       weight (Fun x1a x2 \\<cdot> \\<sigma>) =\n       weight (Fun x1a x2) +\n       (\\<Sum>x\\<in>#vars_term_ms\n                      (SCF (Fun x1a x2)). weight (\\<sigma> x) - w0)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (Fun f ts \\<cdot> \\<sigma>) =\n    weight (Fun f ts) +\n    (\\<Sum>x\\<in>#vars_term_ms (SCF (Fun f ts)). weight (\\<sigma> x) - w0)", "by (simp add: o_def id, unfold sts_def[symmetric], induct sts, auto)"], ["proof (state)\nthis:\n  weight (Fun f ts \\<cdot> \\<sigma>) =\n  weight (Fun f ts) +\n  (\\<Sum>x\\<in>#vars_term_ms (SCF (Fun f ts)). weight (\\<sigma> x) - w0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weight_stable_le:\n  assumes ws: \"weight s \\<le> weight t\"\n    and vs: \"vars_term_ms (SCF s) \\<subseteq># vars_term_ms (SCF t)\"\n  shows \"weight (s \\<cdot> \\<sigma>) \\<le> weight (t \\<cdot> \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (s \\<cdot> \\<sigma>) \\<le> weight (t \\<cdot> \\<sigma>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. weight (s \\<cdot> \\<sigma>) \\<le> weight (t \\<cdot> \\<sigma>)", "from vs[unfolded mset_subset_eq_exists_conv]"], ["proof (chain)\npicking this:\n  \\<exists>C. vars_term_ms (SCF t) = vars_term_ms (SCF s) + C", "obtain u where vt: \"vars_term_ms (SCF t) = vars_term_ms (SCF s) + u\""], ["proof (prove)\nusing this:\n  \\<exists>C. vars_term_ms (SCF t) = vars_term_ms (SCF s) + C\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        vars_term_ms (SCF t) = vars_term_ms (SCF s) + u \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  vars_term_ms (SCF t) = vars_term_ms (SCF s) + u\n\ngoal (1 subgoal):\n 1. weight (s \\<cdot> \\<sigma>) \\<le> weight (t \\<cdot> \\<sigma>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (s \\<cdot> \\<sigma>) \\<le> weight (t \\<cdot> \\<sigma>)", "unfolding weight_subst vt"], ["proof (prove)\ngoal (1 subgoal):\n 1. weight s + (\\<Sum>x\\<in>#vars_term_ms (SCF s). weight (\\<sigma> x) - w0)\n    \\<le> weight t +\n          (\\<Sum>x\\<in>#vars_term_ms (SCF s) + u. weight (\\<sigma> x) - w0)", "using ws"], ["proof (prove)\nusing this:\n  weight s \\<le> weight t\n\ngoal (1 subgoal):\n 1. weight s + (\\<Sum>x\\<in>#vars_term_ms (SCF s). weight (\\<sigma> x) - w0)\n    \\<le> weight t +\n          (\\<Sum>x\\<in>#vars_term_ms (SCF s) + u. weight (\\<sigma> x) - w0)", "by auto"], ["proof (state)\nthis:\n  weight (s \\<cdot> \\<sigma>) \\<le> weight (t \\<cdot> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weight_stable_lt:\n  assumes ws: \"weight s < weight t\"\n    and vs: \"vars_term_ms (SCF s) \\<subseteq># vars_term_ms (SCF t)\"\n shows \"weight (s \\<cdot> \\<sigma>) < weight (t \\<cdot> \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (s \\<cdot> \\<sigma>) < weight (t \\<cdot> \\<sigma>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. weight (s \\<cdot> \\<sigma>) < weight (t \\<cdot> \\<sigma>)", "from vs[unfolded mset_subset_eq_exists_conv]"], ["proof (chain)\npicking this:\n  \\<exists>C. vars_term_ms (SCF t) = vars_term_ms (SCF s) + C", "obtain u where vt: \"vars_term_ms (SCF t) = vars_term_ms (SCF s) + u\""], ["proof (prove)\nusing this:\n  \\<exists>C. vars_term_ms (SCF t) = vars_term_ms (SCF s) + C\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        vars_term_ms (SCF t) = vars_term_ms (SCF s) + u \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  vars_term_ms (SCF t) = vars_term_ms (SCF s) + u\n\ngoal (1 subgoal):\n 1. weight (s \\<cdot> \\<sigma>) < weight (t \\<cdot> \\<sigma>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (s \\<cdot> \\<sigma>) < weight (t \\<cdot> \\<sigma>)", "unfolding weight_subst vt"], ["proof (prove)\ngoal (1 subgoal):\n 1. weight s + (\\<Sum>x\\<in>#vars_term_ms (SCF s). weight (\\<sigma> x) - w0)\n    < weight t +\n      (\\<Sum>x\\<in>#vars_term_ms (SCF s) + u. weight (\\<sigma> x) - w0)", "using ws"], ["proof (prove)\nusing this:\n  weight s < weight t\n\ngoal (1 subgoal):\n 1. weight s + (\\<Sum>x\\<in>#vars_term_ms (SCF s). weight (\\<sigma> x) - w0)\n    < weight t +\n      (\\<Sum>x\\<in>#vars_term_ms (SCF s) + u. weight (\\<sigma> x) - w0)", "by auto"], ["proof (state)\nthis:\n  weight (s \\<cdot> \\<sigma>) < weight (t \\<cdot> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>KBO is stable, i.e., closed under substitutions.\\<close>"], ["", "lemma kbo_stable:\n  fixes \\<sigma> :: \"('f, 'v) subst\"\n  assumes \"NS s t\"\n  shows \"(S s t \\<longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and> NS (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\" (is \"?P s t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S s t \\<longrightarrow>\n     S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "using assms"], ["proof (prove)\nusing this:\n  NS s t\n\ngoal (1 subgoal):\n 1. (S s t \\<longrightarrow>\n     S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "proof (induct s arbitrary: t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x t.\n       NS (Var x) t \\<Longrightarrow>\n       (S (Var x) t \\<longrightarrow>\n        S (Var x \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Var x \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "case (Var y t)"], ["proof (state)\nthis:\n  NS (Var y) t\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       NS (Var x) t \\<Longrightarrow>\n       (S (Var x) t \\<longrightarrow>\n        S (Var x \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Var x \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "then"], ["proof (chain)\npicking this:\n  NS (Var y) t", "have not: \"\\<not> S (Var y) t\""], ["proof (prove)\nusing this:\n  NS (Var y) t\n\ngoal (1 subgoal):\n 1. \\<not> S (Var y) t", "using not_S_Var[of y t]"], ["proof (prove)\nusing this:\n  NS (Var y) t\n  \\<not> S (Var y) t\n\ngoal (1 subgoal):\n 1. \\<not> S (Var y) t", "by auto"], ["proof (state)\nthis:\n  \\<not> S (Var y) t\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       NS (Var x) t \\<Longrightarrow>\n       (S (Var x) t \\<longrightarrow>\n        S (Var x \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Var x \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "from NS_Var_imp_eq_least[OF Var]"], ["proof (chain)\npicking this:\n  t = Var y \\<or> (\\<exists>f. t = Fun f [] \\<and> least f)", "have \"t = Var y \\<or> (\\<exists> f. t = Fun f [] \\<and> least f)\""], ["proof (prove)\nusing this:\n  t = Var y \\<or> (\\<exists>f. t = Fun f [] \\<and> least f)\n\ngoal (1 subgoal):\n 1. t = Var y \\<or> (\\<exists>f. t = Fun f [] \\<and> least f)", "by simp"], ["proof (state)\nthis:\n  t = Var y \\<or> (\\<exists>f. t = Fun f [] \\<and> least f)\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       NS (Var x) t \\<Longrightarrow>\n       (S (Var x) t \\<longrightarrow>\n        S (Var x \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Var x \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "then"], ["proof (chain)\npicking this:\n  t = Var y \\<or> (\\<exists>f. t = Fun f [] \\<and> least f)", "obtain f where \"t = Var y \\<or> t = Fun f [] \\<and> least f\""], ["proof (prove)\nusing this:\n  t = Var y \\<or> (\\<exists>f. t = Fun f [] \\<and> least f)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        t = Var y \\<or> t = Fun f [] \\<and> least f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t = Var y \\<or> t = Fun f [] \\<and> least f\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       NS (Var x) t \\<Longrightarrow>\n       (S (Var x) t \\<longrightarrow>\n        S (Var x \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Var x \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "then"], ["proof (chain)\npicking this:\n  t = Var y \\<or> t = Fun f [] \\<and> least f", "have \"NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\""], ["proof (prove)\nusing this:\n  t = Var y \\<or> t = Fun f [] \\<and> least f\n\ngoal (1 subgoal):\n 1. NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. t = Var y \\<Longrightarrow>\n    NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. t = Fun f [] \\<and> least f \\<Longrightarrow>\n    NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "assume \"t = Var y\""], ["proof (state)\nthis:\n  t = Var y\n\ngoal (2 subgoals):\n 1. t = Var y \\<Longrightarrow>\n    NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. t = Fun f [] \\<and> least f \\<Longrightarrow>\n    NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "then"], ["proof (chain)\npicking this:\n  t = Var y", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Var y\n\ngoal (1 subgoal):\n 1. NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "using NS_refl[of \"t \\<cdot> \\<sigma>\"]"], ["proof (prove)\nusing this:\n  t = Var y\n  NS (t \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. t = Fun f [] \\<and> least f \\<Longrightarrow>\n    NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t = Fun f [] \\<and> least f \\<Longrightarrow>\n    NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "assume \"t = Fun f [] \\<and> least f\""], ["proof (state)\nthis:\n  t = Fun f [] \\<and> least f\n\ngoal (1 subgoal):\n 1. t = Fun f [] \\<and> least f \\<Longrightarrow>\n    NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "with NS_all_least[of f \"Var y \\<cdot> \\<sigma>\"]"], ["proof (chain)\npicking this:\n  least f \\<Longrightarrow> NS (Var y \\<cdot> \\<sigma>) (Fun f [])\n  t = Fun f [] \\<and> least f", "show ?thesis"], ["proof (prove)\nusing this:\n  least f \\<Longrightarrow> NS (Var y \\<cdot> \\<sigma>) (Fun f [])\n  t = Fun f [] \\<and> least f\n\ngoal (1 subgoal):\n 1. NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       NS (Var x) t \\<Longrightarrow>\n       (S (Var x) t \\<longrightarrow>\n        S (Var x \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Var x \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "with not"], ["proof (chain)\npicking this:\n  \\<not> S (Var y) t\n  NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> S (Var y) t\n  NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. (S (Var y) t \\<longrightarrow>\n     S (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "by blast"], ["proof (state)\nthis:\n  (S (Var y) t \\<longrightarrow>\n   S (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n  NS (Var y \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "case (Fun f ss t)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a13 \\<in> set ss; NS ?x2a13 ?t13\\<rbrakk>\n  \\<Longrightarrow> (S ?x2a13 ?t13 \\<longrightarrow>\n                     S (?x2a13 \\<cdot> \\<sigma>)\n                      (?t13 \\<cdot> \\<sigma>)) \\<and>\n                    NS (?x2a13 \\<cdot> \\<sigma>) (?t13 \\<cdot> \\<sigma>)\n  NS (Fun f ss) t\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "note NS = Fun(2)"], ["proof (state)\nthis:\n  NS (Fun f ss) t\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "note IH = Fun(1)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a13 \\<in> set ss; NS ?x2a13 ?t13\\<rbrakk>\n  \\<Longrightarrow> (S ?x2a13 ?t13 \\<longrightarrow>\n                     S (?x2a13 \\<cdot> \\<sigma>)\n                      (?t13 \\<cdot> \\<sigma>)) \\<and>\n                    NS (?x2a13 \\<cdot> \\<sigma>) (?t13 \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "let ?s = \"Fun f ss\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "define s where \"s = ?s\""], ["proof (state)\nthis:\n  s = Fun f ss\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "let ?ss = \"map (\\<lambda> s. s \\<cdot> \\<sigma>) ss\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "from NS"], ["proof (chain)\npicking this:\n  NS (Fun f ss) t", "have v: \"vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF ?s)\" and w: \"weight t \\<le> weight ?s\""], ["proof (prove)\nusing this:\n  NS (Fun f ss) t\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss)) &&&\n    weight t \\<le> weight (Fun f ss)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight t \\<le> weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "from weight_stable_le[OF w v]"], ["proof (chain)\npicking this:\n  weight (t \\<cdot> ?\\<sigma>) \\<le> weight (Fun f ss \\<cdot> ?\\<sigma>)", "have w\\<sigma>: \"weight (t \\<cdot> \\<sigma>) \\<le> weight (?s \\<cdot> \\<sigma>)\""], ["proof (prove)\nusing this:\n  weight (t \\<cdot> ?\\<sigma>) \\<le> weight (Fun f ss \\<cdot> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. weight (t \\<cdot> \\<sigma>) \\<le> weight (Fun f ss \\<cdot> \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  weight (t \\<cdot> \\<sigma>) \\<le> weight (Fun f ss \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "from vars_term_ms_subst_mono[OF v, of \"\\<lambda> x. SCF (\\<sigma> x)\"]"], ["proof (chain)\npicking this:\n  vars_term_ms (SCF t \\<cdot> (\\<lambda>x. SCF (\\<sigma> x))) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss) \\<cdot> (\\<lambda>x. SCF (\\<sigma> x)))", "have v\\<sigma>: \"vars_term_ms (SCF (t \\<cdot> \\<sigma>)) \\<subseteq># vars_term_ms (SCF (?s \\<cdot> \\<sigma>))\""], ["proof (prove)\nusing this:\n  vars_term_ms (SCF t \\<cdot> (\\<lambda>x. SCF (\\<sigma> x))) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss) \\<cdot> (\\<lambda>x. SCF (\\<sigma> x)))\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF (t \\<cdot> \\<sigma>)) \\<subseteq>#\n    vars_term_ms (SCF (Fun f ss \\<cdot> \\<sigma>))", "unfolding scf_term_subst"], ["proof (prove)\nusing this:\n  vars_term_ms (SCF t \\<cdot> (\\<lambda>x. SCF (\\<sigma> x))) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss) \\<cdot> (\\<lambda>x. SCF (\\<sigma> x)))\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF t \\<cdot> (\\<lambda>x. SCF (\\<sigma> x))) \\<subseteq>#\n    vars_term_ms (SCF (Fun f ss) \\<cdot> (\\<lambda>x. SCF (\\<sigma> x)))", "."], ["proof (state)\nthis:\n  vars_term_ms (SCF (t \\<cdot> \\<sigma>)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss \\<cdot> \\<sigma>))\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; NS x2a t\\<rbrakk>\n                   \\<Longrightarrow> (S x2a t \\<longrightarrow>\nS (x2a \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n                                     NS (x2a \\<cdot> \\<sigma>)\n(t \\<cdot> \\<sigma>);\n        NS (Fun x1a x2) t\\<rbrakk>\n       \\<Longrightarrow> (S (Fun x1a x2) t \\<longrightarrow>\n                          S (Fun x1a x2 \\<cdot> \\<sigma>)\n                           (t \\<cdot> \\<sigma>)) \\<and>\n                         NS (Fun x1a x2 \\<cdot> \\<sigma>)\n                          (t \\<cdot> \\<sigma>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "proof (cases \"weight (t \\<cdot> \\<sigma>) < weight (?s \\<cdot> \\<sigma>)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. weight (t \\<cdot> \\<sigma>)\n    < weight (Fun f ss \\<cdot> \\<sigma>) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<not> weight (t \\<cdot> \\<sigma>)\n           < weight (Fun f ss \\<cdot> \\<sigma>) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "case True"], ["proof (state)\nthis:\n  weight (t \\<cdot> \\<sigma>) < weight (Fun f ss \\<cdot> \\<sigma>)\n\ngoal (2 subgoals):\n 1. weight (t \\<cdot> \\<sigma>)\n    < weight (Fun f ss \\<cdot> \\<sigma>) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<not> weight (t \\<cdot> \\<sigma>)\n           < weight (Fun f ss \\<cdot> \\<sigma>) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "with v\\<sigma>"], ["proof (chain)\npicking this:\n  vars_term_ms (SCF (t \\<cdot> \\<sigma>)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss \\<cdot> \\<sigma>))\n  weight (t \\<cdot> \\<sigma>) < weight (Fun f ss \\<cdot> \\<sigma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  vars_term_ms (SCF (t \\<cdot> \\<sigma>)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss \\<cdot> \\<sigma>))\n  weight (t \\<cdot> \\<sigma>) < weight (Fun f ss \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<not> weight (t \\<cdot> \\<sigma>)\n           < weight (Fun f ss \\<cdot> \\<sigma>) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> weight (t \\<cdot> \\<sigma>)\n           < weight (Fun f ss \\<cdot> \\<sigma>) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "case False"], ["proof (state)\nthis:\n  \\<not> weight (t \\<cdot> \\<sigma>) < weight (Fun f ss \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<not> weight (t \\<cdot> \\<sigma>)\n           < weight (Fun f ss \\<cdot> \\<sigma>) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "with weight_stable_lt[OF _ v, of \\<sigma>] w"], ["proof (chain)\npicking this:\n  weight t < weight (Fun f ss) \\<Longrightarrow>\n  weight (t \\<cdot> \\<sigma>) < weight (Fun f ss \\<cdot> \\<sigma>)\n  weight t \\<le> weight (Fun f ss)\n  \\<not> weight (t \\<cdot> \\<sigma>) < weight (Fun f ss \\<cdot> \\<sigma>)", "have w: \"weight t = weight ?s\""], ["proof (prove)\nusing this:\n  weight t < weight (Fun f ss) \\<Longrightarrow>\n  weight (t \\<cdot> \\<sigma>) < weight (Fun f ss \\<cdot> \\<sigma>)\n  weight t \\<le> weight (Fun f ss)\n  \\<not> weight (t \\<cdot> \\<sigma>) < weight (Fun f ss \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. weight t = weight (Fun f ss)", "by arith"], ["proof (state)\nthis:\n  weight t = weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. \\<not> weight (t \\<cdot> \\<sigma>)\n           < weight (Fun f ss \\<cdot> \\<sigma>) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "proof (cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "case (Var y)"], ["proof (state)\nthis:\n  t = Var y\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "from set_mset_mono[OF v, folded s_def]"], ["proof (chain)\npicking this:\n  set_mset (vars_term_ms (SCF t))\n  \\<subseteq> set_mset (vars_term_ms (SCF s))", "have \"y \\<in> vars_term (SCF s)\""], ["proof (prove)\nusing this:\n  set_mset (vars_term_ms (SCF t))\n  \\<subseteq> set_mset (vars_term_ms (SCF s))\n\ngoal (1 subgoal):\n 1. y \\<in> vars_term (SCF s)", "unfolding Var"], ["proof (prove)\nusing this:\n  set_mset (vars_term_ms (SCF (Var y)))\n  \\<subseteq> set_mset (vars_term_ms (SCF s))\n\ngoal (1 subgoal):\n 1. y \\<in> vars_term (SCF s)", "by (auto simp: o_def)"], ["proof (state)\nthis:\n  y \\<in> vars_term (SCF s)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "also"], ["proof (state)\nthis:\n  y \\<in> vars_term (SCF s)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "have \"\\<dots> \\<subseteq> vars_term s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_term (SCF s) \\<subseteq> vars_term s", "by (rule vars_term_scf_subset)"], ["proof (state)\nthis:\n  vars_term (SCF s) \\<subseteq> vars_term s\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "finally"], ["proof (chain)\npicking this:\n  y \\<in> vars_term s", "have \"y \\<in> vars_term s\""], ["proof (prove)\nusing this:\n  y \\<in> vars_term s\n\ngoal (1 subgoal):\n 1. y \\<in> vars_term s", "by auto"], ["proof (state)\nthis:\n  y \\<in> vars_term s\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "from supteq_Var[OF this]"], ["proof (chain)\npicking this:\n  s \\<unrhd> Var y", "have \"?s \\<rhd> Var y\""], ["proof (prove)\nusing this:\n  s \\<unrhd> Var y\n\ngoal (1 subgoal):\n 1. Fun f ss \\<rhd> Var y", "unfolding s_def Fun"], ["proof (prove)\nusing this:\n  Fun f ss \\<unrhd> Var y\n\ngoal (1 subgoal):\n 1. Fun f ss \\<rhd> Var y", "by auto"], ["proof (state)\nthis:\n  Fun f ss \\<rhd> Var y\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "from S_supt[OF supt_subst[OF this]]"], ["proof (chain)\npicking this:\n  S (Fun f ss \\<cdot> ?\\<sigma>1) (Var y \\<cdot> ?\\<sigma>1)", "have S: \"S (?s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\""], ["proof (prove)\nusing this:\n  S (Fun f ss \\<cdot> ?\\<sigma>1) (Var y \\<cdot> ?\\<sigma>1)\n\ngoal (1 subgoal):\n 1. S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "unfolding Var"], ["proof (prove)\nusing this:\n  S (Fun f ss \\<cdot> ?\\<sigma>1) (Var y \\<cdot> ?\\<sigma>1)\n\ngoal (1 subgoal):\n 1. S (Fun f ss \\<cdot> \\<sigma>) (Var y \\<cdot> \\<sigma>)", "."], ["proof (state)\nthis:\n  S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "from S_imp_NS[OF S] S"], ["proof (chain)\npicking this:\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n  S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n  S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "case (Fun g ts)"], ["proof (state)\nthis:\n  t = Fun g ts\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "note t = this"], ["proof (state)\nthis:\n  t = Fun g ts\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "let ?f = \"(f, length ss)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "let ?g = \"(g, length ts)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "let ?ts = \"map (\\<lambda> s. s \\<cdot> \\<sigma>) ts\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n       NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "proof (cases \"pr_strict ?f ?g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. pr_strict (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "case True"], ["proof (state)\nthis:\n  pr_strict (f, length ss) (g, length ts)\n\ngoal (2 subgoals):\n 1. pr_strict (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "then"], ["proof (chain)\npicking this:\n  pr_strict (f, length ss) (g, length ts)", "have S: \"S (?s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\""], ["proof (prove)\nusing this:\n  pr_strict (f, length ss) (g, length ts)\n\ngoal (1 subgoal):\n 1. S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "using w\\<sigma> v\\<sigma>"], ["proof (prove)\nusing this:\n  pr_strict (f, length ss) (g, length ts)\n  weight (t \\<cdot> \\<sigma>) \\<le> weight (Fun f ss \\<cdot> \\<sigma>)\n  vars_term_ms (SCF (t \\<cdot> \\<sigma>)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss \\<cdot> \\<sigma>))\n\ngoal (1 subgoal):\n 1. S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "unfolding t"], ["proof (prove)\nusing this:\n  pr_strict (f, length ss) (g, length ts)\n  weight (Fun g ts \\<cdot> \\<sigma>)\n  \\<le> weight (Fun f ss \\<cdot> \\<sigma>)\n  vars_term_ms (SCF (Fun g ts \\<cdot> \\<sigma>)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss \\<cdot> \\<sigma>))\n\ngoal (1 subgoal):\n 1. S (Fun f ss \\<cdot> \\<sigma>) (Fun g ts \\<cdot> \\<sigma>)", "by simp"], ["proof (state)\nthis:\n  S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (2 subgoals):\n 1. pr_strict (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "from S S_imp_NS[OF S]"], ["proof (chain)\npicking this:\n  S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "by simp"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "case False"], ["proof (state)\nthis:\n  \\<not> pr_strict (f, length ss) (g, length ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "note prec = this"], ["proof (state)\nthis:\n  \\<not> pr_strict (f, length ss) (g, length ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "proof (cases \"pr_weak ?f ?g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<not> pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "case False"], ["proof (state)\nthis:\n  \\<not> pr_weak (f, length ss) (g, length ts)\n\ngoal (2 subgoals):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<not> pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "with v w prec"], ["proof (chain)\npicking this:\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight t = weight (Fun f ss)\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  \\<not> pr_weak (f, length ss) (g, length ts)", "have \"\\<not> NS ?s t\""], ["proof (prove)\nusing this:\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight t = weight (Fun f ss)\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  \\<not> pr_weak (f, length ss) (g, length ts)\n\ngoal (1 subgoal):\n 1. \\<not> NS (Fun f ss) t", "unfolding t"], ["proof (prove)\nusing this:\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight (Fun g ts) = weight (Fun f ss)\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  \\<not> pr_weak (f, length ss) (g, length ts)\n\ngoal (1 subgoal):\n 1. \\<not> NS (Fun f ss) (Fun g ts)", "by (auto simp del: vars_term_ms.simps)"], ["proof (state)\nthis:\n  \\<not> NS (Fun f ss) t\n\ngoal (2 subgoals):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n 2. \\<not> pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "with NS"], ["proof (chain)\npicking this:\n  NS (Fun f ss) t\n  \\<not> NS (Fun f ss) t", "show ?thesis"], ["proof (prove)\nusing this:\n  NS (Fun f ss) t\n  \\<not> NS (Fun f ss) t\n\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "by blast"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "case True"], ["proof (state)\nthis:\n  pr_weak (f, length ss) (g, length ts)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "from v w"], ["proof (chain)\npicking this:\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight t = weight (Fun f ss)", "have \"vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF ?s) \\<and> weight t \\<le> weight ?s\" \"\\<not> weight t < weight ?s\""], ["proof (prove)\nusing this:\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight t = weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss)) \\<and>\n    weight t \\<le> weight (Fun f ss) &&&\n    \\<not> weight t < weight (Fun f ss)", "by auto"], ["proof (state)\nthis:\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss)) \\<and>\n  weight t \\<le> weight (Fun f ss)\n  \\<not> weight t < weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "{"], ["proof (state)\nthis:\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss)) \\<and>\n  weight t \\<le> weight (Fun f ss)\n  \\<not> weight t < weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "assume i: \"i < length ss\" \"i < length ts\"\n              and S: \"S (ss ! i) (ts ! i)\""], ["proof (state)\nthis:\n  i < length ss\n  i < length ts\n  S (ss ! i) (ts ! i)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "have \"S (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! i) (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! i)\n     (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! i)", "using IH[OF _ S_imp_NS[OF S]] S i"], ["proof (prove)\nusing this:\n  ss ! i \\<in> set ss \\<Longrightarrow>\n  (S (ss ! i) (ts ! i) \\<longrightarrow>\n   S (ss ! i \\<cdot> \\<sigma>) (ts ! i \\<cdot> \\<sigma>)) \\<and>\n  NS (ss ! i \\<cdot> \\<sigma>) (ts ! i \\<cdot> \\<sigma>)\n  S (ss ! i) (ts ! i)\n  i < length ss\n  i < length ts\n\ngoal (1 subgoal):\n 1. S (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! i)\n     (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! i)", "unfolding set_conv_nth"], ["proof (prove)\nusing this:\n  ss ! i \\<in> {ss ! i |i. i < length ss} \\<Longrightarrow>\n  (S (ss ! i) (ts ! i) \\<longrightarrow>\n   S (ss ! i \\<cdot> \\<sigma>) (ts ! i \\<cdot> \\<sigma>)) \\<and>\n  NS (ss ! i \\<cdot> \\<sigma>) (ts ! i \\<cdot> \\<sigma>)\n  S (ss ! i) (ts ! i)\n  i < length ss\n  i < length ts\n\ngoal (1 subgoal):\n 1. S (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! i)\n     (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! i)", "by (force simp del: kbo.simps)"], ["proof (state)\nthis:\n  S (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! i)\n   (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! i)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?i15 < length ss; ?i15 < length ts;\n   S (ss ! ?i15) (ts ! ?i15)\\<rbrakk>\n  \\<Longrightarrow> S (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! ?i15)\n                     (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! ?i15)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "note IH_S = this"], ["proof (state)\nthis:\n  \\<lbrakk>?i15 < length ss; ?i15 < length ts;\n   S (ss ! ?i15) (ts ! ?i15)\\<rbrakk>\n  \\<Longrightarrow> S (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! ?i15)\n                     (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! ?i15)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?i15 < length ss; ?i15 < length ts;\n   S (ss ! ?i15) (ts ! ?i15)\\<rbrakk>\n  \\<Longrightarrow> S (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! ?i15)\n                     (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! ?i15)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "assume i: \"i < length ss\" \"i < length ts\"\n              and NS: \"NS (ss ! i) (ts ! i)\""], ["proof (state)\nthis:\n  i < length ss\n  i < length ts\n  NS (ss ! i) (ts ! i)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "have \"NS (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! i) (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NS (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! i)\n     (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! i)", "using IH[OF _ NS] i"], ["proof (prove)\nusing this:\n  ss ! i \\<in> set ss \\<Longrightarrow>\n  (S (ss ! i) (ts ! i) \\<longrightarrow>\n   S (ss ! i \\<cdot> \\<sigma>) (ts ! i \\<cdot> \\<sigma>)) \\<and>\n  NS (ss ! i \\<cdot> \\<sigma>) (ts ! i \\<cdot> \\<sigma>)\n  i < length ss\n  i < length ts\n\ngoal (1 subgoal):\n 1. NS (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! i)\n     (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! i)", "unfolding set_conv_nth"], ["proof (prove)\nusing this:\n  ss ! i \\<in> {ss ! i |i. i < length ss} \\<Longrightarrow>\n  (S (ss ! i) (ts ! i) \\<longrightarrow>\n   S (ss ! i \\<cdot> \\<sigma>) (ts ! i \\<cdot> \\<sigma>)) \\<and>\n  NS (ss ! i \\<cdot> \\<sigma>) (ts ! i \\<cdot> \\<sigma>)\n  i < length ss\n  i < length ts\n\ngoal (1 subgoal):\n 1. NS (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! i)\n     (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! i)", "by (force simp del: kbo.simps)"], ["proof (state)\nthis:\n  NS (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! i)\n   (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! i)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?i15 < length ss; ?i15 < length ts;\n   NS (ss ! ?i15) (ts ! ?i15)\\<rbrakk>\n  \\<Longrightarrow> NS (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! ?i15)\n                     (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! ?i15)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "note IH_NS = this"], ["proof (state)\nthis:\n  \\<lbrakk>?i15 < length ss; ?i15 < length ts;\n   NS (ss ! ?i15) (ts ! ?i15)\\<rbrakk>\n  \\<Longrightarrow> NS (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! ?i15)\n                     (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! ?i15)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?i15 < length ss; ?i15 < length ts;\n   NS (ss ! ?i15) (ts ! ?i15)\\<rbrakk>\n  \\<Longrightarrow> NS (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss ! ?i15)\n                     (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts ! ?i15)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "assume \"S ?s t\""], ["proof (state)\nthis:\n  S (Fun f ss) t\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "with prec v w True"], ["proof (chain)\npicking this:\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight t = weight (Fun f ss)\n  pr_weak (f, length ss) (g, length ts)\n  S (Fun f ss) t", "have lex: \"fst (lex_ext_unbounded kbo ss ts)\""], ["proof (prove)\nusing this:\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight t = weight (Fun f ss)\n  pr_weak (f, length ss) (g, length ts)\n  S (Fun f ss) t\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo ss ts)", "unfolding s_def t"], ["proof (prove)\nusing this:\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight (Fun g ts) = weight (Fun f ss)\n  pr_weak (f, length ss) (g, length ts)\n  S (Fun f ss) (Fun g ts)\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo ss ts)", "by simp"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "have \"fst (lex_ext_unbounded kbo ?ss ?ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss)\n          (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts))", "by (rule lex_ext_unbounded_map_S[OF _ _ lex], insert IH_NS IH_S, blast+)"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss)\n        (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts))\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "with v\\<sigma> w\\<sigma> prec True"], ["proof (chain)\npicking this:\n  vars_term_ms (SCF (t \\<cdot> \\<sigma>)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss \\<cdot> \\<sigma>))\n  weight (t \\<cdot> \\<sigma>) \\<le> weight (Fun f ss \\<cdot> \\<sigma>)\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  pr_weak (f, length ss) (g, length ts)\n  fst (lex_ext_unbounded kbo (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss)\n        (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts))", "have \"S (?s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\""], ["proof (prove)\nusing this:\n  vars_term_ms (SCF (t \\<cdot> \\<sigma>)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss \\<cdot> \\<sigma>))\n  weight (t \\<cdot> \\<sigma>) \\<le> weight (Fun f ss \\<cdot> \\<sigma>)\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  pr_weak (f, length ss) (g, length ts)\n  fst (lex_ext_unbounded kbo (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss)\n        (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts))\n\ngoal (1 subgoal):\n 1. S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "unfolding t"], ["proof (prove)\nusing this:\n  vars_term_ms (SCF (Fun g ts \\<cdot> \\<sigma>)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss \\<cdot> \\<sigma>))\n  weight (Fun g ts \\<cdot> \\<sigma>)\n  \\<le> weight (Fun f ss \\<cdot> \\<sigma>)\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  pr_weak (f, length ss) (g, length ts)\n  fst (lex_ext_unbounded kbo (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss)\n        (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts))\n\ngoal (1 subgoal):\n 1. S (Fun f ss \\<cdot> \\<sigma>) (Fun g ts \\<cdot> \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "}"], ["proof (state)\nthis:\n  S (Fun f ss) t \\<Longrightarrow>\n  S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "moreover"], ["proof (state)\nthis:\n  S (Fun f ss) t \\<Longrightarrow>\n  S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "{"], ["proof (state)\nthis:\n  S (Fun f ss) t \\<Longrightarrow>\n  S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "from NS prec v w True"], ["proof (chain)\npicking this:\n  NS (Fun f ss) t\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight t = weight (Fun f ss)\n  pr_weak (f, length ss) (g, length ts)", "have lex: \"snd (lex_ext_unbounded kbo ss ts)\""], ["proof (prove)\nusing this:\n  NS (Fun f ss) t\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight t = weight (Fun f ss)\n  pr_weak (f, length ss) (g, length ts)\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo ss ts)", "unfolding t"], ["proof (prove)\nusing this:\n  NS (Fun f ss) (Fun g ts)\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  vars_term_ms (SCF (Fun g ts)) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight (Fun g ts) = weight (Fun f ss)\n  pr_weak (f, length ss) (g, length ts)\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo ss ts)", "by simp"], ["proof (state)\nthis:\n  snd (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "have \"snd (lex_ext_unbounded kbo ?ss ?ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss)\n          (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts))", "by (rule lex_ext_unbounded_map_NS[OF _ _ lex], insert IH_S IH_NS, blast)"], ["proof (state)\nthis:\n  snd (lex_ext_unbounded kbo (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss)\n        (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts))\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "with v\\<sigma> w\\<sigma> prec True"], ["proof (chain)\npicking this:\n  vars_term_ms (SCF (t \\<cdot> \\<sigma>)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss \\<cdot> \\<sigma>))\n  weight (t \\<cdot> \\<sigma>) \\<le> weight (Fun f ss \\<cdot> \\<sigma>)\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  pr_weak (f, length ss) (g, length ts)\n  snd (lex_ext_unbounded kbo (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss)\n        (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts))", "have \"NS (?s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\""], ["proof (prove)\nusing this:\n  vars_term_ms (SCF (t \\<cdot> \\<sigma>)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss \\<cdot> \\<sigma>))\n  weight (t \\<cdot> \\<sigma>) \\<le> weight (Fun f ss \\<cdot> \\<sigma>)\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  pr_weak (f, length ss) (g, length ts)\n  snd (lex_ext_unbounded kbo (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss)\n        (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts))\n\ngoal (1 subgoal):\n 1. NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "unfolding t"], ["proof (prove)\nusing this:\n  vars_term_ms (SCF (Fun g ts \\<cdot> \\<sigma>)) \\<subseteq>#\n  vars_term_ms (SCF (Fun f ss \\<cdot> \\<sigma>))\n  weight (Fun g ts \\<cdot> \\<sigma>)\n  \\<le> weight (Fun f ss \\<cdot> \\<sigma>)\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  pr_weak (f, length ss) (g, length ts)\n  snd (lex_ext_unbounded kbo (map (\\<lambda>s. s \\<cdot> \\<sigma>) ss)\n        (map (\\<lambda>s. s \\<cdot> \\<sigma>) ts))\n\ngoal (1 subgoal):\n 1. NS (Fun f ss \\<cdot> \\<sigma>) (Fun g ts \\<cdot> \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "}"], ["proof (state)\nthis:\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "ultimately"], ["proof (chain)\npicking this:\n  S (Fun f ss) t \\<Longrightarrow>\n  S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  S (Fun f ss) t \\<Longrightarrow>\n  S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n    NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   S (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n  NS (Fun f ss \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma S_subst:\n  \"S s t \\<Longrightarrow> S (s \\<cdot> (\\<sigma> :: ('f, 'v) subst)) (t \\<cdot> \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "using kbo_stable[OF S_imp_NS, of s t \\<sigma>]"], ["proof (prove)\nusing this:\n  S s t \\<Longrightarrow>\n  (S s t \\<longrightarrow>\n   S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n  NS (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "by auto"], ["", "lemma NS_subst: \"NS s t \\<Longrightarrow> NS (s \\<cdot> (\\<sigma> :: ('f, 'v) subst)) (t \\<cdot> \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NS s t \\<Longrightarrow> NS (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "using kbo_stable[of s t \\<sigma>]"], ["proof (prove)\nusing this:\n  NS s t \\<Longrightarrow>\n  (S s t \\<longrightarrow>\n   S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)) \\<and>\n  NS (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. NS s t \\<Longrightarrow> NS (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "by auto"], ["", "subsection \\<open>Transitivity and Compatibility\\<close>"], ["", "lemma kbo_trans: \"(S s t \\<longrightarrow> NS t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> S t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> NS t u \\<longrightarrow> NS s u)\"\n  (is \"?P s t u\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S s t \\<longrightarrow> NS t u \\<longrightarrow> S s u) \\<and>\n    (NS s t \\<longrightarrow> S t u \\<longrightarrow> S s u) \\<and>\n    (NS s t \\<longrightarrow> NS t u \\<longrightarrow> NS s u)", "proof (induct s arbitrary: t u)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x t u.\n       (S (Var x) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Var x) u) \\<and>\n       (NS (Var x) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Var x) u) \\<and>\n       (NS (Var x) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Var x) u)\n 2. \\<And>x1a x2 t u.\n       (\\<And>x2a t u.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           (S x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            S t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> NS x2a u)) \\<Longrightarrow>\n       (S (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun x1a x2) u)", "case (Var x t u)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x t u.\n       (S (Var x) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Var x) u) \\<and>\n       (NS (Var x) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Var x) u) \\<and>\n       (NS (Var x) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Var x) u)\n 2. \\<And>x1a x2 t u.\n       (\\<And>x2a t u.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           (S x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            S t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> NS x2a u)) \\<Longrightarrow>\n       (S (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun x1a x2) u)", "from not_S_Var[of x t]"], ["proof (chain)\npicking this:\n  \\<not> S (Var x) t", "have nS: \"\\<not> S (Var x) t\""], ["proof (prove)\nusing this:\n  \\<not> S (Var x) t\n\ngoal (1 subgoal):\n 1. \\<not> S (Var x) t", "."], ["proof (state)\nthis:\n  \\<not> S (Var x) t\n\ngoal (2 subgoals):\n 1. \\<And>x t u.\n       (S (Var x) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Var x) u) \\<and>\n       (NS (Var x) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Var x) u) \\<and>\n       (NS (Var x) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Var x) u)\n 2. \\<And>x1a x2 t u.\n       (\\<And>x2a t u.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           (S x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            S t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> NS x2a u)) \\<Longrightarrow>\n       (S (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun x1a x2) u)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "proof (cases \"NS (Var x) t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. NS (Var x) t \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)\n 2. \\<not> NS (Var x) t \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "case False"], ["proof (state)\nthis:\n  \\<not> NS (Var x) t\n\ngoal (2 subgoals):\n 1. NS (Var x) t \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)\n 2. \\<not> NS (Var x) t \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "with nS"], ["proof (chain)\npicking this:\n  \\<not> S (Var x) t\n  \\<not> NS (Var x) t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> S (Var x) t\n  \\<not> NS (Var x) t\n\ngoal (1 subgoal):\n 1. (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "by blast"], ["proof (state)\nthis:\n  (S (Var x) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Var x) u) \\<and>\n  (NS (Var x) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Var x) u) \\<and>\n  (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)\n\ngoal (1 subgoal):\n 1. NS (Var x) t \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. NS (Var x) t \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "case True"], ["proof (state)\nthis:\n  NS (Var x) t\n\ngoal (1 subgoal):\n 1. NS (Var x) t \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "from NS_Var_imp_eq_least[OF this]"], ["proof (chain)\npicking this:\n  t = Var x \\<or> (\\<exists>f. t = Fun f [] \\<and> least f)", "obtain f where\n      \"t = Var x \\<or> t = Fun f [] \\<and> least f\""], ["proof (prove)\nusing this:\n  t = Var x \\<or> (\\<exists>f. t = Fun f [] \\<and> least f)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        t = Var x \\<or> t = Fun f [] \\<and> least f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  t = Var x \\<or> t = Fun f [] \\<and> least f\n\ngoal (1 subgoal):\n 1. NS (Var x) t \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "then"], ["proof (chain)\npicking this:\n  t = Var x \\<or> t = Fun f [] \\<and> least f", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Var x \\<or> t = Fun f [] \\<and> least f\n\ngoal (1 subgoal):\n 1. (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. t = Var x \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)\n 2. t = Fun f [] \\<and> least f \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "assume \"t = Var x\""], ["proof (state)\nthis:\n  t = Var x\n\ngoal (2 subgoals):\n 1. t = Var x \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)\n 2. t = Fun f [] \\<and> least f \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "then"], ["proof (chain)\npicking this:\n  t = Var x", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Var x\n\ngoal (1 subgoal):\n 1. (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "using nS"], ["proof (prove)\nusing this:\n  t = Var x\n  \\<not> S (Var x) t\n\ngoal (1 subgoal):\n 1. (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "by blast"], ["proof (state)\nthis:\n  (S (Var x) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Var x) u) \\<and>\n  (NS (Var x) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Var x) u) \\<and>\n  (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)\n\ngoal (1 subgoal):\n 1. t = Fun f [] \\<and> least f \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t = Fun f [] \\<and> least f \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "assume \"t = Fun f [] \\<and> least f\""], ["proof (state)\nthis:\n  t = Fun f [] \\<and> least f\n\ngoal (1 subgoal):\n 1. t = Fun f [] \\<and> least f \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "then"], ["proof (chain)\npicking this:\n  t = Fun f [] \\<and> least f", "have t: \"t = Fun f []\" and least: \"least f\""], ["proof (prove)\nusing this:\n  t = Fun f [] \\<and> least f\n\ngoal (1 subgoal):\n 1. t = Fun f [] &&& least f", "by auto"], ["proof (state)\nthis:\n  t = Fun f []\n  least f\n\ngoal (1 subgoal):\n 1. t = Fun f [] \\<and> least f \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "from not_S_least[OF least]"], ["proof (chain)\npicking this:\n  \\<not> S (Fun f []) ?t", "have nS': \"\\<not> S t u\""], ["proof (prove)\nusing this:\n  \\<not> S (Fun f []) ?t\n\ngoal (1 subgoal):\n 1. \\<not> S t u", "unfolding t"], ["proof (prove)\nusing this:\n  \\<not> S (Fun f []) ?t\n\ngoal (1 subgoal):\n 1. \\<not> S (Fun f []) u", "."], ["proof (state)\nthis:\n  \\<not> S t u\n\ngoal (1 subgoal):\n 1. t = Fun f [] \\<and> least f \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "proof (cases \"NS t u\")"], ["proof (state)\ngoal (2 subgoals):\n 1. NS t u \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)\n 2. \\<not> NS t u \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "case True"], ["proof (state)\nthis:\n  NS t u\n\ngoal (2 subgoals):\n 1. NS t u \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)\n 2. \\<not> NS t u \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "with NS_least_least[OF least, of u] t"], ["proof (chain)\npicking this:\n  NS (Fun f []) u \\<Longrightarrow> \\<exists>g. u = Fun g [] \\<and> least g\n  t = Fun f []\n  NS t u", "obtain h where\n          u: \"u = Fun h []\" and least: \"least h\""], ["proof (prove)\nusing this:\n  NS (Fun f []) u \\<Longrightarrow> \\<exists>g. u = Fun g [] \\<and> least g\n  t = Fun f []\n  NS t u\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>u = Fun h []; least h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  u = Fun h []\n  least h\n\ngoal (2 subgoals):\n 1. NS t u \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)\n 2. \\<not> NS t u \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "from NS_all_least[OF least]"], ["proof (chain)\npicking this:\n  NS ?t (Fun h [])", "have NS: \"NS (Var x) u\""], ["proof (prove)\nusing this:\n  NS ?t (Fun h [])\n\ngoal (1 subgoal):\n 1. NS (Var x) u", "unfolding u"], ["proof (prove)\nusing this:\n  NS ?t (Fun h [])\n\ngoal (1 subgoal):\n 1. NS (Var x) (Fun h [])", "."], ["proof (state)\nthis:\n  NS (Var x) u\n\ngoal (2 subgoals):\n 1. NS t u \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)\n 2. \\<not> NS t u \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "with nS nS'"], ["proof (chain)\npicking this:\n  \\<not> S (Var x) t\n  \\<not> S t u\n  NS (Var x) u", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> S (Var x) t\n  \\<not> S t u\n  NS (Var x) u\n\ngoal (1 subgoal):\n 1. (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "by blast"], ["proof (state)\nthis:\n  (S (Var x) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Var x) u) \\<and>\n  (NS (Var x) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Var x) u) \\<and>\n  (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)\n\ngoal (1 subgoal):\n 1. \\<not> NS t u \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> NS t u \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "case False"], ["proof (state)\nthis:\n  \\<not> NS t u\n\ngoal (1 subgoal):\n 1. \\<not> NS t u \\<Longrightarrow>\n    (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "with S_imp_NS[of t u]"], ["proof (chain)\npicking this:\n  S t u \\<Longrightarrow> NS t u\n  \\<not> NS t u", "show ?thesis"], ["proof (prove)\nusing this:\n  S t u \\<Longrightarrow> NS t u\n  \\<not> NS t u\n\ngoal (1 subgoal):\n 1. (S (Var x) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Var x) u) \\<and>\n    (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)", "by blast"], ["proof (state)\nthis:\n  (S (Var x) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Var x) u) \\<and>\n  (NS (Var x) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Var x) u) \\<and>\n  (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S (Var x) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Var x) u) \\<and>\n  (NS (Var x) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Var x) u) \\<and>\n  (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S (Var x) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Var x) u) \\<and>\n  (NS (Var x) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Var x) u) \\<and>\n  (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S (Var x) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Var x) u) \\<and>\n  (NS (Var x) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Var x) u) \\<and>\n  (NS (Var x) t \\<longrightarrow> NS t u \\<longrightarrow> NS (Var x) u)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       (\\<And>x2a t u.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           (S x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            S t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> NS x2a u)) \\<Longrightarrow>\n       (S (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun x1a x2) u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       (\\<And>x2a t u.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           (S x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            S t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> NS x2a u)) \\<Longrightarrow>\n       (S (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun x1a x2) u)", "case (Fun f ss t u)"], ["proof (state)\nthis:\n  ?x2a13 \\<in> set ss \\<Longrightarrow>\n  (S ?x2a13 ?t13 \\<longrightarrow>\n   NS ?t13 ?u13 \\<longrightarrow> S ?x2a13 ?u13) \\<and>\n  (NS ?x2a13 ?t13 \\<longrightarrow>\n   S ?t13 ?u13 \\<longrightarrow> S ?x2a13 ?u13) \\<and>\n  (NS ?x2a13 ?t13 \\<longrightarrow>\n   NS ?t13 ?u13 \\<longrightarrow> NS ?x2a13 ?u13)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       (\\<And>x2a t u.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           (S x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            S t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> NS x2a u)) \\<Longrightarrow>\n       (S (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun x1a x2) u)", "note IH = this"], ["proof (state)\nthis:\n  ?x2a13 \\<in> set ss \\<Longrightarrow>\n  (S ?x2a13 ?t13 \\<longrightarrow>\n   NS ?t13 ?u13 \\<longrightarrow> S ?x2a13 ?u13) \\<and>\n  (NS ?x2a13 ?t13 \\<longrightarrow>\n   S ?t13 ?u13 \\<longrightarrow> S ?x2a13 ?u13) \\<and>\n  (NS ?x2a13 ?t13 \\<longrightarrow>\n   NS ?t13 ?u13 \\<longrightarrow> NS ?x2a13 ?u13)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       (\\<And>x2a t u.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           (S x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            S t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> NS x2a u)) \\<Longrightarrow>\n       (S (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun x1a x2) u)", "let ?s = \"Fun f ss\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       (\\<And>x2a t u.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           (S x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            S t u \\<longrightarrow> S x2a u) \\<and>\n           (NS x2a t \\<longrightarrow>\n            NS t u \\<longrightarrow> NS x2a u)) \\<Longrightarrow>\n       (S (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun x1a x2) u) \\<and>\n       (NS (Fun x1a x2) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun x1a x2) u)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "proof (cases \"NS ?s t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. NS (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<not> NS (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "case False"], ["proof (state)\nthis:\n  \\<not> NS (Fun f ss) t\n\ngoal (2 subgoals):\n 1. NS (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<not> NS (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "with S_imp_NS[of ?s t]"], ["proof (chain)\npicking this:\n  S (Fun f ss) t \\<Longrightarrow> NS (Fun f ss) t\n  \\<not> NS (Fun f ss) t", "show ?thesis"], ["proof (prove)\nusing this:\n  S (Fun f ss) t \\<Longrightarrow> NS (Fun f ss) t\n  \\<not> NS (Fun f ss) t\n\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "by blast"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> NS (Fun f ss) u)\n\ngoal (1 subgoal):\n 1. NS (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. NS (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "case True"], ["proof (state)\nthis:\n  NS (Fun f ss) t\n\ngoal (1 subgoal):\n 1. NS (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "note st = this"], ["proof (state)\nthis:\n  NS (Fun f ss) t\n\ngoal (1 subgoal):\n 1. NS (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "then"], ["proof (chain)\npicking this:\n  NS (Fun f ss) t", "have vst: \"vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF ?s)\" and wst: \"weight t \\<le> weight ?s\""], ["proof (prove)\nusing this:\n  NS (Fun f ss) t\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss)) &&&\n    weight t \\<le> weight (Fun f ss)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight t \\<le> weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. NS (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "proof (cases \"NS t u\")"], ["proof (state)\ngoal (2 subgoals):\n 1. NS t u \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<not> NS t u \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "case False"], ["proof (state)\nthis:\n  \\<not> NS t u\n\ngoal (2 subgoals):\n 1. NS t u \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<not> NS t u \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "with S_imp_NS[of t u]"], ["proof (chain)\npicking this:\n  S t u \\<Longrightarrow> NS t u\n  \\<not> NS t u", "show ?thesis"], ["proof (prove)\nusing this:\n  S t u \\<Longrightarrow> NS t u\n  \\<not> NS t u\n\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "by blast"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> NS (Fun f ss) u)\n\ngoal (1 subgoal):\n 1. NS t u \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. NS t u \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "case True"], ["proof (state)\nthis:\n  NS t u\n\ngoal (1 subgoal):\n 1. NS t u \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "note tu = this"], ["proof (state)\nthis:\n  NS t u\n\ngoal (1 subgoal):\n 1. NS t u \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "then"], ["proof (chain)\npicking this:\n  NS t u", "have vtu: \"vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF t)\" and wtu: \"weight u \\<le> weight t\""], ["proof (prove)\nusing this:\n  NS t u\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF t) &&&\n    weight u \\<le> weight t", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF t)\n  weight u \\<le> weight t\n\ngoal (1 subgoal):\n 1. NS t u \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from vst vtu"], ["proof (chain)\npicking this:\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF t)", "have v: \"vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF ?s)\""], ["proof (prove)\nusing this:\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF t)\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF (Fun f ss))", "by simp"], ["proof (state)\nthis:\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n\ngoal (1 subgoal):\n 1. NS t u \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from wst wtu"], ["proof (chain)\npicking this:\n  weight t \\<le> weight (Fun f ss)\n  weight u \\<le> weight t", "have w: \"weight u \\<le> weight ?s\""], ["proof (prove)\nusing this:\n  weight t \\<le> weight (Fun f ss)\n  weight u \\<le> weight t\n\ngoal (1 subgoal):\n 1. weight u \\<le> weight (Fun f ss)", "by simp"], ["proof (state)\nthis:\n  weight u \\<le> weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. NS t u \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "proof (cases \"weight u < weight ?s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. weight u < weight (Fun f ss) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<not> weight u < weight (Fun f ss) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "case True"], ["proof (state)\nthis:\n  weight u < weight (Fun f ss)\n\ngoal (2 subgoals):\n 1. weight u < weight (Fun f ss) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<not> weight u < weight (Fun f ss) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "with v"], ["proof (chain)\npicking this:\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight u < weight (Fun f ss)", "show ?thesis"], ["proof (prove)\nusing this:\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight u < weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "by auto"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> NS (Fun f ss) u)\n\ngoal (1 subgoal):\n 1. \\<not> weight u < weight (Fun f ss) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> weight u < weight (Fun f ss) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "case False"], ["proof (state)\nthis:\n  \\<not> weight u < weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. \\<not> weight u < weight (Fun f ss) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "with wst wtu"], ["proof (chain)\npicking this:\n  weight t \\<le> weight (Fun f ss)\n  weight u \\<le> weight t\n  \\<not> weight u < weight (Fun f ss)", "have wst: \"weight t = weight ?s\" and wtu: \"weight u = weight t\" and w: \"weight u = weight ?s\""], ["proof (prove)\nusing this:\n  weight t \\<le> weight (Fun f ss)\n  weight u \\<le> weight t\n  \\<not> weight u < weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. weight t = weight (Fun f ss) &&&\n    weight u = weight t &&& weight u = weight (Fun f ss)", "by arith+"], ["proof (state)\nthis:\n  weight t = weight (Fun f ss)\n  weight u = weight t\n  weight u = weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. \\<not> weight u < weight (Fun f ss) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "proof (cases u)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       u = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<And>x21 x22.\n       u = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "case (Var z)"], ["proof (state)\nthis:\n  u = Var z\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       u = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<And>x21 x22.\n       u = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "with v w"], ["proof (chain)\npicking this:\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight u = weight (Fun f ss)\n  u = Var z", "show ?thesis"], ["proof (prove)\nusing this:\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  weight u = weight (Fun f ss)\n  u = Var z\n\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "by auto"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> NS (Fun f ss) u)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       u = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       u = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "case (Fun h us)"], ["proof (state)\nthis:\n  u = Fun h us\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       u = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "note u = this"], ["proof (state)\nthis:\n  u = Fun h us\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       u = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "proof (cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "case (Fun g ts)"], ["proof (state)\nthis:\n  t = Fun g ts\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "note t = this"], ["proof (state)\nthis:\n  t = Fun g ts\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "let ?f = \"(f, length ss)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "let ?g = \"(g, length ts)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "let ?h = \"(h, length us)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "from st t wst"], ["proof (chain)\npicking this:\n  NS (Fun f ss) t\n  t = Fun g ts\n  weight t = weight (Fun f ss)", "have fg: \"pr_weak ?f ?g\""], ["proof (prove)\nusing this:\n  NS (Fun f ss) t\n  t = Fun g ts\n  weight t = weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts)", "by (simp split: if_splits add: pr_strict)"], ["proof (state)\nthis:\n  pr_weak (f, length ss) (g, length ts)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "from tu t u wtu"], ["proof (chain)\npicking this:\n  NS t u\n  t = Fun g ts\n  u = Fun h us\n  weight u = weight t", "have gh: \"pr_weak ?g ?h\""], ["proof (prove)\nusing this:\n  NS t u\n  t = Fun g ts\n  u = Fun h us\n  weight u = weight t\n\ngoal (1 subgoal):\n 1. pr_weak (g, length ts) (h, length us)", "by (simp split: if_splits add: pr_strict)"], ["proof (state)\nthis:\n  pr_weak (g, length ts) (h, length us)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "from pr_weak_trans[OF fg gh]"], ["proof (chain)\npicking this:\n  pr_weak (f, length ss) (h, length us)", "have fh: \"pr_weak ?f ?h\""], ["proof (prove)\nusing this:\n  pr_weak (f, length ss) (h, length us)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (h, length us)", "."], ["proof (state)\nthis:\n  pr_weak (f, length ss) (h, length us)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "proof (cases \"pr_strict ?f ?h\")"], ["proof (state)\ngoal (2 subgoals):\n 1. pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "case True"], ["proof (state)\nthis:\n  pr_strict (f, length ss) (h, length us)\n\ngoal (2 subgoals):\n 1. pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "with w v u"], ["proof (chain)\npicking this:\n  weight u = weight (Fun f ss)\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  u = Fun h us\n  pr_strict (f, length ss) (h, length us)", "show ?thesis"], ["proof (prove)\nusing this:\n  weight u = weight (Fun f ss)\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  u = Fun h us\n  pr_strict (f, length ss) (h, length us)\n\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "by auto"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> NS (Fun f ss) u)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "case False"], ["proof (state)\nthis:\n  \\<not> pr_strict (f, length ss) (h, length us)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "let ?lex = \"lex_ext_unbounded kbo\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from False fh"], ["proof (chain)\npicking this:\n  \\<not> pr_strict (f, length ss) (h, length us)\n  pr_weak (f, length ss) (h, length us)", "have hf: \"pr_weak ?h ?f\""], ["proof (prove)\nusing this:\n  \\<not> pr_strict (f, length ss) (h, length us)\n  pr_weak (f, length ss) (h, length us)\n\ngoal (1 subgoal):\n 1. pr_weak (h, length us) (f, length ss)", "unfolding pr_strict"], ["proof (prove)\nusing this:\n  \\<not> (pr_weak (f, length ss) (h, length us) \\<and>\n          \\<not> pr_weak (h, length us) (f, length ss))\n  pr_weak (f, length ss) (h, length us)\n\ngoal (1 subgoal):\n 1. pr_weak (h, length us) (f, length ss)", "by auto"], ["proof (state)\nthis:\n  pr_weak (h, length us) (f, length ss)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from pr_weak_trans[OF hf fg]"], ["proof (chain)\npicking this:\n  pr_weak (h, length us) (g, length ts)", "have hg: \"pr_weak ?h ?g\""], ["proof (prove)\nusing this:\n  pr_weak (h, length us) (g, length ts)\n\ngoal (1 subgoal):\n 1. pr_weak (h, length us) (g, length ts)", "."], ["proof (state)\nthis:\n  pr_weak (h, length us) (g, length ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from hg"], ["proof (chain)\npicking this:\n  pr_weak (h, length us) (g, length ts)", "have gh2: \"\\<not> pr_strict ?g ?h\""], ["proof (prove)\nusing this:\n  pr_weak (h, length us) (g, length ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (g, length ts) (h, length us)", "unfolding pr_strict"], ["proof (prove)\nusing this:\n  pr_weak (h, length us) (g, length ts)\n\ngoal (1 subgoal):\n 1. \\<not> (pr_weak (g, length ts) (h, length us) \\<and>\n            \\<not> pr_weak (h, length us) (g, length ts))", "by auto"], ["proof (state)\nthis:\n  \\<not> pr_strict (g, length ts) (h, length us)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from pr_weak_trans[OF gh hf]"], ["proof (chain)\npicking this:\n  pr_weak (g, length ts) (f, length ss)", "have gf: \"pr_weak ?g ?f\""], ["proof (prove)\nusing this:\n  pr_weak (g, length ts) (f, length ss)\n\ngoal (1 subgoal):\n 1. pr_weak (g, length ts) (f, length ss)", "."], ["proof (state)\nthis:\n  pr_weak (g, length ts) (f, length ss)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from gf"], ["proof (chain)\npicking this:\n  pr_weak (g, length ts) (f, length ss)", "have fg2: \"\\<not> pr_strict ?f ?g\""], ["proof (prove)\nusing this:\n  pr_weak (g, length ts) (f, length ss)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (g, length ts)", "unfolding pr_strict"], ["proof (prove)\nusing this:\n  pr_weak (g, length ts) (f, length ss)\n\ngoal (1 subgoal):\n 1. \\<not> (pr_weak (f, length ss) (g, length ts) \\<and>\n            \\<not> pr_weak (g, length ts) (f, length ss))", "by auto"], ["proof (state)\nthis:\n  \\<not> pr_strict (f, length ss) (g, length ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from st t wst fg2"], ["proof (chain)\npicking this:\n  NS (Fun f ss) t\n  t = Fun g ts\n  weight t = weight (Fun f ss)\n  \\<not> pr_strict (f, length ss) (g, length ts)", "have st: \"snd (?lex ss ts)\""], ["proof (prove)\nusing this:\n  NS (Fun f ss) t\n  t = Fun g ts\n  weight t = weight (Fun f ss)\n  \\<not> pr_strict (f, length ss) (g, length ts)\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo ss ts)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  snd (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from tu t u wtu gh2"], ["proof (chain)\npicking this:\n  NS t u\n  t = Fun g ts\n  u = Fun h us\n  weight u = weight t\n  \\<not> pr_strict (g, length ts) (h, length us)", "have tu: \"snd (?lex ts us)\""], ["proof (prove)\nusing this:\n  NS t u\n  t = Fun g ts\n  u = Fun h us\n  weight u = weight t\n  \\<not> pr_strict (g, length ts) (h, length us)\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo ts us)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  snd (lex_ext_unbounded kbo ts us)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "{"], ["proof (state)\nthis:\n  snd (lex_ext_unbounded kbo ts us)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "fix s t u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) ta__ \\<longrightarrow>\n     NS ta__ ua__ \\<longrightarrow> S (Fun f ss) ua__) \\<and>\n    (NS (Fun f ss) ta__ \\<longrightarrow>\n     S ta__ ua__ \\<longrightarrow> S (Fun f ss) ua__) \\<and>\n    (NS (Fun f ss) ta__ \\<longrightarrow>\n     NS ta__ ua__ \\<longrightarrow> NS (Fun f ss) ua__)", "assume \"s \\<in> set ss\""], ["proof (state)\nthis:\n  s \\<in> set ss\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) ta__ \\<longrightarrow>\n     NS ta__ ua__ \\<longrightarrow> S (Fun f ss) ua__) \\<and>\n    (NS (Fun f ss) ta__ \\<longrightarrow>\n     S ta__ ua__ \\<longrightarrow> S (Fun f ss) ua__) \\<and>\n    (NS (Fun f ss) ta__ \\<longrightarrow>\n     NS ta__ ua__ \\<longrightarrow> NS (Fun f ss) ua__)", "from IH[OF this, of t u]"], ["proof (chain)\npicking this:\n  (S s t \\<longrightarrow> NS t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> S t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> NS t u \\<longrightarrow> NS s u)", "have \"(NS s t \\<and> S t u \\<longrightarrow> S s u) \\<and>\n                  (S s t \\<and> NS t u \\<longrightarrow> S s u) \\<and>\n                  (NS s t \\<and> NS t u \\<longrightarrow> NS s u) \\<and>\n                  (S s t \\<and> S t u \\<longrightarrow> S s u)\""], ["proof (prove)\nusing this:\n  (S s t \\<longrightarrow> NS t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> S t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> NS t u \\<longrightarrow> NS s u)\n\ngoal (1 subgoal):\n 1. (NS s t \\<and> S t u \\<longrightarrow> S s u) \\<and>\n    (S s t \\<and> NS t u \\<longrightarrow> S s u) \\<and>\n    (NS s t \\<and> NS t u \\<longrightarrow> NS s u) \\<and>\n    (S s t \\<and> S t u \\<longrightarrow> S s u)", "using S_imp_NS[of s t]"], ["proof (prove)\nusing this:\n  (S s t \\<longrightarrow> NS t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> S t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> NS t u \\<longrightarrow> NS s u)\n  S s t \\<Longrightarrow> NS s t\n\ngoal (1 subgoal):\n 1. (NS s t \\<and> S t u \\<longrightarrow> S s u) \\<and>\n    (S s t \\<and> NS t u \\<longrightarrow> S s u) \\<and>\n    (NS s t \\<and> NS t u \\<longrightarrow> NS s u) \\<and>\n    (S s t \\<and> S t u \\<longrightarrow> S s u)", "by blast"], ["proof (state)\nthis:\n  (NS s t \\<and> S t u \\<longrightarrow> S s u) \\<and>\n  (S s t \\<and> NS t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<and> NS t u \\<longrightarrow> NS s u) \\<and>\n  (S s t \\<and> S t u \\<longrightarrow> S s u)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) ta__ \\<longrightarrow>\n     NS ta__ ua__ \\<longrightarrow> S (Fun f ss) ua__) \\<and>\n    (NS (Fun f ss) ta__ \\<longrightarrow>\n     S ta__ ua__ \\<longrightarrow> S (Fun f ss) ua__) \\<and>\n    (NS (Fun f ss) ta__ \\<longrightarrow>\n     NS ta__ ua__ \\<longrightarrow> NS (Fun f ss) ua__)", "}"], ["proof (state)\nthis:\n  ?sa16 \\<in> set ss \\<Longrightarrow>\n  (NS ?sa16 ?tb16 \\<and> S ?tb16 ?ub16 \\<longrightarrow>\n   S ?sa16 ?ub16) \\<and>\n  (S ?sa16 ?tb16 \\<and> NS ?tb16 ?ub16 \\<longrightarrow>\n   S ?sa16 ?ub16) \\<and>\n  (NS ?sa16 ?tb16 \\<and> NS ?tb16 ?ub16 \\<longrightarrow>\n   NS ?sa16 ?ub16) \\<and>\n  (S ?sa16 ?tb16 \\<and> S ?tb16 ?ub16 \\<longrightarrow> S ?sa16 ?ub16)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "note IH = this"], ["proof (state)\nthis:\n  ?sa16 \\<in> set ss \\<Longrightarrow>\n  (NS ?sa16 ?tb16 \\<and> S ?tb16 ?ub16 \\<longrightarrow>\n   S ?sa16 ?ub16) \\<and>\n  (S ?sa16 ?tb16 \\<and> NS ?tb16 ?ub16 \\<longrightarrow>\n   S ?sa16 ?ub16) \\<and>\n  (NS ?sa16 ?tb16 \\<and> NS ?tb16 ?ub16 \\<longrightarrow>\n   NS ?sa16 ?ub16) \\<and>\n  (S ?sa16 ?tb16 \\<and> S ?tb16 ?ub16 \\<longrightarrow> S ?sa16 ?ub16)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "let ?b = \"length ss + length ts + length us\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "note lex = lex_ext_compat[of ss ts us kbo ?b, OF IH]"], ["proof (state)\nthis:\n  (\\<And>s t u.\n      \\<lbrakk>s \\<in> set ss; t \\<in> set ts; u \\<in> set us\\<rbrakk>\n      \\<Longrightarrow> s \\<in> set ss) \\<Longrightarrow>\n  (snd (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   fst (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (fst (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   snd (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (snd (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   snd (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   snd (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (fst (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   fst (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us))\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "let ?lexb = \"lex_ext kbo ?b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "note conv = lex_ext_def Let_def"], ["proof (state)\nthis:\n  lex_ext ?f ?n ?ss ?ts =\n  (let lts = length ?ts\n   in if length ?ss = lts \\<or> lts \\<le> ?n\n      then lex_ext_unbounded ?f ?ss ?ts else (False, False))\n  Let ?s ?f \\<equiv> ?f ?s\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from st"], ["proof (chain)\npicking this:\n  snd (lex_ext_unbounded kbo ss ts)", "have st: \"snd (?lexb ss ts)\""], ["proof (prove)\nusing this:\n  snd (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. snd (lex_ext kbo (length ss + length ts + length us) ss ts)", "unfolding conv"], ["proof (prove)\nusing this:\n  snd (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. snd (if length ss = length ts \\<or>\n            length ts \\<le> length ss + length ts + length us\n         then lex_ext_unbounded kbo ss ts else (False, False))", "by simp"], ["proof (state)\nthis:\n  snd (lex_ext kbo (length ss + length ts + length us) ss ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from tu"], ["proof (chain)\npicking this:\n  snd (lex_ext_unbounded kbo ts us)", "have tu: \"snd (?lexb ts us)\""], ["proof (prove)\nusing this:\n  snd (lex_ext_unbounded kbo ts us)\n\ngoal (1 subgoal):\n 1. snd (lex_ext kbo (length ss + length ts + length us) ts us)", "unfolding conv"], ["proof (prove)\nusing this:\n  snd (lex_ext_unbounded kbo ts us)\n\ngoal (1 subgoal):\n 1. snd (if length ts = length us \\<or>\n            length us \\<le> length ss + length ts + length us\n         then lex_ext_unbounded kbo ts us else (False, False))", "by simp"], ["proof (state)\nthis:\n  snd (lex_ext kbo (length ss + length ts + length us) ts us)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from lex st tu"], ["proof (chain)\npicking this:\n  (\\<And>s t u.\n      \\<lbrakk>s \\<in> set ss; t \\<in> set ts; u \\<in> set us\\<rbrakk>\n      \\<Longrightarrow> s \\<in> set ss) \\<Longrightarrow>\n  (snd (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   fst (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (fst (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   snd (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (snd (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   snd (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   snd (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (fst (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   fst (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us))\n  snd (lex_ext kbo (length ss + length ts + length us) ss ts)\n  snd (lex_ext kbo (length ss + length ts + length us) ts us)", "have su: \"snd (?lexb ss us)\""], ["proof (prove)\nusing this:\n  (\\<And>s t u.\n      \\<lbrakk>s \\<in> set ss; t \\<in> set ts; u \\<in> set us\\<rbrakk>\n      \\<Longrightarrow> s \\<in> set ss) \\<Longrightarrow>\n  (snd (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   fst (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (fst (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   snd (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (snd (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   snd (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   snd (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (fst (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   fst (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us))\n  snd (lex_ext kbo (length ss + length ts + length us) ss ts)\n  snd (lex_ext kbo (length ss + length ts + length us) ts us)\n\ngoal (1 subgoal):\n 1. snd (lex_ext kbo (length ss + length ts + length us) ss us)", "by blast"], ["proof (state)\nthis:\n  snd (lex_ext kbo (length ss + length ts + length us) ss us)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "then"], ["proof (chain)\npicking this:\n  snd (lex_ext kbo (length ss + length ts + length us) ss us)", "have su: \"snd (?lex ss us)\""], ["proof (prove)\nusing this:\n  snd (lex_ext kbo (length ss + length ts + length us) ss us)\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo ss us)", "unfolding conv"], ["proof (prove)\nusing this:\n  snd (if length ss = length us \\<or>\n          length us \\<le> length ss + length ts + length us\n       then lex_ext_unbounded kbo ss us else (False, False))\n\ngoal (1 subgoal):\n 1. snd (lex_ext_unbounded kbo ss us)", "by simp"], ["proof (state)\nthis:\n  snd (lex_ext_unbounded kbo ss us)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from w v u su fh"], ["proof (chain)\npicking this:\n  weight u = weight (Fun f ss)\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  u = Fun h us\n  snd (lex_ext_unbounded kbo ss us)\n  pr_weak (f, length ss) (h, length us)", "have NS: \"NS ?s u\""], ["proof (prove)\nusing this:\n  weight u = weight (Fun f ss)\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  u = Fun h us\n  snd (lex_ext_unbounded kbo ss us)\n  pr_weak (f, length ss) (h, length us)\n\ngoal (1 subgoal):\n 1. NS (Fun f ss) u", "by simp"], ["proof (state)\nthis:\n  NS (Fun f ss) u\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "{"], ["proof (state)\nthis:\n  NS (Fun f ss) u\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "assume st: \"S ?s t\""], ["proof (state)\nthis:\n  S (Fun f ss) t\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "with t wst fg fg2"], ["proof (chain)\npicking this:\n  t = Fun g ts\n  weight t = weight (Fun f ss)\n  pr_weak (f, length ss) (g, length ts)\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  S (Fun f ss) t", "have st: \"fst (?lex ss ts)\""], ["proof (prove)\nusing this:\n  t = Fun g ts\n  weight t = weight (Fun f ss)\n  pr_weak (f, length ss) (g, length ts)\n  \\<not> pr_strict (f, length ss) (g, length ts)\n  S (Fun f ss) t\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo ss ts)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "then"], ["proof (chain)\npicking this:\n  fst (lex_ext_unbounded kbo ss ts)", "have st: \"fst (?lexb ss ts)\""], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. fst (lex_ext kbo (length ss + length ts + length us) ss ts)", "unfolding conv"], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded kbo ss ts)\n\ngoal (1 subgoal):\n 1. fst (if length ss = length ts \\<or>\n            length ts \\<le> length ss + length ts + length us\n         then lex_ext_unbounded kbo ss ts else (False, False))", "by simp"], ["proof (state)\nthis:\n  fst (lex_ext kbo (length ss + length ts + length us) ss ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from lex st tu"], ["proof (chain)\npicking this:\n  (\\<And>s t u.\n      \\<lbrakk>s \\<in> set ss; t \\<in> set ts; u \\<in> set us\\<rbrakk>\n      \\<Longrightarrow> s \\<in> set ss) \\<Longrightarrow>\n  (snd (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   fst (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (fst (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   snd (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (snd (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   snd (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   snd (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (fst (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   fst (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us))\n  fst (lex_ext kbo (length ss + length ts + length us) ss ts)\n  snd (lex_ext kbo (length ss + length ts + length us) ts us)", "have su: \"fst (?lexb ss us)\""], ["proof (prove)\nusing this:\n  (\\<And>s t u.\n      \\<lbrakk>s \\<in> set ss; t \\<in> set ts; u \\<in> set us\\<rbrakk>\n      \\<Longrightarrow> s \\<in> set ss) \\<Longrightarrow>\n  (snd (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   fst (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (fst (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   snd (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (snd (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   snd (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   snd (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (fst (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   fst (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us))\n  fst (lex_ext kbo (length ss + length ts + length us) ss ts)\n  snd (lex_ext kbo (length ss + length ts + length us) ts us)\n\ngoal (1 subgoal):\n 1. fst (lex_ext kbo (length ss + length ts + length us) ss us)", "by blast"], ["proof (state)\nthis:\n  fst (lex_ext kbo (length ss + length ts + length us) ss us)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "then"], ["proof (chain)\npicking this:\n  fst (lex_ext kbo (length ss + length ts + length us) ss us)", "have su: \"fst (?lex ss us)\""], ["proof (prove)\nusing this:\n  fst (lex_ext kbo (length ss + length ts + length us) ss us)\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo ss us)", "unfolding conv"], ["proof (prove)\nusing this:\n  fst (if length ss = length us \\<or>\n          length us \\<le> length ss + length ts + length us\n       then lex_ext_unbounded kbo ss us else (False, False))\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo ss us)", "by simp"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo ss us)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from w v u su fh"], ["proof (chain)\npicking this:\n  weight u = weight (Fun f ss)\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  u = Fun h us\n  fst (lex_ext_unbounded kbo ss us)\n  pr_weak (f, length ss) (h, length us)", "have S: \"S ?s u\""], ["proof (prove)\nusing this:\n  weight u = weight (Fun f ss)\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  u = Fun h us\n  fst (lex_ext_unbounded kbo ss us)\n  pr_weak (f, length ss) (h, length us)\n\ngoal (1 subgoal):\n 1. S (Fun f ss) u", "by simp"], ["proof (state)\nthis:\n  S (Fun f ss) u\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "}"], ["proof (state)\nthis:\n  S (Fun f ss) t \\<Longrightarrow> S (Fun f ss) u\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "note S_left = this"], ["proof (state)\nthis:\n  S (Fun f ss) t \\<Longrightarrow> S (Fun f ss) u\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "{"], ["proof (state)\nthis:\n  S (Fun f ss) t \\<Longrightarrow> S (Fun f ss) u\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "assume tu: \"S t u\""], ["proof (state)\nthis:\n  S t u\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "with t u wtu gh2"], ["proof (chain)\npicking this:\n  t = Fun g ts\n  u = Fun h us\n  weight u = weight t\n  \\<not> pr_strict (g, length ts) (h, length us)\n  S t u", "have tu: \"fst (?lex ts us)\""], ["proof (prove)\nusing this:\n  t = Fun g ts\n  u = Fun h us\n  weight u = weight t\n  \\<not> pr_strict (g, length ts) (h, length us)\n  S t u\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo ts us)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo ts us)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "then"], ["proof (chain)\npicking this:\n  fst (lex_ext_unbounded kbo ts us)", "have tu: \"fst (?lexb ts us)\""], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded kbo ts us)\n\ngoal (1 subgoal):\n 1. fst (lex_ext kbo (length ss + length ts + length us) ts us)", "unfolding conv"], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded kbo ts us)\n\ngoal (1 subgoal):\n 1. fst (if length ts = length us \\<or>\n            length us \\<le> length ss + length ts + length us\n         then lex_ext_unbounded kbo ts us else (False, False))", "by simp"], ["proof (state)\nthis:\n  fst (lex_ext kbo (length ss + length ts + length us) ts us)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from lex st tu"], ["proof (chain)\npicking this:\n  (\\<And>s t u.\n      \\<lbrakk>s \\<in> set ss; t \\<in> set ts; u \\<in> set us\\<rbrakk>\n      \\<Longrightarrow> s \\<in> set ss) \\<Longrightarrow>\n  (snd (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   fst (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (fst (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   snd (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (snd (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   snd (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   snd (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (fst (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   fst (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us))\n  snd (lex_ext kbo (length ss + length ts + length us) ss ts)\n  fst (lex_ext kbo (length ss + length ts + length us) ts us)", "have su: \"fst (?lexb ss us)\""], ["proof (prove)\nusing this:\n  (\\<And>s t u.\n      \\<lbrakk>s \\<in> set ss; t \\<in> set ts; u \\<in> set us\\<rbrakk>\n      \\<Longrightarrow> s \\<in> set ss) \\<Longrightarrow>\n  (snd (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   fst (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (fst (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   snd (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (snd (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   snd (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   snd (lex_ext kbo (length ss + length ts + length us) ss us)) \\<and>\n  (fst (lex_ext kbo (length ss + length ts + length us) ss ts) \\<and>\n   fst (lex_ext kbo (length ss + length ts + length us) ts\n         us) \\<longrightarrow>\n   fst (lex_ext kbo (length ss + length ts + length us) ss us))\n  snd (lex_ext kbo (length ss + length ts + length us) ss ts)\n  fst (lex_ext kbo (length ss + length ts + length us) ts us)\n\ngoal (1 subgoal):\n 1. fst (lex_ext kbo (length ss + length ts + length us) ss us)", "by blast"], ["proof (state)\nthis:\n  fst (lex_ext kbo (length ss + length ts + length us) ss us)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "then"], ["proof (chain)\npicking this:\n  fst (lex_ext kbo (length ss + length ts + length us) ss us)", "have su: \"fst (?lex ss us)\""], ["proof (prove)\nusing this:\n  fst (lex_ext kbo (length ss + length ts + length us) ss us)\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo ss us)", "unfolding conv"], ["proof (prove)\nusing this:\n  fst (if length ss = length us \\<or>\n          length us \\<le> length ss + length ts + length us\n       then lex_ext_unbounded kbo ss us else (False, False))\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo ss us)", "by simp"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo ss us)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from w v u su fh"], ["proof (chain)\npicking this:\n  weight u = weight (Fun f ss)\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  u = Fun h us\n  fst (lex_ext_unbounded kbo ss us)\n  pr_weak (f, length ss) (h, length us)", "have S: \"S ?s u\""], ["proof (prove)\nusing this:\n  weight u = weight (Fun f ss)\n  vars_term_ms (SCF u) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n  u = Fun h us\n  fst (lex_ext_unbounded kbo ss us)\n  pr_weak (f, length ss) (h, length us)\n\ngoal (1 subgoal):\n 1. S (Fun f ss) u", "by simp"], ["proof (state)\nthis:\n  S (Fun f ss) u\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "}"], ["proof (state)\nthis:\n  S t u \\<Longrightarrow> S (Fun f ss) u\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "note S_right = this"], ["proof (state)\nthis:\n  S t u \\<Longrightarrow> S (Fun f ss) u\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us) \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from NS S_left S_right"], ["proof (chain)\npicking this:\n  NS (Fun f ss) u\n  S (Fun f ss) t \\<Longrightarrow> S (Fun f ss) u\n  S t u \\<Longrightarrow> S (Fun f ss) u", "show ?thesis"], ["proof (prove)\nusing this:\n  NS (Fun f ss) u\n  S (Fun f ss) t \\<Longrightarrow> S (Fun f ss) u\n  S t u \\<Longrightarrow> S (Fun f ss) u\n\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "by blast"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> NS (Fun f ss) u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> NS (Fun f ss) u)\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "case (Var x)"], ["proof (state)\nthis:\n  t = Var x\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "note t = this"], ["proof (state)\nthis:\n  t = Var x\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "from tu weight_w0[of u]"], ["proof (chain)\npicking this:\n  NS t u\n  w0 \\<le> weight u", "have least: \"least h\" and u: \"u = Fun h []\""], ["proof (prove)\nusing this:\n  NS t u\n  w0 \\<le> weight u\n\ngoal (1 subgoal):\n 1. least h &&& u = Fun h []", "unfolding t u"], ["proof (prove)\nusing this:\n  NS (Var x) (Fun h us)\n  w0 \\<le> weight (Fun h us)\n\ngoal (1 subgoal):\n 1. least h &&& Fun h us = Fun h []", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  least h\n  u = Fun h []\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "from NS_all_least[OF least]"], ["proof (chain)\npicking this:\n  NS ?t (Fun h [])", "have NS: \"NS ?s u\""], ["proof (prove)\nusing this:\n  NS ?t (Fun h [])\n\ngoal (1 subgoal):\n 1. NS (Fun f ss) u", "unfolding u"], ["proof (prove)\nusing this:\n  NS ?t (Fun h [])\n\ngoal (1 subgoal):\n 1. NS (Fun f ss) (Fun h [])", "."], ["proof (state)\nthis:\n  NS (Fun f ss) u\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "from not_S_Var"], ["proof (chain)\npicking this:\n  \\<not> S (Var ?x) ?t", "have nS': \"\\<not> S t u\""], ["proof (prove)\nusing this:\n  \\<not> S (Var ?x) ?t\n\ngoal (1 subgoal):\n 1. \\<not> S t u", "unfolding t"], ["proof (prove)\nusing this:\n  \\<not> S (Var ?x) ?t\n\ngoal (1 subgoal):\n 1. \\<not> S (Var x) u", "."], ["proof (state)\nthis:\n  \\<not> S t u\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow>\n       (S (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n       (NS (Fun f ss) t \\<longrightarrow>\n        NS t u \\<longrightarrow> NS (Fun f ss) u)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "proof (cases \"S ?s t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. S (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<not> S (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "case False"], ["proof (state)\nthis:\n  \\<not> S (Fun f ss) t\n\ngoal (2 subgoals):\n 1. S (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)\n 2. \\<not> S (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "with nS' NS"], ["proof (chain)\npicking this:\n  \\<not> S t u\n  NS (Fun f ss) u\n  \\<not> S (Fun f ss) t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> S t u\n  NS (Fun f ss) u\n  \\<not> S (Fun f ss) t\n\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "by blast"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> NS (Fun f ss) u)\n\ngoal (1 subgoal):\n 1. S (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. S (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "case True"], ["proof (state)\nthis:\n  S (Fun f ss) t\n\ngoal (1 subgoal):\n 1. S (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "then"], ["proof (chain)\npicking this:\n  S (Fun f ss) t", "have \"vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF ?s)\""], ["proof (prove)\nusing this:\n  S (Fun f ss) t\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))\n\ngoal (1 subgoal):\n 1. S (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from set_mset_mono[OF this, unfolded set_mset_vars_term_ms t]"], ["proof (chain)\npicking this:\n  vars_term (SCF (Var x)) \\<subseteq> vars_term (SCF (Fun f ss))", "have \"x \\<in> vars_term (SCF ?s)\""], ["proof (prove)\nusing this:\n  vars_term (SCF (Var x)) \\<subseteq> vars_term (SCF (Fun f ss))\n\ngoal (1 subgoal):\n 1. x \\<in> vars_term (SCF (Fun f ss))", "by simp"], ["proof (state)\nthis:\n  x \\<in> vars_term (SCF (Fun f ss))\n\ngoal (1 subgoal):\n 1. S (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "also"], ["proof (state)\nthis:\n  x \\<in> vars_term (SCF (Fun f ss))\n\ngoal (1 subgoal):\n 1. S (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "have \"\\<dots> \\<subseteq> vars_term ?s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_term (SCF (Fun f ss)) \\<subseteq> vars_term (Fun f ss)", "by (rule vars_term_scf_subset)"], ["proof (state)\nthis:\n  vars_term (SCF (Fun f ss)) \\<subseteq> vars_term (Fun f ss)\n\ngoal (1 subgoal):\n 1. S (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "finally"], ["proof (chain)\npicking this:\n  x \\<in> vars_term (Fun f ss)", "obtain s sss where ss: \"ss = s # sss\""], ["proof (prove)\nusing this:\n  x \\<in> vars_term (Fun f ss)\n\ngoal (1 subgoal):\n 1. (\\<And>s sss. ss = s # sss \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases ss, auto)"], ["proof (state)\nthis:\n  ss = s # sss\n\ngoal (1 subgoal):\n 1. S (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "from kbo_supt_one[OF NS_all_least[OF least, of s], of f Nil sss]"], ["proof (chain)\npicking this:\n  S (Fun f ([] @ s # sss)) (Fun h [])", "have \"S ?s u\""], ["proof (prove)\nusing this:\n  S (Fun f ([] @ s # sss)) (Fun h [])\n\ngoal (1 subgoal):\n 1. S (Fun f ss) u", "unfolding ss u"], ["proof (prove)\nusing this:\n  S (Fun f ([] @ s # sss)) (Fun h [])\n\ngoal (1 subgoal):\n 1. S (Fun f (s # sss)) (Fun h [])", "by simp"], ["proof (state)\nthis:\n  S (Fun f ss) u\n\ngoal (1 subgoal):\n 1. S (Fun f ss) t \\<Longrightarrow>\n    (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "with NS"], ["proof (chain)\npicking this:\n  NS (Fun f ss) u\n  S (Fun f ss) u", "show ?thesis"], ["proof (prove)\nusing this:\n  NS (Fun f ss) u\n  S (Fun f ss) u\n\ngoal (1 subgoal):\n 1. (S (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n    (NS (Fun f ss) t \\<longrightarrow>\n     NS t u \\<longrightarrow> NS (Fun f ss) u)", "by blast"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> NS (Fun f ss) u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> NS (Fun f ss) u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> NS (Fun f ss) u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> NS (Fun f ss) u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> NS (Fun f ss) u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> NS (Fun f ss) u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   S t u \\<longrightarrow> S (Fun f ss) u) \\<and>\n  (NS (Fun f ss) t \\<longrightarrow>\n   NS t u \\<longrightarrow> NS (Fun f ss) u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma S_trans: \"S s t \\<Longrightarrow> S t u \\<Longrightarrow> S s u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S s t; S t u\\<rbrakk> \\<Longrightarrow> S s u", "using S_imp_NS[of s t] kbo_trans[of s t u]"], ["proof (prove)\nusing this:\n  S s t \\<Longrightarrow> NS s t\n  (S s t \\<longrightarrow> NS t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> S t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> NS t u \\<longrightarrow> NS s u)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>S s t; S t u\\<rbrakk> \\<Longrightarrow> S s u", "by blast"], ["", "lemma NS_trans: \"NS s t \\<Longrightarrow> NS t u \\<Longrightarrow> NS s u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>NS s t; NS t u\\<rbrakk> \\<Longrightarrow> NS s u", "using kbo_trans[of s t u]"], ["proof (prove)\nusing this:\n  (S s t \\<longrightarrow> NS t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> S t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> NS t u \\<longrightarrow> NS s u)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>NS s t; NS t u\\<rbrakk> \\<Longrightarrow> NS s u", "by blast"], ["", "lemma NS_S_compat: \"NS s t \\<Longrightarrow> S t u \\<Longrightarrow> S s u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>NS s t; S t u\\<rbrakk> \\<Longrightarrow> S s u", "using kbo_trans[of s t u]"], ["proof (prove)\nusing this:\n  (S s t \\<longrightarrow> NS t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> S t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> NS t u \\<longrightarrow> NS s u)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>NS s t; S t u\\<rbrakk> \\<Longrightarrow> S s u", "by blast"], ["", "lemma S_NS_compat: \"S s t \\<Longrightarrow> NS t u \\<Longrightarrow> S s u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S s t; NS t u\\<rbrakk> \\<Longrightarrow> S s u", "using kbo_trans[of s t u]"], ["proof (prove)\nusing this:\n  (S s t \\<longrightarrow> NS t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> S t u \\<longrightarrow> S s u) \\<and>\n  (NS s t \\<longrightarrow> NS t u \\<longrightarrow> NS s u)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>S s t; NS t u\\<rbrakk> \\<Longrightarrow> S s u", "by blast"], ["", "subsection \\<open>Strong Normalization (a.k.a. Well-Foundedness)\\<close>"], ["", "lemma kbo_strongly_normalizing:\n  fixes s :: \"('f, 'v) term\"\n  shows \"SN_on {(s, t). S s t} {s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {s}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {s}", "let ?SN = \"\\<lambda> t :: ('f, 'v) term. SN_on {(s, t). S s t} {t}\""], ["proof (state)\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {s}", "let ?m1 = \"\\<lambda> (f, ss). weight (Fun f ss)\""], ["proof (state)\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {s}", "let ?m2 = \"\\<lambda> (f, ss). (f, length ss)\""], ["proof (state)\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {s}", "let ?rel' = \"lex_two {(fss, gts). ?m1 fss > ?m1 gts} {(fss, gts). ?m1 fss \\<ge> ?m1 gts} {(fss, gts). pr_strict (?m2 fss) (?m2 gts)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {s}", "let ?rel = \"inv_image ?rel' (\\<lambda> x. (x, x))\""], ["proof (state)\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {s}", "have SN_rel: \"SN ?rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN (inv_image\n         (lex_two\n           {(fss, gts).\n            (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case fss of (f, ss) \\<Rightarrow> weight (Fun f ss))}\n           {(fss, gts).\n            (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case fss of (f, ss) \\<Rightarrow> weight (Fun f ss))}\n           {(fss, gts).\n            pr_strict (case fss of (f, ss) \\<Rightarrow> (f, length ss))\n             (case gts of (f, ss) \\<Rightarrow> (f, length ss))})\n         (\\<lambda>x. (x, x)))", "by (rule SN_inv_image, rule lex_two, insert SN_inv_image[OF pr_SN, of ?m2]  SN_inv_image[OF SN_nat_gt, of ?m1],\n        auto simp: inv_image_def)"], ["proof (state)\nthis:\n  SN (inv_image\n       (lex_two\n         {(fss, gts).\n          (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n          < (case fss of (f, ss) \\<Rightarrow> weight (Fun f ss))}\n         {(fss, gts).\n          (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n          \\<le> (case fss of (f, ss) \\<Rightarrow> weight (Fun f ss))}\n         {(fss, gts).\n          pr_strict (case fss of (f, ss) \\<Rightarrow> (f, length ss))\n           (case gts of (f, ss) \\<Rightarrow> (f, length ss))})\n       (\\<lambda>x. (x, x)))\n\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {s}", "note conv = SN_on_all_reducts_SN_on_conv"], ["proof (state)\nthis:\n  SN_on ?r {?a} =\n  (\\<forall>b. (?a, b) \\<in> ?r \\<longrightarrow> SN_on ?r {b})\n\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {s}", "show \"?SN s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {s}", "proof (induct s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Var x}\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n            {x2a}) \\<Longrightarrow>\n       SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun x1a x2}", "case (Var x)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x. SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Var x}\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n            {x2a}) \\<Longrightarrow>\n       SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun x1a x2}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Var x}", "unfolding conv[of _ \"Var x\"]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b.\n       (Var x, b) \\<in> {(s, t). S s t} \\<longrightarrow>\n       SN_on {(s, t). S s t} {b}", "using not_S_Var[of x]"], ["proof (prove)\nusing this:\n  \\<not> S (Var x) ?t\n\ngoal (1 subgoal):\n 1. \\<forall>b.\n       (Var x, b) \\<in> {(s, t). S s t} \\<longrightarrow>\n       SN_on {(s, t). S s t} {b}", "by auto"], ["proof (state)\nthis:\n  SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Var x}\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n            {x2a}) \\<Longrightarrow>\n       SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun x1a x2}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n            {x2a}) \\<Longrightarrow>\n       SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun x1a x2}", "case (Fun f ss)"], ["proof (state)\nthis:\n  ?x2a18 \\<in> set ss \\<Longrightarrow>\n  SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {?x2a18}\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n            {x2a}) \\<Longrightarrow>\n       SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun x1a x2}", "then"], ["proof (chain)\npicking this:\n  ?x2a18 \\<in> set ss \\<Longrightarrow>\n  SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {?x2a18}", "have subset: \"set ss \\<subseteq> {s. ?SN s}\""], ["proof (prove)\nusing this:\n  ?x2a18 \\<in> set ss \\<Longrightarrow>\n  SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {?x2a18}\n\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}}", "by blast"], ["proof (state)\nthis:\n  set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n            {x2a}) \\<Longrightarrow>\n       SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun x1a x2}", "let ?P = \"\\<lambda> (f, ss). set ss \\<subseteq> {s. ?SN s} \\<longrightarrow> ?SN (Fun f ss)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n            {x2a}) \\<Longrightarrow>\n       SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun x1a x2}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n            {x2a}) \\<Longrightarrow>\n       SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun x1a x2}", "fix fss"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n            {x2a}) \\<Longrightarrow>\n       SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun x1a x2}", "have \"?P fss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case fss of\n    (f, ss) \\<Rightarrow>\n      set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<longrightarrow>\n      SN_on {(s, t). S s t} {Fun f ss}", "proof (induct fss rule: SN_induct[OF SN_rel])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       (\\<And>b.\n           (a, b)\n           \\<in> inv_image\n                  (lex_two\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     < (case fss of\n                        (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     \\<le> (case fss of\n                            (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     pr_strict\n                      (case fss of (f, ss) \\<Rightarrow> (f, length ss))\n                      (case gts of (f, ss) \\<Rightarrow> (f, length ss))})\n                  (\\<lambda>x. (x, x)) \\<Longrightarrow>\n           case b of\n           (f, ss) \\<Rightarrow>\n             set ss\n             \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                              {s}} \\<longrightarrow>\n             SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n              {Fun f ss}) \\<Longrightarrow>\n       case a of\n       (f, ss) \\<Rightarrow>\n         set ss\n         \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                          {s}} \\<longrightarrow>\n         SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun f ss}", "case (1 fss)"], ["proof (state)\nthis:\n  (fss, ?b18)\n  \\<in> inv_image\n         (lex_two\n           {(fss, gts).\n            (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case fss of (f, ss) \\<Rightarrow> weight (Fun f ss))}\n           {(fss, gts).\n            (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case fss of (f, ss) \\<Rightarrow> weight (Fun f ss))}\n           {(fss, gts).\n            pr_strict (case fss of (f, ss) \\<Rightarrow> (f, length ss))\n             (case gts of (f, ss) \\<Rightarrow> (f, length ss))})\n         (\\<lambda>x. (x, x)) \\<Longrightarrow>\n  case ?b18 of\n  (f, ss) \\<Rightarrow>\n    set ss\n    \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                     {s}} \\<longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun f ss}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       (\\<And>b.\n           (a, b)\n           \\<in> inv_image\n                  (lex_two\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     < (case fss of\n                        (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     \\<le> (case fss of\n                            (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     pr_strict\n                      (case fss of (f, ss) \\<Rightarrow> (f, length ss))\n                      (case gts of (f, ss) \\<Rightarrow> (f, length ss))})\n                  (\\<lambda>x. (x, x)) \\<Longrightarrow>\n           case b of\n           (f, ss) \\<Rightarrow>\n             set ss\n             \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                              {s}} \\<longrightarrow>\n             SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n              {Fun f ss}) \\<Longrightarrow>\n       case a of\n       (f, ss) \\<Rightarrow>\n         set ss\n         \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                          {s}} \\<longrightarrow>\n         SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun f ss}", "obtain f ss where fss: \"fss = (f, ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f ss. fss = (f, ss) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  fss = (f, ss)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       (\\<And>b.\n           (a, b)\n           \\<in> inv_image\n                  (lex_two\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     < (case fss of\n                        (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     \\<le> (case fss of\n                            (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     pr_strict\n                      (case fss of (f, ss) \\<Rightarrow> (f, length ss))\n                      (case gts of (f, ss) \\<Rightarrow> (f, length ss))})\n                  (\\<lambda>x. (x, x)) \\<Longrightarrow>\n           case b of\n           (f, ss) \\<Rightarrow>\n             set ss\n             \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                              {s}} \\<longrightarrow>\n             SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n              {Fun f ss}) \\<Longrightarrow>\n       case a of\n       (f, ss) \\<Rightarrow>\n         set ss\n         \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                          {s}} \\<longrightarrow>\n         SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun f ss}", "{"], ["proof (state)\nthis:\n  fss = (f, ss)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       (\\<And>b.\n           (a, b)\n           \\<in> inv_image\n                  (lex_two\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     < (case fss of\n                        (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     \\<le> (case fss of\n                            (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     pr_strict\n                      (case fss of (f, ss) \\<Rightarrow> (f, length ss))\n                      (case gts of (f, ss) \\<Rightarrow> (f, length ss))})\n                  (\\<lambda>x. (x, x)) \\<Longrightarrow>\n           case b of\n           (f, ss) \\<Rightarrow>\n             set ss\n             \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                              {s}} \\<longrightarrow>\n             SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n              {Fun f ss}) \\<Longrightarrow>\n       case a of\n       (f, ss) \\<Rightarrow>\n         set ss\n         \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                          {s}} \\<longrightarrow>\n         SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun f ss}", "fix g ts"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       (\\<And>b.\n           (a, b)\n           \\<in> inv_image\n                  (lex_two\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     < (case fss of\n                        (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     \\<le> (case fss of\n                            (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     pr_strict\n                      (case fss of (f, ss) \\<Rightarrow> (f, length ss))\n                      (case gts of (f, ss) \\<Rightarrow> (f, length ss))})\n                  (\\<lambda>x. (x, x)) \\<Longrightarrow>\n           case b of\n           (f, ss) \\<Rightarrow>\n             set ss\n             \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                              {s}} \\<longrightarrow>\n             SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n              {Fun f ss}) \\<Longrightarrow>\n       case a of\n       (f, ss) \\<Rightarrow>\n         set ss\n         \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                          {s}} \\<longrightarrow>\n         SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun f ss}", "assume \"?m1 (f, ss) > ?m1 (g, ts) \\<or> ?m1 (f, ss) \\<ge> ?m1 (g, ts) \\<and> pr_strict (?m2 (f, ss)) (?m2 (g, ts))\"\n            and \"set ts \\<subseteq> {s. ?SN s}\""], ["proof (state)\nthis:\n  (case (g, ts) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n  < (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n  (case (g, ts) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n  \\<le> (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n  pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n   (case (g, ts) of (f, ss) \\<Rightarrow> (f, length ss))\n  set ts \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       (\\<And>b.\n           (a, b)\n           \\<in> inv_image\n                  (lex_two\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     < (case fss of\n                        (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     \\<le> (case fss of\n                            (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     pr_strict\n                      (case fss of (f, ss) \\<Rightarrow> (f, length ss))\n                      (case gts of (f, ss) \\<Rightarrow> (f, length ss))})\n                  (\\<lambda>x. (x, x)) \\<Longrightarrow>\n           case b of\n           (f, ss) \\<Rightarrow>\n             set ss\n             \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                              {s}} \\<longrightarrow>\n             SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n              {Fun f ss}) \\<Longrightarrow>\n       case a of\n       (f, ss) \\<Rightarrow>\n         set ss\n         \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                          {s}} \\<longrightarrow>\n         SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun f ss}", "then"], ["proof (chain)\npicking this:\n  (case (g, ts) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n  < (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n  (case (g, ts) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n  \\<le> (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n  pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n   (case (g, ts) of (f, ss) \\<Rightarrow> (f, length ss))\n  set ts \\<subseteq> {s. SN_on {(s, t). S s t} {s}}", "have \"?SN (Fun g ts)\""], ["proof (prove)\nusing this:\n  (case (g, ts) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n  < (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n  (case (g, ts) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n  \\<le> (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n  pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n   (case (g, ts) of (f, ss) \\<Rightarrow> (f, length ss))\n  set ts \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\n\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {Fun g ts}", "using 1[rule_format, of \"(g, ts)\", unfolded fss split]"], ["proof (prove)\nusing this:\n  (case (g, ts) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n  < (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n  (case (g, ts) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n  \\<le> (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n  pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n   (case (g, ts) of (f, ss) \\<Rightarrow> (f, length ss))\n  set ts \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\n  ((f, ss), g, ts)\n  \\<in> inv_image\n         (lex_two\n           {(fss, gts).\n            (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case fss of (f, ss) \\<Rightarrow> weight (Fun f ss))}\n           {(fss, gts).\n            (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case fss of (f, ss) \\<Rightarrow> weight (Fun f ss))}\n           {(fss, gts).\n            pr_strict (case fss of (f, ss) \\<Rightarrow> (f, length ss))\n             (case gts of (f, ss) \\<Rightarrow> (f, length ss))})\n         (\\<lambda>x. (x, x)) \\<Longrightarrow>\n  set ts \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<longrightarrow>\n  SN_on {(s, t). S s t} {Fun g ts}\n\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {Fun g ts}", "by auto"], ["proof (state)\nthis:\n  SN_on {(s, t). S s t} {Fun g ts}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       (\\<And>b.\n           (a, b)\n           \\<in> inv_image\n                  (lex_two\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     < (case fss of\n                        (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     \\<le> (case fss of\n                            (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     pr_strict\n                      (case fss of (f, ss) \\<Rightarrow> (f, length ss))\n                      (case gts of (f, ss) \\<Rightarrow> (f, length ss))})\n                  (\\<lambda>x. (x, x)) \\<Longrightarrow>\n           case b of\n           (f, ss) \\<Rightarrow>\n             set ss\n             \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                              {s}} \\<longrightarrow>\n             SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n              {Fun f ss}) \\<Longrightarrow>\n       case a of\n       (f, ss) \\<Rightarrow>\n         set ss\n         \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                          {s}} \\<longrightarrow>\n         SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun f ss}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(case (?g20, ?ts20) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n           < (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n           (case (?g20, ?ts20) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n           \\<le> (case (f, ss) of\n                  (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n           pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n            (case (?g20, ?ts20) of (f, ss) \\<Rightarrow> (f, length ss));\n   set ?ts20 \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\\<rbrakk>\n  \\<Longrightarrow> SN_on {(s, t). S s t} {Fun ?g20 ?ts20}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       (\\<And>b.\n           (a, b)\n           \\<in> inv_image\n                  (lex_two\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     < (case fss of\n                        (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     \\<le> (case fss of\n                            (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     pr_strict\n                      (case fss of (f, ss) \\<Rightarrow> (f, length ss))\n                      (case gts of (f, ss) \\<Rightarrow> (f, length ss))})\n                  (\\<lambda>x. (x, x)) \\<Longrightarrow>\n           case b of\n           (f, ss) \\<Rightarrow>\n             set ss\n             \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                              {s}} \\<longrightarrow>\n             SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n              {Fun f ss}) \\<Longrightarrow>\n       case a of\n       (f, ss) \\<Rightarrow>\n         set ss\n         \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                          {s}} \\<longrightarrow>\n         SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun f ss}", "note IH = this[unfolded split]"], ["proof (state)\nthis:\n  \\<lbrakk>weight (Fun ?g20 ?ts20) < weight (Fun f ss) \\<or>\n           weight (Fun ?g20 ?ts20) \\<le> weight (Fun f ss) \\<and>\n           pr_strict (f, length ss) (?g20, length ?ts20);\n   set ?ts20 \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\\<rbrakk>\n  \\<Longrightarrow> SN_on {(s, t). S s t} {Fun ?g20 ?ts20}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       (\\<And>b.\n           (a, b)\n           \\<in> inv_image\n                  (lex_two\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     < (case fss of\n                        (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     (case gts of (f, ss) \\<Rightarrow> weight (Fun f ss))\n                     \\<le> (case fss of\n                            (f, ss) \\<Rightarrow> weight (Fun f ss))}\n                    {(fss, gts).\n                     pr_strict\n                      (case fss of (f, ss) \\<Rightarrow> (f, length ss))\n                      (case gts of (f, ss) \\<Rightarrow> (f, length ss))})\n                  (\\<lambda>x. (x, x)) \\<Longrightarrow>\n           case b of\n           (f, ss) \\<Rightarrow>\n             set ss\n             \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                              {s}} \\<longrightarrow>\n             SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n              {Fun f ss}) \\<Longrightarrow>\n       case a of\n       (f, ss) \\<Rightarrow>\n         set ss\n         \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                          {s}} \\<longrightarrow>\n         SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun f ss}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. case fss of\n    (f, ss) \\<Rightarrow>\n      set ss\n      \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                       {s}} \\<longrightarrow>\n      SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun f ss}", "unfolding fss split"], ["proof (prove)\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "assume SN_s: \"set ss \\<subseteq> {s. ?SN s}\""], ["proof (state)\nthis:\n  set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\n\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "let ?f = \"(f, length ss)\""], ["proof (state)\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "let ?s = \"Fun f ss\""], ["proof (state)\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "let ?SNt = \"\\<lambda> g ts. ?SN (Fun g ts)\""], ["proof (state)\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "let ?sym = \"\\<lambda> g ts. (g, length ts)\""], ["proof (state)\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "let ?lex = \"lex_ext kbo (weight ?s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "let ?lexu = \"lex_ext_unbounded kbo\""], ["proof (state)\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "let ?lex_SN = \"{(ys, xs). (\\<forall> y \\<in> set ys. ?SN y) \\<and> fst (?lex ys xs)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "from lex_ext_SN[of kbo \"weight ?s\", OF NS_S_compat]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y z.\n              \\<lbrakk>NS x y; S y z\\<rbrakk>\n              \\<Longrightarrow> NS x (?t22 x y z);\n   \\<And>x y z.\n      \\<lbrakk>NS x y; S y z\\<rbrakk>\n      \\<Longrightarrow> S (?t22 x y z) z\\<rbrakk>\n  \\<Longrightarrow> SN {(ys, xs).\n                        (\\<forall>y\\<in>set ys.\n                            SN_on {(s, t). S s t} {y}) \\<and>\n                        fst (lex_ext kbo (weight (Fun f ss)) ys xs)}", "have SN: \"SN ?lex_SN\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y z.\n              \\<lbrakk>NS x y; S y z\\<rbrakk>\n              \\<Longrightarrow> NS x (?t22 x y z);\n   \\<And>x y z.\n      \\<lbrakk>NS x y; S y z\\<rbrakk>\n      \\<Longrightarrow> S (?t22 x y z) z\\<rbrakk>\n  \\<Longrightarrow> SN {(ys, xs).\n                        (\\<forall>y\\<in>set ys.\n                            SN_on {(s, t). S s t} {y}) \\<and>\n                        fst (lex_ext kbo (weight (Fun f ss)) ys xs)}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). S s t} {y}) \\<and>\n        fst (lex_ext kbo (weight (Fun f ss)) ys xs)}", "."], ["proof (state)\nthis:\n  SN {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). S s t} {y}) \\<and>\n      fst (lex_ext kbo (weight (Fun f ss)) ys xs)}\n\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "{"], ["proof (state)\nthis:\n  SN {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). S s t} {y}) \\<and>\n      fst (lex_ext kbo (weight (Fun f ss)) ys xs)}\n\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "fix g and ts :: \"('f, 'v) term list\""], ["proof (state)\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "assume \"pr_weak ?f (?sym g ts) \\<and> weight (Fun g ts) \\<le> weight ?s \\<and> set ts \\<subseteq> {s. ?SN s}\""], ["proof (state)\nthis:\n  pr_weak (f, length ss) (g, length ts) \\<and>\n  weight (Fun g ts) \\<le> weight (Fun f ss) \\<and>\n  set ts \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\n\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "then"], ["proof (chain)\npicking this:\n  pr_weak (f, length ss) (g, length ts) \\<and>\n  weight (Fun g ts) \\<le> weight (Fun f ss) \\<and>\n  set ts \\<subseteq> {s. SN_on {(s, t). S s t} {s}}", "have \"?SNt g ts\""], ["proof (prove)\nusing this:\n  pr_weak (f, length ss) (g, length ts) \\<and>\n  weight (Fun g ts) \\<le> weight (Fun f ss) \\<and>\n  set ts \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\n\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {Fun g ts}", "proof (induct ts arbitrary: g rule: SN_induct[OF SN])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a g.\n       \\<lbrakk>\\<And>b g.\n                   \\<lbrakk>(a, b)\n                            \\<in> {(ys, xs).\n                                   (\\<forall>y\\<in>set ys.\n SN_on {(s, t). S s t} {y}) \\<and>\n                                   fst (lex_ext kbo (weight (Fun f ss)) ys\n   xs)};\n                    pr_weak (f, length ss) (g, length b) \\<and>\n                    weight (Fun g b) \\<le> weight (Fun f ss) \\<and>\n                    set b\n                    \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {Fun g b};\n        pr_weak (f, length ss) (g, length a) \\<and>\n        weight (Fun g a) \\<le> weight (Fun f ss) \\<and>\n        set a \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun g a}", "case (1 ts g)"], ["proof (state)\nthis:\n  \\<lbrakk>(ts, ?b21)\n           \\<in> {(ys, xs).\n                  (\\<forall>y\\<in>set ys. SN_on {(s, t). S s t} {y}) \\<and>\n                  fst (lex_ext kbo (weight (Fun f ss)) ys xs)};\n   pr_weak (f, length ss) (?g21, length ?b21) \\<and>\n   weight (Fun ?g21 ?b21) \\<le> weight (Fun f ss) \\<and>\n   set ?b21\n   \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                    {s}}\\<rbrakk>\n  \\<Longrightarrow> SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                     {Fun ?g21 ?b21}\n  pr_weak (f, length ss) (g, length ts) \\<and>\n  weight (Fun g ts) \\<le> weight (Fun f ss) \\<and>\n  set ts\n  \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {s}}\n\ngoal (1 subgoal):\n 1. \\<And>a g.\n       \\<lbrakk>\\<And>b g.\n                   \\<lbrakk>(a, b)\n                            \\<in> {(ys, xs).\n                                   (\\<forall>y\\<in>set ys.\n SN_on {(s, t). S s t} {y}) \\<and>\n                                   fst (lex_ext kbo (weight (Fun f ss)) ys\n   xs)};\n                    pr_weak (f, length ss) (g, length b) \\<and>\n                    weight (Fun g b) \\<le> weight (Fun f ss) \\<and>\n                    set b\n                    \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {Fun g b};\n        pr_weak (f, length ss) (g, length a) \\<and>\n        weight (Fun g a) \\<le> weight (Fun f ss) \\<and>\n        set a \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun g a}", "note inner_IH = 1(1)"], ["proof (state)\nthis:\n  \\<lbrakk>(ts, ?b21)\n           \\<in> {(ys, xs).\n                  (\\<forall>y\\<in>set ys. SN_on {(s, t). S s t} {y}) \\<and>\n                  fst (lex_ext kbo (weight (Fun f ss)) ys xs)};\n   pr_weak (f, length ss) (?g21, length ?b21) \\<and>\n   weight (Fun ?g21 ?b21) \\<le> weight (Fun f ss) \\<and>\n   set ?b21\n   \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                    {s}}\\<rbrakk>\n  \\<Longrightarrow> SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                     {Fun ?g21 ?b21}\n\ngoal (1 subgoal):\n 1. \\<And>a g.\n       \\<lbrakk>\\<And>b g.\n                   \\<lbrakk>(a, b)\n                            \\<in> {(ys, xs).\n                                   (\\<forall>y\\<in>set ys.\n SN_on {(s, t). S s t} {y}) \\<and>\n                                   fst (lex_ext kbo (weight (Fun f ss)) ys\n   xs)};\n                    pr_weak (f, length ss) (g, length b) \\<and>\n                    weight (Fun g b) \\<le> weight (Fun f ss) \\<and>\n                    set b\n                    \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {Fun g b};\n        pr_weak (f, length ss) (g, length a) \\<and>\n        weight (Fun g a) \\<le> weight (Fun f ss) \\<and>\n        set a \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun g a}", "let ?g = \"(g, length ts)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a g.\n       \\<lbrakk>\\<And>b g.\n                   \\<lbrakk>(a, b)\n                            \\<in> {(ys, xs).\n                                   (\\<forall>y\\<in>set ys.\n SN_on {(s, t). S s t} {y}) \\<and>\n                                   fst (lex_ext kbo (weight (Fun f ss)) ys\n   xs)};\n                    pr_weak (f, length ss) (g, length b) \\<and>\n                    weight (Fun g b) \\<le> weight (Fun f ss) \\<and>\n                    set b\n                    \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {Fun g b};\n        pr_weak (f, length ss) (g, length a) \\<and>\n        weight (Fun g a) \\<le> weight (Fun f ss) \\<and>\n        set a \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun g a}", "let ?t = \"Fun g ts\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a g.\n       \\<lbrakk>\\<And>b g.\n                   \\<lbrakk>(a, b)\n                            \\<in> {(ys, xs).\n                                   (\\<forall>y\\<in>set ys.\n SN_on {(s, t). S s t} {y}) \\<and>\n                                   fst (lex_ext kbo (weight (Fun f ss)) ys\n   xs)};\n                    pr_weak (f, length ss) (g, length b) \\<and>\n                    weight (Fun g b) \\<le> weight (Fun f ss) \\<and>\n                    set b\n                    \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {Fun g b};\n        pr_weak (f, length ss) (g, length a) \\<and>\n        weight (Fun g a) \\<le> weight (Fun f ss) \\<and>\n        set a \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun g a}", "from 1(2)"], ["proof (chain)\npicking this:\n  pr_weak (f, length ss) (g, length ts) \\<and>\n  weight (Fun g ts) \\<le> weight (Fun f ss) \\<and>\n  set ts\n  \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {s}}", "have fg: \"pr_weak ?f ?g\" and w: \"weight ?t \\<le> weight ?s\"  and SN: \"set ts \\<subseteq> {s. ?SN s}\""], ["proof (prove)\nusing this:\n  pr_weak (f, length ss) (g, length ts) \\<and>\n  weight (Fun g ts) \\<le> weight (Fun f ss) \\<and>\n  set ts\n  \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {s}}\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (g, length ts) &&&\n    weight (Fun g ts) \\<le> weight (Fun f ss) &&&\n    set ts \\<subseteq> {s. SN_on {(s, t). S s t} {s}}", "by auto"], ["proof (state)\nthis:\n  pr_weak (f, length ss) (g, length ts)\n  weight (Fun g ts) \\<le> weight (Fun f ss)\n  set ts \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\n\ngoal (1 subgoal):\n 1. \\<And>a g.\n       \\<lbrakk>\\<And>b g.\n                   \\<lbrakk>(a, b)\n                            \\<in> {(ys, xs).\n                                   (\\<forall>y\\<in>set ys.\n SN_on {(s, t). S s t} {y}) \\<and>\n                                   fst (lex_ext kbo (weight (Fun f ss)) ys\n   xs)};\n                    pr_weak (f, length ss) (g, length b) \\<and>\n                    weight (Fun g b) \\<le> weight (Fun f ss) \\<and>\n                    set b\n                    \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {Fun g b};\n        pr_weak (f, length ss) (g, length a) \\<and>\n        weight (Fun g a) \\<le> weight (Fun f ss) \\<and>\n        set a \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun g a}", "show \"?SNt g ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {Fun g ts}", "unfolding conv[of _ ?t]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b.\n       (Fun g ts, b) \\<in> {(s, t). S s t} \\<longrightarrow>\n       SN_on {(s, t). S s t} {b}", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       (Fun g ts, b) \\<in> {(s, t). S s t} \\<Longrightarrow>\n       SN_on {(s, t). S s t} {b}", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       (Fun g ts, b) \\<in> {(s, t). S s t} \\<Longrightarrow>\n       SN_on {(s, t). S s t} {b}", "assume \"(?t, u) \\<in> {(s, t). S s t}\""], ["proof (state)\nthis:\n  (Fun g ts, u) \\<in> {(s, t). S s t}\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       (Fun g ts, b) \\<in> {(s, t). S s t} \\<Longrightarrow>\n       SN_on {(s, t). S s t} {b}", "then"], ["proof (chain)\npicking this:\n  (Fun g ts, u) \\<in> {(s, t). S s t}", "have tu: \"S ?t u\""], ["proof (prove)\nusing this:\n  (Fun g ts, u) \\<in> {(s, t). S s t}\n\ngoal (1 subgoal):\n 1. S (Fun g ts) u", "by auto"], ["proof (state)\nthis:\n  S (Fun g ts) u\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       (Fun g ts, b) \\<in> {(s, t). S s t} \\<Longrightarrow>\n       SN_on {(s, t). S s t} {b}", "then"], ["proof (chain)\npicking this:\n  S (Fun g ts) u", "show \"?SN u\""], ["proof (prove)\nusing this:\n  S (Fun g ts) u\n\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {u}", "proof (induct u)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       S (Fun g ts) (Var x) \\<Longrightarrow> SN_on {(s, t). S s t} {Var x}\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "case (Var x)"], ["proof (state)\nthis:\n  S (Fun g ts) (Var x)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       S (Fun g ts) (Var x) \\<Longrightarrow> SN_on {(s, t). S s t} {Var x}\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "then"], ["proof (chain)\npicking this:\n  S (Fun g ts) (Var x)", "show ?case"], ["proof (prove)\nusing this:\n  S (Fun g ts) (Var x)\n\ngoal (1 subgoal):\n 1. SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Var x}", "using not_S_Var[of x]"], ["proof (prove)\nusing this:\n  S (Fun g ts) (Var x)\n  \\<not> S (Var x) ?t\n\ngoal (1 subgoal):\n 1. SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Var x}", "unfolding conv[of _ \"Var x\"]"], ["proof (prove)\nusing this:\n  S (Fun g ts) (Var x)\n  \\<not> S (Var x) ?t\n\ngoal (1 subgoal):\n 1. \\<forall>b.\n       (Var x, b) \\<in> {(s, t). S s t} \\<longrightarrow>\n       SN_on {(s, t). S s t} {b}", "by auto"], ["proof (state)\nthis:\n  SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Var x}\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "case (Fun h us)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a21 \\<in> set us; S (Fun g ts) ?x2a21\\<rbrakk>\n  \\<Longrightarrow> SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {?x2a21}\n  S (Fun g ts) (Fun h us)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "let ?h = \"(h, length us)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "let ?u = \"Fun h us\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "note tu = Fun(2)"], ["proof (state)\nthis:\n  S (Fun g ts) (Fun h us)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "{"], ["proof (state)\nthis:\n  S (Fun g ts) (Fun h us)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "assume u: \"u \\<in> set us\""], ["proof (state)\nthis:\n  u \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "then"], ["proof (chain)\npicking this:\n  u \\<in> set us", "have \"?u \\<rhd> u\""], ["proof (prove)\nusing this:\n  u \\<in> set us\n\ngoal (1 subgoal):\n 1. Fun h us \\<rhd> u", "by auto"], ["proof (state)\nthis:\n  Fun h us \\<rhd> u\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "from S_trans[OF tu S_supt[OF this]]"], ["proof (chain)\npicking this:\n  S (Fun g ts) u", "have \"S ?t u\""], ["proof (prove)\nusing this:\n  S (Fun g ts) u\n\ngoal (1 subgoal):\n 1. S (Fun g ts) u", "by auto"], ["proof (state)\nthis:\n  S (Fun g ts) u\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "from Fun(1)[OF u this]"], ["proof (chain)\npicking this:\n  SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {u}", "have \"?SN u\""], ["proof (prove)\nusing this:\n  SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {u}\n\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {u}", "."], ["proof (state)\nthis:\n  SN_on {(s, t). S s t} {u}\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "}"], ["proof (state)\nthis:\n  ?ua23 \\<in> set us \\<Longrightarrow> SN_on {(s, t). S s t} {?ua23}\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "then"], ["proof (chain)\npicking this:\n  ?ua23 \\<in> set us \\<Longrightarrow> SN_on {(s, t). S s t} {?ua23}", "have SNu: \"set us \\<subseteq> {s . ?SN s}\""], ["proof (prove)\nusing this:\n  ?ua23 \\<in> set us \\<Longrightarrow> SN_on {(s, t). S s t} {?ua23}\n\ngoal (1 subgoal):\n 1. set us \\<subseteq> {s. SN_on {(s, t). S s t} {s}}", "by blast"], ["proof (state)\nthis:\n  set us \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "note IH = IH[OF _ this]"], ["proof (state)\nthis:\n  weight (Fun ?g20 us) < weight (Fun f ss) \\<or>\n  weight (Fun ?g20 us) \\<le> weight (Fun f ss) \\<and>\n  pr_strict (f, length ss) (?g20, length us) \\<Longrightarrow>\n  SN_on {(s, t). S s t} {Fun ?g20 us}\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "from tu"], ["proof (chain)\npicking this:\n  S (Fun g ts) (Fun h us)", "have wut: \"weight ?u \\<le> weight ?t\""], ["proof (prove)\nusing this:\n  S (Fun g ts) (Fun h us)\n\ngoal (1 subgoal):\n 1. weight (Fun h us) \\<le> weight (Fun g ts)", "by (simp split: if_splits)"], ["proof (state)\nthis:\n  weight (Fun h us) \\<le> weight (Fun g ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; S (Fun g ts) x2a\\<rbrakk>\n                   \\<Longrightarrow> SN_on {(s, t). S s t} {x2a};\n        S (Fun g ts) (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> SN_on {(s, t). S s t} {Fun x1a x2}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "proof (cases \"?m1 (f, ss) > ?m1 (h, us) \\<or> ?m1 (f, ss) \\<ge> ?m1 (h, us) \\<and> pr_strict (?m2 (f, ss)) (?m2 (h, us))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n    < (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n    (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n    \\<le> (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n    pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n     (case (h, us) of\n      (f, ss) \\<Rightarrow> (f, length ss)) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}\n 2. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "case True"], ["proof (state)\nthis:\n  (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n  < (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n  (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n  \\<le> (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n  pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n   (case (h, us) of (f, ss) \\<Rightarrow> (f, length ss))\n\ngoal (2 subgoals):\n 1. (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n    < (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n    (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n    \\<le> (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n    pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n     (case (h, us) of\n      (f, ss) \\<Rightarrow> (f, length ss)) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}\n 2. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "from IH[OF True[unfolded split]]"], ["proof (chain)\npicking this:\n  SN_on {(s, t). S s t} {Fun h us}", "show ?thesis"], ["proof (prove)\nusing this:\n  SN_on {(s, t). S s t} {Fun h us}\n\ngoal (1 subgoal):\n 1. SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "by simp"], ["proof (state)\nthis:\n  SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}\n\ngoal (1 subgoal):\n 1. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "case False"], ["proof (state)\nthis:\n  \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n          < (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n          (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n          \\<le> (case (f, ss) of\n                 (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n          pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n           (case (h, us) of (f, ss) \\<Rightarrow> (f, length ss)))\n\ngoal (1 subgoal):\n 1. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "with wut w"], ["proof (chain)\npicking this:\n  weight (Fun h us) \\<le> weight (Fun g ts)\n  weight (Fun g ts) \\<le> weight (Fun f ss)\n  \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n          < (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n          (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n          \\<le> (case (f, ss) of\n                 (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n          pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n           (case (h, us) of (f, ss) \\<Rightarrow> (f, length ss)))", "have wut: \"weight ?t = weight ?u\" \"weight ?s = weight ?u\""], ["proof (prove)\nusing this:\n  weight (Fun h us) \\<le> weight (Fun g ts)\n  weight (Fun g ts) \\<le> weight (Fun f ss)\n  \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n          < (case (f, ss) of (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n          (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n          \\<le> (case (f, ss) of\n                 (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n          pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n           (case (h, us) of (f, ss) \\<Rightarrow> (f, length ss)))\n\ngoal (1 subgoal):\n 1. weight (Fun g ts) = weight (Fun h us) &&&\n    weight (Fun f ss) = weight (Fun h us)", "by auto"], ["proof (state)\nthis:\n  weight (Fun g ts) = weight (Fun h us)\n  weight (Fun f ss) = weight (Fun h us)\n\ngoal (1 subgoal):\n 1. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "note False = False[unfolded split wut]"], ["proof (state)\nthis:\n  \\<not> (weight (Fun h us) < weight (Fun h us) \\<or>\n          weight (Fun h us) \\<le> weight (Fun h us) \\<and>\n          pr_strict (f, length ss) (h, length us))\n\ngoal (1 subgoal):\n 1. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "note tu = tu[unfolded kbo.simps[of ?t] wut, unfolded Fun term.simps, simplified]"], ["proof (state)\nthis:\n  fst (if \\<Sum>\\<^sub>#\n           (image_mset (vars_term_ms \\<circ> SCF)\n             (mset (scf_list (scf (h, length us)) us))) \\<subseteq>#\n          \\<Sum>\\<^sub>#\n           (image_mset (vars_term_ms \\<circ> SCF)\n             (mset (scf_list (scf (g, length ts)) ts)))\n       then if weight (Fun h us) < weight (Fun h us) then (True, True)\n            else if pr_strict (g, length ts) (h, length us)\n                 then (True, True)\n                 else if pr_weak (g, length ts) (h, length us)\n                      then lex_ext_unbounded kbo ts us else (False, False)\n       else (False, False))\n\ngoal (1 subgoal):\n 1. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "from tu"], ["proof (chain)\npicking this:\n  fst (if \\<Sum>\\<^sub>#\n           (image_mset (vars_term_ms \\<circ> SCF)\n             (mset (scf_list (scf (h, length us)) us))) \\<subseteq>#\n          \\<Sum>\\<^sub>#\n           (image_mset (vars_term_ms \\<circ> SCF)\n             (mset (scf_list (scf (g, length ts)) ts)))\n       then if weight (Fun h us) < weight (Fun h us) then (True, True)\n            else if pr_strict (g, length ts) (h, length us)\n                 then (True, True)\n                 else if pr_weak (g, length ts) (h, length us)\n                      then lex_ext_unbounded kbo ts us else (False, False)\n       else (False, False))", "have gh: \"pr_weak ?g ?h\""], ["proof (prove)\nusing this:\n  fst (if \\<Sum>\\<^sub>#\n           (image_mset (vars_term_ms \\<circ> SCF)\n             (mset (scf_list (scf (h, length us)) us))) \\<subseteq>#\n          \\<Sum>\\<^sub>#\n           (image_mset (vars_term_ms \\<circ> SCF)\n             (mset (scf_list (scf (g, length ts)) ts)))\n       then if weight (Fun h us) < weight (Fun h us) then (True, True)\n            else if pr_strict (g, length ts) (h, length us)\n                 then (True, True)\n                 else if pr_weak (g, length ts) (h, length us)\n                      then lex_ext_unbounded kbo ts us else (False, False)\n       else (False, False))\n\ngoal (1 subgoal):\n 1. pr_weak (g, length ts) (h, length us)", "unfolding pr_strict"], ["proof (prove)\nusing this:\n  fst (if \\<Sum>\\<^sub>#\n           (image_mset (vars_term_ms \\<circ> SCF)\n             (mset (scf_list (scf (h, length us)) us))) \\<subseteq>#\n          \\<Sum>\\<^sub>#\n           (image_mset (vars_term_ms \\<circ> SCF)\n             (mset (scf_list (scf (g, length ts)) ts)))\n       then if weight (Fun h us) < weight (Fun h us) then (True, True)\n            else if pr_weak (g, length ts) (h, length us) \\<and>\n                    \\<not> pr_weak (h, length us) (g, length ts)\n                 then (True, True)\n                 else if pr_weak (g, length ts) (h, length us)\n                      then lex_ext_unbounded\n                            (kbo.kbo w w0 scf least\n                              (\\<lambda>fn gm.\n                                  pr_weak fn gm \\<and> \\<not> pr_weak gm fn)\n                              pr_weak)\n                            ts us\n                      else (False, False)\n       else (False, False))\n\ngoal (1 subgoal):\n 1. pr_weak (g, length ts) (h, length us)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  pr_weak (g, length ts) (h, length us)\n\ngoal (1 subgoal):\n 1. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "from pr_weak_trans[OF fg gh]"], ["proof (chain)\npicking this:\n  pr_weak (f, length ss) (h, length us)", "have fh: \"pr_weak ?f ?h\""], ["proof (prove)\nusing this:\n  pr_weak (f, length ss) (h, length us)\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (h, length us)", "."], ["proof (state)\nthis:\n  pr_weak (f, length ss) (h, length us)\n\ngoal (1 subgoal):\n 1. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "from False wut fh"], ["proof (chain)\npicking this:\n  \\<not> (weight (Fun h us) < weight (Fun h us) \\<or>\n          weight (Fun h us) \\<le> weight (Fun h us) \\<and>\n          pr_strict (f, length ss) (h, length us))\n  weight (Fun g ts) = weight (Fun h us)\n  weight (Fun f ss) = weight (Fun h us)\n  pr_weak (f, length ss) (h, length us)", "have \"\\<not> pr_strict ?f ?h\""], ["proof (prove)\nusing this:\n  \\<not> (weight (Fun h us) < weight (Fun h us) \\<or>\n          weight (Fun h us) \\<le> weight (Fun h us) \\<and>\n          pr_strict (f, length ss) (h, length us))\n  weight (Fun g ts) = weight (Fun h us)\n  weight (Fun f ss) = weight (Fun h us)\n  pr_weak (f, length ss) (h, length us)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (f, length ss) (h, length us)", "unfolding pr_strict"], ["proof (prove)\nusing this:\n  \\<not> (weight (Fun h us) < weight (Fun h us) \\<or>\n          weight (Fun h us) \\<le> weight (Fun h us) \\<and>\n          pr_weak (f, length ss) (h, length us) \\<and>\n          \\<not> pr_weak (h, length us) (f, length ss))\n  weight (Fun g ts) = weight (Fun h us)\n  weight (Fun f ss) = weight (Fun h us)\n  pr_weak (f, length ss) (h, length us)\n\ngoal (1 subgoal):\n 1. \\<not> (pr_weak (f, length ss) (h, length us) \\<and>\n            \\<not> pr_weak (h, length us) (f, length ss))", "by auto"], ["proof (state)\nthis:\n  \\<not> pr_strict (f, length ss) (h, length us)\n\ngoal (1 subgoal):\n 1. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "with fh"], ["proof (chain)\npicking this:\n  pr_weak (f, length ss) (h, length us)\n  \\<not> pr_strict (f, length ss) (h, length us)", "have hf: \"pr_weak ?h ?f\""], ["proof (prove)\nusing this:\n  pr_weak (f, length ss) (h, length us)\n  \\<not> pr_strict (f, length ss) (h, length us)\n\ngoal (1 subgoal):\n 1. pr_weak (h, length us) (f, length ss)", "unfolding pr_strict"], ["proof (prove)\nusing this:\n  pr_weak (f, length ss) (h, length us)\n  \\<not> (pr_weak (f, length ss) (h, length us) \\<and>\n          \\<not> pr_weak (h, length us) (f, length ss))\n\ngoal (1 subgoal):\n 1. pr_weak (h, length us) (f, length ss)", "by auto"], ["proof (state)\nthis:\n  pr_weak (h, length us) (f, length ss)\n\ngoal (1 subgoal):\n 1. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "from pr_weak_trans[OF hf fg]"], ["proof (chain)\npicking this:\n  pr_weak (h, length us) (g, length ts)", "have hg: \"pr_weak ?h ?g\""], ["proof (prove)\nusing this:\n  pr_weak (h, length us) (g, length ts)\n\ngoal (1 subgoal):\n 1. pr_weak (h, length us) (g, length ts)", "."], ["proof (state)\nthis:\n  pr_weak (h, length us) (g, length ts)\n\ngoal (1 subgoal):\n 1. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "from hg"], ["proof (chain)\npicking this:\n  pr_weak (h, length us) (g, length ts)", "have gh2: \"\\<not> pr_strict ?g ?h\""], ["proof (prove)\nusing this:\n  pr_weak (h, length us) (g, length ts)\n\ngoal (1 subgoal):\n 1. \\<not> pr_strict (g, length ts) (h, length us)", "unfolding pr_strict"], ["proof (prove)\nusing this:\n  pr_weak (h, length us) (g, length ts)\n\ngoal (1 subgoal):\n 1. \\<not> (pr_weak (g, length ts) (h, length us) \\<and>\n            \\<not> pr_weak (h, length us) (g, length ts))", "by auto"], ["proof (state)\nthis:\n  \\<not> pr_strict (g, length ts) (h, length us)\n\ngoal (1 subgoal):\n 1. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "from tu gh2"], ["proof (chain)\npicking this:\n  fst (if \\<Sum>\\<^sub>#\n           (image_mset (vars_term_ms \\<circ> SCF)\n             (mset (scf_list (scf (h, length us)) us))) \\<subseteq>#\n          \\<Sum>\\<^sub>#\n           (image_mset (vars_term_ms \\<circ> SCF)\n             (mset (scf_list (scf (g, length ts)) ts)))\n       then if weight (Fun h us) < weight (Fun h us) then (True, True)\n            else if pr_strict (g, length ts) (h, length us)\n                 then (True, True)\n                 else if pr_weak (g, length ts) (h, length us)\n                      then lex_ext_unbounded kbo ts us else (False, False)\n       else (False, False))\n  \\<not> pr_strict (g, length ts) (h, length us)", "have lex: \"fst (?lexu ts us)\""], ["proof (prove)\nusing this:\n  fst (if \\<Sum>\\<^sub>#\n           (image_mset (vars_term_ms \\<circ> SCF)\n             (mset (scf_list (scf (h, length us)) us))) \\<subseteq>#\n          \\<Sum>\\<^sub>#\n           (image_mset (vars_term_ms \\<circ> SCF)\n             (mset (scf_list (scf (g, length ts)) ts)))\n       then if weight (Fun h us) < weight (Fun h us) then (True, True)\n            else if pr_strict (g, length ts) (h, length us)\n                 then (True, True)\n                 else if pr_weak (g, length ts) (h, length us)\n                      then lex_ext_unbounded kbo ts us else (False, False)\n       else (False, False))\n  \\<not> pr_strict (g, length ts) (h, length us)\n\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo ts us)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo ts us)\n\ngoal (1 subgoal):\n 1. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "from fh wut SNu"], ["proof (chain)\npicking this:\n  pr_weak (f, length ss) (h, length us)\n  weight (Fun g ts) = weight (Fun h us)\n  weight (Fun f ss) = weight (Fun h us)\n  set us \\<subseteq> {s. SN_on {(s, t). S s t} {s}}", "have \"pr_weak ?f ?h \\<and> weight ?u \\<le> weight ?s \\<and> set us \\<subseteq> {s. ?SN s}\""], ["proof (prove)\nusing this:\n  pr_weak (f, length ss) (h, length us)\n  weight (Fun g ts) = weight (Fun h us)\n  weight (Fun f ss) = weight (Fun h us)\n  set us \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\n\ngoal (1 subgoal):\n 1. pr_weak (f, length ss) (h, length us) \\<and>\n    weight (Fun h us) \\<le> weight (Fun f ss) \\<and>\n    set us \\<subseteq> {s. SN_on {(s, t). S s t} {s}}", "by auto"], ["proof (state)\nthis:\n  pr_weak (f, length ss) (h, length us) \\<and>\n  weight (Fun h us) \\<le> weight (Fun f ss) \\<and>\n  set us \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\n\ngoal (1 subgoal):\n 1. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "note inner_IH = inner_IH[OF _ this]"], ["proof (state)\nthis:\n  (ts, us)\n  \\<in> {(ys, xs).\n         (\\<forall>y\\<in>set ys. SN_on {(s, t). S s t} {y}) \\<and>\n         fst (lex_ext kbo (weight (Fun f ss)) ys xs)} \\<Longrightarrow>\n  SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}\n\ngoal (1 subgoal):\n 1. \\<not> ((case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            < (case (f, ss) of\n               (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<or>\n            (case (h, us) of (f, ss) \\<Rightarrow> weight (Fun f ss))\n            \\<le> (case (f, ss) of\n                   (f, ss) \\<Rightarrow> weight (Fun f ss)) \\<and>\n            pr_strict (case (f, ss) of (f, ss) \\<Rightarrow> (f, length ss))\n             (case (h, us) of\n              (f, ss) \\<Rightarrow> (f, length ss))) \\<Longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}", "proof (rule inner_IH, rule, unfold split, intro conjI ballI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y. y \\<in> set ts \\<Longrightarrow> SN_on {(s, t). S s t} {y}\n 2. fst (lex_ext kbo (weight (Fun f ss)) ts us)", "have \"fst (?lexu ts us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lex_ext_unbounded kbo ts us)", "by (rule lex)"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo ts us)\n\ngoal (2 subgoals):\n 1. \\<And>y. y \\<in> set ts \\<Longrightarrow> SN_on {(s, t). S s t} {y}\n 2. fst (lex_ext kbo (weight (Fun f ss)) ts us)", "moreover"], ["proof (state)\nthis:\n  fst (lex_ext_unbounded kbo ts us)\n\ngoal (2 subgoals):\n 1. \\<And>y. y \\<in> set ts \\<Longrightarrow> SN_on {(s, t). S s t} {y}\n 2. fst (lex_ext kbo (weight (Fun f ss)) ts us)", "have \"length us \\<le> weight ?s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length us \\<le> weight (Fun f ss)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length us \\<le> weight (Fun f ss)", "have \"length us \\<le> sum_list (map weight us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length us \\<le> sum_list (map weight us)", "proof (induct us)"], ["proof (state)\ngoal (2 subgoals):\n 1. length [] \\<le> sum_list (map weight [])\n 2. \\<And>a us.\n       length us \\<le> sum_list (map weight us) \\<Longrightarrow>\n       length (a # us) \\<le> sum_list (map weight (a # us))", "case (Cons u us)"], ["proof (state)\nthis:\n  length us \\<le> sum_list (map weight us)\n\ngoal (2 subgoals):\n 1. length [] \\<le> sum_list (map weight [])\n 2. \\<And>a us.\n       length us \\<le> sum_list (map weight us) \\<Longrightarrow>\n       length (a # us) \\<le> sum_list (map weight (a # us))", "from Cons"], ["proof (chain)\npicking this:\n  length us \\<le> sum_list (map weight us)", "have \"length (u # us) \\<le> Suc (sum_list (map weight us))\""], ["proof (prove)\nusing this:\n  length us \\<le> sum_list (map weight us)\n\ngoal (1 subgoal):\n 1. length (u # us) \\<le> Suc (sum_list (map weight us))", "by auto"], ["proof (state)\nthis:\n  length (u # us) \\<le> Suc (sum_list (map weight us))\n\ngoal (2 subgoals):\n 1. length [] \\<le> sum_list (map weight [])\n 2. \\<And>a us.\n       length us \\<le> sum_list (map weight us) \\<Longrightarrow>\n       length (a # us) \\<le> sum_list (map weight (a # us))", "also"], ["proof (state)\nthis:\n  length (u # us) \\<le> Suc (sum_list (map weight us))\n\ngoal (2 subgoals):\n 1. length [] \\<le> sum_list (map weight [])\n 2. \\<And>a us.\n       length us \\<le> sum_list (map weight us) \\<Longrightarrow>\n       length (a # us) \\<le> sum_list (map weight (a # us))", "have \"... \\<le> sum_list (map weight (u # us))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (sum_list (map weight us)) \\<le> sum_list (map weight (u # us))", "using weight_gt_0[of u]"], ["proof (prove)\nusing this:\n  0 < weight u\n\ngoal (1 subgoal):\n 1. Suc (sum_list (map weight us)) \\<le> sum_list (map weight (u # us))", "by auto"], ["proof (state)\nthis:\n  Suc (sum_list (map weight us)) \\<le> sum_list (map weight (u # us))\n\ngoal (2 subgoals):\n 1. length [] \\<le> sum_list (map weight [])\n 2. \\<And>a us.\n       length us \\<le> sum_list (map weight us) \\<Longrightarrow>\n       length (a # us) \\<le> sum_list (map weight (a # us))", "finally"], ["proof (chain)\npicking this:\n  length (u # us) \\<le> sum_list (map weight (u # us))", "show ?case"], ["proof (prove)\nusing this:\n  length (u # us) \\<le> sum_list (map weight (u # us))\n\ngoal (1 subgoal):\n 1. length (u # us) \\<le> sum_list (map weight (u # us))", "."], ["proof (state)\nthis:\n  length (u # us) \\<le> sum_list (map weight (u # us))\n\ngoal (1 subgoal):\n 1. length [] \\<le> sum_list (map weight [])", "qed simp"], ["proof (state)\nthis:\n  length us \\<le> sum_list (map weight us)\n\ngoal (1 subgoal):\n 1. length us \\<le> weight (Fun f ss)", "also"], ["proof (state)\nthis:\n  length us \\<le> sum_list (map weight us)\n\ngoal (1 subgoal):\n 1. length us \\<le> weight (Fun f ss)", "have \"\\<dots> \\<le> sum_list (map weight (scf_list (scf (h, length us)) us))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map weight us)\n    \\<le> sum_list (map weight (scf_list (scf (h, length us)) us))", "by (rule sum_list_scf_list[OF scf])"], ["proof (state)\nthis:\n  sum_list (map weight us)\n  \\<le> sum_list (map weight (scf_list (scf (h, length us)) us))\n\ngoal (1 subgoal):\n 1. length us \\<le> weight (Fun f ss)", "also"], ["proof (state)\nthis:\n  sum_list (map weight us)\n  \\<le> sum_list (map weight (scf_list (scf (h, length us)) us))\n\ngoal (1 subgoal):\n 1. length us \\<le> weight (Fun f ss)", "have \"... \\<le> weight ?s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map weight (scf_list (scf (h, length us)) us))\n    \\<le> weight (Fun f ss)", "using wut"], ["proof (prove)\nusing this:\n  weight (Fun g ts) = weight (Fun h us)\n  weight (Fun f ss) = weight (Fun h us)\n\ngoal (1 subgoal):\n 1. sum_list (map weight (scf_list (scf (h, length us)) us))\n    \\<le> weight (Fun f ss)", "by simp"], ["proof (state)\nthis:\n  sum_list (map weight (scf_list (scf (h, length us)) us))\n  \\<le> weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. length us \\<le> weight (Fun f ss)", "finally"], ["proof (chain)\npicking this:\n  length us \\<le> weight (Fun f ss)", "show ?thesis"], ["proof (prove)\nusing this:\n  length us \\<le> weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. length us \\<le> weight (Fun f ss)", "."], ["proof (state)\nthis:\n  length us \\<le> weight (Fun f ss)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length us \\<le> weight (Fun f ss)\n\ngoal (2 subgoals):\n 1. \\<And>y. y \\<in> set ts \\<Longrightarrow> SN_on {(s, t). S s t} {y}\n 2. fst (lex_ext kbo (weight (Fun f ss)) ts us)", "ultimately"], ["proof (chain)\npicking this:\n  fst (lex_ext_unbounded kbo ts us)\n  length us \\<le> weight (Fun f ss)", "show \"fst (?lex ts us)\""], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded kbo ts us)\n  length us \\<le> weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. fst (lex_ext kbo (weight (Fun f ss)) ts us)", "unfolding lex_ext_def Let_def"], ["proof (prove)\nusing this:\n  fst (lex_ext_unbounded kbo ts us)\n  length us \\<le> weight (Fun f ss)\n\ngoal (1 subgoal):\n 1. fst (if length ts = length us \\<or> length us \\<le> weight (Fun f ss)\n         then lex_ext_unbounded kbo ts us else (False, False))", "by auto"], ["proof (state)\nthis:\n  fst (lex_ext kbo (weight (Fun f ss)) ts us)\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set ts \\<Longrightarrow> SN_on {(s, t). S s t} {y}", "qed (insert SN, blast)"], ["proof (state)\nthis:\n  SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun h us}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SN_on {(s, t). S s t} {u}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SN_on {(s, t). S s t} {Fun g ts}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SN_on {(s, t). S s t} {Fun g ts}\n\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "}"], ["proof (state)\nthis:\n  pr_weak (f, length ss) (?g23, length ?ts23) \\<and>\n  weight (Fun ?g23 ?ts23) \\<le> weight (Fun f ss) \\<and>\n  set ?ts23 \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n  SN_on {(s, t). S s t} {Fun ?g23 ?ts23}\n\ngoal (1 subgoal):\n 1. set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}", "from this[of f ss] SN_s"], ["proof (chain)\npicking this:\n  pr_weak (f, length ss) (f, length ss) \\<and>\n  weight (Fun f ss) \\<le> weight (Fun f ss) \\<and>\n  set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n  SN_on {(s, t). S s t} {Fun f ss}\n  set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}}", "show \"?SN ?s\""], ["proof (prove)\nusing this:\n  pr_weak (f, length ss) (f, length ss) \\<and>\n  weight (Fun f ss) \\<le> weight (Fun f ss) \\<and>\n  set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<Longrightarrow>\n  SN_on {(s, t). S s t} {Fun f ss}\n  set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}}\n\ngoal (1 subgoal):\n 1. SN_on {(s, t). S s t} {Fun f ss}", "by auto"], ["proof (state)\nthis:\n  SN_on {(s, t). S s t} {Fun f ss}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case fss of\n  (f, ss) \\<Rightarrow>\n    set ss\n    \\<subseteq> {s. SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n                     {s}} \\<longrightarrow>\n    SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun f ss}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case fss of\n  (f, ss) \\<Rightarrow>\n    set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n            {x2a}) \\<Longrightarrow>\n       SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun x1a x2}", "}"], ["proof (state)\nthis:\n  case ?fss20 of\n  (f, ss) \\<Rightarrow>\n    set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<longrightarrow>\n    SN_on {(s, t). S s t} {Fun f ss}\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           SN_on {a. case a of (s, t) \\<Rightarrow> S s t}\n            {x2a}) \\<Longrightarrow>\n       SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun x1a x2}", "from this[of \"(f, ss)\", unfolded split]"], ["proof (chain)\npicking this:\n  set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<longrightarrow>\n  SN_on {(s, t). S s t} {Fun f ss}", "show ?case"], ["proof (prove)\nusing this:\n  set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<longrightarrow>\n  SN_on {(s, t). S s t} {Fun f ss}\n\ngoal (1 subgoal):\n 1. SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun f ss}", "using Fun"], ["proof (prove)\nusing this:\n  set ss \\<subseteq> {s. SN_on {(s, t). S s t} {s}} \\<longrightarrow>\n  SN_on {(s, t). S s t} {Fun f ss}\n  ?x2a18 \\<in> set ss \\<Longrightarrow>\n  SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {?x2a18}\n\ngoal (1 subgoal):\n 1. SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun f ss}", "by blast"], ["proof (state)\nthis:\n  SN_on {a. case a of (s, t) \\<Rightarrow> S s t} {Fun f ss}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SN_on {(s, t). S s t} {s}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma S_SN: \"SN {(x, y). S x y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN {(x, y). S x y}", "using kbo_strongly_normalizing"], ["proof (prove)\nusing this:\n  SN_on {(s, t). S s t} {?s}\n\ngoal (1 subgoal):\n 1. SN {(x, y). S x y}", "unfolding SN_defs"], ["proof (prove)\nusing this:\n  \\<nexists>f.\n     f 0 \\<in> {?s} \\<and>\n     (\\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t})\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 \\<in> UNIV \\<and>\n       (\\<forall>i. (f i, f (Suc i)) \\<in> {(x, y). S x y})", "by blast"], ["", "subsection \\<open>Ground Totality\\<close>"], ["", "lemma ground_SCF [simp]:\n  \"ground (SCF t) = ground t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground (SCF t) = ground t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ground (SCF t) = ground t", "have *: \"\\<forall>i<length xs. scf (f, length xs) i > 0\"\n    for f :: 'f and xs :: \"('f, 'v) term list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length xs. 0 < scf (f, length xs) i", "using scf"], ["proof (prove)\nusing this:\n  ?i < ?n \\<Longrightarrow> 0 < scf (?f, ?n) ?i\n\ngoal (1 subgoal):\n 1. \\<forall>i<length xs. 0 < scf (f, length xs) i", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<length ?xs14. 0 < scf (?f14, length ?xs14) i\n\ngoal (1 subgoal):\n 1. ground (SCF t) = ground t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ground (SCF t) = ground t", "by (induct t) (auto simp: set_scf_list [OF *])"], ["proof (state)\nthis:\n  ground (SCF t) = ground t\n\ngoal:\nNo subgoals!", "qed"], ["", "declare kbo.simps[simp del]"], ["", "lemma ground_vars_term_ms: \"ground t \\<Longrightarrow> vars_term_ms t = {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground t \\<Longrightarrow> vars_term_ms t = {#}", "by (induct t) auto"], ["", "context\n  fixes F :: \"('f \\<times> nat) set\"\n  assumes pr_weak: \"pr_weak = pr_strict\\<^sup>=\\<^sup>=\"\n    and pr_gtotal: \"\\<And>f g. f \\<in> F \\<Longrightarrow> g \\<in> F \\<Longrightarrow> f = g \\<or> pr_strict f g \\<or> pr_strict g f\"\nbegin"], ["", "lemma S_ground_total:\n  assumes \"funas_term s \\<subseteq> F\" and \"ground s\" and \"funas_term t \\<subseteq> F\" and \"ground t\"\n  shows \"s = t \\<or> S s t \\<or> S t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = t \\<or> S s t \\<or> S t s", "using assms"], ["proof (prove)\nusing this:\n  funas_term s \\<subseteq> F\n  ground s\n  funas_term t \\<subseteq> F\n  ground t\n\ngoal (1 subgoal):\n 1. s = t \\<or> S s t \\<or> S t s", "proof (induct s arbitrary: t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "case IH: (Fun f ss)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a13 \\<in> set ss; funas_term ?x2a13 \\<subseteq> F;\n   ground ?x2a13; funas_term ?t13 \\<subseteq> F; ground ?t13\\<rbrakk>\n  \\<Longrightarrow> ?x2a13 = ?t13 \\<or> S ?x2a13 ?t13 \\<or> S ?t13 ?x2a13\n  funas_term (Fun f ss) \\<subseteq> F\n  ground (Fun f ss)\n  funas_term t \\<subseteq> F\n  ground t\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "note [simp] = ground_vars_term_ms"], ["proof (state)\nthis:\n  ground ?t \\<Longrightarrow> vars_term_ms ?t = {#}\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "let ?s = \"Fun f ss\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "have *: \"(vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF ?s)) = True\"\n    \"(vars_term_ms (SCF ?s) \\<subseteq># vars_term_ms (SCF t)) = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))) =\n    True &&&\n    (vars_term_ms (SCF (Fun f ss)) \\<subseteq># vars_term_ms (SCF t)) = True", "using \\<open>ground ?s\\<close> and \\<open>ground t\\<close>"], ["proof (prove)\nusing this:\n  ground (Fun f ss)\n  ground t\n\ngoal (1 subgoal):\n 1. (vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))) =\n    True &&&\n    (vars_term_ms (SCF (Fun f ss)) \\<subseteq># vars_term_ms (SCF t)) = True", "by (auto simp: scf)"], ["proof (state)\nthis:\n  (vars_term_ms (SCF t) \\<subseteq># vars_term_ms (SCF (Fun f ss))) = True\n  (vars_term_ms (SCF (Fun f ss)) \\<subseteq># vars_term_ms (SCF t)) = True\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "from IH(5)"], ["proof (chain)\npicking this:\n  ground t", "obtain g ts where t[simp]: \"t = Fun g ts\""], ["proof (prove)\nusing this:\n  ground t\n\ngoal (1 subgoal):\n 1. (\\<And>g ts. t = Fun g ts \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases t, auto)"], ["proof (state)\nthis:\n  t = Fun g ts\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "let ?t = \"Fun g ts\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "let ?f = \"(f, length ss)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "let ?g = \"(g, length ts)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "from IH"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x2a13 \\<in> set ss; funas_term ?x2a13 \\<subseteq> F;\n   ground ?x2a13; funas_term ?t13 \\<subseteq> F; ground ?t13\\<rbrakk>\n  \\<Longrightarrow> ?x2a13 = ?t13 \\<or> S ?x2a13 ?t13 \\<or> S ?t13 ?x2a13\n  funas_term (Fun f ss) \\<subseteq> F\n  ground (Fun f ss)\n  funas_term t \\<subseteq> F\n  ground t", "have f: \"?f \\<in> F\" and g: \"?g \\<in> F\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2a13 \\<in> set ss; funas_term ?x2a13 \\<subseteq> F;\n   ground ?x2a13; funas_term ?t13 \\<subseteq> F; ground ?t13\\<rbrakk>\n  \\<Longrightarrow> ?x2a13 = ?t13 \\<or> S ?x2a13 ?t13 \\<or> S ?t13 ?x2a13\n  funas_term (Fun f ss) \\<subseteq> F\n  ground (Fun f ss)\n  funas_term t \\<subseteq> F\n  ground t\n\ngoal (1 subgoal):\n 1. (f, length ss) \\<in> F &&& (g, length ts) \\<in> F", "by auto"], ["proof (state)\nthis:\n  (f, length ss) \\<in> F\n  (g, length ts) \\<in> F\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "{"], ["proof (state)\nthis:\n  (f, length ss) \\<in> F\n  (g, length ts) \\<in> F\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "assume \"\\<not> ?case\""], ["proof (state)\nthis:\n  \\<not> (Fun f ss = t \\<or> S (Fun f ss) t \\<or> S t (Fun f ss))\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "note contra = this[unfolded kbo.simps[of ?s] kbo.simps[of t] *, unfolded t term.simps]"], ["proof (state)\nthis:\n  \\<not> (f = g \\<and> ss = ts \\<or>\n          fst (if True \\<and> weight (Fun g ts) \\<le> weight (Fun f ss)\n               then if weight (Fun g ts) < weight (Fun f ss)\n                    then (True, True)\n                    else if pr_strict (f, length ss) (g, length ts)\n                         then (True, True)\n                         else if pr_weak (f, length ss) (g, length ts)\n                              then lex_ext_unbounded kbo ss ts\n                              else (False, False)\n               else (False, False)) \\<or>\n          fst (if True \\<and> weight (Fun f ss) \\<le> weight (Fun g ts)\n               then if weight (Fun f ss) < weight (Fun g ts)\n                    then (True, True)\n                    else if pr_strict (g, length ts) (f, length ss)\n                         then (True, True)\n                         else if pr_weak (g, length ts) (f, length ss)\n                              then lex_ext_unbounded kbo ts ss\n                              else (False, False)\n               else (False, False)))\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "from pr_gtotal[OF f g] contra"], ["proof (chain)\npicking this:\n  (f, length ss) = (g, length ts) \\<or>\n  pr_strict (f, length ss) (g, length ts) \\<or>\n  pr_strict (g, length ts) (f, length ss)\n  \\<not> (f = g \\<and> ss = ts \\<or>\n          fst (if True \\<and> weight (Fun g ts) \\<le> weight (Fun f ss)\n               then if weight (Fun g ts) < weight (Fun f ss)\n                    then (True, True)\n                    else if pr_strict (f, length ss) (g, length ts)\n                         then (True, True)\n                         else if pr_weak (f, length ss) (g, length ts)\n                              then lex_ext_unbounded kbo ss ts\n                              else (False, False)\n               else (False, False)) \\<or>\n          fst (if True \\<and> weight (Fun f ss) \\<le> weight (Fun g ts)\n               then if weight (Fun f ss) < weight (Fun g ts)\n                    then (True, True)\n                    else if pr_strict (g, length ts) (f, length ss)\n                         then (True, True)\n                         else if pr_weak (g, length ts) (f, length ss)\n                              then lex_ext_unbounded kbo ts ss\n                              else (False, False)\n               else (False, False)))", "have fg: \"?f = ?g\""], ["proof (prove)\nusing this:\n  (f, length ss) = (g, length ts) \\<or>\n  pr_strict (f, length ss) (g, length ts) \\<or>\n  pr_strict (g, length ts) (f, length ss)\n  \\<not> (f = g \\<and> ss = ts \\<or>\n          fst (if True \\<and> weight (Fun g ts) \\<le> weight (Fun f ss)\n               then if weight (Fun g ts) < weight (Fun f ss)\n                    then (True, True)\n                    else if pr_strict (f, length ss) (g, length ts)\n                         then (True, True)\n                         else if pr_weak (f, length ss) (g, length ts)\n                              then lex_ext_unbounded kbo ss ts\n                              else (False, False)\n               else (False, False)) \\<or>\n          fst (if True \\<and> weight (Fun f ss) \\<le> weight (Fun g ts)\n               then if weight (Fun f ss) < weight (Fun g ts)\n                    then (True, True)\n                    else if pr_strict (g, length ts) (f, length ss)\n                         then (True, True)\n                         else if pr_weak (g, length ts) (f, length ss)\n                              then lex_ext_unbounded kbo ts ss\n                              else (False, False)\n               else (False, False)))\n\ngoal (1 subgoal):\n 1. (f, length ss) = (g, length ts)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  (f, length ss) = (g, length ts)\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "have IH: \"\\<forall>(s, t)\\<in>set (zip ss ts). s = t \\<or> S s t \\<or> S t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(s, t)\\<in>set (zip ss ts). s = t \\<or> S s t \\<or> S t s", "using IH"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2a13 \\<in> set ss; funas_term ?x2a13 \\<subseteq> F;\n   ground ?x2a13; funas_term ?t13 \\<subseteq> F; ground ?t13\\<rbrakk>\n  \\<Longrightarrow> ?x2a13 = ?t13 \\<or> S ?x2a13 ?t13 \\<or> S ?t13 ?x2a13\n  funas_term (Fun f ss) \\<subseteq> F\n  ground (Fun f ss)\n  funas_term t \\<subseteq> F\n  ground t\n\ngoal (1 subgoal):\n 1. \\<forall>(s, t)\\<in>set (zip ss ts). s = t \\<or> S s t \\<or> S t s", "by (auto elim!: in_set_zipE) blast"], ["proof (state)\nthis:\n  \\<forall>(s, t)\\<in>set (zip ss ts). s = t \\<or> S s t \\<or> S t s\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "from fg"], ["proof (chain)\npicking this:\n  (f, length ss) = (g, length ts)", "have len: \"length ss = length ts\""], ["proof (prove)\nusing this:\n  (f, length ss) = (g, length ts)\n\ngoal (1 subgoal):\n 1. length ss = length ts", "by auto"], ["proof (state)\nthis:\n  length ss = length ts\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "from lex_ext_unbounded_total[OF IH NS_refl len] contra fg"], ["proof (chain)\npicking this:\n  ss = ts \\<or>\n  fst (lex_ext_unbounded kbo ss ts) \\<or> fst (lex_ext_unbounded kbo ts ss)\n  \\<not> (f = g \\<and> ss = ts \\<or>\n          fst (if True \\<and> weight (Fun g ts) \\<le> weight (Fun f ss)\n               then if weight (Fun g ts) < weight (Fun f ss)\n                    then (True, True)\n                    else if pr_strict (f, length ss) (g, length ts)\n                         then (True, True)\n                         else if pr_weak (f, length ss) (g, length ts)\n                              then lex_ext_unbounded kbo ss ts\n                              else (False, False)\n               else (False, False)) \\<or>\n          fst (if True \\<and> weight (Fun f ss) \\<le> weight (Fun g ts)\n               then if weight (Fun f ss) < weight (Fun g ts)\n                    then (True, True)\n                    else if pr_strict (g, length ts) (f, length ss)\n                         then (True, True)\n                         else if pr_weak (g, length ts) (f, length ss)\n                              then lex_ext_unbounded kbo ts ss\n                              else (False, False)\n               else (False, False)))\n  (f, length ss) = (g, length ts)", "have False"], ["proof (prove)\nusing this:\n  ss = ts \\<or>\n  fst (lex_ext_unbounded kbo ss ts) \\<or> fst (lex_ext_unbounded kbo ts ss)\n  \\<not> (f = g \\<and> ss = ts \\<or>\n          fst (if True \\<and> weight (Fun g ts) \\<le> weight (Fun f ss)\n               then if weight (Fun g ts) < weight (Fun f ss)\n                    then (True, True)\n                    else if pr_strict (f, length ss) (g, length ts)\n                         then (True, True)\n                         else if pr_weak (f, length ss) (g, length ts)\n                              then lex_ext_unbounded kbo ss ts\n                              else (False, False)\n               else (False, False)) \\<or>\n          fst (if True \\<and> weight (Fun f ss) \\<le> weight (Fun g ts)\n               then if weight (Fun f ss) < weight (Fun g ts)\n                    then (True, True)\n                    else if pr_strict (g, length ts) (f, length ss)\n                         then (True, True)\n                         else if pr_weak (g, length ts) (f, length ss)\n                              then lex_ext_unbounded kbo ts ss\n                              else (False, False)\n               else (False, False)))\n  (f, length ss) = (g, length ts)\n\ngoal (1 subgoal):\n 1. False", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "}"], ["proof (state)\nthis:\n  \\<not> (Fun f ss = t \\<or>\n          S (Fun f ss) t \\<or> S t (Fun f ss)) \\<Longrightarrow>\n  False\n\ngoal (2 subgoals):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)\n 2. \\<And>x1a x2 t.\n       \\<lbrakk>\\<And>x2a t.\n                   \\<lbrakk>x2a \\<in> set x2; funas_term x2a \\<subseteq> F;\n                    ground x2a; funas_term t \\<subseteq> F;\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> x2a = t \\<or> S x2a t \\<or> S t x2a;\n        funas_term (Fun x1a x2) \\<subseteq> F; ground (Fun x1a x2);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Fun x1a x2 = t \\<or>\n                         S (Fun x1a x2) t \\<or> S t (Fun x1a x2)", "then"], ["proof (chain)\npicking this:\n  \\<not> (Fun f ss = t \\<or>\n          S (Fun f ss) t \\<or> S t (Fun f ss)) \\<Longrightarrow>\n  False", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> (Fun f ss = t \\<or>\n          S (Fun f ss) t \\<or> S t (Fun f ss)) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. Fun f ss = t \\<or> S (Fun f ss) t \\<or> S t (Fun f ss)", "by blast"], ["proof (state)\nthis:\n  Fun f ss = t \\<or> S (Fun f ss) t \\<or> S t (Fun f ss)\n\ngoal (1 subgoal):\n 1. \\<And>x t.\n       \\<lbrakk>funas_term (Var x) \\<subseteq> F; ground (Var x);\n        funas_term t \\<subseteq> F; ground t\\<rbrakk>\n       \\<Longrightarrow> Var x = t \\<or> S (Var x) t \\<or> S t (Var x)", "qed auto"], ["", "end"], ["", "subsection \\<open>Summary\\<close>"], ["", "text \\<open>\n  At this point we have shown well-foundedness @{thm [source] S_SN},\n  transitivity and compatibility @{thm [source] S_trans NS_trans NS_S_compat S_NS_compat},\n  closure under substitutions @{thm [source] S_subst NS_subst},\n  closure under contexts @{thm [source] S_ctxt NS_ctxt},\n  the subterm property @{thm [source] S_supt NS_supteq},\n  reflexivity of the weak @{thm [source] NS_refl} and irreflexivity of the strict\n  part @{thm [source] S_irrefl},\n  and ground-totality @{thm [source] S_ground_total}.\n\n  In particular, this allows us to show that KBO is an instance of\n  strongly normalizing order pairs (@{locale SN_order_pair}).\n\\<close>"], ["", "sublocale SN_order_pair \"{(x, y). S x y}\" \"{(x, y). NS x y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_order_pair {(x, y). S x y} {(x, y). NS x y}", "by (unfold_locales, insert NS_refl NS_trans S_trans S_SN NS_S_compat S_NS_compat)\n    (auto simp: refl_on_def trans_def, blast+)"], ["", "end"], ["", "end"]]}