{"file_name": "/home/qj213/afp-2021-10-22/thys/IMP_Compiler/Compiler2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/IMP_Compiler", "problem_names": ["lemma iexec_offset_aux:\n \"(i :: int) + 1 - j = i - j + 1 \\<and> i + j - k + 1 = i - k + j + 1\"", "lemma iexec_offset [intro]:\n \"(ins, pc, s, stk) \\<mapsto> (pc', s', stk') \\<Longrightarrow>\n    (ins, pc - i, s, stk) \\<mapsto> (pc' - i, s', stk')\"", "lemma execl_next:\n \"\\<lbrakk>P \\<Turnstile> cfs; k < length cfs; k \\<noteq> length cfs - 1\\<rbrakk> \\<Longrightarrow>\n    (P !! fst (cfs ! k), cfs ! k) \\<mapsto> cfs ! Suc k\"", "lemma execl_last:\n \"\\<lbrakk>P \\<Turnstile> cfs; k < length cfs; fst (cfs ! k) \\<notin> {0..<size P}\\<rbrakk> \\<Longrightarrow>\n    length cfs - 1 = k\"", "lemma execl_drop:\n \"P \\<Turnstile> cfs \\<Longrightarrow> P \\<Turnstile> drop n cfs\"", "lemma execl_all_N [simplified, intro]:\n \"[LOADI i] \\<Turnstile> cfs\\<box> \\<Longrightarrow> apred (N i) (cfs ! 0) (cfs ! (length cfs - 1))\"", "lemma execl_all_V [simplified, intro]:\n \"[LOAD x] \\<Turnstile> cfs\\<box> \\<Longrightarrow> apred (V x) (cfs ! 0) (cfs ! (length cfs - 1))\"", "lemma execl_all_Bc [simplified, intro]:\n \"\\<lbrakk>if v = f then [JMP i] else [] \\<Turnstile> cfs\\<box>; 0 \\<le> i\\<rbrakk> \\<Longrightarrow>\n    bpred (Bc v, f, i) (cfs ! 0) (cfs ! (length cfs - 1))\"", "lemma execl_all_SKIP [simplified, intro]:\n \"[] \\<Turnstile> cfs\\<box> \\<Longrightarrow> cpred SKIP (cfs ! 0) (cfs ! (length cfs - 1))\"", "lemma execl_sub_aux:\n \"\\<lbrakk>\\<And>m n. \\<forall>k \\<in> {m..<n}. Q P' (((pc, s, stk) # cfs) ! k) \\<Longrightarrow> P' \\<Turnstile>\n    map (off P) (case m of 0 \\<Rightarrow> (pc, s, stk) # take n cfs | Suc m \\<Rightarrow> F cfs m n);\n    \\<forall>k \\<in> {m..<n+m+length cfs'}. Q P' ((cfs' @ (pc, s, stk) # cfs) ! (k-m))\\<rbrakk> \\<Longrightarrow>\n  P' \\<Turnstile> (pc - size P, s, stk) # map (off P) (take n cfs)\"\n  (is \"\\<lbrakk>\\<And>_ _. \\<forall>k \\<in> _. Q P' (?F k) \\<Longrightarrow> _; \\<forall>k \\<in> ?A. Q P' (?G k)\\<rbrakk> \\<Longrightarrow> _\")", "lemma execl_sub:\n \"\\<lbrakk>P @ P' @ P'' \\<Turnstile> cfs; \\<forall>k \\<in> {m..<n}.\n     size P \\<le> fst (cfs ! k) \\<and> fst (cfs ! k) - size P < size P'\\<rbrakk> \\<Longrightarrow>\n   P' \\<Turnstile> map (off P) (drop m (take (Suc n) cfs))\"\n  (is \"\\<lbrakk>_; \\<forall>k \\<in> _. ?P P' cfs k\\<rbrakk> \\<Longrightarrow> P' \\<Turnstile> map _ (?F cfs m (Suc n))\")", "lemma execl_all_sub [rule_format]:\n  assumes\n    A: \"P @ P' x @ P'' \\<Turnstile> cfs\\<box>\" and\n    B: \"k < length cfs\" and\n    C: \"fst (cfs ! k) = size P\" and\n    D: \"\\<forall>cfs. P' x \\<Turnstile> cfs\\<box> \\<longrightarrow> Q x (cfs ! 0) (cfs ! (length cfs - 1))\"\n  shows \"\\<exists>k' < length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))\"", "lemma execl_all_sub2:\n  assumes\n    A: \"P x @ P' x' @ P'' \\<Turnstile> cfs\\<box>\"\n      (is \"?P \\<Turnstile> _\\<box>\") and\n    B: \"\\<And>cfs. P x \\<Turnstile> cfs\\<box> \\<Longrightarrow> (\\<lambda>(pc, s, stk) (pc', s', stk').\n      pc' = pc + size (P x) + I s \\<and> Q s s' \\<and> stk' = F s stk)\n        (cfs ! 0) (cfs ! (length cfs - 1))\"\n      (is \"\\<And>cfs. _ \\<Longrightarrow> ?Q x (cfs ! 0) (cfs ! (length cfs - 1))\") and\n    C: \"\\<And>cfs. P' x' \\<Turnstile> cfs\\<box> \\<Longrightarrow> (\\<lambda>(pc, s, stk) (pc', s', stk').\n      pc' = pc + size (P' x') + I' s \\<and> Q' s s' \\<and> stk' = F' s stk)\n        (cfs ! 0) (cfs ! (length cfs - 1))\"\n      (is \"\\<And>cfs. _ \\<Longrightarrow> ?Q' x' (cfs ! 0) (cfs ! (length cfs - 1))\") and\n    D: \"I (fst (snd (cfs ! 0))) = 0\"\n  shows \"\\<exists>k < length cfs. \\<exists>t. (\\<lambda>(pc, s, stk) (pc', s', stk').\n    pc = 0 \\<and> pc' = size (P x) + size (P' x') + I' t \\<and> Q s t \\<and> Q' t s' \\<and>\n      stk' = F' t (F s stk)) (cfs ! 0) (cfs ! k)\"", "lemma acomp_acomp:\n \"\\<lbrakk>acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ P \\<Turnstile> cfs\\<box>;\n    \\<And>cfs. acomp a\\<^sub>1 \\<Turnstile> cfs\\<box> \\<Longrightarrow> apred a\\<^sub>1 (cfs ! 0) (cfs ! (length cfs - 1));\n    \\<And>cfs. acomp a\\<^sub>2 \\<Turnstile> cfs\\<box> \\<Longrightarrow> apred a\\<^sub>2 (cfs ! 0) (cfs ! (length cfs - 1))\\<rbrakk> \\<Longrightarrow>\n  case cfs ! 0 of (pc, s, stk) \\<Rightarrow> pc = 0 \\<and> (\\<exists>k < length cfs. cfs ! k =\n    (size (acomp a\\<^sub>1 @ acomp a\\<^sub>2), s, aval a\\<^sub>2 s # aval a\\<^sub>1 s # stk))\"", "lemma bcomp_bcomp:\n \"\\<lbrakk>bcomp (b\\<^sub>1, f\\<^sub>1, i\\<^sub>1) @ bcomp (b\\<^sub>2, f\\<^sub>2, i\\<^sub>2) \\<Turnstile> cfs\\<box>;\n    \\<And>cfs. bcomp (b\\<^sub>1, f\\<^sub>1, i\\<^sub>1) \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n      bpred (b\\<^sub>1, f\\<^sub>1, i\\<^sub>1) (cfs ! 0) (cfs ! (length cfs - 1));\n    \\<And>cfs. bcomp (b\\<^sub>2, f\\<^sub>2, i\\<^sub>2) \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n      bpred (b\\<^sub>2, f\\<^sub>2, i\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - 1))\\<rbrakk> \\<Longrightarrow>\n  case cfs ! 0 of (pc, s, stk) \\<Rightarrow> pc = 0 \\<and> (bval b\\<^sub>1 s \\<noteq> f\\<^sub>1 \\<longrightarrow>\n    (\\<exists>k < length cfs. cfs ! k = (size (bcomp (b\\<^sub>1, f\\<^sub>1, i\\<^sub>1) @ bcomp (b\\<^sub>2, f\\<^sub>2, i\\<^sub>2)) +\n      (if bval b\\<^sub>2 s = f\\<^sub>2 then i\\<^sub>2 else 0), s, stk)))\"", "lemma acomp_correct [simplified, intro]:\n \"acomp a \\<Turnstile> cfs\\<box> \\<Longrightarrow> apred a (cfs ! 0) (cfs ! (length cfs - 1))\"", "lemma bcomp_correct [simplified, intro]:\n \"\\<lbrakk>bcomp x \\<Turnstile> cfs\\<box>; 0 \\<le> snd (snd x)\\<rbrakk> \\<Longrightarrow> bpred x (cfs ! 0) (cfs ! (length cfs - 1))\"", "lemma bcomp_ccomp:\n \"\\<lbrakk>bcomp (b, f, i) @ ccomp c @ P \\<Turnstile> cfs\\<box>; 0 \\<le> i;\n    \\<And>cfs. ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow> cpred c (cfs ! 0) (cfs ! (length cfs - 1))\\<rbrakk> \\<Longrightarrow>\n  case cfs ! 0 of (pc, s, stk) \\<Rightarrow> pc = 0 \\<and> (bval b s \\<noteq> f \\<longrightarrow>\n    (\\<exists>k < length cfs. case cfs ! k of (pc', s', stk') \\<Rightarrow>\n      pc' = size (bcomp (b, f, i) @ ccomp c) \\<and> (c, s) \\<Rightarrow> s' \\<and> stk' = stk))\"", "lemma ccomp_ccomp:\n \"\\<lbrakk>ccomp c\\<^sub>1 @ ccomp c\\<^sub>2 \\<Turnstile> cfs\\<box>;\n    \\<And>cfs. ccomp c\\<^sub>1 \\<Turnstile> cfs\\<box> \\<Longrightarrow> cpred c\\<^sub>1 (cfs ! 0) (cfs ! (length cfs - 1));\n    \\<And>cfs. ccomp c\\<^sub>2 \\<Turnstile> cfs\\<box> \\<Longrightarrow> cpred c\\<^sub>2 (cfs ! 0) (cfs ! (length cfs - 1))\\<rbrakk> \\<Longrightarrow>\n  case cfs ! 0 of (pc, s, stk) \\<Rightarrow> pc = 0 \\<and> (\\<exists>k < length cfs. \\<exists>t.\n    case cfs ! k of (pc', s', stk') \\<Rightarrow> pc' = size (ccomp c\\<^sub>1 @ ccomp c\\<^sub>2) \\<and>\n      (c\\<^sub>1, s) \\<Rightarrow> t \\<and> (c\\<^sub>2, t) \\<Rightarrow> s' \\<and> stk' = stk)\"", "lemma while_correct [simplified, intro]:\n \"\\<lbrakk>bcomp (b, False, size (ccomp c) + 1) @ ccomp c @\n    [JMP (- (size (bcomp (b, False, size (ccomp c) + 1) @ ccomp c) + 1))] \\<Turnstile> cfs\\<box>;\n    \\<And>cfs. ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow> cpred c (cfs ! 0) (cfs ! (length cfs - 1))\\<rbrakk> \\<Longrightarrow>\n  cpred (WHILE b DO c) (cfs ! 0) (cfs ! (length cfs - Suc 0))\"\n  (is \"\\<lbrakk>?cb @ ?cc @ [JMP (- ?n)] \\<Turnstile> _\\<box>; \\<And>_. _ \\<Longrightarrow> _\\<rbrakk> \\<Longrightarrow> ?Q cfs\")", "lemma ccomp_correct:\n \"ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow> cpred c (cfs ! 0) (cfs ! (length cfs - 1))\"", "lemma exec_execl [dest!]:\n \"P \\<turnstile> cf \\<rightarrow>* cf' \\<Longrightarrow> \\<exists>cfs. P \\<Turnstile> cfs \\<and> cfs \\<noteq> [] \\<and> hd cfs = cf \\<and> last cfs = cf'\"", "theorem ccomp_exec:\n \"ccomp c \\<turnstile> (0, s, stk) \\<rightarrow>* (size (ccomp c), s', stk') \\<Longrightarrow> (c, s) \\<Rightarrow> s' \\<and> stk' = stk\""], "translations": [["", "lemma iexec_offset_aux:\n \"(i :: int) + 1 - j = i - j + 1 \\<and> i + j - k + 1 = i - k + j + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i + 1 - j = i - j + 1 \\<and> i + j - k + 1 = i - k + j + 1", "by simp"], ["", "lemma iexec_offset [intro]:\n \"(ins, pc, s, stk) \\<mapsto> (pc', s', stk') \\<Longrightarrow>\n    (ins, pc - i, s, stk) \\<mapsto> (pc' - i, s', stk')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ins, pc, s, stk) \\<mapsto> (pc', s', stk') \\<Longrightarrow>\n    (ins, pc - i, s, stk) \\<mapsto> (pc' - i, s', stk')", "by (erule iexec.cases, auto simp: iexec_offset_aux)"], ["", "lemma execl_next:\n \"\\<lbrakk>P \\<Turnstile> cfs; k < length cfs; k \\<noteq> length cfs - 1\\<rbrakk> \\<Longrightarrow>\n    (P !! fst (cfs ! k), cfs ! k) \\<mapsto> cfs ! Suc k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<Turnstile> cfs; k < length cfs;\n     k \\<noteq> length cfs - 1\\<rbrakk>\n    \\<Longrightarrow> (P !! fst (cfs ! k), cfs ! k) \\<mapsto> cfs ! Suc k", "by (induction cfs arbitrary: k rule: execl.induct, auto\n simp: nth_Cons exec1_def split: nat.split)"], ["", "lemma execl_last:\n \"\\<lbrakk>P \\<Turnstile> cfs; k < length cfs; fst (cfs ! k) \\<notin> {0..<size P}\\<rbrakk> \\<Longrightarrow>\n    length cfs - 1 = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<Turnstile> cfs; k < length cfs;\n     fst (cfs ! k) \\<notin> {0..<size P}\\<rbrakk>\n    \\<Longrightarrow> length cfs - 1 = k", "by (induction cfs arbitrary: k rule: execl.induct, auto\n simp: nth_Cons exec1_def split: nat.split_asm)"], ["", "lemma execl_drop:\n \"P \\<Turnstile> cfs \\<Longrightarrow> P \\<Turnstile> drop n cfs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile> cfs \\<Longrightarrow> P \\<Turnstile> drop n cfs", "by (induction cfs arbitrary: n rule: execl.induct,\n simp_all add: drop_Cons split: nat.split)"], ["", "lemma execl_all_N [simplified, intro]:\n \"[LOADI i] \\<Turnstile> cfs\\<box> \\<Longrightarrow> apred (N i) (cfs ! 0) (cfs ! (length cfs - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [LOADI i] \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n    apred (N i) (cfs ! 0) (cfs ! (length cfs - 1))", "by (clarsimp simp: execl_all_def apred_def, cases \"cfs ! 0\",\n subgoal_tac \"length cfs - 1 = 1\", frule_tac [!] execl_next,\n ((rule ccontr)?, fastforce, (rule execl_last)?)+)"], ["", "lemma execl_all_V [simplified, intro]:\n \"[LOAD x] \\<Turnstile> cfs\\<box> \\<Longrightarrow> apred (V x) (cfs ! 0) (cfs ! (length cfs - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [LOAD x] \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n    apred (V x) (cfs ! 0) (cfs ! (length cfs - 1))", "by (clarsimp simp: execl_all_def apred_def, cases \"cfs ! 0\",\n subgoal_tac \"length cfs - 1 = 1\", frule_tac [!] execl_next,\n ((rule ccontr)?, fastforce, (rule execl_last)?)+)"], ["", "lemma execl_all_Bc [simplified, intro]:\n \"\\<lbrakk>if v = f then [JMP i] else [] \\<Turnstile> cfs\\<box>; 0 \\<le> i\\<rbrakk> \\<Longrightarrow>\n    bpred (Bc v, f, i) (cfs ! 0) (cfs ! (length cfs - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>if v = f then [JMP i] else [] \\<Turnstile> cfs\\<box>;\n     0 \\<le> i\\<rbrakk>\n    \\<Longrightarrow> bpred (Bc v, f, i) (cfs ! 0) (cfs ! (length cfs - 1))", "by (clarsimp simp: execl_all_def bpred_def split: if_split_asm, cases \"cfs ! 0\",\n subgoal_tac \"length cfs - 1 = 1\", frule_tac [1-2] execl_next,\n ((rule ccontr)?, force, (rule execl_last)?)+, rule execl.cases [of \"([], cfs)\"],\n auto simp: exec1_def)"], ["", "lemma execl_all_SKIP [simplified, intro]:\n \"[] \\<Turnstile> cfs\\<box> \\<Longrightarrow> cpred SKIP (cfs ! 0) (cfs ! (length cfs - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n    cpred SKIP (cfs ! 0) (cfs ! (length cfs - 1))", "by (rule execl.cases [of \"([], cfs)\"], auto simp: execl_all_def exec1_def cpred_def)"], ["", "text \\<open>\n\\null\n\nNext, lemma @{text execl_all_sub} is proven. It states that, if @{prop \"P @ P' x @ P'' \\<Turnstile> cfs\\<box>\"},\nconfiguration @{text cf} within @{text cfs} refers to the start of program @{text \"P' x\"}, and the\ninitial and the final configuration in every complete execution of @{text \"P' x\"} satisfy predicate\n@{text \"Q x\"}, then there exists a configuration @{text cf'} in @{text cfs} such that @{text cf} and\n@{text cf'} satisfy @{text \"Q x\"}.\n\\\\Thus, this lemma permits to reproduce the execution of a subprogram, particularly:\n\n  \\<^item> a compiled arithmetic expression @{text a}, where @{prop \"Q = apred\"} and @{prop \"x = a\"},\n\n  \\<^item> a compiled boolean expression @{text b}, where @{prop \"Q = bpred\"} and @{prop \"x = (b, f, i)\"}\n(given a flag @{text f} and a jump offset @{text i}), and\n\n  \\<^item> a compiled command @{text c}, where @{prop \"Q = cpred\"} and @{prop \"x = c\"}.\n\nFurthermore, lemma @{text execl_all_sub2} is derived from @{text execl_all_sub} to enable a shorter\nsymbolical execution of two consecutive subprograms.\n\n\\null\n\\<close>"], ["", "lemma execl_sub_aux:\n \"\\<lbrakk>\\<And>m n. \\<forall>k \\<in> {m..<n}. Q P' (((pc, s, stk) # cfs) ! k) \\<Longrightarrow> P' \\<Turnstile>\n    map (off P) (case m of 0 \\<Rightarrow> (pc, s, stk) # take n cfs | Suc m \\<Rightarrow> F cfs m n);\n    \\<forall>k \\<in> {m..<n+m+length cfs'}. Q P' ((cfs' @ (pc, s, stk) # cfs) ! (k-m))\\<rbrakk> \\<Longrightarrow>\n  P' \\<Turnstile> (pc - size P, s, stk) # map (off P) (take n cfs)\"\n  (is \"\\<lbrakk>\\<And>_ _. \\<forall>k \\<in> _. Q P' (?F k) \\<Longrightarrow> _; \\<forall>k \\<in> ?A. Q P' (?G k)\\<rbrakk> \\<Longrightarrow> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>m n.\n                \\<forall>k\\<in>{m..<n}.\n                   Q P' (((pc, s, stk) # cfs) ! k) \\<Longrightarrow>\n                P' \\<Turnstile>\n                map (off P)\n                 (case m of 0 \\<Rightarrow> (pc, s, stk) # take n cfs\n                  | Suc m \\<Rightarrow> F cfs m n);\n     \\<forall>k\\<in>{m..<n + m + length cfs'}.\n        Q P' ((cfs' @ (pc, s, stk) # cfs) ! (k - m))\\<rbrakk>\n    \\<Longrightarrow> P' \\<Turnstile>\n                      (pc - size P, s, stk) # map (off P) (take n cfs)", "by (subgoal_tac \"\\<forall>k \\<in> {0..<n}. Q P' (?F k)\", fastforce, subgoal_tac\n \"\\<forall>k \\<in> {0..<n}. k + m + length cfs' \\<in> ?A \\<and> ?F k = ?G (k + m + length cfs')\",\n fastforce, simp add: nth_append)"], ["", "lemma execl_sub:\n \"\\<lbrakk>P @ P' @ P'' \\<Turnstile> cfs; \\<forall>k \\<in> {m..<n}.\n     size P \\<le> fst (cfs ! k) \\<and> fst (cfs ! k) - size P < size P'\\<rbrakk> \\<Longrightarrow>\n   P' \\<Turnstile> map (off P) (drop m (take (Suc n) cfs))\"\n  (is \"\\<lbrakk>_; \\<forall>k \\<in> _. ?P P' cfs k\\<rbrakk> \\<Longrightarrow> P' \\<Turnstile> map _ (?F cfs m (Suc n))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P @ P' @ P'' \\<Turnstile> cfs;\n     \\<forall>k\\<in>{m..<n}.\n        size P \\<le> fst (cfs ! k) \\<and>\n        fst (cfs ! k) - size P < size P'\\<rbrakk>\n    \\<Longrightarrow> P' \\<Turnstile>\n                      map (off P) (drop m (take (Suc n) cfs))", "proof (induction cfs arbitrary: m n rule: execl.induct [of _ P'], auto\n simp: take_Cons drop_Cons exec1_def split: nat.split, force, force, force,\n erule execl_sub_aux [where m = 0], subst append_Cons [of _ \"[]\"], simp,\n erule execl_sub_aux [where m = \"Suc 0\" and cfs' = \"[]\"], simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Pa a aa b ab ac ba cfs x2 x2b.\n       \\<lbrakk>\\<And>m n.\n                   \\<forall>k\\<in>{m..<n}.\n                      size P \\<le> fst (((ab, ac, ba) # cfs) ! k) \\<and>\n                      fst (((ab, ac, ba) # cfs) ! k) - size P\n                      < size Pa \\<Longrightarrow>\n                   Pa \\<Turnstile>\n                   map (off P)\n                    (case m of 0 \\<Rightarrow> (ab, ac, ba) # take n cfs\n                     | Suc m \\<Rightarrow> drop m (take n cfs));\n        \\<forall>k\\<in>{Suc (Suc x2b)..<Suc x2}.\n           size P \\<le> fst (cfs ! (k - Suc (Suc 0))) \\<and>\n           fst (cfs ! (k - Suc (Suc 0))) - size P < size Pa;\n        (if a < size P then P !! a else (Pa @ P'') !! (a - size P), a, aa,\n         b) \\<mapsto>\n        (ab, ac, ba);\n        0 \\<le> a; a < size P + (size Pa + size P'');\n        P @ Pa @ P'' \\<Turnstile> (ab, ac, ba) # cfs\\<rbrakk>\n       \\<Longrightarrow> Pa \\<Turnstile>\n                         map (off P) (drop x2b (take x2 cfs))", "fix P' pc s stk cfs m n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Pa a aa b ab ac ba cfs x2 x2b.\n       \\<lbrakk>\\<And>m n.\n                   \\<forall>k\\<in>{m..<n}.\n                      size P \\<le> fst (((ab, ac, ba) # cfs) ! k) \\<and>\n                      fst (((ab, ac, ba) # cfs) ! k) - size P\n                      < size Pa \\<Longrightarrow>\n                   Pa \\<Turnstile>\n                   map (off P)\n                    (case m of 0 \\<Rightarrow> (ab, ac, ba) # take n cfs\n                     | Suc m \\<Rightarrow> drop m (take n cfs));\n        \\<forall>k\\<in>{Suc (Suc x2b)..<Suc x2}.\n           size P \\<le> fst (cfs ! (k - Suc (Suc 0))) \\<and>\n           fst (cfs ! (k - Suc (Suc 0))) - size P < size Pa;\n        (if a < size P then P !! a else (Pa @ P'') !! (a - size P), a, aa,\n         b) \\<mapsto>\n        (ab, ac, ba);\n        0 \\<le> a; a < size P + (size Pa + size P'');\n        P @ Pa @ P'' \\<Turnstile> (ab, ac, ba) # cfs\\<rbrakk>\n       \\<Longrightarrow> Pa \\<Turnstile>\n                         map (off P) (drop x2b (take x2 cfs))", "let ?cf = \"(pc, s, stk) :: config\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Pa a aa b ab ac ba cfs x2 x2b.\n       \\<lbrakk>\\<And>m n.\n                   \\<forall>k\\<in>{m..<n}.\n                      size P \\<le> fst (((ab, ac, ba) # cfs) ! k) \\<and>\n                      fst (((ab, ac, ba) # cfs) ! k) - size P\n                      < size Pa \\<Longrightarrow>\n                   Pa \\<Turnstile>\n                   map (off P)\n                    (case m of 0 \\<Rightarrow> (ab, ac, ba) # take n cfs\n                     | Suc m \\<Rightarrow> drop m (take n cfs));\n        \\<forall>k\\<in>{Suc (Suc x2b)..<Suc x2}.\n           size P \\<le> fst (cfs ! (k - Suc (Suc 0))) \\<and>\n           fst (cfs ! (k - Suc (Suc 0))) - size P < size Pa;\n        (if a < size P then P !! a else (Pa @ P'') !! (a - size P), a, aa,\n         b) \\<mapsto>\n        (ab, ac, ba);\n        0 \\<le> a; a < size P + (size Pa + size P'');\n        P @ Pa @ P'' \\<Turnstile> (ab, ac, ba) # cfs\\<rbrakk>\n       \\<Longrightarrow> Pa \\<Turnstile>\n                         map (off P) (drop x2b (take x2 cfs))", "assume \"\\<And>m n. \\<forall>k \\<in> {m..<n}. ?P P' (?cf # cfs) k \\<Longrightarrow> P' \\<Turnstile>\n    map (off P) (case m of 0 \\<Rightarrow> ?cf # take n cfs | Suc m \\<Rightarrow> ?F cfs m n)\""], ["proof (state)\nthis:\n  \\<forall>k\\<in>{?m..<?n}.\n     size P \\<le> fst (((pc, s, stk) # cfs) ! k) \\<and>\n     fst (((pc, s, stk) # cfs) ! k) - size P < size P' \\<Longrightarrow>\n  P' \\<Turnstile>\n  map (off P)\n   (case ?m of 0 \\<Rightarrow> (pc, s, stk) # take ?n cfs\n    | Suc m \\<Rightarrow> drop m (take ?n cfs))\n\ngoal (1 subgoal):\n 1. \\<And>Pa a aa b ab ac ba cfs x2 x2b.\n       \\<lbrakk>\\<And>m n.\n                   \\<forall>k\\<in>{m..<n}.\n                      size P \\<le> fst (((ab, ac, ba) # cfs) ! k) \\<and>\n                      fst (((ab, ac, ba) # cfs) ! k) - size P\n                      < size Pa \\<Longrightarrow>\n                   Pa \\<Turnstile>\n                   map (off P)\n                    (case m of 0 \\<Rightarrow> (ab, ac, ba) # take n cfs\n                     | Suc m \\<Rightarrow> drop m (take n cfs));\n        \\<forall>k\\<in>{Suc (Suc x2b)..<Suc x2}.\n           size P \\<le> fst (cfs ! (k - Suc (Suc 0))) \\<and>\n           fst (cfs ! (k - Suc (Suc 0))) - size P < size Pa;\n        (if a < size P then P !! a else (Pa @ P'') !! (a - size P), a, aa,\n         b) \\<mapsto>\n        (ab, ac, ba);\n        0 \\<le> a; a < size P + (size Pa + size P'');\n        P @ Pa @ P'' \\<Turnstile> (ab, ac, ba) # cfs\\<rbrakk>\n       \\<Longrightarrow> Pa \\<Turnstile>\n                         map (off P) (drop x2b (take x2 cfs))", "moreover"], ["proof (state)\nthis:\n  \\<forall>k\\<in>{?m..<?n}.\n     size P \\<le> fst (((pc, s, stk) # cfs) ! k) \\<and>\n     fst (((pc, s, stk) # cfs) ! k) - size P < size P' \\<Longrightarrow>\n  P' \\<Turnstile>\n  map (off P)\n   (case ?m of 0 \\<Rightarrow> (pc, s, stk) # take ?n cfs\n    | Suc m \\<Rightarrow> drop m (take ?n cfs))\n\ngoal (1 subgoal):\n 1. \\<And>Pa a aa b ab ac ba cfs x2 x2b.\n       \\<lbrakk>\\<And>m n.\n                   \\<forall>k\\<in>{m..<n}.\n                      size P \\<le> fst (((ab, ac, ba) # cfs) ! k) \\<and>\n                      fst (((ab, ac, ba) # cfs) ! k) - size P\n                      < size Pa \\<Longrightarrow>\n                   Pa \\<Turnstile>\n                   map (off P)\n                    (case m of 0 \\<Rightarrow> (ab, ac, ba) # take n cfs\n                     | Suc m \\<Rightarrow> drop m (take n cfs));\n        \\<forall>k\\<in>{Suc (Suc x2b)..<Suc x2}.\n           size P \\<le> fst (cfs ! (k - Suc (Suc 0))) \\<and>\n           fst (cfs ! (k - Suc (Suc 0))) - size P < size Pa;\n        (if a < size P then P !! a else (Pa @ P'') !! (a - size P), a, aa,\n         b) \\<mapsto>\n        (ab, ac, ba);\n        0 \\<le> a; a < size P + (size Pa + size P'');\n        P @ Pa @ P'' \\<Turnstile> (ab, ac, ba) # cfs\\<rbrakk>\n       \\<Longrightarrow> Pa \\<Turnstile>\n                         map (off P) (drop x2b (take x2 cfs))", "assume \"\\<forall>k \\<in> {Suc (Suc m)..<Suc n}. ?P P' cfs (k - Suc (Suc 0))\""], ["proof (state)\nthis:\n  \\<forall>k\\<in>{Suc (Suc m)..<Suc n}.\n     size P \\<le> fst (cfs ! (k - Suc (Suc 0))) \\<and>\n     fst (cfs ! (k - Suc (Suc 0))) - size P < size P'\n\ngoal (1 subgoal):\n 1. \\<And>Pa a aa b ab ac ba cfs x2 x2b.\n       \\<lbrakk>\\<And>m n.\n                   \\<forall>k\\<in>{m..<n}.\n                      size P \\<le> fst (((ab, ac, ba) # cfs) ! k) \\<and>\n                      fst (((ab, ac, ba) # cfs) ! k) - size P\n                      < size Pa \\<Longrightarrow>\n                   Pa \\<Turnstile>\n                   map (off P)\n                    (case m of 0 \\<Rightarrow> (ab, ac, ba) # take n cfs\n                     | Suc m \\<Rightarrow> drop m (take n cfs));\n        \\<forall>k\\<in>{Suc (Suc x2b)..<Suc x2}.\n           size P \\<le> fst (cfs ! (k - Suc (Suc 0))) \\<and>\n           fst (cfs ! (k - Suc (Suc 0))) - size P < size Pa;\n        (if a < size P then P !! a else (Pa @ P'') !! (a - size P), a, aa,\n         b) \\<mapsto>\n        (ab, ac, ba);\n        0 \\<le> a; a < size P + (size Pa + size P'');\n        P @ Pa @ P'' \\<Turnstile> (ab, ac, ba) # cfs\\<rbrakk>\n       \\<Longrightarrow> Pa \\<Turnstile>\n                         map (off P) (drop x2b (take x2 cfs))", "hence \"\\<forall>k \\<in> {Suc m..<n}. ?P P' (?cf # cfs) k\""], ["proof (prove)\nusing this:\n  \\<forall>k\\<in>{Suc (Suc m)..<Suc n}.\n     size P \\<le> fst (cfs ! (k - Suc (Suc 0))) \\<and>\n     fst (cfs ! (k - Suc (Suc 0))) - size P < size P'\n\ngoal (1 subgoal):\n 1. \\<forall>k\\<in>{Suc m..<n}.\n       size P \\<le> fst (((pc, s, stk) # cfs) ! k) \\<and>\n       fst (((pc, s, stk) # cfs) ! k) - size P < size P'", "by force"], ["proof (state)\nthis:\n  \\<forall>k\\<in>{Suc m..<n}.\n     size P \\<le> fst (((pc, s, stk) # cfs) ! k) \\<and>\n     fst (((pc, s, stk) # cfs) ! k) - size P < size P'\n\ngoal (1 subgoal):\n 1. \\<And>Pa a aa b ab ac ba cfs x2 x2b.\n       \\<lbrakk>\\<And>m n.\n                   \\<forall>k\\<in>{m..<n}.\n                      size P \\<le> fst (((ab, ac, ba) # cfs) ! k) \\<and>\n                      fst (((ab, ac, ba) # cfs) ! k) - size P\n                      < size Pa \\<Longrightarrow>\n                   Pa \\<Turnstile>\n                   map (off P)\n                    (case m of 0 \\<Rightarrow> (ab, ac, ba) # take n cfs\n                     | Suc m \\<Rightarrow> drop m (take n cfs));\n        \\<forall>k\\<in>{Suc (Suc x2b)..<Suc x2}.\n           size P \\<le> fst (cfs ! (k - Suc (Suc 0))) \\<and>\n           fst (cfs ! (k - Suc (Suc 0))) - size P < size Pa;\n        (if a < size P then P !! a else (Pa @ P'') !! (a - size P), a, aa,\n         b) \\<mapsto>\n        (ab, ac, ba);\n        0 \\<le> a; a < size P + (size Pa + size P'');\n        P @ Pa @ P'' \\<Turnstile> (ab, ac, ba) # cfs\\<rbrakk>\n       \\<Longrightarrow> Pa \\<Turnstile>\n                         map (off P) (drop x2b (take x2 cfs))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>k\\<in>{?m..<?n}.\n     size P \\<le> fst (((pc, s, stk) # cfs) ! k) \\<and>\n     fst (((pc, s, stk) # cfs) ! k) - size P < size P' \\<Longrightarrow>\n  P' \\<Turnstile>\n  map (off P)\n   (case ?m of 0 \\<Rightarrow> (pc, s, stk) # take ?n cfs\n    | Suc m \\<Rightarrow> drop m (take ?n cfs))\n  \\<forall>k\\<in>{Suc m..<n}.\n     size P \\<le> fst (((pc, s, stk) # cfs) ! k) \\<and>\n     fst (((pc, s, stk) # cfs) ! k) - size P < size P'", "show \"P' \\<Turnstile> map (off P) (?F cfs m n)\""], ["proof (prove)\nusing this:\n  \\<forall>k\\<in>{?m..<?n}.\n     size P \\<le> fst (((pc, s, stk) # cfs) ! k) \\<and>\n     fst (((pc, s, stk) # cfs) ! k) - size P < size P' \\<Longrightarrow>\n  P' \\<Turnstile>\n  map (off P)\n   (case ?m of 0 \\<Rightarrow> (pc, s, stk) # take ?n cfs\n    | Suc m \\<Rightarrow> drop m (take ?n cfs))\n  \\<forall>k\\<in>{Suc m..<n}.\n     size P \\<le> fst (((pc, s, stk) # cfs) ! k) \\<and>\n     fst (((pc, s, stk) # cfs) ! k) - size P < size P'\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile> map (off P) (drop m (take n cfs))", "by fastforce"], ["proof (state)\nthis:\n  P' \\<Turnstile> map (off P) (drop m (take n cfs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma execl_all_sub [rule_format]:\n  assumes\n    A: \"P @ P' x @ P'' \\<Turnstile> cfs\\<box>\" and\n    B: \"k < length cfs\" and\n    C: \"fst (cfs ! k) = size P\" and\n    D: \"\\<forall>cfs. P' x \\<Turnstile> cfs\\<box> \\<longrightarrow> Q x (cfs ! 0) (cfs ! (length cfs - 1))\"\n  shows \"\\<exists>k' < length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "let ?P = \"\\<lambda>k. size P \\<le> fst (cfs ! k) \\<and> fst (cfs ! k) - size P < size (P' x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "let ?A = \"{k'. k' \\<in> {k..<length cfs} \\<and> \\<not> ?P k'}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "have E: \"Min ?A \\<in> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min {k' \\<in> {k..<length cfs}.\n         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                 fst (cfs ! k') - size P < size (P' x))}\n    \\<in> {k' \\<in> {k..<length cfs}.\n           \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                   fst (cfs ! k') - size P < size (P' x))}", "using A and B"], ["proof (prove)\nusing this:\n  P @ P' x @ P'' \\<Turnstile> cfs\\<box>\n  k < length cfs\n\ngoal (1 subgoal):\n 1. Min {k' \\<in> {k..<length cfs}.\n         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                 fst (cfs ! k') - size P < size (P' x))}\n    \\<in> {k' \\<in> {k..<length cfs}.\n           \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                   fst (cfs ! k') - size P < size (P' x))}", "by (rule_tac Min_in, simp_all add: execl_all_def,\n     rule_tac exI [of _ \"length cfs - 1\"], auto)"], ["proof (state)\nthis:\n  Min {k' \\<in> {k..<length cfs}.\n       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n               fst (cfs ! k') - size P < size (P' x))}\n  \\<in> {k' \\<in> {k..<length cfs}.\n         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                 fst (cfs ! k') - size P < size (P' x))}\n\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "hence \"map (off P) (drop k (take (Suc (Min ?A)) cfs)) ! 0 = off P (cfs ! k)\"\n    (is \"?cfs ! _ = _\")"], ["proof (prove)\nusing this:\n  Min {k' \\<in> {k..<length cfs}.\n       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n               fst (cfs ! k') - size P < size (P' x))}\n  \\<in> {k' \\<in> {k..<length cfs}.\n         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                 fst (cfs ! k') - size P < size (P' x))}\n\ngoal (1 subgoal):\n 1. map (off P)\n     (drop k\n       (take\n         (Suc (Min {k' \\<in> {k..<length cfs}.\n                    \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                            fst (cfs ! k') - size P < size (P' x))}))\n         cfs)) !\n    0 =\n    off P (cfs ! k)", "by auto"], ["proof (state)\nthis:\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs)) !\n  0 =\n  off P (cfs ! k)\n\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "moreover"], ["proof (state)\nthis:\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs)) !\n  0 =\n  off P (cfs ! k)\n\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "have \"length cfs \\<le> Suc (Min ?A) \\<longrightarrow> Min ?A = length cfs - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length cfs\n    \\<le> Suc (Min {k' \\<in> {k..<length cfs}.\n                    \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                            fst (cfs ! k') - size P\n                            < size (P' x))}) \\<longrightarrow>\n    Min {k' \\<in> {k..<length cfs}.\n         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                 fst (cfs ! k') - size P < size (P' x))} =\n    length cfs - 1", "using E"], ["proof (prove)\nusing this:\n  Min {k' \\<in> {k..<length cfs}.\n       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n               fst (cfs ! k') - size P < size (P' x))}\n  \\<in> {k' \\<in> {k..<length cfs}.\n         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                 fst (cfs ! k') - size P < size (P' x))}\n\ngoal (1 subgoal):\n 1. length cfs\n    \\<le> Suc (Min {k' \\<in> {k..<length cfs}.\n                    \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                            fst (cfs ! k') - size P\n                            < size (P' x))}) \\<longrightarrow>\n    Min {k' \\<in> {k..<length cfs}.\n         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                 fst (cfs ! k') - size P < size (P' x))} =\n    length cfs - 1", "by auto"], ["proof (state)\nthis:\n  length cfs\n  \\<le> Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P\n                          < size (P' x))}) \\<longrightarrow>\n  Min {k' \\<in> {k..<length cfs}.\n       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n               fst (cfs ! k') - size P < size (P' x))} =\n  length cfs - 1\n\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "with A and B and E"], ["proof (chain)\npicking this:\n  P @ P' x @ P'' \\<Turnstile> cfs\\<box>\n  k < length cfs\n  Min {k' \\<in> {k..<length cfs}.\n       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n               fst (cfs ! k') - size P < size (P' x))}\n  \\<in> {k' \\<in> {k..<length cfs}.\n         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                 fst (cfs ! k') - size P < size (P' x))}\n  length cfs\n  \\<le> Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P\n                          < size (P' x))}) \\<longrightarrow>\n  Min {k' \\<in> {k..<length cfs}.\n       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n               fst (cfs ! k') - size P < size (P' x))} =\n  length cfs - 1", "have F: \"?cfs ! (length ?cfs - 1) = off P (cfs ! Min ?A)\""], ["proof (prove)\nusing this:\n  P @ P' x @ P'' \\<Turnstile> cfs\\<box>\n  k < length cfs\n  Min {k' \\<in> {k..<length cfs}.\n       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n               fst (cfs ! k') - size P < size (P' x))}\n  \\<in> {k' \\<in> {k..<length cfs}.\n         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                 fst (cfs ! k') - size P < size (P' x))}\n  length cfs\n  \\<le> Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P\n                          < size (P' x))}) \\<longrightarrow>\n  Min {k' \\<in> {k..<length cfs}.\n       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n               fst (cfs ! k') - size P < size (P' x))} =\n  length cfs - 1\n\ngoal (1 subgoal):\n 1. map (off P)\n     (drop k\n       (take\n         (Suc (Min {k' \\<in> {k..<length cfs}.\n                    \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                            fst (cfs ! k') - size P < size (P' x))}))\n         cfs)) !\n    (length\n      (map (off P)\n        (drop k\n          (take\n            (Suc (Min {k' \\<in> {k..<length cfs}.\n                       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                               fst (cfs ! k') - size P < size (P' x))}))\n            cfs))) -\n     1) =\n    off P\n     (cfs !\n      Min {k' \\<in> {k..<length cfs}.\n           \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                   fst (cfs ! k') - size P < size (P' x))})", "by (subst nth_map, auto simp: min_def execl_all_def, arith)"], ["proof (state)\nthis:\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs)) !\n  (length\n    (map (off P)\n      (drop k\n        (take\n          (Suc (Min {k' \\<in> {k..<length cfs}.\n                     \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                             fst (cfs ! k') - size P < size (P' x))}))\n          cfs))) -\n   1) =\n  off P\n   (cfs !\n    Min {k' \\<in> {k..<length cfs}.\n         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                 fst (cfs ! k') - size P < size (P' x))})\n\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "hence \"?cfs \\<noteq> [] \\<and> fst (?cfs ! (length ?cfs - 1)) \\<notin> {0..<size (P' x)}\""], ["proof (prove)\nusing this:\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs)) !\n  (length\n    (map (off P)\n      (drop k\n        (take\n          (Suc (Min {k' \\<in> {k..<length cfs}.\n                     \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                             fst (cfs ! k') - size P < size (P' x))}))\n          cfs))) -\n   1) =\n  off P\n   (cfs !\n    Min {k' \\<in> {k..<length cfs}.\n         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                 fst (cfs ! k') - size P < size (P' x))})\n\ngoal (1 subgoal):\n 1. map (off P)\n     (drop k\n       (take\n         (Suc (Min {k' \\<in> {k..<length cfs}.\n                    \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                            fst (cfs ! k') - size P < size (P' x))}))\n         cfs)) \\<noteq>\n    [] \\<and>\n    fst (map (off P)\n          (drop k\n            (take\n              (Suc (Min {k' \\<in> {k..<length cfs}.\n                         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                                 fst (cfs ! k') - size P < size (P' x))}))\n              cfs)) !\n         (length\n           (map (off P)\n             (drop k\n               (take\n                 (Suc (Min {k' \\<in> {k..<length cfs}.\n                            \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                                    fst (cfs ! k') - size P\n                                    < size (P' x))}))\n                 cfs))) -\n          1))\n    \\<notin> {0..<size (P' x)}", "using E"], ["proof (prove)\nusing this:\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs)) !\n  (length\n    (map (off P)\n      (drop k\n        (take\n          (Suc (Min {k' \\<in> {k..<length cfs}.\n                     \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                             fst (cfs ! k') - size P < size (P' x))}))\n          cfs))) -\n   1) =\n  off P\n   (cfs !\n    Min {k' \\<in> {k..<length cfs}.\n         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                 fst (cfs ! k') - size P < size (P' x))})\n  Min {k' \\<in> {k..<length cfs}.\n       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n               fst (cfs ! k') - size P < size (P' x))}\n  \\<in> {k' \\<in> {k..<length cfs}.\n         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                 fst (cfs ! k') - size P < size (P' x))}\n\ngoal (1 subgoal):\n 1. map (off P)\n     (drop k\n       (take\n         (Suc (Min {k' \\<in> {k..<length cfs}.\n                    \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                            fst (cfs ! k') - size P < size (P' x))}))\n         cfs)) \\<noteq>\n    [] \\<and>\n    fst (map (off P)\n          (drop k\n            (take\n              (Suc (Min {k' \\<in> {k..<length cfs}.\n                         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                                 fst (cfs ! k') - size P < size (P' x))}))\n              cfs)) !\n         (length\n           (map (off P)\n             (drop k\n               (take\n                 (Suc (Min {k' \\<in> {k..<length cfs}.\n                            \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                                    fst (cfs ! k') - size P\n                                    < size (P' x))}))\n                 cfs))) -\n          1))\n    \\<notin> {0..<size (P' x)}", "by (auto simp: min_def)"], ["proof (state)\nthis:\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs)) \\<noteq>\n  [] \\<and>\n  fst (map (off P)\n        (drop k\n          (take\n            (Suc (Min {k' \\<in> {k..<length cfs}.\n                       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                               fst (cfs ! k') - size P < size (P' x))}))\n            cfs)) !\n       (length\n         (map (off P)\n           (drop k\n             (take\n               (Suc (Min {k' \\<in> {k..<length cfs}.\n                          \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                                  fst (cfs ! k') - size P < size (P' x))}))\n               cfs))) -\n        1))\n  \\<notin> {0..<size (P' x)}\n\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "moreover"], ["proof (state)\nthis:\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs)) \\<noteq>\n  [] \\<and>\n  fst (map (off P)\n        (drop k\n          (take\n            (Suc (Min {k' \\<in> {k..<length cfs}.\n                       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                               fst (cfs ! k') - size P < size (P' x))}))\n            cfs)) !\n       (length\n         (map (off P)\n           (drop k\n             (take\n               (Suc (Min {k' \\<in> {k..<length cfs}.\n                          \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                                  fst (cfs ! k') - size P < size (P' x))}))\n               cfs))) -\n        1))\n  \\<notin> {0..<size (P' x)}\n\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "have \"\\<not> (\\<exists>k'. k' \\<in> {k'. k' \\<in> {k..<Min ?A} \\<and> \\<not> ?P k'})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>k'.\n       k' \\<in> {k' \\<in> {k..<Min {k' \\<in> {k..<length cfs}.\n                                    \\<not> (size P\n      \\<le> fst (cfs ! k') \\<and>\n      fst (cfs ! k') - size P < size (P' x))}}.\n                 \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                         fst (cfs ! k') - size P < size (P' x))}", "by (rule notI, erule exE, frule rev_subsetD [of _ _ ?A], rule subsetI,\n     insert E, simp, subgoal_tac \"finite ?A\", drule Min_le, force+)"], ["proof (state)\nthis:\n  \\<nexists>k'.\n     k' \\<in> {k' \\<in> {k..<Min {k' \\<in> {k..<length cfs}.\n                                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n    fst (cfs ! k') - size P < size (P' x))}}.\n               \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                       fst (cfs ! k') - size P < size (P' x))}\n\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "hence \"P' x \\<Turnstile> ?cfs\""], ["proof (prove)\nusing this:\n  \\<nexists>k'.\n     k' \\<in> {k' \\<in> {k..<Min {k' \\<in> {k..<length cfs}.\n                                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n    fst (cfs ! k') - size P < size (P' x))}}.\n               \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                       fst (cfs ! k') - size P < size (P' x))}\n\ngoal (1 subgoal):\n 1. P' x \\<Turnstile>\n    map (off P)\n     (drop k\n       (take\n         (Suc (Min {k' \\<in> {k..<length cfs}.\n                    \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                            fst (cfs ! k') - size P < size (P' x))}))\n         cfs))", "using A"], ["proof (prove)\nusing this:\n  \\<nexists>k'.\n     k' \\<in> {k' \\<in> {k..<Min {k' \\<in> {k..<length cfs}.\n                                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n    fst (cfs ! k') - size P < size (P' x))}}.\n               \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                       fst (cfs ! k') - size P < size (P' x))}\n  P @ P' x @ P'' \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. P' x \\<Turnstile>\n    map (off P)\n     (drop k\n       (take\n         (Suc (Min {k' \\<in> {k..<length cfs}.\n                    \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                            fst (cfs ! k') - size P < size (P' x))}))\n         cfs))", "by (subst (asm) execl_all_def, rule_tac execl_sub, blast+)"], ["proof (state)\nthis:\n  P' x \\<Turnstile>\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs))\n\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "ultimately"], ["proof (chain)\npicking this:\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs)) !\n  0 =\n  off P (cfs ! k)\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs)) \\<noteq>\n  [] \\<and>\n  fst (map (off P)\n        (drop k\n          (take\n            (Suc (Min {k' \\<in> {k..<length cfs}.\n                       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                               fst (cfs ! k') - size P < size (P' x))}))\n            cfs)) !\n       (length\n         (map (off P)\n           (drop k\n             (take\n               (Suc (Min {k' \\<in> {k..<length cfs}.\n                          \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                                  fst (cfs ! k') - size P < size (P' x))}))\n               cfs))) -\n        1))\n  \\<notin> {0..<size (P' x)}\n  P' x \\<Turnstile>\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs))", "have \"Q x (?cfs ! 0) (?cfs ! (length ?cfs - 1))\""], ["proof (prove)\nusing this:\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs)) !\n  0 =\n  off P (cfs ! k)\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs)) \\<noteq>\n  [] \\<and>\n  fst (map (off P)\n        (drop k\n          (take\n            (Suc (Min {k' \\<in> {k..<length cfs}.\n                       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                               fst (cfs ! k') - size P < size (P' x))}))\n            cfs)) !\n       (length\n         (map (off P)\n           (drop k\n             (take\n               (Suc (Min {k' \\<in> {k..<length cfs}.\n                          \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                                  fst (cfs ! k') - size P < size (P' x))}))\n               cfs))) -\n        1))\n  \\<notin> {0..<size (P' x)}\n  P' x \\<Turnstile>\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs))\n\ngoal (1 subgoal):\n 1. Q x (map (off P)\n          (drop k\n            (take\n              (Suc (Min {k' \\<in> {k..<length cfs}.\n                         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                                 fst (cfs ! k') - size P < size (P' x))}))\n              cfs)) !\n         0)\n     (map (off P)\n       (drop k\n         (take\n           (Suc (Min {k' \\<in> {k..<length cfs}.\n                      \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                              fst (cfs ! k') - size P < size (P' x))}))\n           cfs)) !\n      (length\n        (map (off P)\n          (drop k\n            (take\n              (Suc (Min {k' \\<in> {k..<length cfs}.\n                         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                                 fst (cfs ! k') - size P < size (P' x))}))\n              cfs))) -\n       1))", "using C and D"], ["proof (prove)\nusing this:\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs)) !\n  0 =\n  off P (cfs ! k)\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs)) \\<noteq>\n  [] \\<and>\n  fst (map (off P)\n        (drop k\n          (take\n            (Suc (Min {k' \\<in> {k..<length cfs}.\n                       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                               fst (cfs ! k') - size P < size (P' x))}))\n            cfs)) !\n       (length\n         (map (off P)\n           (drop k\n             (take\n               (Suc (Min {k' \\<in> {k..<length cfs}.\n                          \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                                  fst (cfs ! k') - size P < size (P' x))}))\n               cfs))) -\n        1))\n  \\<notin> {0..<size (P' x)}\n  P' x \\<Turnstile>\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs))\n  fst (cfs ! k) = size P\n  \\<forall>cfs.\n     P' x \\<Turnstile> cfs\\<box> \\<longrightarrow>\n     Q x (cfs ! 0) (cfs ! (length cfs - 1))\n\ngoal (1 subgoal):\n 1. Q x (map (off P)\n          (drop k\n            (take\n              (Suc (Min {k' \\<in> {k..<length cfs}.\n                         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                                 fst (cfs ! k') - size P < size (P' x))}))\n              cfs)) !\n         0)\n     (map (off P)\n       (drop k\n         (take\n           (Suc (Min {k' \\<in> {k..<length cfs}.\n                      \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                              fst (cfs ! k') - size P < size (P' x))}))\n           cfs)) !\n      (length\n        (map (off P)\n          (drop k\n            (take\n              (Suc (Min {k' \\<in> {k..<length cfs}.\n                         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                                 fst (cfs ! k') - size P < size (P' x))}))\n              cfs))) -\n       1))", "by (auto simp: execl_all_def)"], ["proof (state)\nthis:\n  Q x (map (off P)\n        (drop k\n          (take\n            (Suc (Min {k' \\<in> {k..<length cfs}.\n                       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                               fst (cfs ! k') - size P < size (P' x))}))\n            cfs)) !\n       0)\n   (map (off P)\n     (drop k\n       (take\n         (Suc (Min {k' \\<in> {k..<length cfs}.\n                    \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                            fst (cfs ! k') - size P < size (P' x))}))\n         cfs)) !\n    (length\n      (map (off P)\n        (drop k\n          (take\n            (Suc (Min {k' \\<in> {k..<length cfs}.\n                       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                               fst (cfs ! k') - size P < size (P' x))}))\n            cfs))) -\n     1))\n\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  Q x (map (off P)\n        (drop k\n          (take\n            (Suc (Min {k' \\<in> {k..<length cfs}.\n                       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                               fst (cfs ! k') - size P < size (P' x))}))\n            cfs)) !\n       0)\n   (map (off P)\n     (drop k\n       (take\n         (Suc (Min {k' \\<in> {k..<length cfs}.\n                    \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                            fst (cfs ! k') - size P < size (P' x))}))\n         cfs)) !\n    (length\n      (map (off P)\n        (drop k\n          (take\n            (Suc (Min {k' \\<in> {k..<length cfs}.\n                       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                               fst (cfs ! k') - size P < size (P' x))}))\n            cfs))) -\n     1))\n\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "using E and F"], ["proof (prove)\nusing this:\n  Q x (map (off P)\n        (drop k\n          (take\n            (Suc (Min {k' \\<in> {k..<length cfs}.\n                       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                               fst (cfs ! k') - size P < size (P' x))}))\n            cfs)) !\n       0)\n   (map (off P)\n     (drop k\n       (take\n         (Suc (Min {k' \\<in> {k..<length cfs}.\n                    \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                            fst (cfs ! k') - size P < size (P' x))}))\n         cfs)) !\n    (length\n      (map (off P)\n        (drop k\n          (take\n            (Suc (Min {k' \\<in> {k..<length cfs}.\n                       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                               fst (cfs ! k') - size P < size (P' x))}))\n            cfs))) -\n     1))\n  Min {k' \\<in> {k..<length cfs}.\n       \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n               fst (cfs ! k') - size P < size (P' x))}\n  \\<in> {k' \\<in> {k..<length cfs}.\n         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                 fst (cfs ! k') - size P < size (P' x))}\n  map (off P)\n   (drop k\n     (take\n       (Suc (Min {k' \\<in> {k..<length cfs}.\n                  \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                          fst (cfs ! k') - size P < size (P' x))}))\n       cfs)) !\n  (length\n    (map (off P)\n      (drop k\n        (take\n          (Suc (Min {k' \\<in> {k..<length cfs}.\n                     \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                             fst (cfs ! k') - size P < size (P' x))}))\n          cfs))) -\n   1) =\n  off P\n   (cfs !\n    Min {k' \\<in> {k..<length cfs}.\n         \\<not> (size P \\<le> fst (cfs ! k') \\<and>\n                 fst (cfs ! k') - size P < size (P' x))})\n\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))", "by (rule_tac exI [of _ \"Min ?A\"], auto)"], ["proof (state)\nthis:\n  \\<exists>k'<length cfs. Q x (off P (cfs ! k)) (off P (cfs ! k'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma execl_all_sub2:\n  assumes\n    A: \"P x @ P' x' @ P'' \\<Turnstile> cfs\\<box>\"\n      (is \"?P \\<Turnstile> _\\<box>\") and\n    B: \"\\<And>cfs. P x \\<Turnstile> cfs\\<box> \\<Longrightarrow> (\\<lambda>(pc, s, stk) (pc', s', stk').\n      pc' = pc + size (P x) + I s \\<and> Q s s' \\<and> stk' = F s stk)\n        (cfs ! 0) (cfs ! (length cfs - 1))\"\n      (is \"\\<And>cfs. _ \\<Longrightarrow> ?Q x (cfs ! 0) (cfs ! (length cfs - 1))\") and\n    C: \"\\<And>cfs. P' x' \\<Turnstile> cfs\\<box> \\<Longrightarrow> (\\<lambda>(pc, s, stk) (pc', s', stk').\n      pc' = pc + size (P' x') + I' s \\<and> Q' s s' \\<and> stk' = F' s stk)\n        (cfs ! 0) (cfs ! (length cfs - 1))\"\n      (is \"\\<And>cfs. _ \\<Longrightarrow> ?Q' x' (cfs ! 0) (cfs ! (length cfs - 1))\") and\n    D: \"I (fst (snd (cfs ! 0))) = 0\"\n  shows \"\\<exists>k < length cfs. \\<exists>t. (\\<lambda>(pc, s, stk) (pc', s', stk').\n    pc = 0 \\<and> pc' = size (P x) + size (P' x') + I' t \\<and> Q s t \\<and> Q' t s' \\<and>\n      stk' = F' t (F s stk)) (cfs ! 0) (cfs ! k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k<length cfs.\n       \\<exists>t.\n          (case cfs ! 0 of\n           (pc, s, stk) \\<Rightarrow>\n             \\<lambda>(pc', s', stk').\n                pc = 0 \\<and>\n                pc' = size (P x) + size (P' x') + I' t \\<and>\n                Q s t \\<and> Q' t s' \\<and> stk' = F' t (F s stk))\n           (cfs ! k)", "by (subgoal_tac \"[] @ ?P \\<Turnstile> cfs\\<box>\", drule execl_all_sub [where k = 0 and Q = ?Q],\n insert A B, (clarsimp simp: execl_all_def)+, insert A C D, drule execl_all_sub\n [where Q = ?Q'], simp+, clarify, rule exI, rule conjI, simp, rule exI, auto)"], ["", "subsection \"Main theorem\""], ["", "text \\<open>\nIt is time to prove compiler correctness. First, lemmas @{text acomp_acomp}, @{text bcomp_bcomp} are\nderived from @{thm [source] execl_all_sub2} to reproduce the execution of two consecutive compiled\narithmetic expressions (possibly generated by both @{const acomp} and @{const bcomp}) and boolean\nexpressions (possibly generated by @{const bcomp}), respectively. Subsequently, the correctness of\n@{const acomp} and @{const bcomp} is proven in lemmas @{text acomp_correct}, @{text bcomp_correct}.\n\n\\null\n\\<close>"], ["", "lemma acomp_acomp:\n \"\\<lbrakk>acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ P \\<Turnstile> cfs\\<box>;\n    \\<And>cfs. acomp a\\<^sub>1 \\<Turnstile> cfs\\<box> \\<Longrightarrow> apred a\\<^sub>1 (cfs ! 0) (cfs ! (length cfs - 1));\n    \\<And>cfs. acomp a\\<^sub>2 \\<Turnstile> cfs\\<box> \\<Longrightarrow> apred a\\<^sub>2 (cfs ! 0) (cfs ! (length cfs - 1))\\<rbrakk> \\<Longrightarrow>\n  case cfs ! 0 of (pc, s, stk) \\<Rightarrow> pc = 0 \\<and> (\\<exists>k < length cfs. cfs ! k =\n    (size (acomp a\\<^sub>1 @ acomp a\\<^sub>2), s, aval a\\<^sub>2 s # aval a\\<^sub>1 s # stk))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ P \\<Turnstile> cfs\\<box>;\n     \\<And>cfs.\n        acomp a\\<^sub>1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n        apred a\\<^sub>1 (cfs ! 0) (cfs ! (length cfs - 1));\n     \\<And>cfs.\n        acomp a\\<^sub>2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n        apred a\\<^sub>2 (cfs ! 0) (cfs ! (length cfs - 1))\\<rbrakk>\n    \\<Longrightarrow> case cfs ! 0 of\n                      (pc, s, stk) \\<Rightarrow>\n                        pc = 0 \\<and>\n                        (\\<exists>k<length cfs.\n                            cfs ! k =\n                            (size (acomp a\\<^sub>1 @ acomp a\\<^sub>2), s,\n                             aval a\\<^sub>2 s # aval a\\<^sub>1 s # stk))", "by (drule execl_all_sub2 [where I = \"\\<lambda>s. 0\" and I' = \"\\<lambda>s. 0\" and Q = \"\\<lambda>s s'. s' = s\"\n and Q' = \"\\<lambda>s s'. s' = s\" and F = \"\\<lambda>s stk. aval a\\<^sub>1 s # stk\"\n and F' = \"\\<lambda>s stk. aval a\\<^sub>2 s # stk\"], auto simp: apred_def)"], ["", "lemma bcomp_bcomp:\n \"\\<lbrakk>bcomp (b\\<^sub>1, f\\<^sub>1, i\\<^sub>1) @ bcomp (b\\<^sub>2, f\\<^sub>2, i\\<^sub>2) \\<Turnstile> cfs\\<box>;\n    \\<And>cfs. bcomp (b\\<^sub>1, f\\<^sub>1, i\\<^sub>1) \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n      bpred (b\\<^sub>1, f\\<^sub>1, i\\<^sub>1) (cfs ! 0) (cfs ! (length cfs - 1));\n    \\<And>cfs. bcomp (b\\<^sub>2, f\\<^sub>2, i\\<^sub>2) \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n      bpred (b\\<^sub>2, f\\<^sub>2, i\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - 1))\\<rbrakk> \\<Longrightarrow>\n  case cfs ! 0 of (pc, s, stk) \\<Rightarrow> pc = 0 \\<and> (bval b\\<^sub>1 s \\<noteq> f\\<^sub>1 \\<longrightarrow>\n    (\\<exists>k < length cfs. cfs ! k = (size (bcomp (b\\<^sub>1, f\\<^sub>1, i\\<^sub>1) @ bcomp (b\\<^sub>2, f\\<^sub>2, i\\<^sub>2)) +\n      (if bval b\\<^sub>2 s = f\\<^sub>2 then i\\<^sub>2 else 0), s, stk)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bcomp (b\\<^sub>1, f\\<^sub>1, i\\<^sub>1) @\n             bcomp (b\\<^sub>2, f\\<^sub>2, i\\<^sub>2)\n             \\<Turnstile> cfs\\<box>;\n     \\<And>cfs.\n        bcomp (b\\<^sub>1, f\\<^sub>1, i\\<^sub>1) \\<Turnstile>\n        cfs\\<box> \\<Longrightarrow>\n        bpred (b\\<^sub>1, f\\<^sub>1, i\\<^sub>1) (cfs ! 0)\n         (cfs ! (length cfs - 1));\n     \\<And>cfs.\n        bcomp (b\\<^sub>2, f\\<^sub>2, i\\<^sub>2) \\<Turnstile>\n        cfs\\<box> \\<Longrightarrow>\n        bpred (b\\<^sub>2, f\\<^sub>2, i\\<^sub>2) (cfs ! 0)\n         (cfs ! (length cfs - 1))\\<rbrakk>\n    \\<Longrightarrow> case cfs ! 0 of\n                      (pc, s, stk) \\<Rightarrow>\n                        pc = 0 \\<and>\n                        (bval b\\<^sub>1 s \\<noteq>\n                         f\\<^sub>1 \\<longrightarrow>\n                         (\\<exists>k<length cfs.\n                             cfs ! k =\n                             (size\n                               (bcomp (b\\<^sub>1, f\\<^sub>1, i\\<^sub>1) @\n                                bcomp (b\\<^sub>2, f\\<^sub>2, i\\<^sub>2)) +\n                              (if bval b\\<^sub>2 s = f\\<^sub>2\n                               then i\\<^sub>2 else 0),\n                              s, stk)))", "by (clarify, rule conjI, simp add: execl_all_def, rule impI, subst (asm) append_Nil2\n [symmetric], drule execl_all_sub2 [where I = \"\\<lambda>s. if bval b\\<^sub>1 s = f\\<^sub>1 then i\\<^sub>1 else 0\"\n and I' = \"\\<lambda>s. if bval b\\<^sub>2 s = f\\<^sub>2 then i\\<^sub>2 else 0\" and Q = \"\\<lambda>s s'. s' = s\"\n and Q' = \"\\<lambda>s s'. s' = s\" and F = \"\\<lambda>s stk. stk\" and F' = \"\\<lambda>s stk. stk\"],\n auto simp: bpred_def)"], ["", "lemma acomp_correct [simplified, intro]:\n \"acomp a \\<Turnstile> cfs\\<box> \\<Longrightarrow> apred a (cfs ! 0) (cfs ! (length cfs - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acomp a \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n    apred a (cfs ! 0) (cfs ! (length cfs - 1))", "proof (induction a arbitrary: cfs, simp_all, frule_tac [3] acomp_acomp, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a1 a2 cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   acomp a1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   apred a1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           acomp a2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           apred a2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        acomp a1 @ acomp a2 @ [ADD] \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a1) + size (acomp a2), a,\n         aval a2 a # aval a1 a # b)\\<rbrakk>\n       \\<Longrightarrow> apred (Plus a1 a2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "fix a\\<^sub>1 a\\<^sub>2 cfs s stk k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a1 a2 cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   acomp a1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   apred a1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           acomp a2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           apred a2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        acomp a1 @ acomp a2 @ [ADD] \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a1) + size (acomp a2), a,\n         aval a2 a # aval a1 a # b)\\<rbrakk>\n       \\<Longrightarrow> apred (Plus a1 a2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "assume A: \"acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ [ADD] \\<Turnstile> cfs\\<box>\"\n    (is \"?ca\\<^sub>1 @ ?ca\\<^sub>2 @ ?i \\<Turnstile> _\\<box>\")"], ["proof (state)\nthis:\n  acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ [ADD] \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2 cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   acomp a1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   apred a1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           acomp a2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           apred a2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        acomp a1 @ acomp a2 @ [ADD] \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a1) + size (acomp a2), a,\n         aval a2 a # aval a1 a # b)\\<rbrakk>\n       \\<Longrightarrow> apred (Plus a1 a2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "assume B: \"k < length cfs\" and\n    C: \"cfs ! k = (size ?ca\\<^sub>1 + size ?ca\\<^sub>2, s, aval a\\<^sub>2 s # aval a\\<^sub>1 s # stk)\""], ["proof (state)\nthis:\n  k < length cfs\n  cfs ! k =\n  (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), s,\n   aval a\\<^sub>2 s # aval a\\<^sub>1 s # stk)\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2 cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   acomp a1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   apred a1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           acomp a2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           apred a2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        acomp a1 @ acomp a2 @ [ADD] \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a1) + size (acomp a2), a,\n         aval a2 a # aval a1 a # b)\\<rbrakk>\n       \\<Longrightarrow> apred (Plus a1 a2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "hence \"cfs ! Suc k = (size (?ca\\<^sub>1 @ ?ca\\<^sub>2 @ ?i), s, aval (Plus a\\<^sub>1 a\\<^sub>2) s # stk)\""], ["proof (prove)\nusing this:\n  k < length cfs\n  cfs ! k =\n  (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), s,\n   aval a\\<^sub>2 s # aval a\\<^sub>1 s # stk)\n\ngoal (1 subgoal):\n 1. cfs ! Suc k =\n    (size (acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ [ADD]), s,\n     aval (Plus a\\<^sub>1 a\\<^sub>2) s # stk)", "using A"], ["proof (prove)\nusing this:\n  k < length cfs\n  cfs ! k =\n  (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), s,\n   aval a\\<^sub>2 s # aval a\\<^sub>1 s # stk)\n  acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ [ADD] \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. cfs ! Suc k =\n    (size (acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ [ADD]), s,\n     aval (Plus a\\<^sub>1 a\\<^sub>2) s # stk)", "by (insert execl_next [of \"?ca\\<^sub>1 @ ?ca\\<^sub>2 @ ?i\" cfs k],\n     simp add: execl_all_def, drule_tac impI, auto)"], ["proof (state)\nthis:\n  cfs ! Suc k =\n  (size (acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ [ADD]), s,\n   aval (Plus a\\<^sub>1 a\\<^sub>2) s # stk)\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2 cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   acomp a1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   apred a1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           acomp a2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           apred a2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        acomp a1 @ acomp a2 @ [ADD] \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a1) + size (acomp a2), a,\n         aval a2 a # aval a1 a # b)\\<rbrakk>\n       \\<Longrightarrow> apred (Plus a1 a2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "thus \"apred (Plus a\\<^sub>1 a\\<^sub>2) (0, s, stk) (cfs ! (length cfs - Suc 0))\""], ["proof (prove)\nusing this:\n  cfs ! Suc k =\n  (size (acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ [ADD]), s,\n   aval (Plus a\\<^sub>1 a\\<^sub>2) s # stk)\n\ngoal (1 subgoal):\n 1. apred (Plus a\\<^sub>1 a\\<^sub>2) (0, s, stk)\n     (cfs ! (length cfs - Suc 0))", "using A and B and C"], ["proof (prove)\nusing this:\n  cfs ! Suc k =\n  (size (acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ [ADD]), s,\n   aval (Plus a\\<^sub>1 a\\<^sub>2) s # stk)\n  acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ [ADD] \\<Turnstile> cfs\\<box>\n  k < length cfs\n  cfs ! k =\n  (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), s,\n   aval a\\<^sub>2 s # aval a\\<^sub>1 s # stk)\n\ngoal (1 subgoal):\n 1. apred (Plus a\\<^sub>1 a\\<^sub>2) (0, s, stk)\n     (cfs ! (length cfs - Suc 0))", "by (insert execl_last [of \"?ca\\<^sub>1 @ ?ca\\<^sub>2 @ ?i\" cfs \"Suc k\"],\n     simp add: execl_all_def apred_def, drule_tac impI, auto)"], ["proof (state)\nthis:\n  apred (Plus a\\<^sub>1 a\\<^sub>2) (0, s, stk) (cfs ! (length cfs - Suc 0))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bcomp_correct [simplified, intro]:\n \"\\<lbrakk>bcomp x \\<Turnstile> cfs\\<box>; 0 \\<le> snd (snd x)\\<rbrakk> \\<Longrightarrow> bpred x (cfs ! 0) (cfs ! (length cfs - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bcomp x \\<Turnstile> cfs\\<box>; 0 \\<le> snd (snd x)\\<rbrakk>\n    \\<Longrightarrow> bpred x (cfs ! 0) (cfs ! (length cfs - 1))", "proof (induction x arbitrary: cfs rule: bcomp.induct, simp_all add: Let_def,\n frule_tac [4] acomp_acomp, frule_tac [3] bcomp_bcomp, auto, force simp: bpred_def)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); \\<not> bval b\\<^sub>1 a\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); bval b\\<^sub>1 a; k < length cfs;\n        cfs ! k =\n        (size\n          (bcomp\n            (b\\<^sub>1, False,\n             size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n         size (bcomp (b\\<^sub>2, f, i)) +\n         (if bval b\\<^sub>2 a = f then i else 0),\n         a, b)\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "fix b\\<^sub>1 b\\<^sub>2 f i cfs s stk"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); \\<not> bval b\\<^sub>1 a\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); bval b\\<^sub>1 a; k < length cfs;\n        cfs ! k =\n        (size\n          (bcomp\n            (b\\<^sub>1, False,\n             size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n         size (bcomp (b\\<^sub>2, f, i)) +\n         (if bval b\\<^sub>2 a = f then i else 0),\n         a, b)\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "assume A: \"bcomp (b\\<^sub>1, False, size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n    bcomp (b\\<^sub>2, f, i) \\<Turnstile> cfs\\<box>\"\n    (is \"bcomp (_, _, ?n + ?i) @ ?cb \\<Turnstile> _\\<box>\")"], ["proof (state)\nthis:\n  bcomp\n   (b\\<^sub>1, False,\n    size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n  bcomp (b\\<^sub>2, f, i)\n  \\<Turnstile> cfs\\<box>\n\ngoal (3 subgoals):\n 1. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); \\<not> bval b\\<^sub>1 a\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); bval b\\<^sub>1 a; k < length cfs;\n        cfs ! k =\n        (size\n          (bcomp\n            (b\\<^sub>1, False,\n             size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n         size (bcomp (b\\<^sub>2, f, i)) +\n         (if bval b\\<^sub>2 a = f then i else 0),\n         a, b)\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "moreover"], ["proof (state)\nthis:\n  bcomp\n   (b\\<^sub>1, False,\n    size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n  bcomp (b\\<^sub>2, f, i)\n  \\<Turnstile> cfs\\<box>\n\ngoal (3 subgoals):\n 1. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); \\<not> bval b\\<^sub>1 a\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); bval b\\<^sub>1 a; k < length cfs;\n        cfs ! k =\n        (size\n          (bcomp\n            (b\\<^sub>1, False,\n             size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n         size (bcomp (b\\<^sub>2, f, i)) +\n         (if bval b\\<^sub>2 a = f then i else 0),\n         a, b)\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "assume B: \"cfs ! 0 = (0, s, stk)\" and\n   \"\\<And>cb cfs. \\<lbrakk>cb = ?cb; bcomp (b\\<^sub>1, False, ?n + ?i) \\<Turnstile> cfs\\<box>\\<rbrakk> \\<Longrightarrow>\n      bpred (b\\<^sub>1, False, ?n + ?i) (cfs ! 0) (cfs ! (length cfs - Suc 0))\""], ["proof (state)\nthis:\n  cfs ! 0 = (0, s, stk)\n  \\<lbrakk>?cb = bcomp (b\\<^sub>2, f, i);\n   bcomp\n    (b\\<^sub>1, False,\n     size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n   \\<Turnstile> ?cfs\\<box>\\<rbrakk>\n  \\<Longrightarrow> bpred\n                     (b\\<^sub>1, False,\n                      size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n                     (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))\n\ngoal (3 subgoals):\n 1. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); \\<not> bval b\\<^sub>1 a\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); bval b\\<^sub>1 a; k < length cfs;\n        cfs ! k =\n        (size\n          (bcomp\n            (b\\<^sub>1, False,\n             size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n         size (bcomp (b\\<^sub>2, f, i)) +\n         (if bval b\\<^sub>2 a = f then i else 0),\n         a, b)\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "ultimately"], ["proof (chain)\npicking this:\n  bcomp\n   (b\\<^sub>1, False,\n    size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n  bcomp (b\\<^sub>2, f, i)\n  \\<Turnstile> cfs\\<box>\n  cfs ! 0 = (0, s, stk)\n  \\<lbrakk>?cb = bcomp (b\\<^sub>2, f, i);\n   bcomp\n    (b\\<^sub>1, False,\n     size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n   \\<Turnstile> ?cfs\\<box>\\<rbrakk>\n  \\<Longrightarrow> bpred\n                     (b\\<^sub>1, False,\n                      size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n                     (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))", "have \"\\<exists>k < length cfs. bpred (b\\<^sub>1, False, ?n + ?i)\n    (off [] (cfs ! 0)) (off [] (cfs ! k))\""], ["proof (prove)\nusing this:\n  bcomp\n   (b\\<^sub>1, False,\n    size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n  bcomp (b\\<^sub>2, f, i)\n  \\<Turnstile> cfs\\<box>\n  cfs ! 0 = (0, s, stk)\n  \\<lbrakk>?cb = bcomp (b\\<^sub>2, f, i);\n   bcomp\n    (b\\<^sub>1, False,\n     size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n   \\<Turnstile> ?cfs\\<box>\\<rbrakk>\n  \\<Longrightarrow> bpred\n                     (b\\<^sub>1, False,\n                      size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n                     (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))\n\ngoal (1 subgoal):\n 1. \\<exists>k<length cfs.\n       bpred\n        (b\\<^sub>1, False,\n         size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n        (off [] (cfs ! 0)) (off [] (cfs ! k))", "by (rule_tac execl_all_sub, auto simp: execl_all_def)"], ["proof (state)\nthis:\n  \\<exists>k<length cfs.\n     bpred\n      (b\\<^sub>1, False,\n       size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n      (off [] (cfs ! 0)) (off [] (cfs ! k))\n\ngoal (3 subgoals):\n 1. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); \\<not> bval b\\<^sub>1 a\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); bval b\\<^sub>1 a; k < length cfs;\n        cfs ! k =\n        (size\n          (bcomp\n            (b\\<^sub>1, False,\n             size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n         size (bcomp (b\\<^sub>2, f, i)) +\n         (if bval b\\<^sub>2 a = f then i else 0),\n         a, b)\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "moreover"], ["proof (state)\nthis:\n  \\<exists>k<length cfs.\n     bpred\n      (b\\<^sub>1, False,\n       size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n      (off [] (cfs ! 0)) (off [] (cfs ! k))\n\ngoal (3 subgoals):\n 1. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); \\<not> bval b\\<^sub>1 a\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); bval b\\<^sub>1 a; k < length cfs;\n        cfs ! k =\n        (size\n          (bcomp\n            (b\\<^sub>1, False,\n             size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n         size (bcomp (b\\<^sub>2, f, i)) +\n         (if bval b\\<^sub>2 a = f then i else 0),\n         a, b)\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "assume C: \"\\<not> bval b\\<^sub>1 s\""], ["proof (state)\nthis:\n  \\<not> bval b\\<^sub>1 s\n\ngoal (3 subgoals):\n 1. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); \\<not> bval b\\<^sub>1 a\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); bval b\\<^sub>1 a; k < length cfs;\n        cfs ! k =\n        (size\n          (bcomp\n            (b\\<^sub>1, False,\n             size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n         size (bcomp (b\\<^sub>2, f, i)) +\n         (if bval b\\<^sub>2 a = f then i else 0),\n         a, b)\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>k<length cfs.\n     bpred\n      (b\\<^sub>1, False,\n       size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n      (off [] (cfs ! 0)) (off [] (cfs ! k))\n  \\<not> bval b\\<^sub>1 s", "obtain k where D: \"k < length cfs\" and\n    E: \"cfs ! k = (size (bcomp (b\\<^sub>1, False, ?n + ?i)) + ?n + ?i, s, stk)\""], ["proof (prove)\nusing this:\n  \\<exists>k<length cfs.\n     bpred\n      (b\\<^sub>1, False,\n       size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n      (off [] (cfs ! 0)) (off [] (cfs ! k))\n  \\<not> bval b\\<^sub>1 s\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k < length cfs;\n         cfs ! k =\n         (size\n           (bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n          size (bcomp (b\\<^sub>2, f, i)) +\n          (if f then 0 else i),\n          s, stk)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using B"], ["proof (prove)\nusing this:\n  \\<exists>k<length cfs.\n     bpred\n      (b\\<^sub>1, False,\n       size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n      (off [] (cfs ! 0)) (off [] (cfs ! k))\n  \\<not> bval b\\<^sub>1 s\n  cfs ! 0 = (0, s, stk)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k < length cfs;\n         cfs ! k =\n         (size\n           (bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n          size (bcomp (b\\<^sub>2, f, i)) +\n          (if f then 0 else i),\n          s, stk)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: bpred_def)"], ["proof (state)\nthis:\n  k < length cfs\n  cfs ! k =\n  (size\n    (bcomp\n      (b\\<^sub>1, False,\n       size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n   size (bcomp (b\\<^sub>2, f, i)) +\n   (if f then 0 else i),\n   s, stk)\n\ngoal (3 subgoals):\n 1. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); \\<not> bval b\\<^sub>1 a\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); bval b\\<^sub>1 a; k < length cfs;\n        cfs ! k =\n        (size\n          (bcomp\n            (b\\<^sub>1, False,\n             size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n         size (bcomp (b\\<^sub>2, f, i)) +\n         (if bval b\\<^sub>2 a = f then i else 0),\n         a, b)\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "assume \"0 \\<le> i\""], ["proof (state)\nthis:\n  0 \\<le> i\n\ngoal (3 subgoals):\n 1. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); \\<not> bval b\\<^sub>1 a\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); bval b\\<^sub>1 a; k < length cfs;\n        cfs ! k =\n        (size\n          (bcomp\n            (b\\<^sub>1, False,\n             size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n         size (bcomp (b\\<^sub>2, f, i)) +\n         (if bval b\\<^sub>2 a = f then i else 0),\n         a, b)\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "thus \"bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, s, stk) (cfs ! (length cfs - Suc 0))\""], ["proof (prove)\nusing this:\n  0 \\<le> i\n\ngoal (1 subgoal):\n 1. bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, s, stk)\n     (cfs ! (length cfs - Suc 0))", "using A and C and D and E"], ["proof (prove)\nusing this:\n  0 \\<le> i\n  bcomp\n   (b\\<^sub>1, False,\n    size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n  bcomp (b\\<^sub>2, f, i)\n  \\<Turnstile> cfs\\<box>\n  \\<not> bval b\\<^sub>1 s\n  k < length cfs\n  cfs ! k =\n  (size\n    (bcomp\n      (b\\<^sub>1, False,\n       size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n   size (bcomp (b\\<^sub>2, f, i)) +\n   (if f then 0 else i),\n   s, stk)\n\ngoal (1 subgoal):\n 1. bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, s, stk)\n     (cfs ! (length cfs - Suc 0))", "by (insert execl_last, auto simp:\n     execl_all_def bpred_def Let_def)"], ["proof (state)\nthis:\n  bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, s, stk)\n   (cfs ! (length cfs - Suc 0))\n\ngoal (2 subgoals):\n 1. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); bval b\\<^sub>1 a; k < length cfs;\n        cfs ! k =\n        (size\n          (bcomp\n            (b\\<^sub>1, False,\n             size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n         size (bcomp (b\\<^sub>2, f, i)) +\n         (if bval b\\<^sub>2 a = f then i else 0),\n         a, b)\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); bval b\\<^sub>1 a; k < length cfs;\n        cfs ! k =\n        (size\n          (bcomp\n            (b\\<^sub>1, False,\n             size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n         size (bcomp (b\\<^sub>2, f, i)) +\n         (if bval b\\<^sub>2 a = f then i else 0),\n         a, b)\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "fix b\\<^sub>1 b\\<^sub>2 f i cfs s stk k"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); bval b\\<^sub>1 a; k < length cfs;\n        cfs ! k =\n        (size\n          (bcomp\n            (b\\<^sub>1, False,\n             size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n         size (bcomp (b\\<^sub>2, f, i)) +\n         (if bval b\\<^sub>2 a = f then i else 0),\n         a, b)\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "assume A: \"bcomp (b\\<^sub>1, False, size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n    bcomp (b\\<^sub>2, f, i) \\<Turnstile> cfs\\<box>\"\n    (is \"?cb\\<^sub>1 @ ?cb\\<^sub>2 \\<Turnstile> _\\<box>\")"], ["proof (state)\nthis:\n  bcomp\n   (b\\<^sub>1, False,\n    size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n  bcomp (b\\<^sub>2, f, i)\n  \\<Turnstile> cfs\\<box>\n\ngoal (2 subgoals):\n 1. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); bval b\\<^sub>1 a; k < length cfs;\n        cfs ! k =\n        (size\n          (bcomp\n            (b\\<^sub>1, False,\n             size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n         size (bcomp (b\\<^sub>2, f, i)) +\n         (if bval b\\<^sub>2 a = f then i else 0),\n         a, b)\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "assume \"k < length cfs\" and \"0 \\<le> i\" and \"bval b\\<^sub>1 s\" and\n   \"cfs ! k = (size ?cb\\<^sub>1 + size ?cb\\<^sub>2 + (if bval b\\<^sub>2 s = f then i else 0), s, stk)\""], ["proof (state)\nthis:\n  k < length cfs\n  0 \\<le> i\n  bval b\\<^sub>1 s\n  cfs ! k =\n  (size\n    (bcomp\n      (b\\<^sub>1, False,\n       size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n   size (bcomp (b\\<^sub>2, f, i)) +\n   (if bval b\\<^sub>2 s = f then i else 0),\n   s, stk)\n\ngoal (2 subgoals):\n 1. \\<And>b\\<^sub>1 b\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>\\<And>cfs.\n                   bcomp (b\\<^sub>2, f, i) \\<Turnstile>\n                   cfs\\<box> \\<Longrightarrow>\n                   bpred (b\\<^sub>2, f, i) (cfs ! 0)\n                    (cfs ! (length cfs - Suc 0));\n        \\<And>x cfs.\n           \\<lbrakk>x = bcomp (b\\<^sub>2, f, i);\n            bcomp\n             (b\\<^sub>1, False,\n              size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))\n            \\<Turnstile> cfs\\<box>\\<rbrakk>\n           \\<Longrightarrow> bpred\n                              (b\\<^sub>1, False,\n                               size (bcomp (b\\<^sub>2, f, i)) +\n                               (if f then 0 else i))\n                              (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp\n         (b\\<^sub>1, False,\n          size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n        bcomp (b\\<^sub>2, f, i)\n        \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); bval b\\<^sub>1 a; k < length cfs;\n        cfs ! k =\n        (size\n          (bcomp\n            (b\\<^sub>1, False,\n             size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n         size (bcomp (b\\<^sub>2, f, i)) +\n         (if bval b\\<^sub>2 a = f then i else 0),\n         a, b)\\<rbrakk>\n       \\<Longrightarrow> bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "thus \"bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, s, stk) (cfs ! (length cfs - Suc 0))\""], ["proof (prove)\nusing this:\n  k < length cfs\n  0 \\<le> i\n  bval b\\<^sub>1 s\n  cfs ! k =\n  (size\n    (bcomp\n      (b\\<^sub>1, False,\n       size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n   size (bcomp (b\\<^sub>2, f, i)) +\n   (if bval b\\<^sub>2 s = f then i else 0),\n   s, stk)\n\ngoal (1 subgoal):\n 1. bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, s, stk)\n     (cfs ! (length cfs - Suc 0))", "using A"], ["proof (prove)\nusing this:\n  k < length cfs\n  0 \\<le> i\n  bval b\\<^sub>1 s\n  cfs ! k =\n  (size\n    (bcomp\n      (b\\<^sub>1, False,\n       size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i))) +\n   size (bcomp (b\\<^sub>2, f, i)) +\n   (if bval b\\<^sub>2 s = f then i else 0),\n   s, stk)\n  bcomp\n   (b\\<^sub>1, False,\n    size (bcomp (b\\<^sub>2, f, i)) + (if f then 0 else i)) @\n  bcomp (b\\<^sub>2, f, i)\n  \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, s, stk)\n     (cfs ! (length cfs - Suc 0))", "by (insert execl_last, auto simp: execl_all_def bpred_def Let_def)"], ["proof (state)\nthis:\n  bpred (And b\\<^sub>1 b\\<^sub>2, f, i) (0, s, stk)\n   (cfs ! (length cfs - Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "fix a\\<^sub>1 a\\<^sub>2 f i cfs s stk k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "assume A: \"acomp a\\<^sub>1 @ acomp a\\<^sub>2 @\n    (if f then [JMPLESS i] else [JMPGE i]) \\<Turnstile> cfs\\<box>\"\n    (is \"?ca\\<^sub>1 @ ?ca\\<^sub>2 @ ?i \\<Turnstile> _\\<box>\")"], ["proof (state)\nthis:\n  acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n  \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "assume B: \"k < length cfs\" and\n    C: \"cfs ! k = (size ?ca\\<^sub>1 + size ?ca\\<^sub>2, s, aval a\\<^sub>2 s # aval a\\<^sub>1 s # stk)\""], ["proof (state)\nthis:\n  k < length cfs\n  cfs ! k =\n  (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), s,\n   aval a\\<^sub>2 s # aval a\\<^sub>1 s # stk)\n\ngoal (1 subgoal):\n 1. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "hence D: \"cfs ! Suc k =\n    (size (?ca\\<^sub>1 @ ?ca\\<^sub>2 @ ?i) + (if bval (Less a\\<^sub>1 a\\<^sub>2) s = f then i else 0), s, stk)\""], ["proof (prove)\nusing this:\n  k < length cfs\n  cfs ! k =\n  (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), s,\n   aval a\\<^sub>2 s # aval a\\<^sub>1 s # stk)\n\ngoal (1 subgoal):\n 1. cfs ! Suc k =\n    (size\n      (acomp a\\<^sub>1 @\n       acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])) +\n     (if bval (Less a\\<^sub>1 a\\<^sub>2) s = f then i else 0),\n     s, stk)", "using A"], ["proof (prove)\nusing this:\n  k < length cfs\n  cfs ! k =\n  (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), s,\n   aval a\\<^sub>2 s # aval a\\<^sub>1 s # stk)\n  acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n  \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. cfs ! Suc k =\n    (size\n      (acomp a\\<^sub>1 @\n       acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])) +\n     (if bval (Less a\\<^sub>1 a\\<^sub>2) s = f then i else 0),\n     s, stk)", "by (insert execl_next [of \"?ca\\<^sub>1 @ ?ca\\<^sub>2 @ ?i\" cfs k],\n     simp add: execl_all_def, drule_tac impI, auto split: if_split_asm)"], ["proof (state)\nthis:\n  cfs ! Suc k =\n  (size\n    (acomp a\\<^sub>1 @\n     acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])) +\n   (if bval (Less a\\<^sub>1 a\\<^sub>2) s = f then i else 0),\n   s, stk)\n\ngoal (1 subgoal):\n 1. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "assume \"0 \\<le> i\""], ["proof (state)\nthis:\n  0 \\<le> i\n\ngoal (1 subgoal):\n 1. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "with A and B and C and D"], ["proof (chain)\npicking this:\n  acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n  \\<Turnstile> cfs\\<box>\n  k < length cfs\n  cfs ! k =\n  (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), s,\n   aval a\\<^sub>2 s # aval a\\<^sub>1 s # stk)\n  cfs ! Suc k =\n  (size\n    (acomp a\\<^sub>1 @\n     acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])) +\n   (if bval (Less a\\<^sub>1 a\\<^sub>2) s = f then i else 0),\n   s, stk)\n  0 \\<le> i", "have \"length cfs - 1 = Suc k\""], ["proof (prove)\nusing this:\n  acomp a\\<^sub>1 @ acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n  \\<Turnstile> cfs\\<box>\n  k < length cfs\n  cfs ! k =\n  (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), s,\n   aval a\\<^sub>2 s # aval a\\<^sub>1 s # stk)\n  cfs ! Suc k =\n  (size\n    (acomp a\\<^sub>1 @\n     acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])) +\n   (if bval (Less a\\<^sub>1 a\\<^sub>2) s = f then i else 0),\n   s, stk)\n  0 \\<le> i\n\ngoal (1 subgoal):\n 1. length cfs - 1 = Suc k", "by (rule_tac execl_last, auto simp: execl_all_def, simp split: if_split_asm)"], ["proof (state)\nthis:\n  length cfs - 1 = Suc k\n\ngoal (1 subgoal):\n 1. \\<And>a\\<^sub>1 a\\<^sub>2 f i cfs a b k.\n       \\<lbrakk>acomp a\\<^sub>1 @\n                acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])\n                \\<Turnstile> cfs\\<box>;\n        0 \\<le> i; cfs ! 0 = (0, a, b); k < length cfs;\n        cfs ! k =\n        (size (acomp a\\<^sub>1) + size (acomp a\\<^sub>2), a,\n         aval a\\<^sub>2 a # aval a\\<^sub>1 a # b)\\<rbrakk>\n       \\<Longrightarrow> bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))", "thus \"bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, s, stk) (cfs ! (length cfs - Suc 0))\""], ["proof (prove)\nusing this:\n  length cfs - 1 = Suc k\n\ngoal (1 subgoal):\n 1. bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, s, stk)\n     (cfs ! (length cfs - Suc 0))", "using D"], ["proof (prove)\nusing this:\n  length cfs - 1 = Suc k\n  cfs ! Suc k =\n  (size\n    (acomp a\\<^sub>1 @\n     acomp a\\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])) +\n   (if bval (Less a\\<^sub>1 a\\<^sub>2) s = f then i else 0),\n   s, stk)\n\ngoal (1 subgoal):\n 1. bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, s, stk)\n     (cfs ! (length cfs - Suc 0))", "by (simp add: bpred_def)"], ["proof (state)\nthis:\n  bpred (Less a\\<^sub>1 a\\<^sub>2, f, i) (0, s, stk)\n   (cfs ! (length cfs - Suc 0))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n\\null\n\nNext, lemmas @{text bcomp_ccomp}, @{text ccomp_ccomp} are derived to reproduce the execution of a\ncompiled boolean expression followed by a compiled command and of two consecutive compiled commands,\nrespectively (possibly generated by @{const ccomp}). Then, compiler correctness for loops and for\nall commands is proven in lemmas @{text while_correct} and @{text ccomp_correct}, respectively by\ninduction over the length of the list of configurations and by structural induction over commands.\n\n\\null\n\\<close>"], ["", "lemma bcomp_ccomp:\n \"\\<lbrakk>bcomp (b, f, i) @ ccomp c @ P \\<Turnstile> cfs\\<box>; 0 \\<le> i;\n    \\<And>cfs. ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow> cpred c (cfs ! 0) (cfs ! (length cfs - 1))\\<rbrakk> \\<Longrightarrow>\n  case cfs ! 0 of (pc, s, stk) \\<Rightarrow> pc = 0 \\<and> (bval b s \\<noteq> f \\<longrightarrow>\n    (\\<exists>k < length cfs. case cfs ! k of (pc', s', stk') \\<Rightarrow>\n      pc' = size (bcomp (b, f, i) @ ccomp c) \\<and> (c, s) \\<Rightarrow> s' \\<and> stk' = stk))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bcomp (b, f, i) @ ccomp c @ P \\<Turnstile> cfs\\<box>;\n     0 \\<le> i;\n     \\<And>cfs.\n        ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n        cpred c (cfs ! 0) (cfs ! (length cfs - 1))\\<rbrakk>\n    \\<Longrightarrow> case cfs ! 0 of\n                      (pc, s, stk) \\<Rightarrow>\n                        pc = 0 \\<and>\n                        (bval b s \\<noteq> f \\<longrightarrow>\n                         (\\<exists>k<length cfs.\n                             case cfs ! k of\n                             (pc', s', stk') \\<Rightarrow>\n                               pc' = size (bcomp (b, f, i) @ ccomp c) \\<and>\n                               (c, s) \\<Rightarrow> s' \\<and> stk' = stk))", "by (clarify, rule conjI, simp add: execl_all_def, rule impI, drule execl_all_sub2\n [where I = \"\\<lambda>s. if bval b s = f then i else 0\" and I' = \"\\<lambda>s. 0\"\n and Q = \"\\<lambda>s s'. s' = s\" and Q' = \"\\<lambda>s s'. (c, s) \\<Rightarrow> s'\" and F = \"\\<lambda>s stk. stk\"\n and F' = \"\\<lambda>s stk. stk\"], insert bcomp_correct [of \"(b, f, i)\"],\n auto simp: bpred_def cpred_def)"], ["", "lemma ccomp_ccomp:\n \"\\<lbrakk>ccomp c\\<^sub>1 @ ccomp c\\<^sub>2 \\<Turnstile> cfs\\<box>;\n    \\<And>cfs. ccomp c\\<^sub>1 \\<Turnstile> cfs\\<box> \\<Longrightarrow> cpred c\\<^sub>1 (cfs ! 0) (cfs ! (length cfs - 1));\n    \\<And>cfs. ccomp c\\<^sub>2 \\<Turnstile> cfs\\<box> \\<Longrightarrow> cpred c\\<^sub>2 (cfs ! 0) (cfs ! (length cfs - 1))\\<rbrakk> \\<Longrightarrow>\n  case cfs ! 0 of (pc, s, stk) \\<Rightarrow> pc = 0 \\<and> (\\<exists>k < length cfs. \\<exists>t.\n    case cfs ! k of (pc', s', stk') \\<Rightarrow> pc' = size (ccomp c\\<^sub>1 @ ccomp c\\<^sub>2) \\<and>\n      (c\\<^sub>1, s) \\<Rightarrow> t \\<and> (c\\<^sub>2, t) \\<Rightarrow> s' \\<and> stk' = stk)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ccomp c\\<^sub>1 @ ccomp c\\<^sub>2 \\<Turnstile> cfs\\<box>;\n     \\<And>cfs.\n        ccomp c\\<^sub>1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n        cpred c\\<^sub>1 (cfs ! 0) (cfs ! (length cfs - 1));\n     \\<And>cfs.\n        ccomp c\\<^sub>2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n        cpred c\\<^sub>2 (cfs ! 0) (cfs ! (length cfs - 1))\\<rbrakk>\n    \\<Longrightarrow> case cfs ! 0 of\n                      (pc, s, stk) \\<Rightarrow>\n                        pc = 0 \\<and>\n                        (\\<exists>k<length cfs.\n                            \\<exists>t.\n                               case cfs ! k of\n                               (pc', s', stk') \\<Rightarrow>\n                                 pc' =\n                                 size\n                                  (ccomp c\\<^sub>1 @ ccomp c\\<^sub>2) \\<and>\n                                 (c\\<^sub>1, s) \\<Rightarrow> t \\<and>\n                                 (c\\<^sub>2, t) \\<Rightarrow> s' \\<and>\n                                 stk' = stk)", "by (subst (asm) append_Nil2 [symmetric], drule execl_all_sub2 [where I = \"\\<lambda>s. 0\"\n and I' = \"\\<lambda>s. 0\" and Q = \"\\<lambda>s s'. (c\\<^sub>1, s) \\<Rightarrow> s'\" and Q' = \"\\<lambda>s s'. (c\\<^sub>2, s) \\<Rightarrow> s'\"\n and F = \"\\<lambda>s stk. stk\" and F' = \"\\<lambda>s stk. stk\"], auto simp: cpred_def, force)"], ["", "lemma while_correct [simplified, intro]:\n \"\\<lbrakk>bcomp (b, False, size (ccomp c) + 1) @ ccomp c @\n    [JMP (- (size (bcomp (b, False, size (ccomp c) + 1) @ ccomp c) + 1))] \\<Turnstile> cfs\\<box>;\n    \\<And>cfs. ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow> cpred c (cfs ! 0) (cfs ! (length cfs - 1))\\<rbrakk> \\<Longrightarrow>\n  cpred (WHILE b DO c) (cfs ! 0) (cfs ! (length cfs - Suc 0))\"\n  (is \"\\<lbrakk>?cb @ ?cc @ [JMP (- ?n)] \\<Turnstile> _\\<box>; \\<And>_. _ \\<Longrightarrow> _\\<rbrakk> \\<Longrightarrow> ?Q cfs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bcomp (b, False, size (ccomp c) + 1) @\n             ccomp c @\n             [JMP (- (size\n                       (bcomp (b, False, size (ccomp c) + 1) @ ccomp c) +\n                      1))]\n             \\<Turnstile> cfs\\<box>;\n     \\<And>cfs.\n        ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n        cpred c (cfs ! 0) (cfs ! (length cfs - 1))\\<rbrakk>\n    \\<Longrightarrow> cpred (WHILE b DO c) (cfs ! 0)\n                       (cfs ! (length cfs - Suc 0))", "proof (induction cfs rule: length_induct, frule bcomp_ccomp, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs a ba.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); \\<not> bval b a\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))\n 2. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "fix cfs s stk"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs a ba.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); \\<not> bval b a\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))\n 2. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "assume A: \"?cb @ ?cc @ [JMP (- size ?cb - size ?cc - 1)] \\<Turnstile> cfs\\<box>\""], ["proof (state)\nthis:\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> cfs\\<box>\n\ngoal (2 subgoals):\n 1. \\<And>xs a ba.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); \\<not> bval b a\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))\n 2. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "hence \"\\<exists>k < length cfs. bpred (b, False, size (ccomp c) + 1)\n    (off [] (cfs ! 0)) (off [] (cfs ! k))\""], ["proof (prove)\nusing this:\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. \\<exists>k<length cfs.\n       bpred (b, False, size (ccomp c) + 1) (off [] (cfs ! 0))\n        (off [] (cfs ! k))", "by (rule_tac execl_all_sub, auto simp: execl_all_def)"], ["proof (state)\nthis:\n  \\<exists>k<length cfs.\n     bpred (b, False, size (ccomp c) + 1) (off [] (cfs ! 0))\n      (off [] (cfs ! k))\n\ngoal (2 subgoals):\n 1. \\<And>xs a ba.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); \\<not> bval b a\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))\n 2. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "moreover"], ["proof (state)\nthis:\n  \\<exists>k<length cfs.\n     bpred (b, False, size (ccomp c) + 1) (off [] (cfs ! 0))\n      (off [] (cfs ! k))\n\ngoal (2 subgoals):\n 1. \\<And>xs a ba.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); \\<not> bval b a\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))\n 2. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "assume B: \"\\<not> bval b s\" and \"cfs ! 0 = (0, s, stk)\""], ["proof (state)\nthis:\n  \\<not> bval b s\n  cfs ! 0 = (0, s, stk)\n\ngoal (2 subgoals):\n 1. \\<And>xs a ba.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); \\<not> bval b a\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))\n 2. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>k<length cfs.\n     bpred (b, False, size (ccomp c) + 1) (off [] (cfs ! 0))\n      (off [] (cfs ! k))\n  \\<not> bval b s\n  cfs ! 0 = (0, s, stk)", "obtain k where \"k < length cfs\" and \"cfs ! k = (?n, s, stk)\""], ["proof (prove)\nusing this:\n  \\<exists>k<length cfs.\n     bpred (b, False, size (ccomp c) + 1) (off [] (cfs ! 0))\n      (off [] (cfs ! k))\n  \\<not> bval b s\n  cfs ! 0 = (0, s, stk)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k < length cfs;\n         cfs ! k =\n         (size (bcomp (b, False, size (ccomp c) + 1) @ ccomp c) + 1, s,\n          stk)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: bpred_def)"], ["proof (state)\nthis:\n  k < length cfs\n  cfs ! k =\n  (size (bcomp (b, False, size (ccomp c) + 1) @ ccomp c) + 1, s, stk)\n\ngoal (2 subgoals):\n 1. \\<And>xs a ba.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); \\<not> bval b a\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))\n 2. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "thus \"cpred (WHILE b DO c) (0, s, stk) (cfs ! (length cfs - Suc 0))\""], ["proof (prove)\nusing this:\n  k < length cfs\n  cfs ! k =\n  (size (bcomp (b, False, size (ccomp c) + 1) @ ccomp c) + 1, s, stk)\n\ngoal (1 subgoal):\n 1. cpred (WHILE b DO c) (0, s, stk) (cfs ! (length cfs - Suc 0))", "using A and B"], ["proof (prove)\nusing this:\n  k < length cfs\n  cfs ! k =\n  (size (bcomp (b, False, size (ccomp c) + 1) @ ccomp c) + 1, s, stk)\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> cfs\\<box>\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. cpred (WHILE b DO c) (0, s, stk) (cfs ! (length cfs - Suc 0))", "by (insert execl_last, auto simp: execl_all_def cpred_def Let_def)"], ["proof (state)\nthis:\n  cpred (WHILE b DO c) (0, s, stk) (cfs ! (length cfs - Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "fix cfs s s' stk k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "assume A: \"?cb @ ?cc @ [JMP (- size ?cb - size ?cc - 1)] \\<Turnstile> cfs\\<box>\"\n    (is \"?P \\<Turnstile> _\\<box>\")"], ["proof (state)\nthis:\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "assume B: \"k < length cfs\" and \"cfs ! k = (size ?cb + size ?cc, s', stk)\""], ["proof (state)\nthis:\n  k < length cfs\n  cfs ! k =\n  (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), s', stk)\n\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "moreover"], ["proof (state)\nthis:\n  k < length cfs\n  cfs ! k =\n  (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), s', stk)\n\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "from this"], ["proof (chain)\npicking this:\n  k < length cfs\n  cfs ! k =\n  (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), s', stk)", "have C: \"k \\<noteq> length cfs - 1\""], ["proof (prove)\nusing this:\n  k < length cfs\n  cfs ! k =\n  (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), s', stk)\n\ngoal (1 subgoal):\n 1. k \\<noteq> length cfs - 1", "using A"], ["proof (prove)\nusing this:\n  k < length cfs\n  cfs ! k =\n  (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), s', stk)\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. k \\<noteq> length cfs - 1", "by (rule_tac notI, simp add: execl_all_def)"], ["proof (state)\nthis:\n  k \\<noteq> length cfs - 1\n\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "ultimately"], ["proof (chain)\npicking this:\n  k < length cfs\n  cfs ! k =\n  (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), s', stk)\n  k \\<noteq> length cfs - 1", "have D: \"cfs ! Suc k = (0, s', stk)\""], ["proof (prove)\nusing this:\n  k < length cfs\n  cfs ! k =\n  (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), s', stk)\n  k \\<noteq> length cfs - 1\n\ngoal (1 subgoal):\n 1. cfs ! Suc k = (0, s', stk)", "using A"], ["proof (prove)\nusing this:\n  k < length cfs\n  cfs ! k =\n  (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), s', stk)\n  k \\<noteq> length cfs - 1\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. cfs ! Suc k = (0, s', stk)", "by (insert execl_next [of ?P cfs k], auto simp: execl_all_def)"], ["proof (state)\nthis:\n  cfs ! Suc k = (0, s', stk)\n\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "moreover"], ["proof (state)\nthis:\n  cfs ! Suc k = (0, s', stk)\n\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "have E: \"Suc k + (length (drop (Suc k) cfs) - 1) = length cfs - 1\"\n    (is \"Suc k + (length ?cfs - 1) = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc k + (length (drop (Suc k) cfs) - 1) = length cfs - 1", "using B and C"], ["proof (prove)\nusing this:\n  k < length cfs\n  k \\<noteq> length cfs - 1\n\ngoal (1 subgoal):\n 1. Suc k + (length (drop (Suc k) cfs) - 1) = length cfs - 1", "by simp"], ["proof (state)\nthis:\n  Suc k + (length (drop (Suc k) cfs) - 1) = length cfs - 1\n\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "ultimately"], ["proof (chain)\npicking this:\n  cfs ! Suc k = (0, s', stk)\n  Suc k + (length (drop (Suc k) cfs) - 1) = length cfs - 1", "have \"?P \\<Turnstile> ?cfs\\<box>\""], ["proof (prove)\nusing this:\n  cfs ! Suc k = (0, s', stk)\n  Suc k + (length (drop (Suc k) cfs) - 1) = length cfs - 1\n\ngoal (1 subgoal):\n 1. bcomp (b, False, size (ccomp c) + 1) @\n    ccomp c @\n    [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) -\n          1)]\n    \\<Turnstile> drop (Suc k) cfs\\<box>", "using A and B and C"], ["proof (prove)\nusing this:\n  cfs ! Suc k = (0, s', stk)\n  Suc k + (length (drop (Suc k) cfs) - 1) = length cfs - 1\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> cfs\\<box>\n  k < length cfs\n  k \\<noteq> length cfs - 1\n\ngoal (1 subgoal):\n 1. bcomp (b, False, size (ccomp c) + 1) @\n    ccomp c @\n    [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) -\n          1)]\n    \\<Turnstile> drop (Suc k) cfs\\<box>", "by (auto simp: execl_all_def intro: execl_drop)"], ["proof (state)\nthis:\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> drop (Suc k) cfs\\<box>\n\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "moreover"], ["proof (state)\nthis:\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> drop (Suc k) cfs\\<box>\n\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "assume \"\\<forall>cfs'. length cfs' < length cfs \\<longrightarrow> ?P \\<Turnstile> cfs'\\<box> \\<longrightarrow> ?Q cfs'\""], ["proof (state)\nthis:\n  \\<forall>cfs'.\n     length cfs' < length cfs \\<longrightarrow>\n     bcomp (b, False, size (ccomp c) + 1) @\n     ccomp c @\n     [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) -\n           1)]\n     \\<Turnstile> cfs'\\<box> \\<longrightarrow>\n     cpred (WHILE b DO c) (cfs' ! 0) (cfs' ! (length cfs' - Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "hence \"length ?cfs < length cfs \\<longrightarrow> ?P \\<Turnstile> ?cfs\\<box> \\<longrightarrow> ?Q ?cfs\""], ["proof (prove)\nusing this:\n  \\<forall>cfs'.\n     length cfs' < length cfs \\<longrightarrow>\n     bcomp (b, False, size (ccomp c) + 1) @\n     ccomp c @\n     [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) -\n           1)]\n     \\<Turnstile> cfs'\\<box> \\<longrightarrow>\n     cpred (WHILE b DO c) (cfs' ! 0) (cfs' ! (length cfs' - Suc 0))\n\ngoal (1 subgoal):\n 1. length (drop (Suc k) cfs) < length cfs \\<longrightarrow>\n    bcomp (b, False, size (ccomp c) + 1) @\n    ccomp c @\n    [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) -\n          1)]\n    \\<Turnstile> drop (Suc k) cfs\\<box> \\<longrightarrow>\n    cpred (WHILE b DO c) (drop (Suc k) cfs ! 0)\n     (drop (Suc k) cfs ! (length (drop (Suc k) cfs) - Suc 0))", ".."], ["proof (state)\nthis:\n  length (drop (Suc k) cfs) < length cfs \\<longrightarrow>\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> drop (Suc k) cfs\\<box> \\<longrightarrow>\n  cpred (WHILE b DO c) (drop (Suc k) cfs ! 0)\n   (drop (Suc k) cfs ! (length (drop (Suc k) cfs) - Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "ultimately"], ["proof (chain)\npicking this:\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> drop (Suc k) cfs\\<box>\n  length (drop (Suc k) cfs) < length cfs \\<longrightarrow>\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> drop (Suc k) cfs\\<box> \\<longrightarrow>\n  cpred (WHILE b DO c) (drop (Suc k) cfs ! 0)\n   (drop (Suc k) cfs ! (length (drop (Suc k) cfs) - Suc 0))", "have \"cpred (WHILE b DO c) (cfs ! Suc k) (cfs ! (length cfs - 1))\""], ["proof (prove)\nusing this:\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> drop (Suc k) cfs\\<box>\n  length (drop (Suc k) cfs) < length cfs \\<longrightarrow>\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> drop (Suc k) cfs\\<box> \\<longrightarrow>\n  cpred (WHILE b DO c) (drop (Suc k) cfs ! 0)\n   (drop (Suc k) cfs ! (length (drop (Suc k) cfs) - Suc 0))\n\ngoal (1 subgoal):\n 1. cpred (WHILE b DO c) (cfs ! Suc k) (cfs ! (length cfs - 1))", "using B and C and E"], ["proof (prove)\nusing this:\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> drop (Suc k) cfs\\<box>\n  length (drop (Suc k) cfs) < length cfs \\<longrightarrow>\n  bcomp (b, False, size (ccomp c) + 1) @\n  ccomp c @\n  [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) - size (ccomp c) - 1)]\n  \\<Turnstile> drop (Suc k) cfs\\<box> \\<longrightarrow>\n  cpred (WHILE b DO c) (drop (Suc k) cfs ! 0)\n   (drop (Suc k) cfs ! (length (drop (Suc k) cfs) - Suc 0))\n  k < length cfs\n  k \\<noteq> length cfs - 1\n  Suc k + (length (drop (Suc k) cfs) - 1) = length cfs - 1\n\ngoal (1 subgoal):\n 1. cpred (WHILE b DO c) (cfs ! Suc k) (cfs ! (length cfs - 1))", "by simp"], ["proof (state)\nthis:\n  cpred (WHILE b DO c) (cfs ! Suc k) (cfs ! (length cfs - 1))\n\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "moreover"], ["proof (state)\nthis:\n  cpred (WHILE b DO c) (cfs ! Suc k) (cfs ! (length cfs - 1))\n\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "assume \"bval b s\" and \"(c, s) \\<Rightarrow> s'\""], ["proof (state)\nthis:\n  bval b s\n  (c, s) \\<Rightarrow> s'\n\ngoal (1 subgoal):\n 1. \\<And>xs a ba k aa.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   bcomp (b, False, size (ccomp c) + 1) @\n                   ccomp c @\n                   [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n                         size (ccomp c) -\n                         1)]\n                   \\<Turnstile> ys\\<box> \\<longrightarrow>\n                   cpred (WHILE b DO c) (ys ! 0) (ys ! (length ys - Suc 0));\n        bcomp (b, False, size (ccomp c) + 1) @\n        ccomp c @\n        [JMP (- size (bcomp (b, False, size (ccomp c) + 1)) -\n              size (ccomp c) -\n              1)]\n        \\<Turnstile> xs\\<box>;\n        \\<And>cfs.\n           ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        xs ! 0 = (0, a, ba); bval b a; k < length xs;\n        xs ! k =\n        (size (bcomp (b, False, size (ccomp c) + 1)) + size (ccomp c), aa,\n         ba);\n        (c, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (WHILE b DO c) (0, a, ba)\n                          (xs ! (length xs - Suc 0))", "ultimately"], ["proof (chain)\npicking this:\n  cpred (WHILE b DO c) (cfs ! Suc k) (cfs ! (length cfs - 1))\n  bval b s\n  (c, s) \\<Rightarrow> s'", "show \"cpred (WHILE b DO c) (0, s, stk) (cfs ! (length cfs - Suc 0))\""], ["proof (prove)\nusing this:\n  cpred (WHILE b DO c) (cfs ! Suc k) (cfs ! (length cfs - 1))\n  bval b s\n  (c, s) \\<Rightarrow> s'\n\ngoal (1 subgoal):\n 1. cpred (WHILE b DO c) (0, s, stk) (cfs ! (length cfs - Suc 0))", "using D"], ["proof (prove)\nusing this:\n  cpred (WHILE b DO c) (cfs ! Suc k) (cfs ! (length cfs - 1))\n  bval b s\n  (c, s) \\<Rightarrow> s'\n  cfs ! Suc k = (0, s', stk)\n\ngoal (1 subgoal):\n 1. cpred (WHILE b DO c) (0, s, stk) (cfs ! (length cfs - Suc 0))", "by (auto simp: cpred_def)"], ["proof (state)\nthis:\n  cpred (WHILE b DO c) (0, s, stk) (cfs ! (length cfs - Suc 0))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ccomp_correct:\n \"ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow> cpred c (cfs ! 0) (cfs ! (length cfs - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccomp c \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n    cpred c (cfs ! 0) (cfs ! (length cfs - 1))", "proof (induction c arbitrary: cfs, simp_all add: Let_def, frule_tac [4] bcomp_ccomp,\n frule_tac [3] ccomp_ccomp, auto)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 cfs.\n       acomp x2 @ [STORE x1] \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n       cpred (x1 ::= x2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n 2. \\<And>c1 c2 cfs a b k t aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        ccomp c1 @ ccomp c2 \\<Turnstile> cfs\\<box>; cfs ! 0 = (0, a, b);\n        k < length cfs;\n        cfs ! k = (size (ccomp c1) + size (ccomp c2), aa, b);\n        (c1, a) \\<Rightarrow> t; (c2, t) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (c1;; c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 4. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 5. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "fix a x cfs"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 cfs.\n       acomp x2 @ [STORE x1] \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n       cpred (x1 ::= x2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n 2. \\<And>c1 c2 cfs a b k t aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        ccomp c1 @ ccomp c2 \\<Turnstile> cfs\\<box>; cfs ! 0 = (0, a, b);\n        k < length cfs;\n        cfs ! k = (size (ccomp c1) + size (ccomp c2), aa, b);\n        (c1, a) \\<Rightarrow> t; (c2, t) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (c1;; c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 4. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 5. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "assume A: \"acomp a @ [STORE x] \\<Turnstile> cfs\\<box>\""], ["proof (state)\nthis:\n  acomp a @ [STORE x] \\<Turnstile> cfs\\<box>\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 cfs.\n       acomp x2 @ [STORE x1] \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n       cpred (x1 ::= x2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n 2. \\<And>c1 c2 cfs a b k t aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        ccomp c1 @ ccomp c2 \\<Turnstile> cfs\\<box>; cfs ! 0 = (0, a, b);\n        k < length cfs;\n        cfs ! k = (size (ccomp c1) + size (ccomp c2), aa, b);\n        (c1, a) \\<Rightarrow> t; (c2, t) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (c1;; c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 4. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 5. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "hence \"\\<exists>k < length cfs. apred a (off [] (cfs ! 0)) (off [] (cfs ! k))\""], ["proof (prove)\nusing this:\n  acomp a @ [STORE x] \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. \\<exists>k<length cfs. apred a (off [] (cfs ! 0)) (off [] (cfs ! k))", "by (rule_tac execl_all_sub, auto simp: execl_all_def)"], ["proof (state)\nthis:\n  \\<exists>k<length cfs. apred a (off [] (cfs ! 0)) (off [] (cfs ! k))\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 cfs.\n       acomp x2 @ [STORE x1] \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n       cpred (x1 ::= x2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n 2. \\<And>c1 c2 cfs a b k t aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        ccomp c1 @ ccomp c2 \\<Turnstile> cfs\\<box>; cfs ! 0 = (0, a, b);\n        k < length cfs;\n        cfs ! k = (size (ccomp c1) + size (ccomp c2), aa, b);\n        (c1, a) \\<Rightarrow> t; (c2, t) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (c1;; c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 4. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 5. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "moreover"], ["proof (state)\nthis:\n  \\<exists>k<length cfs. apred a (off [] (cfs ! 0)) (off [] (cfs ! k))\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 cfs.\n       acomp x2 @ [STORE x1] \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n       cpred (x1 ::= x2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n 2. \\<And>c1 c2 cfs a b k t aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        ccomp c1 @ ccomp c2 \\<Turnstile> cfs\\<box>; cfs ! 0 = (0, a, b);\n        k < length cfs;\n        cfs ! k = (size (ccomp c1) + size (ccomp c2), aa, b);\n        (c1, a) \\<Rightarrow> t; (c2, t) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (c1;; c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 4. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 5. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "obtain s stk where B: \"cfs ! 0 = (0, s, stk)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s stk.\n        cfs ! 0 = (0, s, stk) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using A"], ["proof (prove)\nusing this:\n  acomp a @ [STORE x] \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. (\\<And>s stk.\n        cfs ! 0 = (0, s, stk) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"cfs ! 0\", simp add: execl_all_def)"], ["proof (state)\nthis:\n  cfs ! 0 = (0, s, stk)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 cfs.\n       acomp x2 @ [STORE x1] \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n       cpred (x1 ::= x2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n 2. \\<And>c1 c2 cfs a b k t aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        ccomp c1 @ ccomp c2 \\<Turnstile> cfs\\<box>; cfs ! 0 = (0, a, b);\n        k < length cfs;\n        cfs ! k = (size (ccomp c1) + size (ccomp c2), aa, b);\n        (c1, a) \\<Rightarrow> t; (c2, t) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (c1;; c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 4. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 5. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>k<length cfs. apred a (off [] (cfs ! 0)) (off [] (cfs ! k))\n  cfs ! 0 = (0, s, stk)", "obtain k where C: \"k < length cfs\" and\n    D: \"cfs ! k = (size (acomp a), s, aval a s # stk)\""], ["proof (prove)\nusing this:\n  \\<exists>k<length cfs. apred a (off [] (cfs ! 0)) (off [] (cfs ! k))\n  cfs ! 0 = (0, s, stk)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k < length cfs;\n         cfs ! k = (size (acomp a), s, aval a s # stk)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: apred_def)"], ["proof (state)\nthis:\n  k < length cfs\n  cfs ! k = (size (acomp a), s, aval a s # stk)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 cfs.\n       acomp x2 @ [STORE x1] \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n       cpred (x1 ::= x2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n 2. \\<And>c1 c2 cfs a b k t aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        ccomp c1 @ ccomp c2 \\<Turnstile> cfs\\<box>; cfs ! 0 = (0, a, b);\n        k < length cfs;\n        cfs ! k = (size (ccomp c1) + size (ccomp c2), aa, b);\n        (c1, a) \\<Rightarrow> t; (c2, t) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (c1;; c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 4. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 5. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "hence \"cfs ! Suc k = (size (acomp a) + 1, s(x := aval a s), stk)\""], ["proof (prove)\nusing this:\n  k < length cfs\n  cfs ! k = (size (acomp a), s, aval a s # stk)\n\ngoal (1 subgoal):\n 1. cfs ! Suc k = (size (acomp a) + 1, s(x := aval a s), stk)", "using A"], ["proof (prove)\nusing this:\n  k < length cfs\n  cfs ! k = (size (acomp a), s, aval a s # stk)\n  acomp a @ [STORE x] \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. cfs ! Suc k = (size (acomp a) + 1, s(x := aval a s), stk)", "by (insert execl_next [of \"acomp a @ [STORE x]\" cfs k],\n     simp add: execl_all_def, drule_tac impI, auto)"], ["proof (state)\nthis:\n  cfs ! Suc k = (size (acomp a) + 1, s(x := aval a s), stk)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 cfs.\n       acomp x2 @ [STORE x1] \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n       cpred (x1 ::= x2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n 2. \\<And>c1 c2 cfs a b k t aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        ccomp c1 @ ccomp c2 \\<Turnstile> cfs\\<box>; cfs ! 0 = (0, a, b);\n        k < length cfs;\n        cfs ! k = (size (ccomp c1) + size (ccomp c2), aa, b);\n        (c1, a) \\<Rightarrow> t; (c2, t) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (c1;; c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 4. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 5. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "thus \"cpred (x ::= a) (cfs ! 0) (cfs ! (length cfs - Suc 0))\""], ["proof (prove)\nusing this:\n  cfs ! Suc k = (size (acomp a) + 1, s(x := aval a s), stk)\n\ngoal (1 subgoal):\n 1. cpred (x ::= a) (cfs ! 0) (cfs ! (length cfs - Suc 0))", "using A and B and C and D"], ["proof (prove)\nusing this:\n  cfs ! Suc k = (size (acomp a) + 1, s(x := aval a s), stk)\n  acomp a @ [STORE x] \\<Turnstile> cfs\\<box>\n  cfs ! 0 = (0, s, stk)\n  k < length cfs\n  cfs ! k = (size (acomp a), s, aval a s # stk)\n\ngoal (1 subgoal):\n 1. cpred (x ::= a) (cfs ! 0) (cfs ! (length cfs - Suc 0))", "by (insert execl_last [of \"acomp a @ [STORE x]\"\n     cfs \"Suc k\"], simp add: execl_all_def cpred_def, drule_tac impI, auto)"], ["proof (state)\nthis:\n  cpred (x ::= a) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n\ngoal (4 subgoals):\n 1. \\<And>c1 c2 cfs a b k t aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        ccomp c1 @ ccomp c2 \\<Turnstile> cfs\\<box>; cfs ! 0 = (0, a, b);\n        k < length cfs;\n        cfs ! k = (size (ccomp c1) + size (ccomp c2), aa, b);\n        (c1, a) \\<Rightarrow> t; (c2, t) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (c1;; c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 4. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c1 c2 cfs a b k t aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        ccomp c1 @ ccomp c2 \\<Turnstile> cfs\\<box>; cfs ! 0 = (0, a, b);\n        k < length cfs;\n        cfs ! k = (size (ccomp c1) + size (ccomp c2), aa, b);\n        (c1, a) \\<Rightarrow> t; (c2, t) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (c1;; c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 4. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "fix c\\<^sub>1 c\\<^sub>2 cfs s s' t stk k"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c1 c2 cfs a b k t aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        ccomp c1 @ ccomp c2 \\<Turnstile> cfs\\<box>; cfs ! 0 = (0, a, b);\n        k < length cfs;\n        cfs ! k = (size (ccomp c1) + size (ccomp c2), aa, b);\n        (c1, a) \\<Rightarrow> t; (c2, t) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (c1;; c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 4. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "assume \"ccomp c\\<^sub>1 @ ccomp c\\<^sub>2 \\<Turnstile> cfs\\<box>\" and \"k < length cfs\" and\n   \"cfs ! k = (size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2), s', stk)\""], ["proof (state)\nthis:\n  ccomp c\\<^sub>1 @ ccomp c\\<^sub>2 \\<Turnstile> cfs\\<box>\n  k < length cfs\n  cfs ! k = (size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2), s', stk)\n\ngoal (4 subgoals):\n 1. \\<And>c1 c2 cfs a b k t aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        ccomp c1 @ ccomp c2 \\<Turnstile> cfs\\<box>; cfs ! 0 = (0, a, b);\n        k < length cfs;\n        cfs ! k = (size (ccomp c1) + size (ccomp c2), aa, b);\n        (c1, a) \\<Rightarrow> t; (c2, t) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (c1;; c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 4. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "moreover"], ["proof (state)\nthis:\n  ccomp c\\<^sub>1 @ ccomp c\\<^sub>2 \\<Turnstile> cfs\\<box>\n  k < length cfs\n  cfs ! k = (size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2), s', stk)\n\ngoal (4 subgoals):\n 1. \\<And>c1 c2 cfs a b k t aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        ccomp c1 @ ccomp c2 \\<Turnstile> cfs\\<box>; cfs ! 0 = (0, a, b);\n        k < length cfs;\n        cfs ! k = (size (ccomp c1) + size (ccomp c2), aa, b);\n        (c1, a) \\<Rightarrow> t; (c2, t) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (c1;; c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 4. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "assume \"(c\\<^sub>1, s) \\<Rightarrow> t\" and \"(c\\<^sub>2, t) \\<Rightarrow> s'\""], ["proof (state)\nthis:\n  (c\\<^sub>1, s) \\<Rightarrow> t\n  (c\\<^sub>2, t) \\<Rightarrow> s'\n\ngoal (4 subgoals):\n 1. \\<And>c1 c2 cfs a b k t aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        ccomp c1 @ ccomp c2 \\<Turnstile> cfs\\<box>; cfs ! 0 = (0, a, b);\n        k < length cfs;\n        cfs ! k = (size (ccomp c1) + size (ccomp c2), aa, b);\n        (c1, a) \\<Rightarrow> t; (c2, t) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (c1;; c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 4. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "ultimately"], ["proof (chain)\npicking this:\n  ccomp c\\<^sub>1 @ ccomp c\\<^sub>2 \\<Turnstile> cfs\\<box>\n  k < length cfs\n  cfs ! k = (size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2), s', stk)\n  (c\\<^sub>1, s) \\<Rightarrow> t\n  (c\\<^sub>2, t) \\<Rightarrow> s'", "show \"cpred (c\\<^sub>1;; c\\<^sub>2) (0, s, stk) (cfs ! (length cfs - Suc 0))\""], ["proof (prove)\nusing this:\n  ccomp c\\<^sub>1 @ ccomp c\\<^sub>2 \\<Turnstile> cfs\\<box>\n  k < length cfs\n  cfs ! k = (size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2), s', stk)\n  (c\\<^sub>1, s) \\<Rightarrow> t\n  (c\\<^sub>2, t) \\<Rightarrow> s'\n\ngoal (1 subgoal):\n 1. cpred (c\\<^sub>1;; c\\<^sub>2) (0, s, stk) (cfs ! (length cfs - Suc 0))", "by (insert execl_last, auto simp: execl_all_def cpred_def)"], ["proof (state)\nthis:\n  cpred (c\\<^sub>1;; c\\<^sub>2) (0, s, stk) (cfs ! (length cfs - Suc 0))\n\ngoal (3 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "fix b c\\<^sub>1 c\\<^sub>2 cfs s stk"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "assume A: \"bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @ ccomp c\\<^sub>1 @\n    JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2 \\<Turnstile> cfs\\<box>\"\n    (is \"bcomp ?x @ ?cc\\<^sub>1 @ _ # ?cc\\<^sub>2 \\<Turnstile> _\\<box>\")"], ["proof (state)\nthis:\n  bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n\ngoal (3 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "let ?P = \"bcomp ?x @ ?cc\\<^sub>1 @ [JMP (size ?cc\\<^sub>2)]\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "have \"\\<exists>k < length cfs. bpred ?x (off [] (cfs ! 0)) (off [] (cfs ! k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k<length cfs.\n       bpred (b, False, size (ccomp c\\<^sub>1) + 1) (off [] (cfs ! 0))\n        (off [] (cfs ! k))", "using A"], ["proof (prove)\nusing this:\n  bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. \\<exists>k<length cfs.\n       bpred (b, False, size (ccomp c\\<^sub>1) + 1) (off [] (cfs ! 0))\n        (off [] (cfs ! k))", "by (rule_tac execl_all_sub, auto simp: execl_all_def)"], ["proof (state)\nthis:\n  \\<exists>k<length cfs.\n     bpred (b, False, size (ccomp c\\<^sub>1) + 1) (off [] (cfs ! 0))\n      (off [] (cfs ! k))\n\ngoal (3 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "moreover"], ["proof (state)\nthis:\n  \\<exists>k<length cfs.\n     bpred (b, False, size (ccomp c\\<^sub>1) + 1) (off [] (cfs ! 0))\n      (off [] (cfs ! k))\n\ngoal (3 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "assume B: \"\\<not> bval b s\" and \"cfs ! 0 = (0, s, stk)\""], ["proof (state)\nthis:\n  \\<not> bval b s\n  cfs ! 0 = (0, s, stk)\n\ngoal (3 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>k<length cfs.\n     bpred (b, False, size (ccomp c\\<^sub>1) + 1) (off [] (cfs ! 0))\n      (off [] (cfs ! k))\n  \\<not> bval b s\n  cfs ! 0 = (0, s, stk)", "obtain k where C: \"k < length cfs\" and D: \"cfs ! k = (size ?P, s, stk)\""], ["proof (prove)\nusing this:\n  \\<exists>k<length cfs.\n     bpred (b, False, size (ccomp c\\<^sub>1) + 1) (off [] (cfs ! 0))\n      (off [] (cfs ! k))\n  \\<not> bval b s\n  cfs ! 0 = (0, s, stk)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k < length cfs;\n         cfs ! k =\n         (size\n           (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))]),\n          s, stk)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (force simp: bpred_def)"], ["proof (state)\nthis:\n  k < length cfs\n  cfs ! k =\n  (size\n    (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n     ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))]),\n   s, stk)\n\ngoal (3 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "assume \"\\<And>cfs. ?cc\\<^sub>2 \\<Turnstile> cfs\\<box> \\<Longrightarrow> cpred c\\<^sub>2 (cfs ! 0) (cfs ! (length cfs - Suc 0))\""], ["proof (state)\nthis:\n  ccomp c\\<^sub>2 \\<Turnstile> ?cfs\\<box> \\<Longrightarrow>\n  cpred c\\<^sub>2 (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))\n\ngoal (3 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "hence \"\\<exists>k' < length cfs. cpred c\\<^sub>2 (off ?P (cfs ! k)) (off ?P (cfs ! k'))\""], ["proof (prove)\nusing this:\n  ccomp c\\<^sub>2 \\<Turnstile> ?cfs\\<box> \\<Longrightarrow>\n  cpred c\\<^sub>2 (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))\n\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs.\n       cpred c\\<^sub>2\n        (off (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n              ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n          (cfs ! k))\n        (off (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n              ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n          (cfs ! k'))", "using A and C and D"], ["proof (prove)\nusing this:\n  ccomp c\\<^sub>2 \\<Turnstile> ?cfs\\<box> \\<Longrightarrow>\n  cpred c\\<^sub>2 (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))\n  bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n  k < length cfs\n  cfs ! k =\n  (size\n    (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n     ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))]),\n   s, stk)\n\ngoal (1 subgoal):\n 1. \\<exists>k'<length cfs.\n       cpred c\\<^sub>2\n        (off (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n              ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n          (cfs ! k))\n        (off (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n              ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n          (cfs ! k'))", "by (rule_tac execl_all_sub [where P'' = \"[]\"], auto)"], ["proof (state)\nthis:\n  \\<exists>k'<length cfs.\n     cpred c\\<^sub>2\n      (off (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! k))\n      (off (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! k'))\n\ngoal (3 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "then"], ["proof (chain)\npicking this:\n  \\<exists>k'<length cfs.\n     cpred c\\<^sub>2\n      (off (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! k))\n      (off (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! k'))", "obtain k' where \"k' < length cfs\" and \"case cfs ! k' of (pc', s', stk') \\<Rightarrow>\n    pc' = size (?P @ ?cc\\<^sub>2) \\<and> (c\\<^sub>2, s) \\<Rightarrow> s' \\<and> stk' = stk\""], ["proof (prove)\nusing this:\n  \\<exists>k'<length cfs.\n     cpred c\\<^sub>2\n      (off (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! k))\n      (off (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! k'))\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>k' < length cfs;\n         case cfs ! k' of\n         (pc', s', stk') \\<Rightarrow>\n           pc' =\n           size\n            ((bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n              ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))]) @\n             ccomp c\\<^sub>2) \\<and>\n           (c\\<^sub>2, s) \\<Rightarrow> s' \\<and> stk' = stk\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using D"], ["proof (prove)\nusing this:\n  \\<exists>k'<length cfs.\n     cpred c\\<^sub>2\n      (off (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! k))\n      (off (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! k'))\n  cfs ! k =\n  (size\n    (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n     ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))]),\n   s, stk)\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>k' < length cfs;\n         case cfs ! k' of\n         (pc', s', stk') \\<Rightarrow>\n           pc' =\n           size\n            ((bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n              ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))]) @\n             ccomp c\\<^sub>2) \\<and>\n           (c\\<^sub>2, s) \\<Rightarrow> s' \\<and> stk' = stk\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce simp: cpred_def)"], ["proof (state)\nthis:\n  k' < length cfs\n  case cfs ! k' of\n  (pc', s', stk') \\<Rightarrow>\n    pc' =\n    size\n     ((bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n       ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))]) @\n      ccomp c\\<^sub>2) \\<and>\n    (c\\<^sub>2, s) \\<Rightarrow> s' \\<and> stk' = stk\n\ngoal (3 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); \\<not> bval x1 a\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 3. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "thus \"cpred (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (0, s, stk) (cfs ! (length cfs - Suc 0))\""], ["proof (prove)\nusing this:\n  k' < length cfs\n  case cfs ! k' of\n  (pc', s', stk') \\<Rightarrow>\n    pc' =\n    size\n     ((bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n       ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))]) @\n      ccomp c\\<^sub>2) \\<and>\n    (c\\<^sub>2, s) \\<Rightarrow> s' \\<and> stk' = stk\n\ngoal (1 subgoal):\n 1. cpred (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (0, s, stk)\n     (cfs ! (length cfs - Suc 0))", "using A and B"], ["proof (prove)\nusing this:\n  k' < length cfs\n  case cfs ! k' of\n  (pc', s', stk') \\<Rightarrow>\n    pc' =\n    size\n     ((bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n       ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))]) @\n      ccomp c\\<^sub>2) \\<and>\n    (c\\<^sub>2, s) \\<Rightarrow> s' \\<and> stk' = stk\n  bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. cpred (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (0, s, stk)\n     (cfs ! (length cfs - Suc 0))", "by (insert execl_last, auto simp: execl_all_def cpred_def Let_def)"], ["proof (state)\nthis:\n  cpred (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (0, s, stk)\n   (cfs ! (length cfs - Suc 0))\n\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "fix b c\\<^sub>1 c\\<^sub>2 cfs s s' stk k"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "assume A: \"bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @ ccomp c\\<^sub>1 @\n    JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2 \\<Turnstile> cfs\\<box>\"\n    (is \"?cb @ ?cc\\<^sub>1 @ ?i # ?cc\\<^sub>2 \\<Turnstile> _\\<box>\")"], ["proof (state)\nthis:\n  bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "assume B: \"k < length cfs\" and C: \"cfs ! k = (size ?cb + size ?cc\\<^sub>1, s', stk)\""], ["proof (state)\nthis:\n  k < length cfs\n  cfs ! k =\n  (size (bcomp (b, False, size (ccomp c\\<^sub>1) + 1)) +\n   size (ccomp c\\<^sub>1),\n   s', stk)\n\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "hence D: \"cfs ! Suc k = (size (?cb @ ?cc\\<^sub>1 @ ?i # ?cc\\<^sub>2), s', stk)\"\n    (is \"_ = (size ?P, _, _)\")"], ["proof (prove)\nusing this:\n  k < length cfs\n  cfs ! k =\n  (size (bcomp (b, False, size (ccomp c\\<^sub>1) + 1)) +\n   size (ccomp c\\<^sub>1),\n   s', stk)\n\ngoal (1 subgoal):\n 1. cfs ! Suc k =\n    (size\n      (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n       ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2),\n     s', stk)", "using A"], ["proof (prove)\nusing this:\n  k < length cfs\n  cfs ! k =\n  (size (bcomp (b, False, size (ccomp c\\<^sub>1) + 1)) +\n   size (ccomp c\\<^sub>1),\n   s', stk)\n  bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. cfs ! Suc k =\n    (size\n      (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n       ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2),\n     s', stk)", "by (insert execl_next [of ?P cfs k], simp add: execl_all_def,\n     drule_tac impI, auto)"], ["proof (state)\nthis:\n  cfs ! Suc k =\n  (size\n    (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n     ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2),\n   s', stk)\n\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "assume \"bval b s\" and \"(c\\<^sub>1, s) \\<Rightarrow> s'\""], ["proof (state)\nthis:\n  bval b s\n  (c\\<^sub>1, s) \\<Rightarrow> s'\n\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 cfs a b k aa.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        bcomp (x1, False, size (ccomp c1) + 1) @\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>;\n        cfs ! 0 = (0, a, b); bval x1 a; k < length cfs;\n        cfs ! k =\n        (size (bcomp (x1, False, size (ccomp c1) + 1)) + size (ccomp c1),\n         aa, b);\n        (c1, a) \\<Rightarrow> aa\\<rbrakk>\n       \\<Longrightarrow> cpred (IF x1 THEN c1 ELSE c2) (0, a, b)\n                          (cfs ! (length cfs - Suc 0))\n 2. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "thus \"cpred (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (0, s, stk) (cfs ! (length cfs - Suc 0))\""], ["proof (prove)\nusing this:\n  bval b s\n  (c\\<^sub>1, s) \\<Rightarrow> s'\n\ngoal (1 subgoal):\n 1. cpred (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (0, s, stk)\n     (cfs ! (length cfs - Suc 0))", "using A and B and C and D"], ["proof (prove)\nusing this:\n  bval b s\n  (c\\<^sub>1, s) \\<Rightarrow> s'\n  bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n  k < length cfs\n  cfs ! k =\n  (size (bcomp (b, False, size (ccomp c\\<^sub>1) + 1)) +\n   size (ccomp c\\<^sub>1),\n   s', stk)\n  cfs ! Suc k =\n  (size\n    (bcomp (b, False, size (ccomp c\\<^sub>1) + 1) @\n     ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2),\n   s', stk)\n\ngoal (1 subgoal):\n 1. cpred (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (0, s, stk)\n     (cfs ! (length cfs - Suc 0))", "by (insert execl_last [of ?P cfs \"Suc k\"],\n     simp add: execl_all_def cpred_def Let_def, drule_tac impI, auto)"], ["proof (state)\nthis:\n  cpred (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (0, s, stk)\n   (cfs ! (length cfs - Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "fix c\\<^sub>1 c\\<^sub>2 cfs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "assume A: \"JMPND (size (ccomp c\\<^sub>1) + 1) # ccomp c\\<^sub>1 @\n    JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2 \\<Turnstile> cfs\\<box>\"\n    (is \"JMPND (?n\\<^sub>1 + 1) # ?cc\\<^sub>1 @ JMP ?n\\<^sub>2 # ?cc\\<^sub>2 \\<Turnstile> _\\<box>\")"], ["proof (state)\nthis:\n  JMPND (size (ccomp c\\<^sub>1) + 1) #\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "let ?P = \"JMPND (?n\\<^sub>1 + 1) # ?cc\\<^sub>1 @ [JMP ?n\\<^sub>2]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "assume\n    B: \"\\<And>cfs. ?cc\\<^sub>1 \\<Turnstile> cfs\\<box> \\<Longrightarrow> cpred c\\<^sub>1 (cfs ! 0) (cfs ! (length cfs - Suc 0))\" and\n    C: \"\\<And>cfs. ?cc\\<^sub>2 \\<Turnstile> cfs\\<box> \\<Longrightarrow> cpred c\\<^sub>2 (cfs ! 0) (cfs ! (length cfs - Suc 0))\""], ["proof (state)\nthis:\n  ccomp c\\<^sub>1 \\<Turnstile> ?cfs\\<box> \\<Longrightarrow>\n  cpred c\\<^sub>1 (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))\n  ccomp c\\<^sub>2 \\<Turnstile> ?cfs\\<box> \\<Longrightarrow>\n  cpred c\\<^sub>2 (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "from A"], ["proof (chain)\npicking this:\n  JMPND (size (ccomp c\\<^sub>1) + 1) #\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>", "obtain s stk where D: \"cfs ! 0 = (0, s, stk)\""], ["proof (prove)\nusing this:\n  JMPND (size (ccomp c\\<^sub>1) + 1) #\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. (\\<And>s stk.\n        cfs ! 0 = (0, s, stk) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"cfs ! 0\", simp add: execl_all_def)"], ["proof (state)\nthis:\n  cfs ! 0 = (0, s, stk)\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "with A"], ["proof (chain)\npicking this:\n  JMPND (size (ccomp c\\<^sub>1) + 1) #\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n  cfs ! 0 = (0, s, stk)", "have \"cfs ! 1 = (1, s, stk) \\<or> cfs ! 1 = (?n\\<^sub>1 + 2, s, stk)\""], ["proof (prove)\nusing this:\n  JMPND (size (ccomp c\\<^sub>1) + 1) #\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n  cfs ! 0 = (0, s, stk)\n\ngoal (1 subgoal):\n 1. cfs ! 1 = (1, s, stk) \\<or>\n    cfs ! 1 = (size (ccomp c\\<^sub>1) + 2, s, stk)", "by (insert execl_next [of \"?P @ ?cc\\<^sub>2\" cfs 0], simp add: execl_all_def,\n     drule_tac impI, auto)"], ["proof (state)\nthis:\n  cfs ! 1 = (1, s, stk) \\<or> cfs ! 1 = (size (ccomp c\\<^sub>1) + 2, s, stk)\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "moreover"], ["proof (state)\nthis:\n  cfs ! 1 = (1, s, stk) \\<or> cfs ! 1 = (size (ccomp c\\<^sub>1) + 2, s, stk)\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "{"], ["proof (state)\nthis:\n  cfs ! 1 = (1, s, stk) \\<or> cfs ! 1 = (size (ccomp c\\<^sub>1) + 2, s, stk)\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "assume E: \"cfs ! 1 = (1, s, stk)\""], ["proof (state)\nthis:\n  cfs ! 1 = (1, s, stk)\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "hence \"\\<exists>k < length cfs. cpred c\\<^sub>1 (off [hd ?P] (cfs ! 1)) (off [hd ?P] (cfs ! k))\""], ["proof (prove)\nusing this:\n  cfs ! 1 = (1, s, stk)\n\ngoal (1 subgoal):\n 1. \\<exists>k<length cfs.\n       cpred c\\<^sub>1\n        (off [hd (JMPND (size (ccomp c\\<^sub>1) + 1) #\n                  ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])]\n          (cfs ! 1))\n        (off [hd (JMPND (size (ccomp c\\<^sub>1) + 1) #\n                  ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])]\n          (cfs ! k))", "using A and B"], ["proof (prove)\nusing this:\n  cfs ! 1 = (1, s, stk)\n  JMPND (size (ccomp c\\<^sub>1) + 1) #\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n  ccomp c\\<^sub>1 \\<Turnstile> ?cfs\\<box> \\<Longrightarrow>\n  cpred c\\<^sub>1 (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))\n\ngoal (1 subgoal):\n 1. \\<exists>k<length cfs.\n       cpred c\\<^sub>1\n        (off [hd (JMPND (size (ccomp c\\<^sub>1) + 1) #\n                  ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])]\n          (cfs ! 1))\n        (off [hd (JMPND (size (ccomp c\\<^sub>1) + 1) #\n                  ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])]\n          (cfs ! k))", "by (rule_tac execl_all_sub, auto simp: execl_all_def)"], ["proof (state)\nthis:\n  \\<exists>k<length cfs.\n     cpred c\\<^sub>1\n      (off [hd (JMPND (size (ccomp c\\<^sub>1) + 1) #\n                ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])]\n        (cfs ! 1))\n      (off [hd (JMPND (size (ccomp c\\<^sub>1) + 1) #\n                ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])]\n        (cfs ! k))\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "then"], ["proof (chain)\npicking this:\n  \\<exists>k<length cfs.\n     cpred c\\<^sub>1\n      (off [hd (JMPND (size (ccomp c\\<^sub>1) + 1) #\n                ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])]\n        (cfs ! 1))\n      (off [hd (JMPND (size (ccomp c\\<^sub>1) + 1) #\n                ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])]\n        (cfs ! k))", "obtain k where \"k < length cfs\" and \"case cfs ! k of (pc', s', stk') \\<Rightarrow>\n      pc' = ?n\\<^sub>1 + 1 \\<and> (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk\""], ["proof (prove)\nusing this:\n  \\<exists>k<length cfs.\n     cpred c\\<^sub>1\n      (off [hd (JMPND (size (ccomp c\\<^sub>1) + 1) #\n                ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])]\n        (cfs ! 1))\n      (off [hd (JMPND (size (ccomp c\\<^sub>1) + 1) #\n                ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])]\n        (cfs ! k))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k < length cfs;\n         case cfs ! k of\n         (pc', s', stk') \\<Rightarrow>\n           pc' = size (ccomp c\\<^sub>1) + 1 \\<and>\n           (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using E"], ["proof (prove)\nusing this:\n  \\<exists>k<length cfs.\n     cpred c\\<^sub>1\n      (off [hd (JMPND (size (ccomp c\\<^sub>1) + 1) #\n                ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])]\n        (cfs ! 1))\n      (off [hd (JMPND (size (ccomp c\\<^sub>1) + 1) #\n                ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])]\n        (cfs ! k))\n  cfs ! 1 = (1, s, stk)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k < length cfs;\n         case cfs ! k of\n         (pc', s', stk') \\<Rightarrow>\n           pc' = size (ccomp c\\<^sub>1) + 1 \\<and>\n           (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce simp: cpred_def)"], ["proof (state)\nthis:\n  k < length cfs\n  case cfs ! k of\n  (pc', s', stk') \\<Rightarrow>\n    pc' = size (ccomp c\\<^sub>1) + 1 \\<and>\n    (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "moreover"], ["proof (state)\nthis:\n  k < length cfs\n  case cfs ! k of\n  (pc', s', stk') \\<Rightarrow>\n    pc' = size (ccomp c\\<^sub>1) + 1 \\<and>\n    (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "from this"], ["proof (chain)\npicking this:\n  k < length cfs\n  case cfs ! k of\n  (pc', s', stk') \\<Rightarrow>\n    pc' = size (ccomp c\\<^sub>1) + 1 \\<and>\n    (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk", "have \"case cfs ! Suc k of (pc', s', stk') \\<Rightarrow>\n      pc' = ?n\\<^sub>1 + ?n\\<^sub>2 + 2 \\<and> (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk\""], ["proof (prove)\nusing this:\n  k < length cfs\n  case cfs ! k of\n  (pc', s', stk') \\<Rightarrow>\n    pc' = size (ccomp c\\<^sub>1) + 1 \\<and>\n    (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk\n\ngoal (1 subgoal):\n 1. case cfs ! Suc k of\n    (pc', s', stk') \\<Rightarrow>\n      pc' = size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2) + 2 \\<and>\n      (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk", "using A"], ["proof (prove)\nusing this:\n  k < length cfs\n  case cfs ! k of\n  (pc', s', stk') \\<Rightarrow>\n    pc' = size (ccomp c\\<^sub>1) + 1 \\<and>\n    (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk\n  JMPND (size (ccomp c\\<^sub>1) + 1) #\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n\ngoal (1 subgoal):\n 1. case cfs ! Suc k of\n    (pc', s', stk') \\<Rightarrow>\n      pc' = size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2) + 2 \\<and>\n      (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk", "by (insert execl_next [of \"?P @ ?cc\\<^sub>2\" cfs k], simp add: execl_all_def,\n       drule_tac impI, auto)"], ["proof (state)\nthis:\n  case cfs ! Suc k of\n  (pc', s', stk') \\<Rightarrow>\n    pc' = size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2) + 2 \\<and>\n    (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "ultimately"], ["proof (chain)\npicking this:\n  k < length cfs\n  case cfs ! k of\n  (pc', s', stk') \\<Rightarrow>\n    pc' = size (ccomp c\\<^sub>1) + 1 \\<and>\n    (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk\n  case cfs ! Suc k of\n  (pc', s', stk') \\<Rightarrow>\n    pc' = size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2) + 2 \\<and>\n    (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk", "have \"cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\""], ["proof (prove)\nusing this:\n  k < length cfs\n  case cfs ! k of\n  (pc', s', stk') \\<Rightarrow>\n    pc' = size (ccomp c\\<^sub>1) + 1 \\<and>\n    (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk\n  case cfs ! Suc k of\n  (pc', s', stk') \\<Rightarrow>\n    pc' = size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2) + 2 \\<and>\n    (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk\n\ngoal (1 subgoal):\n 1. cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))", "using A and D"], ["proof (prove)\nusing this:\n  k < length cfs\n  case cfs ! k of\n  (pc', s', stk') \\<Rightarrow>\n    pc' = size (ccomp c\\<^sub>1) + 1 \\<and>\n    (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk\n  case cfs ! Suc k of\n  (pc', s', stk') \\<Rightarrow>\n    pc' = size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2) + 2 \\<and>\n    (c\\<^sub>1, s) \\<Rightarrow> s' \\<and> stk' = stk\n  JMPND (size (ccomp c\\<^sub>1) + 1) #\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n  cfs ! 0 = (0, s, stk)\n\ngoal (1 subgoal):\n 1. cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))", "by (insert execl_last [of \"?P @ ?cc\\<^sub>2\" cfs \"Suc k\"],\n       simp add: execl_all_def cpred_def split_def Let_def, drule_tac impI, auto)"], ["proof (state)\nthis:\n  cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "}"], ["proof (state)\nthis:\n  cfs ! 1 = (1, s, stk) \\<Longrightarrow>\n  cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "moreover"], ["proof (state)\nthis:\n  cfs ! 1 = (1, s, stk) \\<Longrightarrow>\n  cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "{"], ["proof (state)\nthis:\n  cfs ! 1 = (1, s, stk) \\<Longrightarrow>\n  cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "assume E: \"cfs ! 1 = (?n\\<^sub>1 + 2, s, stk)\""], ["proof (state)\nthis:\n  cfs ! 1 = (size (ccomp c\\<^sub>1) + 2, s, stk)\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "with A and C"], ["proof (chain)\npicking this:\n  JMPND (size (ccomp c\\<^sub>1) + 1) #\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n  ccomp c\\<^sub>2 \\<Turnstile> ?cfs\\<box> \\<Longrightarrow>\n  cpred c\\<^sub>2 (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))\n  cfs ! 1 = (size (ccomp c\\<^sub>1) + 2, s, stk)", "have \"\\<exists>k<length cfs. cpred c\\<^sub>2 (off ?P (cfs!1)) (off ?P (cfs!k))\""], ["proof (prove)\nusing this:\n  JMPND (size (ccomp c\\<^sub>1) + 1) #\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n  ccomp c\\<^sub>2 \\<Turnstile> ?cfs\\<box> \\<Longrightarrow>\n  cpred c\\<^sub>2 (?cfs ! 0) (?cfs ! (length ?cfs - Suc 0))\n  cfs ! 1 = (size (ccomp c\\<^sub>1) + 2, s, stk)\n\ngoal (1 subgoal):\n 1. \\<exists>k<length cfs.\n       cpred c\\<^sub>2\n        (off (JMPND (size (ccomp c\\<^sub>1) + 1) #\n              ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n          (cfs ! 1))\n        (off (JMPND (size (ccomp c\\<^sub>1) + 1) #\n              ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n          (cfs ! k))", "by (rule_tac execl_all_sub [where P'' = \"[]\"], auto simp: execl_all_def)"], ["proof (state)\nthis:\n  \\<exists>k<length cfs.\n     cpred c\\<^sub>2\n      (off (JMPND (size (ccomp c\\<^sub>1) + 1) #\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! 1))\n      (off (JMPND (size (ccomp c\\<^sub>1) + 1) #\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! k))\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "then"], ["proof (chain)\npicking this:\n  \\<exists>k<length cfs.\n     cpred c\\<^sub>2\n      (off (JMPND (size (ccomp c\\<^sub>1) + 1) #\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! 1))\n      (off (JMPND (size (ccomp c\\<^sub>1) + 1) #\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! k))", "obtain k where \"k < length cfs\" and \"case cfs ! k of (pc', s', stk') \\<Rightarrow>\n      pc' = ?n\\<^sub>1 + ?n\\<^sub>2 + 2 \\<and> (c\\<^sub>2, s) \\<Rightarrow> s' \\<and> stk' = stk\""], ["proof (prove)\nusing this:\n  \\<exists>k<length cfs.\n     cpred c\\<^sub>2\n      (off (JMPND (size (ccomp c\\<^sub>1) + 1) #\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! 1))\n      (off (JMPND (size (ccomp c\\<^sub>1) + 1) #\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! k))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k < length cfs;\n         case cfs ! k of\n         (pc', s', stk') \\<Rightarrow>\n           pc' = size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2) + 2 \\<and>\n           (c\\<^sub>2, s) \\<Rightarrow> s' \\<and> stk' = stk\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using E"], ["proof (prove)\nusing this:\n  \\<exists>k<length cfs.\n     cpred c\\<^sub>2\n      (off (JMPND (size (ccomp c\\<^sub>1) + 1) #\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! 1))\n      (off (JMPND (size (ccomp c\\<^sub>1) + 1) #\n            ccomp c\\<^sub>1 @ [JMP (size (ccomp c\\<^sub>2))])\n        (cfs ! k))\n  cfs ! 1 = (size (ccomp c\\<^sub>1) + 2, s, stk)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k < length cfs;\n         case cfs ! k of\n         (pc', s', stk') \\<Rightarrow>\n           pc' = size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2) + 2 \\<and>\n           (c\\<^sub>2, s) \\<Rightarrow> s' \\<and> stk' = stk\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce simp: cpred_def)"], ["proof (state)\nthis:\n  k < length cfs\n  case cfs ! k of\n  (pc', s', stk') \\<Rightarrow>\n    pc' = size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2) + 2 \\<and>\n    (c\\<^sub>2, s) \\<Rightarrow> s' \\<and> stk' = stk\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "with A and D"], ["proof (chain)\npicking this:\n  JMPND (size (ccomp c\\<^sub>1) + 1) #\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n  cfs ! 0 = (0, s, stk)\n  k < length cfs\n  case cfs ! k of\n  (pc', s', stk') \\<Rightarrow>\n    pc' = size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2) + 2 \\<and>\n    (c\\<^sub>2, s) \\<Rightarrow> s' \\<and> stk' = stk", "have \"cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\""], ["proof (prove)\nusing this:\n  JMPND (size (ccomp c\\<^sub>1) + 1) #\n  ccomp c\\<^sub>1 @ JMP (size (ccomp c\\<^sub>2)) # ccomp c\\<^sub>2\n  \\<Turnstile> cfs\\<box>\n  cfs ! 0 = (0, s, stk)\n  k < length cfs\n  case cfs ! k of\n  (pc', s', stk') \\<Rightarrow>\n    pc' = size (ccomp c\\<^sub>1) + size (ccomp c\\<^sub>2) + 2 \\<and>\n    (c\\<^sub>2, s) \\<Rightarrow> s' \\<and> stk' = stk\n\ngoal (1 subgoal):\n 1. cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))", "by (insert execl_last, auto simp: execl_all_def cpred_def Let_def)"], ["proof (state)\nthis:\n  cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "}"], ["proof (state)\nthis:\n  cfs ! 1 = (size (ccomp c\\<^sub>1) + 2, s, stk) \\<Longrightarrow>\n  cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 cfs.\n       \\<lbrakk>\\<And>cfs.\n                   ccomp c1 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n                   cpred c1 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        \\<And>cfs.\n           ccomp c2 \\<Turnstile> cfs\\<box> \\<Longrightarrow>\n           cpred c2 (cfs ! 0) (cfs ! (length cfs - Suc 0));\n        JMPND (size (ccomp c1) + 1) #\n        ccomp c1 @ JMP (size (ccomp c2)) # ccomp c2\n        \\<Turnstile> cfs\\<box>\\<rbrakk>\n       \\<Longrightarrow> cpred (c1 OR c2) (cfs ! 0)\n                          (cfs ! (length cfs - Suc 0))", "ultimately"], ["proof (chain)\npicking this:\n  cfs ! 1 = (1, s, stk) \\<or> cfs ! 1 = (size (ccomp c\\<^sub>1) + 2, s, stk)\n  cfs ! 1 = (1, s, stk) \\<Longrightarrow>\n  cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n  cfs ! 1 = (size (ccomp c\\<^sub>1) + 2, s, stk) \\<Longrightarrow>\n  cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))", "show \"cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\""], ["proof (prove)\nusing this:\n  cfs ! 1 = (1, s, stk) \\<or> cfs ! 1 = (size (ccomp c\\<^sub>1) + 2, s, stk)\n  cfs ! 1 = (1, s, stk) \\<Longrightarrow>\n  cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n  cfs ! 1 = (size (ccomp c\\<^sub>1) + 2, s, stk) \\<Longrightarrow>\n  cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n\ngoal (1 subgoal):\n 1. cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))", ".."], ["proof (state)\nthis:\n  cpred (c\\<^sub>1 OR c\\<^sub>2) (cfs ! 0) (cfs ! (length cfs - Suc 0))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n\\null\n\nFinally, the main compiler correctness theorem, expressed using predicate @{const exec}, is proven.\nFirst, @{prop \"P \\<turnstile> cf \\<rightarrow>* cf'\"} is shown to imply the existence of a nonempty list of configurations\n@{text cfs} such that @{prop \"P \\<Turnstile> cfs\"}, whose initial and final configurations match @{text cf}\nand @{text cf'}, respectively. Then, the main theorem is derived as a straightforward consequence of\nthis lemma and of the previous lemma @{thm [source] ccomp_correct}.\n\n\\null\n\\<close>"], ["", "lemma exec_execl [dest!]:\n \"P \\<turnstile> cf \\<rightarrow>* cf' \\<Longrightarrow> \\<exists>cfs. P \\<Turnstile> cfs \\<and> cfs \\<noteq> [] \\<and> hd cfs = cf \\<and> last cfs = cf'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> cf \\<rightarrow>* cf' \\<Longrightarrow>\n    \\<exists>cfs.\n       P \\<Turnstile> cfs \\<and>\n       cfs \\<noteq> [] \\<and> hd cfs = cf \\<and> last cfs = cf'", "by (erule star.induct, force, erule exE, rule list.exhaust, blast,\n simp del: last.simps, rule exI, subst execl.simps(1), simp)"], ["", "theorem ccomp_exec:\n \"ccomp c \\<turnstile> (0, s, stk) \\<rightarrow>* (size (ccomp c), s', stk') \\<Longrightarrow> (c, s) \\<Rightarrow> s' \\<and> stk' = stk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccomp c \\<turnstile> (0, s, stk) \\<rightarrow>*\n    (size (ccomp c), s', stk') \\<Longrightarrow>\n    (c, s) \\<Rightarrow> s' \\<and> stk' = stk", "by (insert ccomp_correct, force simp: hd_conv_nth last_conv_nth execl_all_def cpred_def)"], ["", "end"]]}