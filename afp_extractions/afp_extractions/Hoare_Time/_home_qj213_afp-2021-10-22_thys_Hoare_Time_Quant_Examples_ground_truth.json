{"file_name": "/home/qj213/afp-2021-10-22/thys/Hoare_Time/Quant_Examples.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hoare_Time", "problem_names": ["lemma example: \"\\<turnstile>\\<^sub>2 {\\<lambda>s. enat (2 + 3*n) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\"", "lemma example_sound:  \"\\<Turnstile>\\<^sub>2 {\\<lambda>s. enat (2 + 3*n) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\"", "lemma \"\\<turnstile>\\<^sub>2 {\\<lambda>s. enat (2 + 3*n) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\""], "translations": [["", "lemma example: \"\\<turnstile>\\<^sub>2 {\\<lambda>s. enat (2 + 3*n) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "apply(rule Seq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0 {?P\\<^sub>2}\n 2. \\<turnstile>\\<^sub>2 {?P\\<^sub>2} wsum {\\<lambda>s. 0}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2 {?P\\<^sub>2} wsum {\\<lambda>s. 0}\n 2. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0 {?P\\<^sub>2}", "apply(rule conseq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2 {?P3} wsum {?Q3}\n 2. \\<And>s. ?P3 s \\<le> ?P\\<^sub>2 s\n 3. \\<And>s. 0 \\<le> ?Q3 s\n 4. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0 {?P\\<^sub>2}", "apply(rule While[where I=\"\\<lambda>s. enat (3 * nat (s ''x''))\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (3 * nat (s ''x'')) +\n                             \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                         ''y'' ::= Plus (V ''y'') (V ''x'');;\n                         ''x'' ::= Plus (V ''x'') (N (- 1))\n                         {\\<lambda>t. enat (3 * nat (t ''x'')) + 1}\n 2. \\<And>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 3. \\<And>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0 {?P\\<^sub>2}", "apply(rule Seq)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (3 * nat (s ''x'')) +\n                             \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                         ''y'' ::= Plus (V ''y'') (V ''x'') {?P\\<^sub>29}\n 2. \\<turnstile>\\<^sub>2 {?P\\<^sub>29} ''x'' ::= Plus (V ''x'') (N (- 1))\n                         {\\<lambda>t. enat (3 * nat (t ''x'')) + 1}\n 3. \\<And>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 4. \\<And>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0 {?P\\<^sub>2}", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<turnstile>\\<^sub>2 {?P\\<^sub>29} ''x'' ::= Plus (V ''x'') (N (- 1))\n                         {\\<lambda>t. enat (3 * nat (t ''x'')) + 1}\n 2. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (3 * nat (s ''x'')) +\n                             \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                         ''y'' ::= Plus (V ''y'') (V ''x'') {?P\\<^sub>29}\n 3. \\<And>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 4. \\<And>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0 {?P\\<^sub>2}", "apply(rule Assign)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (3 * nat (s ''x'')) +\n                             \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                         ''y'' ::= Plus (V ''y'') (V ''x'')\n                         {\\<lambda>s.\n                             eSuc\n                              (enat\n                                (3 *\n                                 nat ((s[Plus (V ''x'') (N (- 1))/''x''])\n ''x'')) +\n                               1)}\n 2. \\<And>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 3. \\<And>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0 {?P\\<^sub>2}", "apply(rule Assign')"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<forall>s.\n       eSuc\n        (eSuc\n          (enat\n            (3 *\n             nat (((s[Plus (V ''y'')\n                       (V ''x'')/''y''])[Plus (V ''x'') (N (- 1))/''x''])\n                   ''x'')) +\n           1))\n       \\<le> enat (3 * nat (s ''x'')) +\n             \\<up> (bval (Less (N 0) (V ''x'')) s)\n 2. \\<And>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 3. \\<And>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0 {?P\\<^sub>2}", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<forall>s.\n       eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n       \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<And>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 3. \\<And>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0 {?P\\<^sub>2}", "apply(safe)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s.\n       eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n       \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<And>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 3. \\<And>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0 {?P\\<^sub>2}", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(cases \"0 < s ''x''\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x''))\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply (smt Suc_eq_plus1 Suc_nat_eq_nat_zadd1 distrib_left_numeral eSuc_numeral enat_numeral eq_iff iadd_Suc_right nat_mult_1_right one_add_one plus_1_eSuc(1) plus_enat_simps(1) semiring_norm(5))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 2. \\<And>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 3. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0 {?P\\<^sub>2}", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 2. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0\n                         {\\<lambda>s. enat (3 * nat (s ''x'')) + 1}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0\n                         {\\<lambda>s. enat (3 * nat (s ''x'')) + 1}", "apply(rule Assign')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (enat (3 * nat ((s[N 0/''y'']) ''x'')) + 1)\n       \\<le> enat (2 + 3 * n) + \\<up> (s ''x'' = int n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (enat (3 * nat (s ''x'')) + 1)\n       \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (enat (3 * nat (s ''x'')) + 1)\n       \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply(cases \"s ''x'' = int n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. s ''x'' = int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)\n 2. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. s ''x'' = int n \\<Longrightarrow>\n    eSuc (enat (3 * n) + 1) \\<le> enat (Suc (Suc (3 * n)))\n 2. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply (simp add: eSuc_enat plus_1_eSuc(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma example_sound:  \"\\<Turnstile>\\<^sub>2 {\\<lambda>s. enat (2 + 3*n) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n    ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "apply(rule hoare2_sound)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "apply (rule example)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Examples for the use of the VCG\\<close>"], ["", "abbreviation \"Wsum ==  \n  {\\<lambda>s. enat (3 * nat (s ''x''))} WHILE Less (N 0) (V ''x'')\n  DO (''y'' ::= Plus (V ''y'') (V ''x'');;\n      ''x'' ::= Plus (V ''x'') (N (- 1)))\""], ["", "lemma \"\\<turnstile>\\<^sub>2 {\\<lambda>s. enat (2 + 3*n) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "have \"\\<turnstile>\\<^sub>2 {\\<lambda>s. enat (2 + 3*n) + emb (s ''x'' = int n)} strip (''y'' ::= N 0;; Wsum) {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         strip (''y'' ::= N 0;; Wsum) {\\<lambda>s. 0}", "apply(rule vc_sound')"], ["proof (prove)\ngoal (2 subgoals):\n 1. vc (''y'' ::= N 0;; Wsum) (\\<lambda>s. 0)\n 2. \\<forall>s.\n       pre (''y'' ::= N 0;; Wsum) (\\<lambda>s. 0) s\n       \\<le> enat (2 + 3 * n) + \\<up> (s ''x'' = int n)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. vc (''y'' ::= N 0;; Wsum) (\\<lambda>s. 0)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n       \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n       \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(cases \"0 < s ''x''\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x''))\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply (smt Suc_eq_plus1 Suc_nat_eq_nat_zadd1 distrib_left_numeral eSuc_numeral enat_numeral eq_iff iadd_Suc_right nat_mult_1_right one_add_one plus_1_eSuc(1) plus_enat_simps(1) semiring_norm(5))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       pre (''y'' ::= N 0;; Wsum) (\\<lambda>s. 0) s\n       \\<le> enat (2 + 3 * n) + \\<up> (s ''x'' = int n)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       pre (''y'' ::= N 0;; Wsum) (\\<lambda>s. 0) s\n       \\<le> enat (2 + 3 * n) + \\<up> (s ''x'' = int n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (enat (3 * nat (s ''x'')) + 1)\n       \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (enat (3 * nat (s ''x'')) + 1)\n       \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply(cases \"s ''x'' = int n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. s ''x'' = int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)\n 2. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. s ''x'' = int n \\<Longrightarrow>\n    eSuc (enat (3 * n) + 1) \\<le> enat (Suc (Suc (3 * n)))\n 2. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply (simp add: eSuc_enat plus_1_eSuc(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                           enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                       strip (''y'' ::= N 0;; Wsum) {\\<lambda>s. 0}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "then"], ["proof (chain)\npicking this:\n  \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                           enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                       strip (''y'' ::= N 0;; Wsum) {\\<lambda>s. 0}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                           enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                       strip (''y'' ::= N 0;; Wsum) {\\<lambda>s. 0}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                         ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "by simp"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                           enat (2 + 3 * n) + \\<up> (s ''x'' = int n)}\n                       ''y'' ::= N 0;; wsum {\\<lambda>s. 0}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}