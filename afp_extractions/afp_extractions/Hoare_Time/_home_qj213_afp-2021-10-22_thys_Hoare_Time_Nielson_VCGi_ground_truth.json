{"file_name": "/home/qj213/afp-2021-10-22/thys/Hoare_Time/Nielson_VCGi.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hoare_Time", "problem_names": ["lemma expr_lupd: \"x \\<notin> supportE Q \\<Longrightarrow> Q (l(x:=n)) = Q l\"", "lemma finite_varnewacom: \"finite (varnewacom C)\"", "lemma preT_constant: \"preT C (%_. a) = (%_. a)\"", "lemma preT_linear: \"preT C (%s. k * e s) = (%s. k * preT C e s)\"", "lemma fune_mono: \"A \\<subseteq> B \\<Longrightarrow> fune C A \\<subseteq> fune C B\"", "lemma TQ: \"preT C e s = e (postQ C s)\"", "lemma assumes I: \"I z s\" and\n  i:   \"\\<And>s z. I (Suc z) s \\<Longrightarrow> bval b s \\<and> I z (postQ C s)\"\n  and  ii:  \"\\<And>s. I 0 s \\<Longrightarrow> ~ bval b s\"\nshows times_z: \"times s b C = z\"", "lemma TzQ: \"preTz C e n s = e (postQz C s n)\"", "lemma qdeps_mono: \"A \\<subseteq> B \\<Longrightarrow> qdeps C A \\<subseteq> qdeps C B\"", "lemma supportE_if: \"supportE (\\<lambda>l s. if b s then A l s else B l s)\n  \\<subseteq> supportE A \\<union> supportE B\"", "lemma supportE_preT: \"supportE (%l. preT C (e l)) \\<subseteq> supportE e\"", "lemma supportE_twicepreT: \"supportE (%l. preT C1 (preT C2 (e l))) \\<subseteq> supportE e\"", "lemma supportE_preTz: \"supportE (%l. preTz C (e l) n) \\<subseteq> supportE e\"", "lemma supportE_preTz_Un: (* like in support_wpw_Un *)\n  \"supportE (\\<lambda>l. preTz C (e l) (l x)) \\<subseteq> insert x (UN n. supportE (\\<lambda>l. preTz C (e l) n))\"", "lemma support_eq: \"support (\\<lambda>l s. l x = E l s) \\<subseteq> supportE E \\<union> {x}\"", "lemma support_impl_in: \"G e \\<longrightarrow> support (\\<lambda>l s.  H e l s) \\<subseteq> T\n  \\<Longrightarrow> support (\\<lambda>l s. G e \\<longrightarrow>  H e l s) \\<subseteq> T\"", "lemma support_supportE: \"\\<And>P e. support (\\<lambda>l s.  P (e l) s) \\<subseteq> supportE e\"", "lemma support_pre: \"support (pre C Q) \\<subseteq> support Q \\<union> varacom C\"", "lemma finite_support_pre: \"finite (support Q)  \\<Longrightarrow> finite (varacom C) \\<Longrightarrow>  finite (support (pre C Q))\"", "lemma supportE_single: \"supportE (\\<lambda>l s. P) = {}\"", "lemma supportE_plus: \"supportE (\\<lambda>l s. e1 l s + e2 l s) \\<subseteq> supportE e1 \\<union> supportE e2\"", "lemma supportE_Suc: \"supportE (\\<lambda>l s. Suc (e1 l s)) = supportE e1\"", "lemma supportE_single2: \"supportE (\\<lambda>l . P) = {}\"", "lemma supportE_time: \"supportE (\\<lambda>l. time C) = {}\"", "lemma \"\\<And>s. (\\<forall>l. I (l(x:=0)) s) = (\\<forall>l. l x = 0 \\<longrightarrow> I l s)\"", "lemma \"\\<And>s. (\\<forall>l. I (l(x:=Suc (l x))) s) = (\\<forall>l. (\\<exists>n. l x = Suc n) \\<longrightarrow> I l s)\"", "lemma funStart_prop1: \"x \\<in> (funStar f) x\"", "lemma funStart_prop2: \"f x \\<subseteq> (funStar f) x\"", "lemma allg: \n  assumes U2: \"\\<And>l s n x. x\\<in> fst ` upds \\<Longrightarrow> A (l(x := n))  = A l\"\n  shows\n    \"fst ` set xs \\<subseteq> fst ` upds \\<Longrightarrow> A (ListUpdate l'' xs q) = A l''\"", "lemma ListUpdate_E: \"ListUpdateE f xs = ListUpdate f xs (%e x. e)\"", "lemma allg_E: fixes A::assn2\n    assumes \n   \" (\\<And>l s n x. x \\<in> fst ` upds \\<Longrightarrow> A (l(x := n)) = A l)\" \"fst ` set xs \\<subseteq> fst ` upds\"\n   shows \"A (ListUpdateE f xs) = A f\"", "lemma ListUpdateE_updates: \"distinct (map fst xs) \\<Longrightarrow> x \\<in> set xs \\<Longrightarrow> ListUpdateE l'' xs (fst x) = fst (snd x)\"", "lemma ListUpdate_updates: \"x \\<in> fst ` (set xs) \\<Longrightarrow> ListUpdate l'' xs (%e. l) x = l x\"", "lemma preList_Seq: \"preList upds (C1;; C2) l s = preList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) C1 l s\"", "lemma [simp]: \"support (\\<lambda>a b. True) = {}\"", "lemma support_preList: \"support (preList upds C1) \\<subseteq> lesvars upds\"", "lemma preListpreSet: \"preSet (set xs) C l s \\<Longrightarrow> preList xs C l s\"", "lemma preSetpreList: \"preList xs C l s \\<Longrightarrow>  preSet (set xs) C l s\"", "lemma preSetpreList_eq: \"preList xs C l s = preSet (set xs) C l s\"", "lemma \"postList xs l s = (foldr (\\<lambda>(x,e,v) acc l s. l x = e s \\<and> acc l s) xs (%l s. True)) l s\"", "lemma support_postList: \"support (postList xs) \\<subseteq> lesvars xs\"", "lemma postList_preList: \"postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l s = preList upds C2 l s\"", "lemma postSetpostList: \"postList xs l s \\<Longrightarrow>  postSet (set xs) l s\"", "lemma postListpostSet: \"postSet (set xs) l s \\<Longrightarrow> postList xs l s\"", "lemma postListpostSet2: \" postList xs l s = postSet (set xs) l s \"", "lemma ListAskip: \"preList xs Askip l s = postList xs  l s\"", "lemma SetAskip: \"preSet U Askip l s = postSet U l s\"", "lemma ListAassign: \"preList upds (Aassign x1 x2) l s = postList upds l (s[x2/x1])\"", "lemma SetAassign: \"preSet U (Aassign x1 x2) l s = postSet U l (s[x2/x1])\"", "lemma ListAconseq: \"preList upds (Aconseq x1 x2 x3 C) l s = preList upds C l s\"", "lemma SetAconseq: \"preSet U (Aconseq x1 x2 x3 C) l s = preSet U C l s\"", "lemma ListAif1: \"bval b s \\<Longrightarrow> preList upds (IF b THEN C1 ELSE C2) l s = preList upds C1 l s\"", "lemma SetAif1: \"bval b s \\<Longrightarrow> preSet upds (IF b THEN C1 ELSE C2) l s = preSet upds C1 l s\"", "lemma ListAif2: \"~ bval b s \\<Longrightarrow> preList upds (IF b THEN C1 ELSE C2) l s = preList upds C2 l s\"", "lemma SetAif2: \"~ bval b s \\<Longrightarrow> preSet upds (IF b THEN C1 ELSE C2) l s = preSet upds C2 l s\"", "lemma k4If: \"K4 upds LVQ C1 Q \\<Longrightarrow> K4 upds LVQ C2 Q \\<Longrightarrow> K4 upds LVQ (IF b THEN C1 ELSE C2) Q\"", "lemma vc_sound: \"vc C Q LVQ LVE \\<Longrightarrow> finite (support Q)\n  \\<Longrightarrow> fst ` (set upds) \\<inter> varacom C = {} \\<Longrightarrow> distinct (map fst upds)\n  \\<Longrightarrow> finite (varacom C) \n  \\<Longrightarrow> (\\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2)\n  \\<Longrightarrow> (\\<forall>l s1 s2. s1 = s2 on LVE \\<longrightarrow> postList upds l s1 = postList upds l s2)\n  \\<Longrightarrow> (\\<forall>(a,b,c)\\<in>set upds. (\\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2))             \\<comment> \\<open>\\<open>c\\<close> are really the variables \\<open>b\\<close> depends on\\<close>\n  \\<Longrightarrow> (\\<Union>(a,b,c)\\<in>set upds. c) \\<subseteq> LVE                                     \\<comment> \\<open>in \\<open>LV\\<close> are all the variables that the expressions in \\<open>upds\\<close> depend on\\<close>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {%l s. pre C Q l s \\<and> preList upds C l s} strip C { time C \\<Down> %l s. Q l s \\<and> postList upds l s}\n  \\<and> ((\\<forall>l s. pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>  K4 upds LVQ C Q)\""], "translations": [["", "lemma expr_lupd: \"x \\<notin> supportE Q \\<Longrightarrow> Q (l(x:=n)) = Q l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> supportE Q \\<Longrightarrow> Q (l(x := n)) = Q l", "by(simp add: supportE_def fun_upd_other fun_eq_iff)\n    (metis (no_types, lifting) fun_upd_def)"], ["", "fun varacom :: \"acom \\<Rightarrow> lvname set\" where\n  \"varacom (C\\<^sub>1;; C\\<^sub>2)= varacom C\\<^sub>1 \\<union> varacom C\\<^sub>2\"\n| \"varacom (IF b THEN C\\<^sub>1 ELSE C\\<^sub>2)= varacom C\\<^sub>1 \\<union> varacom C\\<^sub>2\"\n| \"varacom ({(P,_)/(Qannot,_)/_} CONSEQ C)= support P \\<union> varacom C \\<union> support Qannot\"\n| \"varacom ({((I,_),(S,(E,Es)))} WHILE b DO C) = support I \\<union> varacom C \"\n| \"varacom _ = {}\""], ["", "fun varnewacom :: \"acom \\<Rightarrow> lvname set\" where\n  \"varnewacom (C\\<^sub>1;; C\\<^sub>2)= varnewacom C\\<^sub>1 \\<union> varnewacom C\\<^sub>2\"\n| \"varnewacom (IF b THEN C\\<^sub>1 ELSE C\\<^sub>2)= varnewacom C\\<^sub>1 \\<union> varnewacom C\\<^sub>2\"\n| \"varnewacom ({_/_/_} CONSEQ C)= varnewacom C\"\n| \"varnewacom ({(I,(S,(E,Es)))} WHILE b DO C) = varnewacom C\"\n| \"varnewacom _ = {}\""], ["", "lemma finite_varnewacom: \"finite (varnewacom C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (varnewacom C)", "by (induct C) (auto)"], ["", "fun wf :: \"acom \\<Rightarrow> lvname set \\<Rightarrow> bool\" where\n  \"wf SKIP _ = True\" |\n  \"wf (x ::= a) _ = True\" |\n  \"wf (C\\<^sub>1;; C\\<^sub>2) S = (wf C\\<^sub>1 (S \\<union> varnewacom C\\<^sub>2) \\<and> wf C\\<^sub>2 S)\" |\n  \"wf (IF b THEN C\\<^sub>1 ELSE C\\<^sub>2) S = (wf C\\<^sub>1 S \\<and> wf C\\<^sub>2 S)\" |\n  \"wf ({_/(Qannot,_)/_} CONSEQ C) S = (finite (support Qannot) \\<and> wf C S)\" |\n  \"wf ({(_,(_,(_,Es)))} WHILE b DO C) S = ( wf C S)\""], ["", "text\\<open>Weakest precondition from annotated commands:\\<close>"], ["", "fun preT :: \"acom \\<Rightarrow> tbd \\<Rightarrow> tbd\" where\n  \"preT SKIP e = e\" |\n  \"preT (x ::= a) e = (\\<lambda>s. e(s(x := aval a s)))\" |\n  \"preT (C\\<^sub>1;; C\\<^sub>2) e = preT C\\<^sub>1 (preT C\\<^sub>2 e)\" |\n  \"preT ({_/_/_} CONSEQ C) e = preT C e\" |\n  \"preT (IF b THEN C\\<^sub>1 ELSE C\\<^sub>2) e =\n  (\\<lambda>s. if bval b s then preT C\\<^sub>1 e s else preT C\\<^sub>2 e s)\" |\n  \"preT ({(_,(S,_))} WHILE b DO C) e = e o S\""], ["", "lemma preT_constant: \"preT C (%_. a) = (%_. a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preT C (\\<lambda>_. a) = (\\<lambda>_. a)", "by(induct C, auto)"], ["", "lemma preT_linear: \"preT C (%s. k * e s) = (%s. k * preT C e s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preT C (\\<lambda>s. k * e s) = (\\<lambda>s. k * preT C e s)", "by (induct C arbitrary: e, auto)"], ["", "fun postQ :: \"acom \\<Rightarrow> state \\<Rightarrow> state\" where (* seems to be forward?! *)\n  \"postQ SKIP s = s\" |\n  \"postQ (x ::= a) s =  s(x := aval a s)\" |\n  \"postQ (C\\<^sub>1;; C\\<^sub>2) s = postQ C\\<^sub>2 (postQ C\\<^sub>1 s)\" |\n  \"postQ ({_/_/_} CONSEQ C) s = postQ C s\" |\n  \"postQ (IF b THEN C\\<^sub>1 ELSE C\\<^sub>2) s =\n  (if bval b s then postQ C\\<^sub>1 s else postQ C\\<^sub>2 s)\" |\n  \"postQ ({(_,(S,_))} WHILE b DO C) s = S s\""], ["", "(* function that, given a Command C and a set of variables \n  gives the set of variables, that Es depends on,\n  meaning a set S where\n  if s1 = s2 on S \\<longrightarrow> \\<forall>x:Es. postQ C s1 x = postQ C s2 x\n*)"], ["", "fun fune :: \"acom \\<Rightarrow> vname set \\<Rightarrow> vname set\" where\n  \"fune SKIP LV = LV\" |\n  \"fune (x ::= a) LV = LV \\<union> vars a\" |\n  \"fune (C\\<^sub>1;; C\\<^sub>2) LV = fune C\\<^sub>1 (fune C\\<^sub>2 LV)\" |\n  \"fune ({_/_/_} CONSEQ C) LV = fune C LV\" |\n  \"fune (IF b THEN C\\<^sub>1 ELSE C\\<^sub>2) LV = vars b \\<union> fune C\\<^sub>1 LV \\<union> fune C\\<^sub>2 LV\" |\n  \"fune ({(_,(S,(E,Es,SS)))} WHILE b DO C) LV = (\\<Union>x\\<in>LV. SS x)\""], ["", "lemma fune_mono: \"A \\<subseteq> B \\<Longrightarrow> fune C A \\<subseteq> fune C B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> B \\<Longrightarrow> fune C A \\<subseteq> fune C B", "proof(induct C arbitrary: A B)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>A B.\n       A \\<subseteq> B \\<Longrightarrow> fune SKIP A \\<subseteq> fune SKIP B\n 2. \\<And>x1 x2 A B.\n       A \\<subseteq> B \\<Longrightarrow>\n       fune (x1 ::= x2) A \\<subseteq> fune (x1 ::= x2) B\n 3. \\<And>C1 C2 A B.\n       \\<lbrakk>\\<And>A B.\n                   A \\<subseteq> B \\<Longrightarrow>\n                   fune C1 A \\<subseteq> fune C1 B;\n        \\<And>A B.\n           A \\<subseteq> B \\<Longrightarrow>\n           fune C2 A \\<subseteq> fune C2 B;\n        A \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> fune (C1;; C2) A \\<subseteq> fune (C1;; C2) B\n 4. \\<And>x1 C1 C2 A B.\n       \\<lbrakk>\\<And>A B.\n                   A \\<subseteq> B \\<Longrightarrow>\n                   fune C1 A \\<subseteq> fune C1 B;\n        \\<And>A B.\n           A \\<subseteq> B \\<Longrightarrow>\n           fune C2 A \\<subseteq> fune C2 B;\n        A \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> fune (IF x1 THEN C1 ELSE C2) A\n                         \\<subseteq> fune (IF x1 THEN C1 ELSE C2) B\n 5. \\<And>x1 x2 x3 C A B.\n       \\<lbrakk>\\<And>A B.\n                   A \\<subseteq> B \\<Longrightarrow>\n                   fune C A \\<subseteq> fune C B;\n        A \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> fune ({x1/x2/x3} CONSEQ C) A\n                         \\<subseteq> fune ({x1/x2/x3} CONSEQ C) B\n 6. \\<And>x1 x2 C A B.\n       \\<lbrakk>\\<And>A B.\n                   A \\<subseteq> B \\<Longrightarrow>\n                   fune C A \\<subseteq> fune C B;\n        A \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> fune ({x1} WHILE x2 DO C) A\n                         \\<subseteq> fune ({x1} WHILE x2 DO C) B", "case (Awhile x1 x2 C)"], ["proof (state)\nthis:\n  ?A \\<subseteq> ?B \\<Longrightarrow> fune C ?A \\<subseteq> fune C ?B\n  A \\<subseteq> B\n\ngoal (6 subgoals):\n 1. \\<And>A B.\n       A \\<subseteq> B \\<Longrightarrow> fune SKIP A \\<subseteq> fune SKIP B\n 2. \\<And>x1 x2 A B.\n       A \\<subseteq> B \\<Longrightarrow>\n       fune (x1 ::= x2) A \\<subseteq> fune (x1 ::= x2) B\n 3. \\<And>C1 C2 A B.\n       \\<lbrakk>\\<And>A B.\n                   A \\<subseteq> B \\<Longrightarrow>\n                   fune C1 A \\<subseteq> fune C1 B;\n        \\<And>A B.\n           A \\<subseteq> B \\<Longrightarrow>\n           fune C2 A \\<subseteq> fune C2 B;\n        A \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> fune (C1;; C2) A \\<subseteq> fune (C1;; C2) B\n 4. \\<And>x1 C1 C2 A B.\n       \\<lbrakk>\\<And>A B.\n                   A \\<subseteq> B \\<Longrightarrow>\n                   fune C1 A \\<subseteq> fune C1 B;\n        \\<And>A B.\n           A \\<subseteq> B \\<Longrightarrow>\n           fune C2 A \\<subseteq> fune C2 B;\n        A \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> fune (IF x1 THEN C1 ELSE C2) A\n                         \\<subseteq> fune (IF x1 THEN C1 ELSE C2) B\n 5. \\<And>x1 x2 x3 C A B.\n       \\<lbrakk>\\<And>A B.\n                   A \\<subseteq> B \\<Longrightarrow>\n                   fune C A \\<subseteq> fune C B;\n        A \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> fune ({x1/x2/x3} CONSEQ C) A\n                         \\<subseteq> fune ({x1/x2/x3} CONSEQ C) B\n 6. \\<And>x1 x2 C A B.\n       \\<lbrakk>\\<And>A B.\n                   A \\<subseteq> B \\<Longrightarrow>\n                   fune C A \\<subseteq> fune C B;\n        A \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> fune ({x1} WHILE x2 DO C) A\n                         \\<subseteq> fune ({x1} WHILE x2 DO C) B", "obtain a b c d e f where a: \"x1 = (a,b,c,d,e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b c d e.\n        x1 = (a, b, c, d, e) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases5"], ["proof (prove)\nusing this:\n  (\\<And>a b c d e.\n      ?y = (a, b, c, d, e) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a b c d e.\n        x1 = (a, b, c, d, e) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x1 = (a, b, c, d, e)\n\ngoal (6 subgoals):\n 1. \\<And>A B.\n       A \\<subseteq> B \\<Longrightarrow> fune SKIP A \\<subseteq> fune SKIP B\n 2. \\<And>x1 x2 A B.\n       A \\<subseteq> B \\<Longrightarrow>\n       fune (x1 ::= x2) A \\<subseteq> fune (x1 ::= x2) B\n 3. \\<And>C1 C2 A B.\n       \\<lbrakk>\\<And>A B.\n                   A \\<subseteq> B \\<Longrightarrow>\n                   fune C1 A \\<subseteq> fune C1 B;\n        \\<And>A B.\n           A \\<subseteq> B \\<Longrightarrow>\n           fune C2 A \\<subseteq> fune C2 B;\n        A \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> fune (C1;; C2) A \\<subseteq> fune (C1;; C2) B\n 4. \\<And>x1 C1 C2 A B.\n       \\<lbrakk>\\<And>A B.\n                   A \\<subseteq> B \\<Longrightarrow>\n                   fune C1 A \\<subseteq> fune C1 B;\n        \\<And>A B.\n           A \\<subseteq> B \\<Longrightarrow>\n           fune C2 A \\<subseteq> fune C2 B;\n        A \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> fune (IF x1 THEN C1 ELSE C2) A\n                         \\<subseteq> fune (IF x1 THEN C1 ELSE C2) B\n 5. \\<And>x1 x2 x3 C A B.\n       \\<lbrakk>\\<And>A B.\n                   A \\<subseteq> B \\<Longrightarrow>\n                   fune C A \\<subseteq> fune C B;\n        A \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> fune ({x1/x2/x3} CONSEQ C) A\n                         \\<subseteq> fune ({x1/x2/x3} CONSEQ C) B\n 6. \\<And>x1 x2 C A B.\n       \\<lbrakk>\\<And>A B.\n                   A \\<subseteq> B \\<Longrightarrow>\n                   fune C A \\<subseteq> fune C B;\n        A \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> fune ({x1} WHILE x2 DO C) A\n                         \\<subseteq> fune ({x1} WHILE x2 DO C) B", "from Awhile"], ["proof (chain)\npicking this:\n  ?A \\<subseteq> ?B \\<Longrightarrow> fune C ?A \\<subseteq> fune C ?B\n  A \\<subseteq> B", "show ?case"], ["proof (prove)\nusing this:\n  ?A \\<subseteq> ?B \\<Longrightarrow> fune C ?A \\<subseteq> fune C ?B\n  A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. fune ({x1} WHILE x2 DO C) A \\<subseteq> fune ({x1} WHILE x2 DO C) B", "unfolding a"], ["proof (prove)\nusing this:\n  ?A \\<subseteq> ?B \\<Longrightarrow> fune C ?A \\<subseteq> fune C ?B\n  A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. fune ({(a, b, c, d, e)} WHILE x2 DO C) A\n    \\<subseteq> fune ({(a, b, c, d, e)} WHILE x2 DO C) B", "by(auto)"], ["proof (state)\nthis:\n  fune ({x1} WHILE x2 DO C) A \\<subseteq> fune ({x1} WHILE x2 DO C) B\n\ngoal (5 subgoals):\n 1. \\<And>A B.\n       A \\<subseteq> B \\<Longrightarrow> fune SKIP A \\<subseteq> fune SKIP B\n 2. \\<And>x1 x2 A B.\n       A \\<subseteq> B \\<Longrightarrow>\n       fune (x1 ::= x2) A \\<subseteq> fune (x1 ::= x2) B\n 3. \\<And>C1 C2 A B.\n       \\<lbrakk>\\<And>A B.\n                   A \\<subseteq> B \\<Longrightarrow>\n                   fune C1 A \\<subseteq> fune C1 B;\n        \\<And>A B.\n           A \\<subseteq> B \\<Longrightarrow>\n           fune C2 A \\<subseteq> fune C2 B;\n        A \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> fune (C1;; C2) A \\<subseteq> fune (C1;; C2) B\n 4. \\<And>x1 C1 C2 A B.\n       \\<lbrakk>\\<And>A B.\n                   A \\<subseteq> B \\<Longrightarrow>\n                   fune C1 A \\<subseteq> fune C1 B;\n        \\<And>A B.\n           A \\<subseteq> B \\<Longrightarrow>\n           fune C2 A \\<subseteq> fune C2 B;\n        A \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> fune (IF x1 THEN C1 ELSE C2) A\n                         \\<subseteq> fune (IF x1 THEN C1 ELSE C2) B\n 5. \\<And>x1 x2 x3 C A B.\n       \\<lbrakk>\\<And>A B.\n                   A \\<subseteq> B \\<Longrightarrow>\n                   fune C A \\<subseteq> fune C B;\n        A \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> fune ({x1/x2/x3} CONSEQ C) A\n                         \\<subseteq> fune ({x1/x2/x3} CONSEQ C) B", "qed (auto simp add: le_supI1 le_supI2)"], ["", "lemma TQ: \"preT C e s = e (postQ C s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preT C e s = e (postQ C s)", "apply(induct C arbitrary: e s)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>e s. preT SKIP e s = e (postQ SKIP s)\n 2. \\<And>x1 x2 e s. preT (x1 ::= x2) e s = e (postQ (x1 ::= x2) s)\n 3. \\<And>C1 C2 e s.\n       \\<lbrakk>\\<And>e s. preT C1 e s = e (postQ C1 s);\n        \\<And>e s. preT C2 e s = e (postQ C2 s)\\<rbrakk>\n       \\<Longrightarrow> preT (C1;; C2) e s = e (postQ (C1;; C2) s)\n 4. \\<And>x1 C1 C2 e s.\n       \\<lbrakk>\\<And>e s. preT C1 e s = e (postQ C1 s);\n        \\<And>e s. preT C2 e s = e (postQ C2 s)\\<rbrakk>\n       \\<Longrightarrow> preT (IF x1 THEN C1 ELSE C2) e s =\n                         e (postQ (IF x1 THEN C1 ELSE C2) s)\n 5. \\<And>x1 x2 x3 C e s.\n       (\\<And>e s. preT C e s = e (postQ C s)) \\<Longrightarrow>\n       preT ({x1/x2/x3} CONSEQ C) e s = e (postQ ({x1/x2/x3} CONSEQ C) s)\n 6. \\<And>x1 x2 C e s.\n       (\\<And>e s. preT C e s = e (postQ C s)) \\<Longrightarrow>\n       preT ({x1} WHILE x2 DO C) e s = e (postQ ({x1} WHILE x2 DO C) s)", "by (auto)"], ["", "(* given a state, how often will a While loop be evaluated ? *)"], ["", "function (domintros) times :: \"state \\<Rightarrow> bexp \\<Rightarrow> acom \\<Rightarrow> nat\" where\n  \"times s b C = (if bval b s then Suc (times (postQ C s) b C) else 0)\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>s b C. x = (s, b, C) \\<Longrightarrow> P) \\<Longrightarrow> P\n 2. \\<And>s b C sa ba Ca.\n       (s, b, C) = (sa, ba, Ca) \\<Longrightarrow>\n       (if bval b s then Suc (times_sumC (postQ C s, b, C)) else 0) =\n       (if bval ba sa then Suc (times_sumC (postQ Ca sa, ba, Ca)) else 0)", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma assumes I: \"I z s\" and\n  i:   \"\\<And>s z. I (Suc z) s \\<Longrightarrow> bval b s \\<and> I z (postQ C s)\"\n  and  ii:  \"\\<And>s. I 0 s \\<Longrightarrow> ~ bval b s\"\nshows times_z: \"times s b C = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nielson_VCGi.times s b C = z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Nielson_VCGi.times s b C = z", "have \"I z s \\<Longrightarrow> times_dom (s, b, C) \\<and> times s b C = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I z s \\<Longrightarrow>\n    times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z", "proof(induct z arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       I 0 s \\<Longrightarrow>\n       times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = 0\n 2. \\<And>z s.\n       \\<lbrakk>\\<And>s.\n                   I z s \\<Longrightarrow>\n                   times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z;\n        I (Suc z) s\\<rbrakk>\n       \\<Longrightarrow> times_dom (s, b, C) \\<and>\n                         Nielson_VCGi.times s b C = Suc z", "case 0"], ["proof (state)\nthis:\n  I 0 s\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       I 0 s \\<Longrightarrow>\n       times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = 0\n 2. \\<And>z s.\n       \\<lbrakk>\\<And>s.\n                   I z s \\<Longrightarrow>\n                   times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z;\n        I (Suc z) s\\<rbrakk>\n       \\<Longrightarrow> times_dom (s, b, C) \\<and>\n                         Nielson_VCGi.times s b C = Suc z", "have A: \"times_dom (s, b, C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. times_dom (s, b, C)", "apply(rule times.domintros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow> times_dom (postQ C s, b, C)", "apply(simp add:  ii[OF 0] )"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  times_dom (s, b, C)\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       I 0 s \\<Longrightarrow>\n       times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = 0\n 2. \\<And>z s.\n       \\<lbrakk>\\<And>s.\n                   I z s \\<Longrightarrow>\n                   times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z;\n        I (Suc z) s\\<rbrakk>\n       \\<Longrightarrow> times_dom (s, b, C) \\<and>\n                         Nielson_VCGi.times s b C = Suc z", "have B: \"times s b C = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nielson_VCGi.times s b C = 0", "using times.psimps[OF A]"], ["proof (prove)\nusing this:\n  Nielson_VCGi.times s b C =\n  (if bval b s then Suc (Nielson_VCGi.times (postQ C s) b C) else 0)\n\ngoal (1 subgoal):\n 1. Nielson_VCGi.times s b C = 0", "by(simp add:  ii[OF 0])"], ["proof (state)\nthis:\n  Nielson_VCGi.times s b C = 0\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       I 0 s \\<Longrightarrow>\n       times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = 0\n 2. \\<And>z s.\n       \\<lbrakk>\\<And>s.\n                   I z s \\<Longrightarrow>\n                   times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z;\n        I (Suc z) s\\<rbrakk>\n       \\<Longrightarrow> times_dom (s, b, C) \\<and>\n                         Nielson_VCGi.times s b C = Suc z", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = 0", "using A B"], ["proof (prove)\nusing this:\n  times_dom (s, b, C)\n  Nielson_VCGi.times s b C = 0\n\ngoal (1 subgoal):\n 1. times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = 0", "by simp"], ["proof (state)\nthis:\n  times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = 0\n\ngoal (1 subgoal):\n 1. \\<And>z s.\n       \\<lbrakk>\\<And>s.\n                   I z s \\<Longrightarrow>\n                   times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z;\n        I (Suc z) s\\<rbrakk>\n       \\<Longrightarrow> times_dom (s, b, C) \\<and>\n                         Nielson_VCGi.times s b C = Suc z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z s.\n       \\<lbrakk>\\<And>s.\n                   I z s \\<Longrightarrow>\n                   times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z;\n        I (Suc z) s\\<rbrakk>\n       \\<Longrightarrow> times_dom (s, b, C) \\<and>\n                         Nielson_VCGi.times s b C = Suc z", "case (Suc z)"], ["proof (state)\nthis:\n  I z ?s \\<Longrightarrow>\n  times_dom (?s, b, C) \\<and> Nielson_VCGi.times ?s b C = z\n  I (Suc z) s\n\ngoal (1 subgoal):\n 1. \\<And>z s.\n       \\<lbrakk>\\<And>s.\n                   I z s \\<Longrightarrow>\n                   times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z;\n        I (Suc z) s\\<rbrakk>\n       \\<Longrightarrow> times_dom (s, b, C) \\<and>\n                         Nielson_VCGi.times s b C = Suc z", "from i[OF Suc(2)]"], ["proof (chain)\npicking this:\n  bval b s \\<and> I z (postQ C s)", "have bv: \"bval b s\"\n      and g:  \"I z (postQ C s)\""], ["proof (prove)\nusing this:\n  bval b s \\<and> I z (postQ C s)\n\ngoal (1 subgoal):\n 1. bval b s &&& I z (postQ C s)", "by simp_all"], ["proof (state)\nthis:\n  bval b s\n  I z (postQ C s)\n\ngoal (1 subgoal):\n 1. \\<And>z s.\n       \\<lbrakk>\\<And>s.\n                   I z s \\<Longrightarrow>\n                   times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z;\n        I (Suc z) s\\<rbrakk>\n       \\<Longrightarrow> times_dom (s, b, C) \\<and>\n                         Nielson_VCGi.times s b C = Suc z", "from Suc(1)[OF g]"], ["proof (chain)\npicking this:\n  times_dom (postQ C s, b, C) \\<and> Nielson_VCGi.times (postQ C s) b C = z", "have p1: \"times_dom (postQ C s, b, C)\"\n      and p2: \"times (postQ C s) b C = z\""], ["proof (prove)\nusing this:\n  times_dom (postQ C s, b, C) \\<and> Nielson_VCGi.times (postQ C s) b C = z\n\ngoal (1 subgoal):\n 1. times_dom (postQ C s, b, C) &&& Nielson_VCGi.times (postQ C s) b C = z", "by simp_all"], ["proof (state)\nthis:\n  times_dom (postQ C s, b, C)\n  Nielson_VCGi.times (postQ C s) b C = z\n\ngoal (1 subgoal):\n 1. \\<And>z s.\n       \\<lbrakk>\\<And>s.\n                   I z s \\<Longrightarrow>\n                   times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z;\n        I (Suc z) s\\<rbrakk>\n       \\<Longrightarrow> times_dom (s, b, C) \\<and>\n                         Nielson_VCGi.times s b C = Suc z", "have A: \"times_dom (s, b, C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. times_dom (s, b, C)", "apply(rule times.domintros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow> times_dom (postQ C s, b, C)", "apply(rule p1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  times_dom (s, b, C)\n\ngoal (1 subgoal):\n 1. \\<And>z s.\n       \\<lbrakk>\\<And>s.\n                   I z s \\<Longrightarrow>\n                   times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z;\n        I (Suc z) s\\<rbrakk>\n       \\<Longrightarrow> times_dom (s, b, C) \\<and>\n                         Nielson_VCGi.times s b C = Suc z", "have B: \"times s b C = Suc z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nielson_VCGi.times s b C = Suc z", "using times.psimps[OF A] bv p2"], ["proof (prove)\nusing this:\n  Nielson_VCGi.times s b C =\n  (if bval b s then Suc (Nielson_VCGi.times (postQ C s) b C) else 0)\n  bval b s\n  Nielson_VCGi.times (postQ C s) b C = z\n\ngoal (1 subgoal):\n 1. Nielson_VCGi.times s b C = Suc z", "by simp"], ["proof (state)\nthis:\n  Nielson_VCGi.times s b C = Suc z\n\ngoal (1 subgoal):\n 1. \\<And>z s.\n       \\<lbrakk>\\<And>s.\n                   I z s \\<Longrightarrow>\n                   times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z;\n        I (Suc z) s\\<rbrakk>\n       \\<Longrightarrow> times_dom (s, b, C) \\<and>\n                         Nielson_VCGi.times s b C = Suc z", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = Suc z", "using A B"], ["proof (prove)\nusing this:\n  times_dom (s, b, C)\n  Nielson_VCGi.times s b C = Suc z\n\ngoal (1 subgoal):\n 1. times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = Suc z", "by simp"], ["proof (state)\nthis:\n  times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = Suc z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  I z s \\<Longrightarrow>\n  times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z\n\ngoal (1 subgoal):\n 1. Nielson_VCGi.times s b C = z", "then"], ["proof (chain)\npicking this:\n  I z s \\<Longrightarrow>\n  times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z", "show \"times s b C = z\""], ["proof (prove)\nusing this:\n  I z s \\<Longrightarrow>\n  times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z\n\ngoal (1 subgoal):\n 1. Nielson_VCGi.times s b C = z", "using I"], ["proof (prove)\nusing this:\n  I z s \\<Longrightarrow>\n  times_dom (s, b, C) \\<and> Nielson_VCGi.times s b C = z\n  I z s\n\ngoal (1 subgoal):\n 1. Nielson_VCGi.times s b C = z", "by simp"], ["proof (state)\nthis:\n  Nielson_VCGi.times s b C = z\n\ngoal:\nNo subgoals!", "qed"], ["", "fun postQz :: \"acom \\<Rightarrow> state \\<Rightarrow> nat \\<Rightarrow> state\" where\n  \"postQz C s 0 = s\" |\n  \"postQz C s (Suc n) =  (postQz C (postQ C s) n)\""], ["", "fun preTz :: \"acom \\<Rightarrow> tbd \\<Rightarrow> nat \\<Rightarrow> tbd\" where\n  \"preTz C e 0 = e\" |\n  \"preTz C e (Suc n) = preT C (preTz C e n)\""], ["", "lemma TzQ: \"preTz C e n s = e (postQz C s n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preTz C e n s = e (postQz C s n)", "by (induct n arbitrary: s, simp_all add: TQ)"], ["", "text\\<open>Weakest precondition from annotated commands:\\<close>"], ["", "(* if the annotated command contains no loops,\n  then the weakest precondition is just some mangled post condition\n  in the other case, \n  the weakest precondition is essentially the annotated invariant\n  of the first while loop, mangled somewhat by the commands\n  preceding the loop. *)"], ["", "fun pre :: \"acom \\<Rightarrow> assn2 \\<Rightarrow> assn2\" where\n  \"pre SKIP Q  = Q\" |\n  \"pre (x ::= a) Q = (\\<lambda>l s. Q l (s(x := aval a s)))\" |\n  \"pre (C\\<^sub>1;; C\\<^sub>2) Q  = pre C\\<^sub>1 (pre C\\<^sub>2 Q)\" |\n  \"pre ({(P',Ps)/_/_} CONSEQ C) Q = P'\" |\n  \"pre (IF b THEN C\\<^sub>1 ELSE C\\<^sub>2) Q =\n  (\\<lambda>l s. if bval b s then pre C\\<^sub>1 Q l s else pre C\\<^sub>2 Q l s)\" |\n  \"pre ({((I,Is),(S,(E,Es,SS)))} WHILE b DO C) Q = I\""], ["", "fun qdeps :: \"acom \\<Rightarrow> vname set \\<Rightarrow> vname set\" where\n  \"qdeps SKIP LV  = LV\" |\n  \"qdeps (x ::= a) LV = LV \\<union> vars a\" | \n  \"qdeps (C\\<^sub>1;; C\\<^sub>2) LV  = qdeps C\\<^sub>1 (qdeps C\\<^sub>2 LV)\" |\n  \"qdeps ({(P',Ps)/_/_} CONSEQ C) _ = Ps\" | (* the variables P' depends on *)\n  \"qdeps (IF b THEN C\\<^sub>1 ELSE C\\<^sub>2) LV = vars b \\<union> qdeps C\\<^sub>1 LV \\<union> qdeps C\\<^sub>2 LV\" | \n  \"qdeps ({((I,Is),(S,(E,x,Es)))} WHILE b DO C) _ = Is\""], ["", "(* the variables I depends on *)"], ["", "lemma qdeps_mono: \"A \\<subseteq> B \\<Longrightarrow> qdeps C A \\<subseteq> qdeps C B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> B \\<Longrightarrow> qdeps C A \\<subseteq> qdeps C B", "by (induct C arbitrary: A B, auto simp: le_supI1 le_supI2)"], ["", "lemma supportE_if: \"supportE (\\<lambda>l s. if b s then A l s else B l s)\n  \\<subseteq> supportE A \\<union> supportE B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l s. if b s then A l s else B l s)\n    \\<subseteq> supportE A \\<union> supportE B", "unfolding supportE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>l1 l2 s.\n           (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n           (if b s then A l1 s else B l1 s) \\<noteq>\n           (if b s then A l2 s else B l2 s)}\n    \\<subseteq> {x. \\<exists>l1 l2 s.\n                       (\\<forall>y.\n                           y \\<noteq> x \\<longrightarrow>\n                           l1 y = l2 y) \\<and>\n                       A l1 s \\<noteq> A l2 s} \\<union>\n                {x. \\<exists>l1 l2 s.\n                       (\\<forall>y.\n                           y \\<noteq> x \\<longrightarrow>\n                           l1 y = l2 y) \\<and>\n                       B l1 s \\<noteq> B l2 s}", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x l1 l2 s.\n       \\<lbrakk>\\<forall>l1 l2.\n                   (\\<exists>y.\n                       y \\<noteq> x \\<and> l1 y \\<noteq> l2 y) \\<or>\n                   (\\<forall>s. B l1 s = B l2 s);\n        \\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y; \\<not> b s;\n        B l1 s \\<noteq> B l2 s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l1 l2.\n                            (\\<forall>y.\n                                y \\<noteq> x \\<longrightarrow>\n                                l1 y = l2 y) \\<and>\n                            (\\<exists>s. A l1 s \\<noteq> A l2 s)\n 2. \\<And>x l1 l2 s.\n       \\<lbrakk>\\<forall>l1 l2.\n                   (\\<exists>y.\n                       y \\<noteq> x \\<and> l1 y \\<noteq> l2 y) \\<or>\n                   (\\<forall>s. B l1 s = B l2 s);\n        \\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y;\n        A l1 s \\<noteq> A l2 s;\n        \\<forall>l1 l2.\n           (\\<exists>y. y \\<noteq> x \\<and> l1 y \\<noteq> l2 y) \\<or>\n           (\\<forall>s. A l1 s = A l2 s);\n        b s\\<rbrakk>\n       \\<Longrightarrow> False", "by metis+"], ["", "lemma supportE_preT: \"supportE (%l. preT C (e l)) \\<subseteq> supportE e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. preT C (e l)) \\<subseteq> supportE e", "proof(induct C arbitrary: e)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>e. supportE (\\<lambda>l. preT SKIP (e l)) \\<subseteq> supportE e\n 2. \\<And>x1 x2 e.\n       supportE (\\<lambda>l. preT (x1 ::= x2) (e l)) \\<subseteq> supportE e\n 3. \\<And>C1 C2 e.\n       \\<lbrakk>\\<And>e.\n                   supportE (\\<lambda>l. preT C1 (e l))\n                   \\<subseteq> supportE e;\n        \\<And>e.\n           supportE (\\<lambda>l. preT C2 (e l))\n           \\<subseteq> supportE e\\<rbrakk>\n       \\<Longrightarrow> supportE (\\<lambda>l. preT (C1;; C2) (e l))\n                         \\<subseteq> supportE e\n 4. \\<And>x1 C1 C2 e.\n       \\<lbrakk>\\<And>e.\n                   supportE (\\<lambda>l. preT C1 (e l))\n                   \\<subseteq> supportE e;\n        \\<And>e.\n           supportE (\\<lambda>l. preT C2 (e l))\n           \\<subseteq> supportE e\\<rbrakk>\n       \\<Longrightarrow> supportE\n                          (\\<lambda>l. preT (IF x1 THEN C1 ELSE C2) (e l))\n                         \\<subseteq> supportE e\n 5. \\<And>x1 x2 x3 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1/x2/x3} CONSEQ C) (e l))\n       \\<subseteq> supportE e\n 6. \\<And>x1 x2 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1} WHILE x2 DO C) (e l))\n       \\<subseteq> supportE e", "case (Aif b C1 C2 e)"], ["proof (state)\nthis:\n  supportE (\\<lambda>l. preT C1 (?e l)) \\<subseteq> supportE ?e\n  supportE (\\<lambda>l. preT C2 (?e l)) \\<subseteq> supportE ?e\n\ngoal (6 subgoals):\n 1. \\<And>e. supportE (\\<lambda>l. preT SKIP (e l)) \\<subseteq> supportE e\n 2. \\<And>x1 x2 e.\n       supportE (\\<lambda>l. preT (x1 ::= x2) (e l)) \\<subseteq> supportE e\n 3. \\<And>C1 C2 e.\n       \\<lbrakk>\\<And>e.\n                   supportE (\\<lambda>l. preT C1 (e l))\n                   \\<subseteq> supportE e;\n        \\<And>e.\n           supportE (\\<lambda>l. preT C2 (e l))\n           \\<subseteq> supportE e\\<rbrakk>\n       \\<Longrightarrow> supportE (\\<lambda>l. preT (C1;; C2) (e l))\n                         \\<subseteq> supportE e\n 4. \\<And>x1 C1 C2 e.\n       \\<lbrakk>\\<And>e.\n                   supportE (\\<lambda>l. preT C1 (e l))\n                   \\<subseteq> supportE e;\n        \\<And>e.\n           supportE (\\<lambda>l. preT C2 (e l))\n           \\<subseteq> supportE e\\<rbrakk>\n       \\<Longrightarrow> supportE\n                          (\\<lambda>l. preT (IF x1 THEN C1 ELSE C2) (e l))\n                         \\<subseteq> supportE e\n 5. \\<And>x1 x2 x3 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1/x2/x3} CONSEQ C) (e l))\n       \\<subseteq> supportE e\n 6. \\<And>x1 x2 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1} WHILE x2 DO C) (e l))\n       \\<subseteq> supportE e", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. preT (IF b THEN C1 ELSE C2) (e l))\n    \\<subseteq> supportE e", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE\n     (\\<lambda>l a. if bval b a then preT C1 (e l) a else preT C2 (e l) a)\n    \\<subseteq> supportE e", "apply(rule subset_trans[OF supportE_if])"], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. preT C1 (e l)) \\<union>\n    supportE (\\<lambda>l. preT C2 (e l))\n    \\<subseteq> supportE e", "using Aif"], ["proof (prove)\nusing this:\n  supportE (\\<lambda>l. preT C1 (?e l)) \\<subseteq> supportE ?e\n  supportE (\\<lambda>l. preT C2 (?e l)) \\<subseteq> supportE ?e\n\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. preT C1 (e l)) \\<union>\n    supportE (\\<lambda>l. preT C2 (e l))\n    \\<subseteq> supportE e", "by fast"], ["proof (state)\nthis:\n  supportE (\\<lambda>l. preT (IF b THEN C1 ELSE C2) (e l))\n  \\<subseteq> supportE e\n\ngoal (5 subgoals):\n 1. \\<And>e. supportE (\\<lambda>l. preT SKIP (e l)) \\<subseteq> supportE e\n 2. \\<And>x1 x2 e.\n       supportE (\\<lambda>l. preT (x1 ::= x2) (e l)) \\<subseteq> supportE e\n 3. \\<And>C1 C2 e.\n       \\<lbrakk>\\<And>e.\n                   supportE (\\<lambda>l. preT C1 (e l))\n                   \\<subseteq> supportE e;\n        \\<And>e.\n           supportE (\\<lambda>l. preT C2 (e l))\n           \\<subseteq> supportE e\\<rbrakk>\n       \\<Longrightarrow> supportE (\\<lambda>l. preT (C1;; C2) (e l))\n                         \\<subseteq> supportE e\n 4. \\<And>x1 x2 x3 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1/x2/x3} CONSEQ C) (e l))\n       \\<subseteq> supportE e\n 5. \\<And>x1 x2 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1} WHILE x2 DO C) (e l))\n       \\<subseteq> supportE e", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>e. supportE (\\<lambda>l. preT SKIP (e l)) \\<subseteq> supportE e\n 2. \\<And>x1 x2 e.\n       supportE (\\<lambda>l. preT (x1 ::= x2) (e l)) \\<subseteq> supportE e\n 3. \\<And>C1 C2 e.\n       \\<lbrakk>\\<And>e.\n                   supportE (\\<lambda>l. preT C1 (e l))\n                   \\<subseteq> supportE e;\n        \\<And>e.\n           supportE (\\<lambda>l. preT C2 (e l))\n           \\<subseteq> supportE e\\<rbrakk>\n       \\<Longrightarrow> supportE (\\<lambda>l. preT (C1;; C2) (e l))\n                         \\<subseteq> supportE e\n 4. \\<And>x1 x2 x3 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1/x2/x3} CONSEQ C) (e l))\n       \\<subseteq> supportE e\n 5. \\<And>x1 x2 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1} WHILE x2 DO C) (e l))\n       \\<subseteq> supportE e", "case (Awhile A y C e)"], ["proof (state)\nthis:\n  supportE (\\<lambda>l. preT C (?e l)) \\<subseteq> supportE ?e\n\ngoal (5 subgoals):\n 1. \\<And>e. supportE (\\<lambda>l. preT SKIP (e l)) \\<subseteq> supportE e\n 2. \\<And>x1 x2 e.\n       supportE (\\<lambda>l. preT (x1 ::= x2) (e l)) \\<subseteq> supportE e\n 3. \\<And>C1 C2 e.\n       \\<lbrakk>\\<And>e.\n                   supportE (\\<lambda>l. preT C1 (e l))\n                   \\<subseteq> supportE e;\n        \\<And>e.\n           supportE (\\<lambda>l. preT C2 (e l))\n           \\<subseteq> supportE e\\<rbrakk>\n       \\<Longrightarrow> supportE (\\<lambda>l. preT (C1;; C2) (e l))\n                         \\<subseteq> supportE e\n 4. \\<And>x1 x2 x3 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1/x2/x3} CONSEQ C) (e l))\n       \\<subseteq> supportE e\n 5. \\<And>x1 x2 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1} WHILE x2 DO C) (e l))\n       \\<subseteq> supportE e", "obtain I S E x where A: \"A= (I,S,E,x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>I S E x.\n        A = (I, S, E, x) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases4"], ["proof (prove)\nusing this:\n  (\\<And>a b c d.\n      ?y = (a, b, c, d) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>I S E x.\n        A = (I, S, E, x) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  A = (I, S, E, x)\n\ngoal (5 subgoals):\n 1. \\<And>e. supportE (\\<lambda>l. preT SKIP (e l)) \\<subseteq> supportE e\n 2. \\<And>x1 x2 e.\n       supportE (\\<lambda>l. preT (x1 ::= x2) (e l)) \\<subseteq> supportE e\n 3. \\<And>C1 C2 e.\n       \\<lbrakk>\\<And>e.\n                   supportE (\\<lambda>l. preT C1 (e l))\n                   \\<subseteq> supportE e;\n        \\<And>e.\n           supportE (\\<lambda>l. preT C2 (e l))\n           \\<subseteq> supportE e\\<rbrakk>\n       \\<Longrightarrow> supportE (\\<lambda>l. preT (C1;; C2) (e l))\n                         \\<subseteq> supportE e\n 4. \\<And>x1 x2 x3 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1/x2/x3} CONSEQ C) (e l))\n       \\<subseteq> supportE e\n 5. \\<And>x1 x2 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1} WHILE x2 DO C) (e l))\n       \\<subseteq> supportE e", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. preT ({A} WHILE y DO C) (e l))\n    \\<subseteq> supportE e", "using A"], ["proof (prove)\nusing this:\n  A = (I, S, E, x)\n\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. preT ({A} WHILE y DO C) (e l))\n    \\<subseteq> supportE e", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. A = (I, S, E, x) \\<Longrightarrow>\n    supportE (\\<lambda>l a. e l (S a)) \\<subseteq> supportE e", "unfolding supportE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A = (I, S, E, x) \\<Longrightarrow>\n    {x. \\<exists>l1 l2 s.\n           (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n           e l1 (S s) \\<noteq> e l2 (S s)}\n    \\<subseteq> {x. \\<exists>l1 l2 s.\n                       (\\<forall>y.\n                           y \\<noteq> x \\<longrightarrow>\n                           l1 y = l2 y) \\<and>\n                       e l1 s \\<noteq> e l2 s}", "by blast"], ["proof (state)\nthis:\n  supportE (\\<lambda>l. preT ({A} WHILE y DO C) (e l))\n  \\<subseteq> supportE e\n\ngoal (4 subgoals):\n 1. \\<And>e. supportE (\\<lambda>l. preT SKIP (e l)) \\<subseteq> supportE e\n 2. \\<And>x1 x2 e.\n       supportE (\\<lambda>l. preT (x1 ::= x2) (e l)) \\<subseteq> supportE e\n 3. \\<And>C1 C2 e.\n       \\<lbrakk>\\<And>e.\n                   supportE (\\<lambda>l. preT C1 (e l))\n                   \\<subseteq> supportE e;\n        \\<And>e.\n           supportE (\\<lambda>l. preT C2 (e l))\n           \\<subseteq> supportE e\\<rbrakk>\n       \\<Longrightarrow> supportE (\\<lambda>l. preT (C1;; C2) (e l))\n                         \\<subseteq> supportE e\n 4. \\<And>x1 x2 x3 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1/x2/x3} CONSEQ C) (e l))\n       \\<subseteq> supportE e", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e. supportE (\\<lambda>l. preT SKIP (e l)) \\<subseteq> supportE e\n 2. \\<And>x1 x2 e.\n       supportE (\\<lambda>l. preT (x1 ::= x2) (e l)) \\<subseteq> supportE e\n 3. \\<And>C1 C2 e.\n       \\<lbrakk>\\<And>e.\n                   supportE (\\<lambda>l. preT C1 (e l))\n                   \\<subseteq> supportE e;\n        \\<And>e.\n           supportE (\\<lambda>l. preT C2 (e l))\n           \\<subseteq> supportE e\\<rbrakk>\n       \\<Longrightarrow> supportE (\\<lambda>l. preT (C1;; C2) (e l))\n                         \\<subseteq> supportE e\n 4. \\<And>x1 x2 x3 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1/x2/x3} CONSEQ C) (e l))\n       \\<subseteq> supportE e", "case (Aseq)"], ["proof (state)\nthis:\n  supportE (\\<lambda>l. preT C1_ (?e l)) \\<subseteq> supportE ?e\n  supportE (\\<lambda>l. preT C2_ (?e l)) \\<subseteq> supportE ?e\n\ngoal (4 subgoals):\n 1. \\<And>e. supportE (\\<lambda>l. preT SKIP (e l)) \\<subseteq> supportE e\n 2. \\<And>x1 x2 e.\n       supportE (\\<lambda>l. preT (x1 ::= x2) (e l)) \\<subseteq> supportE e\n 3. \\<And>C1 C2 e.\n       \\<lbrakk>\\<And>e.\n                   supportE (\\<lambda>l. preT C1 (e l))\n                   \\<subseteq> supportE e;\n        \\<And>e.\n           supportE (\\<lambda>l. preT C2 (e l))\n           \\<subseteq> supportE e\\<rbrakk>\n       \\<Longrightarrow> supportE (\\<lambda>l. preT (C1;; C2) (e l))\n                         \\<subseteq> supportE e\n 4. \\<And>x1 x2 x3 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1/x2/x3} CONSEQ C) (e l))\n       \\<subseteq> supportE e", "then"], ["proof (chain)\npicking this:\n  supportE (\\<lambda>l. preT C1_ (?e l)) \\<subseteq> supportE ?e\n  supportE (\\<lambda>l. preT C2_ (?e l)) \\<subseteq> supportE ?e", "show ?case"], ["proof (prove)\nusing this:\n  supportE (\\<lambda>l. preT C1_ (?e l)) \\<subseteq> supportE ?e\n  supportE (\\<lambda>l. preT C2_ (?e l)) \\<subseteq> supportE ?e\n\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. preT (C1_;; C2_) (e l)) \\<subseteq> supportE e", "by force"], ["proof (state)\nthis:\n  supportE (\\<lambda>l. preT (C1_;; C2_) (e l)) \\<subseteq> supportE e\n\ngoal (3 subgoals):\n 1. \\<And>e. supportE (\\<lambda>l. preT SKIP (e l)) \\<subseteq> supportE e\n 2. \\<And>x1 x2 e.\n       supportE (\\<lambda>l. preT (x1 ::= x2) (e l)) \\<subseteq> supportE e\n 3. \\<And>x1 x2 x3 C e.\n       (\\<And>e.\n           supportE (\\<lambda>l. preT C (e l))\n           \\<subseteq> supportE e) \\<Longrightarrow>\n       supportE (\\<lambda>l. preT ({x1/x2/x3} CONSEQ C) (e l))\n       \\<subseteq> supportE e", "qed (simp_all add: supportE_def, blast)"], ["", "lemma supportE_twicepreT: \"supportE (%l. preT C1 (preT C2 (e l))) \\<subseteq> supportE e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. preT C1 (preT C2 (e l))) \\<subseteq> supportE e", "by (rule subset_trans[OF supportE_preT supportE_preT])"], ["", "lemma supportE_preTz: \"supportE (%l. preTz C (e l) n) \\<subseteq> supportE e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. preTz C (e l) n) \\<subseteq> supportE e", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. supportE (\\<lambda>l. preTz C (e l) 0) \\<subseteq> supportE e\n 2. \\<And>n.\n       supportE (\\<lambda>l. preTz C (e l) n)\n       \\<subseteq> supportE e \\<Longrightarrow>\n       supportE (\\<lambda>l. preTz C (e l) (Suc n)) \\<subseteq> supportE e", "case (Suc n)"], ["proof (state)\nthis:\n  supportE (\\<lambda>l. preTz C (e l) n) \\<subseteq> supportE e\n\ngoal (2 subgoals):\n 1. supportE (\\<lambda>l. preTz C (e l) 0) \\<subseteq> supportE e\n 2. \\<And>n.\n       supportE (\\<lambda>l. preTz C (e l) n)\n       \\<subseteq> supportE e \\<Longrightarrow>\n       supportE (\\<lambda>l. preTz C (e l) (Suc n)) \\<subseteq> supportE e", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. preTz C (e l) (Suc n)) \\<subseteq> supportE e", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. preT C (preTz C (e l) n)) \\<subseteq> supportE e", "apply(rule subset_trans[OF supportE_preT])"], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. preTz C (e l) n) \\<subseteq> supportE e", "by fact"], ["proof (state)\nthis:\n  supportE (\\<lambda>l. preTz C (e l) (Suc n)) \\<subseteq> supportE e\n\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. preTz C (e l) 0) \\<subseteq> supportE e", "qed simp"], ["", "lemma supportE_preTz_Un: (* like in support_wpw_Un *)\n  \"supportE (\\<lambda>l. preTz C (e l) (l x)) \\<subseteq> insert x (UN n. supportE (\\<lambda>l. preTz C (e l) n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. preTz C (e l) (l x))\n    \\<subseteq> insert x (\\<Union>n. supportE (\\<lambda>l. preTz C (e l) n))", "apply(auto simp add: supportE_def subset_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t l1 l2 s.\n       \\<lbrakk>\\<forall>y. y \\<noteq> t \\<longrightarrow> l1 y = l2 y;\n        preTz C (e l1) (l1 x) s \\<noteq> preTz C (e l2) (l2 x) s;\n        \\<forall>x l1 l2.\n           (\\<exists>y. y \\<noteq> t \\<and> l1 y \\<noteq> l2 y) \\<or>\n           (\\<forall>s. preTz C (e l1) x s = preTz C (e l2) x s)\\<rbrakk>\n       \\<Longrightarrow> t = x", "apply metis"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma support_eq: \"support (\\<lambda>l s. l x = E l s) \\<subseteq> supportE E \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support (\\<lambda>l s. l x = E l s) \\<subseteq> supportE E \\<union> {x}", "unfolding support_def supportE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {xa.\n     \\<exists>l1 l2 s.\n        (\\<forall>y. y \\<noteq> xa \\<longrightarrow> l1 y = l2 y) \\<and>\n        (l1 x = E l1 s) \\<noteq> (l2 x = E l2 s)}\n    \\<subseteq> {x. \\<exists>l1 l2 s.\n                       (\\<forall>y.\n                           y \\<noteq> x \\<longrightarrow>\n                           l1 y = l2 y) \\<and>\n                       E l1 s \\<noteq> E l2 s} \\<union>\n                {x}", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa l1 l2 s.\n       \\<lbrakk>xa \\<noteq> x;\n        \\<forall>y. y \\<noteq> xa \\<longrightarrow> l1 y = l2 y;\n        l2 x = E l1 s; E l1 s \\<noteq> E l2 s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l1 l2.\n                            (\\<forall>y.\n                                y \\<noteq> xa \\<longrightarrow>\n                                l1 y = l2 y) \\<and>\n                            (\\<exists>s. E l1 s \\<noteq> E l2 s)\n 2. \\<And>xa l1 l2 s.\n       \\<lbrakk>xa \\<noteq> x;\n        \\<forall>y. y \\<noteq> xa \\<longrightarrow> l1 y = l2 y;\n        E l2 s \\<noteq> E l1 s;\n        \\<forall>l1 l2.\n           (\\<exists>y. y \\<noteq> xa \\<and> l1 y \\<noteq> l2 y) \\<or>\n           (\\<forall>s. E l1 s = E l2 s);\n        l2 x = E l2 s\\<rbrakk>\n       \\<Longrightarrow> False", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa l1 l2 s.\n       \\<lbrakk>xa \\<noteq> x;\n        \\<forall>y. y \\<noteq> xa \\<longrightarrow> l1 y = l2 y;\n        E l2 s \\<noteq> E l1 s;\n        \\<forall>l1 l2.\n           (\\<exists>y. y \\<noteq> xa \\<and> l1 y \\<noteq> l2 y) \\<or>\n           (\\<forall>s. E l1 s = E l2 s);\n        l2 x = E l2 s\\<rbrakk>\n       \\<Longrightarrow> False", "by metis"], ["", "lemma support_impl_in: \"G e \\<longrightarrow> support (\\<lambda>l s.  H e l s) \\<subseteq> T\n  \\<Longrightarrow> support (\\<lambda>l s. G e \\<longrightarrow>  H e l s) \\<subseteq> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G e \\<longrightarrow> support (H e) \\<subseteq> T \\<Longrightarrow>\n    support (\\<lambda>l s. G e \\<longrightarrow> H e l s) \\<subseteq> T", "unfolding support_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. G e \\<longrightarrow>\n    {x. \\<exists>l1 l2 s.\n           (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n           H e l1 s \\<noteq> H e l2 s}\n    \\<subseteq> T \\<Longrightarrow>\n    {x. \\<exists>l1 l2 s.\n           (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n           (G e \\<longrightarrow> H e l1 s) \\<noteq>\n           (G e \\<longrightarrow> H e l2 s)}\n    \\<subseteq> T", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x l1 l2 s.\n       \\<lbrakk>\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y;\n        {x. \\<exists>l1 l2.\n               (\\<forall>y.\n                   y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n               (\\<exists>s. H e l1 s = (\\<not> H e l2 s))}\n        \\<subseteq> T;\n        G e; \\<not> H e l2 s; H e l1 s\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T\n 2. \\<And>x l1 l2 s.\n       \\<lbrakk>\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y;\n        {x. \\<exists>l1 l2.\n               (\\<forall>y.\n                   y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n               (\\<exists>s. H e l1 s = (\\<not> H e l2 s))}\n        \\<subseteq> T;\n        x \\<notin> T; G e; \\<not> H e l1 s; H e l2 s\\<rbrakk>\n       \\<Longrightarrow> False", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma support_supportE: \"\\<And>P e. support (\\<lambda>l s.  P (e l) s) \\<subseteq> supportE e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P e. support (\\<lambda>l. P (e l)) \\<subseteq> supportE e", "unfolding support_def supportE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P e.\n       {x. \\<exists>l1 l2 s.\n              (\\<forall>y.\n                  y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n              P (e l1) s \\<noteq> P (e l2) s}\n       \\<subseteq> {x. \\<exists>l1 l2 s.\n                          (\\<forall>y.\n                              y \\<noteq> x \\<longrightarrow>\n                              l1 y = l2 y) \\<and>\n                          e l1 s \\<noteq> e l2 s}", "apply(rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P e x.\n       x \\<in> {x. \\<exists>l1 l2 s.\n                      (\\<forall>y.\n                          y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n                      P (e l1) s \\<noteq> P (e l2) s} \\<Longrightarrow>\n       x \\<in> {x. \\<exists>l1 l2 s.\n                      (\\<forall>y.\n                          y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n                      e l1 s \\<noteq> e l2 s}", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P e x.\n       \\<exists>l1 l2.\n          (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n          (\\<exists>s. P (e l1) s = (\\<not> P (e l2) s)) \\<Longrightarrow>\n       \\<exists>l1 l2.\n          (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n          (\\<exists>s. e l1 s \\<noteq> e l2 s)", "proof (clarify, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P e x l1 l2 s.\n       \\<lbrakk>\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y;\n        P (e l1) s = (\\<not> P (e l2) s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l1 l2.\n                            (\\<forall>y.\n                                y \\<noteq> x \\<longrightarrow>\n                                l1 y = l2 y) \\<and>\n                            (\\<exists>s. e l1 s \\<noteq> e l2 s)", "case (1 P e x l1 l2 s)"], ["proof (state)\nthis:\n  \\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y\n  P (e l1) s = (\\<not> P (e l2) s)\n\ngoal (1 subgoal):\n 1. \\<And>P e x l1 l2 s.\n       \\<lbrakk>\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y;\n        P (e l1) s = (\\<not> P (e l2) s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l1 l2.\n                            (\\<forall>y.\n                                y \\<noteq> x \\<longrightarrow>\n                                l1 y = l2 y) \\<and>\n                            (\\<exists>s. e l1 s \\<noteq> e l2 s)", "have P: \"\\<forall>s. e l1 s = e l2 s \\<Longrightarrow> e l1 = e l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. e l1 s = e l2 s \\<Longrightarrow> e l1 = e l2", "by fast"], ["proof (state)\nthis:\n  \\<forall>s. e l1 s = e l2 s \\<Longrightarrow> e l1 = e l2\n\ngoal (1 subgoal):\n 1. \\<And>P e x l1 l2 s.\n       \\<lbrakk>\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y;\n        P (e l1) s = (\\<not> P (e l2) s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l1 l2.\n                            (\\<forall>y.\n                                y \\<noteq> x \\<longrightarrow>\n                                l1 y = l2 y) \\<and>\n                            (\\<exists>s. e l1 s \\<noteq> e l2 s)", "show \"\\<exists>l1 l2. (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and> (\\<exists>s. e l1 s \\<noteq> e l2 s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l1 l2.\n       (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n       (\\<exists>s. e l1 s \\<noteq> e l2 s)", "apply(rule exI[where x=l1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l2.\n       (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n       (\\<exists>s. e l1 s \\<noteq> e l2 s)", "apply(rule exI[where x=l2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n    (\\<exists>s. e l1 s \\<noteq> e l2 s)", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y. y \\<noteq> x \\<Longrightarrow> l1 y = l2 y\n 2. \\<exists>s. e l1 s \\<noteq> e l2 s", "using 1"], ["proof (prove)\nusing this:\n  \\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y\n  P (e l1) s = (\\<not> P (e l2) s)\n\ngoal (2 subgoals):\n 1. \\<And>y. y \\<noteq> x \\<Longrightarrow> l1 y = l2 y\n 2. \\<exists>s. e l1 s \\<noteq> e l2 s", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s. e l1 s \\<noteq> e l2 s", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>s. e l1 s \\<noteq> e l2 s \\<Longrightarrow> False", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. e l1 s = e l2 s \\<Longrightarrow> False", "using 1(2) P"], ["proof (prove)\nusing this:\n  P (e l1) s = (\\<not> P (e l2) s)\n  \\<forall>s. e l1 s = e l2 s \\<Longrightarrow> e l1 = e l2\n\ngoal (1 subgoal):\n 1. \\<forall>s. e l1 s = e l2 s \\<Longrightarrow> False", "by force"], ["proof (state)\nthis:\n  \\<exists>l1 l2.\n     (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n     (\\<exists>s. e l1 s \\<noteq> e l2 s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma support_pre: \"support (pre C Q) \\<subseteq> support Q \\<union> varacom C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support (pre C Q) \\<subseteq> support Q \\<union> varacom C", "proof (induct C arbitrary: Q)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (C1;; C2) Q)\n                         \\<subseteq> support Q \\<union> varacom (C1;; C2)\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (IF x1 THEN C1 ELSE C2) Q)\n                         \\<subseteq> support Q \\<union>\n                                     varacom (IF x1 THEN C1 ELSE C2)\n 5. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)\n 6. \\<And>x1 x2 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1} WHILE x2 DO C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1} WHILE x2 DO C)", "case (Awhile A b C Q)"], ["proof (state)\nthis:\n  support (pre C ?Q) \\<subseteq> support ?Q \\<union> varacom C\n\ngoal (6 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (C1;; C2) Q)\n                         \\<subseteq> support Q \\<union> varacom (C1;; C2)\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (IF x1 THEN C1 ELSE C2) Q)\n                         \\<subseteq> support Q \\<union>\n                                     varacom (IF x1 THEN C1 ELSE C2)\n 5. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)\n 6. \\<And>x1 x2 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1} WHILE x2 DO C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1} WHILE x2 DO C)", "obtain I2 S E Es SS where A: \"A= (I2,(S,(E,Es,SS)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>I2 S E Es SS.\n        A = (I2, S, E, Es, SS) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases5"], ["proof (prove)\nusing this:\n  (\\<And>a b c d e.\n      ?y = (a, b, c, d, e) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>I2 S E Es SS.\n        A = (I2, S, E, Es, SS) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  A = (I2, S, E, Es, SS)\n\ngoal (6 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (C1;; C2) Q)\n                         \\<subseteq> support Q \\<union> varacom (C1;; C2)\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (IF x1 THEN C1 ELSE C2) Q)\n                         \\<subseteq> support Q \\<union>\n                                     varacom (IF x1 THEN C1 ELSE C2)\n 5. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)\n 6. \\<And>x1 x2 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1} WHILE x2 DO C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1} WHILE x2 DO C)", "obtain I Is where \"I2=(I,Is)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>I Is. I2 = (I, Is) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  I2 = (I, Is)\n\ngoal (6 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (C1;; C2) Q)\n                         \\<subseteq> support Q \\<union> varacom (C1;; C2)\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (IF x1 THEN C1 ELSE C2) Q)\n                         \\<subseteq> support Q \\<union>\n                                     varacom (IF x1 THEN C1 ELSE C2)\n 5. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)\n 6. \\<And>x1 x2 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1} WHILE x2 DO C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1} WHILE x2 DO C)", "note A=this A"], ["proof (state)\nthis:\n  I2 = (I, Is)\n  A = (I2, S, E, Es, SS)\n\ngoal (6 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (C1;; C2) Q)\n                         \\<subseteq> support Q \\<union> varacom (C1;; C2)\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (IF x1 THEN C1 ELSE C2) Q)\n                         \\<subseteq> support Q \\<union>\n                                     varacom (IF x1 THEN C1 ELSE C2)\n 5. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)\n 6. \\<And>x1 x2 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1} WHILE x2 DO C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1} WHILE x2 DO C)", "have support_inv: \"\\<And>P. support (\\<lambda>l s. P s) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P. support (\\<lambda>l. P) = {}", "unfolding support_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P.\n       {x. \\<exists>l1 l2 s.\n              (\\<forall>y.\n                  y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n              P s \\<noteq> P s} =\n       {}", "by blast"], ["proof (state)\nthis:\n  support (\\<lambda>l. ?P) = {}\n\ngoal (6 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (C1;; C2) Q)\n                         \\<subseteq> support Q \\<union> varacom (C1;; C2)\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (IF x1 THEN C1 ELSE C2) Q)\n                         \\<subseteq> support Q \\<union>\n                                     varacom (IF x1 THEN C1 ELSE C2)\n 5. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)\n 6. \\<And>x1 x2 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1} WHILE x2 DO C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1} WHILE x2 DO C)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (pre ({A} WHILE b DO C) Q)\n    \\<subseteq> support Q \\<union> varacom ({A} WHILE b DO C)", "unfolding A"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (pre ({((I, Is), S, E, Es, SS)} WHILE b DO C) Q)\n    \\<subseteq> support Q \\<union>\n                varacom ({((I, Is), S, E, Es, SS)} WHILE b DO C)", "by(auto)"], ["proof (state)\nthis:\n  support (pre ({A} WHILE b DO C) Q)\n  \\<subseteq> support Q \\<union> varacom ({A} WHILE b DO C)\n\ngoal (5 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (C1;; C2) Q)\n                         \\<subseteq> support Q \\<union> varacom (C1;; C2)\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (IF x1 THEN C1 ELSE C2) Q)\n                         \\<subseteq> support Q \\<union>\n                                     varacom (IF x1 THEN C1 ELSE C2)\n 5. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (C1;; C2) Q)\n                         \\<subseteq> support Q \\<union> varacom (C1;; C2)\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (IF x1 THEN C1 ELSE C2) Q)\n                         \\<subseteq> support Q \\<union>\n                                     varacom (IF x1 THEN C1 ELSE C2)\n 5. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)", "case (Aseq C1 C2)"], ["proof (state)\nthis:\n  support (pre C1 ?Q) \\<subseteq> support ?Q \\<union> varacom C1\n  support (pre C2 ?Q) \\<subseteq> support ?Q \\<union> varacom C2\n\ngoal (5 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (C1;; C2) Q)\n                         \\<subseteq> support Q \\<union> varacom (C1;; C2)\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (IF x1 THEN C1 ELSE C2) Q)\n                         \\<subseteq> support Q \\<union>\n                                     varacom (IF x1 THEN C1 ELSE C2)\n 5. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)", "then"], ["proof (chain)\npicking this:\n  support (pre C1 ?Q) \\<subseteq> support ?Q \\<union> varacom C1\n  support (pre C2 ?Q) \\<subseteq> support ?Q \\<union> varacom C2", "show ?case"], ["proof (prove)\nusing this:\n  support (pre C1 ?Q) \\<subseteq> support ?Q \\<union> varacom C1\n  support (pre C2 ?Q) \\<subseteq> support ?Q \\<union> varacom C2\n\ngoal (1 subgoal):\n 1. support (pre (C1;; C2) Q)\n    \\<subseteq> support Q \\<union> varacom (C1;; C2)", "by(auto)"], ["proof (state)\nthis:\n  support (pre (C1;; C2) Q) \\<subseteq> support Q \\<union> varacom (C1;; C2)\n\ngoal (4 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (IF x1 THEN C1 ELSE C2) Q)\n                         \\<subseteq> support Q \\<union>\n                                     varacom (IF x1 THEN C1 ELSE C2)\n 4. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (IF x1 THEN C1 ELSE C2) Q)\n                         \\<subseteq> support Q \\<union>\n                                     varacom (IF x1 THEN C1 ELSE C2)\n 4. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)", "case (Aif x C1 C2 Q)"], ["proof (state)\nthis:\n  support (pre C1 ?Q) \\<subseteq> support ?Q \\<union> varacom C1\n  support (pre C2 ?Q) \\<subseteq> support ?Q \\<union> varacom C2\n\ngoal (4 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (IF x1 THEN C1 ELSE C2) Q)\n                         \\<subseteq> support Q \\<union>\n                                     varacom (IF x1 THEN C1 ELSE C2)\n 4. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)", "have s1: \"support (\\<lambda>l s. bval x s \\<longrightarrow> pre C1 Q l s) \\<subseteq> support Q \\<union> varacom C1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support (\\<lambda>l s. bval x s \\<longrightarrow> pre C1 Q l s)\n    \\<subseteq> support Q \\<union> varacom C1", "apply(rule subset_trans[OF support_impl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (pre C1 Q) \\<subseteq> support Q \\<union> varacom C1", "by(rule Aif)"], ["proof (state)\nthis:\n  support (\\<lambda>l s. bval x s \\<longrightarrow> pre C1 Q l s)\n  \\<subseteq> support Q \\<union> varacom C1\n\ngoal (4 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (IF x1 THEN C1 ELSE C2) Q)\n                         \\<subseteq> support Q \\<union>\n                                     varacom (IF x1 THEN C1 ELSE C2)\n 4. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)", "have s2: \"support (\\<lambda>l s. ~ bval x s \\<longrightarrow> pre C2 Q l s) \\<subseteq> support Q \\<union> varacom C2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support (\\<lambda>l s. \\<not> bval x s \\<longrightarrow> pre C2 Q l s)\n    \\<subseteq> support Q \\<union> varacom C2", "apply(rule subset_trans[OF support_impl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (pre C2 Q) \\<subseteq> support Q \\<union> varacom C2", "by(rule Aif)"], ["proof (state)\nthis:\n  support (\\<lambda>l s. \\<not> bval x s \\<longrightarrow> pre C2 Q l s)\n  \\<subseteq> support Q \\<union> varacom C2\n\ngoal (4 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   support (pre C1 Q)\n                   \\<subseteq> support Q \\<union> varacom C1;\n        \\<And>Q.\n           support (pre C2 Q)\n           \\<subseteq> support Q \\<union> varacom C2\\<rbrakk>\n       \\<Longrightarrow> support (pre (IF x1 THEN C1 ELSE C2) Q)\n                         \\<subseteq> support Q \\<union>\n                                     varacom (IF x1 THEN C1 ELSE C2)\n 4. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (pre (IF x THEN C1 ELSE C2) Q)\n    \\<subseteq> support Q \\<union> varacom (IF x THEN C1 ELSE C2)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. support\n     (\\<lambda>xa xaa.\n         (bval x xaa \\<longrightarrow> pre C1 Q xa xaa) \\<and>\n         (\\<not> bval x xaa \\<longrightarrow> pre C2 Q xa xaa))\n    \\<subseteq> support Q \\<union> (varacom C1 \\<union> varacom C2)", "apply(rule subset_trans[OF support_and])"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (\\<lambda>l s. bval x s \\<longrightarrow> pre C1 Q l s) \\<union>\n    support (\\<lambda>l s. \\<not> bval x s \\<longrightarrow> pre C2 Q l s)\n    \\<subseteq> support Q \\<union> (varacom C1 \\<union> varacom C2)", "using s1 s2"], ["proof (prove)\nusing this:\n  support (\\<lambda>l s. bval x s \\<longrightarrow> pre C1 Q l s)\n  \\<subseteq> support Q \\<union> varacom C1\n  support (\\<lambda>l s. \\<not> bval x s \\<longrightarrow> pre C2 Q l s)\n  \\<subseteq> support Q \\<union> varacom C2\n\ngoal (1 subgoal):\n 1. support (\\<lambda>l s. bval x s \\<longrightarrow> pre C1 Q l s) \\<union>\n    support (\\<lambda>l s. \\<not> bval x s \\<longrightarrow> pre C2 Q l s)\n    \\<subseteq> support Q \\<union> (varacom C1 \\<union> varacom C2)", "by blast"], ["proof (state)\nthis:\n  support (pre (IF x THEN C1 ELSE C2) Q)\n  \\<subseteq> support Q \\<union> varacom (IF x THEN C1 ELSE C2)\n\ngoal (3 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)", "case (Aconseq x1 x2 x3 C)"], ["proof (state)\nthis:\n  support (pre C ?Q) \\<subseteq> support ?Q \\<union> varacom C\n\ngoal (3 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)", "obtain a b c d e f where \"x1=(a,b)\" \"x2=(c,d)\" \"x3=(e,f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b c d e f.\n        \\<lbrakk>x1 = (a, b); x2 = (c, d); x3 = (e, f)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  x1 = (a, b)\n  x2 = (c, d)\n  x3 = (e, f)\n\ngoal (3 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)\n 3. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           support (pre C Q)\n           \\<subseteq> support Q \\<union> varacom C) \\<Longrightarrow>\n       support (pre ({x1/x2/x3} CONSEQ C) Q)\n       \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)", "with Aconseq"], ["proof (chain)\npicking this:\n  support (pre C ?Q) \\<subseteq> support ?Q \\<union> varacom C\n  x1 = (a, b)\n  x2 = (c, d)\n  x3 = (e, f)", "show ?case"], ["proof (prove)\nusing this:\n  support (pre C ?Q) \\<subseteq> support ?Q \\<union> varacom C\n  x1 = (a, b)\n  x2 = (c, d)\n  x3 = (e, f)\n\ngoal (1 subgoal):\n 1. support (pre ({x1/x2/x3} CONSEQ C) Q)\n    \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)", "by auto"], ["proof (state)\nthis:\n  support (pre ({x1/x2/x3} CONSEQ C) Q)\n  \\<subseteq> support Q \\<union> varacom ({x1/x2/x3} CONSEQ C)\n\ngoal (2 subgoals):\n 1. \\<And>Q.\n       support (pre SKIP Q) \\<subseteq> support Q \\<union> varacom SKIP\n 2. \\<And>x1 x2 Q.\n       support (pre (x1 ::= x2) Q)\n       \\<subseteq> support Q \\<union> varacom (x1 ::= x2)", "qed (auto simp add: support_def)"], ["", "lemma finite_support_pre: \"finite (support Q)  \\<Longrightarrow> finite (varacom C) \\<Longrightarrow>  finite (support (pre C Q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (support Q); finite (varacom C)\\<rbrakk>\n    \\<Longrightarrow> finite (support (pre C Q))", "using finite_subset support_pre finite_UnI"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n  support (pre ?C ?Q) \\<subseteq> support ?Q \\<union> varacom ?C\n  \\<lbrakk>finite ?F; finite ?G\\<rbrakk>\n  \\<Longrightarrow> finite (?F \\<union> ?G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (support Q); finite (varacom C)\\<rbrakk>\n    \\<Longrightarrow> finite (support (pre C Q))", "by metis"], ["", "fun time :: \"acom \\<Rightarrow> tbd\" where\n  \"time SKIP = (%s. Suc 0)\" |\n  \"time (x ::= a) = (%s. Suc 0)\" |\n  \"time (C\\<^sub>1;; C\\<^sub>2) = (%s. time C\\<^sub>1 s + preT C\\<^sub>1 (time C\\<^sub>2) s)\" |\n  \"time ({_/_/(e,es)} CONSEQ C) = e\" |\n  \"time (IF b THEN C\\<^sub>1 ELSE C\\<^sub>2) =\n  (\\<lambda>s. if bval b s then 1 + time C\\<^sub>1 s else 1 + time C\\<^sub>2 s)\" |\n  \"time ({(_,(E',(E,x)))} WHILE b DO C) = E\""], ["", "(* the set of variables, i need to know about, i.e. s1 and s2 have to agree on \n  s.th. time C s1 = time C s2 *)"], ["", "fun kdeps :: \"acom \\<Rightarrow> vname set\" where\n  \"kdeps SKIP = {}\" |\n  \"kdeps (x ::= a) = {}\" |\n  \"kdeps (C\\<^sub>1;; C\\<^sub>2) = kdeps C\\<^sub>1 \\<union> fune C\\<^sub>1 (kdeps C\\<^sub>2)\" |\n  \"kdeps (IF b THEN C\\<^sub>1 ELSE C\\<^sub>2) =  vars b \\<union> kdeps C\\<^sub>1 \\<union> kdeps C\\<^sub>2\" |\n  \"kdeps ({(_,(E',(E,Es,SS)))} WHILE b DO C) = Es\" |\n  \"kdeps ({_/_/(e,es)} CONSEQ C) = es\""], ["", "lemma supportE_single: \"supportE (\\<lambda>l s. P) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l s. P) = {}", "unfolding supportE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>l1 l2 s.\n           (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n           P \\<noteq> P} =\n    {}", "by blast"], ["", "lemma supportE_plus: \"supportE (\\<lambda>l s. e1 l s + e2 l s) \\<subseteq> supportE e1 \\<union> supportE e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l s. e1 l s + e2 l s)\n    \\<subseteq> supportE e1 \\<union> supportE e2", "unfolding supportE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>l1 l2 s.\n           (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n           e1 l1 s + e2 l1 s \\<noteq> e1 l2 s + e2 l2 s}\n    \\<subseteq> {x. \\<exists>l1 l2 s.\n                       (\\<forall>y.\n                           y \\<noteq> x \\<longrightarrow>\n                           l1 y = l2 y) \\<and>\n                       e1 l1 s \\<noteq> e1 l2 s} \\<union>\n                {x. \\<exists>l1 l2 s.\n                       (\\<forall>y.\n                           y \\<noteq> x \\<longrightarrow>\n                           l1 y = l2 y) \\<and>\n                       e2 l1 s \\<noteq> e2 l2 s}", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x l1 l2 s.\n       \\<lbrakk>\\<forall>l1 l2.\n                   (\\<exists>y.\n                       y \\<noteq> x \\<and> l1 y \\<noteq> l2 y) \\<or>\n                   (\\<forall>s. e2 l1 s = e2 l2 s);\n        \\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y;\n        e1 l1 s + e2 l1 s \\<noteq> e1 l2 s + e2 l2 s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l1 l2.\n                            (\\<forall>y.\n                                y \\<noteq> x \\<longrightarrow>\n                                l1 y = l2 y) \\<and>\n                            (\\<exists>s. e1 l1 s \\<noteq> e1 l2 s)", "by metis"], ["", "lemma supportE_Suc: \"supportE (\\<lambda>l s. Suc (e1 l s)) = supportE e1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l s. Suc (e1 l s)) = supportE e1", "unfolding supportE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>l1 l2 s.\n           (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n           Suc (e1 l1 s) \\<noteq> Suc (e1 l2 s)} =\n    {x. \\<exists>l1 l2 s.\n           (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n           e1 l1 s \\<noteq> e1 l2 s}", "by (auto)"], ["", "lemma supportE_single2: \"supportE (\\<lambda>l . P) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. P) = {}", "unfolding supportE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>l1 l2 s.\n           (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n           P s \\<noteq> P s} =\n    {}", "by blast"], ["", "lemma supportE_time: \"supportE (\\<lambda>l. time C) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. time C) = {}", "using supportE_single2"], ["proof (prove)\nusing this:\n  supportE (\\<lambda>l. ?P) = {}\n\ngoal (1 subgoal):\n 1. supportE (\\<lambda>l. time C) = {}", "by simp"], ["", "lemma \"\\<And>s. (\\<forall>l. I (l(x:=0)) s) = (\\<forall>l. l x = 0 \\<longrightarrow> I l s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (\\<forall>l. I (l(x := 0::'c)) s) =\n       (\\<forall>l. l x = (0::'c) \\<longrightarrow> I l s)", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s l.\n       \\<lbrakk>\\<forall>l. I (l(x := 0::'c)) s; l x = (0::'c)\\<rbrakk>\n       \\<Longrightarrow> I l s", "by (metis fun_upd_triv)"], ["", "lemma \"\\<And>s. (\\<forall>l. I (l(x:=Suc (l x))) s) = (\\<forall>l. (\\<exists>n. l x = Suc n) \\<longrightarrow> I l s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (\\<forall>l. I (l(x := Suc (l x))) s) =\n       (\\<forall>l. (\\<exists>n. l x = Suc n) \\<longrightarrow> I l s)", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s l n.\n       \\<lbrakk>\\<forall>l. I (l(x := Suc (l x))) s; l x = Suc n\\<rbrakk>\n       \\<Longrightarrow> I l s", "proof (goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s l n.\n       \\<lbrakk>\\<forall>l. I (l(x := Suc (l x))) s; l x = Suc n\\<rbrakk>\n       \\<Longrightarrow> I l s", "case (1 s l n)"], ["proof (state)\nthis:\n  \\<forall>l. I (l(x := Suc (l x))) s\n  l x = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>s l n.\n       \\<lbrakk>\\<forall>l. I (l(x := Suc (l x))) s; l x = Suc n\\<rbrakk>\n       \\<Longrightarrow> I l s", "then"], ["proof (chain)\npicking this:\n  \\<forall>l. I (l(x := Suc (l x))) s\n  l x = Suc n", "have \"\\<And>l. I (l(x := Suc (l x))) s\""], ["proof (prove)\nusing this:\n  \\<forall>l. I (l(x := Suc (l x))) s\n  l x = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>l. I (l(x := Suc (l x))) s", "by simp"], ["proof (state)\nthis:\n  I (?l(x := Suc (?l x))) s\n\ngoal (1 subgoal):\n 1. \\<And>s l n.\n       \\<lbrakk>\\<forall>l. I (l(x := Suc (l x))) s; l x = Suc n\\<rbrakk>\n       \\<Longrightarrow> I l s", "from this[where l=\"l(x:=n)\"]"], ["proof (chain)\npicking this:\n  I (l(x := n, x := Suc ((l(x := n)) x))) s", "have \"I ((l(x:=n))(x := Suc ((l(x:=n)) x))) s\""], ["proof (prove)\nusing this:\n  I (l(x := n, x := Suc ((l(x := n)) x))) s\n\ngoal (1 subgoal):\n 1. I (l(x := n, x := Suc ((l(x := n)) x))) s", "by simp"], ["proof (state)\nthis:\n  I (l(x := n, x := Suc ((l(x := n)) x))) s\n\ngoal (1 subgoal):\n 1. \\<And>s l n.\n       \\<lbrakk>\\<forall>l. I (l(x := Suc (l x))) s; l x = Suc n\\<rbrakk>\n       \\<Longrightarrow> I l s", "then"], ["proof (chain)\npicking this:\n  I (l(x := n, x := Suc ((l(x := n)) x))) s", "show ?case"], ["proof (prove)\nusing this:\n  I (l(x := n, x := Suc ((l(x := n)) x))) s\n\ngoal (1 subgoal):\n 1. I l s", "using 1(2)"], ["proof (prove)\nusing this:\n  I (l(x := n, x := Suc ((l(x := n)) x))) s\n  l x = Suc n\n\ngoal (1 subgoal):\n 1. I l s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I (l(x := Suc n)) s; l x = Suc n\\<rbrakk>\n    \\<Longrightarrow> I l s", "by (metis fun_upd_triv)"], ["proof (state)\nthis:\n  I l s\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Verification condition:\\<close>"], ["", "definition funStar where \"funStar f = (%x. {y. (x,y)\\<in>{(x,y). y\\<in>f x}\\<^sup>*})\""], ["", "lemma funStart_prop1: \"x \\<in> (funStar f) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> funStar f x", "unfolding funStar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {y. (x, y) \\<in> {(x, y). y \\<in> f x}\\<^sup>*}", "by auto"], ["", "lemma funStart_prop2: \"f x \\<subseteq> (funStar f) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<subseteq> funStar f x", "unfolding funStar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<subseteq> {y. (x, y) \\<in> {(x, y). y \\<in> f x}\\<^sup>*}", "by auto"], ["", "fun vc :: \"acom \\<Rightarrow> assn2 \\<Rightarrow> vname set \\<Rightarrow> vname set \\<Rightarrow> bool\" where\n  \"vc SKIP Q _ _ = True\" |\n  \"vc (x ::= a) Q _ _ = True\" |\n  \"vc (C\\<^sub>1 ;; C\\<^sub>2) Q LVQ LVE = ((vc C\\<^sub>1 (pre C\\<^sub>2 Q) (qdeps C\\<^sub>2 LVQ) (fune C\\<^sub>2 LVE \\<union> kdeps C\\<^sub>2)) \\<and> (vc C\\<^sub>2 Q LVQ LVE) )\" |\n  \"vc (IF b THEN C\\<^sub>1 ELSE C\\<^sub>2) Q LVQ LVE = (vc C\\<^sub>1 Q LVQ LVE \\<and> vc C\\<^sub>2 Q LVQ LVE)\" |  \n  \"vc ({(P',Ps)/(Q,Qs)/(e',es)} CONSEQ C) Q' LVQ LVE = (vc C Q Qs LVE  \\<comment> \\<open>evtl \\<open>LV\\<close> weglassen - glaub eher nicht\\<close>\n              \\<and> (\\<forall>s1 s2 l. (\\<forall>x\\<in>Ps. s1 x=s2 x) \\<longrightarrow> P' l s1 = P' l s2)    \\<comment> \\<open>annotation \\<open>Ps\\<close> (the set of variables \\<open>P'\\<close> depends on) is correct\\<close>\n              \\<and> (\\<forall>s1 s2 l. (\\<forall>x\\<in>Qs. s1 x=s2 x) \\<longrightarrow> Q l s1 = Q l s2)    \\<comment> \\<open>annotation \\<open>Qs\\<close> (the set of variables \\<open>Q\\<close> depends on) is correct\\<close>\n              \\<and> (\\<forall>s1 s2. (\\<forall>x\\<in>es. s1 x=s2 x) \\<longrightarrow> e' s1 = e' s2)          \\<comment> \\<open>annotation \\<open>es\\<close> (the set of variables \\<open>e'\\<close> depends on) is correct\\<close>\n              \\<and> (\\<exists>k>0. (\\<forall>l s. P' l s \\<longrightarrow> time C s \\<le> k * e' s  \\<and> (\\<forall>t. \\<exists>l'. (pre C Q) l' s \\<and> ( Q l' t \\<longrightarrow> Q' l t) ))))\" |\n  \n  \"vc ({((I,Is),(S,(E,es,SS)))} WHILE b DO C) Q LVQ LVE = ((\\<forall>s1 s2 l. (\\<forall>x\\<in>Is. s1 x = s2 x) \\<longrightarrow> I l s1 = I l s2)  \\<comment> \\<open>annotation \\<open>Is\\<close> is correct\\<close>\n        \\<and> (\\<forall>y\\<in>LVE \\<union> LVQ. (let Ss=SS y in (\\<forall>s1 s2. (\\<forall>x\\<in>Ss. s1 x = s2 x) \\<longrightarrow> (S s1) y = (S s2) y)))                   \\<comment> \\<open>annotation \\<open>SS\\<close> is correct, for only one step\\<close>\n        \\<and> (\\<forall>s1 s2. (\\<forall>x\\<in>es. s1 x=s2 x) \\<longrightarrow> E s1 = E s2)                                \\<comment> \\<open>annotation \\<open>es\\<close> (the set of variables \\<open>E\\<close> depends on) is correct\\<close>\n  \\<and> (\\<forall>l s. (I l s \\<and> bval b s \\<longrightarrow> pre C I l s \\<and>   E s \\<ge> 1 + preT C E s + time C s\n  \\<and> (\\<forall>v\\<in>(\\<Union>y\\<in>LVE \\<union> LVQ. (funStar SS) y). (S s) v = (S (postQ C s)) v) ) \\<and>\n  (I l s \\<and> \\<not> bval b s \\<longrightarrow> Q l s \\<and> E s \\<ge> 1 \\<and> (\\<forall>v\\<in>(\\<Union>y\\<in>LVE \\<union> LVQ. (funStar SS) y). (S s) v  = s v)) ) \\<and>\n  vc C I Is (es \\<union> (\\<Union>y\\<in>LVE. (funStar SS) y)))\""], ["", "subsubsection \\<open>Soundness:\\<close>"], ["", "abbreviation \"preSet U C l s == (Ball U (%u. case u of (x,e,v) \\<Rightarrow> l x = preT C e s))\""], ["", "abbreviation \"postSet U l s == (Ball U (%u. case u of (x,e,v) \\<Rightarrow> l x = e s))\""], ["", "fun ListUpdate where\n  \"ListUpdate f [] l = f\"\n| \"ListUpdate f ((x,e,v)#xs) q = (ListUpdate f xs q)(x:=q e x)\""], ["", "lemma allg: \n  assumes U2: \"\\<And>l s n x. x\\<in> fst ` upds \\<Longrightarrow> A (l(x := n))  = A l\"\n  shows\n    \"fst ` set xs \\<subseteq> fst ` upds \\<Longrightarrow> A (ListUpdate l'' xs q) = A l''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` set xs \\<subseteq> fst ` upds \\<Longrightarrow>\n    A (ListUpdate l'' xs q) = A l''", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. fst ` set [] \\<subseteq> fst ` upds \\<Longrightarrow>\n    A (ListUpdate l'' [] q) = A l''\n 2. \\<And>a xs.\n       \\<lbrakk>fst ` set xs \\<subseteq> fst ` upds \\<Longrightarrow>\n                A (ListUpdate l'' xs q) = A l'';\n        fst ` set (a # xs) \\<subseteq> fst ` upds\\<rbrakk>\n       \\<Longrightarrow> A (ListUpdate l'' (a # xs) q) = A l''", "case (Cons a xs)"], ["proof (state)\nthis:\n  fst ` set xs \\<subseteq> fst ` upds \\<Longrightarrow>\n  A (ListUpdate l'' xs q) = A l''\n  fst ` set (a # xs) \\<subseteq> fst ` upds\n\ngoal (2 subgoals):\n 1. fst ` set [] \\<subseteq> fst ` upds \\<Longrightarrow>\n    A (ListUpdate l'' [] q) = A l''\n 2. \\<And>a xs.\n       \\<lbrakk>fst ` set xs \\<subseteq> fst ` upds \\<Longrightarrow>\n                A (ListUpdate l'' xs q) = A l'';\n        fst ` set (a # xs) \\<subseteq> fst ` upds\\<rbrakk>\n       \\<Longrightarrow> A (ListUpdate l'' (a # xs) q) = A l''", "obtain x e v where axe: \"a = (x,e,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x e v. a = (x, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x e v. a = (x, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = (x, e, v)\n\ngoal (2 subgoals):\n 1. fst ` set [] \\<subseteq> fst ` upds \\<Longrightarrow>\n    A (ListUpdate l'' [] q) = A l''\n 2. \\<And>a xs.\n       \\<lbrakk>fst ` set xs \\<subseteq> fst ` upds \\<Longrightarrow>\n                A (ListUpdate l'' xs q) = A l'';\n        fst ` set (a # xs) \\<subseteq> fst ` upds\\<rbrakk>\n       \\<Longrightarrow> A (ListUpdate l'' (a # xs) q) = A l''", "have \"A (ListUpdate l'' (a # xs) q) \n    = A ((ListUpdate l'' xs q)(x := q e x))  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. A (ListUpdate l'' (a # xs) q) = A ((ListUpdate l'' xs q)(x := q e x))", "unfolding axe"], ["proof (prove)\ngoal (1 subgoal):\n 1. A (ListUpdate l'' ((x, e, v) # xs) q) =\n    A ((ListUpdate l'' xs q)(x := q e x))", "by(simp)"], ["proof (state)\nthis:\n  A (ListUpdate l'' (a # xs) q) = A ((ListUpdate l'' xs q)(x := q e x))\n\ngoal (2 subgoals):\n 1. fst ` set [] \\<subseteq> fst ` upds \\<Longrightarrow>\n    A (ListUpdate l'' [] q) = A l''\n 2. \\<And>a xs.\n       \\<lbrakk>fst ` set xs \\<subseteq> fst ` upds \\<Longrightarrow>\n                A (ListUpdate l'' xs q) = A l'';\n        fst ` set (a # xs) \\<subseteq> fst ` upds\\<rbrakk>\n       \\<Longrightarrow> A (ListUpdate l'' (a # xs) q) = A l''", "also"], ["proof (state)\nthis:\n  A (ListUpdate l'' (a # xs) q) = A ((ListUpdate l'' xs q)(x := q e x))\n\ngoal (2 subgoals):\n 1. fst ` set [] \\<subseteq> fst ` upds \\<Longrightarrow>\n    A (ListUpdate l'' [] q) = A l''\n 2. \\<And>a xs.\n       \\<lbrakk>fst ` set xs \\<subseteq> fst ` upds \\<Longrightarrow>\n                A (ListUpdate l'' xs q) = A l'';\n        fst ` set (a # xs) \\<subseteq> fst ` upds\\<rbrakk>\n       \\<Longrightarrow> A (ListUpdate l'' (a # xs) q) = A l''", "have\n    \"\\<dots> =  A  (ListUpdate l'' xs q)  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. A ((ListUpdate l'' xs q)(x := q e x)) = A (ListUpdate l'' xs q)", "apply(rule U2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> fst ` upds", "using Cons axe"], ["proof (prove)\nusing this:\n  fst ` set xs \\<subseteq> fst ` upds \\<Longrightarrow>\n  A (ListUpdate l'' xs q) = A l''\n  fst ` set (a # xs) \\<subseteq> fst ` upds\n  a = (x, e, v)\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` upds", "by force"], ["proof (state)\nthis:\n  A ((ListUpdate l'' xs q)(x := q e x)) = A (ListUpdate l'' xs q)\n\ngoal (2 subgoals):\n 1. fst ` set [] \\<subseteq> fst ` upds \\<Longrightarrow>\n    A (ListUpdate l'' [] q) = A l''\n 2. \\<And>a xs.\n       \\<lbrakk>fst ` set xs \\<subseteq> fst ` upds \\<Longrightarrow>\n                A (ListUpdate l'' xs q) = A l'';\n        fst ` set (a # xs) \\<subseteq> fst ` upds\\<rbrakk>\n       \\<Longrightarrow> A (ListUpdate l'' (a # xs) q) = A l''", "also"], ["proof (state)\nthis:\n  A ((ListUpdate l'' xs q)(x := q e x)) = A (ListUpdate l'' xs q)\n\ngoal (2 subgoals):\n 1. fst ` set [] \\<subseteq> fst ` upds \\<Longrightarrow>\n    A (ListUpdate l'' [] q) = A l''\n 2. \\<And>a xs.\n       \\<lbrakk>fst ` set xs \\<subseteq> fst ` upds \\<Longrightarrow>\n                A (ListUpdate l'' xs q) = A l'';\n        fst ` set (a # xs) \\<subseteq> fst ` upds\\<rbrakk>\n       \\<Longrightarrow> A (ListUpdate l'' (a # xs) q) = A l''", "have \"\\<dots> = A l'' \""], ["proof (prove)\ngoal (1 subgoal):\n 1. A (ListUpdate l'' xs q) = A l''", "using Cons"], ["proof (prove)\nusing this:\n  fst ` set xs \\<subseteq> fst ` upds \\<Longrightarrow>\n  A (ListUpdate l'' xs q) = A l''\n  fst ` set (a # xs) \\<subseteq> fst ` upds\n\ngoal (1 subgoal):\n 1. A (ListUpdate l'' xs q) = A l''", "by force"], ["proof (state)\nthis:\n  A (ListUpdate l'' xs q) = A l''\n\ngoal (2 subgoals):\n 1. fst ` set [] \\<subseteq> fst ` upds \\<Longrightarrow>\n    A (ListUpdate l'' [] q) = A l''\n 2. \\<And>a xs.\n       \\<lbrakk>fst ` set xs \\<subseteq> fst ` upds \\<Longrightarrow>\n                A (ListUpdate l'' xs q) = A l'';\n        fst ` set (a # xs) \\<subseteq> fst ` upds\\<rbrakk>\n       \\<Longrightarrow> A (ListUpdate l'' (a # xs) q) = A l''", "finally"], ["proof (chain)\npicking this:\n  A (ListUpdate l'' (a # xs) q) = A l''", "show ?case"], ["proof (prove)\nusing this:\n  A (ListUpdate l'' (a # xs) q) = A l''\n\ngoal (1 subgoal):\n 1. A (ListUpdate l'' (a # xs) q) = A l''", "."], ["proof (state)\nthis:\n  A (ListUpdate l'' (a # xs) q) = A l''\n\ngoal (1 subgoal):\n 1. fst ` set [] \\<subseteq> fst ` upds \\<Longrightarrow>\n    A (ListUpdate l'' [] q) = A l''", "qed simp"], ["", "fun ListUpdateE where\n  \"ListUpdateE f []   = f\"\n| \"ListUpdateE f ((x,e,v)#xs)  = (ListUpdateE f xs  )(x:=e)\""], ["", "lemma ListUpdate_E: \"ListUpdateE f xs = ListUpdate f xs (%e x. e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListUpdateE f xs = ListUpdate f xs (\\<lambda>e x. e)", "apply(induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ListUpdateE f [] = ListUpdate f [] (\\<lambda>e x. e)\n 2. \\<And>a xs.\n       ListUpdateE f xs =\n       ListUpdate f xs (\\<lambda>e x. e) \\<Longrightarrow>\n       ListUpdateE f (a # xs) = ListUpdate f (a # xs) (\\<lambda>e x. e)", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       ListUpdateE f xs =\n       ListUpdate f xs (\\<lambda>e x. e) \\<Longrightarrow>\n       ListUpdateE f (a # xs) = ListUpdate f (a # xs) (\\<lambda>e x. e)", "subgoal for a xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. ListUpdateE f xs = ListUpdate f xs (\\<lambda>e x. e) \\<Longrightarrow>\n    ListUpdateE f (a # xs) = ListUpdate f (a # xs) (\\<lambda>e x. e)", "apply(cases a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b c.\n       \\<lbrakk>ListUpdateE f xs = ListUpdate f xs (\\<lambda>e x. e);\n        a = (aa, b, c)\\<rbrakk>\n       \\<Longrightarrow> ListUpdateE f (a # xs) =\n                         ListUpdate f (a # xs) (\\<lambda>e x. e)", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma allg_E: fixes A::assn2\n    assumes \n   \" (\\<And>l s n x. x \\<in> fst ` upds \\<Longrightarrow> A (l(x := n)) = A l)\" \"fst ` set xs \\<subseteq> fst ` upds\"\n   shows \"A (ListUpdateE f xs) = A f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A (ListUpdateE f xs) = A f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A (ListUpdateE f xs) = A f", "have \" A (ListUpdate f xs (%e x. e)) = A f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A (ListUpdate f xs (\\<lambda>e x. e)) = A f", "apply(rule allg)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l s n x. x \\<in> fst ` ?upds \\<Longrightarrow> A (l(x := n)) = A l\n 2. fst ` set xs \\<subseteq> fst ` ?upds", "apply fact+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  A (ListUpdate f xs (\\<lambda>e x. e)) = A f\n\ngoal (1 subgoal):\n 1. A (ListUpdateE f xs) = A f", "then"], ["proof (chain)\npicking this:\n  A (ListUpdate f xs (\\<lambda>e x. e)) = A f", "show ?thesis"], ["proof (prove)\nusing this:\n  A (ListUpdate f xs (\\<lambda>e x. e)) = A f\n\ngoal (1 subgoal):\n 1. A (ListUpdateE f xs) = A f", "by(simp only: ListUpdate_E)"], ["proof (state)\nthis:\n  A (ListUpdateE f xs) = A f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ListUpdateE_updates: \"distinct (map fst xs) \\<Longrightarrow> x \\<in> set xs \\<Longrightarrow> ListUpdateE l'' xs (fst x) = fst (snd x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (map fst xs); x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> ListUpdateE l'' xs (fst x) = fst (snd x)", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (map fst []); x \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> ListUpdateE l'' [] (fst x) = fst (snd x)\n 2. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>distinct (map fst xs); x \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> ListUpdateE l'' xs (fst x) = fst (snd x);\n        distinct (map fst (a # xs)); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "case Nil"], ["proof (state)\nthis:\n  distinct (map fst [])\n  x \\<in> set []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (map fst []); x \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> ListUpdateE l'' [] (fst x) = fst (snd x)\n 2. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>distinct (map fst xs); x \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> ListUpdateE l'' xs (fst x) = fst (snd x);\n        distinct (map fst (a # xs)); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "then"], ["proof (chain)\npicking this:\n  distinct (map fst [])\n  x \\<in> set []", "show ?case"], ["proof (prove)\nusing this:\n  distinct (map fst [])\n  x \\<in> set []\n\ngoal (1 subgoal):\n 1. ListUpdateE l'' [] (fst x) = fst (snd x)", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ListUpdateE l'' [] (fst x) = fst (snd x)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>distinct (map fst xs); x \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> ListUpdateE l'' xs (fst x) = fst (snd x);\n        distinct (map fst (a # xs)); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>distinct (map fst xs); x \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> ListUpdateE l'' xs (fst x) = fst (snd x);\n        distinct (map fst (a # xs)); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "case (Cons a xs)"], ["proof (state)\nthis:\n  \\<lbrakk>distinct (map fst xs); x \\<in> set xs\\<rbrakk>\n  \\<Longrightarrow> ListUpdateE l'' xs (fst x) = fst (snd x)\n  distinct (map fst (a # xs))\n  x \\<in> set (a # xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>distinct (map fst xs); x \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> ListUpdateE l'' xs (fst x) = fst (snd x);\n        distinct (map fst (a # xs)); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "proof (cases \"fst a = fst x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fst a = fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)\n 2. fst a \\<noteq> fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "case True"], ["proof (state)\nthis:\n  fst a = fst x\n\ngoal (2 subgoals):\n 1. fst a = fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)\n 2. fst a \\<noteq> fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "then"], ["proof (chain)\npicking this:\n  fst a = fst x", "obtain y e v where a: \"a=(y,e,v)\""], ["proof (prove)\nusing this:\n  fst a = fst x\n\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  fst a = fst x\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = (y, e, v)\n\ngoal (2 subgoals):\n 1. fst a = fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)\n 2. fst a \\<noteq> fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "with True"], ["proof (chain)\npicking this:\n  fst a = fst x\n  a = (y, e, v)", "have fstx: \"fst x=y\""], ["proof (prove)\nusing this:\n  fst a = fst x\n  a = (y, e, v)\n\ngoal (1 subgoal):\n 1. fst x = y", "by simp"], ["proof (state)\nthis:\n  fst x = y\n\ngoal (2 subgoals):\n 1. fst a = fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)\n 2. fst a \\<noteq> fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "from Cons(2,3) fstx  a"], ["proof (chain)\npicking this:\n  distinct (map fst (a # xs))\n  x \\<in> set (a # xs)\n  fst x = y\n  a = (y, e, v)", "have a2: \"x=a\""], ["proof (prove)\nusing this:\n  distinct (map fst (a # xs))\n  x \\<in> set (a # xs)\n  fst x = y\n  a = (y, e, v)\n\ngoal (1 subgoal):\n 1. x = a", "by force"], ["proof (state)\nthis:\n  x = a\n\ngoal (2 subgoals):\n 1. fst a = fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)\n 2. fst a \\<noteq> fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "unfolding a2 a"], ["proof (prove)\ngoal (1 subgoal):\n 1. ListUpdateE l'' ((y, e, v) # xs) (fst (y, e, v)) = fst (snd (y, e, v))", "by(simp)"], ["proof (state)\nthis:\n  ListUpdateE l'' (a # xs) (fst x) = fst (snd x)\n\ngoal (1 subgoal):\n 1. fst a \\<noteq> fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. fst a \\<noteq> fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "case False"], ["proof (state)\nthis:\n  fst a \\<noteq> fst x\n\ngoal (1 subgoal):\n 1. fst a \\<noteq> fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "with Cons(3)"], ["proof (chain)\npicking this:\n  x \\<in> set (a # xs)\n  fst a \\<noteq> fst x", "have A: \"x\\<in>set xs\""], ["proof (prove)\nusing this:\n  x \\<in> set (a # xs)\n  fst a \\<noteq> fst x\n\ngoal (1 subgoal):\n 1. x \\<in> set xs", "by auto"], ["proof (state)\nthis:\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. fst a \\<noteq> fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "then"], ["proof (chain)\npicking this:\n  x \\<in> set xs", "obtain y e v where a: \"a=(y,e,v)\""], ["proof (prove)\nusing this:\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  x \\<in> set xs\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = (y, e, v)\n\ngoal (1 subgoal):\n 1. fst a \\<noteq> fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "from Cons(2)"], ["proof (chain)\npicking this:\n  distinct (map fst (a # xs))", "have B: \"distinct (map fst xs)\""], ["proof (prove)\nusing this:\n  distinct (map fst (a # xs))\n\ngoal (1 subgoal):\n 1. distinct (map fst xs)", "by simp"], ["proof (state)\nthis:\n  distinct (map fst xs)\n\ngoal (1 subgoal):\n 1. fst a \\<noteq> fst x \\<Longrightarrow>\n    ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "from Cons(1)[OF B A] False"], ["proof (chain)\npicking this:\n  ListUpdateE l'' xs (fst x) = fst (snd x)\n  fst a \\<noteq> fst x", "show ?thesis"], ["proof (prove)\nusing this:\n  ListUpdateE l'' xs (fst x) = fst (snd x)\n  fst a \\<noteq> fst x\n\ngoal (1 subgoal):\n 1. ListUpdateE l'' (a # xs) (fst x) = fst (snd x)", "unfolding a"], ["proof (prove)\nusing this:\n  ListUpdateE l'' xs (fst x) = fst (snd x)\n  fst (y, e, v) \\<noteq> fst x\n\ngoal (1 subgoal):\n 1. ListUpdateE l'' ((y, e, v) # xs) (fst x) = fst (snd x)", "by(simp)"], ["proof (state)\nthis:\n  ListUpdateE l'' (a # xs) (fst x) = fst (snd x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ListUpdateE l'' (a # xs) (fst x) = fst (snd x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ListUpdate_updates: \"x \\<in> fst ` (set xs) \\<Longrightarrow> ListUpdate l'' xs (%e. l) x = l x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> fst ` set xs \\<Longrightarrow>\n    ListUpdate l'' xs (\\<lambda>e. l) x = l x", "proof(induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> fst ` set [] \\<Longrightarrow>\n    ListUpdate l'' [] (\\<lambda>e. l) x = l x\n 2. \\<And>a xs.\n       \\<lbrakk>x \\<in> fst ` set xs \\<Longrightarrow>\n                ListUpdate l'' xs (\\<lambda>e. l) x = l x;\n        x \\<in> fst ` set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> ListUpdate l'' (a # xs) (\\<lambda>e. l) x = l x", "case Nil"], ["proof (state)\nthis:\n  x \\<in> fst ` set []\n\ngoal (2 subgoals):\n 1. x \\<in> fst ` set [] \\<Longrightarrow>\n    ListUpdate l'' [] (\\<lambda>e. l) x = l x\n 2. \\<And>a xs.\n       \\<lbrakk>x \\<in> fst ` set xs \\<Longrightarrow>\n                ListUpdate l'' xs (\\<lambda>e. l) x = l x;\n        x \\<in> fst ` set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> ListUpdate l'' (a # xs) (\\<lambda>e. l) x = l x", "then"], ["proof (chain)\npicking this:\n  x \\<in> fst ` set []", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> fst ` set []\n\ngoal (1 subgoal):\n 1. ListUpdate l'' [] (\\<lambda>e. l) x = l x", "by(simp)"], ["proof (state)\nthis:\n  ListUpdate l'' [] (\\<lambda>e. l) x = l x\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>x \\<in> fst ` set xs \\<Longrightarrow>\n                ListUpdate l'' xs (\\<lambda>e. l) x = l x;\n        x \\<in> fst ` set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> ListUpdate l'' (a # xs) (\\<lambda>e. l) x = l x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>x \\<in> fst ` set xs \\<Longrightarrow>\n                ListUpdate l'' xs (\\<lambda>e. l) x = l x;\n        x \\<in> fst ` set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> ListUpdate l'' (a # xs) (\\<lambda>e. l) x = l x", "case (Cons a xs)"], ["proof (state)\nthis:\n  x \\<in> fst ` set xs \\<Longrightarrow>\n  ListUpdate l'' xs (\\<lambda>e. l) x = l x\n  x \\<in> fst ` set (a # xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>x \\<in> fst ` set xs \\<Longrightarrow>\n                ListUpdate l'' xs (\\<lambda>e. l) x = l x;\n        x \\<in> fst ` set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> ListUpdate l'' (a # xs) (\\<lambda>e. l) x = l x", "obtain q p v where axe: \"a = (p,q,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p q v. a = (p, q, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>p q v. a = (p, q, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = (p, q, v)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>x \\<in> fst ` set xs \\<Longrightarrow>\n                ListUpdate l'' xs (\\<lambda>e. l) x = l x;\n        x \\<in> fst ` set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> ListUpdate l'' (a # xs) (\\<lambda>e. l) x = l x", "from Cons"], ["proof (chain)\npicking this:\n  x \\<in> fst ` set xs \\<Longrightarrow>\n  ListUpdate l'' xs (\\<lambda>e. l) x = l x\n  x \\<in> fst ` set (a # xs)", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> fst ` set xs \\<Longrightarrow>\n  ListUpdate l'' xs (\\<lambda>e. l) x = l x\n  x \\<in> fst ` set (a # xs)\n\ngoal (1 subgoal):\n 1. ListUpdate l'' (a # xs) (\\<lambda>e. l) x = l x", "unfolding axe"], ["proof (prove)\nusing this:\n  x \\<in> fst ` set xs \\<Longrightarrow>\n  ListUpdate l'' xs (\\<lambda>e. l) x = l x\n  x \\<in> fst ` set ((p, q, v) # xs)\n\ngoal (1 subgoal):\n 1. ListUpdate l'' ((p, q, v) # xs) (\\<lambda>e. l) x = l x", "apply(cases \"x=p\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> fst ` set xs \\<Longrightarrow>\n             ListUpdate l'' xs (\\<lambda>e. l) x = l x;\n     x \\<in> fst ` set ((p, q, v) # xs); x = p\\<rbrakk>\n    \\<Longrightarrow> ListUpdate l'' ((p, q, v) # xs) (\\<lambda>e. l) x =\n                      l x\n 2. \\<lbrakk>x \\<in> fst ` set xs \\<Longrightarrow>\n             ListUpdate l'' xs (\\<lambda>e. l) x = l x;\n     x \\<in> fst ` set ((p, q, v) # xs); x \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> ListUpdate l'' ((p, q, v) # xs) (\\<lambda>e. l) x =\n                      l x", "by(simp_all)"], ["proof (state)\nthis:\n  ListUpdate l'' (a # xs) (\\<lambda>e. l) x = l x\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation \"lesvars xs == fst ` (set xs)\""], ["", "fun preList where\n  \"preList [] C l s = True\"\n| \"preList ((x,(e,v))#xs) C l s = (l x = preT C e s \\<and> preList xs C l s)\""], ["", "lemma preList_Seq: \"preList upds (C1;; C2) l s = preList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) C1 l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preList upds (C1;; C2) l s =\n    preList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) C1 l\n     s", "proof (induct upds)"], ["proof (state)\ngoal (2 subgoals):\n 1. preList [] (C1;; C2) l s =\n    preList\n     (map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       [])\n     C1 l s\n 2. \\<And>a upds.\n       preList upds (C1;; C2) l s =\n       preList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        C1 l s \\<Longrightarrow>\n       preList (a # upds) (C1;; C2) l s =\n       preList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          (a # upds))\n        C1 l s", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. preList [] (C1;; C2) l s =\n    preList\n     (map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       [])\n     C1 l s\n 2. \\<And>a upds.\n       preList upds (C1;; C2) l s =\n       preList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        C1 l s \\<Longrightarrow>\n       preList (a # upds) (C1;; C2) l s =\n       preList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          (a # upds))\n        C1 l s", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. preList [] (C1;; C2) l s =\n    preList\n     (map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       [])\n     C1 l s", "by simp"], ["proof (state)\nthis:\n  preList [] (C1;; C2) l s =\n  preList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     [])\n   C1 l s\n\ngoal (1 subgoal):\n 1. \\<And>a upds.\n       preList upds (C1;; C2) l s =\n       preList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        C1 l s \\<Longrightarrow>\n       preList (a # upds) (C1;; C2) l s =\n       preList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          (a # upds))\n        C1 l s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a upds.\n       preList upds (C1;; C2) l s =\n       preList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        C1 l s \\<Longrightarrow>\n       preList (a # upds) (C1;; C2) l s =\n       preList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          (a # upds))\n        C1 l s", "case (Cons a xs)"], ["proof (state)\nthis:\n  preList xs (C1;; C2) l s =\n  preList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     xs)\n   C1 l s\n\ngoal (1 subgoal):\n 1. \\<And>a upds.\n       preList upds (C1;; C2) l s =\n       preList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        C1 l s \\<Longrightarrow>\n       preList (a # upds) (C1;; C2) l s =\n       preList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          (a # upds))\n        C1 l s", "obtain y e v where a: \"a=(y,(e,v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = (y, e, v)\n\ngoal (1 subgoal):\n 1. \\<And>a upds.\n       preList upds (C1;; C2) l s =\n       preList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        C1 l s \\<Longrightarrow>\n       preList (a # upds) (C1;; C2) l s =\n       preList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          (a # upds))\n        C1 l s", "from Cons"], ["proof (chain)\npicking this:\n  preList xs (C1;; C2) l s =\n  preList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     xs)\n   C1 l s", "show ?case"], ["proof (prove)\nusing this:\n  preList xs (C1;; C2) l s =\n  preList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     xs)\n   C1 l s\n\ngoal (1 subgoal):\n 1. preList (a # xs) (C1;; C2) l s =\n    preList\n     (map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       (a # xs))\n     C1 l s", "unfolding a"], ["proof (prove)\nusing this:\n  preList xs (C1;; C2) l s =\n  preList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     xs)\n   C1 l s\n\ngoal (1 subgoal):\n 1. preList ((y, e, v) # xs) (C1;; C2) l s =\n    preList\n     (map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       ((y, e, v) # xs))\n     C1 l s", "by (simp)"], ["proof (state)\nthis:\n  preList (a # xs) (C1;; C2) l s =\n  preList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     (a # xs))\n   C1 l s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma [simp]: \"support (\\<lambda>a b. True) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support (\\<lambda>a b. True) = {}", "unfolding support_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>l1 l2 s.\n           (\\<forall>y. y \\<noteq> x \\<longrightarrow> l1 y = l2 y) \\<and>\n           True \\<noteq> True} =\n    {}", "by fast"], ["", "lemma support_preList: \"support (preList upds C1) \\<subseteq> lesvars upds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support (preList upds C1) \\<subseteq> lesvars upds", "proof (induct upds)"], ["proof (state)\ngoal (2 subgoals):\n 1. support (preList [] C1) \\<subseteq> lesvars []\n 2. \\<And>a upds.\n       support (preList upds C1) \\<subseteq> lesvars upds \\<Longrightarrow>\n       support (preList (a # upds) C1) \\<subseteq> lesvars (a # upds)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. support (preList [] C1) \\<subseteq> lesvars []\n 2. \\<And>a upds.\n       support (preList upds C1) \\<subseteq> lesvars upds \\<Longrightarrow>\n       support (preList (a # upds) C1) \\<subseteq> lesvars (a # upds)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (preList [] C1) \\<subseteq> lesvars []", "by simp"], ["proof (state)\nthis:\n  support (preList [] C1) \\<subseteq> lesvars []\n\ngoal (1 subgoal):\n 1. \\<And>a upds.\n       support (preList upds C1) \\<subseteq> lesvars upds \\<Longrightarrow>\n       support (preList (a # upds) C1) \\<subseteq> lesvars (a # upds)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a upds.\n       support (preList upds C1) \\<subseteq> lesvars upds \\<Longrightarrow>\n       support (preList (a # upds) C1) \\<subseteq> lesvars (a # upds)", "case (Cons a upds)"], ["proof (state)\nthis:\n  support (preList upds C1) \\<subseteq> lesvars upds\n\ngoal (1 subgoal):\n 1. \\<And>a upds.\n       support (preList upds C1) \\<subseteq> lesvars upds \\<Longrightarrow>\n       support (preList (a # upds) C1) \\<subseteq> lesvars (a # upds)", "obtain y e v where a: \"a=(y,(e,v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = (y, e, v)\n\ngoal (1 subgoal):\n 1. \\<And>a upds.\n       support (preList upds C1) \\<subseteq> lesvars upds \\<Longrightarrow>\n       support (preList (a # upds) C1) \\<subseteq> lesvars (a # upds)", "from Cons"], ["proof (chain)\npicking this:\n  support (preList upds C1) \\<subseteq> lesvars upds", "show ?case"], ["proof (prove)\nusing this:\n  support (preList upds C1) \\<subseteq> lesvars upds\n\ngoal (1 subgoal):\n 1. support (preList (a # upds) C1) \\<subseteq> lesvars (a # upds)", "unfolding a"], ["proof (prove)\nusing this:\n  support (preList upds C1) \\<subseteq> lesvars upds\n\ngoal (1 subgoal):\n 1. support (preList ((y, e, v) # upds) C1)\n    \\<subseteq> lesvars ((y, e, v) # upds)", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (preList upds C1) \\<subseteq> lesvars upds \\<Longrightarrow>\n    support (\\<lambda>a b. a y = preT C1 e b \\<and> preList upds C1 a b)\n    \\<subseteq> insert y (lesvars upds)", "apply(rule subset_trans[OF support_and])"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (preList upds C1) \\<subseteq> lesvars upds \\<Longrightarrow>\n    support (\\<lambda>l s. l y = preT C1 e s) \\<union>\n    support (preList upds C1)\n    \\<subseteq> insert y (lesvars upds)", "apply(rule Un_least)"], ["proof (prove)\ngoal (2 subgoals):\n 1. support (preList upds C1) \\<subseteq> lesvars upds \\<Longrightarrow>\n    support (\\<lambda>l s. l y = preT C1 e s)\n    \\<subseteq> insert y (lesvars upds)\n 2. support (preList upds C1) \\<subseteq> lesvars upds \\<Longrightarrow>\n    support (preList upds C1) \\<subseteq> insert y (lesvars upds)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (preList upds C1) \\<subseteq> lesvars upds \\<Longrightarrow>\n    support (\\<lambda>l s. l y = preT C1 e s)\n    \\<subseteq> insert y (lesvars upds)", "apply(rule subset_trans[OF support_eq])"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (preList upds C1) \\<subseteq> lesvars upds \\<Longrightarrow>\n    supportE (\\<lambda>l. preT C1 e) \\<union> {y}\n    \\<subseteq> insert y (lesvars upds)", "using supportE_twicepreT subset_trans  supportE_single2"], ["proof (prove)\nusing this:\n  supportE (\\<lambda>l. preT ?C1.0 (preT ?C2.0 (?e l)))\n  \\<subseteq> supportE ?e\n  \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?C\\<rbrakk>\n  \\<Longrightarrow> ?A \\<subseteq> ?C\n  supportE (\\<lambda>l. ?P) = {}\n\ngoal (1 subgoal):\n 1. support (preList upds C1) \\<subseteq> lesvars upds \\<Longrightarrow>\n    supportE (\\<lambda>l. preT C1 e) \\<union> {y}\n    \\<subseteq> insert y (lesvars upds)", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (preList upds C1) \\<subseteq> lesvars upds \\<Longrightarrow>\n    support (preList upds C1) \\<subseteq> insert y (lesvars upds)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (preList upds C1) \\<subseteq> lesvars upds \\<Longrightarrow>\n    support (preList upds C1) \\<subseteq> insert y (lesvars upds)", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  support (preList (a # upds) C1) \\<subseteq> lesvars (a # upds)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma preListpreSet: \"preSet (set xs) C l s \\<Longrightarrow> preList xs C l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preSet (set xs) C l s \\<Longrightarrow> preList xs C l s", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. preSet (set []) C l s \\<Longrightarrow> preList [] C l s\n 2. \\<And>a xs.\n       \\<lbrakk>preSet (set xs) C l s \\<Longrightarrow> preList xs C l s;\n        preSet (set (a # xs)) C l s\\<rbrakk>\n       \\<Longrightarrow> preList (a # xs) C l s", "case Nil"], ["proof (state)\nthis:\n  preSet (set []) C l s\n\ngoal (2 subgoals):\n 1. preSet (set []) C l s \\<Longrightarrow> preList [] C l s\n 2. \\<And>a xs.\n       \\<lbrakk>preSet (set xs) C l s \\<Longrightarrow> preList xs C l s;\n        preSet (set (a # xs)) C l s\\<rbrakk>\n       \\<Longrightarrow> preList (a # xs) C l s", "then"], ["proof (chain)\npicking this:\n  preSet (set []) C l s", "show ?case"], ["proof (prove)\nusing this:\n  preSet (set []) C l s\n\ngoal (1 subgoal):\n 1. preList [] C l s", "by simp"], ["proof (state)\nthis:\n  preList [] C l s\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>preSet (set xs) C l s \\<Longrightarrow> preList xs C l s;\n        preSet (set (a # xs)) C l s\\<rbrakk>\n       \\<Longrightarrow> preList (a # xs) C l s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>preSet (set xs) C l s \\<Longrightarrow> preList xs C l s;\n        preSet (set (a # xs)) C l s\\<rbrakk>\n       \\<Longrightarrow> preList (a # xs) C l s", "case (Cons a xs)"], ["proof (state)\nthis:\n  preSet (set xs) C l s \\<Longrightarrow> preList xs C l s\n  preSet (set (a # xs)) C l s\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>preSet (set xs) C l s \\<Longrightarrow> preList xs C l s;\n        preSet (set (a # xs)) C l s\\<rbrakk>\n       \\<Longrightarrow> preList (a # xs) C l s", "obtain y e v where a: \"a=(y,(e,v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = (y, e, v)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>preSet (set xs) C l s \\<Longrightarrow> preList xs C l s;\n        preSet (set (a # xs)) C l s\\<rbrakk>\n       \\<Longrightarrow> preList (a # xs) C l s", "from Cons"], ["proof (chain)\npicking this:\n  preSet (set xs) C l s \\<Longrightarrow> preList xs C l s\n  preSet (set (a # xs)) C l s", "show ?case"], ["proof (prove)\nusing this:\n  preSet (set xs) C l s \\<Longrightarrow> preList xs C l s\n  preSet (set (a # xs)) C l s\n\ngoal (1 subgoal):\n 1. preList (a # xs) C l s", "unfolding a"], ["proof (prove)\nusing this:\n  preSet (set xs) C l s \\<Longrightarrow> preList xs C l s\n  preSet (set ((y, e, v) # xs)) C l s\n\ngoal (1 subgoal):\n 1. preList ((y, e, v) # xs) C l s", "by (simp)"], ["proof (state)\nthis:\n  preList (a # xs) C l s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma preSetpreList: \"preList xs C l s \\<Longrightarrow>  preSet (set xs) C l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preList xs C l s \\<Longrightarrow> preSet (set xs) C l s", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. preList [] C l s \\<Longrightarrow> preSet (set []) C l s\n 2. \\<And>a xs.\n       \\<lbrakk>preList xs C l s \\<Longrightarrow> preSet (set xs) C l s;\n        preList (a # xs) C l s\\<rbrakk>\n       \\<Longrightarrow> preSet (set (a # xs)) C l s", "case (Cons a xs)"], ["proof (state)\nthis:\n  preList xs C l s \\<Longrightarrow> preSet (set xs) C l s\n  preList (a # xs) C l s\n\ngoal (2 subgoals):\n 1. preList [] C l s \\<Longrightarrow> preSet (set []) C l s\n 2. \\<And>a xs.\n       \\<lbrakk>preList xs C l s \\<Longrightarrow> preSet (set xs) C l s;\n        preList (a # xs) C l s\\<rbrakk>\n       \\<Longrightarrow> preSet (set (a # xs)) C l s", "obtain y e v where a: \"a=(y,(e,v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = (y, e, v)\n\ngoal (2 subgoals):\n 1. preList [] C l s \\<Longrightarrow> preSet (set []) C l s\n 2. \\<And>a xs.\n       \\<lbrakk>preList xs C l s \\<Longrightarrow> preSet (set xs) C l s;\n        preList (a # xs) C l s\\<rbrakk>\n       \\<Longrightarrow> preSet (set (a # xs)) C l s", "from Cons"], ["proof (chain)\npicking this:\n  preList xs C l s \\<Longrightarrow> preSet (set xs) C l s\n  preList (a # xs) C l s", "show ?case"], ["proof (prove)\nusing this:\n  preList xs C l s \\<Longrightarrow> preSet (set xs) C l s\n  preList (a # xs) C l s\n\ngoal (1 subgoal):\n 1. preSet (set (a # xs)) C l s", "unfolding a"], ["proof (prove)\nusing this:\n  preList xs C l s \\<Longrightarrow> preSet (set xs) C l s\n  preList ((y, e, v) # xs) C l s\n\ngoal (1 subgoal):\n 1. preSet (set ((y, e, v) # xs)) C l s", "by(simp)"], ["proof (state)\nthis:\n  preSet (set (a # xs)) C l s\n\ngoal (1 subgoal):\n 1. preList [] C l s \\<Longrightarrow> preSet (set []) C l s", "qed simp"], ["", "(* surprise. but makes sense, if the clauses are contradictory on the \n    left side, so are they on the right side *)"], ["", "lemma preSetpreList_eq: \"preList xs C l s = preSet (set xs) C l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preList xs C l s = preSet (set xs) C l s", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. preList [] C l s = preSet (set []) C l s\n 2. \\<And>a xs.\n       preList xs C l s = preSet (set xs) C l s \\<Longrightarrow>\n       preList (a # xs) C l s = preSet (set (a # xs)) C l s", "case (Cons a xs)"], ["proof (state)\nthis:\n  preList xs C l s = preSet (set xs) C l s\n\ngoal (2 subgoals):\n 1. preList [] C l s = preSet (set []) C l s\n 2. \\<And>a xs.\n       preList xs C l s = preSet (set xs) C l s \\<Longrightarrow>\n       preList (a # xs) C l s = preSet (set (a # xs)) C l s", "obtain y e v where a: \"a=(y,(e,v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = (y, e, v)\n\ngoal (2 subgoals):\n 1. preList [] C l s = preSet (set []) C l s\n 2. \\<And>a xs.\n       preList xs C l s = preSet (set xs) C l s \\<Longrightarrow>\n       preList (a # xs) C l s = preSet (set (a # xs)) C l s", "from Cons"], ["proof (chain)\npicking this:\n  preList xs C l s = preSet (set xs) C l s", "show ?case"], ["proof (prove)\nusing this:\n  preList xs C l s = preSet (set xs) C l s\n\ngoal (1 subgoal):\n 1. preList (a # xs) C l s = preSet (set (a # xs)) C l s", "unfolding a"], ["proof (prove)\nusing this:\n  preList xs C l s = preSet (set xs) C l s\n\ngoal (1 subgoal):\n 1. preList ((y, e, v) # xs) C l s = preSet (set ((y, e, v) # xs)) C l s", "by(simp)"], ["proof (state)\nthis:\n  preList (a # xs) C l s = preSet (set (a # xs)) C l s\n\ngoal (1 subgoal):\n 1. preList [] C l s = preSet (set []) C l s", "qed simp"], ["", "fun postList where\n  \"postList []  l s = True\"\n| \"postList ((x,e,v)#xs)  l s = (l x = e s \\<and> postList xs l s)\""], ["", "lemma \"postList xs l s = (foldr (\\<lambda>(x,e,v) acc l s. l x = e s \\<and> acc l s) xs (%l s. True)) l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. postList xs l s =\n    foldr (\\<lambda>(x, e, v) acc l s. l x = e s \\<and> acc l s) xs\n     (\\<lambda>l s. True) l s", "apply(induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. postList [] l s =\n    foldr\n     (\\<lambda>a.\n         case a of\n         (x, a) \\<Rightarrow>\n           case a of\n           (e, v) \\<Rightarrow> \\<lambda>acc l s. l x = e s \\<and> acc l s)\n     [] (\\<lambda>l s. True) l s\n 2. \\<And>a xs.\n       postList xs l s =\n       foldr\n        (\\<lambda>a.\n            case a of\n            (x, a) \\<Rightarrow>\n              case a of\n              (e, v) \\<Rightarrow>\n                \\<lambda>acc l s. l x = e s \\<and> acc l s)\n        xs (\\<lambda>l s. True) l s \\<Longrightarrow>\n       postList (a # xs) l s =\n       foldr\n        (\\<lambda>a.\n            case a of\n            (x, a) \\<Rightarrow>\n              case a of\n              (e, v) \\<Rightarrow>\n                \\<lambda>acc l s. l x = e s \\<and> acc l s)\n        (a # xs) (\\<lambda>l s. True) l s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       postList xs l s =\n       foldr\n        (\\<lambda>a.\n            case a of\n            (x, a) \\<Rightarrow>\n              case a of\n              (e, v) \\<Rightarrow>\n                \\<lambda>acc l s. l x = e s \\<and> acc l s)\n        xs (\\<lambda>l s. True) l s \\<Longrightarrow>\n       postList (a # xs) l s =\n       foldr\n        (\\<lambda>a.\n            case a of\n            (x, a) \\<Rightarrow>\n              case a of\n              (e, v) \\<Rightarrow>\n                \\<lambda>acc l s. l x = e s \\<and> acc l s)\n        (a # xs) (\\<lambda>l s. True) l s", "by (auto)"], ["", "lemma support_postList: \"support (postList xs) \\<subseteq> lesvars xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support (postList xs) \\<subseteq> lesvars xs", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. support (postList []) \\<subseteq> lesvars []\n 2. \\<And>a xs.\n       support (postList xs) \\<subseteq> lesvars xs \\<Longrightarrow>\n       support (postList (a # xs)) \\<subseteq> lesvars (a # xs)", "case (Cons a xs)"], ["proof (state)\nthis:\n  support (postList xs) \\<subseteq> lesvars xs\n\ngoal (2 subgoals):\n 1. support (postList []) \\<subseteq> lesvars []\n 2. \\<And>a xs.\n       support (postList xs) \\<subseteq> lesvars xs \\<Longrightarrow>\n       support (postList (a # xs)) \\<subseteq> lesvars (a # xs)", "obtain y e v where a: \"a=(y,(e,v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = (y, e, v)\n\ngoal (2 subgoals):\n 1. support (postList []) \\<subseteq> lesvars []\n 2. \\<And>a xs.\n       support (postList xs) \\<subseteq> lesvars xs \\<Longrightarrow>\n       support (postList (a # xs)) \\<subseteq> lesvars (a # xs)", "from Cons"], ["proof (chain)\npicking this:\n  support (postList xs) \\<subseteq> lesvars xs", "show ?case"], ["proof (prove)\nusing this:\n  support (postList xs) \\<subseteq> lesvars xs\n\ngoal (1 subgoal):\n 1. support (postList (a # xs)) \\<subseteq> lesvars (a # xs)", "unfolding a"], ["proof (prove)\nusing this:\n  support (postList xs) \\<subseteq> lesvars xs\n\ngoal (1 subgoal):\n 1. support (postList ((y, e, v) # xs)) \\<subseteq> lesvars ((y, e, v) # xs)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (postList xs) \\<subseteq> lesvars xs \\<Longrightarrow>\n    support (\\<lambda>a b. a y = e b \\<and> postList xs a b)\n    \\<subseteq> insert y (lesvars xs)", "apply(rule subset_trans[OF support_and])"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (postList xs) \\<subseteq> lesvars xs \\<Longrightarrow>\n    support (\\<lambda>l s. l y = e s) \\<union> support (postList xs)\n    \\<subseteq> insert y (lesvars xs)", "apply(rule Un_least)"], ["proof (prove)\ngoal (2 subgoals):\n 1. support (postList xs) \\<subseteq> lesvars xs \\<Longrightarrow>\n    support (\\<lambda>l s. l y = e s) \\<subseteq> insert y (lesvars xs)\n 2. support (postList xs) \\<subseteq> lesvars xs \\<Longrightarrow>\n    support (postList xs) \\<subseteq> insert y (lesvars xs)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (postList xs) \\<subseteq> lesvars xs \\<Longrightarrow>\n    support (\\<lambda>l s. l y = e s) \\<subseteq> insert y (lesvars xs)", "apply(rule subset_trans[OF support_eq])"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (postList xs) \\<subseteq> lesvars xs \\<Longrightarrow>\n    supportE (\\<lambda>l. e) \\<union> {y} \\<subseteq> insert y (lesvars xs)", "using supportE_twicepreT subset_trans  supportE_single2"], ["proof (prove)\nusing this:\n  supportE (\\<lambda>l. preT ?C1.0 (preT ?C2.0 (?e l)))\n  \\<subseteq> supportE ?e\n  \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?C\\<rbrakk>\n  \\<Longrightarrow> ?A \\<subseteq> ?C\n  supportE (\\<lambda>l. ?P) = {}\n\ngoal (1 subgoal):\n 1. support (postList xs) \\<subseteq> lesvars xs \\<Longrightarrow>\n    supportE (\\<lambda>l. e) \\<union> {y} \\<subseteq> insert y (lesvars xs)", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (postList xs) \\<subseteq> lesvars xs \\<Longrightarrow>\n    support (postList xs) \\<subseteq> insert y (lesvars xs)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (postList xs) \\<subseteq> lesvars xs \\<Longrightarrow>\n    support (postList xs) \\<subseteq> insert y (lesvars xs)", "by(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  support (postList (a # xs)) \\<subseteq> lesvars (a # xs)\n\ngoal (1 subgoal):\n 1. support (postList []) \\<subseteq> lesvars []", "qed simp"], ["", "lemma postList_preList: \"postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l s = preList upds C2 l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l\n     s =\n    preList upds C2 l s", "proof (induct upds)"], ["proof (state)\ngoal (2 subgoals):\n 1. postList\n     (map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       [])\n     l s =\n    preList [] C2 l s\n 2. \\<And>a upds.\n       postList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s =\n       preList upds C2 l s \\<Longrightarrow>\n       postList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          (a # upds))\n        l s =\n       preList (a # upds) C2 l s", "case (Cons a xs)"], ["proof (state)\nthis:\n  postList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     xs)\n   l s =\n  preList xs C2 l s\n\ngoal (2 subgoals):\n 1. postList\n     (map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       [])\n     l s =\n    preList [] C2 l s\n 2. \\<And>a upds.\n       postList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s =\n       preList upds C2 l s \\<Longrightarrow>\n       postList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          (a # upds))\n        l s =\n       preList (a # upds) C2 l s", "obtain y e v where a: \"a=(y,(e,v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = (y, e, v)\n\ngoal (2 subgoals):\n 1. postList\n     (map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       [])\n     l s =\n    preList [] C2 l s\n 2. \\<And>a upds.\n       postList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s =\n       preList upds C2 l s \\<Longrightarrow>\n       postList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          (a # upds))\n        l s =\n       preList (a # upds) C2 l s", "from Cons"], ["proof (chain)\npicking this:\n  postList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     xs)\n   l s =\n  preList xs C2 l s", "show ?case"], ["proof (prove)\nusing this:\n  postList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     xs)\n   l s =\n  preList xs C2 l s\n\ngoal (1 subgoal):\n 1. postList\n     (map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       (a # xs))\n     l s =\n    preList (a # xs) C2 l s", "unfolding a"], ["proof (prove)\nusing this:\n  postList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     xs)\n   l s =\n  preList xs C2 l s\n\ngoal (1 subgoal):\n 1. postList\n     (map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       ((y, e, v) # xs))\n     l s =\n    preList ((y, e, v) # xs) C2 l s", "by(simp)"], ["proof (state)\nthis:\n  postList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     (a # xs))\n   l s =\n  preList (a # xs) C2 l s\n\ngoal (1 subgoal):\n 1. postList\n     (map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       [])\n     l s =\n    preList [] C2 l s", "qed simp"], ["", "lemma postSetpostList: \"postList xs l s \\<Longrightarrow>  postSet (set xs) l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. postList xs l s \\<Longrightarrow> postSet (set xs) l s", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. postList [] l s \\<Longrightarrow> postSet (set []) l s\n 2. \\<And>a xs.\n       \\<lbrakk>postList xs l s \\<Longrightarrow> postSet (set xs) l s;\n        postList (a # xs) l s\\<rbrakk>\n       \\<Longrightarrow> postSet (set (a # xs)) l s", "case (Cons a xs)"], ["proof (state)\nthis:\n  postList xs l s \\<Longrightarrow> postSet (set xs) l s\n  postList (a # xs) l s\n\ngoal (2 subgoals):\n 1. postList [] l s \\<Longrightarrow> postSet (set []) l s\n 2. \\<And>a xs.\n       \\<lbrakk>postList xs l s \\<Longrightarrow> postSet (set xs) l s;\n        postList (a # xs) l s\\<rbrakk>\n       \\<Longrightarrow> postSet (set (a # xs)) l s", "obtain y e v where a: \"a=(y,(e,v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = (y, e, v)\n\ngoal (2 subgoals):\n 1. postList [] l s \\<Longrightarrow> postSet (set []) l s\n 2. \\<And>a xs.\n       \\<lbrakk>postList xs l s \\<Longrightarrow> postSet (set xs) l s;\n        postList (a # xs) l s\\<rbrakk>\n       \\<Longrightarrow> postSet (set (a # xs)) l s", "from Cons"], ["proof (chain)\npicking this:\n  postList xs l s \\<Longrightarrow> postSet (set xs) l s\n  postList (a # xs) l s", "show ?case"], ["proof (prove)\nusing this:\n  postList xs l s \\<Longrightarrow> postSet (set xs) l s\n  postList (a # xs) l s\n\ngoal (1 subgoal):\n 1. postSet (set (a # xs)) l s", "unfolding a"], ["proof (prove)\nusing this:\n  postList xs l s \\<Longrightarrow> postSet (set xs) l s\n  postList ((y, e, v) # xs) l s\n\ngoal (1 subgoal):\n 1. postSet (set ((y, e, v) # xs)) l s", "by(simp)"], ["proof (state)\nthis:\n  postSet (set (a # xs)) l s\n\ngoal (1 subgoal):\n 1. postList [] l s \\<Longrightarrow> postSet (set []) l s", "qed simp"], ["", "lemma postListpostSet: \"postSet (set xs) l s \\<Longrightarrow> postList xs l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. postSet (set xs) l s \\<Longrightarrow> postList xs l s", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. postSet (set []) l s \\<Longrightarrow> postList [] l s\n 2. \\<And>a xs.\n       \\<lbrakk>postSet (set xs) l s \\<Longrightarrow> postList xs l s;\n        postSet (set (a # xs)) l s\\<rbrakk>\n       \\<Longrightarrow> postList (a # xs) l s", "case (Cons a xs)"], ["proof (state)\nthis:\n  postSet (set xs) l s \\<Longrightarrow> postList xs l s\n  postSet (set (a # xs)) l s\n\ngoal (2 subgoals):\n 1. postSet (set []) l s \\<Longrightarrow> postList [] l s\n 2. \\<And>a xs.\n       \\<lbrakk>postSet (set xs) l s \\<Longrightarrow> postList xs l s;\n        postSet (set (a # xs)) l s\\<rbrakk>\n       \\<Longrightarrow> postList (a # xs) l s", "obtain y e v where a: \"a=(y,(e,v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = (y, e, v)\n\ngoal (2 subgoals):\n 1. postSet (set []) l s \\<Longrightarrow> postList [] l s\n 2. \\<And>a xs.\n       \\<lbrakk>postSet (set xs) l s \\<Longrightarrow> postList xs l s;\n        postSet (set (a # xs)) l s\\<rbrakk>\n       \\<Longrightarrow> postList (a # xs) l s", "from Cons"], ["proof (chain)\npicking this:\n  postSet (set xs) l s \\<Longrightarrow> postList xs l s\n  postSet (set (a # xs)) l s", "show ?case"], ["proof (prove)\nusing this:\n  postSet (set xs) l s \\<Longrightarrow> postList xs l s\n  postSet (set (a # xs)) l s\n\ngoal (1 subgoal):\n 1. postList (a # xs) l s", "unfolding a"], ["proof (prove)\nusing this:\n  postSet (set xs) l s \\<Longrightarrow> postList xs l s\n  postSet (set ((y, e, v) # xs)) l s\n\ngoal (1 subgoal):\n 1. postList ((y, e, v) # xs) l s", "by(simp)"], ["proof (state)\nthis:\n  postList (a # xs) l s\n\ngoal (1 subgoal):\n 1. postSet (set []) l s \\<Longrightarrow> postList [] l s", "qed simp"], ["", "lemma postListpostSet2: \" postList xs l s = postSet (set xs) l s \""], ["proof (prove)\ngoal (1 subgoal):\n 1. postList xs l s = postSet (set xs) l s", "using postListpostSet postSetpostList"], ["proof (prove)\nusing this:\n  postSet (set ?xs) ?l ?s \\<Longrightarrow> postList ?xs ?l ?s\n  postList ?xs ?l ?s \\<Longrightarrow> postSet (set ?xs) ?l ?s\n\ngoal (1 subgoal):\n 1. postList xs l s = postSet (set xs) l s", "by metis"], ["", "lemma ListAskip: \"preList xs Askip l s = postList xs  l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preList xs SKIP l s = postList xs l s", "apply(induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. preList [] SKIP l s = postList [] l s\n 2. \\<And>a xs.\n       preList xs SKIP l s = postList xs l s \\<Longrightarrow>\n       preList (a # xs) SKIP l s = postList (a # xs) l s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       preList xs SKIP l s = postList xs l s \\<Longrightarrow>\n       preList (a # xs) SKIP l s = postList (a # xs) l s", "by force"], ["", "lemma SetAskip: \"preSet U Askip l s = postSet U l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preSet U SKIP l s = postSet U l s", "by simp"], ["", "lemma ListAassign: \"preList upds (Aassign x1 x2) l s = postList upds l (s[x2/x1])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preList upds (x1 ::= x2) l s = postList upds l (s[x2/x1])", "apply(induct upds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. preList [] (x1 ::= x2) l s = postList [] l (s[x2/x1])\n 2. \\<And>a upds.\n       preList upds (x1 ::= x2) l s =\n       postList upds l (s[x2/x1]) \\<Longrightarrow>\n       preList (a # upds) (x1 ::= x2) l s = postList (a # upds) l (s[x2/x1])", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a upds.\n       preList upds (x1 ::= x2) l s =\n       postList upds l (s[x2/x1]) \\<Longrightarrow>\n       preList (a # upds) (x1 ::= x2) l s = postList (a # upds) l (s[x2/x1])", "by force"], ["", "lemma SetAassign: \"preSet U (Aassign x1 x2) l s = postSet U l (s[x2/x1])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preSet U (x1 ::= x2) l s = postSet U l (s[x2/x1])", "by simp"], ["", "lemma ListAconseq: \"preList upds (Aconseq x1 x2 x3 C) l s = preList upds C l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preList upds ({x1/x2/x3} CONSEQ C) l s = preList upds C l s", "apply(induct upds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. preList [] ({x1/x2/x3} CONSEQ C) l s = preList [] C l s\n 2. \\<And>a upds.\n       preList upds ({x1/x2/x3} CONSEQ C) l s =\n       preList upds C l s \\<Longrightarrow>\n       preList (a # upds) ({x1/x2/x3} CONSEQ C) l s =\n       preList (a # upds) C l s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a upds.\n       preList upds ({x1/x2/x3} CONSEQ C) l s =\n       preList upds C l s \\<Longrightarrow>\n       preList (a # upds) ({x1/x2/x3} CONSEQ C) l s =\n       preList (a # upds) C l s", "by force"], ["", "lemma SetAconseq: \"preSet U (Aconseq x1 x2 x3 C) l s = preSet U C l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preSet U ({x1/x2/x3} CONSEQ C) l s = preSet U C l s", "by simp"], ["", "lemma ListAif1: \"bval b s \\<Longrightarrow> preList upds (IF b THEN C1 ELSE C2) l s = preList upds C1 l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow>\n    preList upds (IF b THEN C1 ELSE C2) l s = preList upds C1 l s", "apply(induct upds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    preList [] (IF b THEN C1 ELSE C2) l s = preList [] C1 l s\n 2. \\<And>a upds.\n       \\<lbrakk>bval b s \\<Longrightarrow>\n                preList upds (IF b THEN C1 ELSE C2) l s =\n                preList upds C1 l s;\n        bval b s\\<rbrakk>\n       \\<Longrightarrow> preList (a # upds) (IF b THEN C1 ELSE C2) l s =\n                         preList (a # upds) C1 l s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a upds.\n       \\<lbrakk>bval b s \\<Longrightarrow>\n                preList upds (IF b THEN C1 ELSE C2) l s =\n                preList upds C1 l s;\n        bval b s\\<rbrakk>\n       \\<Longrightarrow> preList (a # upds) (IF b THEN C1 ELSE C2) l s =\n                         preList (a # upds) C1 l s", "by force"], ["", "lemma SetAif1: \"bval b s \\<Longrightarrow> preSet upds (IF b THEN C1 ELSE C2) l s = preSet upds C1 l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow>\n    preSet upds (IF b THEN C1 ELSE C2) l s = preSet upds C1 l s", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ListAif2: \"~ bval b s \\<Longrightarrow> preList upds (IF b THEN C1 ELSE C2) l s = preList upds C2 l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    preList upds (IF b THEN C1 ELSE C2) l s = preList upds C2 l s", "apply(induct upds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> bval b s \\<Longrightarrow>\n    preList [] (IF b THEN C1 ELSE C2) l s = preList [] C2 l s\n 2. \\<And>a upds.\n       \\<lbrakk>\\<not> bval b s \\<Longrightarrow>\n                preList upds (IF b THEN C1 ELSE C2) l s =\n                preList upds C2 l s;\n        \\<not> bval b s\\<rbrakk>\n       \\<Longrightarrow> preList (a # upds) (IF b THEN C1 ELSE C2) l s =\n                         preList (a # upds) C2 l s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a upds.\n       \\<lbrakk>\\<not> bval b s \\<Longrightarrow>\n                preList upds (IF b THEN C1 ELSE C2) l s =\n                preList upds C2 l s;\n        \\<not> bval b s\\<rbrakk>\n       \\<Longrightarrow> preList (a # upds) (IF b THEN C1 ELSE C2) l s =\n                         preList (a # upds) C2 l s", "by force"], ["", "lemma SetAif2: \"~ bval b s \\<Longrightarrow> preSet upds (IF b THEN C1 ELSE C2) l s = preSet upds C2 l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    preSet upds (IF b THEN C1 ELSE C2) l s = preSet upds C2 l s", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition K where \"K C LVQ Q == (\\<forall>l s1 s2. s1 = s2 on qdeps C LVQ \\<longrightarrow> pre C Q l s1 = pre C Q l s2)\""], ["", "definition K2 where \"K2 C e Es Q == (\\<forall>s1 s2. s1 = s2 on fune C Es \\<longrightarrow> preT C e s1 = preT C e s2)\""], ["", "definition K3 where \"K3 upds C Q = (\\<forall>(a,b,c)\\<in>set upds. K2 C b c Q)\""], ["", "definition K4 where \"K4 upds LV C Q = (K C LV Q \\<and> K3 upds C Q \\<and> (\\<forall>s1 s2. s1 = s2 on kdeps C \\<longrightarrow> time C s1 = time C s2))\""], ["", "lemma k4If: \"K4 upds LVQ C1 Q \\<Longrightarrow> K4 upds LVQ C2 Q \\<Longrightarrow> K4 upds LVQ (IF b THEN C1 ELSE C2) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>K4 upds LVQ C1 Q; K4 upds LVQ C2 Q\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (IF b THEN C1 ELSE C2) Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>K4 upds LVQ C1 Q; K4 upds LVQ C2 Q\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (IF b THEN C1 ELSE C2) Q", "have fl: \"\\<And>A B s1 s2. A \\<subseteq> B \\<Longrightarrow> s1 = s2 on B \\<Longrightarrow> s1 = s2 on A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B s1 s2.\n       \\<lbrakk>A \\<subseteq> B; s1 = s2 on B\\<rbrakk>\n       \\<Longrightarrow> s1 = s2 on A", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?A \\<subseteq> ?B; ?s1.0 = ?s2.0 on ?B\\<rbrakk>\n  \\<Longrightarrow> ?s1.0 = ?s2.0 on ?A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>K4 upds LVQ C1 Q; K4 upds LVQ C2 Q\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (IF b THEN C1 ELSE C2) Q", "assume \"K4 upds LVQ C1 Q\" \"K4 upds LVQ C2 Q\""], ["proof (state)\nthis:\n  K4 upds LVQ C1 Q\n  K4 upds LVQ C2 Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>K4 upds LVQ C1 Q; K4 upds LVQ C2 Q\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (IF b THEN C1 ELSE C2) Q", "then"], ["proof (chain)\npicking this:\n  K4 upds LVQ C1 Q\n  K4 upds LVQ C2 Q", "show \"K4 upds LVQ (IF b THEN C1 ELSE C2) Q\""], ["proof (prove)\nusing this:\n  K4 upds LVQ C1 Q\n  K4 upds LVQ C2 Q\n\ngoal (1 subgoal):\n 1. K4 upds LVQ (IF b THEN C1 ELSE C2) Q", "unfolding K4_def K_def K3_def K2_def"], ["proof (prove)\nusing this:\n  (\\<forall>l s1 s2.\n      s1 = s2 on qdeps C1 LVQ \\<longrightarrow>\n      pre C1 Q l s1 = pre C1 Q l s2) \\<and>\n  (\\<forall>(a, b, c)\\<in>set upds.\n      \\<forall>s1 s2.\n         s1 = s2 on fune C1 c \\<longrightarrow>\n         preT C1 b s1 = preT C1 b s2) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2)\n  (\\<forall>l s1 s2.\n      s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n      pre C2 Q l s1 = pre C2 Q l s2) \\<and>\n  (\\<forall>(a, b, c)\\<in>set upds.\n      \\<forall>s1 s2.\n         s1 = s2 on fune C2 c \\<longrightarrow>\n         preT C2 b s1 = preT C2 b s2) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n\ngoal (1 subgoal):\n 1. (\\<forall>l s1 s2.\n        s1 = s2 on qdeps (IF b THEN C1 ELSE C2) LVQ \\<longrightarrow>\n        pre (IF b THEN C1 ELSE C2) Q l s1 =\n        pre (IF b THEN C1 ELSE C2) Q l s2) \\<and>\n    (\\<forall>(a, ba, c)\\<in>set upds.\n        \\<forall>s1 s2.\n           s1 = s2 on fune (IF b THEN C1 ELSE C2) c \\<longrightarrow>\n           preT (IF b THEN C1 ELSE C2) ba s1 =\n           preT (IF b THEN C1 ELSE C2) ba s2) \\<and>\n    (\\<forall>s1 s2.\n        s1 = s2 on kdeps (IF b THEN C1 ELSE C2) \\<longrightarrow>\n        time (IF b THEN C1 ELSE C2) s1 = time (IF b THEN C1 ELSE C2) s2)", "using bval_eq_if_eq_on_vars fl"], ["proof (prove)\nusing this:\n  (\\<forall>l s1 s2.\n      s1 = s2 on qdeps C1 LVQ \\<longrightarrow>\n      pre C1 Q l s1 = pre C1 Q l s2) \\<and>\n  (\\<forall>(a, b, c)\\<in>set upds.\n      \\<forall>s1 s2.\n         s1 = s2 on fune C1 c \\<longrightarrow>\n         preT C1 b s1 = preT C1 b s2) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2)\n  (\\<forall>l s1 s2.\n      s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n      pre C2 Q l s1 = pre C2 Q l s2) \\<and>\n  (\\<forall>(a, b, c)\\<in>set upds.\n      \\<forall>s1 s2.\n         s1 = s2 on fune C2 c \\<longrightarrow>\n         preT C2 b s1 = preT C2 b s2) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n  ?s\\<^sub>1 = ?s\\<^sub>2 on vars ?b \\<Longrightarrow>\n  bval ?b ?s\\<^sub>1 = bval ?b ?s\\<^sub>2\n  \\<lbrakk>?A \\<subseteq> ?B; ?s1.0 = ?s2.0 on ?B\\<rbrakk>\n  \\<Longrightarrow> ?s1.0 = ?s2.0 on ?A\n\ngoal (1 subgoal):\n 1. (\\<forall>l s1 s2.\n        s1 = s2 on qdeps (IF b THEN C1 ELSE C2) LVQ \\<longrightarrow>\n        pre (IF b THEN C1 ELSE C2) Q l s1 =\n        pre (IF b THEN C1 ELSE C2) Q l s2) \\<and>\n    (\\<forall>(a, ba, c)\\<in>set upds.\n        \\<forall>s1 s2.\n           s1 = s2 on fune (IF b THEN C1 ELSE C2) c \\<longrightarrow>\n           preT (IF b THEN C1 ELSE C2) ba s1 =\n           preT (IF b THEN C1 ELSE C2) ba s2) \\<and>\n    (\\<forall>s1 s2.\n        s1 = s2 on kdeps (IF b THEN C1 ELSE C2) \\<longrightarrow>\n        time (IF b THEN C1 ELSE C2) s1 = time (IF b THEN C1 ELSE C2) s2)", "apply auto"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>l s1 s2.\n       \\<lbrakk>\\<And>b s\\<^sub>1 s\\<^sub>2.\n                   s\\<^sub>1 = s\\<^sub>2 on vars b \\<Longrightarrow>\n                   bval b s\\<^sub>1 = bval b s\\<^sub>2;\n        \\<And>A B s1 s2.\n           \\<lbrakk>A \\<subseteq> B; s1 = s2 on B\\<rbrakk>\n           \\<Longrightarrow> s1 = s2 on A;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C1 LVQ \\<longrightarrow>\n           pre C1 Q l s1 = pre C1 Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n           pre C2 Q l s1 = pre C2 Q l s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C1 c \\<longrightarrow>\n                preT C1 b s1 = preT C1 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C2 c \\<longrightarrow>\n                preT C2 b s1 = preT C2 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2;\n        bval b s1; \\<not> bval b s2;\n        s1 = s2 on vars b \\<union> qdeps C1 LVQ \\<union> qdeps C2 LVQ;\n        pre C1 Q l s1\\<rbrakk>\n       \\<Longrightarrow> pre C2 Q l s2\n 2. \\<And>l s1 s2.\n       \\<lbrakk>\\<And>b s\\<^sub>1 s\\<^sub>2.\n                   s\\<^sub>1 = s\\<^sub>2 on vars b \\<Longrightarrow>\n                   bval b s\\<^sub>1 = bval b s\\<^sub>2;\n        \\<And>A B s1 s2.\n           \\<lbrakk>A \\<subseteq> B; s1 = s2 on B\\<rbrakk>\n           \\<Longrightarrow> s1 = s2 on A;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C1 LVQ \\<longrightarrow>\n           pre C1 Q l s1 = pre C1 Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n           pre C2 Q l s1 = pre C2 Q l s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C1 c \\<longrightarrow>\n                preT C1 b s1 = preT C1 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C2 c \\<longrightarrow>\n                preT C2 b s1 = preT C2 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2;\n        bval b s1; \\<not> bval b s2;\n        s1 = s2 on vars b \\<union> qdeps C1 LVQ \\<union> qdeps C2 LVQ;\n        pre C2 Q l s2\\<rbrakk>\n       \\<Longrightarrow> pre C1 Q l s1\n 3. \\<And>l s1 s2.\n       \\<lbrakk>\\<And>b s\\<^sub>1 s\\<^sub>2.\n                   s\\<^sub>1 = s\\<^sub>2 on vars b \\<Longrightarrow>\n                   bval b s\\<^sub>1 = bval b s\\<^sub>2;\n        \\<And>A B s1 s2.\n           \\<lbrakk>A \\<subseteq> B; s1 = s2 on B\\<rbrakk>\n           \\<Longrightarrow> s1 = s2 on A;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C1 LVQ \\<longrightarrow>\n           pre C1 Q l s1 = pre C1 Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n           pre C2 Q l s1 = pre C2 Q l s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C1 c \\<longrightarrow>\n                preT C1 b s1 = preT C1 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C2 c \\<longrightarrow>\n                preT C2 b s1 = preT C2 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2;\n        \\<not> bval b s1; bval b s2;\n        s1 = s2 on vars b \\<union> qdeps C1 LVQ \\<union> qdeps C2 LVQ;\n        pre C2 Q l s1\\<rbrakk>\n       \\<Longrightarrow> pre C1 Q l s2\n 4. \\<And>l s1 s2.\n       \\<lbrakk>\\<And>b s\\<^sub>1 s\\<^sub>2.\n                   s\\<^sub>1 = s\\<^sub>2 on vars b \\<Longrightarrow>\n                   bval b s\\<^sub>1 = bval b s\\<^sub>2;\n        \\<And>A B s1 s2.\n           \\<lbrakk>A \\<subseteq> B; s1 = s2 on B\\<rbrakk>\n           \\<Longrightarrow> s1 = s2 on A;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C1 LVQ \\<longrightarrow>\n           pre C1 Q l s1 = pre C1 Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n           pre C2 Q l s1 = pre C2 Q l s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C1 c \\<longrightarrow>\n                preT C1 b s1 = preT C1 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C2 c \\<longrightarrow>\n                preT C2 b s1 = preT C2 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2;\n        \\<not> bval b s1; bval b s2;\n        s1 = s2 on vars b \\<union> qdeps C1 LVQ \\<union> qdeps C2 LVQ;\n        pre C1 Q l s2\\<rbrakk>\n       \\<Longrightarrow> pre C2 Q l s1\n 5. \\<And>a aa ba s1 s2.\n       \\<lbrakk>\\<And>b s\\<^sub>1 s\\<^sub>2.\n                   s\\<^sub>1 = s\\<^sub>2 on vars b \\<Longrightarrow>\n                   bval b s\\<^sub>1 = bval b s\\<^sub>2;\n        \\<And>A B s1 s2.\n           \\<lbrakk>A \\<subseteq> B; s1 = s2 on B\\<rbrakk>\n           \\<Longrightarrow> s1 = s2 on A;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C1 LVQ \\<longrightarrow>\n           pre C1 Q l s1 = pre C1 Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n           pre C2 Q l s1 = pre C2 Q l s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C1 c \\<longrightarrow>\n                preT C1 b s1 = preT C1 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C2 c \\<longrightarrow>\n                preT C2 b s1 = preT C2 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2;\n        (a, aa, ba) \\<in> set upds; bval b s1; \\<not> bval b s2;\n        s1 = s2 on vars b \\<union> fune C1 ba \\<union> fune C2 ba\\<rbrakk>\n       \\<Longrightarrow> preT C1 aa s1 = preT C2 aa s2\n 6. \\<And>a aa ba s1 s2.\n       \\<lbrakk>\\<And>b s\\<^sub>1 s\\<^sub>2.\n                   s\\<^sub>1 = s\\<^sub>2 on vars b \\<Longrightarrow>\n                   bval b s\\<^sub>1 = bval b s\\<^sub>2;\n        \\<And>A B s1 s2.\n           \\<lbrakk>A \\<subseteq> B; s1 = s2 on B\\<rbrakk>\n           \\<Longrightarrow> s1 = s2 on A;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C1 LVQ \\<longrightarrow>\n           pre C1 Q l s1 = pre C1 Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n           pre C2 Q l s1 = pre C2 Q l s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C1 c \\<longrightarrow>\n                preT C1 b s1 = preT C1 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C2 c \\<longrightarrow>\n                preT C2 b s1 = preT C2 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2;\n        (a, aa, ba) \\<in> set upds; \\<not> bval b s1; bval b s2;\n        s1 = s2 on vars b \\<union> fune C1 ba \\<union> fune C2 ba\\<rbrakk>\n       \\<Longrightarrow> preT C2 aa s1 = preT C1 aa s2\n 7. \\<And>s1 s2.\n       \\<lbrakk>\\<And>b s\\<^sub>1 s\\<^sub>2.\n                   s\\<^sub>1 = s\\<^sub>2 on vars b \\<Longrightarrow>\n                   bval b s\\<^sub>1 = bval b s\\<^sub>2;\n        \\<And>A B s1 s2.\n           \\<lbrakk>A \\<subseteq> B; s1 = s2 on B\\<rbrakk>\n           \\<Longrightarrow> s1 = s2 on A;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C1 LVQ \\<longrightarrow>\n           pre C1 Q l s1 = pre C1 Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n           pre C2 Q l s1 = pre C2 Q l s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C1 c \\<longrightarrow>\n                preT C1 b s1 = preT C1 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C2 c \\<longrightarrow>\n                preT C2 b s1 = preT C2 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2;\n        bval b s1; \\<not> bval b s2;\n        s1 = s2 on vars b \\<union> kdeps C1 \\<union> kdeps C2\\<rbrakk>\n       \\<Longrightarrow> time C1 s1 = time C2 s2\n 8. \\<And>s1 s2.\n       \\<lbrakk>\\<And>b s\\<^sub>1 s\\<^sub>2.\n                   s\\<^sub>1 = s\\<^sub>2 on vars b \\<Longrightarrow>\n                   bval b s\\<^sub>1 = bval b s\\<^sub>2;\n        \\<And>A B s1 s2.\n           \\<lbrakk>A \\<subseteq> B; s1 = s2 on B\\<rbrakk>\n           \\<Longrightarrow> s1 = s2 on A;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C1 LVQ \\<longrightarrow>\n           pre C1 Q l s1 = pre C1 Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n           pre C2 Q l s1 = pre C2 Q l s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C1 c \\<longrightarrow>\n                preT C1 b s1 = preT C1 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2;\n        \\<forall>x\\<in>set upds.\n           case x of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C2 c \\<longrightarrow>\n                preT C2 b s1 = preT C2 b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2;\n        \\<not> bval b s1; bval b s2;\n        s1 = s2 on vars b \\<union> kdeps C1 \\<union> kdeps C2\\<rbrakk>\n       \\<Longrightarrow> time C2 s1 = time C1 s2", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  K4 upds LVQ (IF b THEN C1 ELSE C2) Q\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \"Soundness\""], ["", "lemma vc_sound: \"vc C Q LVQ LVE \\<Longrightarrow> finite (support Q)\n  \\<Longrightarrow> fst ` (set upds) \\<inter> varacom C = {} \\<Longrightarrow> distinct (map fst upds)\n  \\<Longrightarrow> finite (varacom C) \n  \\<Longrightarrow> (\\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2)\n  \\<Longrightarrow> (\\<forall>l s1 s2. s1 = s2 on LVE \\<longrightarrow> postList upds l s1 = postList upds l s2)\n  \\<Longrightarrow> (\\<forall>(a,b,c)\\<in>set upds. (\\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2))             \\<comment> \\<open>\\<open>c\\<close> are really the variables \\<open>b\\<close> depends on\\<close>\n  \\<Longrightarrow> (\\<Union>(a,b,c)\\<in>set upds. c) \\<subseteq> LVE                                     \\<comment> \\<open>in \\<open>LV\\<close> are all the variables that the expressions in \\<open>upds\\<close> depend on\\<close>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {%l s. pre C Q l s \\<and> preList upds C l s} strip C { time C \\<Down> %l s. Q l s \\<and> postList upds l s}\n  \\<and> ((\\<forall>l s. pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>  K4 upds LVQ C Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n     lesvars upds \\<inter> varacom C = {}; distinct (map fst upds);\n     finite (varacom C);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>(a, b, c)\\<in>set upds.\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n     (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         pre C Q l s \\<and> preList upds C l s}\n     strip C\n     { time C \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                      (\\<forall>l s.\n                          pre C Q l s \\<longrightarrow>\n                          Q l (postQ C s)) \\<and>\n                      K4 upds LVQ C Q", "proof(induction C arbitrary: Q upds LVE LVQ)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>Q upds LVE LVQ.\n       \\<lbrakk>vc SKIP Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom SKIP = {}; distinct (map fst upds);\n        finite (varacom SKIP);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre SKIP Q l s \\<and> preList upds SKIP l s}\n        strip SKIP\n        { time\n           SKIP \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre SKIP Q l s \\<longrightarrow>\n                             Q l (postQ SKIP s)) \\<and>\n                         K4 upds LVQ SKIP Q\n 2. \\<And>x1 x2 Q upds LVE LVQ.\n       \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n        distinct (map fst upds); finite (varacom (x1 ::= x2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (x1 ::= x2) Q l s \\<and> preList upds (x1 ::= x2) l s}\n        strip (x1 ::= x2)\n        { time\n           (x1 ::= x2) \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (x1 ::= x2) Q l s \\<longrightarrow>\n                             Q l (postQ (x1 ::= x2) s)) \\<and>\n                         K4 upds LVQ (x1 ::= x2) Q\n 3. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 4. \\<And>x1 C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (IF x1 THEN C1 ELSE C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (IF x1 THEN C1 ELSE C2) = {};\n        distinct (map fst upds); finite (varacom (IF x1 THEN C1 ELSE C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (IF x1 THEN C1 ELSE C2) Q l s \\<and>\n            preList upds (IF x1 THEN C1 ELSE C2) l s}\n        strip (IF x1 THEN C1 ELSE C2)\n        { time\n           (IF x1 THEN C1\n            ELSE C2) \\<Down> \\<lambda>l s.\n                                Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (IF x1 THEN C1 ELSE C2) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ (IF x1 THEN C1 ELSE C2) s)) \\<and>\n                         K4 upds LVQ (IF x1 THEN C1 ELSE C2) Q\n 5. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 6. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "case (Askip Q upds)"], ["proof (state)\nthis:\n  vc SKIP Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom SKIP = {}\n  distinct (map fst upds)\n  finite (varacom SKIP)\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (6 subgoals):\n 1. \\<And>Q upds LVE LVQ.\n       \\<lbrakk>vc SKIP Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom SKIP = {}; distinct (map fst upds);\n        finite (varacom SKIP);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre SKIP Q l s \\<and> preList upds SKIP l s}\n        strip SKIP\n        { time\n           SKIP \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre SKIP Q l s \\<longrightarrow>\n                             Q l (postQ SKIP s)) \\<and>\n                         K4 upds LVQ SKIP Q\n 2. \\<And>x1 x2 Q upds LVE LVQ.\n       \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n        distinct (map fst upds); finite (varacom (x1 ::= x2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (x1 ::= x2) Q l s \\<and> preList upds (x1 ::= x2) l s}\n        strip (x1 ::= x2)\n        { time\n           (x1 ::= x2) \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (x1 ::= x2) Q l s \\<longrightarrow>\n                             Q l (postQ (x1 ::= x2) s)) \\<and>\n                         K4 upds LVQ (x1 ::= x2) Q\n 3. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 4. \\<And>x1 C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (IF x1 THEN C1 ELSE C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (IF x1 THEN C1 ELSE C2) = {};\n        distinct (map fst upds); finite (varacom (IF x1 THEN C1 ELSE C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (IF x1 THEN C1 ELSE C2) Q l s \\<and>\n            preList upds (IF x1 THEN C1 ELSE C2) l s}\n        strip (IF x1 THEN C1 ELSE C2)\n        { time\n           (IF x1 THEN C1\n            ELSE C2) \\<Down> \\<lambda>l s.\n                                Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (IF x1 THEN C1 ELSE C2) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ (IF x1 THEN C1 ELSE C2) s)) \\<and>\n                         K4 upds LVQ (IF x1 THEN C1 ELSE C2) Q\n 5. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 6. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "then"], ["proof (chain)\npicking this:\n  vc SKIP Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom SKIP = {}\n  distinct (map fst upds)\n  finite (varacom SKIP)\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE", "show ?case"], ["proof (prove)\nusing this:\n  vc SKIP Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom SKIP = {}\n  distinct (map fst upds)\n  finite (varacom SKIP)\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre SKIP Q l s \\<and> preList upds SKIP l s}\n                         strip SKIP\n                         { time\n                            SKIP \\<Down> \\<lambda>l s.\n      Q l s \\<and> postList upds l s} \\<and>\n    (\\<forall>l s.\n        pre SKIP Q l s \\<longrightarrow> Q l (postQ SKIP s)) \\<and>\n    K4 upds LVQ SKIP Q", "unfolding K4_def K_def K3_def K2_def"], ["proof (prove)\nusing this:\n  vc SKIP Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom SKIP = {}\n  distinct (map fst upds)\n  finite (varacom SKIP)\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre SKIP Q l s \\<and> preList upds SKIP l s}\n                         strip SKIP\n                         { time\n                            SKIP \\<Down> \\<lambda>l s.\n      Q l s \\<and> postList upds l s} \\<and>\n    (\\<forall>l s.\n        pre SKIP Q l s \\<longrightarrow> Q l (postQ SKIP s)) \\<and>\n    (\\<forall>l s1 s2.\n        s1 = s2 on qdeps SKIP LVQ \\<longrightarrow>\n        pre SKIP Q l s1 = pre SKIP Q l s2) \\<and>\n    (\\<forall>(a, b, c)\\<in>set upds.\n        \\<forall>s1 s2.\n           s1 = s2 on fune SKIP c \\<longrightarrow>\n           preT SKIP b s1 = preT SKIP b s2) \\<and>\n    (\\<forall>s1 s2.\n        s1 = s2 on kdeps SKIP \\<longrightarrow> time SKIP s1 = time SKIP s2)", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (support Q); distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>x\\<in>set upds.\n        case x of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n     (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         Q l s \\<and> preList upds SKIP l s}\n     SKIP\n     { \\<lambda>a.\n          Suc 0 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s}", "apply(rule weaken_post[where Q=\"%l s. Q l s \\<and> preList upds Askip l s\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite (support Q); distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>x\\<in>set upds.\n        case x of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n     (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         Q l s \\<and> preList upds SKIP l s}\n     SKIP\n     { \\<lambda>a.\n          Suc 0 \\<Down> \\<lambda>l s. Q l s \\<and> preList upds SKIP l s}\n 2. \\<lbrakk>finite (support Q); distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>x\\<in>set upds.\n        case x of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n     (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> \\<forall>l s.\n                         Q l s \\<and>\n                         preList upds SKIP l s \\<longrightarrow>\n                         Q l s \\<and> postList upds l s", "apply(simp add: Skip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (support Q); distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>x\\<in>set upds.\n        case x of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n     (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> \\<forall>l s.\n                         Q l s \\<and>\n                         preList upds SKIP l s \\<longrightarrow>\n                         Q l s \\<and> postList upds l s", "using ListAskip"], ["proof (prove)\nusing this:\n  preList ?xs SKIP ?l ?s = postList ?xs ?l ?s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (support Q); distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>x\\<in>set upds.\n        case x of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n     (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> \\<forall>l s.\n                         Q l s \\<and>\n                         preList upds SKIP l s \\<longrightarrow>\n                         Q l s \\<and> postList upds l s", "by fast"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           pre SKIP Q l s \\<and> preList upds SKIP l s}\n                       strip SKIP\n                       { time\n                          SKIP \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s} \\<and>\n  (\\<forall>l s. pre SKIP Q l s \\<longrightarrow> Q l (postQ SKIP s)) \\<and>\n  K4 upds LVQ SKIP Q\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 Q upds LVE LVQ.\n       \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n        distinct (map fst upds); finite (varacom (x1 ::= x2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (x1 ::= x2) Q l s \\<and> preList upds (x1 ::= x2) l s}\n        strip (x1 ::= x2)\n        { time\n           (x1 ::= x2) \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (x1 ::= x2) Q l s \\<longrightarrow>\n                             Q l (postQ (x1 ::= x2) s)) \\<and>\n                         K4 upds LVQ (x1 ::= x2) Q\n 2. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 3. \\<And>x1 C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (IF x1 THEN C1 ELSE C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (IF x1 THEN C1 ELSE C2) = {};\n        distinct (map fst upds); finite (varacom (IF x1 THEN C1 ELSE C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (IF x1 THEN C1 ELSE C2) Q l s \\<and>\n            preList upds (IF x1 THEN C1 ELSE C2) l s}\n        strip (IF x1 THEN C1 ELSE C2)\n        { time\n           (IF x1 THEN C1\n            ELSE C2) \\<Down> \\<lambda>l s.\n                                Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (IF x1 THEN C1 ELSE C2) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ (IF x1 THEN C1 ELSE C2) s)) \\<and>\n                         K4 upds LVQ (IF x1 THEN C1 ELSE C2) Q\n 4. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 5. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 Q upds LVE LVQ.\n       \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n        distinct (map fst upds); finite (varacom (x1 ::= x2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (x1 ::= x2) Q l s \\<and> preList upds (x1 ::= x2) l s}\n        strip (x1 ::= x2)\n        { time\n           (x1 ::= x2) \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (x1 ::= x2) Q l s \\<longrightarrow>\n                             Q l (postQ (x1 ::= x2) s)) \\<and>\n                         K4 upds LVQ (x1 ::= x2) Q\n 2. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 3. \\<And>x1 C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (IF x1 THEN C1 ELSE C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (IF x1 THEN C1 ELSE C2) = {};\n        distinct (map fst upds); finite (varacom (IF x1 THEN C1 ELSE C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (IF x1 THEN C1 ELSE C2) Q l s \\<and>\n            preList upds (IF x1 THEN C1 ELSE C2) l s}\n        strip (IF x1 THEN C1 ELSE C2)\n        { time\n           (IF x1 THEN C1\n            ELSE C2) \\<Down> \\<lambda>l s.\n                                Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (IF x1 THEN C1 ELSE C2) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ (IF x1 THEN C1 ELSE C2) s)) \\<and>\n                         K4 upds LVQ (IF x1 THEN C1 ELSE C2) Q\n 4. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 5. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "case (Aassign x1 x2 Q upds)"], ["proof (state)\nthis:\n  vc (x1 ::= x2) Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom (x1 ::= x2) = {}\n  distinct (map fst upds)\n  finite (varacom (x1 ::= x2))\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 Q upds LVE LVQ.\n       \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n        distinct (map fst upds); finite (varacom (x1 ::= x2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (x1 ::= x2) Q l s \\<and> preList upds (x1 ::= x2) l s}\n        strip (x1 ::= x2)\n        { time\n           (x1 ::= x2) \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (x1 ::= x2) Q l s \\<longrightarrow>\n                             Q l (postQ (x1 ::= x2) s)) \\<and>\n                         K4 upds LVQ (x1 ::= x2) Q\n 2. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 3. \\<And>x1 C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (IF x1 THEN C1 ELSE C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (IF x1 THEN C1 ELSE C2) = {};\n        distinct (map fst upds); finite (varacom (IF x1 THEN C1 ELSE C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (IF x1 THEN C1 ELSE C2) Q l s \\<and>\n            preList upds (IF x1 THEN C1 ELSE C2) l s}\n        strip (IF x1 THEN C1 ELSE C2)\n        { time\n           (IF x1 THEN C1\n            ELSE C2) \\<Down> \\<lambda>l s.\n                                Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (IF x1 THEN C1 ELSE C2) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ (IF x1 THEN C1 ELSE C2) s)) \\<and>\n                         K4 upds LVQ (IF x1 THEN C1 ELSE C2) Q\n 4. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 5. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "then"], ["proof (chain)\npicking this:\n  vc (x1 ::= x2) Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom (x1 ::= x2) = {}\n  distinct (map fst upds)\n  finite (varacom (x1 ::= x2))\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE", "show ?case"], ["proof (prove)\nusing this:\n  vc (x1 ::= x2) Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom (x1 ::= x2) = {}\n  distinct (map fst upds)\n  finite (varacom (x1 ::= x2))\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre (x1 ::= x2) Q l s \\<and>\n                             preList upds (x1 ::= x2) l s}\n                         strip (x1 ::= x2)\n                         { time\n                            (x1 ::= x2) \\<Down> \\<lambda>l s.\n             Q l s \\<and> postList upds l s} \\<and>\n    (\\<forall>l s.\n        pre (x1 ::= x2) Q l s \\<longrightarrow>\n        Q l (postQ (x1 ::= x2) s)) \\<and>\n    K4 upds LVQ (x1 ::= x2) Q", "unfolding K_def"], ["proof (prove)\nusing this:\n  vc (x1 ::= x2) Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom (x1 ::= x2) = {}\n  distinct (map fst upds)\n  finite (varacom (x1 ::= x2))\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre (x1 ::= x2) Q l s \\<and>\n                             preList upds (x1 ::= x2) l s}\n                         strip (x1 ::= x2)\n                         { time\n                            (x1 ::= x2) \\<Down> \\<lambda>l s.\n             Q l s \\<and> postList upds l s} \\<and>\n    (\\<forall>l s.\n        pre (x1 ::= x2) Q l s \\<longrightarrow>\n        Q l (postQ (x1 ::= x2) s)) \\<and>\n    K4 upds LVQ (x1 ::= x2) Q", "apply(safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n     lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n     distinct (map fst upds); finite (varacom (x1 ::= x2));\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         pre (x1 ::= x2) Q l s \\<and> preList upds (x1 ::= x2) l s}\n     strip (x1 ::= x2)\n     { time\n        (x1 ::= x2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s}\n 2. \\<And>l s.\n       \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n        distinct (map fst upds); finite (varacom (x1 ::= x2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        pre (x1 ::= x2) Q l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ (x1 ::= x2) s)\n 3. \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n     lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n     distinct (map fst upds); finite (varacom (x1 ::= x2));\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (x1 ::= x2) Q", "apply(auto simp add: Assign)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite (support Q); distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>x\\<in>set upds.\n        case x of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n     (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         Q l (s[x2/x1]) \\<and> preList upds (x1 ::= x2) l s}\n     x1 ::= x2\n     { \\<lambda>a.\n          Suc 0 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s}\n 2. \\<And>l s.\n       \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n        distinct (map fst upds); finite (varacom (x1 ::= x2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        pre (x1 ::= x2) Q l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ (x1 ::= x2) s)\n 3. \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n     lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n     distinct (map fst upds); finite (varacom (x1 ::= x2));\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (x1 ::= x2) Q", "apply(rule weaken_post[where Q=\"%l s. Q l s \\<and> postList upds l s\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>finite (support Q); distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>x\\<in>set upds.\n        case x of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n     (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         Q l (s[x2/x1]) \\<and> preList upds (x1 ::= x2) l s}\n     x1 ::= x2\n     { \\<lambda>a.\n          Suc 0 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s}\n 2. \\<lbrakk>finite (support Q); distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>x\\<in>set upds.\n        case x of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n     (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> \\<forall>l s.\n                         Q l s \\<and> postList upds l s \\<longrightarrow>\n                         Q l s \\<and> postList upds l s\n 3. \\<And>l s.\n       \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n        distinct (map fst upds); finite (varacom (x1 ::= x2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        pre (x1 ::= x2) Q l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ (x1 ::= x2) s)\n 4. \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n     lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n     distinct (map fst upds); finite (varacom (x1 ::= x2));\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (x1 ::= x2) Q", "apply(simp only: ListAassign)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>finite (support Q); distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>x\\<in>set upds.\n        case x of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n     (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         Q l (s[x2/x1]) \\<and> postList upds l (s[x2/x1])}\n     x1 ::= x2\n     { \\<lambda>a.\n          Suc 0 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s}\n 2. \\<lbrakk>finite (support Q); distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>x\\<in>set upds.\n        case x of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n     (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> \\<forall>l s.\n                         Q l s \\<and> postList upds l s \\<longrightarrow>\n                         Q l s \\<and> postList upds l s\n 3. \\<And>l s.\n       \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n        distinct (map fst upds); finite (varacom (x1 ::= x2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        pre (x1 ::= x2) Q l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ (x1 ::= x2) s)\n 4. \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n     lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n     distinct (map fst upds); finite (varacom (x1 ::= x2));\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (x1 ::= x2) Q", "apply(rule Assign)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite (support Q); distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>x\\<in>set upds.\n        case x of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n     (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> \\<forall>l s.\n                         Q l s \\<and> postList upds l s \\<longrightarrow>\n                         Q l s \\<and> postList upds l s\n 2. \\<And>l s.\n       \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n        distinct (map fst upds); finite (varacom (x1 ::= x2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        pre (x1 ::= x2) Q l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ (x1 ::= x2) s)\n 3. \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n     lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n     distinct (map fst upds); finite (varacom (x1 ::= x2));\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (x1 ::= x2) Q", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n        distinct (map fst upds); finite (varacom (x1 ::= x2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        pre (x1 ::= x2) Q l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ (x1 ::= x2) s)\n 2. \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n     lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n     distinct (map fst upds); finite (varacom (x1 ::= x2));\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (x1 ::= x2) Q", "apply(simp only: postQ.simps pre.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vc (x1 ::= x2) Q LVQ LVE; finite (support Q);\n     lesvars upds \\<inter> varacom (x1 ::= x2) = {};\n     distinct (map fst upds); finite (varacom (x1 ::= x2));\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (x1 ::= x2) Q", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (support Q); distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>x\\<in>set upds.\n        case x of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n     (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (x1 ::= x2) Q", "unfolding K4_def K2_def K3_def K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (support Q); distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>x\\<in>set upds.\n        case x of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n     (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>l s1 s2.\n                          s1 = s2 on qdeps (x1 ::= x2) LVQ \\<longrightarrow>\n                          pre (x1 ::= x2) Q l s1 =\n                          pre (x1 ::= x2) Q l s2) \\<and>\n                      (\\<forall>(a, b, c)\\<in>set upds.\n                          \\<forall>s1 s2.\n                             s1 = s2 on fune (x1 ::= x2) c \\<longrightarrow>\n                             preT (x1 ::= x2) b s1 =\n                             preT (x1 ::= x2) b s2) \\<and>\n                      (\\<forall>s1 s2.\n                          s1 = s2 on kdeps (x1 ::= x2) \\<longrightarrow>\n                          time (x1 ::= x2) s1 = time (x1 ::= x2) s2)", "by (auto)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           pre (x1 ::= x2) Q l s \\<and>\n                           preList upds (x1 ::= x2) l s}\n                       strip (x1 ::= x2)\n                       { time\n                          (x1 ::= x2) \\<Down> \\<lambda>l s.\n           Q l s \\<and> postList upds l s} \\<and>\n  (\\<forall>l s.\n      pre (x1 ::= x2) Q l s \\<longrightarrow>\n      Q l (postQ (x1 ::= x2) s)) \\<and>\n  K4 upds LVQ (x1 ::= x2) Q\n\ngoal (4 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (IF x1 THEN C1 ELSE C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (IF x1 THEN C1 ELSE C2) = {};\n        distinct (map fst upds); finite (varacom (IF x1 THEN C1 ELSE C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (IF x1 THEN C1 ELSE C2) Q l s \\<and>\n            preList upds (IF x1 THEN C1 ELSE C2) l s}\n        strip (IF x1 THEN C1 ELSE C2)\n        { time\n           (IF x1 THEN C1\n            ELSE C2) \\<Down> \\<lambda>l s.\n                                Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (IF x1 THEN C1 ELSE C2) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ (IF x1 THEN C1 ELSE C2) s)) \\<and>\n                         K4 upds LVQ (IF x1 THEN C1 ELSE C2) Q\n 3. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 4. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (IF x1 THEN C1 ELSE C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (IF x1 THEN C1 ELSE C2) = {};\n        distinct (map fst upds); finite (varacom (IF x1 THEN C1 ELSE C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (IF x1 THEN C1 ELSE C2) Q l s \\<and>\n            preList upds (IF x1 THEN C1 ELSE C2) l s}\n        strip (IF x1 THEN C1 ELSE C2)\n        { time\n           (IF x1 THEN C1\n            ELSE C2) \\<Down> \\<lambda>l s.\n                                Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (IF x1 THEN C1 ELSE C2) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ (IF x1 THEN C1 ELSE C2) s)) \\<and>\n                         K4 upds LVQ (IF x1 THEN C1 ELSE C2) Q\n 3. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 4. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "case (Aif b C1 C2 Q upds )"], ["proof (state)\nthis:\n  \\<lbrakk>vc C1 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C1 = {}; distinct (map fst ?upds);\n   finite (varacom C1);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>a\\<in>set ?upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set ?upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C1 ?Q l s \\<and> preList ?upds C1 l s}\n   strip C1\n   { time C1 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C1 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C1 s)) \\<and>\n                    K4 ?upds ?LVQ C1 ?Q\n  \\<lbrakk>vc C2 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C2 = {}; distinct (map fst ?upds);\n   finite (varacom C2);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>a\\<in>set ?upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set ?upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C2 ?Q l s \\<and> preList ?upds C2 l s}\n   strip C2\n   { time C2 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C2 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C2 s)) \\<and>\n                    K4 ?upds ?LVQ C2 ?Q\n  vc (IF b THEN C1 ELSE C2) Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom (IF b THEN C1 ELSE C2) = {}\n  distinct (map fst upds)\n  finite (varacom (IF b THEN C1 ELSE C2))\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (4 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (IF x1 THEN C1 ELSE C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (IF x1 THEN C1 ELSE C2) = {};\n        distinct (map fst upds); finite (varacom (IF x1 THEN C1 ELSE C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (IF x1 THEN C1 ELSE C2) Q l s \\<and>\n            preList upds (IF x1 THEN C1 ELSE C2) l s}\n        strip (IF x1 THEN C1 ELSE C2)\n        { time\n           (IF x1 THEN C1\n            ELSE C2) \\<Down> \\<lambda>l s.\n                                Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (IF x1 THEN C1 ELSE C2) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ (IF x1 THEN C1 ELSE C2) s)) \\<and>\n                         K4 upds LVQ (IF x1 THEN C1 ELSE C2) Q\n 3. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 4. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "from Aif(3)"], ["proof (chain)\npicking this:\n  vc (IF b THEN C1 ELSE C2) Q LVQ LVE", "have 1: \"vc C1 Q LVQ LVE\" and 2: \"vc C2 Q LVQ LVE\""], ["proof (prove)\nusing this:\n  vc (IF b THEN C1 ELSE C2) Q LVQ LVE\n\ngoal (1 subgoal):\n 1. vc C1 Q LVQ LVE &&& vc C2 Q LVQ LVE", "by auto"], ["proof (state)\nthis:\n  vc C1 Q LVQ LVE\n  vc C2 Q LVQ LVE\n\ngoal (4 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (IF x1 THEN C1 ELSE C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (IF x1 THEN C1 ELSE C2) = {};\n        distinct (map fst upds); finite (varacom (IF x1 THEN C1 ELSE C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (IF x1 THEN C1 ELSE C2) Q l s \\<and>\n            preList upds (IF x1 THEN C1 ELSE C2) l s}\n        strip (IF x1 THEN C1 ELSE C2)\n        { time\n           (IF x1 THEN C1\n            ELSE C2) \\<Down> \\<lambda>l s.\n                                Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (IF x1 THEN C1 ELSE C2) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ (IF x1 THEN C1 ELSE C2) s)) \\<and>\n                         K4 upds LVQ (IF x1 THEN C1 ELSE C2) Q\n 3. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 4. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have T: \"\\<And>l s. pre C1 Q l s \\<Longrightarrow> bval b s \\<Longrightarrow> Q l (postQ C1 s)\"\n      and kT: \"K4 upds LVQ C1 Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l s.\n        \\<lbrakk>pre C1 Q l s; bval b s\\<rbrakk>\n        \\<Longrightarrow> Q l (postQ C1 s)) &&&\n    K4 upds LVQ C1 Q", "using Aif(1)[OF 1 Aif(4) _ Aif(6)] Aif(5-11)"], ["proof (prove)\nusing this:\n  \\<lbrakk>lesvars upds \\<inter> varacom C1 = {}; finite (varacom C1);\n   \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on LVE \\<longrightarrow>\n      postList upds l s1 = postList upds l s2;\n   \\<forall>a\\<in>set upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C1 Q l s \\<and> preList upds C1 l s}\n   strip C1\n   { time C1 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C1 Q l s \\<longrightarrow>\n                        Q l (postQ C1 s)) \\<and>\n                    K4 upds LVQ C1 Q\n  lesvars upds \\<inter> varacom (IF b THEN C1 ELSE C2) = {}\n  distinct (map fst upds)\n  finite (varacom (IF b THEN C1 ELSE C2))\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. (\\<And>l s.\n        \\<lbrakk>pre C1 Q l s; bval b s\\<rbrakk>\n        \\<Longrightarrow> Q l (postQ C1 s)) &&&\n    K4 upds LVQ C1 Q", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>pre C1 Q ?l ?s; bval b ?s\\<rbrakk>\n  \\<Longrightarrow> Q ?l (postQ C1 ?s)\n  K4 upds LVQ C1 Q\n\ngoal (4 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (IF x1 THEN C1 ELSE C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (IF x1 THEN C1 ELSE C2) = {};\n        distinct (map fst upds); finite (varacom (IF x1 THEN C1 ELSE C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (IF x1 THEN C1 ELSE C2) Q l s \\<and>\n            preList upds (IF x1 THEN C1 ELSE C2) l s}\n        strip (IF x1 THEN C1 ELSE C2)\n        { time\n           (IF x1 THEN C1\n            ELSE C2) \\<Down> \\<lambda>l s.\n                                Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (IF x1 THEN C1 ELSE C2) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ (IF x1 THEN C1 ELSE C2) s)) \\<and>\n                         K4 upds LVQ (IF x1 THEN C1 ELSE C2) Q\n 3. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 4. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have F: \"\\<And>l s. pre C2 Q l s \\<Longrightarrow> \\<not> bval b s \\<Longrightarrow> Q l (postQ C2 s)\"\n    and kF: \"K4 upds LVQ C2 Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l s.\n        \\<lbrakk>pre C2 Q l s; \\<not> bval b s\\<rbrakk>\n        \\<Longrightarrow> Q l (postQ C2 s)) &&&\n    K4 upds LVQ C2 Q", "using Aif(2)[OF 2 Aif(4) _ Aif(6)] Aif(5-11)"], ["proof (prove)\nusing this:\n  \\<lbrakk>lesvars upds \\<inter> varacom C2 = {}; finite (varacom C2);\n   \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on LVE \\<longrightarrow>\n      postList upds l s1 = postList upds l s2;\n   \\<forall>a\\<in>set upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C2 Q l s \\<and> preList upds C2 l s}\n   strip C2\n   { time C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C2 Q l s \\<longrightarrow>\n                        Q l (postQ C2 s)) \\<and>\n                    K4 upds LVQ C2 Q\n  lesvars upds \\<inter> varacom (IF b THEN C1 ELSE C2) = {}\n  distinct (map fst upds)\n  finite (varacom (IF b THEN C1 ELSE C2))\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. (\\<And>l s.\n        \\<lbrakk>pre C2 Q l s; \\<not> bval b s\\<rbrakk>\n        \\<Longrightarrow> Q l (postQ C2 s)) &&&\n    K4 upds LVQ C2 Q", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>pre C2 Q ?l ?s; \\<not> bval b ?s\\<rbrakk>\n  \\<Longrightarrow> Q ?l (postQ C2 ?s)\n  K4 upds LVQ C2 Q\n\ngoal (4 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (IF x1 THEN C1 ELSE C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (IF x1 THEN C1 ELSE C2) = {};\n        distinct (map fst upds); finite (varacom (IF x1 THEN C1 ELSE C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (IF x1 THEN C1 ELSE C2) Q l s \\<and>\n            preList upds (IF x1 THEN C1 ELSE C2) l s}\n        strip (IF x1 THEN C1 ELSE C2)\n        { time\n           (IF x1 THEN C1\n            ELSE C2) \\<Down> \\<lambda>l s.\n                                Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (IF x1 THEN C1 ELSE C2) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ (IF x1 THEN C1 ELSE C2) s)) \\<and>\n                         K4 upds LVQ (IF x1 THEN C1 ELSE C2) Q\n 3. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 4. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre (IF b THEN C1 ELSE C2) Q l s \\<and>\n                             preList upds (IF b THEN C1 ELSE C2) l s}\n                         strip (IF b THEN C1 ELSE C2)\n                         { time\n                            (IF b THEN C1\n                             ELSE C2) \\<Down> \\<lambda>l s.\n           Q l s \\<and> postList upds l s} \\<and>\n    (\\<forall>l s.\n        pre (IF b THEN C1 ELSE C2) Q l s \\<longrightarrow>\n        Q l (postQ (IF b THEN C1 ELSE C2) s)) \\<and>\n    K4 upds LVQ (IF b THEN C1 ELSE C2) Q", "apply(safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre (IF b THEN C1 ELSE C2) Q l s \\<and>\n                             preList upds (IF b THEN C1 ELSE C2) l s}\n                         strip (IF b THEN C1 ELSE C2)\n                         { time\n                            (IF b THEN C1\n                             ELSE C2) \\<Down> \\<lambda>l s.\n           Q l s \\<and> postList upds l s}\n 2. \\<And>l s.\n       pre (IF b THEN C1 ELSE C2) Q l s \\<Longrightarrow>\n       Q l (postQ (IF b THEN C1 ELSE C2) s)\n 3. K4 upds LVQ (IF b THEN C1 ELSE C2) Q", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre (IF b THEN C1 ELSE C2) Q l s \\<and>\n                             preList upds (IF b THEN C1 ELSE C2) l s}\n                         strip (IF b THEN C1 ELSE C2)\n                         { time\n                            (IF b THEN C1\n                             ELSE C2) \\<Down> \\<lambda>l s.\n           Q l s \\<and> postList upds l s}", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             (bval b s \\<longrightarrow>\n                              pre C1 Q l s \\<and>\n                              preList upds (IF b THEN C1 ELSE C2) l\n                               s) \\<and>\n                             (\\<not> bval b s \\<longrightarrow>\n                              pre C2 Q l s \\<and>\n                              preList upds (IF b THEN C1 ELSE C2) l s)}\n                         IF b THEN strip C1 ELSE strip C2\n                         { \\<lambda>a.\n                              if bval b a then 1 + time C1 a\n                              else 1 +\n                                   time C2\n                                    a \\<Down> \\<lambda>l s.\n           Q l s \\<and> postList upds l s}", "apply(rule If2[where e=\"\\<lambda>a. if bval b a then  time C1 a else time C2 a\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             ((bval b s \\<longrightarrow>\n                               pre C1 Q l s \\<and>\n                               preList upds (IF b THEN C1 ELSE C2) l\n                                s) \\<and>\n                              (\\<not> bval b s \\<longrightarrow>\n                               pre C2 Q l s \\<and>\n                               preList upds (IF b THEN C1 ELSE C2) l\n                                s)) \\<and>\n                             bval b s}\n                         strip C1\n                         { \\<lambda>a.\n                              if bval b a then time C1 a\n                              else time C2\n                                    a \\<Down> \\<lambda>l s.\n           Q l s \\<and> postList upds l s}\n 2. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             ((bval b s \\<longrightarrow>\n                               pre C1 Q l s \\<and>\n                               preList upds (IF b THEN C1 ELSE C2) l\n                                s) \\<and>\n                              (\\<not> bval b s \\<longrightarrow>\n                               pre C2 Q l s \\<and>\n                               preList upds (IF b THEN C1 ELSE C2) l\n                                s)) \\<and>\n                             \\<not> bval b s}\n                         strip C2\n                         { \\<lambda>a.\n                              if bval b a then time C1 a\n                              else time C2\n                                    a \\<Down> \\<lambda>l s.\n           Q l s \\<and> postList upds l s}\n 3. \\<And>l s.\n       (bval b s \\<longrightarrow>\n        pre C1 Q l s \\<and> preList upds (IF b THEN C1 ELSE C2) l s) \\<and>\n       (\\<not> bval b s \\<longrightarrow>\n        pre C2 Q l s \\<and>\n        preList upds (IF b THEN C1 ELSE C2) l s) \\<Longrightarrow>\n       (if bval b s then time C1 s else time C2 s) + 1 =\n       (if bval b s then 1 + time C1 s else 1 + time C2 s)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             ((bval b s \\<longrightarrow>\n                               pre C1 Q l s \\<and>\n                               preList upds (IF b THEN C1 ELSE C2) l\n                                s) \\<and>\n                              (\\<not> bval b s \\<longrightarrow>\n                               pre C2 Q l s \\<and>\n                               preList upds (IF b THEN C1 ELSE C2) l\n                                s)) \\<and>\n                             bval b s}\n                         strip C1\n                         { \\<lambda>a.\n                              if bval b a then time C1 a\n                              else time C2\n                                    a \\<Down> \\<lambda>l s.\n           Q l s \\<and> postList upds l s}", "apply(simp cong: rev_conj_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C1 Q l s \\<and>\n                             preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n                             bval b s}\n                         strip C1\n                         { \\<lambda>a.\n                              if bval b a then time C1 a\n                              else time C2\n                                    a \\<Down> \\<lambda>l s.\n           Q l s \\<and> postList upds l s}", "apply(rule ub_cost[where e'=\"time C1\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          pre C1 Q l s \\<and>\n          preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n          bval b s \\<longrightarrow>\n          time C1 s \\<le> k * (if bval b s then time C1 s else time C2 s)\n 2. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C1 Q l s \\<and>\n                             preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n                             bval b s}\n                         strip C1\n                         { time\n                            C1 \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s}", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          pre C1 Q l s \\<and>\n          preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n          bval b s \\<longrightarrow>\n          0 < time C1 s \\<longrightarrow> Suc 0 \\<le> k\n 2. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C1 Q l s \\<and>\n                             preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n                             bval b s}\n                         strip C1\n                         { time\n                            C1 \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s}", "apply(auto)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C1 Q l s \\<and>\n                             preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n                             bval b s}\n                         strip C1\n                         { time\n                            C1 \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s}", "apply(rule strengthen_pre[where P=\"%l s. pre C1 Q l s \\<and> preList upds C1 l s\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>l s.\n       pre C1 Q l s \\<and>\n       preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n       bval b s \\<longrightarrow>\n       pre C1 Q l s \\<and> preList upds C1 l s\n 2. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C1 Q l s \\<and> preList upds C1 l s}\n                         strip C1\n                         { time\n                            C1 \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s}", "using ListAif1"], ["proof (prove)\nusing this:\n  bval ?b ?s \\<Longrightarrow>\n  preList ?upds (IF ?b THEN ?C1.0 ELSE ?C2.0) ?l ?s =\n  preList ?upds ?C1.0 ?l ?s\n\ngoal (2 subgoals):\n 1. \\<forall>l s.\n       pre C1 Q l s \\<and>\n       preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n       bval b s \\<longrightarrow>\n       pre C1 Q l s \\<and> preList upds C1 l s\n 2. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C1 Q l s \\<and> preList upds C1 l s}\n                         strip C1\n                         { time\n                            C1 \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s}", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C1 Q l s \\<and> preList upds C1 l s}\n                         strip C1\n                         { time\n                            C1 \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s}", "apply(rule Aif(1)[THEN conjunct1])"], ["proof (prove)\ngoal (9 subgoals):\n 1. vc C1 Q ?LVQ48 ?LVE48\n 2. finite (support Q)\n 3. lesvars upds \\<inter> varacom C1 = {}\n 4. distinct (map fst upds)\n 5. finite (varacom C1)\n 6. \\<forall>l s1 s2. s1 = s2 on ?LVQ48 \\<longrightarrow> Q l s1 = Q l s2\n 7. \\<forall>l s1 s2.\n       s1 = s2 on ?LVE48 \\<longrightarrow>\n       postList upds l s1 = postList upds l s2\n 8. \\<forall>a\\<in>set upds.\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n 9. (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> ?LVE48", "using Aif"], ["proof (prove)\nusing this:\n  \\<lbrakk>vc C1 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C1 = {}; distinct (map fst ?upds);\n   finite (varacom C1);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>a\\<in>set ?upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set ?upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C1 ?Q l s \\<and> preList ?upds C1 l s}\n   strip C1\n   { time C1 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C1 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C1 s)) \\<and>\n                    K4 ?upds ?LVQ C1 ?Q\n  \\<lbrakk>vc C2 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C2 = {}; distinct (map fst ?upds);\n   finite (varacom C2);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>a\\<in>set ?upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set ?upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C2 ?Q l s \\<and> preList ?upds C2 l s}\n   strip C2\n   { time C2 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C2 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C2 s)) \\<and>\n                    K4 ?upds ?LVQ C2 ?Q\n  vc (IF b THEN C1 ELSE C2) Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom (IF b THEN C1 ELSE C2) = {}\n  distinct (map fst upds)\n  finite (varacom (IF b THEN C1 ELSE C2))\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (9 subgoals):\n 1. vc C1 Q ?LVQ48 ?LVE48\n 2. finite (support Q)\n 3. lesvars upds \\<inter> varacom C1 = {}\n 4. distinct (map fst upds)\n 5. finite (varacom C1)\n 6. \\<forall>l s1 s2. s1 = s2 on ?LVQ48 \\<longrightarrow> Q l s1 = Q l s2\n 7. \\<forall>l s1 s2.\n       s1 = s2 on ?LVE48 \\<longrightarrow>\n       postList upds l s1 = postList upds l s2\n 8. \\<forall>a\\<in>set upds.\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n 9. (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> ?LVE48", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             ((bval b s \\<longrightarrow>\n                               pre C1 Q l s \\<and>\n                               preList upds (IF b THEN C1 ELSE C2) l\n                                s) \\<and>\n                              (\\<not> bval b s \\<longrightarrow>\n                               pre C2 Q l s \\<and>\n                               preList upds (IF b THEN C1 ELSE C2) l\n                                s)) \\<and>\n                             \\<not> bval b s}\n                         strip C2\n                         { \\<lambda>a.\n                              if bval b a then time C1 a\n                              else time C2\n                                    a \\<Down> \\<lambda>l s.\n           Q l s \\<and> postList upds l s}\n 2. \\<And>l s.\n       (bval b s \\<longrightarrow>\n        pre C1 Q l s \\<and> preList upds (IF b THEN C1 ELSE C2) l s) \\<and>\n       (\\<not> bval b s \\<longrightarrow>\n        pre C2 Q l s \\<and>\n        preList upds (IF b THEN C1 ELSE C2) l s) \\<Longrightarrow>\n       (if bval b s then time C1 s else time C2 s) + 1 =\n       (if bval b s then 1 + time C1 s else 1 + time C2 s)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             ((bval b s \\<longrightarrow>\n                               pre C1 Q l s \\<and>\n                               preList upds (IF b THEN C1 ELSE C2) l\n                                s) \\<and>\n                              (\\<not> bval b s \\<longrightarrow>\n                               pre C2 Q l s \\<and>\n                               preList upds (IF b THEN C1 ELSE C2) l\n                                s)) \\<and>\n                             \\<not> bval b s}\n                         strip C2\n                         { \\<lambda>a.\n                              if bval b a then time C1 a\n                              else time C2\n                                    a \\<Down> \\<lambda>l s.\n           Q l s \\<and> postList upds l s}", "apply(simp cong: rev_conj_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C2 Q l s \\<and>\n                             preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n                             \\<not> bval b s}\n                         strip C2\n                         { \\<lambda>a.\n                              if bval b a then time C1 a\n                              else time C2\n                                    a \\<Down> \\<lambda>l s.\n           Q l s \\<and> postList upds l s}", "apply(rule ub_cost[where e'=\"time C2\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          pre C2 Q l s \\<and>\n          preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n          \\<not> bval b s \\<longrightarrow>\n          time C2 s \\<le> k * (if bval b s then time C1 s else time C2 s)\n 2. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C2 Q l s \\<and>\n                             preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n                             \\<not> bval b s}\n                         strip C2\n                         { time\n                            C2 \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s}", "(* k=1 and *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          pre C2 Q l s \\<and>\n          preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n          \\<not> bval b s \\<longrightarrow>\n          time C2 s \\<le> k * (if bval b s then time C1 s else time C2 s)\n 2. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C2 Q l s \\<and>\n                             preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n                             \\<not> bval b s}\n                         strip C2\n                         { time\n                            C2 \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s}", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          pre C2 Q l s \\<and>\n          preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n          \\<not> bval b s \\<longrightarrow>\n          0 < time C2 s \\<longrightarrow> Suc 0 \\<le> k\n 2. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C2 Q l s \\<and>\n                             preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n                             \\<not> bval b s}\n                         strip C2\n                         { time\n                            C2 \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s}", "apply(auto)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C2 Q l s \\<and>\n                             preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n                             \\<not> bval b s}\n                         strip C2\n                         { time\n                            C2 \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s}", "apply(rule strengthen_pre[where P=\"%l s. pre C2 Q l s \\<and> preList upds C2 l s\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>l s.\n       pre C2 Q l s \\<and>\n       preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n       \\<not> bval b s \\<longrightarrow>\n       pre C2 Q l s \\<and> preList upds C2 l s\n 2. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C2 Q l s \\<and> preList upds C2 l s}\n                         strip C2\n                         { time\n                            C2 \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s}", "using ListAif2"], ["proof (prove)\nusing this:\n  \\<not> bval ?b ?s \\<Longrightarrow>\n  preList ?upds (IF ?b THEN ?C1.0 ELSE ?C2.0) ?l ?s =\n  preList ?upds ?C2.0 ?l ?s\n\ngoal (2 subgoals):\n 1. \\<forall>l s.\n       pre C2 Q l s \\<and>\n       preList upds (IF b THEN C1 ELSE C2) l s \\<and>\n       \\<not> bval b s \\<longrightarrow>\n       pre C2 Q l s \\<and> preList upds C2 l s\n 2. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C2 Q l s \\<and> preList upds C2 l s}\n                         strip C2\n                         { time\n                            C2 \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s}", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C2 Q l s \\<and> preList upds C2 l s}\n                         strip C2\n                         { time\n                            C2 \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s}", "apply(rule Aif(2)[THEN conjunct1])"], ["proof (prove)\ngoal (9 subgoals):\n 1. vc C2 Q ?LVQ51 ?LVE51\n 2. finite (support Q)\n 3. lesvars upds \\<inter> varacom C2 = {}\n 4. distinct (map fst upds)\n 5. finite (varacom C2)\n 6. \\<forall>l s1 s2. s1 = s2 on ?LVQ51 \\<longrightarrow> Q l s1 = Q l s2\n 7. \\<forall>l s1 s2.\n       s1 = s2 on ?LVE51 \\<longrightarrow>\n       postList upds l s1 = postList upds l s2\n 8. \\<forall>a\\<in>set upds.\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n 9. (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> ?LVE51", "using Aif"], ["proof (prove)\nusing this:\n  \\<lbrakk>vc C1 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C1 = {}; distinct (map fst ?upds);\n   finite (varacom C1);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>a\\<in>set ?upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set ?upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C1 ?Q l s \\<and> preList ?upds C1 l s}\n   strip C1\n   { time C1 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C1 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C1 s)) \\<and>\n                    K4 ?upds ?LVQ C1 ?Q\n  \\<lbrakk>vc C2 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C2 = {}; distinct (map fst ?upds);\n   finite (varacom C2);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>a\\<in>set ?upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set ?upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C2 ?Q l s \\<and> preList ?upds C2 l s}\n   strip C2\n   { time C2 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C2 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C2 s)) \\<and>\n                    K4 ?upds ?LVQ C2 ?Q\n  vc (IF b THEN C1 ELSE C2) Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom (IF b THEN C1 ELSE C2) = {}\n  distinct (map fst upds)\n  finite (varacom (IF b THEN C1 ELSE C2))\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (9 subgoals):\n 1. vc C2 Q ?LVQ51 ?LVE51\n 2. finite (support Q)\n 3. lesvars upds \\<inter> varacom C2 = {}\n 4. distinct (map fst upds)\n 5. finite (varacom C2)\n 6. \\<forall>l s1 s2. s1 = s2 on ?LVQ51 \\<longrightarrow> Q l s1 = Q l s2\n 7. \\<forall>l s1 s2.\n       s1 = s2 on ?LVE51 \\<longrightarrow>\n       postList upds l s1 = postList upds l s2\n 8. \\<forall>a\\<in>set upds.\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n 9. (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> ?LVE51", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l s.\n       (bval b s \\<longrightarrow>\n        pre C1 Q l s \\<and> preList upds (IF b THEN C1 ELSE C2) l s) \\<and>\n       (\\<not> bval b s \\<longrightarrow>\n        pre C2 Q l s \\<and>\n        preList upds (IF b THEN C1 ELSE C2) l s) \\<Longrightarrow>\n       (if bval b s then time C1 s else time C2 s) + 1 =\n       (if bval b s then 1 + time C1 s else 1 + time C2 s)", "by simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l s.\n       pre (IF b THEN C1 ELSE C2) Q l s \\<Longrightarrow>\n       Q l (postQ (IF b THEN C1 ELSE C2) s)\n 2. K4 upds LVQ (IF b THEN C1 ELSE C2) Q", "using T F kT kF"], ["proof (prove)\nusing this:\n  \\<lbrakk>pre C1 Q ?l ?s; bval b ?s\\<rbrakk>\n  \\<Longrightarrow> Q ?l (postQ C1 ?s)\n  \\<lbrakk>pre C2 Q ?l ?s; \\<not> bval b ?s\\<rbrakk>\n  \\<Longrightarrow> Q ?l (postQ C2 ?s)\n  K4 upds LVQ C1 Q\n  K4 upds LVQ C2 Q\n\ngoal (2 subgoals):\n 1. \\<And>l s.\n       pre (IF b THEN C1 ELSE C2) Q l s \\<Longrightarrow>\n       Q l (postQ (IF b THEN C1 ELSE C2) s)\n 2. K4 upds LVQ (IF b THEN C1 ELSE C2) Q", "by (auto intro: k4If)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           pre (IF b THEN C1 ELSE C2) Q l s \\<and>\n                           preList upds (IF b THEN C1 ELSE C2) l s}\n                       strip (IF b THEN C1 ELSE C2)\n                       { time\n                          (IF b THEN C1\n                           ELSE C2) \\<Down> \\<lambda>l s.\n         Q l s \\<and> postList upds l s} \\<and>\n  (\\<forall>l s.\n      pre (IF b THEN C1 ELSE C2) Q l s \\<longrightarrow>\n      Q l (postQ (IF b THEN C1 ELSE C2) s)) \\<and>\n  K4 upds LVQ (IF b THEN C1 ELSE C2) Q\n\ngoal (3 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 3. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 3. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "case (Aconseq P'2 Qannot2 eannot2 C Q upds)"], ["proof (state)\nthis:\n  \\<lbrakk>vc C ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C = {}; distinct (map fst ?upds);\n   finite (varacom C);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>a\\<in>set ?upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set ?upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C ?Q l s \\<and> preList ?upds C l s}\n   strip C\n   { time C \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C s)) \\<and>\n                    K4 ?upds ?LVQ C ?Q\n  vc ({P'2/Qannot2/eannot2} CONSEQ C) Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom ({P'2/Qannot2/eannot2} CONSEQ C) = {}\n  distinct (map fst upds)\n  finite (varacom ({P'2/Qannot2/eannot2} CONSEQ C))\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (3 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 3. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "obtain P' Ps where [simp]: \"P'2 = (P',Ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P' Ps. P'2 = (P', Ps) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  P'2 = (P', Ps)\n\ngoal (3 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 3. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "obtain Qannot Q's where [simp]: \"Qannot2 = (Qannot,Q's)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Qannot Q's.\n        Qannot2 = (Qannot, Q's) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  Qannot2 = (Qannot, Q's)\n\ngoal (3 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 3. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "obtain eannot es where [simp]: \"eannot2 = (eannot,es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>eannot es.\n        eannot2 = (eannot, es) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  eannot2 = (eannot, es)\n\ngoal (3 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 3. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have ih0: \"finite (support Qannot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support Qannot)", "using Aconseq(3,6)"], ["proof (prove)\nusing this:\n  finite (support Q)\n  finite (varacom ({P'2/Qannot2/eannot2} CONSEQ C))\n\ngoal (1 subgoal):\n 1. finite (support Qannot)", "by simp"], ["proof (state)\nthis:\n  finite (support Qannot)\n\ngoal (3 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 3. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "from \\<open>vc ({P'2/Qannot2/eannot2} CONSEQ C) Q LVQ LVE\\<close>"], ["proof (chain)\npicking this:\n  vc ({P'2/Qannot2/eannot2} CONSEQ C) Q LVQ LVE", "obtain k where k0: \"k>0\" and ih1: \"vc C Qannot Q's LVE\"\n    and ih2: \" (\\<forall>l s. P' l s \\<longrightarrow>  time C s \\<le> k * eannot s \\<and> (\\<forall>t. \\<exists>l'. pre C Qannot l' s \\<and> (Qannot l' t \\<longrightarrow> Q l t)))\"\n    and pc: \"(\\<forall>s1 s2 l. (\\<forall>x\\<in>Ps. s1 x=s2 x) \\<longrightarrow> P' l s1 = P' l s2)\"\n    and qc: \"(\\<forall>s1 s2 l. (\\<forall>x\\<in>Q's. s1 x=s2 x) \\<longrightarrow> Qannot l s1 = Qannot l s2)\"\n    and ec: \"(\\<forall>s1 s2. (\\<forall>x\\<in>es. s1 x=s2 x) \\<longrightarrow> eannot s1 = eannot s2)\""], ["proof (prove)\nusing this:\n  vc ({P'2/Qannot2/eannot2} CONSEQ C) Q LVQ LVE\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>0 < k; vc C Qannot Q's LVE;\n         \\<forall>l s.\n            P' l s \\<longrightarrow>\n            time C s \\<le> k * eannot s \\<and>\n            (\\<forall>t.\n                \\<exists>l'.\n                   pre C Qannot l' s \\<and>\n                   (Qannot l' t \\<longrightarrow> Q l t));\n         \\<forall>s1 s2 l.\n            s1 = s2 on Ps \\<longrightarrow> P' l s1 = P' l s2;\n         \\<forall>s1 s2 l.\n            s1 = s2 on Q's \\<longrightarrow> Qannot l s1 = Qannot l s2;\n         \\<forall>s1 s2.\n            s1 = s2 on es \\<longrightarrow> eannot s1 = eannot s2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  0 < k\n  vc C Qannot Q's LVE\n  \\<forall>l s.\n     P' l s \\<longrightarrow>\n     time C s \\<le> k * eannot s \\<and>\n     (\\<forall>t.\n         \\<exists>l'.\n            pre C Qannot l' s \\<and> (Qannot l' t \\<longrightarrow> Q l t))\n  \\<forall>s1 s2 l. s1 = s2 on Ps \\<longrightarrow> P' l s1 = P' l s2\n  \\<forall>s1 s2 l.\n     s1 = s2 on Q's \\<longrightarrow> Qannot l s1 = Qannot l s2\n  \\<forall>s1 s2. s1 = s2 on es \\<longrightarrow> eannot s1 = eannot s2\n\ngoal (3 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 3. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have  k: \"\\<turnstile>\\<^sub>1 {\\<lambda>l s. pre C Qannot l s \\<and> preList upds C l s} strip C { time C \\<Down> \\<lambda>l s. Qannot l s \\<and> postList upds l s}\n    \\<and> ((\\<forall>l s. pre C Qannot l s \\<longrightarrow> Qannot l (postQ C s)) \\<and> K4 upds Q's C Qannot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C Qannot l s \\<and> preList upds C l s}\n                         strip C\n                         { time\n                            C \\<Down> \\<lambda>l s.\n   Qannot l s \\<and> postList upds l s} \\<and>\n    (\\<forall>l s.\n        pre C Qannot l s \\<longrightarrow> Qannot l (postQ C s)) \\<and>\n    K4 upds Q's C Qannot", "apply(rule Aconseq(1))"], ["proof (prove)\ngoal (9 subgoals):\n 1. vc C Qannot Q's ?LVE\n 2. finite (support Qannot)\n 3. lesvars upds \\<inter> varacom C = {}\n 4. distinct (map fst upds)\n 5. finite (varacom C)\n 6. \\<forall>l s1 s2.\n       s1 = s2 on Q's \\<longrightarrow> Qannot l s1 = Qannot l s2\n 7. \\<forall>l s1 s2.\n       s1 = s2 on ?LVE \\<longrightarrow>\n       postList upds l s1 = postList upds l s2\n 8. \\<forall>a\\<in>set upds.\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n 9. (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> ?LVE", "using Aconseq(2-10)"], ["proof (prove)\nusing this:\n  vc ({P'2/Qannot2/eannot2} CONSEQ C) Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom ({P'2/Qannot2/eannot2} CONSEQ C) = {}\n  distinct (map fst upds)\n  finite (varacom ({P'2/Qannot2/eannot2} CONSEQ C))\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (9 subgoals):\n 1. vc C Qannot Q's ?LVE\n 2. finite (support Qannot)\n 3. lesvars upds \\<inter> varacom C = {}\n 4. distinct (map fst upds)\n 5. finite (varacom C)\n 6. \\<forall>l s1 s2.\n       s1 = s2 on Q's \\<longrightarrow> Qannot l s1 = Qannot l s2\n 7. \\<forall>l s1 s2.\n       s1 = s2 on ?LVE \\<longrightarrow>\n       postList upds l s1 = postList upds l s2\n 8. \\<forall>a\\<in>set upds.\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n 9. (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> ?LVE", "by auto"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           pre C Qannot l s \\<and> preList upds C l s}\n                       strip C\n                       { time\n                          C \\<Down> \\<lambda>l s.\n Qannot l s \\<and> postList upds l s} \\<and>\n  (\\<forall>l s.\n      pre C Qannot l s \\<longrightarrow> Qannot l (postQ C s)) \\<and>\n  K4 upds Q's C Qannot\n\ngoal (3 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 3. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "note ih=k[THEN conjunct1] and ihsnd=k[THEN conjunct2]"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           pre C Qannot l s \\<and> preList upds C l s}\n                       strip C\n                       { time\n                          C \\<Down> \\<lambda>l s.\n Qannot l s \\<and> postList upds l s}\n  (\\<forall>l s.\n      pre C Qannot l s \\<longrightarrow> Qannot l (postQ C s)) \\<and>\n  K4 upds Q's C Qannot\n\ngoal (3 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 x3 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1/x2/x3} CONSEQ C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1/x2/x3} CONSEQ C) = {};\n        distinct (map fst upds); finite (varacom ({x1/x2/x3} CONSEQ C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1/x2/x3} CONSEQ C) Q l s \\<and>\n            preList upds ({x1/x2/x3} CONSEQ C) l s}\n        strip ({x1/x2/x3} CONSEQ C)\n        { time\n           ({x1/x2/x3}\n            CONSEQ C) \\<Down> \\<lambda>l s.\n                                 Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1/x2/x3} CONSEQ C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1/x2/x3} CONSEQ C) s)) \\<and>\n                         K4 upds LVQ ({x1/x2/x3} CONSEQ C) Q\n 3. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({P'2/Qannot2/eannot2} CONSEQ C) Q l\n                              s \\<and>\n                             preList upds ({P'2/Qannot2/eannot2} CONSEQ C) l\n                              s}\n                         strip ({P'2/Qannot2/eannot2} CONSEQ C)\n                         { time\n                            ({P'2/Qannot2/eannot2}\n                             CONSEQ C) \\<Down> \\<lambda>l s.\n            Q l s \\<and> postList upds l s} \\<and>\n    (\\<forall>l s.\n        pre ({P'2/Qannot2/eannot2} CONSEQ C) Q l s \\<longrightarrow>\n        Q l (postQ ({P'2/Qannot2/eannot2} CONSEQ C) s)) \\<and>\n    K4 upds LVQ ({P'2/Qannot2/eannot2} CONSEQ C) Q", "apply(simp, safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             P' l s \\<and>\n                             preList upds\n                              ({(P', Ps)/(Qannot, Q's)/(eannot, es)}\n                               CONSEQ C)\n                              l s}\n                         strip C\n                         { eannot \\<Down> \\<lambda>l s.\n       Q l s \\<and> postList upds l s}\n 2. \\<And>l s. P' l s \\<Longrightarrow> Q l (postQ C s)\n 3. K4 upds LVQ ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) Q", "apply(rule conseq[where e=\"time C\" and P=\"\\<lambda>l s. pre C Qannot l s \\<and> preList upds C l s\" and Q=\"%l s. Qannot l s \\<and> postList upds l s\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          P' l s \\<and>\n          preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n           s \\<longrightarrow>\n          time C s \\<le> k * eannot s \\<and>\n          (\\<forall>t.\n              \\<exists>l'.\n                 (pre C Qannot l' s \\<and> preList upds C l' s) \\<and>\n                 (Qannot l' t \\<and> postList upds l' t \\<longrightarrow>\n                  Q l t \\<and> postList upds l t))\n 2. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C Qannot l s \\<and> preList upds C l s}\n                         strip C\n                         { time\n                            C \\<Down> \\<lambda>l s.\n   Qannot l s \\<and> postList upds l s}\n 3. \\<And>l s. P' l s \\<Longrightarrow> Q l (postQ C s)\n 4. K4 upds LVQ ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) Q", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C Qannot l s \\<and> preList upds C l s}\n                         strip C\n                         { time\n                            C \\<Down> \\<lambda>l s.\n   Qannot l s \\<and> postList upds l s}\n 2. \\<exists>k>0.\n       \\<forall>l s.\n          P' l s \\<and>\n          preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n           s \\<longrightarrow>\n          time C s \\<le> k * eannot s \\<and>\n          (\\<forall>t.\n              \\<exists>l'.\n                 (pre C Qannot l' s \\<and> preList upds C l' s) \\<and>\n                 (Qannot l' t \\<and> postList upds l' t \\<longrightarrow>\n                  Q l t \\<and> postList upds l t))\n 3. \\<And>l s. P' l s \\<Longrightarrow> Q l (postQ C s)\n 4. K4 upds LVQ ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) Q", "apply(rule ih)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          P' l s \\<and>\n          preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n           s \\<longrightarrow>\n          time C s \\<le> k * eannot s \\<and>\n          (\\<forall>t.\n              \\<exists>l'.\n                 (pre C Qannot l' s \\<and> preList upds C l' s) \\<and>\n                 (Qannot l' t \\<and> postList upds l' t \\<longrightarrow>\n                  Q l t \\<and> postList upds l t))\n 2. \\<And>l s. P' l s \\<Longrightarrow> Q l (postQ C s)\n 3. K4 upds LVQ ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) Q", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          P' l s \\<and>\n          preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n           s \\<longrightarrow>\n          time C s \\<le> k * eannot s \\<and>\n          (\\<forall>t.\n              \\<exists>l'.\n                 (pre C Qannot l' s \\<and> preList upds C l' s) \\<and>\n                 (Qannot l' t \\<and> postList upds l' t \\<longrightarrow>\n                  Q l t \\<and> postList upds l t))", "apply(rule exI[where x=k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<and>\n    (\\<forall>l s.\n        P' l s \\<and>\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s \\<longrightarrow>\n        time C s \\<le> k * eannot s \\<and>\n        (\\<forall>t.\n            \\<exists>l'.\n               (pre C Qannot l' s \\<and> preList upds C l' s) \\<and>\n               (Qannot l' t \\<and> postList upds l' t \\<longrightarrow>\n                Q l t \\<and> postList upds l t)))", "proof (safe, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. 0 < k\n 2. \\<And>l s.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> time C s \\<le> k * eannot s\n 3. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "case (1)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. 0 < k\n 2. \\<And>l s.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> time C s \\<le> k * eannot s\n 3. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "with k0"], ["proof (chain)\npicking this:\n  0 < k", "show ?case"], ["proof (prove)\nusing this:\n  0 < k\n\ngoal (1 subgoal):\n 1. 0 < k", "by auto"], ["proof (state)\nthis:\n  0 < k\n\ngoal (2 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> time C s \\<le> k * eannot s\n 2. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> time C s \\<le> k * eannot s\n 2. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "case (2 l s)"], ["proof (state)\nthis:\n  P' l s\n  preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l s\n\ngoal (2 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> time C s \\<le> k * eannot s\n 2. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "then"], ["proof (chain)\npicking this:\n  P' l s\n  preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l s", "show ?case"], ["proof (prove)\nusing this:\n  P' l s\n  preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l s\n\ngoal (1 subgoal):\n 1. time C s \\<le> k * eannot s", "using ih2"], ["proof (prove)\nusing this:\n  P' l s\n  preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l s\n  \\<forall>l s.\n     P' l s \\<longrightarrow>\n     time C s \\<le> k * eannot s \\<and>\n     (\\<forall>t.\n         \\<exists>l'.\n            pre C Qannot l' s \\<and> (Qannot l' t \\<longrightarrow> Q l t))\n\ngoal (1 subgoal):\n 1. time C s \\<le> k * eannot s", "by simp"], ["proof (state)\nthis:\n  time C s \\<le> k * eannot s\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "case (3 l s t)"], ["proof (state)\nthis:\n  P' l s\n  preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l s\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "have finupds: \"finite (set upds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set upds)", "by simp"], ["proof (state)\nthis:\n  finite (set upds)\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "{"], ["proof (state)\nthis:\n  finite (set upds)\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "fix l s n x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "assume \"x \\<in> fst ` (set upds)\""], ["proof (state)\nthis:\n  x \\<in> lesvars upds\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lesvars upds", "have \"x \\<notin> support (pre C Qannot)\""], ["proof (prove)\nusing this:\n  x \\<in> lesvars upds\n\ngoal (1 subgoal):\n 1. x \\<notin> support (pre C Qannot)", "using Aconseq(4) support_pre"], ["proof (prove)\nusing this:\n  x \\<in> lesvars upds\n  lesvars upds \\<inter> varacom ({P'2/Qannot2/eannot2} CONSEQ C) = {}\n  support (pre ?C ?Q) \\<subseteq> support ?Q \\<union> varacom ?C\n\ngoal (1 subgoal):\n 1. x \\<notin> support (pre C Qannot)", "by auto"], ["proof (state)\nthis:\n  x \\<notin> support (pre C Qannot)\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "from assn2_lupd[OF this]"], ["proof (chain)\npicking this:\n  pre C Qannot (?l(x := ?n)) = pre C Qannot ?l", "have \"pre C Qannot (l(x := n))  = pre C Qannot l\""], ["proof (prove)\nusing this:\n  pre C Qannot (?l(x := ?n)) = pre C Qannot ?l\n\ngoal (1 subgoal):\n 1. pre C Qannot (l(x := n)) = pre C Qannot l", "."], ["proof (state)\nthis:\n  pre C Qannot (l(x := n)) = pre C Qannot l\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> lesvars upds \\<Longrightarrow>\n  pre C Qannot (?la2(?x2 := ?n2)) = pre C Qannot ?la2\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "note U2=this"], ["proof (state)\nthis:\n  ?x2 \\<in> lesvars upds \\<Longrightarrow>\n  pre C Qannot (?la2(?x2 := ?n2)) = pre C Qannot ?la2\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "{"], ["proof (state)\nthis:\n  ?x2 \\<in> lesvars upds \\<Longrightarrow>\n  pre C Qannot (?la2(?x2 := ?n2)) = pre C Qannot ?la2\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "fix l s n x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "assume \"x \\<in> fst ` (set upds)\""], ["proof (state)\nthis:\n  x \\<in> lesvars upds\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lesvars upds", "have \"x \\<notin> support Qannot\""], ["proof (prove)\nusing this:\n  x \\<in> lesvars upds\n\ngoal (1 subgoal):\n 1. x \\<notin> support Qannot", "using Aconseq(4)"], ["proof (prove)\nusing this:\n  x \\<in> lesvars upds\n  lesvars upds \\<inter> varacom ({P'2/Qannot2/eannot2} CONSEQ C) = {}\n\ngoal (1 subgoal):\n 1. x \\<notin> support Qannot", "by auto"], ["proof (state)\nthis:\n  x \\<notin> support Qannot\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "from assn2_lupd[OF this]"], ["proof (chain)\npicking this:\n  Qannot (?l(x := ?n)) = Qannot ?l", "have \"Qannot (l(x := n))  = Qannot l\""], ["proof (prove)\nusing this:\n  Qannot (?l(x := ?n)) = Qannot ?l\n\ngoal (1 subgoal):\n 1. Qannot (l(x := n)) = Qannot l", "."], ["proof (state)\nthis:\n  Qannot (l(x := n)) = Qannot l\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> lesvars upds \\<Longrightarrow>\n  Qannot (?la2(?x2 := ?n2)) = Qannot ?la2\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "note K2=this"], ["proof (state)\nthis:\n  ?x2 \\<in> lesvars upds \\<Longrightarrow>\n  Qannot (?la2(?x2 := ?n2)) = Qannot ?la2\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "from ih2 3(1)"], ["proof (chain)\npicking this:\n  \\<forall>l s.\n     P' l s \\<longrightarrow>\n     time C s \\<le> k * eannot s \\<and>\n     (\\<forall>t.\n         \\<exists>l'.\n            pre C Qannot l' s \\<and> (Qannot l' t \\<longrightarrow> Q l t))\n  P' l s", "have *: \"(\\<exists>l'. pre C Qannot l' s \\<and> (Qannot l' t \\<longrightarrow> Q l t))\""], ["proof (prove)\nusing this:\n  \\<forall>l s.\n     P' l s \\<longrightarrow>\n     time C s \\<le> k * eannot s \\<and>\n     (\\<forall>t.\n         \\<exists>l'.\n            pre C Qannot l' s \\<and> (Qannot l' t \\<longrightarrow> Q l t))\n  P' l s\n\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       pre C Qannot l' s \\<and> (Qannot l' t \\<longrightarrow> Q l t)", "by simp"], ["proof (state)\nthis:\n  \\<exists>l'.\n     pre C Qannot l' s \\<and> (Qannot l' t \\<longrightarrow> Q l t)\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "obtain l' where i': \"pre C Qannot l' s\" and ii': \"(Qannot l' t \\<longrightarrow> Q l t)\" \n        and lxlx: \"\\<And>x. x\\<in> fst ` (set upds) \\<Longrightarrow> l' x = l x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "case 1"], ["proof (state)\nthis:\n  \\<lbrakk>pre C Qannot ?l' s; Qannot ?l' t \\<longrightarrow> Q l t;\n   \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> ?l' x = l x\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from *"], ["proof (chain)\npicking this:\n  \\<exists>l'.\n     pre C Qannot l' s \\<and> (Qannot l' t \\<longrightarrow> Q l t)", "obtain l'' where i': \"pre C Qannot l'' s\" and ii': \"(Qannot l'' t \\<longrightarrow> Q l t)\""], ["proof (prove)\nusing this:\n  \\<exists>l'.\n     pre C Qannot l' s \\<and> (Qannot l' t \\<longrightarrow> Q l t)\n\ngoal (1 subgoal):\n 1. (\\<And>l''.\n        \\<lbrakk>pre C Qannot l'' s;\n         Qannot l'' t \\<longrightarrow> Q l t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  pre C Qannot l'' s\n  Qannot l'' t \\<longrightarrow> Q l t\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note allg=allg[where q=\"%e x. l x\"]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>l s n x.\n              x \\<in> fst ` ?upds \\<Longrightarrow> ?A (l(x := n)) = ?A l;\n   lesvars ?xs \\<subseteq> fst ` ?upds\\<rbrakk>\n  \\<Longrightarrow> ?A (ListUpdate ?l'' ?xs (\\<lambda>e. l)) = ?A ?l''\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"pre C Qannot (ListUpdate l'' upds (\\<lambda>e. l))  = pre C Qannot l''  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre C Qannot (ListUpdate l'' upds (\\<lambda>e. l)) = pre C Qannot l''", "apply(rule allg[where ?upds=\"set upds\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l s n x.\n       x \\<in> lesvars upds \\<Longrightarrow>\n       pre C Qannot (l(x := n)) = pre C Qannot l\n 2. lesvars upds \\<subseteq> lesvars upds", "apply(rule U2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l s n x.\n       x \\<in> lesvars upds \\<Longrightarrow> x \\<in> lesvars upds\n 2. lesvars upds \\<subseteq> lesvars upds", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. lesvars upds \\<subseteq> lesvars upds", "by fast"], ["proof (state)\nthis:\n  pre C Qannot (ListUpdate l'' upds (\\<lambda>e. l)) = pre C Qannot l''\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with i'"], ["proof (chain)\npicking this:\n  pre C Qannot l'' s\n  pre C Qannot (ListUpdate l'' upds (\\<lambda>e. l)) = pre C Qannot l''", "have U: \"pre C Qannot (ListUpdate l'' upds (\\<lambda>e. l)) s\""], ["proof (prove)\nusing this:\n  pre C Qannot l'' s\n  pre C Qannot (ListUpdate l'' upds (\\<lambda>e. l)) = pre C Qannot l''\n\ngoal (1 subgoal):\n 1. pre C Qannot (ListUpdate l'' upds (\\<lambda>e. l)) s", "by simp"], ["proof (state)\nthis:\n  pre C Qannot (ListUpdate l'' upds (\\<lambda>e. l)) s\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"Qannot (ListUpdate l'' upds (\\<lambda>e. l)) = Qannot l''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Qannot (ListUpdate l'' upds (\\<lambda>e. l)) = Qannot l''", "apply(rule allg[where ?upds=\"set upds\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l s n x.\n       x \\<in> lesvars upds \\<Longrightarrow> Qannot (l(x := n)) = Qannot l\n 2. lesvars upds \\<subseteq> lesvars upds", "apply(rule K2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l s n x.\n       x \\<in> lesvars upds \\<Longrightarrow> x \\<in> lesvars upds\n 2. lesvars upds \\<subseteq> lesvars upds", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. lesvars upds \\<subseteq> lesvars upds", "by fast"], ["proof (state)\nthis:\n  Qannot (ListUpdate l'' upds (\\<lambda>e. l)) = Qannot l''\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  Qannot (ListUpdate l'' upds (\\<lambda>e. l)) = Qannot l''", "have K: \"(%l' s. Qannot l' t \\<longrightarrow> Q l t) (ListUpdate l'' upds (\\<lambda>e. l)) s = (%l' s. Qannot l' t \\<longrightarrow> Q l t) l'' s\""], ["proof (prove)\nusing this:\n  Qannot (ListUpdate l'' upds (\\<lambda>e. l)) = Qannot l''\n\ngoal (1 subgoal):\n 1. (Qannot (ListUpdate l'' upds (\\<lambda>e. l)) t \\<longrightarrow>\n     Q l t) =\n    (Qannot l'' t \\<longrightarrow> Q l t)", "by simp"], ["proof (state)\nthis:\n  (Qannot (ListUpdate l'' upds (\\<lambda>e. l)) t \\<longrightarrow> Q l t) =\n  (Qannot l'' t \\<longrightarrow> Q l t)\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with ii'"], ["proof (chain)\npicking this:\n  Qannot l'' t \\<longrightarrow> Q l t\n  (Qannot (ListUpdate l'' upds (\\<lambda>e. l)) t \\<longrightarrow> Q l t) =\n  (Qannot l'' t \\<longrightarrow> Q l t)", "have K: \"(Qannot (ListUpdate l'' upds (\\<lambda>e. l)) t \\<longrightarrow> Q l t)\""], ["proof (prove)\nusing this:\n  Qannot l'' t \\<longrightarrow> Q l t\n  (Qannot (ListUpdate l'' upds (\\<lambda>e. l)) t \\<longrightarrow> Q l t) =\n  (Qannot l'' t \\<longrightarrow> Q l t)\n\ngoal (1 subgoal):\n 1. Qannot (ListUpdate l'' upds (\\<lambda>e. l)) t \\<longrightarrow> Q l t", "by simp"], ["proof (state)\nthis:\n  Qannot (ListUpdate l'' upds (\\<lambda>e. l)) t \\<longrightarrow> Q l t\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  Qannot (ListUpdate l'' upds (\\<lambda>e. l)) t \\<longrightarrow> Q l t\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume as: \"x \\<in> fst ` (set upds)\""], ["proof (state)\nthis:\n  x \\<in> lesvars upds\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"ListUpdate l'' upds (\\<lambda>e. l) x = l x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListUpdate l'' upds (\\<lambda>e. l) x = l x", "apply(rule ListUpdate_updates)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> lesvars upds", "using as"], ["proof (prove)\nusing this:\n  x \\<in> lesvars upds\n\ngoal (1 subgoal):\n 1. x \\<in> lesvars upds", "by fast"], ["proof (state)\nthis:\n  ListUpdate l'' upds (\\<lambda>e. l) x = l x\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> lesvars upds \\<Longrightarrow>\n  ListUpdate l'' upds (\\<lambda>e. l) ?x2 = l ?x2\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note kla=this"], ["proof (state)\nthis:\n  ?x2 \\<in> lesvars upds \\<Longrightarrow>\n  ListUpdate l'' upds (\\<lambda>e. l) ?x2 = l ?x2\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>pre C Qannot l' s; Qannot l' t \\<longrightarrow> Q l t;\n         \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show \"thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "apply(rule 1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. pre C Qannot ?l' s\n 2. Qannot ?l' t \\<longrightarrow> Q l t\n 3. \\<And>x. x \\<in> lesvars upds \\<Longrightarrow> ?l' x = l x", "apply(fact U)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Qannot (ListUpdate l'' upds (\\<lambda>e. l)) t \\<longrightarrow> Q l t\n 2. \\<And>x.\n       x \\<in> lesvars upds \\<Longrightarrow>\n       ListUpdate l'' upds (\\<lambda>e. l) x = l x", "apply(fact K)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lesvars upds \\<Longrightarrow>\n       ListUpdate l'' upds (\\<lambda>e. l) x = l x", "apply(fact kla)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pre C Qannot l' s\n  Qannot l' t \\<longrightarrow> Q l t\n  ?x \\<in> lesvars upds \\<Longrightarrow> l' ?x = l ?x\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "let ?upds' = \"set (map (%(x,e,v). (x,preT C e s,fune C v)) upds)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "have \"finite ?upds'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds))", "by simp"], ["proof (state)\nthis:\n  finite (set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds))\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "define xs where \"xs = map (%(x,e,v). (x,preT C e s,fune C v)) upds\""], ["proof (state)\nthis:\n  xs = map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "then"], ["proof (chain)\npicking this:\n  xs = map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds", "have \"set xs= ?upds'\""], ["proof (prove)\nusing this:\n  xs = map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds\n\ngoal (1 subgoal):\n 1. set xs = set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds)", "by simp"], ["proof (state)\nthis:\n  set xs = set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds)\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "have \"pre C Qannot (ListUpdateE l' xs)  = pre C Qannot l' \""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre C Qannot (ListUpdateE l' xs) = pre C Qannot l'", "apply(rule allg_E[where ?upds=\"?upds'\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l sa n x.\n       x \\<in> lesvars\n                (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n                  upds) \\<Longrightarrow>\n       pre C Qannot (l(x := n)) = pre C Qannot l\n 2. lesvars xs\n    \\<subseteq> lesvars\n                 (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds)", "apply(rule U2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l sa n x.\n       x \\<in> lesvars\n                (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n                  upds) \\<Longrightarrow>\n       x \\<in> lesvars upds\n 2. lesvars xs\n    \\<subseteq> lesvars\n                 (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds)", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. lesvars xs\n    \\<subseteq> lesvars\n                 (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds)", "unfolding xs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lesvars (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds)\n    \\<subseteq> lesvars\n                 (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds)", "by simp"], ["proof (state)\nthis:\n  pre C Qannot (ListUpdateE l' xs) = pre C Qannot l'\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "with i'"], ["proof (chain)\npicking this:\n  pre C Qannot l' s\n  pre C Qannot (ListUpdateE l' xs) = pre C Qannot l'", "have U: \"pre C Qannot (ListUpdateE l' xs ) s\""], ["proof (prove)\nusing this:\n  pre C Qannot l' s\n  pre C Qannot (ListUpdateE l' xs) = pre C Qannot l'\n\ngoal (1 subgoal):\n 1. pre C Qannot (ListUpdateE l' xs) s", "by simp"], ["proof (state)\nthis:\n  pre C Qannot (ListUpdateE l' xs) s\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "have \"Qannot (ListUpdateE l' xs) = Qannot l' \""], ["proof (prove)\ngoal (1 subgoal):\n 1. Qannot (ListUpdateE l' xs) = Qannot l'", "apply(rule allg_E[where ?upds=\"?upds'\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l sa n x.\n       x \\<in> lesvars\n                (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n                  upds) \\<Longrightarrow>\n       Qannot (l(x := n)) = Qannot l\n 2. lesvars xs\n    \\<subseteq> lesvars\n                 (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds)", "apply(rule K2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l sa n x.\n       x \\<in> lesvars\n                (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n                  upds) \\<Longrightarrow>\n       x \\<in> lesvars upds\n 2. lesvars xs\n    \\<subseteq> lesvars\n                 (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds)", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. lesvars xs\n    \\<subseteq> lesvars\n                 (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds)", "unfolding xs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lesvars (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds)\n    \\<subseteq> lesvars\n                 (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds)", "by auto"], ["proof (state)\nthis:\n  Qannot (ListUpdateE l' xs) = Qannot l'\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "then"], ["proof (chain)\npicking this:\n  Qannot (ListUpdateE l' xs) = Qannot l'", "have K: \"(%l' s. Qannot l' t \\<longrightarrow> Q l t) (ListUpdateE l' xs) s = (%l' s. Qannot l' t \\<longrightarrow> Q l t) l' s\""], ["proof (prove)\nusing this:\n  Qannot (ListUpdateE l' xs) = Qannot l'\n\ngoal (1 subgoal):\n 1. (Qannot (ListUpdateE l' xs) t \\<longrightarrow> Q l t) =\n    (Qannot l' t \\<longrightarrow> Q l t)", "by simp"], ["proof (state)\nthis:\n  (Qannot (ListUpdateE l' xs) t \\<longrightarrow> Q l t) =\n  (Qannot l' t \\<longrightarrow> Q l t)\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "with ii'"], ["proof (chain)\npicking this:\n  Qannot l' t \\<longrightarrow> Q l t\n  (Qannot (ListUpdateE l' xs) t \\<longrightarrow> Q l t) =\n  (Qannot l' t \\<longrightarrow> Q l t)", "have K: \"(Qannot (ListUpdateE l' xs) t \\<longrightarrow> Q l t)\""], ["proof (prove)\nusing this:\n  Qannot l' t \\<longrightarrow> Q l t\n  (Qannot (ListUpdateE l' xs) t \\<longrightarrow> Q l t) =\n  (Qannot l' t \\<longrightarrow> Q l t)\n\ngoal (1 subgoal):\n 1. Qannot (ListUpdateE l' xs) t \\<longrightarrow> Q l t", "by simp"], ["proof (state)\nthis:\n  Qannot (ListUpdateE l' xs) t \\<longrightarrow> Q l t\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "have xs_upds: \"map fst xs = map fst upds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map fst xs = map fst upds", "unfolding xs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map fst (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds) =\n    map fst upds", "by auto"], ["proof (state)\nthis:\n  map fst xs = map fst upds\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "have grr: \"\\<And>x. x \\<in> ?upds' \\<Longrightarrow> ListUpdateE l' xs (fst x) = fst (snd x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n                     upds) \\<Longrightarrow>\n       ListUpdateE l' xs (fst x) = fst (snd x)", "apply(rule ListUpdateE_updates)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n                     upds) \\<Longrightarrow>\n       distinct (map fst xs)\n 2. \\<And>x.\n       x \\<in> set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n                     upds) \\<Longrightarrow>\n       x \\<in> set xs", "apply(simp only: xs_upds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n                     upds) \\<Longrightarrow>\n       distinct (map fst upds)\n 2. \\<And>x.\n       x \\<in> set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n                     upds) \\<Longrightarrow>\n       x \\<in> set xs", "using Aconseq(5)"], ["proof (prove)\nusing this:\n  distinct (map fst upds)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n                     upds) \\<Longrightarrow>\n       distinct (map fst upds)\n 2. \\<And>x.\n       x \\<in> set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n                     upds) \\<Longrightarrow>\n       x \\<in> set xs", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n                     upds) \\<Longrightarrow>\n       x \\<in> set xs", "unfolding xs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n                     upds) \\<Longrightarrow>\n       x \\<in> set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n                     upds)", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?x \\<in> set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n                 upds) \\<Longrightarrow>\n  ListUpdateE l' xs (fst ?x) = fst (snd ?x)\n\ngoal (1 subgoal):\n 1. \\<And>l s t.\n       \\<lbrakk>P' l s;\n        preList upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            (pre C Qannot l' s \\<and>\n                             preList upds C l' s) \\<and>\n                            (Qannot l' t \\<and>\n                             postList upds l' t \\<longrightarrow>\n                             Q l t \\<and> postList upds l t)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       (pre C Qannot l' s \\<and> preList upds C l' s) \\<and>\n       (Qannot l' t \\<and> postList upds l' t \\<longrightarrow>\n        Q l t \\<and> postList upds l t)", "apply(rule exI[where x=\"ListUpdateE l' xs\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (pre C Qannot (ListUpdateE l' xs) s \\<and>\n     preList upds C (ListUpdateE l' xs) s) \\<and>\n    (Qannot (ListUpdateE l' xs) t \\<and>\n     postList upds (ListUpdateE l' xs) t \\<longrightarrow>\n     Q l t \\<and> postList upds l t)", "apply(safe)"], ["proof (prove)\ngoal (4 subgoals):\n 1. pre C Qannot (ListUpdateE l' xs) s\n 2. preList upds C (ListUpdateE l' xs) s\n 3. \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n     postList upds (ListUpdateE l' xs) t\\<rbrakk>\n    \\<Longrightarrow> Q l t\n 4. \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n     postList upds (ListUpdateE l' xs) t\\<rbrakk>\n    \\<Longrightarrow> postList upds l t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. pre C Qannot (ListUpdateE l' xs) s", "by fact"], ["proof (prove)\ngoal (3 subgoals):\n 1. preList upds C (ListUpdateE l' xs) s\n 2. \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n     postList upds (ListUpdateE l' xs) t\\<rbrakk>\n    \\<Longrightarrow> Q l t\n 3. \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n     postList upds (ListUpdateE l' xs) t\\<rbrakk>\n    \\<Longrightarrow> postList upds l t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. preList upds C (ListUpdateE l' xs) s", "apply(rule preListpreSet)"], ["proof (prove)\ngoal (1 subgoal):\n 1. preSet (set upds) C (ListUpdateE l' xs) s", "proof (safe,goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       (a, aa, b) \\<in> set upds \\<Longrightarrow>\n       ListUpdateE l' xs a = preT C aa s", "case (1 x e v)"], ["proof (state)\nthis:\n  (x, e, v) \\<in> set upds\n\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       (a, aa, b) \\<in> set upds \\<Longrightarrow>\n       ListUpdateE l' xs a = preT C aa s", "then"], ["proof (chain)\npicking this:\n  (x, e, v) \\<in> set upds", "have \"(x, preT C e s, fune C v) \\<in> ?upds'\""], ["proof (prove)\nusing this:\n  (x, e, v) \\<in> set upds\n\ngoal (1 subgoal):\n 1. (x, preT C e s, fune C v)\n    \\<in> set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds)", "by force"], ["proof (state)\nthis:\n  (x, preT C e s, fune C v)\n  \\<in> set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v)) upds)\n\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       (a, aa, b) \\<in> set upds \\<Longrightarrow>\n       ListUpdateE l' xs a = preT C aa s", "from grr[OF this, simplified]"], ["proof (chain)\npicking this:\n  ListUpdateE l' xs x = preT C e s", "show ?case"], ["proof (prove)\nusing this:\n  ListUpdateE l' xs x = preT C e s\n\ngoal (1 subgoal):\n 1. ListUpdateE l' xs x = preT C e s", "."], ["proof (state)\nthis:\n  ListUpdateE l' xs x = preT C e s\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n     postList upds (ListUpdateE l' xs) t\\<rbrakk>\n    \\<Longrightarrow> Q l t\n 2. \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n     postList upds (ListUpdateE l' xs) t\\<rbrakk>\n    \\<Longrightarrow> postList upds l t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n     postList upds (ListUpdateE l' xs) t\\<rbrakk>\n    \\<Longrightarrow> Q l t", "using K"], ["proof (prove)\nusing this:\n  Qannot (ListUpdateE l' xs) t \\<longrightarrow> Q l t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n     postList upds (ListUpdateE l' xs) t\\<rbrakk>\n    \\<Longrightarrow> Q l t", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n     postList upds (ListUpdateE l' xs) t\\<rbrakk>\n    \\<Longrightarrow> postList upds l t", "(* Qannot must be independent of x *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n     postList upds (ListUpdateE l' xs) t\\<rbrakk>\n    \\<Longrightarrow> postList upds l t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n     postList upds (ListUpdateE l' xs) t\\<rbrakk>\n    \\<Longrightarrow> postList upds l t", "apply(rule postListpostSet)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n     postList upds (ListUpdateE l' xs) t\\<rbrakk>\n    \\<Longrightarrow> postSet (set upds) l t", "proof (safe, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n        postList upds (ListUpdateE l' xs) t;\n        (a, aa, b) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa t", "case (1 x e v)"], ["proof (state)\nthis:\n  Qannot (ListUpdateE l' xs) t\n  postList upds (ListUpdateE l' xs) t\n  (x, e, v) \\<in> set upds\n\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n        postList upds (ListUpdateE l' xs) t;\n        (a, aa, b) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa t", "with lxlx[of x]"], ["proof (chain)\npicking this:\n  x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\n  Qannot (ListUpdateE l' xs) t\n  postList upds (ListUpdateE l' xs) t\n  (x, e, v) \\<in> set upds", "have fF: \"l x = l' x\""], ["proof (prove)\nusing this:\n  x \\<in> lesvars upds \\<Longrightarrow> l' x = l x\n  Qannot (ListUpdateE l' xs) t\n  postList upds (ListUpdateE l' xs) t\n  (x, e, v) \\<in> set upds\n\ngoal (1 subgoal):\n 1. l x = l' x", "by force"], ["proof (state)\nthis:\n  l x = l' x\n\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n        postList upds (ListUpdateE l' xs) t;\n        (a, aa, b) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa t", "from postSetpostList[OF 1(2)]"], ["proof (chain)\npicking this:\n  postSet (set upds) (ListUpdateE l' xs) t", "have g: \"postSet (set upds) (ListUpdateE l' xs) t\""], ["proof (prove)\nusing this:\n  postSet (set upds) (ListUpdateE l' xs) t\n\ngoal (1 subgoal):\n 1. postSet (set upds) (ListUpdateE l' xs) t", "."], ["proof (state)\nthis:\n  postSet (set upds) (ListUpdateE l' xs) t\n\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n        postList upds (ListUpdateE l' xs) t;\n        (a, aa, b) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa t", "with 1(3)"], ["proof (chain)\npicking this:\n  (x, e, v) \\<in> set upds\n  postSet (set upds) (ListUpdateE l' xs) t", "have A: \"(ListUpdateE l' xs) x = e t\""], ["proof (prove)\nusing this:\n  (x, e, v) \\<in> set upds\n  postSet (set upds) (ListUpdateE l' xs) t\n\ngoal (1 subgoal):\n 1. ListUpdateE l' xs x = e t", "by fast"], ["proof (state)\nthis:\n  ListUpdateE l' xs x = e t\n\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n        postList upds (ListUpdateE l' xs) t;\n        (a, aa, b) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa t", "from 1(3) grr[of \"(x,preT C e s, fune C v)\"]"], ["proof (chain)\npicking this:\n  (x, e, v) \\<in> set upds\n  (x, preT C e s, fune C v)\n  \\<in> set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n              upds) \\<Longrightarrow>\n  ListUpdateE l' xs (fst (x, preT C e s, fune C v)) =\n  fst (snd (x, preT C e s, fune C v))", "have   B: \"ListUpdateE l' xs x = fst (snd (x, preT C e s, fune C v))\""], ["proof (prove)\nusing this:\n  (x, e, v) \\<in> set upds\n  (x, preT C e s, fune C v)\n  \\<in> set (map (\\<lambda>(x, e, v). (x, preT C e s, fune C v))\n              upds) \\<Longrightarrow>\n  ListUpdateE l' xs (fst (x, preT C e s, fune C v)) =\n  fst (snd (x, preT C e s, fune C v))\n\ngoal (1 subgoal):\n 1. ListUpdateE l' xs x = fst (snd (x, preT C e s, fune C v))", "by force"], ["proof (state)\nthis:\n  ListUpdateE l' xs x = fst (snd (x, preT C e s, fune C v))\n\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n        postList upds (ListUpdateE l' xs) t;\n        (a, aa, b) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa t", "from A B"], ["proof (chain)\npicking this:\n  ListUpdateE l' xs x = e t\n  ListUpdateE l' xs x = fst (snd (x, preT C e s, fune C v))", "have X: \"e t = preT C e s\""], ["proof (prove)\nusing this:\n  ListUpdateE l' xs x = e t\n  ListUpdateE l' xs x = fst (snd (x, preT C e s, fune C v))\n\ngoal (1 subgoal):\n 1. e t = preT C e s", "by fastforce"], ["proof (state)\nthis:\n  e t = preT C e s\n\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n        postList upds (ListUpdateE l' xs) t;\n        (a, aa, b) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa t", "from preSetpreList[OF 3(2)]"], ["proof (chain)\npicking this:\n  preSet (set upds) ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l s", "have \"preSet (set upds) ({P'2/Qannot2/eannot2} CONSEQ C) l s\""], ["proof (prove)\nusing this:\n  preSet (set upds) ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) l s\n\ngoal (1 subgoal):\n 1. preSet (set upds) ({P'2/Qannot2/eannot2} CONSEQ C) l s", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  preSet (set upds) ({P'2/Qannot2/eannot2} CONSEQ C) l s\n\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n        postList upds (ListUpdateE l' xs) t;\n        (a, aa, b) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa t", "with 1(3)"], ["proof (chain)\npicking this:\n  (x, e, v) \\<in> set upds\n  preSet (set upds) ({P'2/Qannot2/eannot2} CONSEQ C) l s", "have Y: \"l x = preT C e s\""], ["proof (prove)\nusing this:\n  (x, e, v) \\<in> set upds\n  preSet (set upds) ({P'2/Qannot2/eannot2} CONSEQ C) l s\n\ngoal (1 subgoal):\n 1. l x = preT C e s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, e, v) \\<in> set upds; preSet (set upds) C l s\\<rbrakk>\n    \\<Longrightarrow> l x = preT C e s", "by fast"], ["proof (state)\nthis:\n  l x = preT C e s\n\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>Qannot (ListUpdateE l' xs) t;\n        postList upds (ListUpdateE l' xs) t;\n        (a, aa, b) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa t", "from X Y"], ["proof (chain)\npicking this:\n  e t = preT C e s\n  l x = preT C e s", "show ?case"], ["proof (prove)\nusing this:\n  e t = preT C e s\n  l x = preT C e s\n\ngoal (1 subgoal):\n 1. l x = e t", "by simp"], ["proof (state)\nthis:\n  l x = e t\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>l'.\n     (pre C Qannot l' s \\<and> preList upds C l' s) \\<and>\n     (Qannot l' t \\<and> postList upds l' t \\<longrightarrow>\n      Q l t \\<and> postList upds l t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l s. P' l s \\<Longrightarrow> Q l (postQ C s)\n 2. K4 upds LVQ ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) Q", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. P' l_ s_ \\<Longrightarrow> Q l_ (postQ C s_)", "using ihsnd ih2"], ["proof (prove)\nusing this:\n  (\\<forall>l s.\n      pre C Qannot l s \\<longrightarrow> Qannot l (postQ C s)) \\<and>\n  K4 upds Q's C Qannot\n  \\<forall>l s.\n     P' l s \\<longrightarrow>\n     time C s \\<le> k * eannot s \\<and>\n     (\\<forall>t.\n         \\<exists>l'.\n            pre C Qannot l' s \\<and> (Qannot l' t \\<longrightarrow> Q l t))\n\ngoal (1 subgoal):\n 1. P' l_ s_ \\<Longrightarrow> Q l_ (postQ C s_)", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. K4 upds LVQ ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) Q", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. K4 upds LVQ ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) Q", "using ihsnd[THEN conjunct2] pc"], ["proof (prove)\nusing this:\n  K4 upds Q's C Qannot\n  \\<forall>s1 s2 l. s1 = s2 on Ps \\<longrightarrow> P' l s1 = P' l s2\n\ngoal (1 subgoal):\n 1. K4 upds LVQ ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) Q", "unfolding K4_def K_def"], ["proof (prove)\nusing this:\n  (\\<forall>l s1 s2.\n      s1 = s2 on qdeps C Q's \\<longrightarrow>\n      pre C Qannot l s1 = pre C Qannot l s2) \\<and>\n  K3 upds C Qannot \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C \\<longrightarrow> time C s1 = time C s2)\n  \\<forall>s1 s2 l. s1 = s2 on Ps \\<longrightarrow> P' l s1 = P' l s2\n\ngoal (1 subgoal):\n 1. (\\<forall>l s1 s2.\n        s1 = s2\n        on qdeps ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C)\n            LVQ \\<longrightarrow>\n        pre ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) Q l s1 =\n        pre ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) Q l s2) \\<and>\n    K3 upds ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) Q \\<and>\n    (\\<forall>s1 s2.\n        s1 = s2\n        on kdeps\n            ({(P', Ps)/(Qannot, Q's)/(eannot, es)}\n             CONSEQ C) \\<longrightarrow>\n        time ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) s1 =\n        time ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) s2)", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>s1 s2.\n                s1 = s2 on Ps \\<longrightarrow>\n                (\\<forall>l. P' l s1 = P' l s2);\n     \\<forall>l s1 s2.\n        s1 = s2 on qdeps C Q's \\<longrightarrow>\n        pre C Qannot l s1 = pre C Qannot l s2;\n     K3 upds C Qannot;\n     \\<forall>s1 s2.\n        s1 = s2 on kdeps C \\<longrightarrow> time C s1 = time C s2\\<rbrakk>\n    \\<Longrightarrow> K3 upds\n                       ({(P', Ps)/(Qannot, Q's)/(eannot, es)} CONSEQ C) Q\n 2. \\<And>s1 s2.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Ps \\<longrightarrow>\n                   (\\<forall>l. P' l s1 = P' l s2);\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C Q's \\<longrightarrow>\n           pre C Qannot l s1 = pre C Qannot l s2;\n        K3 upds C Qannot;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C \\<longrightarrow> time C s1 = time C s2;\n        s1 = s2 on es\\<rbrakk>\n       \\<Longrightarrow> eannot s1 = eannot s2", "unfolding K3_def K2_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>s1 s2.\n                s1 = s2 on Ps \\<longrightarrow>\n                (\\<forall>l. P' l s1 = P' l s2);\n     \\<forall>l s1 s2.\n        s1 = s2 on qdeps C Q's \\<longrightarrow>\n        pre C Qannot l s1 = pre C Qannot l s2;\n     \\<forall>(a, b, c)\\<in>set upds.\n        \\<forall>s1 s2.\n           s1 = s2 on fune C c \\<longrightarrow> preT C b s1 = preT C b s2;\n     \\<forall>s1 s2.\n        s1 = s2 on kdeps C \\<longrightarrow> time C s1 = time C s2\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(a, b, c)\\<in>set upds.\n                         \\<forall>s1 s2.\n                            s1 = s2\n                            on fune\n                                ({(P', Ps)/(Qannot, Q's)/(eannot, es)}\n                                 CONSEQ C)\n                                c \\<longrightarrow>\n                            preT\n                             ({(P', Ps)/(Qannot, Q's)/(eannot, es)}\n                              CONSEQ C)\n                             b s1 =\n                            preT\n                             ({(P', Ps)/(Qannot, Q's)/(eannot, es)}\n                              CONSEQ C)\n                             b s2\n 2. \\<And>s1 s2.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Ps \\<longrightarrow>\n                   (\\<forall>l. P' l s1 = P' l s2);\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C Q's \\<longrightarrow>\n           pre C Qannot l s1 = pre C Qannot l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2.\n              s1 = s2 on fune C c \\<longrightarrow>\n              preT C b s1 = preT C b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C \\<longrightarrow> time C s1 = time C s2;\n        s1 = s2 on es\\<rbrakk>\n       \\<Longrightarrow> eannot s1 = eannot s2", "using ec"], ["proof (prove)\nusing this:\n  \\<forall>s1 s2. s1 = s2 on es \\<longrightarrow> eannot s1 = eannot s2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>s1 s2.\n                s1 = s2 on Ps \\<longrightarrow>\n                (\\<forall>l. P' l s1 = P' l s2);\n     \\<forall>l s1 s2.\n        s1 = s2 on qdeps C Q's \\<longrightarrow>\n        pre C Qannot l s1 = pre C Qannot l s2;\n     \\<forall>(a, b, c)\\<in>set upds.\n        \\<forall>s1 s2.\n           s1 = s2 on fune C c \\<longrightarrow> preT C b s1 = preT C b s2;\n     \\<forall>s1 s2.\n        s1 = s2 on kdeps C \\<longrightarrow> time C s1 = time C s2\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(a, b, c)\\<in>set upds.\n                         \\<forall>s1 s2.\n                            s1 = s2\n                            on fune\n                                ({(P', Ps)/(Qannot, Q's)/(eannot, es)}\n                                 CONSEQ C)\n                                c \\<longrightarrow>\n                            preT\n                             ({(P', Ps)/(Qannot, Q's)/(eannot, es)}\n                              CONSEQ C)\n                             b s1 =\n                            preT\n                             ({(P', Ps)/(Qannot, Q's)/(eannot, es)}\n                              CONSEQ C)\n                             b s2\n 2. \\<And>s1 s2.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Ps \\<longrightarrow>\n                   (\\<forall>l. P' l s1 = P' l s2);\n        \\<forall>l s1 s2.\n           s1 = s2 on qdeps C Q's \\<longrightarrow>\n           pre C Qannot l s1 = pre C Qannot l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2.\n              s1 = s2 on fune C c \\<longrightarrow>\n              preT C b s1 = preT C b s2;\n        \\<forall>s1 s2.\n           s1 = s2 on kdeps C \\<longrightarrow> time C s1 = time C s2;\n        s1 = s2 on es\\<rbrakk>\n       \\<Longrightarrow> eannot s1 = eannot s2", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           pre ({P'2/Qannot2/eannot2} CONSEQ C) Q l s \\<and>\n                           preList upds ({P'2/Qannot2/eannot2} CONSEQ C) l\n                            s}\n                       strip ({P'2/Qannot2/eannot2} CONSEQ C)\n                       { time\n                          ({P'2/Qannot2/eannot2}\n                           CONSEQ C) \\<Down> \\<lambda>l s.\n          Q l s \\<and> postList upds l s} \\<and>\n  (\\<forall>l s.\n      pre ({P'2/Qannot2/eannot2} CONSEQ C) Q l s \\<longrightarrow>\n      Q l (postQ ({P'2/Qannot2/eannot2} CONSEQ C) s)) \\<and>\n  K4 upds LVQ ({P'2/Qannot2/eannot2} CONSEQ C) Q\n\ngoal (2 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "case (Aseq C1 C2 Q upds)"], ["proof (state)\nthis:\n  \\<lbrakk>vc C1 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C1 = {}; distinct (map fst ?upds);\n   finite (varacom C1);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>a\\<in>set ?upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set ?upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C1 ?Q l s \\<and> preList ?upds C1 l s}\n   strip C1\n   { time C1 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C1 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C1 s)) \\<and>\n                    K4 ?upds ?LVQ C1 ?Q\n  \\<lbrakk>vc C2 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C2 = {}; distinct (map fst ?upds);\n   finite (varacom C2);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>a\\<in>set ?upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set ?upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C2 ?Q l s \\<and> preList ?upds C2 l s}\n   strip C2\n   { time C2 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C2 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C2 s)) \\<and>\n                    K4 ?upds ?LVQ C2 ?Q\n  vc (C1;; C2) Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom (C1;; C2) = {}\n  distinct (map fst upds)\n  finite (varacom (C1;; C2))\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (2 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "let ?P = \"(\\<lambda>l s. pre C1 (pre C2 Q) l s \\<and> preList upds (C1;;C2) l s  )\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "let ?P' = \"support Q \\<union> varacom C1 \\<union> varacom C2 \\<union> lesvars upds\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have finite_varacom: \"finite (varacom (C1;; C2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (varacom (C1;; C2))", "by fact"], ["proof (state)\nthis:\n  finite (varacom (C1;; C2))\n\ngoal (2 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have finite_varacomC2: \"finite (varacom C2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (varacom C2)", "apply(rule finite_subset[OF _ finite_varacom])"], ["proof (prove)\ngoal (1 subgoal):\n 1. varacom C2 \\<subseteq> varacom (C1;; C2)", "by simp"], ["proof (state)\nthis:\n  finite (varacom C2)\n\ngoal (2 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "let ?y = \"SOME x. x \\<notin> ?P'\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have sup_L: \"support (preList upds (C1;;C2)) \\<subseteq> lesvars upds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support (preList upds (C1;; C2)) \\<subseteq> lesvars upds", "apply(rule support_preList)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  support (preList upds (C1;; C2)) \\<subseteq> lesvars upds\n\ngoal (2 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have sup_B: \"support ?P \\<subseteq> ?P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support\n     (\\<lambda>l s. pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s)\n    \\<subseteq> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                lesvars upds", "apply(rule subset_trans[OF support_and])"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (pre C1 (pre C2 Q)) \\<union> support (preList upds (C1;; C2))\n    \\<subseteq> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                lesvars upds", "using support_pre sup_L"], ["proof (prove)\nusing this:\n  support (pre ?C ?Q) \\<subseteq> support ?Q \\<union> varacom ?C\n  support (preList upds (C1;; C2)) \\<subseteq> lesvars upds\n\ngoal (1 subgoal):\n 1. support (pre C1 (pre C2 Q)) \\<union> support (preList upds (C1;; C2))\n    \\<subseteq> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                lesvars upds", "by blast"], ["proof (state)\nthis:\n  support\n   (\\<lambda>l s. pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s)\n  \\<subseteq> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n              lesvars upds\n\ngoal (2 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have fP': \"finite (?P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n      lesvars upds)", "using finite_varacom Aseq(3,4,5)"], ["proof (prove)\nusing this:\n  finite (varacom (C1;; C2))\n  vc (C1;; C2) Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom (C1;; C2) = {}\n\ngoal (1 subgoal):\n 1. finite\n     (support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n      lesvars upds)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  finite\n   (support Q \\<union> varacom C1 \\<union> varacom C2 \\<union> lesvars upds)\n\ngoal (2 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "hence \"\\<exists>x. x \\<notin> ?P'\""], ["proof (prove)\nusing this:\n  finite\n   (support Q \\<union> varacom C1 \\<union> varacom C2 \\<union> lesvars upds)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                  lesvars upds", "using infinite_UNIV_listI"], ["proof (prove)\nusing this:\n  finite\n   (support Q \\<union> varacom C1 \\<union> varacom C2 \\<union> lesvars upds)\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                  lesvars upds", "using ex_new_if_finite"], ["proof (prove)\nusing this:\n  finite\n   (support Q \\<union> varacom C1 \\<union> varacom C2 \\<union> lesvars upds)\n  infinite UNIV\n  \\<lbrakk>infinite UNIV; finite ?A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a. a \\<notin> ?A\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                  lesvars upds", "by metis"], ["proof (state)\nthis:\n  \\<exists>x.\n     x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                lesvars upds\n\ngoal (2 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "hence ynP': \"?y \\<notin> ?P'\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                lesvars upds\n\ngoal (1 subgoal):\n 1. (SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds)\n    \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n             lesvars upds", "by (rule someI_ex)"], ["proof (state)\nthis:\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n           lesvars upds\n\ngoal (2 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "hence ysupPreC2Q: \"?y \\<notin> support (pre C2 Q)\" and ysupC1: \"?y \\<notin> varacom C1\""], ["proof (prove)\nusing this:\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n           lesvars upds\n\ngoal (1 subgoal):\n 1. (SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds)\n    \\<notin> support (pre C2 Q) &&&\n    (SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds)\n    \\<notin> varacom C1", "using support_pre"], ["proof (prove)\nusing this:\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n           lesvars upds\n  support (pre ?C ?Q) \\<subseteq> support ?Q \\<union> varacom ?C\n\ngoal (1 subgoal):\n 1. (SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds)\n    \\<notin> support (pre C2 Q) &&&\n    (SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds)\n    \\<notin> varacom C1", "by auto"], ["proof (state)\nthis:\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> support (pre C2 Q)\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> varacom C1\n\ngoal (2 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "from Aseq(5)"], ["proof (chain)\npicking this:\n  lesvars upds \\<inter> varacom (C1;; C2) = {}", "have \"lesvars upds \\<inter> varacom C2 = {}\""], ["proof (prove)\nusing this:\n  lesvars upds \\<inter> varacom (C1;; C2) = {}\n\ngoal (1 subgoal):\n 1. lesvars upds \\<inter> varacom C2 = {}", "by auto"], ["proof (state)\nthis:\n  lesvars upds \\<inter> varacom C2 = {}\n\ngoal (2 subgoals):\n 1. \\<And>C1 C2 Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds); finite (varacom C1);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q upds LVE LVQ.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            finite (varacom C2);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>(a, b, c)\\<in>set upds.\n               \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        vc (C1;; C2) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom (C1;; C2) = {};\n        distinct (map fst upds); finite (varacom (C1;; C2));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre (C1;; C2) Q l s \\<and> preList upds (C1;; C2) l s}\n        strip (C1;; C2)\n        { time\n           (C1;;\n            C2) \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre (C1;; C2) Q l s \\<longrightarrow>\n                             Q l (postQ (C1;; C2) s)) \\<and>\n                         K4 upds LVQ (C1;; C2) Q\n 2. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "from Aseq"], ["proof (chain)\npicking this:\n  \\<lbrakk>vc C1 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C1 = {}; distinct (map fst ?upds);\n   finite (varacom C1);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>a\\<in>set ?upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set ?upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C1 ?Q l s \\<and> preList ?upds C1 l s}\n   strip C1\n   { time C1 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C1 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C1 s)) \\<and>\n                    K4 ?upds ?LVQ C1 ?Q\n  \\<lbrakk>vc C2 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C2 = {}; distinct (map fst ?upds);\n   finite (varacom C2);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>a\\<in>set ?upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set ?upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C2 ?Q l s \\<and> preList ?upds C2 l s}\n   strip C2\n   { time C2 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C2 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C2 s)) \\<and>\n                    K4 ?upds ?LVQ C2 ?Q\n  vc (C1;; C2) Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom (C1;; C2) = {}\n  distinct (map fst upds)\n  finite (varacom (C1;; C2))\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>vc C1 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C1 = {}; distinct (map fst ?upds);\n   finite (varacom C1);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>a\\<in>set ?upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set ?upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C1 ?Q l s \\<and> preList ?upds C1 l s}\n   strip C1\n   { time C1 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C1 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C1 s)) \\<and>\n                    K4 ?upds ?LVQ C1 ?Q\n  \\<lbrakk>vc C2 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C2 = {}; distinct (map fst ?upds);\n   finite (varacom C2);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>a\\<in>set ?upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set ?upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C2 ?Q l s \\<and> preList ?upds C2 l s}\n   strip C2\n   { time C2 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C2 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C2 s)) \\<and>\n                    K4 ?upds ?LVQ C2 ?Q\n  vc (C1;; C2) Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom (C1;; C2) = {}\n  distinct (map fst upds)\n  finite (varacom (C1;; C2))\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre (C1;; C2) Q l s \\<and>\n                             preList upds (C1;; C2) l s}\n                         strip (C1;; C2)\n                         { time\n                            (C1;;\n                             C2) \\<Down> \\<lambda>l s.\n      Q l s \\<and> postList upds l s} \\<and>\n    (\\<forall>l s.\n        pre (C1;; C2) Q l s \\<longrightarrow>\n        Q l (postQ (C1;; C2) s)) \\<and>\n    K4 upds LVQ (C1;; C2) Q", "apply(auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s}\n     strip C1;; strip C2\n     { \\<lambda>a.\n          time C1 a +\n          preT C1 (time C2)\n           a \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s}\n 2. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "proof (rule Seq, goal_cases)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = ?e2'20 s}\n     strip C1\n     { ?e1.20 \\<Down> \\<lambda>l s.\n                         ?P\\<^sub>220 l s \\<and> ?e2.20 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {?P\\<^sub>220} strip C2\n     { ?e2.20 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s}\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 4. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20 \\<notin> support ?P\\<^sub>220\n 5. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s\\<rbrakk>\n       \\<Longrightarrow> ?e1.20 s + ?e2'20 s\n                         \\<le> time C1 s + preT C1 (time C2) s\n 6. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 7. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "case 2"], ["proof (state)\nthis:\n  \\<lbrakk>vc C1 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C1 = {}; distinct (map fst ?upds);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>x\\<in>set ?upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n   (\\<Union>x\\<in>set ?upds. case x of (a, b, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C1 ?Q l s \\<and> preList ?upds C1 l s}\n   strip C1\n   { time C1 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C1 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C1 s)) \\<and>\n                    K4 ?upds ?LVQ C1 ?Q\n  \\<lbrakk>vc C2 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C2 = {}; distinct (map fst ?upds);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>x\\<in>set ?upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n   (\\<Union>x\\<in>set ?upds. case x of (a, b, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C2 ?Q l s \\<and> preList ?upds C2 l s}\n   strip C2\n   { time C2 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C2 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C2 s)) \\<and>\n                    K4 ?upds ?LVQ C2 ?Q\n  finite (support Q)\n  lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {}\n  distinct (map fst upds)\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2)\n  vc C2 Q LVQ LVE\n  finite (varacom C1)\n  finite (varacom C2)\n\ngoal (7 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = ?e2'20 s}\n     strip C1\n     { ?e1.20 \\<Down> \\<lambda>l s.\n                         ?P\\<^sub>220 l s \\<and> ?e2.20 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {?P\\<^sub>220} strip C2\n     { ?e2.20 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s}\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 4. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20 \\<notin> support ?P\\<^sub>220\n 5. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s\\<rbrakk>\n       \\<Longrightarrow> ?e1.20 s + ?e2'20 s\n                         \\<le> time C1 s + preT C1 (time C2) s\n 6. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 7. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "show \"\\<turnstile>\\<^sub>1 {(%l s. pre C2 Q l s \\<and>  preList upds C2 l s )} strip C2 { time C2 \\<Down> (%l s. Q l s \\<and> postList upds l s)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C2 Q l s \\<and> preList upds C2 l s}\n                         strip C2\n                         { time\n                            C2 \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s}", "apply(rule weaken_post[where Q=\"(%l s. Q l s \\<and> postList upds l s)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C2 Q l s \\<and> preList upds C2 l s}\n                         strip C2\n                         { time\n                            C2 \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s}\n 2. \\<forall>l s.\n       Q l s \\<and> postList upds l s \\<longrightarrow>\n       Q l s \\<and> postList upds l s", "apply(rule 2(2)[THEN conjunct1])"], ["proof (prove)\ngoal (9 subgoals):\n 1. vc C2 Q ?LVQ4 ?LVE4\n 2. finite (support Q)\n 3. lesvars upds \\<inter> varacom C2 = {}\n 4. distinct (map fst upds)\n 5. \\<forall>l s1 s2. s1 = s2 on ?LVQ4 \\<longrightarrow> Q l s1 = Q l s2\n 6. \\<forall>l s1 s2.\n       s1 = s2 on ?LVE4 \\<longrightarrow>\n       postList upds l s1 = postList upds l s2\n 7. \\<forall>x\\<in>set upds.\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n 8. (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> ?LVE4\n 9. \\<forall>l s.\n       Q l s \\<and> postList upds l s \\<longrightarrow>\n       Q l s \\<and> postList upds l s", "apply fact"], ["proof (prove)\ngoal (8 subgoals):\n 1. finite (support Q)\n 2. lesvars upds \\<inter> varacom C2 = {}\n 3. distinct (map fst upds)\n 4. \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n 5. \\<forall>l s1 s2.\n       s1 = s2 on LVE \\<longrightarrow>\n       postList upds l s1 = postList upds l s2\n 6. \\<forall>x\\<in>set upds.\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n 7. (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> LVE\n 8. \\<forall>l s.\n       Q l s \\<and> postList upds l s \\<longrightarrow>\n       Q l s \\<and> postList upds l s", "apply (fact)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l s.\n       Q l s \\<and> postList upds l s \\<longrightarrow>\n       Q l s \\<and> postList upds l s", "using 2(8)"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n\ngoal (1 subgoal):\n 1. \\<forall>l s.\n       Q l s \\<and> postList upds l s \\<longrightarrow>\n       Q l s \\<and> postList upds l s", "by simp"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           pre C2 Q l s \\<and> preList upds C2 l s}\n                       strip C2\n                       { time\n                          C2 \\<Down> \\<lambda>l s.\n  Q l s \\<and> postList upds l s}\n\ngoal (6 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = ?e2'20 s}\n     strip C1\n     { ?e1.20 \\<Down> \\<lambda>l s.\n                         (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                         time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s\\<rbrakk>\n       \\<Longrightarrow> ?e1.20 s + ?e2'20 s\n                         \\<le> time C1 s + preT C1 (time C2) s\n 5. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 6. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = ?e2'20 s}\n     strip C1\n     { ?e1.20 \\<Down> \\<lambda>l s.\n                         (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                         time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s\\<rbrakk>\n       \\<Longrightarrow> ?e1.20 s + ?e2'20 s\n                         \\<le> time C1 s + preT C1 (time C2) s\n 5. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 6. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "case 3"], ["proof (state)\nthis:\n  \\<lbrakk>vc C1 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C1 = {}; distinct (map fst ?upds);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>x\\<in>set ?upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n   (\\<Union>x\\<in>set ?upds. case x of (a, b, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C1 ?Q l s \\<and> preList ?upds C1 l s}\n   strip C1\n   { time C1 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C1 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C1 s)) \\<and>\n                    K4 ?upds ?LVQ C1 ?Q\n  \\<lbrakk>vc C2 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C2 = {}; distinct (map fst ?upds);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>x\\<in>set ?upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n   (\\<Union>x\\<in>set ?upds. case x of (a, b, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C2 ?Q l s \\<and> preList ?upds C2 l s}\n   strip C2\n   { time C2 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C2 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C2 s)) \\<and>\n                    K4 ?upds ?LVQ C2 ?Q\n  finite (support Q)\n  lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {}\n  distinct (map fst upds)\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2)\n  vc C2 Q LVQ LVE\n  finite (varacom C1)\n  finite (varacom C2)\n\ngoal (6 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = ?e2'20 s}\n     strip C1\n     { ?e1.20 \\<Down> \\<lambda>l s.\n                         (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                         time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s\\<rbrakk>\n       \\<Longrightarrow> ?e1.20 s + ?e2'20 s\n                         \\<le> time C1 s + preT C1 (time C2) s\n 5. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 6. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "fix s"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = ?e2'20 s}\n     strip C1\n     { ?e1.20 \\<Down> \\<lambda>l s.\n                         (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                         time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s\\<rbrakk>\n       \\<Longrightarrow> ?e1.20 s + ?e2'20 s\n                         \\<le> time C1 s + preT C1 (time C2) s\n 5. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 6. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "show \"time C1 s + preT C1 (time C2) s  \\<le> time C1 s + preT C1 (time C2) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. time C1 s + preT C1 (time C2) s \\<le> time C1 s + preT C1 (time C2) s", "by simp"], ["proof (state)\nthis:\n  time C1 s + preT C1 (time C2) s \\<le> time C1 s + preT C1 (time C2) s\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "case 1"], ["proof (state)\nthis:\n  \\<lbrakk>vc C1 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C1 = {}; distinct (map fst ?upds);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>x\\<in>set ?upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n   (\\<Union>x\\<in>set ?upds. case x of (a, b, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C1 ?Q l s \\<and> preList ?upds C1 l s}\n   strip C1\n   { time C1 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C1 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C1 s)) \\<and>\n                    K4 ?upds ?LVQ C1 ?Q\n  \\<lbrakk>vc C2 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C2 = {}; distinct (map fst ?upds);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>x\\<in>set ?upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n   (\\<Union>x\\<in>set ?upds. case x of (a, b, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C2 ?Q l s \\<and> preList ?upds C2 l s}\n   strip C2\n   { time C2 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C2 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C2 s)) \\<and>\n                    K4 ?upds ?LVQ C2 ?Q\n  finite (support Q)\n  lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {}\n  distinct (map fst upds)\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2)\n  vc C2 Q LVQ LVE\n  finite (varacom C1)\n  finite (varacom C2)\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "from ynP'"], ["proof (chain)\npicking this:\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n           lesvars upds", "have yC1: \"?y \\<notin> varacom C1\""], ["proof (prove)\nusing this:\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n           lesvars upds\n\ngoal (1 subgoal):\n 1. (SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds)\n    \\<notin> varacom C1", "by blast"], ["proof (state)\nthis:\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> varacom C1\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "have xC1: \"lesvars upds \\<inter> varacom C1 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lesvars upds \\<inter> varacom C1 = {}", "using Aseq(5)"], ["proof (prove)\nusing this:\n  lesvars upds \\<inter> varacom (C1;; C2) = {}\n\ngoal (1 subgoal):\n 1. lesvars upds \\<inter> varacom C1 = {}", "by auto"], ["proof (state)\nthis:\n  lesvars upds \\<inter> varacom C1 = {}\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "from finite_support_pre[OF Aseq(4) finite_varacomC2]"], ["proof (chain)\npicking this:\n  finite (support (pre C2 Q))", "have G: \"finite (support (pre C2 Q))\""], ["proof (prove)\nusing this:\n  finite (support (pre C2 Q))\n\ngoal (1 subgoal):\n 1. finite (support (pre C2 Q))", "."], ["proof (state)\nthis:\n  finite (support (pre C2 Q))\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "let ?upds = \"map (\\<lambda>a. case a of (x,e,v) \\<Rightarrow> (x, preT C2 e, fune C2 v)) upds\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "let ?upds' = \"(?y,time C2, kdeps C2)#?upds\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "{"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "have A: \" lesvars ?upds' = {?y} \\<union> lesvars upds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lesvars\n     ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds) =\n    {SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds} \\<union>\n    lesvars upds", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. insert\n     (SOME x.\n         x \\<notin> support Q \\<and>\n         x \\<notin> varacom C1 \\<and>\n         x \\<notin> varacom C2 \\<and> x \\<notin> lesvars upds)\n     (fst `\n      (\\<lambda>x.\n          case x of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v)) `\n      set upds) =\n    insert\n     (SOME x.\n         x \\<notin> support Q \\<and>\n         x \\<notin> varacom C1 \\<and>\n         x \\<notin> varacom C2 \\<and> x \\<notin> lesvars upds)\n     (lesvars upds)", "by force"], ["proof (state)\nthis:\n  lesvars\n   ((SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds,\n     time C2, kdeps C2) #\n    map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     upds) =\n  {SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds} \\<union>\n  lesvars upds\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "from Aseq(5)"], ["proof (chain)\npicking this:\n  lesvars upds \\<inter> varacom (C1;; C2) = {}", "have 2: \"lesvars upds \\<inter> varacom C1 = {}\""], ["proof (prove)\nusing this:\n  lesvars upds \\<inter> varacom (C1;; C2) = {}\n\ngoal (1 subgoal):\n 1. lesvars upds \\<inter> varacom C1 = {}", "by auto"], ["proof (state)\nthis:\n  lesvars upds \\<inter> varacom C1 = {}\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "have \" lesvars ?upds' \\<inter> varacom C1 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lesvars\n     ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds) \\<inter>\n    varacom C1 =\n    {}", "unfolding A"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({SOME x.\n         x \\<notin> support Q \\<union> varacom C1 \\<union>\n                    varacom C2 \\<union>\n                    lesvars upds} \\<union>\n     lesvars upds) \\<inter>\n    varacom C1 =\n    {}", "using ysupC1 2"], ["proof (prove)\nusing this:\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> varacom C1\n  lesvars upds \\<inter> varacom C1 = {}\n\ngoal (1 subgoal):\n 1. ({SOME x.\n         x \\<notin> support Q \\<union> varacom C1 \\<union>\n                    varacom C2 \\<union>\n                    lesvars upds} \\<union>\n     lesvars upds) \\<inter>\n    varacom C1 =\n    {}", "by blast"], ["proof (state)\nthis:\n  lesvars\n   ((SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds,\n     time C2, kdeps C2) #\n    map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     upds) \\<inter>\n  varacom C1 =\n  {}\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "}"], ["proof (state)\nthis:\n  lesvars\n   ((SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds,\n     time C2, kdeps C2) #\n    map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     upds) \\<inter>\n  varacom C1 =\n  {}\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "note klar=this"], ["proof (state)\nthis:\n  lesvars\n   ((SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds,\n     time C2, kdeps C2) #\n    map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     upds) \\<inter>\n  varacom C1 =\n  {}\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "have t: \"fst \\<circ> (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) = fst\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst \\<circ> (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) = fst", "by auto"], ["proof (state)\nthis:\n  fst \\<circ> (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) = fst\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "{"], ["proof (state)\nthis:\n  fst \\<circ> (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) = fst\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "fix a b c X"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "assume \"a \\<notin> lesvars X\" \"(a,b,c) \\<in> set X\""], ["proof (state)\nthis:\n  a \\<notin> lesvars X\n  (a, b, c) \\<in> set X\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "then"], ["proof (chain)\npicking this:\n  a \\<notin> lesvars X\n  (a, b, c) \\<in> set X", "have \"False\""], ["proof (prove)\nusing this:\n  a \\<notin> lesvars X\n  (a, b, c) \\<in> set X\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?a3 \\<notin> lesvars ?X3; (?a3, ?b3, ?c3) \\<in> set ?X3\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "note helper=this"], ["proof (state)\nthis:\n  \\<lbrakk>?a3 \\<notin> lesvars ?X3; (?a3, ?b3, ?c3) \\<in> set ?X3\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "have dmap: \"distinct (map fst ?upds')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct\n     (map fst\n       ((SOME x.\n            x \\<notin> support Q \\<union> varacom C1 \\<union>\n                       varacom C2 \\<union>\n                       lesvars upds,\n         time C2, kdeps C2) #\n        map (\\<lambda>a.\n                case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n         upds))", "apply(auto simp add: t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       (SOME x.\n           x \\<notin> support Q \\<and>\n           x \\<notin> varacom C1 \\<and>\n           x \\<notin> varacom C2 \\<and> x \\<notin> lesvars upds,\n        aa, b)\n       \\<in> set upds \\<Longrightarrow>\n       False\n 2. distinct (map fst upds)", "subgoal for e"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME x.\n        x \\<notin> support Q \\<and>\n        x \\<notin> varacom C1 \\<and>\n        x \\<notin> varacom C2 \\<and> x \\<notin> lesvars upds,\n     e, b_)\n    \\<in> set upds \\<Longrightarrow>\n    False", "apply(rule helper[of ?y upds e])"], ["proof (prove)\ngoal (2 subgoals):\n 1. (SOME x.\n        x \\<notin> support Q \\<and>\n        x \\<notin> varacom C1 \\<and>\n        x \\<notin> varacom C2 \\<and> x \\<notin> lesvars upds,\n     e, b_)\n    \\<in> set upds \\<Longrightarrow>\n    (SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds)\n    \\<notin> lesvars upds\n 2. (SOME x.\n        x \\<notin> support Q \\<and>\n        x \\<notin> varacom C1 \\<and>\n        x \\<notin> varacom C2 \\<and> x \\<notin> lesvars upds,\n     e, b_)\n    \\<in> set upds \\<Longrightarrow>\n    (SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds,\n     e, ?c3)\n    \\<in> set upds", "using ynP'"], ["proof (prove)\nusing this:\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n           lesvars upds\n\ngoal (2 subgoals):\n 1. (SOME x.\n        x \\<notin> support Q \\<and>\n        x \\<notin> varacom C1 \\<and>\n        x \\<notin> varacom C2 \\<and> x \\<notin> lesvars upds,\n     e, b_)\n    \\<in> set upds \\<Longrightarrow>\n    (SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds)\n    \\<notin> lesvars upds\n 2. (SOME x.\n        x \\<notin> support Q \\<and>\n        x \\<notin> varacom C1 \\<and>\n        x \\<notin> varacom C2 \\<and> x \\<notin> lesvars upds,\n     e, b_)\n    \\<in> set upds \\<Longrightarrow>\n    (SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds,\n     e, ?c3)\n    \\<in> set upds", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map fst upds)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map fst upds)", "by fact"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  distinct\n   (map fst\n     ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds))\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "note bla1=1(1)[where Q=\"pre C2 Q\" and upds=\"?upds'\", OF 1(10) G klar dmap]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>l s1 s2.\n              s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n              pre C2 Q l s1 = pre C2 Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on fune C2 LVE \\<union> kdeps C2 \\<longrightarrow>\n      postList\n       ((SOME x.\n            x \\<notin> support Q \\<union> varacom C1 \\<union>\n                       varacom C2 \\<union>\n                       lesvars upds,\n         time C2, kdeps C2) #\n        map (\\<lambda>a.\n                case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n         upds)\n       l s1 =\n      postList\n       ((SOME x.\n            x \\<notin> support Q \\<union> varacom C1 \\<union>\n                       varacom C2 \\<union>\n                       lesvars upds,\n         time C2, kdeps C2) #\n        map (\\<lambda>a.\n                case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n         upds)\n       l s2;\n   \\<forall>x\\<in>set ((SOME x.\n                           x \\<notin> support Q \\<union> varacom C1 \\<union>\nvaracom C2 \\<union>\nlesvars upds,\n                        time C2, kdeps C2) #\n                       map (\\<lambda>a.\n                               case a of\n                               (x, e, v) \\<Rightarrow>\n                                 (x, preT C2 e, fune C2 v))\n                        upds).\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n   (\\<Union>x\\<in>set ((SOME x.\n                           x \\<notin> support Q \\<union> varacom C1 \\<union>\nvaracom C2 \\<union>\nlesvars upds,\n                        time C2, kdeps C2) #\n                       map (\\<lambda>a.\n                               case a of\n                               (x, e, v) \\<Rightarrow>\n                                 (x, preT C2 e, fune C2 v))\n                        upds).\n       case x of (a, b, c) \\<Rightarrow> c)\n   \\<subseteq> fune C2 LVE \\<union> kdeps C2\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C1 (pre C2 Q) l s \\<and>\n       preList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        C1 l s}\n   strip C1\n   { time\n      C1 \\<Down> \\<lambda>l s.\n                    pre C2 Q l s \\<and>\n                    postList\n                     ((SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds,\n                       time C2, kdeps C2) #\n                      map (\\<lambda>a.\n                              case a of\n                              (x, e, v) \\<Rightarrow>\n                                (x, preT C2 e, fune C2 v))\n                       upds)\n                     l s} \\<and>\n                    (\\<forall>l s.\n                        pre C1 (pre C2 Q) l s \\<longrightarrow>\n                        pre C2 Q l (postQ C1 s)) \\<and>\n                    K4 ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds)\n                     (qdeps C2 LVQ) C1 (pre C2 Q)\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "note bla=1(2)[OF 1(11,3), THEN conjunct2, THEN conjunct2]"], ["proof (state)\nthis:\n  \\<lbrakk>lesvars ?upds2 \\<inter> varacom C2 = {};\n   distinct (map fst ?upds2);\n   \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on LVE \\<longrightarrow>\n      postList ?upds2 l s1 = postList ?upds2 l s2;\n   \\<forall>x\\<in>set ?upds2.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n   (\\<Union>x\\<in>set ?upds2. case x of (a, b, c) \\<Rightarrow> c)\n   \\<subseteq> LVE\\<rbrakk>\n  \\<Longrightarrow> K4 ?upds2 LVQ C2 Q\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "from 1(4)"], ["proof (chain)\npicking this:\n  lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {}", "have kal: \"lesvars upds \\<inter> varacom C2 = {}\""], ["proof (prove)\nusing this:\n  lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {}\n\ngoal (1 subgoal):\n 1. lesvars upds \\<inter> varacom C2 = {}", "by auto"], ["proof (state)\nthis:\n  lesvars upds \\<inter> varacom C2 = {}\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "from bla[OF kal Aseq.prems(4,6,7,8,9)]"], ["proof (chain)\npicking this:\n  K4 upds LVQ C2 Q", "have bla4: \"K4 upds LVQ C2 Q\""], ["proof (prove)\nusing this:\n  K4 upds LVQ C2 Q\n\ngoal (1 subgoal):\n 1. K4 upds LVQ C2 Q", "by auto"], ["proof (state)\nthis:\n  K4 upds LVQ C2 Q\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "then"], ["proof (chain)\npicking this:\n  K4 upds LVQ C2 Q", "have bla: \"K C2 LVQ Q\""], ["proof (prove)\nusing this:\n  K4 upds LVQ C2 Q\n\ngoal (1 subgoal):\n 1. K C2 LVQ Q", "unfolding K4_def"], ["proof (prove)\nusing this:\n  K C2 LVQ Q \\<and>\n  K3 upds C2 Q \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n\ngoal (1 subgoal):\n 1. K C2 LVQ Q", "by auto"], ["proof (state)\nthis:\n  K C2 LVQ Q\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "have A:  \n        \"\\<turnstile>\\<^sub>1 {\\<lambda>l s. pre C1 (pre C2 Q) l s \\<and> preList ?upds' C1 l s}\n      strip C1\n      { time C1 \\<Down> \\<lambda>l s. pre C2 Q l s \\<and> postList ?upds' l s} \\<and>\n  (\\<forall>l s. pre C1 (pre C2 Q) l s \\<longrightarrow> pre C2 Q l (postQ C1 s)) \\<and>  K4 ?upds' (qdeps C2 LVQ) C1 (pre C2 Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C1 (pre C2 Q) l s \\<and>\n                             preList\n                              ((SOME x.\n                                   x \\<notin> support Q \\<union>\n        varacom C1 \\<union>\n        varacom C2 \\<union>\n        lesvars upds,\n                                time C2, kdeps C2) #\n                               map (\\<lambda>a.\n case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n                                upds)\n                              C1 l s}\n                         strip C1\n                         { time\n                            C1 \\<Down> \\<lambda>l s.\n    pre C2 Q l s \\<and>\n    postList\n     ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n     l s} \\<and>\n    (\\<forall>l s.\n        pre C1 (pre C2 Q) l s \\<longrightarrow>\n        pre C2 Q l (postQ C1 s)) \\<and>\n    K4 ((SOME x.\n            x \\<notin> support Q \\<union> varacom C1 \\<union>\n                       varacom C2 \\<union>\n                       lesvars upds,\n         time C2, kdeps C2) #\n        map (\\<lambda>a.\n                case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n         upds)\n     (qdeps C2 LVQ) C1 (pre C2 Q)", "apply(rule 1(1)[where Q=\"pre C2 Q\" and upds=\"?upds'\", OF 1(10) G klar dmap])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n       pre C2 Q l s1 = pre C2 Q l s2\n 2. \\<forall>l s1 s2.\n       s1 = s2 on fune C2 LVE \\<union> kdeps C2 \\<longrightarrow>\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s1 =\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s2\n 3. \\<forall>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n 4. (\\<Union>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n        case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> fune C2 LVE \\<union> kdeps C2", "proof (goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n       pre C2 Q l s1 = pre C2 Q l s2\n 2. \\<forall>l s1 s2.\n       s1 = s2 on fune C2 LVE \\<union> kdeps C2 \\<longrightarrow>\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s1 =\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s2\n 3. \\<forall>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n 4. (\\<Union>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n        case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> fune C2 LVE \\<union> kdeps C2", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n       pre C2 Q l s1 = pre C2 Q l s2\n 2. \\<forall>l s1 s2.\n       s1 = s2 on fune C2 LVE \\<union> kdeps C2 \\<longrightarrow>\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s1 =\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s2\n 3. \\<forall>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n 4. (\\<Union>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n        case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> fune C2 LVE \\<union> kdeps C2", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n       pre C2 Q l s1 = pre C2 Q l s2", "using bla"], ["proof (prove)\nusing this:\n  K C2 LVQ Q\n\ngoal (1 subgoal):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n       pre C2 Q l s1 = pre C2 Q l s2", "unfolding K_def"], ["proof (prove)\nusing this:\n  \\<forall>l s1 s2.\n     s1 = s2 on qdeps C2 LVQ \\<longrightarrow> pre C2 Q l s1 = pre C2 Q l s2\n\ngoal (1 subgoal):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n       pre C2 Q l s1 = pre C2 Q l s2", "by auto"], ["proof (state)\nthis:\n  \\<forall>l s1 s2.\n     s1 = s2 on qdeps C2 LVQ \\<longrightarrow> pre C2 Q l s1 = pre C2 Q l s2\n\ngoal (3 subgoals):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on fune C2 LVE \\<union> kdeps C2 \\<longrightarrow>\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s1 =\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s2\n 2. \\<forall>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n 3. (\\<Union>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n        case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> fune C2 LVE \\<union> kdeps C2", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on fune C2 LVE \\<union> kdeps C2 \\<longrightarrow>\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s1 =\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s2\n 2. \\<forall>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n 3. (\\<Union>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n        case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> fune C2 LVE \\<union> kdeps C2", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on fune C2 LVE \\<union> kdeps C2 \\<longrightarrow>\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s1 =\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s2\n 2. \\<forall>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n 3. (\\<Union>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n        case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> fune C2 LVE \\<union> kdeps C2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on fune C2 LVE \\<union> kdeps C2 \\<longrightarrow>\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s1 =\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s2", "apply(rule,rule,rule,rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l s1 s2.\n       s1 = s2 on fune C2 LVE \\<union> kdeps C2 \\<Longrightarrow>\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s1 =\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s2", "proof (goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l s1 s2.\n       s1 = s2 on fune C2 LVE \\<union> kdeps C2 \\<Longrightarrow>\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s1 =\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s2", "case (1 l s1 s2)"], ["proof (state)\nthis:\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n\ngoal (1 subgoal):\n 1. \\<And>l s1 s2.\n       s1 = s2 on fune C2 LVE \\<union> kdeps C2 \\<Longrightarrow>\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s1 =\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s2", "then"], ["proof (chain)\npicking this:\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2", "show ?case"], ["proof (prove)\nusing this:\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n\ngoal (1 subgoal):\n 1. postList\n     ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n     l s1 =\n    postList\n     ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n     l s2", "using bla4"], ["proof (prove)\nusing this:\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n  K4 upds LVQ C2 Q\n\ngoal (1 subgoal):\n 1. postList\n     ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n     l s1 =\n    postList\n     ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n     l s2", "using Aseq.prems(9)"], ["proof (prove)\nusing this:\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n  K4 upds LVQ C2 Q\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. postList\n     ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n     l s1 =\n    postList\n     ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n     l s2", "unfolding K4_def K3_def K2_def"], ["proof (prove)\nusing this:\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n  K C2 LVQ Q \\<and>\n  (\\<forall>(a, b, c)\\<in>set upds.\n      \\<forall>s1 s2.\n         s1 = s2 on fune C2 c \\<longrightarrow>\n         preT C2 b s1 = preT C2 b s2) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. postList\n     ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n     l s1 =\n    postList\n     ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n     l s2", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n     K C2 LVQ Q \\<and>\n     (\\<forall>x\\<in>set upds.\n         case x of\n         (a, b, c) \\<Rightarrow>\n           \\<forall>s1 s2.\n              s1 = s2 on fune C2 c \\<longrightarrow>\n              preT C2 b s1 = preT C2 b s2) \\<and>\n     (\\<forall>s1 s2.\n         s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> (l (SOME x.\n                             x \\<notin> support Q \\<and>\n                             x \\<notin> varacom C1 \\<and>\n                             x \\<notin> varacom C2 \\<and>\n                             x \\<notin> lesvars upds) =\n                       time C2 s1 \\<and>\n                       postList\n                        (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                          upds)\n                        l s1) =\n                      (l (SOME x.\n                             x \\<notin> support Q \\<and>\n                             x \\<notin> varacom C1 \\<and>\n                             x \\<notin> varacom C2 \\<and>\n                             x \\<notin> lesvars upds) =\n                       time C2 s2 \\<and>\n                       postList\n                        (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                          upds)\n                        l s2)", "proof (goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n     K C2 LVQ Q \\<and>\n     (\\<forall>x\\<in>set upds.\n         case x of\n         (a, b, c) \\<Rightarrow>\n           \\<forall>s1 s2.\n              s1 = s2 on fune C2 c \\<longrightarrow>\n              preT C2 b s1 = preT C2 b s2) \\<and>\n     (\\<forall>s1 s2.\n         s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> (l (SOME x.\n                             x \\<notin> support Q \\<and>\n                             x \\<notin> varacom C1 \\<and>\n                             x \\<notin> varacom C2 \\<and>\n                             x \\<notin> lesvars upds) =\n                       time C2 s1 \\<and>\n                       postList\n                        (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                          upds)\n                        l s1) =\n                      (l (SOME x.\n                             x \\<notin> support Q \\<and>\n                             x \\<notin> varacom C1 \\<and>\n                             x \\<notin> varacom C2 \\<and>\n                             x \\<notin> lesvars upds) =\n                       time C2 s2 \\<and>\n                       postList\n                        (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                          upds)\n                        l s2)", "case 1"], ["proof (state)\nthis:\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n  K C2 LVQ Q \\<and>\n  (\\<forall>x\\<in>set upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2.\n           s1 = s2 on fune C2 c \\<longrightarrow>\n           preT C2 b s1 = preT C2 b s2) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n     K C2 LVQ Q \\<and>\n     (\\<forall>x\\<in>set upds.\n         case x of\n         (a, b, c) \\<Rightarrow>\n           \\<forall>s1 s2.\n              s1 = s2 on fune C2 c \\<longrightarrow>\n              preT C2 b s1 = preT C2 b s2) \\<and>\n     (\\<forall>s1 s2.\n         s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> (l (SOME x.\n                             x \\<notin> support Q \\<and>\n                             x \\<notin> varacom C1 \\<and>\n                             x \\<notin> varacom C2 \\<and>\n                             x \\<notin> lesvars upds) =\n                       time C2 s1 \\<and>\n                       postList\n                        (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                          upds)\n                        l s1) =\n                      (l (SOME x.\n                             x \\<notin> support Q \\<and>\n                             x \\<notin> varacom C1 \\<and>\n                             x \\<notin> varacom C2 \\<and>\n                             x \\<notin> lesvars upds) =\n                       time C2 s2 \\<and>\n                       postList\n                        (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                          upds)\n                        l s2)", "then"], ["proof (chain)\npicking this:\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n  K C2 LVQ Q \\<and>\n  (\\<forall>x\\<in>set upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2.\n           s1 = s2 on fune C2 c \\<longrightarrow>\n           preT C2 b s1 = preT C2 b s2) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE", "have t: \"time C2 s1 = time C2 s2\""], ["proof (prove)\nusing this:\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n  K C2 LVQ Q \\<and>\n  (\\<forall>x\\<in>set upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2.\n           s1 = s2 on fune C2 c \\<longrightarrow>\n           preT C2 b s1 = preT C2 b s2) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. time C2 s1 = time C2 s2", "by auto"], ["proof (state)\nthis:\n  time C2 s1 = time C2 s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n     K C2 LVQ Q \\<and>\n     (\\<forall>x\\<in>set upds.\n         case x of\n         (a, b, c) \\<Rightarrow>\n           \\<forall>s1 s2.\n              s1 = s2 on fune C2 c \\<longrightarrow>\n              preT C2 b s1 = preT C2 b s2) \\<and>\n     (\\<forall>s1 s2.\n         s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> (l (SOME x.\n                             x \\<notin> support Q \\<and>\n                             x \\<notin> varacom C1 \\<and>\n                             x \\<notin> varacom C2 \\<and>\n                             x \\<notin> lesvars upds) =\n                       time C2 s1 \\<and>\n                       postList\n                        (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                          upds)\n                        l s1) =\n                      (l (SOME x.\n                             x \\<notin> support Q \\<and>\n                             x \\<notin> varacom C1 \\<and>\n                             x \\<notin> varacom C2 \\<and>\n                             x \\<notin> lesvars upds) =\n                       time C2 s2 \\<and>\n                       postList\n                        (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                          upds)\n                        l s2)", "have post: \"postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l s1 = postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l s2\" (is \"?IH upds\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l\n     s1 =\n    postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l s2", "using 1"], ["proof (prove)\nusing this:\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n  K C2 LVQ Q \\<and>\n  (\\<forall>x\\<in>set upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2.\n           s1 = s2 on fune C2 c \\<longrightarrow>\n           preT C2 b s1 = preT C2 b s2) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l\n     s1 =\n    postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l s2", "proof (induct upds)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n     K C2 LVQ Q \\<and>\n     (\\<forall>(a, b, c)\\<in>set [].\n         \\<forall>s1 s2.\n            s1 = s2 on fune C2 c \\<longrightarrow>\n            preT C2 b s1 = preT C2 b s2) \\<and>\n     (\\<forall>s1 s2.\n         s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n     (\\<Union>(a, b, c)\\<in>set []. c) \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> postList\n                       (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                         [])\n                       l s1 =\n                      postList\n                       (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                         [])\n                       l s2\n 2. \\<And>a upds.\n       \\<lbrakk>\\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n                 K C2 LVQ Q \\<and>\n                 (\\<forall>(a, b, c)\\<in>set upds.\n                     \\<forall>s1 s2.\n                        s1 = s2 on fune C2 c \\<longrightarrow>\n                        preT C2 b s1 = preT C2 b s2) \\<and>\n                 (\\<forall>s1 s2.\n                     s1 = s2 on kdeps C2 \\<longrightarrow>\n                     time C2 s1 = time C2 s2);\n                 (\\<Union>(a, b, c)\\<in>set upds. c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, preT C2 e, fune C2 v))\n                                     upds)\n                                   l s1 =\n                                  postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, preT C2 e, fune C2 v))\n                                     upds)\n                                   l s2;\n        s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n        K C2 LVQ Q \\<and>\n        (\\<forall>(a, b, c)\\<in>set (a # upds).\n            \\<forall>s1 s2.\n               s1 = s2 on fune C2 c \\<longrightarrow>\n               preT C2 b s1 = preT C2 b s2) \\<and>\n        (\\<forall>s1 s2.\n            s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n        (\\<Union>(a, b, c)\\<in>set (a # upds). c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, preT C2 e, fune C2 v))\n                            (a # upds))\n                          l s1 =\n                         postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, preT C2 e, fune C2 v))\n                            (a # upds))\n                          l s2", "case (Cons a upds)"], ["proof (state)\nthis:\n  \\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n   K C2 LVQ Q \\<and>\n   (\\<forall>a\\<in>set upds.\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2.\n            s1 = s2 on fune C2 c \\<longrightarrow>\n            preT C2 ba s1 = preT C2 ba s2) \\<and>\n   (\\<forall>s1 s2.\n       s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n   (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> LVE\\<rbrakk>\n  \\<Longrightarrow> postList\n                     (map (\\<lambda>a.\n                              case a of\n                              (x, e, v) \\<Rightarrow>\n                                (x, preT C2 e, fune C2 v))\n                       upds)\n                     l s1 =\n                    postList\n                     (map (\\<lambda>a.\n                              case a of\n                              (x, e, v) \\<Rightarrow>\n                                (x, preT C2 e, fune C2 v))\n                       upds)\n                     l s2\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n  K C2 LVQ Q \\<and>\n  (\\<forall>a\\<in>set (a # upds).\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2.\n           s1 = s2 on fune C2 c \\<longrightarrow>\n           preT C2 ba s1 = preT C2 ba s2) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n  (\\<Union>a\\<in>set (a # upds). case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n     K C2 LVQ Q \\<and>\n     (\\<forall>(a, b, c)\\<in>set [].\n         \\<forall>s1 s2.\n            s1 = s2 on fune C2 c \\<longrightarrow>\n            preT C2 b s1 = preT C2 b s2) \\<and>\n     (\\<forall>s1 s2.\n         s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n     (\\<Union>(a, b, c)\\<in>set []. c) \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> postList\n                       (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                         [])\n                       l s1 =\n                      postList\n                       (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                         [])\n                       l s2\n 2. \\<And>a upds.\n       \\<lbrakk>\\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n                 K C2 LVQ Q \\<and>\n                 (\\<forall>(a, b, c)\\<in>set upds.\n                     \\<forall>s1 s2.\n                        s1 = s2 on fune C2 c \\<longrightarrow>\n                        preT C2 b s1 = preT C2 b s2) \\<and>\n                 (\\<forall>s1 s2.\n                     s1 = s2 on kdeps C2 \\<longrightarrow>\n                     time C2 s1 = time C2 s2);\n                 (\\<Union>(a, b, c)\\<in>set upds. c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, preT C2 e, fune C2 v))\n                                     upds)\n                                   l s1 =\n                                  postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, preT C2 e, fune C2 v))\n                                     upds)\n                                   l s2;\n        s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n        K C2 LVQ Q \\<and>\n        (\\<forall>(a, b, c)\\<in>set (a # upds).\n            \\<forall>s1 s2.\n               s1 = s2 on fune C2 c \\<longrightarrow>\n               preT C2 b s1 = preT C2 b s2) \\<and>\n        (\\<forall>s1 s2.\n            s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n        (\\<Union>(a, b, c)\\<in>set (a # upds). c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, preT C2 e, fune C2 v))\n                            (a # upds))\n                          l s1 =\n                         postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, preT C2 e, fune C2 v))\n                            (a # upds))\n                          l s2", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n   K C2 LVQ Q \\<and>\n   (\\<forall>a\\<in>set upds.\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2.\n            s1 = s2 on fune C2 c \\<longrightarrow>\n            preT C2 ba s1 = preT C2 ba s2) \\<and>\n   (\\<forall>s1 s2.\n       s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n   (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> LVE\\<rbrakk>\n  \\<Longrightarrow> postList\n                     (map (\\<lambda>a.\n                              case a of\n                              (x, e, v) \\<Rightarrow>\n                                (x, preT C2 e, fune C2 v))\n                       upds)\n                     l s1 =\n                    postList\n                     (map (\\<lambda>a.\n                              case a of\n                              (x, e, v) \\<Rightarrow>\n                                (x, preT C2 e, fune C2 v))\n                       upds)\n                     l s2\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n  K C2 LVQ Q \\<and>\n  (\\<forall>a\\<in>set (a # upds).\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2.\n           s1 = s2 on fune C2 c \\<longrightarrow>\n           preT C2 ba s1 = preT C2 ba s2) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n  (\\<Union>a\\<in>set (a # upds). case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE", "have IH: \"?IH upds\""], ["proof (prove)\nusing this:\n  \\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n   K C2 LVQ Q \\<and>\n   (\\<forall>a\\<in>set upds.\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2.\n            s1 = s2 on fune C2 c \\<longrightarrow>\n            preT C2 ba s1 = preT C2 ba s2) \\<and>\n   (\\<forall>s1 s2.\n       s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n   (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> LVE\\<rbrakk>\n  \\<Longrightarrow> postList\n                     (map (\\<lambda>a.\n                              case a of\n                              (x, e, v) \\<Rightarrow>\n                                (x, preT C2 e, fune C2 v))\n                       upds)\n                     l s1 =\n                    postList\n                     (map (\\<lambda>a.\n                              case a of\n                              (x, e, v) \\<Rightarrow>\n                                (x, preT C2 e, fune C2 v))\n                       upds)\n                     l s2\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n  K C2 LVQ Q \\<and>\n  (\\<forall>a\\<in>set (a # upds).\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2.\n           s1 = s2 on fune C2 c \\<longrightarrow>\n           preT C2 ba s1 = preT C2 ba s2) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n  (\\<Union>a\\<in>set (a # upds). case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. postList\n     (map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n     l s1 =\n    postList\n     (map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n     l s2", "by auto"], ["proof (state)\nthis:\n  postList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     upds)\n   l s1 =\n  postList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     upds)\n   l s2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n     K C2 LVQ Q \\<and>\n     (\\<forall>(a, b, c)\\<in>set [].\n         \\<forall>s1 s2.\n            s1 = s2 on fune C2 c \\<longrightarrow>\n            preT C2 b s1 = preT C2 b s2) \\<and>\n     (\\<forall>s1 s2.\n         s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n     (\\<Union>(a, b, c)\\<in>set []. c) \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> postList\n                       (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                         [])\n                       l s1 =\n                      postList\n                       (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                         [])\n                       l s2\n 2. \\<And>a upds.\n       \\<lbrakk>\\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n                 K C2 LVQ Q \\<and>\n                 (\\<forall>(a, b, c)\\<in>set upds.\n                     \\<forall>s1 s2.\n                        s1 = s2 on fune C2 c \\<longrightarrow>\n                        preT C2 b s1 = preT C2 b s2) \\<and>\n                 (\\<forall>s1 s2.\n                     s1 = s2 on kdeps C2 \\<longrightarrow>\n                     time C2 s1 = time C2 s2);\n                 (\\<Union>(a, b, c)\\<in>set upds. c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, preT C2 e, fune C2 v))\n                                     upds)\n                                   l s1 =\n                                  postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, preT C2 e, fune C2 v))\n                                     upds)\n                                   l s2;\n        s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n        K C2 LVQ Q \\<and>\n        (\\<forall>(a, b, c)\\<in>set (a # upds).\n            \\<forall>s1 s2.\n               s1 = s2 on fune C2 c \\<longrightarrow>\n               preT C2 b s1 = preT C2 b s2) \\<and>\n        (\\<forall>s1 s2.\n            s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n        (\\<Union>(a, b, c)\\<in>set (a # upds). c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, preT C2 e, fune C2 v))\n                            (a # upds))\n                          l s1 =\n                         postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, preT C2 e, fune C2 v))\n                            (a # upds))\n                          l s2", "obtain x e v where a: \"a = (x,e,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x e v. a = (x, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x e v. a = (x, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = (x, e, v)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n     K C2 LVQ Q \\<and>\n     (\\<forall>(a, b, c)\\<in>set [].\n         \\<forall>s1 s2.\n            s1 = s2 on fune C2 c \\<longrightarrow>\n            preT C2 b s1 = preT C2 b s2) \\<and>\n     (\\<forall>s1 s2.\n         s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n     (\\<Union>(a, b, c)\\<in>set []. c) \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> postList\n                       (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                         [])\n                       l s1 =\n                      postList\n                       (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                         [])\n                       l s2\n 2. \\<And>a upds.\n       \\<lbrakk>\\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n                 K C2 LVQ Q \\<and>\n                 (\\<forall>(a, b, c)\\<in>set upds.\n                     \\<forall>s1 s2.\n                        s1 = s2 on fune C2 c \\<longrightarrow>\n                        preT C2 b s1 = preT C2 b s2) \\<and>\n                 (\\<forall>s1 s2.\n                     s1 = s2 on kdeps C2 \\<longrightarrow>\n                     time C2 s1 = time C2 s2);\n                 (\\<Union>(a, b, c)\\<in>set upds. c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, preT C2 e, fune C2 v))\n                                     upds)\n                                   l s1 =\n                                  postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, preT C2 e, fune C2 v))\n                                     upds)\n                                   l s2;\n        s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n        K C2 LVQ Q \\<and>\n        (\\<forall>(a, b, c)\\<in>set (a # upds).\n            \\<forall>s1 s2.\n               s1 = s2 on fune C2 c \\<longrightarrow>\n               preT C2 b s1 = preT C2 b s2) \\<and>\n        (\\<forall>s1 s2.\n            s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n        (\\<Union>(a, b, c)\\<in>set (a # upds). c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, preT C2 e, fune C2 v))\n                            (a # upds))\n                          l s1 =\n                         postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, preT C2 e, fune C2 v))\n                            (a # upds))\n                          l s2", "from Cons(4)"], ["proof (chain)\npicking this:\n  (\\<Union>a\\<in>set (a # upds). case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE", "have \"v \\<subseteq> LVE\""], ["proof (prove)\nusing this:\n  (\\<Union>a\\<in>set (a # upds). case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. v \\<subseteq> LVE", "unfolding a"], ["proof (prove)\nusing this:\n  (\\<Union>a\\<in>set ((x, e, v) # upds).\n      case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. v \\<subseteq> LVE", "by auto"], ["proof (state)\nthis:\n  v \\<subseteq> LVE\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n     K C2 LVQ Q \\<and>\n     (\\<forall>(a, b, c)\\<in>set [].\n         \\<forall>s1 s2.\n            s1 = s2 on fune C2 c \\<longrightarrow>\n            preT C2 b s1 = preT C2 b s2) \\<and>\n     (\\<forall>s1 s2.\n         s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n     (\\<Union>(a, b, c)\\<in>set []. c) \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> postList\n                       (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                         [])\n                       l s1 =\n                      postList\n                       (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                         [])\n                       l s2\n 2. \\<And>a upds.\n       \\<lbrakk>\\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n                 K C2 LVQ Q \\<and>\n                 (\\<forall>(a, b, c)\\<in>set upds.\n                     \\<forall>s1 s2.\n                        s1 = s2 on fune C2 c \\<longrightarrow>\n                        preT C2 b s1 = preT C2 b s2) \\<and>\n                 (\\<forall>s1 s2.\n                     s1 = s2 on kdeps C2 \\<longrightarrow>\n                     time C2 s1 = time C2 s2);\n                 (\\<Union>(a, b, c)\\<in>set upds. c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, preT C2 e, fune C2 v))\n                                     upds)\n                                   l s1 =\n                                  postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, preT C2 e, fune C2 v))\n                                     upds)\n                                   l s2;\n        s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n        K C2 LVQ Q \\<and>\n        (\\<forall>(a, b, c)\\<in>set (a # upds).\n            \\<forall>s1 s2.\n               s1 = s2 on fune C2 c \\<longrightarrow>\n               preT C2 b s1 = preT C2 b s2) \\<and>\n        (\\<forall>s1 s2.\n            s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n        (\\<Union>(a, b, c)\\<in>set (a # upds). c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, preT C2 e, fune C2 v))\n                            (a # upds))\n                          l s1 =\n                         postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, preT C2 e, fune C2 v))\n                            (a # upds))\n                          l s2", "with Cons(2)"], ["proof (chain)\npicking this:\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n  v \\<subseteq> LVE", "have s12v: \"s1 = s2 on fune C2 v\""], ["proof (prove)\nusing this:\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n  v \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. s1 = s2 on fune C2 v", "unfolding a"], ["proof (prove)\nusing this:\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n  v \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. s1 = s2 on fune C2 v", "using fune_mono"], ["proof (prove)\nusing this:\n  s1 = s2 on fune C2 LVE \\<union> kdeps C2\n  v \\<subseteq> LVE\n  ?A \\<subseteq> ?B \\<Longrightarrow> fune ?C ?A \\<subseteq> fune ?C ?B\n\ngoal (1 subgoal):\n 1. s1 = s2 on fune C2 v", "by blast"], ["proof (state)\nthis:\n  s1 = s2 on fune C2 v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n     K C2 LVQ Q \\<and>\n     (\\<forall>(a, b, c)\\<in>set [].\n         \\<forall>s1 s2.\n            s1 = s2 on fune C2 c \\<longrightarrow>\n            preT C2 b s1 = preT C2 b s2) \\<and>\n     (\\<forall>s1 s2.\n         s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n     (\\<Union>(a, b, c)\\<in>set []. c) \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> postList\n                       (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                         [])\n                       l s1 =\n                      postList\n                       (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                         [])\n                       l s2\n 2. \\<And>a upds.\n       \\<lbrakk>\\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n                 K C2 LVQ Q \\<and>\n                 (\\<forall>(a, b, c)\\<in>set upds.\n                     \\<forall>s1 s2.\n                        s1 = s2 on fune C2 c \\<longrightarrow>\n                        preT C2 b s1 = preT C2 b s2) \\<and>\n                 (\\<forall>s1 s2.\n                     s1 = s2 on kdeps C2 \\<longrightarrow>\n                     time C2 s1 = time C2 s2);\n                 (\\<Union>(a, b, c)\\<in>set upds. c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, preT C2 e, fune C2 v))\n                                     upds)\n                                   l s1 =\n                                  postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, preT C2 e, fune C2 v))\n                                     upds)\n                                   l s2;\n        s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n        K C2 LVQ Q \\<and>\n        (\\<forall>(a, b, c)\\<in>set (a # upds).\n            \\<forall>s1 s2.\n               s1 = s2 on fune C2 c \\<longrightarrow>\n               preT C2 b s1 = preT C2 b s2) \\<and>\n        (\\<forall>s1 s2.\n            s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n        (\\<Union>(a, b, c)\\<in>set (a # upds). c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, preT C2 e, fune C2 v))\n                            (a # upds))\n                          l s1 =\n                         postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, preT C2 e, fune C2 v))\n                            (a # upds))\n                          l s2", "with Cons(3) IH a"], ["proof (chain)\npicking this:\n  K C2 LVQ Q \\<and>\n  (\\<forall>a\\<in>set (a # upds).\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2.\n           s1 = s2 on fune C2 c \\<longrightarrow>\n           preT C2 ba s1 = preT C2 ba s2) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n  postList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     upds)\n   l s1 =\n  postList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     upds)\n   l s2\n  a = (x, e, v)\n  s1 = s2 on fune C2 v", "show ?case"], ["proof (prove)\nusing this:\n  K C2 LVQ Q \\<and>\n  (\\<forall>a\\<in>set (a # upds).\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2.\n           s1 = s2 on fune C2 c \\<longrightarrow>\n           preT C2 ba s1 = preT C2 ba s2) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n  postList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     upds)\n   l s1 =\n  postList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     upds)\n   l s2\n  a = (x, e, v)\n  s1 = s2 on fune C2 v\n\ngoal (1 subgoal):\n 1. postList\n     (map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       (a # upds))\n     l s1 =\n    postList\n     (map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       (a # upds))\n     l s2", "by auto"], ["proof (state)\nthis:\n  postList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     (a # upds))\n   l s1 =\n  postList\n   (map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     (a # upds))\n   l s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n     K C2 LVQ Q \\<and>\n     (\\<forall>(a, b, c)\\<in>set [].\n         \\<forall>s1 s2.\n            s1 = s2 on fune C2 c \\<longrightarrow>\n            preT C2 b s1 = preT C2 b s2) \\<and>\n     (\\<forall>s1 s2.\n         s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n     (\\<Union>(a, b, c)\\<in>set []. c) \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> postList\n                       (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                         [])\n                       l s1 =\n                      postList\n                       (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                         [])\n                       l s2", "qed auto"], ["proof (state)\nthis:\n  postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l s1 =\n  postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = s2 on fune C2 LVE \\<union> kdeps C2;\n     K C2 LVQ Q \\<and>\n     (\\<forall>x\\<in>set upds.\n         case x of\n         (a, b, c) \\<Rightarrow>\n           \\<forall>s1 s2.\n              s1 = s2 on fune C2 c \\<longrightarrow>\n              preT C2 b s1 = preT C2 b s2) \\<and>\n     (\\<forall>s1 s2.\n         s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2);\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE\\<rbrakk>\n    \\<Longrightarrow> (l (SOME x.\n                             x \\<notin> support Q \\<and>\n                             x \\<notin> varacom C1 \\<and>\n                             x \\<notin> varacom C2 \\<and>\n                             x \\<notin> lesvars upds) =\n                       time C2 s1 \\<and>\n                       postList\n                        (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                          upds)\n                        l s1) =\n                      (l (SOME x.\n                             x \\<notin> support Q \\<and>\n                             x \\<notin> varacom C1 \\<and>\n                             x \\<notin> varacom C2 \\<and>\n                             x \\<notin> lesvars upds) =\n                       time C2 s2 \\<and>\n                       postList\n                        (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                          upds)\n                        l s2)", "from post t"], ["proof (chain)\npicking this:\n  postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l s1 =\n  postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l s2\n  time C2 s1 = time C2 s2", "show ?case"], ["proof (prove)\nusing this:\n  postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l s1 =\n  postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l s2\n  time C2 s1 = time C2 s2\n\ngoal (1 subgoal):\n 1. (l (SOME x.\n           x \\<notin> support Q \\<and>\n           x \\<notin> varacom C1 \\<and>\n           x \\<notin> varacom C2 \\<and> x \\<notin> lesvars upds) =\n     time C2 s1 \\<and>\n     postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l\n      s1) =\n    (l (SOME x.\n           x \\<notin> support Q \\<and>\n           x \\<notin> varacom C1 \\<and>\n           x \\<notin> varacom C2 \\<and> x \\<notin> lesvars upds) =\n     time C2 s2 \\<and>\n     postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l\n      s2)", "by auto"], ["proof (state)\nthis:\n  (l (SOME x.\n         x \\<notin> support Q \\<and>\n         x \\<notin> varacom C1 \\<and>\n         x \\<notin> varacom C2 \\<and> x \\<notin> lesvars upds) =\n   time C2 s1 \\<and>\n   postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l\n    s1) =\n  (l (SOME x.\n         x \\<notin> support Q \\<and>\n         x \\<notin> varacom C1 \\<and>\n         x \\<notin> varacom C2 \\<and> x \\<notin> lesvars upds) =\n   time C2 s2 \\<and>\n   postList (map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds) l s2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  postList\n   ((SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds,\n     time C2, kdeps C2) #\n    map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     upds)\n   l s1 =\n  postList\n   ((SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds,\n     time C2, kdeps C2) #\n    map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     upds)\n   l s2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>l s1 s2.\n     s1 = s2 on fune C2 LVE \\<union> kdeps C2 \\<longrightarrow>\n     postList\n      ((SOME x.\n           x \\<notin> support Q \\<union> varacom C1 \\<union>\n                      varacom C2 \\<union>\n                      lesvars upds,\n        time C2, kdeps C2) #\n       map (\\<lambda>a.\n               case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n        upds)\n      l s1 =\n     postList\n      ((SOME x.\n           x \\<notin> support Q \\<union> varacom C1 \\<union>\n                      varacom C2 \\<union>\n                      lesvars upds,\n        time C2, kdeps C2) #\n       map (\\<lambda>a.\n               case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n        upds)\n      l s2\n\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n 2. (\\<Union>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n        case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> fune C2 LVE \\<union> kdeps C2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n 2. (\\<Union>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n        case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> fune C2 LVE \\<union> kdeps C2", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n 2. (\\<Union>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n        case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> fune C2 LVE \\<union> kdeps C2", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2", "using bla4"], ["proof (prove)\nusing this:\n  K4 upds LVQ C2 Q\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2", "unfolding K4_def K3_def K2_def"], ["proof (prove)\nusing this:\n  K C2 LVQ Q \\<and>\n  (\\<forall>(a, b, c)\\<in>set upds.\n      \\<forall>s1 s2.\n         s1 = s2 on fune C2 c \\<longrightarrow>\n         preT C2 b s1 = preT C2 b s2) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2", "by(auto)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set ((SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds,\n                       time C2, kdeps C2) #\n                      map (\\<lambda>a.\n                              case a of\n                              (x, e, v) \\<Rightarrow>\n                                (x, preT C2 e, fune C2 v))\n                       upds).\n     case x of\n     (a, b, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n        case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> fune C2 LVE \\<union> kdeps C2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n        case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> fune C2 LVE \\<union> kdeps C2", "case 4"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n        case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> fune C2 LVE \\<union> kdeps C2", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>set ((SOME x.\n                            x \\<notin> support Q \\<union>\n varacom C1 \\<union>\n varacom C2 \\<union>\n lesvars upds,\n                         time C2, kdeps C2) #\n                        map (\\<lambda>a.\n                                case a of\n                                (x, e, v) \\<Rightarrow>\n                                  (x, preT C2 e, fune C2 v))\n                         upds).\n        case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> fune C2 LVE \\<union> kdeps C2", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a aa b.\n       \\<lbrakk>(a, aa, b) \\<in> set upds; x \\<in> fune C2 b;\n        x \\<notin> kdeps C2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fune C2 LVE", "proof (goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a aa b.\n       \\<lbrakk>(a, aa, b) \\<in> set upds; x \\<in> fune C2 b;\n        x \\<notin> kdeps C2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fune C2 LVE", "case (1 x a aa b)"], ["proof (state)\nthis:\n  (a, aa, b) \\<in> set upds\n  x \\<in> fune C2 b\n  x \\<notin> kdeps C2\n\ngoal (1 subgoal):\n 1. \\<And>x a aa b.\n       \\<lbrakk>(a, aa, b) \\<in> set upds; x \\<in> fune C2 b;\n        x \\<notin> kdeps C2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fune C2 LVE", "with Aseq.prems(9)"], ["proof (chain)\npicking this:\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  (a, aa, b) \\<in> set upds\n  x \\<in> fune C2 b\n  x \\<notin> kdeps C2", "have \"b \\<subseteq> LVE\""], ["proof (prove)\nusing this:\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  (a, aa, b) \\<in> set upds\n  x \\<in> fune C2 b\n  x \\<notin> kdeps C2\n\ngoal (1 subgoal):\n 1. b \\<subseteq> LVE", "by auto"], ["proof (state)\nthis:\n  b \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. \\<And>x a aa b.\n       \\<lbrakk>(a, aa, b) \\<in> set upds; x \\<in> fune C2 b;\n        x \\<notin> kdeps C2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fune C2 LVE", "with fune_mono"], ["proof (chain)\npicking this:\n  ?A \\<subseteq> ?B \\<Longrightarrow> fune ?C ?A \\<subseteq> fune ?C ?B\n  b \\<subseteq> LVE", "have \"fune C2 b \\<subseteq> fune C2 LVE\""], ["proof (prove)\nusing this:\n  ?A \\<subseteq> ?B \\<Longrightarrow> fune ?C ?A \\<subseteq> fune ?C ?B\n  b \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. fune C2 b \\<subseteq> fune C2 LVE", "by auto"], ["proof (state)\nthis:\n  fune C2 b \\<subseteq> fune C2 LVE\n\ngoal (1 subgoal):\n 1. \\<And>x a aa b.\n       \\<lbrakk>(a, aa, b) \\<in> set upds; x \\<in> fune C2 b;\n        x \\<notin> kdeps C2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fune C2 LVE", "with 1"], ["proof (chain)\npicking this:\n  (a, aa, b) \\<in> set upds\n  x \\<in> fune C2 b\n  x \\<notin> kdeps C2\n  fune C2 b \\<subseteq> fune C2 LVE", "show ?case"], ["proof (prove)\nusing this:\n  (a, aa, b) \\<in> set upds\n  x \\<in> fune C2 b\n  x \\<notin> kdeps C2\n  fune C2 b \\<subseteq> fune C2 LVE\n\ngoal (1 subgoal):\n 1. x \\<in> fune C2 LVE", "by blast"], ["proof (state)\nthis:\n  x \\<in> fune C2 LVE\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>set ((SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds,\n                       time C2, kdeps C2) #\n                      map (\\<lambda>a.\n                              case a of\n                              (x, e, v) \\<Rightarrow>\n                                (x, preT C2 e, fune C2 v))\n                       upds).\n      case x of (a, b, c) \\<Rightarrow> c)\n  \\<subseteq> fune C2 LVE \\<union> kdeps C2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           pre C1 (pre C2 Q) l s \\<and>\n                           preList\n                            ((SOME x.\n                                 x \\<notin> support Q \\<union>\n      varacom C1 \\<union>\n      varacom C2 \\<union>\n      lesvars upds,\n                              time C2, kdeps C2) #\n                             map (\\<lambda>a.\n                                     case a of\n                                     (x, e, v) \\<Rightarrow>\n (x, preT C2 e, fune C2 v))\n                              upds)\n                            C1 l s}\n                       strip C1\n                       { time\n                          C1 \\<Down> \\<lambda>l s.\n  pre C2 Q l s \\<and>\n  postList\n   ((SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds,\n     time C2, kdeps C2) #\n    map (\\<lambda>a.\n            case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n     upds)\n   l s} \\<and>\n  (\\<forall>l s.\n      pre C1 (pre C2 Q) l s \\<longrightarrow>\n      pre C2 Q l (postQ C1 s)) \\<and>\n  K4 ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n   (qdeps C2 LVQ) C1 (pre C2 Q)\n\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n         (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n         l ?x20 = preT C1 (time C2) s}\n     strip C1\n     { time\n        C1 \\<Down> \\<lambda>l s.\n                      (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n                      time C2 s \\<le> l ?x20}\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 3. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> ?x20\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 4. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 5. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "show \" \\<turnstile>\\<^sub>1 {\\<lambda>l s. (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and> l ?y = preT C1 (time C2) s} strip C1\n         { time C1 \\<Down> \\<lambda>l s. (pre C2 Q l s \\<and> preList upds C2 l s) \\<and> time C2 s \\<le> l ?y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             (pre C1 (pre C2 Q) l s \\<and>\n                              preList upds (C1;; C2) l s) \\<and>\n                             l (SOME x.\n                                   x \\<notin> support Q \\<union>\n        varacom C1 \\<union>\n        varacom C2 \\<union>\n        lesvars upds) =\n                             preT C1 (time C2) s}\n                         strip C1\n                         { time\n                            C1 \\<Down> \\<lambda>l s.\n    (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n    time C2 s\n    \\<le> l (SOME x.\n                x \\<notin> support Q \\<union> varacom C1 \\<union>\n                           varacom C2 \\<union>\n                           lesvars upds)}", "apply(rule conseq_old)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n          l (SOME x.\n                x \\<notin> support Q \\<union> varacom C1 \\<union>\n                           varacom C2 \\<union>\n                           lesvars upds) =\n          preT C1 (time C2) s \\<longrightarrow>\n          ?P l s \\<and> ?e' s \\<le> k * time C1 s\n 2. \\<turnstile>\\<^sub>1 {?P} strip C1 { ?e' \\<Down> ?Q}\n 3. \\<forall>l s.\n       ?Q l s \\<longrightarrow>\n       (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n       time C2 s\n       \\<le> l (SOME x.\n                   x \\<notin> support Q \\<union> varacom C1 \\<union>\n                              varacom C2 \\<union>\n                              lesvars upds)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {?P} strip C1 { ?e' \\<Down> ?Q}\n 2. \\<exists>k>0.\n       \\<forall>l s.\n          (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n          l (SOME x.\n                x \\<notin> support Q \\<union> varacom C1 \\<union>\n                           varacom C2 \\<union>\n                           lesvars upds) =\n          preT C1 (time C2) s \\<longrightarrow>\n          ?P l s \\<and> ?e' s \\<le> k * time C1 s\n 3. \\<forall>l s.\n       ?Q l s \\<longrightarrow>\n       (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n       time C2 s\n       \\<le> l (SOME x.\n                   x \\<notin> support Q \\<union> varacom C1 \\<union>\n                              varacom C2 \\<union>\n                              lesvars upds)", "apply(rule A[THEN conjunct1])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          (pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s) \\<and>\n          l (SOME x.\n                x \\<notin> support Q \\<union> varacom C1 \\<union>\n                           varacom C2 \\<union>\n                           lesvars upds) =\n          preT C1 (time C2) s \\<longrightarrow>\n          (pre C1 (pre C2 Q) l s \\<and>\n           preList\n            ((SOME x.\n                 x \\<notin> support Q \\<union> varacom C1 \\<union>\n                            varacom C2 \\<union>\n                            lesvars upds,\n              time C2, kdeps C2) #\n             map (\\<lambda>a.\n                     case a of\n                     (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n              upds)\n            C1 l s) \\<and>\n          time C1 s \\<le> k * time C1 s\n 2. \\<forall>l s.\n       pre C2 Q l s \\<and>\n       postList\n        ((SOME x.\n             x \\<notin> support Q \\<union> varacom C1 \\<union>\n                        varacom C2 \\<union>\n                        lesvars upds,\n          time C2, kdeps C2) #\n         map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n          upds)\n        l s \\<longrightarrow>\n       (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n       time C2 s\n       \\<le> l (SOME x.\n                   x \\<notin> support Q \\<union> varacom C1 \\<union>\n                              varacom C2 \\<union>\n                              lesvars upds)", "apply(auto simp: preList_Seq postList_preList)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           (pre C1 (pre C2 Q) l s \\<and>\n                            preList upds (C1;; C2) l s) \\<and>\n                           l (SOME x.\n                                 x \\<notin> support Q \\<union>\n      varacom C1 \\<union>\n      varacom C2 \\<union>\n      lesvars upds) =\n                           preT C1 (time C2) s}\n                       strip C1\n                       { time\n                          C1 \\<Down> \\<lambda>l s.\n  (pre C2 Q l s \\<and> preList upds C2 l s) \\<and>\n  time C2 s\n  \\<le> l (SOME x.\n              x \\<notin> support Q \\<union> varacom C1 \\<union>\n                         varacom C2 \\<union>\n                         lesvars upds)}\n\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds)\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds)\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 3. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 4. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "from A[THEN conjunct2, THEN conjunct2]"], ["proof (chain)\npicking this:\n  K4 ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n   (qdeps C2 LVQ) C1 (pre C2 Q)", "have A1: \"K C1 (qdeps C2 LVQ) (pre C2 Q)\" \n            and A2: \"K3 ?upds' C1 (pre C2 Q)\"  and A3: \"(\\<forall>s1 s2. s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2)\""], ["proof (prove)\nusing this:\n  K4 ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n   (qdeps C2 LVQ) C1 (pre C2 Q)\n\ngoal (1 subgoal):\n 1. K C1 (qdeps C2 LVQ) (pre C2 Q) &&&\n    K3 ((SOME x.\n            x \\<notin> support Q \\<union> varacom C1 \\<union>\n                       varacom C2 \\<union>\n                       lesvars upds,\n         time C2, kdeps C2) #\n        map (\\<lambda>a.\n                case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n         upds)\n     C1 (pre C2 Q) &&&\n    \\<forall>s1 s2.\n       s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2", "unfolding K4_def"], ["proof (prove)\nusing this:\n  K C1 (qdeps C2 LVQ) (pre C2 Q) \\<and>\n  K3 ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v)) upds)\n   C1 (pre C2 Q) \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2)\n\ngoal (1 subgoal):\n 1. K C1 (qdeps C2 LVQ) (pre C2 Q) &&&\n    K3 ((SOME x.\n            x \\<notin> support Q \\<union> varacom C1 \\<union>\n                       varacom C2 \\<union>\n                       lesvars upds,\n         time C2, kdeps C2) #\n        map (\\<lambda>a.\n                case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n         upds)\n     C1 (pre C2 Q) &&&\n    \\<forall>s1 s2.\n       s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2", "by auto"], ["proof (state)\nthis:\n  K C1 (qdeps C2 LVQ) (pre C2 Q)\n  K3 ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n   C1 (pre C2 Q)\n  \\<forall>s1 s2.\n     s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2\n\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds)\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds)\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 3. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 4. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "from bla4"], ["proof (chain)\npicking this:\n  K4 upds LVQ C2 Q", "have B1: \"K C2 LVQ Q\" and B2: \"K3 upds C2 Q\" and B3: \"(\\<forall>s1 s2. s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\""], ["proof (prove)\nusing this:\n  K4 upds LVQ C2 Q\n\ngoal (1 subgoal):\n 1. K C2 LVQ Q &&&\n    K3 upds C2 Q &&&\n    \\<forall>s1 s2.\n       s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2", "unfolding K4_def"], ["proof (prove)\nusing this:\n  K C2 LVQ Q \\<and>\n  K3 upds C2 Q \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n\ngoal (1 subgoal):\n 1. K C2 LVQ Q &&&\n    K3 upds C2 Q &&&\n    \\<forall>s1 s2.\n       s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2", "by auto"], ["proof (state)\nthis:\n  K C2 LVQ Q\n  K3 upds C2 Q\n  \\<forall>s1 s2.\n     s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2\n\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds)\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds)\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 3. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))\n 4. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> K4 upds LVQ (C1;; C2) Q", "show \"K4 upds LVQ (C1;; C2) Q \""], ["proof (prove)\ngoal (1 subgoal):\n 1. K4 upds LVQ (C1;; C2) Q", "unfolding K4_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. K (C1;; C2) LVQ Q \\<and>\n    K3 upds (C1;; C2) Q \\<and>\n    (\\<forall>s1 s2.\n        s1 = s2 on kdeps (C1;; C2) \\<longrightarrow>\n        time (C1;; C2) s1 = time (C1;; C2) s2)", "apply(safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. K (C1;; C2) LVQ Q\n 2. K3 upds (C1;; C2) Q\n 3. \\<And>s1 s2.\n       s1 = s2 on kdeps (C1;; C2) \\<Longrightarrow>\n       time (C1;; C2) s1 = time (C1;; C2) s2", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. K (C1;; C2) LVQ Q", "using A1 B1"], ["proof (prove)\nusing this:\n  K C1 (qdeps C2 LVQ) (pre C2 Q)\n  K C2 LVQ Q\n\ngoal (1 subgoal):\n 1. K (C1;; C2) LVQ Q", "unfolding K_def"], ["proof (prove)\nusing this:\n  \\<forall>l s1 s2.\n     s1 = s2 on qdeps C1 (qdeps C2 LVQ) \\<longrightarrow>\n     pre C1 (pre C2 Q) l s1 = pre C1 (pre C2 Q) l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on qdeps C2 LVQ \\<longrightarrow> pre C2 Q l s1 = pre C2 Q l s2\n\ngoal (1 subgoal):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on qdeps (C1;; C2) LVQ \\<longrightarrow>\n       pre (C1;; C2) Q l s1 = pre (C1;; C2) Q l s2", "by(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. K3 upds (C1;; C2) Q\n 2. \\<And>s1 s2.\n       s1 = s2 on kdeps (C1;; C2) \\<Longrightarrow>\n       time (C1;; C2) s1 = time (C1;; C2) s2", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. K3 upds (C1;; C2) Q", "using A2 B2"], ["proof (prove)\nusing this:\n  K3 ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n   C1 (pre C2 Q)\n  K3 upds C2 Q\n\ngoal (1 subgoal):\n 1. K3 upds (C1;; C2) Q", "unfolding K3_def K2_def"], ["proof (prove)\nusing this:\n  \\<forall>(a, b, c)\n           \\<in>set ((SOME x.\n                         x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                    varacom C2 \\<union>\n                                    lesvars upds,\n                      time C2, kdeps C2) #\n                     map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                      upds).\n     \\<forall>s1 s2.\n        s1 = s2 on fune C1 c \\<longrightarrow> preT C1 b s1 = preT C1 b s2\n  \\<forall>(a, b, c)\\<in>set upds.\n     \\<forall>s1 s2.\n        s1 = s2 on fune C2 c \\<longrightarrow> preT C2 b s1 = preT C2 b s2\n\ngoal (1 subgoal):\n 1. \\<forall>(a, b, c)\\<in>set upds.\n       \\<forall>s1 s2.\n          s1 = s2 on fune (C1;; C2) c \\<longrightarrow>\n          preT (C1;; C2) b s1 = preT (C1;; C2) b s2", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       s1 = s2 on kdeps (C1;; C2) \\<Longrightarrow>\n       time (C1;; C2) s1 = time (C1;; C2) s2", "subgoal for s1 s2"], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 = s2 on kdeps (C1;; C2) \\<Longrightarrow>\n    time (C1;; C2) s1 = time (C1;; C2) s2", "using A3 B3"], ["proof (prove)\nusing this:\n  \\<forall>s1 s2.\n     s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2\n  \\<forall>s1 s2.\n     s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2\n\ngoal (1 subgoal):\n 1. s1 = s2 on kdeps (C1;; C2) \\<Longrightarrow>\n    time (C1;; C2) s1 = time (C1;; C2) s2", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = s2 on kdeps C1 \\<union> fune C1 (kdeps C2);\n     \\<forall>s1 s2.\n        s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2;\n     \\<forall>s1 s2.\n        s1 = s2 on kdeps C2 \\<longrightarrow>\n        time C2 s1 = time C2 s2\\<rbrakk>\n    \\<Longrightarrow> time C1 s1 + preT C1 (time C2) s1 =\n                      time C1 s2 + preT C1 (time C2) s2", "proof (goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = s2 on kdeps C1 \\<union> fune C1 (kdeps C2);\n     \\<forall>s1 s2.\n        s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2;\n     \\<forall>s1 s2.\n        s1 = s2 on kdeps C2 \\<longrightarrow>\n        time C2 s1 = time C2 s2\\<rbrakk>\n    \\<Longrightarrow> time C1 s1 + preT C1 (time C2) s1 =\n                      time C1 s2 + preT C1 (time C2) s2", "case 1"], ["proof (state)\nthis:\n  s1 = s2 on kdeps C1 \\<union> fune C1 (kdeps C2)\n  \\<forall>s1 s2.\n     s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2\n  \\<forall>s1 s2.\n     s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = s2 on kdeps C1 \\<union> fune C1 (kdeps C2);\n     \\<forall>s1 s2.\n        s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2;\n     \\<forall>s1 s2.\n        s1 = s2 on kdeps C2 \\<longrightarrow>\n        time C2 s1 = time C2 s2\\<rbrakk>\n    \\<Longrightarrow> time C1 s1 + preT C1 (time C2) s1 =\n                      time C1 s2 + preT C1 (time C2) s2", "then"], ["proof (chain)\npicking this:\n  s1 = s2 on kdeps C1 \\<union> fune C1 (kdeps C2)\n  \\<forall>s1 s2.\n     s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2\n  \\<forall>s1 s2.\n     s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2", "have t: \"time C1 s1 = time C1 s2\""], ["proof (prove)\nusing this:\n  s1 = s2 on kdeps C1 \\<union> fune C1 (kdeps C2)\n  \\<forall>s1 s2.\n     s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2\n  \\<forall>s1 s2.\n     s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2\n\ngoal (1 subgoal):\n 1. time C1 s1 = time C1 s2", "by auto"], ["proof (state)\nthis:\n  time C1 s1 = time C1 s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = s2 on kdeps C1 \\<union> fune C1 (kdeps C2);\n     \\<forall>s1 s2.\n        s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2;\n     \\<forall>s1 s2.\n        s1 = s2 on kdeps C2 \\<longrightarrow>\n        time C2 s1 = time C2 s2\\<rbrakk>\n    \\<Longrightarrow> time C1 s1 + preT C1 (time C2) s1 =\n                      time C1 s2 + preT C1 (time C2) s2", "from A2"], ["proof (chain)\npicking this:\n  K3 ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n   C1 (pre C2 Q)", "have \"\\<forall>s1 s2. s1 = s2 on fune C1 (kdeps C2) \\<longrightarrow> preT C1 (time C2) s1 = preT C1 (time C2) s2\""], ["proof (prove)\nusing this:\n  K3 ((SOME x.\n          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                     varacom C2 \\<union>\n                     lesvars upds,\n       time C2, kdeps C2) #\n      map (\\<lambda>a.\n              case a of (x, e, v) \\<Rightarrow> (x, preT C2 e, fune C2 v))\n       upds)\n   C1 (pre C2 Q)\n\ngoal (1 subgoal):\n 1. \\<forall>s1 s2.\n       s1 = s2 on fune C1 (kdeps C2) \\<longrightarrow>\n       preT C1 (time C2) s1 = preT C1 (time C2) s2", "unfolding K3_def K2_def"], ["proof (prove)\nusing this:\n  \\<forall>(a, b, c)\n           \\<in>set ((SOME x.\n                         x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                    varacom C2 \\<union>\n                                    lesvars upds,\n                      time C2, kdeps C2) #\n                     map (\\<lambda>(x, e, v). (x, preT C2 e, fune C2 v))\n                      upds).\n     \\<forall>s1 s2.\n        s1 = s2 on fune C1 c \\<longrightarrow> preT C1 b s1 = preT C1 b s2\n\ngoal (1 subgoal):\n 1. \\<forall>s1 s2.\n       s1 = s2 on fune C1 (kdeps C2) \\<longrightarrow>\n       preT C1 (time C2) s1 = preT C1 (time C2) s2", "by auto"], ["proof (state)\nthis:\n  \\<forall>s1 s2.\n     s1 = s2 on fune C1 (kdeps C2) \\<longrightarrow>\n     preT C1 (time C2) s1 = preT C1 (time C2) s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = s2 on kdeps C1 \\<union> fune C1 (kdeps C2);\n     \\<forall>s1 s2.\n        s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2;\n     \\<forall>s1 s2.\n        s1 = s2 on kdeps C2 \\<longrightarrow>\n        time C2 s1 = time C2 s2\\<rbrakk>\n    \\<Longrightarrow> time C1 s1 + preT C1 (time C2) s1 =\n                      time C1 s2 + preT C1 (time C2) s2", "then"], ["proof (chain)\npicking this:\n  \\<forall>s1 s2.\n     s1 = s2 on fune C1 (kdeps C2) \\<longrightarrow>\n     preT C1 (time C2) s1 = preT C1 (time C2) s2", "have p: \"preT C1 (time C2) s1 =  preT C1 (time C2) s2\""], ["proof (prove)\nusing this:\n  \\<forall>s1 s2.\n     s1 = s2 on fune C1 (kdeps C2) \\<longrightarrow>\n     preT C1 (time C2) s1 = preT C1 (time C2) s2\n\ngoal (1 subgoal):\n 1. preT C1 (time C2) s1 = preT C1 (time C2) s2", "using 1(1)"], ["proof (prove)\nusing this:\n  \\<forall>s1 s2.\n     s1 = s2 on fune C1 (kdeps C2) \\<longrightarrow>\n     preT C1 (time C2) s1 = preT C1 (time C2) s2\n  s1 = s2 on kdeps C1 \\<union> fune C1 (kdeps C2)\n\ngoal (1 subgoal):\n 1. preT C1 (time C2) s1 = preT C1 (time C2) s2", "by simp"], ["proof (state)\nthis:\n  preT C1 (time C2) s1 = preT C1 (time C2) s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = s2 on kdeps C1 \\<union> fune C1 (kdeps C2);\n     \\<forall>s1 s2.\n        s1 = s2 on kdeps C1 \\<longrightarrow> time C1 s1 = time C1 s2;\n     \\<forall>s1 s2.\n        s1 = s2 on kdeps C2 \\<longrightarrow>\n        time C2 s1 = time C2 s2\\<rbrakk>\n    \\<Longrightarrow> time C1 s1 + preT C1 (time C2) s1 =\n                      time C1 s2 + preT C1 (time C2) s2", "from t p"], ["proof (chain)\npicking this:\n  time C1 s1 = time C1 s2\n  preT C1 (time C2) s1 = preT C1 (time C2) s2", "show ?case"], ["proof (prove)\nusing this:\n  time C1 s1 = time C1 s2\n  preT C1 (time C2) s1 = preT C1 (time C2) s2\n\ngoal (1 subgoal):\n 1. time C1 s1 + preT C1 (time C2) s1 = time C1 s2 + preT C1 (time C2) s2", "by auto"], ["proof (state)\nthis:\n  time C1 s1 + preT C1 (time C2) s1 = time C1 s2 + preT C1 (time C2) s2\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  K4 upds LVQ (C1;; C2) Q\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds)\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds)\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 3. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds)\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C1 (pre C2 Q) l s \\<and>\n                                    preList upds (C1;; C2) l s)\n 2. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds)\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 3. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))", "from ynP' sup_B"], ["proof (chain)\npicking this:\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n           lesvars upds\n  support\n   (\\<lambda>l s. pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s)\n  \\<subseteq> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n              lesvars upds", "show \"?y \\<notin> support ?P\""], ["proof (prove)\nusing this:\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n           lesvars upds\n  support\n   (\\<lambda>l s. pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s)\n  \\<subseteq> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n              lesvars upds\n\ngoal (1 subgoal):\n 1. (SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds)\n    \\<notin> support\n              (\\<lambda>l s.\n                  pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s)", "by blast"], ["proof (state)\nthis:\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> support\n            (\\<lambda>l s.\n                pre C1 (pre C2 Q) l s \\<and> preList upds (C1;; C2) l s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds)\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 2. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))", "have F: \"support (preList upds C2) \\<subseteq> lesvars upds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support (preList upds C2) \\<subseteq> lesvars upds", "apply(rule support_preList)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  support (preList upds C2) \\<subseteq> lesvars upds\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds)\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 2. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))", "have \"support (\\<lambda>l s. pre C2 Q  l s \\<and> preList upds C2 l s) \\<subseteq> ?P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support (\\<lambda>l s. pre C2 Q l s \\<and> preList upds C2 l s)\n    \\<subseteq> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                lesvars upds", "apply(rule subset_trans[OF support_and])"], ["proof (prove)\ngoal (1 subgoal):\n 1. support (pre C2 Q) \\<union> support (preList upds C2)\n    \\<subseteq> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                lesvars upds", "using F support_pre"], ["proof (prove)\nusing this:\n  support (preList upds C2) \\<subseteq> lesvars upds\n  support (pre ?C ?Q) \\<subseteq> support ?Q \\<union> varacom ?C\n\ngoal (1 subgoal):\n 1. support (pre C2 Q) \\<union> support (preList upds C2)\n    \\<subseteq> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                lesvars upds", "by blast"], ["proof (state)\nthis:\n  support (\\<lambda>l s. pre C2 Q l s \\<and> preList upds C2 l s)\n  \\<subseteq> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n              lesvars upds\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>Q LVQ LVE upds.\n                \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                 lesvars upds \\<inter> varacom C1 = {};\n                 distinct (map fst upds);\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                 \\<forall>l s1 s2.\n                    s1 = s2 on LVE \\<longrightarrow>\n                    postList upds l s1 = postList upds l s2;\n                 \\<forall>x\\<in>set upds.\n                    case x of\n                    (a, b, c) \\<Rightarrow>\n                      \\<forall>s1 s2.\n                         s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                 (\\<Union>x\\<in>set upds.\n                     case x of (a, b, c) \\<Rightarrow> c)\n                 \\<subseteq> LVE\\<rbrakk>\n                \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                     pre C1 Q l s \\<and> preList upds C1 l s}\n                 strip C1\n                 { time\n                    C1 \\<Down> \\<lambda>l s.\n                                  Q l s \\<and> postList upds l s} \\<and>\n                                  (\\<forall>l s.\npre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                  K4 upds LVQ C1 Q;\n     \\<And>Q LVQ LVE upds.\n        \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n         lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n         \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n         \\<forall>l s1 s2.\n            s1 = s2 on LVE \\<longrightarrow>\n            postList upds l s1 = postList upds l s2;\n         \\<forall>x\\<in>set upds.\n            case x of\n            (a, b, c) \\<Rightarrow>\n              \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n         (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n         \\<subseteq> LVE\\<rbrakk>\n        \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n             pre C2 Q l s \\<and> preList upds C2 l s}\n         strip C2\n         { time\n            C2 \\<Down> \\<lambda>l s. Q l s \\<and> postList upds l s} \\<and>\n                          (\\<forall>l s.\n                              pre C2 Q l s \\<longrightarrow>\n                              Q l (postQ C2 s)) \\<and>\n                          K4 upds LVQ C2 Q;\n     finite (support Q);\n     lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n     distinct (map fst upds);\n     \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n     \\<forall>l s1 s2.\n        s1 = s2 on LVE \\<longrightarrow>\n        postList upds l s1 = postList upds l s2;\n     \\<forall>a\\<in>set upds.\n        case a of\n        (a, ba, c) \\<Rightarrow>\n          \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n     (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n     \\<subseteq> LVE;\n     vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n     vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<notin> support Q \\<union> varacom C1 \\<union>\n                                     varacom C2 \\<union>\n                                     lesvars upds)\n                      \\<notin> support\n                                (\\<lambda>l s.\n                                    pre C2 Q l s \\<and> preList upds C2 l s)\n 2. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))", "with ynP'"], ["proof (chain)\npicking this:\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n           lesvars upds\n  support (\\<lambda>l s. pre C2 Q l s \\<and> preList upds C2 l s)\n  \\<subseteq> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n              lesvars upds", "show \"?y \\<notin> support (\\<lambda>l s. pre C2 Q  l s \\<and> preList upds C2 l s)\""], ["proof (prove)\nusing this:\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n           lesvars upds\n  support (\\<lambda>l s. pre C2 Q l s \\<and> preList upds C2 l s)\n  \\<subseteq> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n              lesvars upds\n\ngoal (1 subgoal):\n 1. (SOME x.\n        x \\<notin> support Q \\<union> varacom C1 \\<union>\n                   varacom C2 \\<union>\n                   lesvars upds)\n    \\<notin> support (\\<lambda>l s. pre C2 Q l s \\<and> preList upds C2 l s)", "by blast"], ["proof (state)\nthis:\n  (SOME x.\n      x \\<notin> support Q \\<union> varacom C1 \\<union> varacom C2 \\<union>\n                 lesvars upds)\n  \\<notin> support (\\<lambda>l s. pre C2 Q l s \\<and> preList upds C2 l s)\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))", "case (6 l s)"], ["proof (state)\nthis:\n  \\<lbrakk>vc C1 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C1 = {}; distinct (map fst ?upds);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>x\\<in>set ?upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n   (\\<Union>x\\<in>set ?upds. case x of (a, b, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C1 ?Q l s \\<and> preList ?upds C1 l s}\n   strip C1\n   { time C1 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C1 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C1 s)) \\<and>\n                    K4 ?upds ?LVQ C1 ?Q\n  \\<lbrakk>vc C2 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C2 = {}; distinct (map fst ?upds);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>x\\<in>set ?upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n   (\\<Union>x\\<in>set ?upds. case x of (a, b, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C2 ?Q l s \\<and> preList ?upds C2 l s}\n   strip C2\n   { time C2 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C2 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C2 s)) \\<and>\n                    K4 ?upds ?LVQ C2 ?Q\n  finite (support Q)\n  lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {}\n  distinct (map fst upds)\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2)\n  vc C2 Q LVQ LVE\n  finite (varacom C1)\n  finite (varacom C2)\n  pre C1 (pre C2 Q) l s\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))", "note bla=6(2)[OF 6(11,3), THEN conjunct2, THEN conjunct2]"], ["proof (state)\nthis:\n  \\<lbrakk>lesvars ?upds2 \\<inter> varacom C2 = {};\n   distinct (map fst ?upds2);\n   \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on LVE \\<longrightarrow>\n      postList ?upds2 l s1 = postList ?upds2 l s2;\n   \\<forall>x\\<in>set ?upds2.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n   (\\<Union>x\\<in>set ?upds2. case x of (a, b, c) \\<Rightarrow> c)\n   \\<subseteq> LVE\\<rbrakk>\n  \\<Longrightarrow> K4 ?upds2 LVQ C2 Q\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))", "from 6(4)"], ["proof (chain)\npicking this:\n  lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {}", "have kal: \"lesvars upds \\<inter> varacom C2 = {}\""], ["proof (prove)\nusing this:\n  lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {}\n\ngoal (1 subgoal):\n 1. lesvars upds \\<inter> varacom C2 = {}", "by auto"], ["proof (state)\nthis:\n  lesvars upds \\<inter> varacom C2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))", "from bla[OF kal Aseq.prems(4,6,7,8,9)]"], ["proof (chain)\npicking this:\n  K4 upds LVQ C2 Q", "have bla4: \"K4 upds LVQ C2 Q\""], ["proof (prove)\nusing this:\n  K4 upds LVQ C2 Q\n\ngoal (1 subgoal):\n 1. K4 upds LVQ C2 Q", "by auto"], ["proof (state)\nthis:\n  K4 upds LVQ C2 Q\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))", "then"], ["proof (chain)\npicking this:\n  K4 upds LVQ C2 Q", "have bla: \"K C2 LVQ Q\""], ["proof (prove)\nusing this:\n  K4 upds LVQ C2 Q\n\ngoal (1 subgoal):\n 1. K C2 LVQ Q", "unfolding K4_def"], ["proof (prove)\nusing this:\n  K C2 LVQ Q \\<and>\n  K3 upds C2 Q \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C2 \\<longrightarrow> time C2 s1 = time C2 s2)\n\ngoal (1 subgoal):\n 1. K C2 LVQ Q", "by auto"], ["proof (state)\nthis:\n  K C2 LVQ Q\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))", "have 11: \"finite (support (pre C2 Q )) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support (pre C2 Q))", "apply(rule finite_subset[OF support_pre])"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support Q \\<union> varacom C2)", "using 6(3,4,10)  finite_varacomC2"], ["proof (prove)\nusing this:\n  finite (support Q)\n  lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {}\n  vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2)\n  finite (varacom C2)\n\ngoal (1 subgoal):\n 1. finite (support Q \\<union> varacom C2)", "by blast"], ["proof (state)\nthis:\n  finite (support (pre C2 Q))\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))", "have A: \"\\<forall>l s. pre C1 (pre C2 Q )  l s \\<longrightarrow> pre C2 Q  l (postQ C1 s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l s.\n       pre C1 (pre C2 Q) l s \\<longrightarrow> pre C2 Q l (postQ C1 s)", "apply(rule 6(1)[where upds=\"[]\", THEN conjunct2, THEN conjunct1])"], ["proof (prove)\ngoal (8 subgoals):\n 1. vc C1 (pre C2 Q) ?LVQ2 ?LVE2\n 2. finite (support (pre C2 Q))\n 3. lesvars [] \\<inter> varacom C1 = {}\n 4. distinct (map fst [])\n 5. \\<forall>l s1 s2.\n       s1 = s2 on ?LVQ2 \\<longrightarrow> pre C2 Q l s1 = pre C2 Q l s2\n 6. \\<forall>l s1 s2.\n       s1 = s2 on ?LVE2 \\<longrightarrow>\n       postList [] l s1 = postList [] l s2\n 7. \\<forall>x\\<in>set [].\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n 8. (\\<Union>x\\<in>set []. case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> ?LVE2", "apply(fact)+"], ["proof (prove)\ngoal (6 subgoals):\n 1. lesvars [] \\<inter> varacom C1 = {}\n 2. distinct (map fst [])\n 3. \\<forall>l s1 s2.\n       s1 = s2 on qdeps C2 LVQ \\<longrightarrow>\n       pre C2 Q l s1 = pre C2 Q l s2\n 4. \\<forall>l s1 s2.\n       s1 = s2 on fune C2 LVE \\<union> kdeps C2 \\<longrightarrow>\n       postList [] l s1 = postList [] l s2\n 5. \\<forall>x\\<in>set [].\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n 6. (\\<Union>x\\<in>set []. case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> fune C2 LVE \\<union> kdeps C2", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on qdeps C2 LVQ; pre C2 Q l s1\\<rbrakk>\n       \\<Longrightarrow> pre C2 Q l s2\n 2. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on qdeps C2 LVQ; pre C2 Q l s2\\<rbrakk>\n       \\<Longrightarrow> pre C2 Q l s1", "using bla"], ["proof (prove)\nusing this:\n  K C2 LVQ Q\n\ngoal (2 subgoals):\n 1. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on qdeps C2 LVQ; pre C2 Q l s1\\<rbrakk>\n       \\<Longrightarrow> pre C2 Q l s2\n 2. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on qdeps C2 LVQ; pre C2 Q l s2\\<rbrakk>\n       \\<Longrightarrow> pre C2 Q l s1", "unfolding K_def"], ["proof (prove)\nusing this:\n  \\<forall>l s1 s2.\n     s1 = s2 on qdeps C2 LVQ \\<longrightarrow> pre C2 Q l s1 = pre C2 Q l s2\n\ngoal (2 subgoals):\n 1. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on qdeps C2 LVQ; pre C2 Q l s1\\<rbrakk>\n       \\<Longrightarrow> pre C2 Q l s2\n 2. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on qdeps C2 LVQ; pre C2 Q l s2\\<rbrakk>\n       \\<Longrightarrow> pre C2 Q l s1", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>l s.\n     pre C1 (pre C2 Q) l s \\<longrightarrow> pre C2 Q l (postQ C1 s)\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))", "have B: \"(\\<forall>l s. pre C2 Q  l s \\<longrightarrow> Q l (postQ C2 s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l s. pre C2 Q l s \\<longrightarrow> Q l (postQ C2 s)", "apply(rule 6(2)[where upds=\"[]\", THEN conjunct2, THEN conjunct1])"], ["proof (prove)\ngoal (8 subgoals):\n 1. vc C2 Q ?LVQ2 ?LVE2\n 2. finite (support Q)\n 3. lesvars [] \\<inter> varacom C2 = {}\n 4. distinct (map fst [])\n 5. \\<forall>l s1 s2. s1 = s2 on ?LVQ2 \\<longrightarrow> Q l s1 = Q l s2\n 6. \\<forall>l s1 s2.\n       s1 = s2 on ?LVE2 \\<longrightarrow>\n       postList [] l s1 = postList [] l s2\n 7. \\<forall>x\\<in>set [].\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n 8. (\\<Union>x\\<in>set []. case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> ?LVE2", "apply(fact)+"], ["proof (prove)\ngoal (6 subgoals):\n 1. lesvars [] \\<inter> varacom C2 = {}\n 2. distinct (map fst [])\n 3. \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n 4. \\<forall>l s1 s2.\n       s1 = s2 on LVE \\<longrightarrow> postList [] l s1 = postList [] l s2\n 5. \\<forall>x\\<in>set [].\n       case x of\n       (a, b, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\n 6. (\\<Union>x\\<in>set []. case x of (a, b, c) \\<Rightarrow> c)\n    \\<subseteq> LVE", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on LVQ; Q l s1\\<rbrakk> \\<Longrightarrow> Q l s2\n 2. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on LVQ; Q l s2\\<rbrakk> \\<Longrightarrow> Q l s1", "using Aseq.prems(6)"], ["proof (prove)\nusing this:\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n\ngoal (2 subgoals):\n 1. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on LVQ; Q l s1\\<rbrakk> \\<Longrightarrow> Q l s2\n 2. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on LVQ; Q l s2\\<rbrakk> \\<Longrightarrow> Q l s1", "by auto"], ["proof (state)\nthis:\n  \\<forall>l s. pre C2 Q l s \\<longrightarrow> Q l (postQ C2 s)\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<And>Q LVQ LVE upds.\n                   \\<lbrakk>vc C1 Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C1 = {};\n                    distinct (map fst upds);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>x\\<in>set upds.\n                       case x of\n                       (a, b, c) \\<Rightarrow>\n                         \\<forall>s1 s2.\n                            s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>x\\<in>set upds.\n                        case x of (a, b, c) \\<Rightarrow> c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C1 Q l s \\<and> preList upds C1 l s}\n                    strip C1\n                    { time\n                       C1 \\<Down> \\<lambda>l s.\n                                     Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C1 Q l s \\<longrightarrow> Q l (postQ C1 s)) \\<and>\n                                     K4 upds LVQ C1 Q;\n        \\<And>Q LVQ LVE upds.\n           \\<lbrakk>vc C2 Q LVQ LVE; finite (support Q);\n            lesvars upds \\<inter> varacom C2 = {}; distinct (map fst upds);\n            \\<forall>l s1 s2.\n               s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n            \\<forall>l s1 s2.\n               s1 = s2 on LVE \\<longrightarrow>\n               postList upds l s1 = postList upds l s2;\n            \\<forall>x\\<in>set upds.\n               case x of\n               (a, b, c) \\<Rightarrow>\n                 \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n            (\\<Union>x\\<in>set upds. case x of (a, b, c) \\<Rightarrow> c)\n            \\<subseteq> LVE\\<rbrakk>\n           \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                pre C2 Q l s \\<and> preList upds C2 l s}\n            strip C2\n            { time\n               C2 \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                             (\\<forall>l s.\n                                 pre C2 Q l s \\<longrightarrow>\n                                 Q l (postQ C2 s)) \\<and>\n                             K4 upds LVQ C2 Q;\n        finite (support Q);\n        lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {};\n        distinct (map fst upds);\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>a\\<in>set upds.\n           case a of\n           (a, ba, c) \\<Rightarrow>\n             \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n        (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n        \\<subseteq> LVE;\n        vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2);\n        vc C2 Q LVQ LVE; finite (varacom C1); finite (varacom C2);\n        pre C1 (pre C2 Q) l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ C2 (postQ C1 s))", "from A B 6"], ["proof (chain)\npicking this:\n  \\<forall>l s.\n     pre C1 (pre C2 Q) l s \\<longrightarrow> pre C2 Q l (postQ C1 s)\n  \\<forall>l s. pre C2 Q l s \\<longrightarrow> Q l (postQ C2 s)\n  \\<lbrakk>vc C1 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C1 = {}; distinct (map fst ?upds);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>x\\<in>set ?upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n   (\\<Union>x\\<in>set ?upds. case x of (a, b, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C1 ?Q l s \\<and> preList ?upds C1 l s}\n   strip C1\n   { time C1 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C1 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C1 s)) \\<and>\n                    K4 ?upds ?LVQ C1 ?Q\n  \\<lbrakk>vc C2 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C2 = {}; distinct (map fst ?upds);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>x\\<in>set ?upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n   (\\<Union>x\\<in>set ?upds. case x of (a, b, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C2 ?Q l s \\<and> preList ?upds C2 l s}\n   strip C2\n   { time C2 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C2 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C2 s)) \\<and>\n                    K4 ?upds ?LVQ C2 ?Q\n  finite (support Q)\n  lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {}\n  distinct (map fst upds)\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2)\n  vc C2 Q LVQ LVE\n  finite (varacom C1)\n  finite (varacom C2)\n  pre C1 (pre C2 Q) l s", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>l s.\n     pre C1 (pre C2 Q) l s \\<longrightarrow> pre C2 Q l (postQ C1 s)\n  \\<forall>l s. pre C2 Q l s \\<longrightarrow> Q l (postQ C2 s)\n  \\<lbrakk>vc C1 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C1 = {}; distinct (map fst ?upds);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>x\\<in>set ?upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n   (\\<Union>x\\<in>set ?upds. case x of (a, b, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C1 ?Q l s \\<and> preList ?upds C1 l s}\n   strip C1\n   { time C1 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C1 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C1 s)) \\<and>\n                    K4 ?upds ?LVQ C1 ?Q\n  \\<lbrakk>vc C2 ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C2 = {}; distinct (map fst ?upds);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>x\\<in>set ?upds.\n      case x of\n      (a, b, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n   (\\<Union>x\\<in>set ?upds. case x of (a, b, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C2 ?Q l s \\<and> preList ?upds C2 l s}\n   strip C2\n   { time C2 \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C2 ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C2 s)) \\<and>\n                    K4 ?upds ?LVQ C2 ?Q\n  finite (support Q)\n  lesvars upds \\<inter> (varacom C1 \\<union> varacom C2) = {}\n  distinct (map fst upds)\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  vc C1 (pre C2 Q) (qdeps C2 LVQ) (fune C2 LVE \\<union> kdeps C2)\n  vc C2 Q LVQ LVE\n  finite (varacom C1)\n  finite (varacom C2)\n  pre C1 (pre C2 Q) l s\n\ngoal (1 subgoal):\n 1. Q l (postQ C2 (postQ C1 s))", "by simp"], ["proof (state)\nthis:\n  Q l (postQ C2 (postQ C1 s))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           pre (C1;; C2) Q l s \\<and>\n                           preList upds (C1;; C2) l s}\n                       strip (C1;; C2)\n                       { time\n                          (C1;;\n                           C2) \\<Down> \\<lambda>l s.\n    Q l s \\<and> postList upds l s} \\<and>\n  (\\<forall>l s.\n      pre (C1;; C2) Q l s \\<longrightarrow> Q l (postQ (C1;; C2) s)) \\<and>\n  K4 upds LVQ (C1;; C2) Q\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "case (Awhile A b C Q upds)"], ["proof (state)\nthis:\n  \\<lbrakk>vc C ?Q ?LVQ ?LVE; finite (support ?Q);\n   lesvars ?upds \\<inter> varacom C = {}; distinct (map fst ?upds);\n   finite (varacom C);\n   \\<forall>l s1 s2. s1 = s2 on ?LVQ \\<longrightarrow> ?Q l s1 = ?Q l s2;\n   \\<forall>l s1 s2.\n      s1 = s2 on ?LVE \\<longrightarrow>\n      postList ?upds l s1 = postList ?upds l s2;\n   \\<forall>a\\<in>set ?upds.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2;\n   (\\<Union>a\\<in>set ?upds. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> ?LVE\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n       pre C ?Q l s \\<and> preList ?upds C l s}\n   strip C\n   { time C \\<Down> \\<lambda>l s. ?Q l s \\<and> postList ?upds l s} \\<and>\n                    (\\<forall>l s.\n                        pre C ?Q l s \\<longrightarrow>\n                        ?Q l (postQ C s)) \\<and>\n                    K4 ?upds ?LVQ C ?Q\n  vc ({A} WHILE b DO C) Q LVQ LVE\n  finite (support Q)\n  lesvars upds \\<inter> varacom ({A} WHILE b DO C) = {}\n  distinct (map fst upds)\n  finite (varacom ({A} WHILE b DO C))\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "obtain I2 S E Es SS where aha[simp]: \"A = (I2,(S,(E,Es,SS)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>I2 S E Es SS.\n        A = (I2, S, E, Es, SS) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases5"], ["proof (prove)\nusing this:\n  (\\<And>a b c d e.\n      ?y = (a, b, c, d, e) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>I2 S E Es SS.\n        A = (I2, S, E, Es, SS) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  A = (I2, S, E, Es, SS)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "obtain I Is where aha2: \"I2 = (I, Is)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>I Is. I2 = (I, Is) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  I2 = (I, Is)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "let ?LV =\"(\\<Union>y\\<in>LVE \\<union> LVQ. (funStar SS) y)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have LVE_LVE: \"LVE \\<subseteq> (\\<Union>y\\<in>LVE. (funStar SS) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LVE \\<subseteq> \\<Union> (funStar SS ` LVE)", "using funStart_prop1"], ["proof (prove)\nusing this:\n  ?x \\<in> funStar ?f ?x\n\ngoal (1 subgoal):\n 1. LVE \\<subseteq> \\<Union> (funStar SS ` LVE)", "by fast"], ["proof (state)\nthis:\n  LVE \\<subseteq> \\<Union> (funStar SS ` LVE)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have LV_LV: \"LVE \\<union> LVQ \\<subseteq> ?LV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LVE \\<union> LVQ \\<subseteq> \\<Union> (funStar SS ` (LVE \\<union> LVQ))", "using funStart_prop1"], ["proof (prove)\nusing this:\n  ?x \\<in> funStar ?f ?x\n\ngoal (1 subgoal):\n 1. LVE \\<union> LVQ \\<subseteq> \\<Union> (funStar SS ` (LVE \\<union> LVQ))", "by fast"], ["proof (state)\nthis:\n  LVE \\<union> LVQ \\<subseteq> \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have LV_LV2: \"(\\<Union>y\\<in>LVE \\<union> LVQ. SS y) \\<subseteq> ?LV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (SS ` (LVE \\<union> LVQ))\n    \\<subseteq> \\<Union> (funStar SS ` (LVE \\<union> LVQ))", "using funStart_prop2"], ["proof (prove)\nusing this:\n  ?f ?x \\<subseteq> funStar ?f ?x\n\ngoal (1 subgoal):\n 1. \\<Union> (SS ` (LVE \\<union> LVQ))\n    \\<subseteq> \\<Union> (funStar SS ` (LVE \\<union> LVQ))", "by fast"], ["proof (state)\nthis:\n  \\<Union> (SS ` (LVE \\<union> LVQ))\n  \\<subseteq> \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have LVE_LV2: \"(\\<Union>y\\<in>LVE. SS y) \\<subseteq> (\\<Union>y\\<in>LVE. (funStar SS) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (SS ` LVE) \\<subseteq> \\<Union> (funStar SS ` LVE)", "using funStart_prop2"], ["proof (prove)\nusing this:\n  ?f ?x \\<subseteq> funStar ?f ?x\n\ngoal (1 subgoal):\n 1. \\<Union> (SS ` LVE) \\<subseteq> \\<Union> (funStar SS ` LVE)", "by fast"], ["proof (state)\nthis:\n  \\<Union> (SS ` LVE) \\<subseteq> \\<Union> (funStar SS ` LVE)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "note aha = aha2 aha"], ["proof (state)\nthis:\n  I2 = (I, Is)\n  A = (I2, S, E, Es, SS)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "with aha aha2 \\<open>vc (Awhile A b C) Q LVQ LVE\\<close>"], ["proof (chain)\npicking this:\n  I2 = (I, Is)\n  A = (I2, S, E, Es, SS)\n  I2 = (I, Is)\n  vc ({A} WHILE b DO C) Q LVQ LVE\n  I2 = (I, Is)\n  A = (I2, S, E, Es, SS)", "have \"vc (Awhile ((I,Is),S,E,Es,SS) b C) Q LVQ LVE\""], ["proof (prove)\nusing this:\n  I2 = (I, Is)\n  A = (I2, S, E, Es, SS)\n  I2 = (I, Is)\n  vc ({A} WHILE b DO C) Q LVQ LVE\n  I2 = (I, Is)\n  A = (I2, S, E, Es, SS)\n\ngoal (1 subgoal):\n 1. vc ({((I, Is), S, E, Es, SS)} WHILE b DO C) Q LVQ LVE", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>l s v x.\n       \\<lbrakk>I2 = (I, Is);\n        \\<forall>s1 s2.\n           s1 = s2 on Is \\<longrightarrow> (\\<forall>l. I l s1 = I l s2);\n        \\<forall>y\\<in>LVE \\<union> LVQ.\n           \\<forall>s1 s2.\n              s1 = s2 on SS y \\<longrightarrow> S s1 y = S s2 y;\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        \\<forall>l s.\n           (I l s \\<and> bval b s \\<longrightarrow>\n            pre C I l s \\<and>\n            Suc (preT C E s + time C s) \\<le> E s \\<and>\n            S s = S (postQ C s)\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ)) \\<and>\n           (I l s \\<and> \\<not> bval b s \\<longrightarrow>\n            Q l s \\<and>\n            Suc 0 \\<le> E s \\<and>\n            S s = s\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ));\n        vc C I Is (Es \\<union> \\<Union> (funStar SS ` LVE)); I l s;\n        bval b s; x \\<in> LVE; v \\<in> funStar SS x\\<rbrakk>\n       \\<Longrightarrow> S s v = S (postQ C s) v\n 2. \\<And>l s v x.\n       \\<lbrakk>I2 = (I, Is);\n        \\<forall>s1 s2.\n           s1 = s2 on Is \\<longrightarrow> (\\<forall>l. I l s1 = I l s2);\n        \\<forall>y\\<in>LVE \\<union> LVQ.\n           \\<forall>s1 s2.\n              s1 = s2 on SS y \\<longrightarrow> S s1 y = S s2 y;\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        \\<forall>l s.\n           (I l s \\<and> bval b s \\<longrightarrow>\n            pre C I l s \\<and>\n            Suc (preT C E s + time C s) \\<le> E s \\<and>\n            S s = S (postQ C s)\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ)) \\<and>\n           (I l s \\<and> \\<not> bval b s \\<longrightarrow>\n            Q l s \\<and>\n            Suc 0 \\<le> E s \\<and>\n            S s = s\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ));\n        vc C I Is (Es \\<union> \\<Union> (funStar SS ` LVE)); I l s;\n        bval b s; x \\<in> LVQ; v \\<in> funStar SS x\\<rbrakk>\n       \\<Longrightarrow> S s v = S (postQ C s) v\n 3. \\<And>l s v x.\n       \\<lbrakk>I2 = (I, Is);\n        \\<forall>s1 s2.\n           s1 = s2 on Is \\<longrightarrow> (\\<forall>l. I l s1 = I l s2);\n        \\<forall>y\\<in>LVE \\<union> LVQ.\n           \\<forall>s1 s2.\n              s1 = s2 on SS y \\<longrightarrow> S s1 y = S s2 y;\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        \\<forall>l s.\n           (I l s \\<and> bval b s \\<longrightarrow>\n            pre C I l s \\<and>\n            Suc (preT C E s + time C s) \\<le> E s \\<and>\n            S s = S (postQ C s)\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ)) \\<and>\n           (I l s \\<and> \\<not> bval b s \\<longrightarrow>\n            Q l s \\<and>\n            Suc 0 \\<le> E s \\<and>\n            S s = s\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ));\n        vc C I Is (Es \\<union> \\<Union> (funStar SS ` LVE)); I l s;\n        \\<not> bval b s; x \\<in> LVE; v \\<in> funStar SS x\\<rbrakk>\n       \\<Longrightarrow> S s v = s v\n 4. \\<And>l s v x.\n       \\<lbrakk>I2 = (I, Is);\n        \\<forall>s1 s2.\n           s1 = s2 on Is \\<longrightarrow> (\\<forall>l. I l s1 = I l s2);\n        \\<forall>y\\<in>LVE \\<union> LVQ.\n           \\<forall>s1 s2.\n              s1 = s2 on SS y \\<longrightarrow> S s1 y = S s2 y;\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        \\<forall>l s.\n           (I l s \\<and> bval b s \\<longrightarrow>\n            pre C I l s \\<and>\n            Suc (preT C E s + time C s) \\<le> E s \\<and>\n            S s = S (postQ C s)\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ)) \\<and>\n           (I l s \\<and> \\<not> bval b s \\<longrightarrow>\n            Q l s \\<and>\n            Suc 0 \\<le> E s \\<and>\n            S s = s\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ));\n        vc C I Is (Es \\<union> \\<Union> (funStar SS ` LVE)); I l s;\n        \\<not> bval b s; x \\<in> LVQ; v \\<in> funStar SS x\\<rbrakk>\n       \\<Longrightarrow> S s v = s v", "apply fast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  vc ({((I, Is), S, E, Es, SS)} WHILE b DO C) Q LVQ LVE\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "then"], ["proof (chain)\npicking this:\n  vc ({((I, Is), S, E, Es, SS)} WHILE b DO C) Q LVQ LVE", "have vc: \"vc C I Is (Es \\<union> (\\<Union>y\\<in>LVE. (funStar SS) y))\" \n    and IQ: \"\\<forall>l s. (I l s \\<and> bval b s \\<longrightarrow> pre C I l s \\<and>  1 + preT C E s + time C s \\<le> E s \\<and> S s = S (postQ C s) on ?LV)\" and\n    pre: \"\\<forall>l s. (I l s \\<and> \\<not> bval b s \\<longrightarrow> Q l s \\<and> 1 \\<le> E s \\<and> S s = s on ?LV)\"\n    and Is: \"(\\<forall>s1 s2 l. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2)\"\n    and Ss:  \"(\\<forall>y\\<in>LVE \\<union> LVQ. let Ss = SS y in \\<forall>s1 s2. s1 = s2 on Ss \\<longrightarrow> S s1 y = S s2 y)\"\n    and Es: \"(\\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2)\""], ["proof (prove)\nusing this:\n  vc ({((I, Is), S, E, Es, SS)} WHILE b DO C) Q LVQ LVE\n\ngoal (1 subgoal):\n 1. (vc C I Is (Es \\<union> \\<Union> (funStar SS ` LVE)) &&&\n     \\<forall>l s.\n        I l s \\<and> bval b s \\<longrightarrow>\n        pre C I l s \\<and>\n        1 + preT C E s + time C s \\<le> E s \\<and>\n        S s = S (postQ C s)\n        on \\<Union> (funStar SS ` (LVE \\<union> LVQ)) &&&\n     \\<forall>l s.\n        I l s \\<and> \\<not> bval b s \\<longrightarrow>\n        Q l s \\<and>\n        1 \\<le> E s \\<and>\n        S s = s on \\<Union> (funStar SS ` (LVE \\<union> LVQ))) &&&\n    \\<forall>s1 s2 l. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2 &&&\n    \\<forall>y\\<in>LVE \\<union> LVQ.\n       let Ss = SS y\n       in \\<forall>s1 s2.\n             s1 = s2 on Ss \\<longrightarrow> S s1 y = S s2 y &&&\n    \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<forall>s1 s2.\n        s1 = s2 on Is \\<longrightarrow>\n        (\\<forall>l. I l s1 = I l s2)) \\<and>\n    (\\<forall>y\\<in>LVE \\<union> LVQ.\n        \\<forall>s1 s2.\n           s1 = s2 on SS y \\<longrightarrow> S s1 y = S s2 y) \\<and>\n    (\\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2) \\<and>\n    (\\<forall>l s.\n        (I l s \\<and> bval b s \\<longrightarrow>\n         pre C I l s \\<and>\n         Suc (preT C E s + time C s) \\<le> E s \\<and>\n         S s = S (postQ C s)\n         on \\<Union> (funStar SS ` LVE) \\<union>\n            \\<Union> (funStar SS ` LVQ)) \\<and>\n        (I l s \\<and> \\<not> bval b s \\<longrightarrow>\n         Q l s \\<and>\n         Suc 0 \\<le> E s \\<and>\n         S s = s\n         on \\<Union> (funStar SS ` LVE) \\<union>\n            \\<Union> (funStar SS ` LVQ))) \\<and>\n    vc C I Is (Es \\<union> \\<Union> (funStar SS ` LVE)) \\<Longrightarrow>\n    \\<forall>l s.\n       I l s \\<and> bval b s \\<longrightarrow>\n       Suc (preT C E s + time C s) \\<le> E s \\<and>\n       S s = S (postQ C s)\n       on \\<Union> (funStar SS ` LVE) \\<union> \\<Union> (funStar SS ` LVQ)\n 2. (\\<forall>s1 s2.\n        s1 = s2 on Is \\<longrightarrow>\n        (\\<forall>l. I l s1 = I l s2)) \\<and>\n    (\\<forall>y\\<in>LVE \\<union> LVQ.\n        \\<forall>s1 s2.\n           s1 = s2 on SS y \\<longrightarrow> S s1 y = S s2 y) \\<and>\n    (\\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2) \\<and>\n    (\\<forall>l s.\n        (I l s \\<and> bval b s \\<longrightarrow>\n         pre C I l s \\<and>\n         Suc (preT C E s + time C s) \\<le> E s \\<and>\n         S s = S (postQ C s)\n         on \\<Union> (funStar SS ` LVE) \\<union>\n            \\<Union> (funStar SS ` LVQ)) \\<and>\n        (I l s \\<and> \\<not> bval b s \\<longrightarrow>\n         Q l s \\<and>\n         Suc 0 \\<le> E s \\<and>\n         S s = s\n         on \\<Union> (funStar SS ` LVE) \\<union>\n            \\<Union> (funStar SS ` LVQ))) \\<and>\n    vc C I Is (Es \\<union> \\<Union> (funStar SS ` LVE)) \\<Longrightarrow>\n    \\<forall>l s.\n       I l s \\<and> \\<not> bval b s \\<longrightarrow>\n       Suc 0 \\<le> E s \\<and>\n       S s = s\n       on \\<Union> (funStar SS ` LVE) \\<union> \\<Union> (funStar SS ` LVQ)", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>l s x xa.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>y\\<in>LVE \\<union> LVQ.\n           \\<forall>s1 s2.\n              s1 = s2 on SS y \\<longrightarrow> S s1 y = S s2 y;\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        \\<forall>l s.\n           (I l s \\<and> bval b s \\<longrightarrow>\n            pre C I l s \\<and>\n            Suc (preT C E s + time C s) \\<le> E s \\<and>\n            S s = S (postQ C s)\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ)) \\<and>\n           (I l s \\<and> \\<not> bval b s \\<longrightarrow>\n            Q l s \\<and>\n            Suc 0 \\<le> E s \\<and>\n            S s = s\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ));\n        vc C I Is (Es \\<union> \\<Union> (funStar SS ` LVE)); I l s;\n        bval b s; xa \\<in> LVE; x \\<in> funStar SS xa\\<rbrakk>\n       \\<Longrightarrow> S s x = S (postQ C s) x\n 2. \\<And>l s x xa.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>y\\<in>LVE \\<union> LVQ.\n           \\<forall>s1 s2.\n              s1 = s2 on SS y \\<longrightarrow> S s1 y = S s2 y;\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        \\<forall>l s.\n           (I l s \\<and> bval b s \\<longrightarrow>\n            pre C I l s \\<and>\n            Suc (preT C E s + time C s) \\<le> E s \\<and>\n            S s = S (postQ C s)\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ)) \\<and>\n           (I l s \\<and> \\<not> bval b s \\<longrightarrow>\n            Q l s \\<and>\n            Suc 0 \\<le> E s \\<and>\n            S s = s\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ));\n        vc C I Is (Es \\<union> \\<Union> (funStar SS ` LVE)); I l s;\n        bval b s; xa \\<in> LVQ; x \\<in> funStar SS xa\\<rbrakk>\n       \\<Longrightarrow> S s x = S (postQ C s) x\n 3. \\<And>l s x xa.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>y\\<in>LVE \\<union> LVQ.\n           \\<forall>s1 s2.\n              s1 = s2 on SS y \\<longrightarrow> S s1 y = S s2 y;\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        \\<forall>l s.\n           (I l s \\<and> bval b s \\<longrightarrow>\n            pre C I l s \\<and>\n            Suc (preT C E s + time C s) \\<le> E s \\<and>\n            S s = S (postQ C s)\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ)) \\<and>\n           (I l s \\<and> \\<not> bval b s \\<longrightarrow>\n            Q l s \\<and>\n            Suc 0 \\<le> E s \\<and>\n            S s = s\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ));\n        vc C I Is (Es \\<union> \\<Union> (funStar SS ` LVE)); I l s;\n        \\<not> bval b s; xa \\<in> LVE; x \\<in> funStar SS xa\\<rbrakk>\n       \\<Longrightarrow> S s x = s x\n 4. \\<And>l s x xa.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>y\\<in>LVE \\<union> LVQ.\n           \\<forall>s1 s2.\n              s1 = s2 on SS y \\<longrightarrow> S s1 y = S s2 y;\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        \\<forall>l s.\n           (I l s \\<and> bval b s \\<longrightarrow>\n            pre C I l s \\<and>\n            Suc (preT C E s + time C s) \\<le> E s \\<and>\n            S s = S (postQ C s)\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ)) \\<and>\n           (I l s \\<and> \\<not> bval b s \\<longrightarrow>\n            Q l s \\<and>\n            Suc 0 \\<le> E s \\<and>\n            S s = s\n            on \\<Union> (funStar SS ` LVE) \\<union>\n               \\<Union> (funStar SS ` LVQ));\n        vc C I Is (Es \\<union> \\<Union> (funStar SS ` LVE)); I l s;\n        \\<not> bval b s; xa \\<in> LVQ; x \\<in> funStar SS xa\\<rbrakk>\n       \\<Longrightarrow> S s x = s x", "apply fast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  vc C I Is (Es \\<union> \\<Union> (funStar SS ` LVE))\n  \\<forall>l s.\n     I l s \\<and> bval b s \\<longrightarrow>\n     pre C I l s \\<and>\n     1 + preT C E s + time C s \\<le> E s \\<and>\n     S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  \\<forall>l s.\n     I l s \\<and> \\<not> bval b s \\<longrightarrow>\n     Q l s \\<and>\n     1 \\<le> E s \\<and>\n     S s = s on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  \\<forall>s1 s2 l. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2\n  \\<forall>y\\<in>LVE \\<union> LVQ.\n     let Ss = SS y\n     in \\<forall>s1 s2. s1 = s2 on Ss \\<longrightarrow> S s1 y = S s2 y\n  \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "then"], ["proof (chain)\npicking this:\n  vc C I Is (Es \\<union> \\<Union> (funStar SS ` LVE))\n  \\<forall>l s.\n     I l s \\<and> bval b s \\<longrightarrow>\n     pre C I l s \\<and>\n     1 + preT C E s + time C s \\<le> E s \\<and>\n     S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  \\<forall>l s.\n     I l s \\<and> \\<not> bval b s \\<longrightarrow>\n     Q l s \\<and>\n     1 \\<le> E s \\<and>\n     S s = s on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  \\<forall>s1 s2 l. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2\n  \\<forall>y\\<in>LVE \\<union> LVQ.\n     let Ss = SS y\n     in \\<forall>s1 s2. s1 = s2 on Ss \\<longrightarrow> S s1 y = S s2 y\n  \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2", "have pre2: \"\\<And>l s. I l s \\<Longrightarrow> \\<not> bval b s \\<Longrightarrow> Q l s \\<and> 1 \\<le> E s \\<and> S s = s on ?LV\"\n    and IQ2: \"\\<And>l s. (I l s \\<Longrightarrow> bval b s \\<Longrightarrow> pre C I l s \\<and>  1 + preT C E s + time C s \\<le> E s \\<and> S s = S (postQ C s) on ?LV)\"\n    and Ss2:  \"\\<And>y s1 s2. s1 = s2 on (\\<Union>y\\<in>LVE. SS y) \\<Longrightarrow> S s1 = S s2 on LVE\""], ["proof (prove)\nusing this:\n  vc C I Is (Es \\<union> \\<Union> (funStar SS ` LVE))\n  \\<forall>l s.\n     I l s \\<and> bval b s \\<longrightarrow>\n     pre C I l s \\<and>\n     1 + preT C E s + time C s \\<le> E s \\<and>\n     S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  \\<forall>l s.\n     I l s \\<and> \\<not> bval b s \\<longrightarrow>\n     Q l s \\<and>\n     1 \\<le> E s \\<and>\n     S s = s on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  \\<forall>s1 s2 l. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2\n  \\<forall>y\\<in>LVE \\<union> LVQ.\n     let Ss = SS y\n     in \\<forall>s1 s2. s1 = s2 on Ss \\<longrightarrow> S s1 y = S s2 y\n  \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2\n\ngoal (1 subgoal):\n 1. (\\<And>l s.\n        \\<lbrakk>I l s; \\<not> bval b s\\<rbrakk>\n        \\<Longrightarrow> Q l s \\<and>\n                          1 \\<le> E s \\<and>\n                          S s = s\n                          on \\<Union> (funStar SS ` (LVE \\<union> LVQ))) &&&\n    (\\<And>l s.\n        \\<lbrakk>I l s; bval b s\\<rbrakk>\n        \\<Longrightarrow> pre C I l s \\<and>\n                          1 + preT C E s + time C s \\<le> E s \\<and>\n                          S s = S (postQ C s)\n                          on \\<Union> (funStar SS ` (LVE \\<union> LVQ))) &&&\n    (\\<And>y s1 s2.\n        s1 = s2 on \\<Union> (SS ` LVE) \\<Longrightarrow> S s1 = S s2 on LVE)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>I ?l ?s; \\<not> bval b ?s\\<rbrakk>\n  \\<Longrightarrow> Q ?l ?s \\<and>\n                    1 \\<le> E ?s \\<and>\n                    S ?s = ?s on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  \\<lbrakk>I ?l ?s; bval b ?s\\<rbrakk>\n  \\<Longrightarrow> pre C I ?l ?s \\<and>\n                    1 + preT C E ?s + time C ?s \\<le> E ?s \\<and>\n                    S ?s = S (postQ C ?s)\n                    on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  ?s1.0 = ?s2.0 on \\<Union> (SS ` LVE) \\<Longrightarrow>\n  S ?s1.0 = S ?s2.0 on LVE\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "from Ss"], ["proof (chain)\npicking this:\n  \\<forall>y\\<in>LVE \\<union> LVQ.\n     let Ss = SS y\n     in \\<forall>s1 s2. s1 = s2 on Ss \\<longrightarrow> S s1 y = S s2 y", "have Ssc: \"\\<And>c s1 s2. c \\<subseteq> LVE \\<Longrightarrow>  s1 = s2 on (\\<Union>y\\<in>c. SS y) \\<Longrightarrow> S s1 = S s2 on c\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>LVE \\<union> LVQ.\n     let Ss = SS y\n     in \\<forall>s1 s2. s1 = s2 on Ss \\<longrightarrow> S s1 y = S s2 y\n\ngoal (1 subgoal):\n 1. \\<And>c s1 s2.\n       \\<lbrakk>c \\<subseteq> LVE; s1 = s2 on \\<Union> (SS ` c)\\<rbrakk>\n       \\<Longrightarrow> S s1 = S s2 on c", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?c1 \\<subseteq> LVE;\n   ?s1.1 = ?s2.1 on \\<Union> (SS ` ?c1)\\<rbrakk>\n  \\<Longrightarrow> S ?s1.1 = S ?s2.1 on ?c1\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "from IQ"], ["proof (chain)\npicking this:\n  \\<forall>l s.\n     I l s \\<and> bval b s \\<longrightarrow>\n     pre C I l s \\<and>\n     1 + preT C E s + time C s \\<le> E s \\<and>\n     S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))", "have IQ_in: \"\\<And>l s. I l s \\<Longrightarrow> bval b s \\<Longrightarrow> S s = S (postQ C s) on ?LV\""], ["proof (prove)\nusing this:\n  \\<forall>l s.\n     I l s \\<and> bval b s \\<longrightarrow>\n     pre C I l s \\<and>\n     1 + preT C E s + time C s \\<le> E s \\<and>\n     S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>I l s; bval b s\\<rbrakk>\n       \\<Longrightarrow> S s = S (postQ C s)\n                         on \\<Union> (funStar SS ` (LVE \\<union> LVQ))", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>I ?l1 ?s1; bval b ?s1\\<rbrakk>\n  \\<Longrightarrow> S ?s1 = S (postQ C ?s1)\n                    on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have inv_impl: \"\\<And>l s. I l s \\<Longrightarrow> bval b s \\<Longrightarrow> pre C I  l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>I l s; bval b s\\<rbrakk> \\<Longrightarrow> pre C I l s", "using IQ"], ["proof (prove)\nusing this:\n  \\<forall>l s.\n     I l s \\<and> bval b s \\<longrightarrow>\n     pre C I l s \\<and>\n     1 + preT C E s + time C s \\<le> E s \\<and>\n     S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>I l s; bval b s\\<rbrakk> \\<Longrightarrow> pre C I l s", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>I ?l1 ?s1; bval b ?s1\\<rbrakk> \\<Longrightarrow> pre C I ?l1 ?s1\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have yC: \"lesvars upds \\<inter> varacom C = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lesvars upds \\<inter> varacom C = {}", "using Awhile(4) aha"], ["proof (prove)\nusing this:\n  lesvars upds \\<inter> varacom ({A} WHILE b DO C) = {}\n  I2 = (I, Is)\n  A = (I2, S, E, Es, SS)\n\ngoal (1 subgoal):\n 1. lesvars upds \\<inter> varacom C = {}", "by auto"], ["proof (state)\nthis:\n  lesvars upds \\<inter> varacom C = {}\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "let ?upds = \"map (%(x,e,v). (x, %s. e (S s), \\<Union>x\\<in>v. SS x)) upds\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "let ?INV = \"%l s. I l s \\<and> postList ?upds l s\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have \"lesvars upds \\<inter> support I = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lesvars upds \\<inter> support I = {}", "using Awhile(4)"], ["proof (prove)\nusing this:\n  lesvars upds \\<inter> varacom ({A} WHILE b DO C) = {}\n\ngoal (1 subgoal):\n 1. lesvars upds \\<inter> support I = {}", "unfolding aha"], ["proof (prove)\nusing this:\n  lesvars upds \\<inter> varacom ({((I, Is), S, E, Es, SS)} WHILE b DO C) =\n  {}\n\ngoal (1 subgoal):\n 1. lesvars upds \\<inter> support I = {}", "by auto"], ["proof (state)\nthis:\n  lesvars upds \\<inter> support I = {}\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "let ?P=\"lesvars upds \\<union> varacom ({A} WHILE b DO C) \""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "let ?z=\"SOME z::lvname. z \\<notin> ?P\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have \"finite ?P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (lesvars upds \\<union> varacom ({A} WHILE b DO C))", "apply(auto simp del: aha)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (varacom ({A} WHILE b DO C))", "by (fact Awhile(6))"], ["proof (state)\nthis:\n  finite (lesvars upds \\<union> varacom ({A} WHILE b DO C))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "hence \"\\<exists>z. z\\<notin>?P\""], ["proof (prove)\nusing this:\n  finite (lesvars upds \\<union> varacom ({A} WHILE b DO C))\n\ngoal (1 subgoal):\n 1. \\<exists>z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C)", "using infinite_UNIV_listI"], ["proof (prove)\nusing this:\n  finite (lesvars upds \\<union> varacom ({A} WHILE b DO C))\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. \\<exists>z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C)", "using ex_new_if_finite"], ["proof (prove)\nusing this:\n  finite (lesvars upds \\<union> varacom ({A} WHILE b DO C))\n  infinite UNIV\n  \\<lbrakk>infinite UNIV; finite ?A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a. a \\<notin> ?A\n\ngoal (1 subgoal):\n 1. \\<exists>z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C)", "by metis"], ["proof (state)\nthis:\n  \\<exists>z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "hence znP: \"?z \\<notin> ?P\""], ["proof (prove)\nusing this:\n  \\<exists>z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C)\n\ngoal (1 subgoal):\n 1. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C)", "by (rule someI_ex)"], ["proof (state)\nthis:\n  (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n  \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "from znP"], ["proof (chain)\npicking this:\n  (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n  \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C)", "have   \n      zny:  \"?z \\<notin> lesvars upds\"\n    and zI:   \"?z \\<notin> support I\" \n    and blb:      \"?z \\<notin> varacom C\""], ["proof (prove)\nusing this:\n  (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n  \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C)\n\ngoal (1 subgoal):\n 1. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> lesvars upds &&&\n    (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> support I &&&\n    (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> varacom C", "by (simp_all add: aha)"], ["proof (state)\nthis:\n  (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n  \\<notin> lesvars upds\n  (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n  \\<notin> support I\n  (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n  \\<notin> varacom C\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "from Awhile(4,6)"], ["proof (chain)\npicking this:\n  lesvars upds \\<inter> varacom ({A} WHILE b DO C) = {}\n  finite (varacom ({A} WHILE b DO C))", "have 23: \"finite (varacom C)\" \n    and  26: \"finite (support I)\""], ["proof (prove)\nusing this:\n  lesvars upds \\<inter> varacom ({A} WHILE b DO C) = {}\n  finite (varacom ({A} WHILE b DO C))\n\ngoal (1 subgoal):\n 1. finite (varacom C) &&& finite (support I)", "by (auto simp add: finite_subset aha)"], ["proof (state)\nthis:\n  finite (varacom C)\n  finite (support I)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have \"\\<forall>l s.  pre C I  l s \\<longrightarrow> I l (postQ C s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l s. pre C I l s \\<longrightarrow> I l (postQ C s)", "apply(rule Awhile(1)[THEN conjunct2, THEN conjunct1])"], ["proof (prove)\ngoal (9 subgoals):\n 1. vc C I ?LVQ2 ?LVE2\n 2. finite (support I)\n 3. lesvars ?upds2 \\<inter> varacom C = {}\n 4. distinct (map fst ?upds2)\n 5. finite (varacom C)\n 6. \\<forall>l s1 s2. s1 = s2 on ?LVQ2 \\<longrightarrow> I l s1 = I l s2\n 7. \\<forall>l s1 s2.\n       s1 = s2 on ?LVE2 \\<longrightarrow>\n       postList ?upds2 l s1 = postList ?upds2 l s2\n 8. \\<forall>a\\<in>set ?upds2.\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n 9. (\\<Union>a\\<in>set ?upds2. case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> ?LVE2", "apply(fact)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<forall>l s1 s2. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2\n 2. \\<forall>l s1 s2.\n       s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE) \\<longrightarrow>\n       postList upds l s1 = postList upds l s2\n 3. \\<forall>a\\<in>set upds.\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n 4. (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> Es \\<union> \\<Union> (funStar SS ` LVE)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l s1 s2. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2", "using  Is"], ["proof (prove)\nusing this:\n  \\<forall>s1 s2 l. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2\n\ngoal (1 subgoal):\n 1. \\<forall>l s1 s2. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE) \\<longrightarrow>\n       postList upds l s1 = postList upds l s2\n 2. \\<forall>a\\<in>set upds.\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n 3. (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> Es \\<union> \\<Union> (funStar SS ` LVE)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE) \\<longrightarrow>\n       postList upds l s1 = postList upds l s2", "using Awhile(8) LVE_LVE"], ["proof (prove)\nusing this:\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  LVE \\<subseteq> \\<Union> (funStar SS ` LVE)\n\ngoal (1 subgoal):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE) \\<longrightarrow>\n       postList upds l s1 = postList upds l s2", "by (metis subsetD sup.cobounded2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>a\\<in>set upds.\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n 2. (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> Es \\<union> \\<Union> (funStar SS ` LVE)", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> Es \\<union> \\<Union> (funStar SS ` LVE)", "using Awhile(10) LVE_LVE"], ["proof (prove)\nusing this:\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  LVE \\<subseteq> \\<Union> (funStar SS ` LVE)\n\ngoal (1 subgoal):\n 1. (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> Es \\<union> \\<Union> (funStar SS ` LVE)", "by blast"], ["proof (state)\nthis:\n  \\<forall>l s. pre C I l s \\<longrightarrow> I l (postQ C s)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "hence step: \"\\<And>l s. pre C I  l s \\<Longrightarrow> I l (postQ C s)\""], ["proof (prove)\nusing this:\n  \\<forall>l s. pre C I l s \\<longrightarrow> I l (postQ C s)\n\ngoal (1 subgoal):\n 1. \\<And>l s. pre C I l s \\<Longrightarrow> I l (postQ C s)", "by simp"], ["proof (state)\nthis:\n  pre C I ?l1 ?s1 \\<Longrightarrow> I ?l1 (postQ C ?s1)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "have fua: \"lesvars ?upds = lesvars upds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lesvars\n     (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds) =\n    lesvars upds", "by force"], ["proof (state)\nthis:\n  lesvars\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds) =\n  lesvars upds\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "let ?upds' = \"(?z,E,Es) # ?upds\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 C Q upds LVE LVQ.\n       \\<lbrakk>\\<And>Q upds LVE LVQ.\n                   \\<lbrakk>vc C Q LVQ LVE; finite (support Q);\n                    lesvars upds \\<inter> varacom C = {};\n                    distinct (map fst upds); finite (varacom C);\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n                    \\<forall>l s1 s2.\n                       s1 = s2 on LVE \\<longrightarrow>\n                       postList upds l s1 = postList upds l s2;\n                    \\<forall>(a, b, c)\\<in>set upds.\n                       \\<forall>s1 s2.\n                          s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n                    (\\<Union>(a, b, c)\\<in>set upds. c)\n                    \\<subseteq> LVE\\<rbrakk>\n                   \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                        pre C Q l s \\<and> preList upds C l s}\n                    strip C\n                    { time\n                       C \\<Down> \\<lambda>l s.\n                                    Q l s \\<and> postList upds l s} \\<and>\n                                     (\\<forall>l s.\n   pre C Q l s \\<longrightarrow> Q l (postQ C s)) \\<and>\n                                     K4 upds LVQ C Q;\n        vc ({x1} WHILE x2 DO C) Q LVQ LVE; finite (support Q);\n        lesvars upds \\<inter> varacom ({x1} WHILE x2 DO C) = {};\n        distinct (map fst upds); finite (varacom ({x1} WHILE x2 DO C));\n        \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2;\n        \\<forall>l s1 s2.\n           s1 = s2 on LVE \\<longrightarrow>\n           postList upds l s1 = postList upds l s2;\n        \\<forall>(a, b, c)\\<in>set upds.\n           \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n            pre ({x1} WHILE x2 DO C) Q l s \\<and>\n            preList upds ({x1} WHILE x2 DO C) l s}\n        strip ({x1} WHILE x2 DO C)\n        { time\n           ({x1} WHILE x2\n            DO C) \\<Down> \\<lambda>l s.\n                             Q l s \\<and> postList upds l s} \\<and>\n                         (\\<forall>l s.\n                             pre ({x1} WHILE x2 DO C) Q l\n                              s \\<longrightarrow>\n                             Q l (postQ ({x1} WHILE x2 DO C) s)) \\<and>\n                         K4 upds LVQ ({x1} WHILE x2 DO C) Q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s} \\<and>\n    (\\<forall>l s.\n        pre ({A} WHILE b DO C) Q l s \\<longrightarrow>\n        Q l (postQ ({A} WHILE b DO C) s)) \\<and>\n    K4 upds LVQ ({A} WHILE b DO C) Q", "proof (safe, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. \\<And>l s.\n       pre ({A} WHILE b DO C) Q l s \\<Longrightarrow>\n       Q l (postQ ({A} WHILE b DO C) s)\n 3. K4 upds LVQ ({A} WHILE b DO C) Q", "case (2 l s)"], ["proof (state)\nthis:\n  pre ({A} WHILE b DO C) Q l s\n\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. \\<And>l s.\n       pre ({A} WHILE b DO C) Q l s \\<Longrightarrow>\n       Q l (postQ ({A} WHILE b DO C) s)\n 3. K4 upds LVQ ({A} WHILE b DO C) Q", "from 2"], ["proof (chain)\npicking this:\n  pre ({A} WHILE b DO C) Q l s", "have A: \"I l s\""], ["proof (prove)\nusing this:\n  pre ({A} WHILE b DO C) Q l s\n\ngoal (1 subgoal):\n 1. I l s", "unfolding aha"], ["proof (prove)\nusing this:\n  pre ({((I, Is), S, E, Es, SS)} WHILE b DO C) Q l s\n\ngoal (1 subgoal):\n 1. I l s", "by(simp)"], ["proof (state)\nthis:\n  I l s\n\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. \\<And>l s.\n       pre ({A} WHILE b DO C) Q l s \\<Longrightarrow>\n       Q l (postQ ({A} WHILE b DO C) s)\n 3. K4 upds LVQ ({A} WHILE b DO C) Q", "then"], ["proof (chain)\npicking this:\n  I l s", "have I: \"I l s\""], ["proof (prove)\nusing this:\n  I l s\n\ngoal (1 subgoal):\n 1. I l s", "by simp"], ["proof (state)\nthis:\n  I l s\n\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. \\<And>l s.\n       pre ({A} WHILE b DO C) Q l s \\<Longrightarrow>\n       Q l (postQ ({A} WHILE b DO C) s)\n 3. K4 upds LVQ ({A} WHILE b DO C) Q", "{"], ["proof (state)\nthis:\n  I l s\n\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. \\<And>l s.\n       pre ({A} WHILE b DO C) Q l s \\<Longrightarrow>\n       Q l (postQ ({A} WHILE b DO C) s)\n 3. K4 upds LVQ ({A} WHILE b DO C) Q", "fix n"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. \\<And>l s.\n       pre ({A} WHILE b DO C) Q l s \\<Longrightarrow>\n       Q l (postQ ({A} WHILE b DO C) s)\n 3. K4 upds LVQ ({A} WHILE b DO C) Q", "have \"E s = n \\<Longrightarrow> I l s \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>E s = n; I l s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)", "proof (induct n arbitrary: s l rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x s l.\n       \\<lbrakk>\\<And>y s l.\n                   \\<lbrakk>y < x; E s = y; I l s\\<rbrakk>\n                   \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n        E s = x; I l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)", "case (less n)"], ["proof (state)\nthis:\n  \\<lbrakk>?y1 < n; E ?s1 = ?y1; I ?l1 ?s1\\<rbrakk>\n  \\<Longrightarrow> Q ?l1 (postQ ({A} WHILE b DO C) ?s1)\n  E s = n\n  I l s\n\ngoal (1 subgoal):\n 1. \\<And>x s l.\n       \\<lbrakk>\\<And>y s l.\n                   \\<lbrakk>y < x; E s = y; I l s\\<rbrakk>\n                   \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n        E s = x; I l s\\<rbrakk>\n       \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?y1 < n; E ?s1 = ?y1; I ?l1 ?s1\\<rbrakk>\n  \\<Longrightarrow> Q ?l1 (postQ ({A} WHILE b DO C) ?s1)\n  E s = n\n  I l s", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 < n; E ?s1 = ?y1; I ?l1 ?s1\\<rbrakk>\n  \\<Longrightarrow> Q ?l1 (postQ ({A} WHILE b DO C) ?s1)\n  E s = n\n  I l s\n\ngoal (1 subgoal):\n 1. Q l (postQ ({A} WHILE b DO C) s)", "proof (cases \"bval b s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)\n 2. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; \\<not> bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)", "case True"], ["proof (state)\nthis:\n  bval b s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)\n 2. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; \\<not> bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)", "with less IQ2"], ["proof (chain)\npicking this:\n  \\<lbrakk>?y1 < n; E ?s1 = ?y1; I ?l1 ?s1\\<rbrakk>\n  \\<Longrightarrow> Q ?l1 (postQ ({A} WHILE b DO C) ?s1)\n  E s = n\n  I l s\n  \\<lbrakk>I ?l ?s; bval b ?s\\<rbrakk>\n  \\<Longrightarrow> pre C I ?l ?s \\<and>\n                    1 + preT C E ?s + time C ?s \\<le> E ?s \\<and>\n                    S ?s = S (postQ C ?s)\n                    on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  bval b s", "have \"pre C I l s\" and S: \"S s = S (postQ C s) on ?LV\" and t: \"1 + preT C E s + time C s \\<le> E s\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 < n; E ?s1 = ?y1; I ?l1 ?s1\\<rbrakk>\n  \\<Longrightarrow> Q ?l1 (postQ ({A} WHILE b DO C) ?s1)\n  E s = n\n  I l s\n  \\<lbrakk>I ?l ?s; bval b ?s\\<rbrakk>\n  \\<Longrightarrow> pre C I ?l ?s \\<and>\n                    1 + preT C E ?s + time C ?s \\<le> E ?s \\<and>\n                    S ?s = S (postQ C ?s)\n                    on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  bval b s\n\ngoal (1 subgoal):\n 1. pre C I l s &&&\n    S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ)) &&&\n    1 + preT C E s + time C s \\<le> E s", "by auto"], ["proof (state)\nthis:\n  pre C I l s\n  S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  1 + preT C E s + time C s \\<le> E s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)\n 2. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; \\<not> bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)", "with step"], ["proof (chain)\npicking this:\n  pre C I ?l1 ?s1 \\<Longrightarrow> I ?l1 (postQ C ?s1)\n  pre C I l s\n  S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  1 + preT C E s + time C s \\<le> E s", "have I': \"I l (postQ C s)\" and \"1 + E (postQ C s) + time C s \\<le> E s\""], ["proof (prove)\nusing this:\n  pre C I ?l1 ?s1 \\<Longrightarrow> I ?l1 (postQ C ?s1)\n  pre C I l s\n  S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  1 + preT C E s + time C s \\<le> E s\n\ngoal (1 subgoal):\n 1. I l (postQ C s) &&& 1 + E (postQ C s) + time C s \\<le> E s", "using TQ"], ["proof (prove)\nusing this:\n  pre C I ?l1 ?s1 \\<Longrightarrow> I ?l1 (postQ C ?s1)\n  pre C I l s\n  S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  1 + preT C E s + time C s \\<le> E s\n  preT ?C ?e ?s = ?e (postQ ?C ?s)\n\ngoal (1 subgoal):\n 1. I l (postQ C s) &&& 1 + E (postQ C s) + time C s \\<le> E s", "by auto"], ["proof (state)\nthis:\n  I l (postQ C s)\n  1 + E (postQ C s) + time C s \\<le> E s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)\n 2. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; \\<not> bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)", "with less"], ["proof (chain)\npicking this:\n  \\<lbrakk>?y1 < n; E ?s1 = ?y1; I ?l1 ?s1\\<rbrakk>\n  \\<Longrightarrow> Q ?l1 (postQ ({A} WHILE b DO C) ?s1)\n  E s = n\n  I l s\n  I l (postQ C s)\n  1 + E (postQ C s) + time C s \\<le> E s", "have \"E (postQ C s) < n\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 < n; E ?s1 = ?y1; I ?l1 ?s1\\<rbrakk>\n  \\<Longrightarrow> Q ?l1 (postQ ({A} WHILE b DO C) ?s1)\n  E s = n\n  I l s\n  I l (postQ C s)\n  1 + E (postQ C s) + time C s \\<le> E s\n\ngoal (1 subgoal):\n 1. E (postQ C s) < n", "by auto"], ["proof (state)\nthis:\n  E (postQ C s) < n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)\n 2. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; \\<not> bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)", "with less(1) I'"], ["proof (chain)\npicking this:\n  \\<lbrakk>?y1 < n; E ?s1 = ?y1; I ?l1 ?s1\\<rbrakk>\n  \\<Longrightarrow> Q ?l1 (postQ ({A} WHILE b DO C) ?s1)\n  I l (postQ C s)\n  E (postQ C s) < n", "have \"Q l (postQ ({A} WHILE b DO C) (postQ C s))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 < n; E ?s1 = ?y1; I ?l1 ?s1\\<rbrakk>\n  \\<Longrightarrow> Q ?l1 (postQ ({A} WHILE b DO C) ?s1)\n  I l (postQ C s)\n  E (postQ C s) < n\n\ngoal (1 subgoal):\n 1. Q l (postQ ({A} WHILE b DO C) (postQ C s))", "by auto"], ["proof (state)\nthis:\n  Q l (postQ ({A} WHILE b DO C) (postQ C s))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)\n 2. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; \\<not> bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)", "with step"], ["proof (chain)\npicking this:\n  pre C I ?l1 ?s1 \\<Longrightarrow> I ?l1 (postQ C ?s1)\n  Q l (postQ ({A} WHILE b DO C) (postQ C s))", "show ?thesis"], ["proof (prove)\nusing this:\n  pre C I ?l1 ?s1 \\<Longrightarrow> I ?l1 (postQ C ?s1)\n  Q l (postQ ({A} WHILE b DO C) (postQ C s))\n\ngoal (1 subgoal):\n 1. Q l (postQ ({A} WHILE b DO C) s)", "using S"], ["proof (prove)\nusing this:\n  pre C I ?l1 ?s1 \\<Longrightarrow> I ?l1 (postQ C ?s1)\n  Q l (postQ ({A} WHILE b DO C) (postQ C s))\n  S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n\ngoal (1 subgoal):\n 1. Q l (postQ ({A} WHILE b DO C) s)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l s. pre C I l s \\<Longrightarrow> I l (postQ C s);\n     Q l (S (postQ C s));\n     S s = S (postQ C s)\n     on \\<Union> (funStar SS ` LVE) \\<union>\n        \\<Union> (funStar SS ` LVQ)\\<rbrakk>\n    \\<Longrightarrow> Q l (S s)", "using Awhile(7)"], ["proof (prove)\nusing this:\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l s. pre C I l s \\<Longrightarrow> I l (postQ C s);\n     Q l (S (postQ C s));\n     S s = S (postQ C s)\n     on \\<Union> (funStar SS ` LVE) \\<union>\n        \\<Union> (funStar SS ` LVQ)\\<rbrakk>\n    \\<Longrightarrow> Q l (S s)", "by (metis (no_types, lifting) LV_LV SUP_union contra_subsetD sup.boundedE)"], ["proof (state)\nthis:\n  Q l (postQ ({A} WHILE b DO C) s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; \\<not> bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; \\<not> bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)", "case False"], ["proof (state)\nthis:\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; \\<not> bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)", "with pre2 less(3)"], ["proof (chain)\npicking this:\n  \\<lbrakk>I ?l ?s; \\<not> bval b ?s\\<rbrakk>\n  \\<Longrightarrow> Q ?l ?s \\<and>\n                    1 \\<le> E ?s \\<and>\n                    S ?s = ?s on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  I l s\n  \\<not> bval b s", "have \"Q l s\" \"S s = s  on ?LV\""], ["proof (prove)\nusing this:\n  \\<lbrakk>I ?l ?s; \\<not> bval b ?s\\<rbrakk>\n  \\<Longrightarrow> Q ?l ?s \\<and>\n                    1 \\<le> E ?s \\<and>\n                    S ?s = ?s on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  I l s\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. Q l s &&& S s = s on \\<Union> (funStar SS ` (LVE \\<union> LVQ))", "by auto"], ["proof (state)\nthis:\n  Q l s\n  S s = s on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s l.\n                \\<lbrakk>y < n; E s = y; I l s\\<rbrakk>\n                \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s);\n     E s = n; I l s; \\<not> bval b s\\<rbrakk>\n    \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)", "then"], ["proof (chain)\npicking this:\n  Q l s\n  S s = s on \\<Union> (funStar SS ` (LVE \\<union> LVQ))", "show ?thesis"], ["proof (prove)\nusing this:\n  Q l s\n  S s = s on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n\ngoal (1 subgoal):\n 1. Q l (postQ ({A} WHILE b DO C) s)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Q l s;\n     S s = s\n     on \\<Union> (funStar SS ` LVE) \\<union>\n        \\<Union> (funStar SS ` LVQ)\\<rbrakk>\n    \\<Longrightarrow> Q l (S s)", "using Awhile(7)"], ["proof (prove)\nusing this:\n  \\<forall>l s1 s2. s1 = s2 on LVQ \\<longrightarrow> Q l s1 = Q l s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Q l s;\n     S s = s\n     on \\<Union> (funStar SS ` LVE) \\<union>\n        \\<Union> (funStar SS ` LVQ)\\<rbrakk>\n    \\<Longrightarrow> Q l (S s)", "by (metis (no_types, lifting) LV_LV SUP_union contra_subsetD sup.boundedE)"], ["proof (state)\nthis:\n  Q l (postQ ({A} WHILE b DO C) s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Q l (postQ ({A} WHILE b DO C) s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>E s = n; I l s\\<rbrakk>\n  \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)\n\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. \\<And>l s.\n       pre ({A} WHILE b DO C) Q l s \\<Longrightarrow>\n       Q l (postQ ({A} WHILE b DO C) s)\n 3. K4 upds LVQ ({A} WHILE b DO C) Q", "}"], ["proof (state)\nthis:\n  \\<lbrakk>E s = ?n3; I l s\\<rbrakk>\n  \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)\n\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. \\<And>l s.\n       pre ({A} WHILE b DO C) Q l s \\<Longrightarrow>\n       Q l (postQ ({A} WHILE b DO C) s)\n 3. K4 upds LVQ ({A} WHILE b DO C) Q", "with I"], ["proof (chain)\npicking this:\n  I l s\n  \\<lbrakk>E s = ?n3; I l s\\<rbrakk>\n  \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)", "show \"Q l (postQ ({A} WHILE b DO C) s)\""], ["proof (prove)\nusing this:\n  I l s\n  \\<lbrakk>E s = ?n3; I l s\\<rbrakk>\n  \\<Longrightarrow> Q l (postQ ({A} WHILE b DO C) s)\n\ngoal (1 subgoal):\n 1. Q l (postQ ({A} WHILE b DO C) s)", "by simp"], ["proof (state)\nthis:\n  Q l (postQ ({A} WHILE b DO C) s)\n\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. K4 upds LVQ ({A} WHILE b DO C) Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. K4 upds LVQ ({A} WHILE b DO C) Q", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. K4 upds LVQ ({A} WHILE b DO C) Q", "have g: \"\\<And>e. e \\<circ> S = (%s. e (S s)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e. e \\<circ> S = (\\<lambda>s. e (S s))", "by auto"], ["proof (state)\nthis:\n  ?e1 \\<circ> S = (\\<lambda>s. ?e1 (S s))\n\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. K4 upds LVQ ({A} WHILE b DO C) Q", "have \"lesvars ?upds' \\<inter> varacom C = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lesvars\n     ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n       E, Es) #\n      map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds) \\<inter>\n    varacom C =\n    {}", "using yC blb"], ["proof (prove)\nusing this:\n  lesvars upds \\<inter> varacom C = {}\n  (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n  \\<notin> varacom C\n\ngoal (1 subgoal):\n 1. lesvars\n     ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n       E, Es) #\n      map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds) \\<inter>\n    varacom C =\n    {}", "by(auto)"], ["proof (state)\nthis:\n  lesvars\n   ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C), E,\n     Es) #\n    map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds) \\<inter>\n  varacom C =\n  {}\n\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. K4 upds LVQ ({A} WHILE b DO C) Q", "have z: \"(fst \\<circ> (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union>x\\<in>v. SS x))) = fst\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst \\<circ>\n    (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v))) =\n    fst", "by(auto)"], ["proof (state)\nthis:\n  fst \\<circ>\n  (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v))) =\n  fst\n\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. K4 upds LVQ ({A} WHILE b DO C) Q", "have \"distinct (map fst ?upds')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct\n     (map fst\n       ((SOME z.\n            z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n         E, Es) #\n        map (\\<lambda>(x, e, v).\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n         upds))", "using Awhile(5) zny"], ["proof (prove)\nusing this:\n  distinct (map fst upds)\n  (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n  \\<notin> lesvars upds\n\ngoal (1 subgoal):\n 1. distinct\n     (map fst\n       ((SOME z.\n            z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n         E, Es) #\n        map (\\<lambda>(x, e, v).\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n         upds))", "by (auto simp add: z)"], ["proof (state)\nthis:\n  distinct\n   (map fst\n     ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n       E, Es) #\n      map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds))\n\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. K4 upds LVQ ({A} WHILE b DO C) Q", "have klae: \"\\<And>s1 s2 A B. B \\<subseteq> A \\<Longrightarrow> s1 = s2 on A \\<Longrightarrow> s1 = s2 on B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s1 s2 A B.\n       \\<lbrakk>B \\<subseteq> A; s1 = s2 on A\\<rbrakk>\n       \\<Longrightarrow> s1 = s2 on B", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?B3 \\<subseteq> ?A3; ?s1.3 = ?s2.3 on ?A3\\<rbrakk>\n  \\<Longrightarrow> ?s1.3 = ?s2.3 on ?B3\n\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. K4 upds LVQ ({A} WHILE b DO C) Q", "from Awhile(8) Awhile(9)"], ["proof (chain)\npicking this:\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2", "have gl: \"\\<And>a b c s1 s2. (a,b,c) \\<in> set upds \\<Longrightarrow> s1 = s2 on c \\<Longrightarrow> b s1 = b s2\""], ["proof (prove)\nusing this:\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n\ngoal (1 subgoal):\n 1. \\<And>a b c s1 s2.\n       \\<lbrakk>(a, b, c) \\<in> set upds; s1 = s2 on c\\<rbrakk>\n       \\<Longrightarrow> b s1 = b s2", "by fast"], ["proof (state)\nthis:\n  \\<lbrakk>(?a4, ?b4, ?c4) \\<in> set upds; ?s1.4 = ?s2.4 on ?c4\\<rbrakk>\n  \\<Longrightarrow> ?b4 ?s1.4 = ?b4 ?s2.4\n\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. K4 upds LVQ ({A} WHILE b DO C) Q", "have CombALL: \" \\<turnstile>\\<^sub>1 {\\<lambda>l s. pre C I l s \\<and> preList ?upds' C l s}\n                  strip C\n                  { time C \\<Down> \\<lambda>l s. I l s \\<and> postList ?upds' l s}   \\<and>\n(\\<forall>l s. pre C I l s \\<longrightarrow> I l (postQ C s)) \\<and> K4 ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C), E, Es) # map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union>x\\<in>v. SS x)) upds) Is C I \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre C I l s \\<and>\n                             preList\n                              ((SOME z.\n                                   z \\<notin> lesvars upds \\<union>\n        varacom ({A} WHILE b DO C),\n                                E, Es) #\n                               map (\\<lambda>(x, e, v).\n (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                upds)\n                              C l s}\n                         strip C\n                         { time\n                            C \\<Down> \\<lambda>l s.\n   I l s \\<and>\n   postList\n    ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n      E, Es) #\n     map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n      upds)\n    l s} \\<and>\n    (\\<forall>l s. pre C I l s \\<longrightarrow> I l (postQ C s)) \\<and>\n    K4 ((SOME z.\n            z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n         E, Es) #\n        map (\\<lambda>(x, e, v).\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n         upds)\n     Is C I", "apply(rule Awhile.IH[where upds=\"?upds'\" ] )"], ["proof (prove)\ngoal (9 subgoals):\n 1. vc C I Is ?LVE\n 2. finite (support I)\n 3. lesvars\n     ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n       E, Es) #\n      map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds) \\<inter>\n    varacom C =\n    {}\n 4. distinct\n     (map fst\n       ((SOME z.\n            z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n         E, Es) #\n        map (\\<lambda>(x, e, v).\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n         upds))\n 5. finite (varacom C)\n 6. \\<forall>l s1 s2. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2\n 7. \\<forall>l s1 s2.\n       s1 = s2 on ?LVE \\<longrightarrow>\n       postList\n        ((SOME z.\n             z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n          E, Es) #\n         map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s1 =\n       postList\n        ((SOME z.\n             z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n          E, Es) #\n         map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s2\n 8. \\<forall>a\\<in>set ((SOME z.\n                            z \\<notin> lesvars upds \\<union>\n varacom ({A} WHILE b DO C),\n                         E, Es) #\n                        map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         upds).\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n 9. (\\<Union>a\\<in>set ((SOME z.\n                            z \\<notin> lesvars upds \\<union>\n varacom ({A} WHILE b DO C),\n                         E, Es) #\n                        map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         upds).\n        case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> ?LVE", "apply (fact)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<forall>l s1 s2. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2\n 2. \\<forall>l s1 s2.\n       s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE) \\<longrightarrow>\n       postList\n        ((SOME z.\n             z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n          E, Es) #\n         map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s1 =\n       postList\n        ((SOME z.\n             z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n          E, Es) #\n         map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s2\n 3. \\<forall>a\\<in>set ((SOME z.\n                            z \\<notin> lesvars upds \\<union>\n varacom ({A} WHILE b DO C),\n                         E, Es) #\n                        map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         upds).\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n 4. (\\<Union>a\\<in>set ((SOME z.\n                            z \\<notin> lesvars upds \\<union>\n varacom ({A} WHILE b DO C),\n                         E, Es) #\n                        map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         upds).\n        case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> Es \\<union> \\<Union> (funStar SS ` LVE)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l s1 s2. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on Is; I l s1\\<rbrakk> \\<Longrightarrow> I l s2\n 2. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on Is; I l s2\\<rbrakk> \\<Longrightarrow> I l s1", "using Is"], ["proof (prove)\nusing this:\n  \\<forall>s1 s2 l. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2\n\ngoal (2 subgoals):\n 1. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on Is; I l s1\\<rbrakk> \\<Longrightarrow> I l s2\n 2. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on Is; I l s2\\<rbrakk> \\<Longrightarrow> I l s1", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on Is; I l s2\\<rbrakk> \\<Longrightarrow> I l s1", "using Is"], ["proof (prove)\nusing this:\n  \\<forall>s1 s2 l. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2\n\ngoal (1 subgoal):\n 1. \\<And>l s1 s2.\n       \\<lbrakk>s1 = s2 on Is; I l s2\\<rbrakk> \\<Longrightarrow> I l s1", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE) \\<longrightarrow>\n       postList\n        ((SOME z.\n             z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n          E, Es) #\n         map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s1 =\n       postList\n        ((SOME z.\n             z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n          E, Es) #\n         map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s2\n 2. \\<forall>a\\<in>set ((SOME z.\n                            z \\<notin> lesvars upds \\<union>\n varacom ({A} WHILE b DO C),\n                         E, Es) #\n                        map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         upds).\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n 3. (\\<Union>a\\<in>set ((SOME z.\n                            z \\<notin> lesvars upds \\<union>\n varacom ({A} WHILE b DO C),\n                         E, Es) #\n                        map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         upds).\n        case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> Es \\<union> \\<Union> (funStar SS ` LVE)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE) \\<longrightarrow>\n       postList\n        ((SOME z.\n             z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n          E, Es) #\n         map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s1 =\n       postList\n        ((SOME z.\n             z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n          E, Es) #\n         map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s2", "using Is Es"], ["proof (prove)\nusing this:\n  \\<forall>s1 s2 l. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2\n  \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2\n\ngoal (1 subgoal):\n 1. \\<forall>l s1 s2.\n       s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE) \\<longrightarrow>\n       postList\n        ((SOME z.\n             z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n          E, Es) #\n         map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s1 =\n       postList\n        ((SOME z.\n             z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n          E, Es) #\n         map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s2", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l s1 s2.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s1;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s1\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            upds)\n                          l s2\n 2. \\<And>l s1 s2.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s2\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            upds)\n                          l s1", "apply(simp_all add: postListpostSet2, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s1;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s1;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s2)\n 2. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "proof (goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s1;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s1;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s2)\n 2. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "case (1 l s1 s2 x e v)"], ["proof (state)\nthis:\n  \\<forall>s1 s2.\n     s1 = s2 on Is \\<longrightarrow> (\\<forall>l. I l s1 = I l s2)\n  \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2\n  s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE)\n  l (SOME z.\n        z \\<notin> lesvars upds \\<and>\n        z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n  E s1\n  \\<forall>x\\<in>set upds.\n     case case x of\n          (x, e, v) \\<Rightarrow>\n            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n     (x, e, v) \\<Rightarrow> l x = e s1\n  (x, e, v) \\<in> set upds\n\ngoal (2 subgoals):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s1;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s1;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s2)\n 2. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "from 1(5,6)"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set upds.\n     case case x of\n          (x, e, v) \\<Rightarrow>\n            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n     (x, e, v) \\<Rightarrow> l x = e s1\n  (x, e, v) \\<in> set upds", "have i: \"l x = e (S s1)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set upds.\n     case case x of\n          (x, e, v) \\<Rightarrow>\n            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n     (x, e, v) \\<Rightarrow> l x = e s1\n  (x, e, v) \\<in> set upds\n\ngoal (1 subgoal):\n 1. l x = e (S s1)", "by auto"], ["proof (state)\nthis:\n  l x = e (S s1)\n\ngoal (2 subgoals):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s1;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s1;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s2)\n 2. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "from  Awhile(10) 1(6)"], ["proof (chain)\npicking this:\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  (x, e, v) \\<in> set upds", "have vLC: \"v \\<subseteq> LVE\""], ["proof (prove)\nusing this:\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  (x, e, v) \\<in> set upds\n\ngoal (1 subgoal):\n 1. v \\<subseteq> LVE", "by auto"], ["proof (state)\nthis:\n  v \\<subseteq> LVE\n\ngoal (2 subgoals):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s1;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s1;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s2)\n 2. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "have st: \"(\\<Union>y\\<in>v. SS y) \\<subseteq> (\\<Union>y\\<in>LVE. SS y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (SS ` v) \\<subseteq> \\<Union> (SS ` LVE)", "using vLC"], ["proof (prove)\nusing this:\n  v \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. \\<Union> (SS ` v) \\<subseteq> \\<Union> (SS ` LVE)", "by blast"], ["proof (state)\nthis:\n  \\<Union> (SS ` v) \\<subseteq> \\<Union> (SS ` LVE)\n\ngoal (2 subgoals):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s1;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s1;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s2)\n 2. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "also"], ["proof (state)\nthis:\n  \\<Union> (SS ` v) \\<subseteq> \\<Union> (SS ` LVE)\n\ngoal (2 subgoals):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s1;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s1;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s2)\n 2. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "have \"\\<dots> \\<subseteq> (\\<Union>y\\<in>LVE. funStar SS y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (SS ` LVE) \\<subseteq> \\<Union> (funStar SS ` LVE)", "using LVE_LV2"], ["proof (prove)\nusing this:\n  \\<Union> (SS ` LVE) \\<subseteq> \\<Union> (funStar SS ` LVE)\n\ngoal (1 subgoal):\n 1. \\<Union> (SS ` LVE) \\<subseteq> \\<Union> (funStar SS ` LVE)", "by blast"], ["proof (state)\nthis:\n  \\<Union> (SS ` LVE) \\<subseteq> \\<Union> (funStar SS ` LVE)\n\ngoal (2 subgoals):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s1;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s1;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s2)\n 2. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "finally"], ["proof (chain)\npicking this:\n  \\<Union> (SS ` v) \\<subseteq> \\<Union> (funStar SS ` LVE)", "have st: \"(\\<Union>y\\<in>v. SS y) \\<subseteq>  Es \\<union> (\\<Union>y\\<in>LVE. funStar SS y)\""], ["proof (prove)\nusing this:\n  \\<Union> (SS ` v) \\<subseteq> \\<Union> (funStar SS ` LVE)\n\ngoal (1 subgoal):\n 1. \\<Union> (SS ` v) \\<subseteq> Es \\<union> \\<Union> (funStar SS ` LVE)", "by blast"], ["proof (state)\nthis:\n  \\<Union> (SS ` v) \\<subseteq> Es \\<union> \\<Union> (funStar SS ` LVE)\n\ngoal (2 subgoals):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s1;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s1;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s2)\n 2. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "have ii: \"e (S s1) = e (S s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e (S s1) = e (S s2)", "apply(rule gl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (?a4, e, ?c4) \\<in> set upds\n 2. S s1 = S s2 on ?c4", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. S s1 = S s2 on v", "apply(rule Ssc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. v \\<subseteq> LVE\n 2. s1 = s2 on \\<Union> (SS ` v)", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 = s2 on \\<Union> (SS ` v)", "using st 1(3)"], ["proof (prove)\nusing this:\n  \\<Union> (SS ` v) \\<subseteq> Es \\<union> \\<Union> (funStar SS ` LVE)\n  s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE)\n\ngoal (1 subgoal):\n 1. s1 = s2 on \\<Union> (SS ` v)", "by blast"], ["proof (state)\nthis:\n  e (S s1) = e (S s2)\n\ngoal (2 subgoals):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s1;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s1;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s2)\n 2. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "from i ii"], ["proof (chain)\npicking this:\n  l x = e (S s1)\n  e (S s1) = e (S s2)", "show ?case"], ["proof (prove)\nusing this:\n  l x = e (S s1)\n  e (S s1) = e (S s2)\n\ngoal (1 subgoal):\n 1. l x = e (S s2)", "by simp"], ["proof (state)\nthis:\n  l x = e (S s2)\n\ngoal (1 subgoal):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "case (2 l s1 s2 x e v)"], ["proof (state)\nthis:\n  \\<forall>s1 s2.\n     s1 = s2 on Is \\<longrightarrow> (\\<forall>l. I l s1 = I l s2)\n  \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2\n  s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE)\n  l (SOME z.\n        z \\<notin> lesvars upds \\<and>\n        z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n  E s2\n  \\<forall>x\\<in>set upds.\n     case case x of\n          (x, e, v) \\<Rightarrow>\n            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n     (x, e, v) \\<Rightarrow> l x = e s2\n  (x, e, v) \\<in> set upds\n\ngoal (1 subgoal):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "from 2(5,6)"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set upds.\n     case case x of\n          (x, e, v) \\<Rightarrow>\n            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n     (x, e, v) \\<Rightarrow> l x = e s2\n  (x, e, v) \\<in> set upds", "have i: \"l x = e (S s2)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set upds.\n     case case x of\n          (x, e, v) \\<Rightarrow>\n            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n     (x, e, v) \\<Rightarrow> l x = e s2\n  (x, e, v) \\<in> set upds\n\ngoal (1 subgoal):\n 1. l x = e (S s2)", "by auto"], ["proof (state)\nthis:\n  l x = e (S s2)\n\ngoal (1 subgoal):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "from  Awhile(10) 2(6)"], ["proof (chain)\npicking this:\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  (x, e, v) \\<in> set upds", "have vLC: \"v \\<subseteq> LVE\""], ["proof (prove)\nusing this:\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  (x, e, v) \\<in> set upds\n\ngoal (1 subgoal):\n 1. v \\<subseteq> LVE", "by auto"], ["proof (state)\nthis:\n  v \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "have st: \"(\\<Union>y\\<in>v. SS y) \\<subseteq> (\\<Union>y\\<in>LVE. SS y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (SS ` v) \\<subseteq> \\<Union> (SS ` LVE)", "using vLC"], ["proof (prove)\nusing this:\n  v \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. \\<Union> (SS ` v) \\<subseteq> \\<Union> (SS ` LVE)", "by blast"], ["proof (state)\nthis:\n  \\<Union> (SS ` v) \\<subseteq> \\<Union> (SS ` LVE)\n\ngoal (1 subgoal):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "also"], ["proof (state)\nthis:\n  \\<Union> (SS ` v) \\<subseteq> \\<Union> (SS ` LVE)\n\ngoal (1 subgoal):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "have \"\\<dots> \\<subseteq> (\\<Union>y\\<in>LVE. funStar SS y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (SS ` LVE) \\<subseteq> \\<Union> (funStar SS ` LVE)", "using LVE_LV2"], ["proof (prove)\nusing this:\n  \\<Union> (SS ` LVE) \\<subseteq> \\<Union> (funStar SS ` LVE)\n\ngoal (1 subgoal):\n 1. \\<Union> (SS ` LVE) \\<subseteq> \\<Union> (funStar SS ` LVE)", "by blast"], ["proof (state)\nthis:\n  \\<Union> (SS ` LVE) \\<subseteq> \\<Union> (funStar SS ` LVE)\n\ngoal (1 subgoal):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "finally"], ["proof (chain)\npicking this:\n  \\<Union> (SS ` v) \\<subseteq> \\<Union> (funStar SS ` LVE)", "have st: \"(\\<Union>y\\<in>v. SS y) \\<subseteq>  Es \\<union> (\\<Union>y\\<in>LVE. funStar SS y)\""], ["proof (prove)\nusing this:\n  \\<Union> (SS ` v) \\<subseteq> \\<Union> (funStar SS ` LVE)\n\ngoal (1 subgoal):\n 1. \\<Union> (SS ` v) \\<subseteq> Es \\<union> \\<Union> (funStar SS ` LVE)", "by blast"], ["proof (state)\nthis:\n  \\<Union> (SS ` v) \\<subseteq> Es \\<union> \\<Union> (funStar SS ` LVE)\n\ngoal (1 subgoal):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "have ii: \"e (S s1) = e (S s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e (S s1) = e (S s2)", "apply(rule gl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (?a4, e, ?c4) \\<in> set upds\n 2. S s1 = S s2 on ?c4", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. S s1 = S s2 on v", "apply(rule Ssc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. v \\<subseteq> LVE\n 2. s1 = s2 on \\<Union> (SS ` v)", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 = s2 on \\<Union> (SS ` v)", "using st 2(3)"], ["proof (prove)\nusing this:\n  \\<Union> (SS ` v) \\<subseteq> Es \\<union> \\<Union> (funStar SS ` LVE)\n  s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE)\n\ngoal (1 subgoal):\n 1. s1 = s2 on \\<Union> (SS ` v)", "by blast"], ["proof (state)\nthis:\n  e (S s1) = e (S s2)\n\ngoal (1 subgoal):\n 1. \\<And>l s1 s2 a aa ba.\n       \\<lbrakk>\\<forall>s1 s2.\n                   s1 = s2 on Is \\<longrightarrow>\n                   (\\<forall>l. I l s1 = I l s2);\n        \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2;\n        s1 = s2 on Es \\<union> \\<Union> (funStar SS ` LVE);\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C)) =\n        E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (x, e, v) \\<Rightarrow> l x = e s2;\n        (a, aa, ba) \\<in> set upds\\<rbrakk>\n       \\<Longrightarrow> l a = aa (S s1)", "from i ii"], ["proof (chain)\npicking this:\n  l x = e (S s2)\n  e (S s1) = e (S s2)", "show ?case"], ["proof (prove)\nusing this:\n  l x = e (S s2)\n  e (S s1) = e (S s2)\n\ngoal (1 subgoal):\n 1. l x = e (S s1)", "by simp"], ["proof (state)\nthis:\n  l x = e (S s1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>a\\<in>set ((SOME z.\n                            z \\<notin> lesvars upds \\<union>\n varacom ({A} WHILE b DO C),\n                         E, Es) #\n                        map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         upds).\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n 2. (\\<Union>a\\<in>set ((SOME z.\n                            z \\<notin> lesvars upds \\<union>\n varacom ({A} WHILE b DO C),\n                         E, Es) #\n                        map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         upds).\n        case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> Es \\<union> \\<Union> (funStar SS ` LVE)", "apply(auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s1 s2. s1 = s2 on Es \\<Longrightarrow> E s1 = E s2\n 2. \\<And>a aa b s1 s2.\n       \\<lbrakk>(a, aa, b) \\<in> set upds;\n        \\<forall>y\\<in>b. s1 = s2 on SS y\\<rbrakk>\n       \\<Longrightarrow> aa (S s1) = aa (S s2)\n 3. \\<And>x a aa b xa.\n       \\<lbrakk>(a, aa, b) \\<in> set upds; xa \\<in> b; x \\<in> SS xa;\n        \\<forall>xa\\<in>LVE. x \\<notin> funStar SS xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Es", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. s1_ = s2_ on Es \\<Longrightarrow> E s1_ = E s2_", "using Es"], ["proof (prove)\nusing this:\n  \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2\n\ngoal (1 subgoal):\n 1. s1_ = s2_ on Es \\<Longrightarrow> E s1_ = E s2_", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a aa b s1 s2.\n       \\<lbrakk>(a, aa, b) \\<in> set upds;\n        \\<forall>y\\<in>b. s1 = s2 on SS y\\<rbrakk>\n       \\<Longrightarrow> aa (S s1) = aa (S s2)\n 2. \\<And>x a aa b xa.\n       \\<lbrakk>(a, aa, b) \\<in> set upds; xa \\<in> b; x \\<in> SS xa;\n        \\<forall>xa\\<in>LVE. x \\<notin> funStar SS xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Es", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a_, aa_, b_) \\<in> set upds;\n     \\<forall>y\\<in>b_. s1_ = s2_ on SS y\\<rbrakk>\n    \\<Longrightarrow> aa_ (S s1_) = aa_ (S s2_)", "apply(rule gl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(a_, aa_, b_) \\<in> set upds;\n     \\<forall>y\\<in>b_. s1_ = s2_ on SS y\\<rbrakk>\n    \\<Longrightarrow> (?a4, aa_, ?c4) \\<in> set upds\n 2. \\<lbrakk>(a_, aa_, b_) \\<in> set upds;\n     \\<forall>y\\<in>b_. s1_ = s2_ on SS y\\<rbrakk>\n    \\<Longrightarrow> S s1_ = S s2_ on ?c4", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a_, aa_, b_) \\<in> set upds;\n     \\<forall>y\\<in>b_. s1_ = s2_ on SS y\\<rbrakk>\n    \\<Longrightarrow> S s1_ = S s2_ on b_", "using Ss Awhile(10)"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>LVE \\<union> LVQ.\n     let Ss = SS y\n     in \\<forall>s1 s2. s1 = s2 on Ss \\<longrightarrow> S s1 y = S s2 y\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(a_, aa_, b_) \\<in> set upds;\n     \\<forall>y\\<in>b_. s1_ = s2_ on SS y\\<rbrakk>\n    \\<Longrightarrow> S s1_ = S s2_ on b_", "by fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a aa b xa.\n       \\<lbrakk>(a, aa, b) \\<in> set upds; xa \\<in> b; x \\<in> SS xa;\n        \\<forall>xa\\<in>LVE. x \\<notin> funStar SS xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Es", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a_, aa_, b_) \\<in> set upds; xa_ \\<in> b_; x_ \\<in> SS xa_;\n     \\<forall>xa\\<in>LVE. x_ \\<notin> funStar SS xa\\<rbrakk>\n    \\<Longrightarrow> x_ \\<in> Es", "using Awhile(10) LVE_LV2"], ["proof (prove)\nusing this:\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  \\<Union> (SS ` LVE) \\<subseteq> \\<Union> (funStar SS ` LVE)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(a_, aa_, b_) \\<in> set upds; xa_ \\<in> b_; x_ \\<in> SS xa_;\n     \\<forall>xa\\<in>LVE. x_ \\<notin> funStar SS xa\\<rbrakk>\n    \\<Longrightarrow> x_ \\<in> Es", "by  blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           pre C I l s \\<and>\n                           preList\n                            ((SOME z.\n                                 z \\<notin> lesvars upds \\<union>\n      varacom ({A} WHILE b DO C),\n                              E, Es) #\n                             map (\\<lambda>(x, e, v).\n                                     (x, \\<lambda>s. e (S s),\n\\<Union> (SS ` v)))\n                              upds)\n                            C l s}\n                       strip C\n                       { time\n                          C \\<Down> \\<lambda>l s.\n I l s \\<and>\n postList\n  ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C), E,\n    Es) #\n   map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n    upds)\n  l s} \\<and>\n  (\\<forall>l s. pre C I l s \\<longrightarrow> I l (postQ C s)) \\<and>\n  K4 ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n       E, Es) #\n      map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds)\n   Is C I\n\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. K4 upds LVQ ({A} WHILE b DO C) Q", "from this[THEN conjunct2, THEN conjunct2]"], ["proof (chain)\npicking this:\n  K4 ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n       E, Es) #\n      map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds)\n   Is C I", "have\n          K: \"K C Is I\" and K3: \"K3 ?upds' C I\" and Kt: \"\\<forall>s1 s2. s1 = s2 on kdeps C \\<longrightarrow> time C s1 = time C s2\""], ["proof (prove)\nusing this:\n  K4 ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n       E, Es) #\n      map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds)\n   Is C I\n\ngoal (1 subgoal):\n 1. K C Is I &&&\n    K3 ((SOME z.\n            z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n         E, Es) #\n        map (\\<lambda>(x, e, v).\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n         upds)\n     C I &&&\n    \\<forall>s1 s2.\n       s1 = s2 on kdeps C \\<longrightarrow> time C s1 = time C s2", "unfolding K4_def"], ["proof (prove)\nusing this:\n  K C Is I \\<and>\n  K3 ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n       E, Es) #\n      map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds)\n   C I \\<and>\n  (\\<forall>s1 s2.\n      s1 = s2 on kdeps C \\<longrightarrow> time C s1 = time C s2)\n\ngoal (1 subgoal):\n 1. K C Is I &&&\n    K3 ((SOME z.\n            z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n         E, Es) #\n        map (\\<lambda>(x, e, v).\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n         upds)\n     C I &&&\n    \\<forall>s1 s2.\n       s1 = s2 on kdeps C \\<longrightarrow> time C s1 = time C s2", "by auto"], ["proof (state)\nthis:\n  K C Is I\n  K3 ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n       E, Es) #\n      map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds)\n   C I\n  \\<forall>s1 s2. s1 = s2 on kdeps C \\<longrightarrow> time C s1 = time C s2\n\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}\n 2. K4 upds LVQ ({A} WHILE b DO C) Q", "show \"K4 upds LVQ ({A} WHILE b DO C) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K4 upds LVQ ({A} WHILE b DO C) Q", "unfolding K4_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. K ({A} WHILE b DO C) LVQ Q \\<and>\n    K3 upds ({A} WHILE b DO C) Q \\<and>\n    (\\<forall>s1 s2.\n        s1 = s2 on kdeps ({A} WHILE b DO C) \\<longrightarrow>\n        time ({A} WHILE b DO C) s1 = time ({A} WHILE b DO C) s2)", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. K ({A} WHILE b DO C) LVQ Q\n 2. K3 upds ({A} WHILE b DO C) Q\n 3. \\<And>s1 s2.\n       s1 = s2 on kdeps ({A} WHILE b DO C) \\<Longrightarrow>\n       time ({A} WHILE b DO C) s1 = time ({A} WHILE b DO C) s2", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. K ({A} WHILE b DO C) LVQ Q", "using K"], ["proof (prove)\nusing this:\n  K C Is I\n\ngoal (1 subgoal):\n 1. K ({A} WHILE b DO C) LVQ Q", "unfolding K_def aha"], ["proof (prove)\nusing this:\n  \\<forall>l s1 s2.\n     s1 = s2 on qdeps C Is \\<longrightarrow> pre C I l s1 = pre C I l s2\n\ngoal (1 subgoal):\n 1. \\<forall>l s1 s2.\n       s1 = s2\n       on qdeps ({((I, Is), S, E, Es, SS)} WHILE b DO C)\n           LVQ \\<longrightarrow>\n       pre ({((I, Is), S, E, Es, SS)} WHILE b DO C) Q l s1 =\n       pre ({((I, Is), S, E, Es, SS)} WHILE b DO C) Q l s2", "using Is"], ["proof (prove)\nusing this:\n  \\<forall>l s1 s2.\n     s1 = s2 on qdeps C Is \\<longrightarrow> pre C I l s1 = pre C I l s2\n  \\<forall>s1 s2 l. s1 = s2 on Is \\<longrightarrow> I l s1 = I l s2\n\ngoal (1 subgoal):\n 1. \\<forall>l s1 s2.\n       s1 = s2\n       on qdeps ({((I, Is), S, E, Es, SS)} WHILE b DO C)\n           LVQ \\<longrightarrow>\n       pre ({((I, Is), S, E, Es, SS)} WHILE b DO C) Q l s1 =\n       pre ({((I, Is), S, E, Es, SS)} WHILE b DO C) Q l s2", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. K3 upds ({A} WHILE b DO C) Q\n 2. \\<And>s1 s2.\n       s1 = s2 on kdeps ({A} WHILE b DO C) \\<Longrightarrow>\n       time ({A} WHILE b DO C) s1 = time ({A} WHILE b DO C) s2", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. K3 upds ({A} WHILE b DO C) Q", "using K3"], ["proof (prove)\nusing this:\n  K3 ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n       E, Es) #\n      map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds)\n   C I\n\ngoal (1 subgoal):\n 1. K3 upds ({A} WHILE b DO C) Q", "unfolding K3_def K2_def aha"], ["proof (prove)\nusing this:\n  \\<forall>(a, b, c)\n           \\<in>set ((SOME z.\n                         z \\<notin> lesvars upds \\<union>\n                                    varacom\n                                     ({((I, Is), S, E, Es, SS)} WHILE b\nDO C),\n                      E, Es) #\n                     map (\\<lambda>(x, e, v).\n                             (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                      upds).\n     \\<forall>s1 s2.\n        s1 = s2 on fune C c \\<longrightarrow> preT C b s1 = preT C b s2\n\ngoal (1 subgoal):\n 1. \\<forall>(a, ba, c)\\<in>set upds.\n       \\<forall>s1 s2.\n          s1 = s2\n          on fune ({((I, Is), S, E, Es, SS)} WHILE b DO C)\n              c \\<longrightarrow>\n          preT ({((I, Is), S, E, Es, SS)} WHILE b DO C) ba s1 =\n          preT ({((I, Is), S, E, Es, SS)} WHILE b DO C) ba s2", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa b s1 s2.\n       \\<lbrakk>(a, aa, b) \\<in> set upds;\n        \\<forall>s1 s2.\n           s1 = s2 on fune C Es \\<longrightarrow> preT C E s1 = preT C E s2;\n        \\<forall>x\\<in>set upds.\n           case case x of\n                (x, e, v) \\<Rightarrow>\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n           (a, b, c) \\<Rightarrow>\n             \\<forall>s1 s2.\n                s1 = s2 on fune C c \\<longrightarrow>\n                preT C b s1 = preT C b s2;\n        \\<forall>y\\<in>b. s1 = s2 on SS y\\<rbrakk>\n       \\<Longrightarrow> aa (S s1) = aa (S s2)", "subgoal for x e v"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, e, v) \\<in> set upds;\n     \\<forall>s1 s2.\n        s1 = s2 on fune C Es \\<longrightarrow> preT C E s1 = preT C E s2;\n     \\<forall>x\\<in>set upds.\n        case case x of\n             (x, e, v) \\<Rightarrow>\n               (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2.\n             s1 = s2 on fune C c \\<longrightarrow>\n             preT C b s1 = preT C b s2;\n     \\<forall>y\\<in>v. s1_ = s2_ on SS y\\<rbrakk>\n    \\<Longrightarrow> e (S s1_) = e (S s2_)", "apply (rule gl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(x, e, v) \\<in> set upds;\n     \\<forall>s1 s2.\n        s1 = s2 on fune C Es \\<longrightarrow> preT C E s1 = preT C E s2;\n     \\<forall>x\\<in>set upds.\n        case case x of\n             (x, e, v) \\<Rightarrow>\n               (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2.\n             s1 = s2 on fune C c \\<longrightarrow>\n             preT C b s1 = preT C b s2;\n     \\<forall>y\\<in>v. s1_ = s2_ on SS y\\<rbrakk>\n    \\<Longrightarrow> (?a4, e, ?c4) \\<in> set upds\n 2. \\<lbrakk>(x, e, v) \\<in> set upds;\n     \\<forall>s1 s2.\n        s1 = s2 on fune C Es \\<longrightarrow> preT C E s1 = preT C E s2;\n     \\<forall>x\\<in>set upds.\n        case case x of\n             (x, e, v) \\<Rightarrow>\n               (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2.\n             s1 = s2 on fune C c \\<longrightarrow>\n             preT C b s1 = preT C b s2;\n     \\<forall>y\\<in>v. s1_ = s2_ on SS y\\<rbrakk>\n    \\<Longrightarrow> S s1_ = S s2_ on ?c4", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, e, v) \\<in> set upds;\n     \\<forall>s1 s2.\n        s1 = s2 on fune C Es \\<longrightarrow> preT C E s1 = preT C E s2;\n     \\<forall>x\\<in>set upds.\n        case case x of\n             (x, e, v) \\<Rightarrow>\n               (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2.\n             s1 = s2 on fune C c \\<longrightarrow>\n             preT C b s1 = preT C b s2;\n     \\<forall>y\\<in>v. s1_ = s2_ on SS y\\<rbrakk>\n    \\<Longrightarrow> S s1_ = S s2_ on v", "apply(rule Ssc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(x, e, v) \\<in> set upds;\n     \\<forall>s1 s2.\n        s1 = s2 on fune C Es \\<longrightarrow> preT C E s1 = preT C E s2;\n     \\<forall>x\\<in>set upds.\n        case case x of\n             (x, e, v) \\<Rightarrow>\n               (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2.\n             s1 = s2 on fune C c \\<longrightarrow>\n             preT C b s1 = preT C b s2;\n     \\<forall>y\\<in>v. s1_ = s2_ on SS y\\<rbrakk>\n    \\<Longrightarrow> v \\<subseteq> LVE\n 2. \\<lbrakk>(x, e, v) \\<in> set upds;\n     \\<forall>s1 s2.\n        s1 = s2 on fune C Es \\<longrightarrow> preT C E s1 = preT C E s2;\n     \\<forall>x\\<in>set upds.\n        case case x of\n             (x, e, v) \\<Rightarrow>\n               (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2.\n             s1 = s2 on fune C c \\<longrightarrow>\n             preT C b s1 = preT C b s2;\n     \\<forall>y\\<in>v. s1_ = s2_ on SS y\\<rbrakk>\n    \\<Longrightarrow> s1_ = s2_ on \\<Union> (SS ` v)", "using Awhile(10)"], ["proof (prove)\nusing this:\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(x, e, v) \\<in> set upds;\n     \\<forall>s1 s2.\n        s1 = s2 on fune C Es \\<longrightarrow> preT C E s1 = preT C E s2;\n     \\<forall>x\\<in>set upds.\n        case case x of\n             (x, e, v) \\<Rightarrow>\n               (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2.\n             s1 = s2 on fune C c \\<longrightarrow>\n             preT C b s1 = preT C b s2;\n     \\<forall>y\\<in>v. s1_ = s2_ on SS y\\<rbrakk>\n    \\<Longrightarrow> v \\<subseteq> LVE\n 2. \\<lbrakk>(x, e, v) \\<in> set upds;\n     \\<forall>s1 s2.\n        s1 = s2 on fune C Es \\<longrightarrow> preT C E s1 = preT C E s2;\n     \\<forall>x\\<in>set upds.\n        case case x of\n             (x, e, v) \\<Rightarrow>\n               (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2.\n             s1 = s2 on fune C c \\<longrightarrow>\n             preT C b s1 = preT C b s2;\n     \\<forall>y\\<in>v. s1_ = s2_ on SS y\\<rbrakk>\n    \\<Longrightarrow> s1_ = s2_ on \\<Union> (SS ` v)", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, e, v) \\<in> set upds;\n     \\<forall>s1 s2.\n        s1 = s2 on fune C Es \\<longrightarrow> preT C E s1 = preT C E s2;\n     \\<forall>x\\<in>set upds.\n        case case x of\n             (x, e, v) \\<Rightarrow>\n               (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)) of\n        (a, b, c) \\<Rightarrow>\n          \\<forall>s1 s2.\n             s1 = s2 on fune C c \\<longrightarrow>\n             preT C b s1 = preT C b s2;\n     \\<forall>y\\<in>v. s1_ = s2_ on SS y\\<rbrakk>\n    \\<Longrightarrow> s1_ = s2_ on \\<Union> (SS ` v)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       s1 = s2 on kdeps ({A} WHILE b DO C) \\<Longrightarrow>\n       time ({A} WHILE b DO C) s1 = time ({A} WHILE b DO C) s2", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. s1_ = s2_ on kdeps ({A} WHILE b DO C) \\<Longrightarrow>\n    time ({A} WHILE b DO C) s1_ = time ({A} WHILE b DO C) s2_", "using Kt Es"], ["proof (prove)\nusing this:\n  \\<forall>s1 s2. s1 = s2 on kdeps C \\<longrightarrow> time C s1 = time C s2\n  \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2\n\ngoal (1 subgoal):\n 1. s1_ = s2_ on kdeps ({A} WHILE b DO C) \\<Longrightarrow>\n    time ({A} WHILE b DO C) s1_ = time ({A} WHILE b DO C) s2_", "unfolding aha"], ["proof (prove)\nusing this:\n  \\<forall>s1 s2. s1 = s2 on kdeps C \\<longrightarrow> time C s1 = time C s2\n  \\<forall>s1 s2. s1 = s2 on Es \\<longrightarrow> E s1 = E s2\n\ngoal (1 subgoal):\n 1. s1_ = s2_\n    on kdeps ({((I, Is), S, E, Es, SS)} WHILE b DO C) \\<Longrightarrow>\n    time ({((I, Is), S, E, Es, SS)} WHILE b DO C) s1_ =\n    time ({((I, Is), S, E, Es, SS)} WHILE b DO C) s2_", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  K4 upds LVQ ({A} WHILE b DO C) Q\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             pre ({A} WHILE b DO C) Q l s \\<and>\n                             preList upds ({A} WHILE b DO C) l s}\n                         strip ({A} WHILE b DO C)\n                         { time\n                            ({A} WHILE b\n                             DO C) \\<Down> \\<lambda>l s.\n        Q l s \\<and> postList upds l s}", "apply(simp add: aha)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             I l s \\<and>\n                             preList upds\n                              ({((I, Is), S, E, Es, SS)} WHILE b DO C) l s}\n                         WHILE b DO strip C\n                         { E \\<Down> \\<lambda>l s.\n  Q l s \\<and> postList upds l s}", "apply(rule conseq_old[where P=\"?INV\" and e'=E and Q=\"\\<lambda>l s. ?INV l s \\<and> ~ bval b s\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          I l s \\<and>\n          preList upds ({((I, Is), S, E, Es, SS)} WHILE b DO C) l\n           s \\<longrightarrow>\n          (I l s \\<and>\n           postList\n            (map (\\<lambda>(x, e, v).\n                     (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n              upds)\n            l s) \\<and>\n          E s \\<le> k * E s\n 2. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             I l s \\<and>\n                             postList\n                              (map (\\<lambda>(x, e, v).\n (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                upds)\n                              l s}\n                         WHILE b DO strip C\n                         { E \\<Down> \\<lambda>l s.\n  (I l s \\<and>\n   postList\n    (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n      upds)\n    l s) \\<and>\n  \\<not> bval b s}\n 3. \\<forall>l s.\n       (I l s \\<and>\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s) \\<and>\n       \\<not> bval b s \\<longrightarrow>\n       Q l s \\<and> postList upds l s", "defer"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             I l s \\<and>\n                             postList\n                              (map (\\<lambda>(x, e, v).\n (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                upds)\n                              l s}\n                         WHILE b DO strip C\n                         { E \\<Down> \\<lambda>l s.\n  (I l s \\<and>\n   postList\n    (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n      upds)\n    l s) \\<and>\n  \\<not> bval b s}\n 2. \\<forall>l s.\n       (I l s \\<and>\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s) \\<and>\n       \\<not> bval b s \\<longrightarrow>\n       Q l s \\<and> postList upds l s\n 3. \\<exists>k>0.\n       \\<forall>l s.\n          I l s \\<and>\n          preList upds ({((I, Is), S, E, Es, SS)} WHILE b DO C) l\n           s \\<longrightarrow>\n          (I l s \\<and>\n           postList\n            (map (\\<lambda>(x, e, v).\n                     (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n              upds)\n            l s) \\<and>\n          E s \\<le> k * E s", "proof (goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             I l s \\<and>\n                             postList\n                              (map (\\<lambda>(x, e, v).\n (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                upds)\n                              l s}\n                         WHILE b DO strip C\n                         { E \\<Down> \\<lambda>l s.\n  (I l s \\<and>\n   postList\n    (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n      upds)\n    l s) \\<and>\n  \\<not> bval b s}\n 2. \\<forall>l s.\n       (I l s \\<and>\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s) \\<and>\n       \\<not> bval b s \\<longrightarrow>\n       Q l s \\<and> postList upds l s\n 3. \\<exists>k>0.\n       \\<forall>l s.\n          I l s \\<and>\n          preList upds ({((I, Is), S, E, Es, SS)} WHILE b DO C) l\n           s \\<longrightarrow>\n          (I l s \\<and>\n           postList\n            (map (\\<lambda>(x, e, v).\n                     (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n              upds)\n            l s) \\<and>\n          E s \\<le> k * E s", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             I l s \\<and>\n                             postList\n                              (map (\\<lambda>(x, e, v).\n (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                upds)\n                              l s}\n                         WHILE b DO strip C\n                         { E \\<Down> \\<lambda>l s.\n  (I l s \\<and>\n   postList\n    (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n      upds)\n    l s) \\<and>\n  \\<not> bval b s}\n 2. \\<forall>l s.\n       (I l s \\<and>\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s) \\<and>\n       \\<not> bval b s \\<longrightarrow>\n       Q l s \\<and> postList upds l s\n 3. \\<exists>k>0.\n       \\<forall>l s.\n          I l s \\<and>\n          preList upds ({((I, Is), S, E, Es, SS)} WHILE b DO C) l\n           s \\<longrightarrow>\n          (I l s \\<and>\n           postList\n            (map (\\<lambda>(x, e, v).\n                     (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n              upds)\n            l s) \\<and>\n          E s \\<le> k * E s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          I l s \\<and>\n          preList upds ({((I, Is), S, E, Es, SS)} WHILE b DO C) l\n           s \\<longrightarrow>\n          (I l s \\<and>\n           postList\n            (map (\\<lambda>(x, e, v).\n                     (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n              upds)\n            l s) \\<and>\n          E s \\<le> k * E s", "apply(rule exI[where x=1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 1 \\<and>\n    (\\<forall>l s.\n        I l s \\<and>\n        preList upds ({((I, Is), S, E, Es, SS)} WHILE b DO C) l\n         s \\<longrightarrow>\n        (I l s \\<and>\n         postList\n          (map (\\<lambda>(x, e, v).\n                   (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n            upds)\n          l s) \\<and>\n        E s \\<le> 1 * E s)", "apply(auto)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>I l s;\n        preList upds ({((I, Is), S, E, Es, SS)} WHILE b DO C) l s\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            upds)\n                          l s", "apply(simp only: postList_preList[symmetric] )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, preT ({((I, Is), S, E, Es, SS)} WHILE b DO C) e,\n                   fune ({((I, Is), S, E, Es, SS)} WHILE b DO C) v))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            upds)\n                          l s", "apply (auto)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         (map (\\<lambda>(x, e, v). (x, e \\<circ> S, \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            upds)\n                          l s", "by(simp only:  g)"], ["proof (state)\nthis:\n  \\<exists>k>0.\n     \\<forall>l s.\n        I l s \\<and>\n        preList upds ({((I, Is), S, E, Es, SS)} WHILE b DO C) l\n         s \\<longrightarrow>\n        (I l s \\<and>\n         postList\n          (map (\\<lambda>(x, e, v).\n                   (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n            upds)\n          l s) \\<and>\n        E s \\<le> k * E s\n\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             I l s \\<and>\n                             postList\n                              (map (\\<lambda>(x, e, v).\n (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                upds)\n                              l s}\n                         WHILE b DO strip C\n                         { E \\<Down> \\<lambda>l s.\n  (I l s \\<and>\n   postList\n    (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n      upds)\n    l s) \\<and>\n  \\<not> bval b s}\n 2. \\<forall>l s.\n       (I l s \\<and>\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s) \\<and>\n       \\<not> bval b s \\<longrightarrow>\n       Q l s \\<and> postList upds l s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             I l s \\<and>\n                             postList\n                              (map (\\<lambda>(x, e, v).\n (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                upds)\n                              l s}\n                         WHILE b DO strip C\n                         { E \\<Down> \\<lambda>l s.\n  (I l s \\<and>\n   postList\n    (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n      upds)\n    l s) \\<and>\n  \\<not> bval b s}\n 2. \\<forall>l s.\n       (I l s \\<and>\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s) \\<and>\n       \\<not> bval b s \\<longrightarrow>\n       Q l s \\<and> postList upds l s", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             I l s \\<and>\n                             postList\n                              (map (\\<lambda>(x, e, v).\n (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                upds)\n                              l s}\n                         WHILE b DO strip C\n                         { E \\<Down> \\<lambda>l s.\n  (I l s \\<and>\n   postList\n    (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n      upds)\n    l s) \\<and>\n  \\<not> bval b s}\n 2. \\<forall>l s.\n       (I l s \\<and>\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s) \\<and>\n       \\<not> bval b s \\<longrightarrow>\n       Q l s \\<and> postList upds l s", "(* post condition is satisfied after exiting the loop *)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             I l s \\<and>\n                             postList\n                              (map (\\<lambda>(x, e, v).\n (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                upds)\n                              l s}\n                         WHILE b DO strip C\n                         { E \\<Down> \\<lambda>l s.\n  (I l s \\<and>\n   postList\n    (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n      upds)\n    l s) \\<and>\n  \\<not> bval b s}\n 2. \\<forall>l s.\n       (I l s \\<and>\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s) \\<and>\n       \\<not> bval b s \\<longrightarrow>\n       Q l s \\<and> postList upds l s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l s.\n       (I l s \\<and>\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s) \\<and>\n       \\<not> bval b s \\<longrightarrow>\n       Q l s \\<and> postList upds l s", "proof (safe, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> bval b s; I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> Q l s\n 2. \\<And>l s.\n       \\<lbrakk>\\<not> bval b s; I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> postList upds l s", "case (1 l s)"], ["proof (state)\nthis:\n  \\<not> bval b s\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s\n\ngoal (2 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> bval b s; I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> Q l s\n 2. \\<And>l s.\n       \\<lbrakk>\\<not> bval b s; I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> postList upds l s", "then"], ["proof (chain)\npicking this:\n  \\<not> bval b s\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> bval b s\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s\n\ngoal (1 subgoal):\n 1. Q l s", "using pre"], ["proof (prove)\nusing this:\n  \\<not> bval b s\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s\n  \\<forall>l s.\n     I l s \\<and> \\<not> bval b s \\<longrightarrow>\n     Q l s \\<and>\n     1 \\<le> E s \\<and>\n     S s = s on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n\ngoal (1 subgoal):\n 1. Q l s", "by auto"], ["proof (state)\nthis:\n  Q l s\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> bval b s; I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> postList upds l s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> bval b s; I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> postList upds l s", "case (2 l s)"], ["proof (state)\nthis:\n  \\<not> bval b s\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> bval b s; I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> postList upds l s", "from Awhile(8)"], ["proof (chain)\npicking this:\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2", "have Aw7: \"\\<And>l s1 s2. s1 = s2 on LVE \\<Longrightarrow>  postList upds l s1 = postList upds l s2\""], ["proof (prove)\nusing this:\n  \\<forall>l s1 s2.\n     s1 = s2 on LVE \\<longrightarrow>\n     postList upds l s1 = postList upds l s2\n\ngoal (1 subgoal):\n 1. \\<And>l s1 s2.\n       s1 = s2 on LVE \\<Longrightarrow>\n       postList upds l s1 = postList upds l s2", "by auto"], ["proof (state)\nthis:\n  ?s1.4 = ?s2.4 on LVE \\<Longrightarrow>\n  postList upds ?l4 ?s1.4 = postList upds ?l4 ?s2.4\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> bval b s; I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> postList upds l s", "have \"postList (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union>x\\<in>v. SS x)) upds) l s =\n                postList upds l (S s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. postList\n     (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds)\n     l s =\n    postList upds l (S s)", "apply(induct upds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. postList\n     (map (\\<lambda>a.\n              case a of\n              (x, e, v) \\<Rightarrow>\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       [])\n     l s =\n    postList [] l (S s)\n 2. \\<And>a upds.\n       postList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow>\n                   (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s =\n       postList upds l (S s) \\<Longrightarrow>\n       postList\n        (map (\\<lambda>a.\n                 case a of\n                 (x, e, v) \\<Rightarrow>\n                   (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          (a # upds))\n        l s =\n       postList (a # upds) l (S s)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s =\n  postList upds l (S s)\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> bval b s; I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> postList upds l s", "also"], ["proof (state)\nthis:\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s =\n  postList upds l (S s)\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> bval b s; I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> postList upds l s", "have \"\\<dots> = postList upds l s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. postList upds l (S s) = postList upds l s", "using  Aw7[of \"S s\" s \"l\"] pre2 2 LV_LV"], ["proof (prove)\nusing this:\n  S s = s on LVE \\<Longrightarrow> postList upds l (S s) = postList upds l s\n  \\<lbrakk>I ?l ?s; \\<not> bval b ?s\\<rbrakk>\n  \\<Longrightarrow> Q ?l ?s \\<and>\n                    1 \\<le> E ?s \\<and>\n                    S ?s = ?s on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  \\<not> bval b s\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s\n  LVE \\<union> LVQ \\<subseteq> \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n\ngoal (1 subgoal):\n 1. postList upds l (S s) = postList upds l s", "by fast"], ["proof (state)\nthis:\n  postList upds l (S s) = postList upds l s\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> bval b s; I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> postList upds l s", "finally"], ["proof (chain)\npicking this:\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s =\n  postList upds l s", "show ?case"], ["proof (prove)\nusing this:\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s =\n  postList upds l s\n\ngoal (1 subgoal):\n 1. postList upds l s", "using 2(3)"], ["proof (prove)\nusing this:\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s =\n  postList upds l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s\n\ngoal (1 subgoal):\n 1. postList upds l s", "by simp"], ["proof (state)\nthis:\n  postList upds l s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>l s.\n     (I l s \\<and>\n      postList\n       (map (\\<lambda>(x, e, v).\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n         upds)\n       l s) \\<and>\n     \\<not> bval b s \\<longrightarrow>\n     Q l s \\<and> postList upds l s\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             I l s \\<and>\n                             postList\n                              (map (\\<lambda>(x, e, v).\n (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                upds)\n                              l s}\n                         WHILE b DO strip C\n                         { E \\<Down> \\<lambda>l s.\n  (I l s \\<and>\n   postList\n    (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n      upds)\n    l s) \\<and>\n  \\<not> bval b s}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             I l s \\<and>\n                             postList\n                              (map (\\<lambda>(x, e, v).\n (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                upds)\n                              l s}\n                         WHILE b DO strip C\n                         { E \\<Down> \\<lambda>l s.\n  (I l s \\<and>\n   postList\n    (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n      upds)\n    l s) \\<and>\n  \\<not> bval b s}", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             I l s \\<and>\n                             postList\n                              (map (\\<lambda>(x, e, v).\n (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                upds)\n                              l s}\n                         WHILE b DO strip C\n                         { E \\<Down> \\<lambda>l s.\n  (I l s \\<and>\n   postList\n    (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n      upds)\n    l s) \\<and>\n  \\<not> bval b s}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             I l s \\<and>\n                             postList\n                              (map (\\<lambda>(x, e, v).\n (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                upds)\n                              l s}\n                         WHILE b DO strip C\n                         { E \\<Down> \\<lambda>l s.\n  (I l s \\<and>\n   postList\n    (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n      upds)\n    l s) \\<and>\n  \\<not> bval b s}", "proof(rule While, goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             (I l s \\<and>\n                              postList\n                               (map (\\<lambda>(x, e, v).\n  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                 upds)\n                               l s) \\<and>\n                             bval b s \\<and> ?e' s = l ?y}\n                         strip C\n                         { ?e'' \\<Down> \\<lambda>l s.\n     (I l s \\<and>\n      postList\n       (map (\\<lambda>(x, e, v).\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n         upds)\n       l s) \\<and>\n     E s \\<le> l ?y}\n 2. \\<forall>l s.\n       bval b s \\<and>\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<longrightarrow>\n       1 + ?e' s + ?e'' s \\<le> E s\n 3. \\<forall>l s.\n       \\<not> bval b s \\<and>\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<longrightarrow>\n       1 \\<le> E s\n 4. ?y \\<notin> support\n                 (\\<lambda>l s.\n                     I l s \\<and>\n                     postList\n                      (map (\\<lambda>(x, e, v).\n                               (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                        upds)\n                      l s)", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             (I l s \\<and>\n                              postList\n                               (map (\\<lambda>(x, e, v).\n  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                 upds)\n                               l s) \\<and>\n                             bval b s \\<and> ?e' s = l ?y}\n                         strip C\n                         { ?e'' \\<Down> \\<lambda>l s.\n     (I l s \\<and>\n      postList\n       (map (\\<lambda>(x, e, v).\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n         upds)\n       l s) \\<and>\n     E s \\<le> l ?y}\n 2. \\<forall>l s.\n       bval b s \\<and>\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<longrightarrow>\n       1 + ?e' s + ?e'' s \\<le> E s\n 3. \\<forall>l s.\n       \\<not> bval b s \\<and>\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<longrightarrow>\n       1 \\<le> E s\n 4. ?y \\<notin> support\n                 (\\<lambda>l s.\n                     I l s \\<and>\n                     postList\n                      (map (\\<lambda>(x, e, v).\n                               (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                        upds)\n                      l s)", "note Comb=CombALL[THEN conjunct1]"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           pre C I l s \\<and>\n                           preList\n                            ((SOME z.\n                                 z \\<notin> lesvars upds \\<union>\n      varacom ({A} WHILE b DO C),\n                              E, Es) #\n                             map (\\<lambda>(x, e, v).\n                                     (x, \\<lambda>s. e (S s),\n\\<Union> (SS ` v)))\n                              upds)\n                            C l s}\n                       strip C\n                       { time\n                          C \\<Down> \\<lambda>l s.\n I l s \\<and>\n postList\n  ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C), E,\n    Es) #\n   map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n    upds)\n  l s}\n\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             (I l s \\<and>\n                              postList\n                               (map (\\<lambda>(x, e, v).\n  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                 upds)\n                               l s) \\<and>\n                             bval b s \\<and> ?e' s = l ?y}\n                         strip C\n                         { ?e'' \\<Down> \\<lambda>l s.\n     (I l s \\<and>\n      postList\n       (map (\\<lambda>(x, e, v).\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n         upds)\n       l s) \\<and>\n     E s \\<le> l ?y}\n 2. \\<forall>l s.\n       bval b s \\<and>\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<longrightarrow>\n       1 + ?e' s + ?e'' s \\<le> E s\n 3. \\<forall>l s.\n       \\<not> bval b s \\<and>\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<longrightarrow>\n       1 \\<le> E s\n 4. ?y \\<notin> support\n                 (\\<lambda>l s.\n                     I l s \\<and>\n                     postList\n                      (map (\\<lambda>(x, e, v).\n                               (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                        upds)\n                      l s)", "show \"\\<turnstile>\\<^sub>1 {\\<lambda>l s. (I l s \\<and> postList ?upds l s) \\<and> bval b s \\<and> preT C E s = l ?z}\n         strip C {  time C \\<Down> \\<lambda>l s. (I l s \\<and> postList ?upds l s) \\<and> E s \\<le> l ?z}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                             (I l s \\<and>\n                              postList\n                               (map (\\<lambda>(x, e, v).\n  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                 upds)\n                               l s) \\<and>\n                             bval b s \\<and>\n                             preT C E s =\n                             l (SOME z.\n                                   z \\<notin> lesvars upds \\<union>\n        varacom ({A} WHILE b DO C))}\n                         strip C\n                         { time\n                            C \\<Down> \\<lambda>l s.\n   (I l s \\<and>\n    postList\n     (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds)\n     l s) \\<and>\n   E s\n   \\<le> l (SOME z.\n               z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))}", "apply(rule conseq_old)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          (I l s \\<and>\n           postList\n            (map (\\<lambda>(x, e, v).\n                     (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n              upds)\n            l s) \\<and>\n          bval b s \\<and>\n          preT C E s =\n          l (SOME z.\n                z \\<notin> lesvars upds \\<union>\n                           varacom ({A} WHILE b DO C)) \\<longrightarrow>\n          ?P l s \\<and> ?e' s \\<le> k * time C s\n 2. \\<turnstile>\\<^sub>1 {?P} strip C { ?e' \\<Down> ?Q}\n 3. \\<forall>l s.\n       ?Q l s \\<longrightarrow>\n       (I l s \\<and>\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s) \\<and>\n       E s\n       \\<le> l (SOME z.\n                   z \\<notin> lesvars upds \\<union>\n                              varacom ({A} WHILE b DO C))", "apply(rule exI[where x=1])"], ["proof (prove)\ngoal (3 subgoals):\n 1. 0 < 1 \\<and>\n    (\\<forall>l s.\n        (I l s \\<and>\n         postList\n          (map (\\<lambda>(x, e, v).\n                   (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n            upds)\n          l s) \\<and>\n        bval b s \\<and>\n        preT C E s =\n        l (SOME z.\n              z \\<notin> lesvars upds \\<union>\n                         varacom ({A} WHILE b DO C)) \\<longrightarrow>\n        ?P l s \\<and> ?e' s \\<le> 1 * time C s)\n 2. \\<turnstile>\\<^sub>1 {?P} strip C { ?e' \\<Down> ?Q}\n 3. \\<forall>l s.\n       ?Q l s \\<longrightarrow>\n       (I l s \\<and>\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s) \\<and>\n       E s\n       \\<le> l (SOME z.\n                   z \\<notin> lesvars upds \\<union>\n                              varacom ({A} WHILE b DO C))", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>l s.\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<and>\n       bval b s \\<and>\n       preT C E s =\n       l (SOME z.\n             z \\<notin> lesvars upds \\<and>\n             z \\<notin> varacom\n                         ({(I2, S, E, Es, SS)} WHILE b\n                          DO C)) \\<longrightarrow>\n       ?P l s \\<and> ?e' s \\<le> time C s\n 2. \\<turnstile>\\<^sub>1 {?P} strip C { ?e' \\<Down> ?Q}\n 3. \\<forall>l s.\n       ?Q l s \\<longrightarrow>\n       (I l s \\<and>\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s) \\<and>\n       E s\n       \\<le> l (SOME z.\n                   z \\<notin> lesvars upds \\<union>\n                              varacom ({A} WHILE b DO C))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {?P} strip C { ?e' \\<Down> ?Q}\n 2. \\<forall>l s.\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<and>\n       bval b s \\<and>\n       preT C E s =\n       l (SOME z.\n             z \\<notin> lesvars upds \\<and>\n             z \\<notin> varacom\n                         ({(I2, S, E, Es, SS)} WHILE b\n                          DO C)) \\<longrightarrow>\n       ?P l s \\<and> ?e' s \\<le> time C s\n 3. \\<forall>l s.\n       ?Q l s \\<longrightarrow>\n       (I l s \\<and>\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s) \\<and>\n       E s\n       \\<le> l (SOME z.\n                   z \\<notin> lesvars upds \\<union>\n                              varacom ({A} WHILE b DO C))", "proof (rule Comb, safe, goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s;\n        bval b s;\n        preT C E s =\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom\n                          ({(I2, S, E, Es, SS)} WHILE b DO C))\\<rbrakk>\n       \\<Longrightarrow> pre C I l s\n 2. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s;\n        bval b s;\n        preT C E s =\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom\n                          ({(I2, S, E, Es, SS)} WHILE b DO C))\\<rbrakk>\n       \\<Longrightarrow> preList\n                          ((SOME z.\n                               z \\<notin> lesvars upds \\<union>\n    varacom ({A} WHILE b DO C),\n                            E, Es) #\n                           map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            upds)\n                          C l s\n 3. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         ((SOME z.\n              z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n           E, Es) #\n          map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            upds)\n                          l s\n 4. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         ((SOME z.\n              z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n           E, Es) #\n          map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> E s\n                         \\<le> l (SOME z.\n                                     z \\<notin> lesvars upds \\<union>\n          varacom ({A} WHILE b DO C))", "case (2 l s)"], ["proof (state)\nthis:\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s\n  bval b s\n  preT C E s =\n  l (SOME z.\n        z \\<notin> lesvars upds \\<and>\n        z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C))\n\ngoal (4 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s;\n        bval b s;\n        preT C E s =\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom\n                          ({(I2, S, E, Es, SS)} WHILE b DO C))\\<rbrakk>\n       \\<Longrightarrow> pre C I l s\n 2. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s;\n        bval b s;\n        preT C E s =\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom\n                          ({(I2, S, E, Es, SS)} WHILE b DO C))\\<rbrakk>\n       \\<Longrightarrow> preList\n                          ((SOME z.\n                               z \\<notin> lesvars upds \\<union>\n    varacom ({A} WHILE b DO C),\n                            E, Es) #\n                           map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            upds)\n                          C l s\n 3. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         ((SOME z.\n              z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n           E, Es) #\n          map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            upds)\n                          l s\n 4. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         ((SOME z.\n              z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n           E, Es) #\n          map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> E s\n                         \\<le> l (SOME z.\n                                     z \\<notin> lesvars upds \\<union>\n          varacom ({A} WHILE b DO C))", "from IQ_in[OF 2(1)] gl Awhile(10,9)"], ["proof (chain)\npicking this:\n  bval b s \\<Longrightarrow>\n  S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  \\<lbrakk>(?a4, ?b4, ?c4) \\<in> set upds; ?s1.4 = ?s2.4 on ?c4\\<rbrakk>\n  \\<Longrightarrow> ?b4 ?s1.4 = ?b4 ?s2.4\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2", "have y: \"postList ?upds l s = \n                preList ?upds C l s\" (is \"?IH upds\")"], ["proof (prove)\nusing this:\n  bval b s \\<Longrightarrow>\n  S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  \\<lbrakk>(?a4, ?b4, ?c4) \\<in> set upds; ?s1.4 = ?s2.4 on ?c4\\<rbrakk>\n  \\<Longrightarrow> ?b4 ?s1.4 = ?b4 ?s2.4\n  (\\<Union>a\\<in>set upds. case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  \\<forall>a\\<in>set upds.\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n\ngoal (1 subgoal):\n 1. postList\n     (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds)\n     l s =\n    preList\n     (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds)\n     C l s", "proof (induct upds)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>bval b s \\<Longrightarrow>\n             S s = S (postQ C s)\n             on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n     \\<And>a b c s1 s2.\n        \\<lbrakk>(a, b, c) \\<in> set []; s1 = s2 on c\\<rbrakk>\n        \\<Longrightarrow> b s1 = b s2;\n     (\\<Union>(a, b, c)\\<in>set []. c) \\<subseteq> LVE;\n     \\<forall>(a, b, c)\\<in>set [].\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n    \\<Longrightarrow> postList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       l s =\n                      preList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       C l s\n 2. \\<And>a upds.\n       \\<lbrakk>\\<lbrakk>bval b s \\<Longrightarrow>\n                         S s = S (postQ C s)\n                         on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n                 \\<And>a b c s1 s2.\n                    \\<lbrakk>(a, b, c) \\<in> set upds; s1 = s2 on c\\<rbrakk>\n                    \\<Longrightarrow> b s1 = b s2;\n                 (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE;\n                 \\<forall>(a, b, c)\\<in>set upds.\n                    \\<forall>s1 s2.\n                       s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n                \\<Longrightarrow> postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                     upds)\n                                   l s =\n                                  preList\n                                   (map (\\<lambda>(x, e, v).\n      (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                     upds)\n                                   C l s;\n        bval b s \\<Longrightarrow>\n        S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n        \\<And>aa b c s1 s2.\n           \\<lbrakk>(aa, b, c) \\<in> set (a # upds); s1 = s2 on c\\<rbrakk>\n           \\<Longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set (a # upds). c) \\<subseteq> LVE;\n        \\<forall>(a, b, c)\\<in>set (a # upds).\n           \\<forall>s1 s2.\n              s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            (a # upds))\n                          l s =\n                         preList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            (a # upds))\n                          C l s", "case (Cons a  upds')"], ["proof (state)\nthis:\n  \\<lbrakk>bval b s \\<Longrightarrow>\n           S s = S (postQ C s)\n           on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n   \\<And>a b c s1 s2.\n      \\<lbrakk>(a, b, c) \\<in> set upds'; s1 = s2 on c\\<rbrakk>\n      \\<Longrightarrow> b s1 = b s2;\n   (\\<Union>a\\<in>set upds'. case a of (a, ba, c) \\<Rightarrow> c)\n   \\<subseteq> LVE;\n   \\<forall>a\\<in>set upds'.\n      case a of\n      (a, ba, c) \\<Rightarrow>\n        \\<forall>s1 s2.\n           s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\\<rbrakk>\n  \\<Longrightarrow> postList\n                     (map (\\<lambda>a.\n                              case a of\n                              (x, e, v) \\<Rightarrow>\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                       upds')\n                     l s =\n                    preList\n                     (map (\\<lambda>a.\n                              case a of\n                              (x, e, v) \\<Rightarrow>\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                       upds')\n                     C l s\n  bval b s \\<Longrightarrow>\n  S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  \\<lbrakk>(?a4, ?b4, ?c4) \\<in> set (a # upds');\n   ?s1.4 = ?s2.4 on ?c4\\<rbrakk>\n  \\<Longrightarrow> ?b4 ?s1.4 = ?b4 ?s2.4\n  (\\<Union>a\\<in>set (a # upds'). case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  \\<forall>a\\<in>set (a # upds').\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bval b s \\<Longrightarrow>\n             S s = S (postQ C s)\n             on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n     \\<And>a b c s1 s2.\n        \\<lbrakk>(a, b, c) \\<in> set []; s1 = s2 on c\\<rbrakk>\n        \\<Longrightarrow> b s1 = b s2;\n     (\\<Union>(a, b, c)\\<in>set []. c) \\<subseteq> LVE;\n     \\<forall>(a, b, c)\\<in>set [].\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n    \\<Longrightarrow> postList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       l s =\n                      preList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       C l s\n 2. \\<And>a upds.\n       \\<lbrakk>\\<lbrakk>bval b s \\<Longrightarrow>\n                         S s = S (postQ C s)\n                         on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n                 \\<And>a b c s1 s2.\n                    \\<lbrakk>(a, b, c) \\<in> set upds; s1 = s2 on c\\<rbrakk>\n                    \\<Longrightarrow> b s1 = b s2;\n                 (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE;\n                 \\<forall>(a, b, c)\\<in>set upds.\n                    \\<forall>s1 s2.\n                       s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n                \\<Longrightarrow> postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                     upds)\n                                   l s =\n                                  preList\n                                   (map (\\<lambda>(x, e, v).\n      (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                     upds)\n                                   C l s;\n        bval b s \\<Longrightarrow>\n        S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n        \\<And>aa b c s1 s2.\n           \\<lbrakk>(aa, b, c) \\<in> set (a # upds); s1 = s2 on c\\<rbrakk>\n           \\<Longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set (a # upds). c) \\<subseteq> LVE;\n        \\<forall>(a, b, c)\\<in>set (a # upds).\n           \\<forall>s1 s2.\n              s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            (a # upds))\n                          l s =\n                         preList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            (a # upds))\n                          C l s", "obtain y e v where axe: \"a = (y,e,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>y e v. a = (y, e, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = (y, e, v)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bval b s \\<Longrightarrow>\n             S s = S (postQ C s)\n             on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n     \\<And>a b c s1 s2.\n        \\<lbrakk>(a, b, c) \\<in> set []; s1 = s2 on c\\<rbrakk>\n        \\<Longrightarrow> b s1 = b s2;\n     (\\<Union>(a, b, c)\\<in>set []. c) \\<subseteq> LVE;\n     \\<forall>(a, b, c)\\<in>set [].\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n    \\<Longrightarrow> postList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       l s =\n                      preList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       C l s\n 2. \\<And>a upds.\n       \\<lbrakk>\\<lbrakk>bval b s \\<Longrightarrow>\n                         S s = S (postQ C s)\n                         on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n                 \\<And>a b c s1 s2.\n                    \\<lbrakk>(a, b, c) \\<in> set upds; s1 = s2 on c\\<rbrakk>\n                    \\<Longrightarrow> b s1 = b s2;\n                 (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE;\n                 \\<forall>(a, b, c)\\<in>set upds.\n                    \\<forall>s1 s2.\n                       s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n                \\<Longrightarrow> postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                     upds)\n                                   l s =\n                                  preList\n                                   (map (\\<lambda>(x, e, v).\n      (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                     upds)\n                                   C l s;\n        bval b s \\<Longrightarrow>\n        S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n        \\<And>aa b c s1 s2.\n           \\<lbrakk>(aa, b, c) \\<in> set (a # upds); s1 = s2 on c\\<rbrakk>\n           \\<Longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set (a # upds). c) \\<subseteq> LVE;\n        \\<forall>(a, b, c)\\<in>set (a # upds).\n           \\<forall>s1 s2.\n              s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            (a # upds))\n                          l s =\n                         preList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            (a # upds))\n                          C l s", "have IH: \"?IH upds'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. postList\n     (map (\\<lambda>a.\n              case a of\n              (x, e, v) \\<Rightarrow>\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds')\n     l s =\n    preList\n     (map (\\<lambda>a.\n              case a of\n              (x, e, v) \\<Rightarrow>\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds')\n     C l s", "apply(rule Cons(1))"], ["proof (prove)\ngoal (4 subgoals):\n 1. bval b s \\<Longrightarrow>\n    S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n 2. \\<And>a b c s1 s2.\n       \\<lbrakk>(a, b, c) \\<in> set upds'; s1 = s2 on c\\<rbrakk>\n       \\<Longrightarrow> b s1 = b s2\n 3. (\\<Union>a\\<in>set upds'. case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> LVE\n 4. \\<forall>a\\<in>set upds'.\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2", "using Cons(2-5)"], ["proof (prove)\nusing this:\n  bval b s \\<Longrightarrow>\n  S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  \\<lbrakk>(?a4, ?b4, ?c4) \\<in> set (a # upds');\n   ?s1.4 = ?s2.4 on ?c4\\<rbrakk>\n  \\<Longrightarrow> ?b4 ?s1.4 = ?b4 ?s2.4\n  (\\<Union>a\\<in>set (a # upds'). case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n  \\<forall>a\\<in>set (a # upds').\n     case a of\n     (a, ba, c) \\<Rightarrow>\n       \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2\n\ngoal (4 subgoals):\n 1. bval b s \\<Longrightarrow>\n    S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n 2. \\<And>a b c s1 s2.\n       \\<lbrakk>(a, b, c) \\<in> set upds'; s1 = s2 on c\\<rbrakk>\n       \\<Longrightarrow> b s1 = b s2\n 3. (\\<Union>a\\<in>set upds'. case a of (a, ba, c) \\<Rightarrow> c)\n    \\<subseteq> LVE\n 4. \\<forall>a\\<in>set upds'.\n       case a of\n       (a, ba, c) \\<Rightarrow>\n         \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> ba s1 = ba s2", "by auto"], ["proof (state)\nthis:\n  postList\n   (map (\\<lambda>a.\n            case a of\n            (x, e, v) \\<Rightarrow>\n              (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds')\n   l s =\n  preList\n   (map (\\<lambda>a.\n            case a of\n            (x, e, v) \\<Rightarrow>\n              (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds')\n   C l s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bval b s \\<Longrightarrow>\n             S s = S (postQ C s)\n             on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n     \\<And>a b c s1 s2.\n        \\<lbrakk>(a, b, c) \\<in> set []; s1 = s2 on c\\<rbrakk>\n        \\<Longrightarrow> b s1 = b s2;\n     (\\<Union>(a, b, c)\\<in>set []. c) \\<subseteq> LVE;\n     \\<forall>(a, b, c)\\<in>set [].\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n    \\<Longrightarrow> postList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       l s =\n                      preList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       C l s\n 2. \\<And>a upds.\n       \\<lbrakk>\\<lbrakk>bval b s \\<Longrightarrow>\n                         S s = S (postQ C s)\n                         on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n                 \\<And>a b c s1 s2.\n                    \\<lbrakk>(a, b, c) \\<in> set upds; s1 = s2 on c\\<rbrakk>\n                    \\<Longrightarrow> b s1 = b s2;\n                 (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE;\n                 \\<forall>(a, b, c)\\<in>set upds.\n                    \\<forall>s1 s2.\n                       s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n                \\<Longrightarrow> postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                     upds)\n                                   l s =\n                                  preList\n                                   (map (\\<lambda>(x, e, v).\n      (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                     upds)\n                                   C l s;\n        bval b s \\<Longrightarrow>\n        S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n        \\<And>aa b c s1 s2.\n           \\<lbrakk>(aa, b, c) \\<in> set (a # upds); s1 = s2 on c\\<rbrakk>\n           \\<Longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set (a # upds). c) \\<subseteq> LVE;\n        \\<forall>(a, b, c)\\<in>set (a # upds).\n           \\<forall>s1 s2.\n              s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            (a # upds))\n                          l s =\n                         preList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            (a # upds))\n                          C l s", "from Cons(3) axe"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?a4, ?b4, ?c4) \\<in> set (a # upds');\n   ?s1.4 = ?s2.4 on ?c4\\<rbrakk>\n  \\<Longrightarrow> ?b4 ?s1.4 = ?b4 ?s2.4\n  a = (y, e, v)", "have ke: \"\\<And>s1 s2. s1 = s2 on v \\<Longrightarrow> e s1 = e s2\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?a4, ?b4, ?c4) \\<in> set (a # upds');\n   ?s1.4 = ?s2.4 on ?c4\\<rbrakk>\n  \\<Longrightarrow> ?b4 ?s1.4 = ?b4 ?s2.4\n  a = (y, e, v)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2. s1 = s2 on v \\<Longrightarrow> e s1 = e s2", "by fastforce"], ["proof (state)\nthis:\n  ?s1.4 = ?s2.4 on v \\<Longrightarrow> e ?s1.4 = e ?s2.4\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bval b s \\<Longrightarrow>\n             S s = S (postQ C s)\n             on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n     \\<And>a b c s1 s2.\n        \\<lbrakk>(a, b, c) \\<in> set []; s1 = s2 on c\\<rbrakk>\n        \\<Longrightarrow> b s1 = b s2;\n     (\\<Union>(a, b, c)\\<in>set []. c) \\<subseteq> LVE;\n     \\<forall>(a, b, c)\\<in>set [].\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n    \\<Longrightarrow> postList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       l s =\n                      preList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       C l s\n 2. \\<And>a upds.\n       \\<lbrakk>\\<lbrakk>bval b s \\<Longrightarrow>\n                         S s = S (postQ C s)\n                         on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n                 \\<And>a b c s1 s2.\n                    \\<lbrakk>(a, b, c) \\<in> set upds; s1 = s2 on c\\<rbrakk>\n                    \\<Longrightarrow> b s1 = b s2;\n                 (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE;\n                 \\<forall>(a, b, c)\\<in>set upds.\n                    \\<forall>s1 s2.\n                       s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n                \\<Longrightarrow> postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                     upds)\n                                   l s =\n                                  preList\n                                   (map (\\<lambda>(x, e, v).\n      (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                     upds)\n                                   C l s;\n        bval b s \\<Longrightarrow>\n        S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n        \\<And>aa b c s1 s2.\n           \\<lbrakk>(aa, b, c) \\<in> set (a # upds); s1 = s2 on c\\<rbrakk>\n           \\<Longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set (a # upds). c) \\<subseteq> LVE;\n        \\<forall>(a, b, c)\\<in>set (a # upds).\n           \\<forall>s1 s2.\n              s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            (a # upds))\n                          l s =\n                         preList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            (a # upds))\n                          C l s", "have vLC: \"v \\<subseteq> LVE\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<subseteq> LVE", "using axe Cons(4)"], ["proof (prove)\nusing this:\n  a = (y, e, v)\n  (\\<Union>a\\<in>set (a # upds'). case a of (a, ba, c) \\<Rightarrow> c)\n  \\<subseteq> LVE\n\ngoal (1 subgoal):\n 1. v \\<subseteq> LVE", "by simp"], ["proof (state)\nthis:\n  v \\<subseteq> LVE\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bval b s \\<Longrightarrow>\n             S s = S (postQ C s)\n             on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n     \\<And>a b c s1 s2.\n        \\<lbrakk>(a, b, c) \\<in> set []; s1 = s2 on c\\<rbrakk>\n        \\<Longrightarrow> b s1 = b s2;\n     (\\<Union>(a, b, c)\\<in>set []. c) \\<subseteq> LVE;\n     \\<forall>(a, b, c)\\<in>set [].\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n    \\<Longrightarrow> postList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       l s =\n                      preList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       C l s\n 2. \\<And>a upds.\n       \\<lbrakk>\\<lbrakk>bval b s \\<Longrightarrow>\n                         S s = S (postQ C s)\n                         on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n                 \\<And>a b c s1 s2.\n                    \\<lbrakk>(a, b, c) \\<in> set upds; s1 = s2 on c\\<rbrakk>\n                    \\<Longrightarrow> b s1 = b s2;\n                 (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE;\n                 \\<forall>(a, b, c)\\<in>set upds.\n                    \\<forall>s1 s2.\n                       s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n                \\<Longrightarrow> postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                     upds)\n                                   l s =\n                                  preList\n                                   (map (\\<lambda>(x, e, v).\n      (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                     upds)\n                                   C l s;\n        bval b s \\<Longrightarrow>\n        S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n        \\<And>aa b c s1 s2.\n           \\<lbrakk>(aa, b, c) \\<in> set (a # upds); s1 = s2 on c\\<rbrakk>\n           \\<Longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set (a # upds). c) \\<subseteq> LVE;\n        \\<forall>(a, b, c)\\<in>set (a # upds).\n           \\<forall>s1 s2.\n              s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            (a # upds))\n                          l s =\n                         preList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            (a # upds))\n                          C l s", "have step: \"e (S s) = e (S (postQ C s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e (S s) = e (S (postQ C s))", "apply(rule ke)"], ["proof (prove)\ngoal (1 subgoal):\n 1. S s = S (postQ C s) on v", "using Cons(2)"], ["proof (prove)\nusing this:\n  bval b s \\<Longrightarrow>\n  S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n\ngoal (1 subgoal):\n 1. S s = S (postQ C s) on v", "using vLC LV_LV 2(3)"], ["proof (prove)\nusing this:\n  bval b s \\<Longrightarrow>\n  S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  v \\<subseteq> LVE\n  LVE \\<union> LVQ \\<subseteq> \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  bval b s\n\ngoal (1 subgoal):\n 1. S s = S (postQ C s) on v", "by blast"], ["proof (state)\nthis:\n  e (S s) = e (S (postQ C s))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bval b s \\<Longrightarrow>\n             S s = S (postQ C s)\n             on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n     \\<And>a b c s1 s2.\n        \\<lbrakk>(a, b, c) \\<in> set []; s1 = s2 on c\\<rbrakk>\n        \\<Longrightarrow> b s1 = b s2;\n     (\\<Union>(a, b, c)\\<in>set []. c) \\<subseteq> LVE;\n     \\<forall>(a, b, c)\\<in>set [].\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n    \\<Longrightarrow> postList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       l s =\n                      preList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       C l s\n 2. \\<And>a upds.\n       \\<lbrakk>\\<lbrakk>bval b s \\<Longrightarrow>\n                         S s = S (postQ C s)\n                         on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n                 \\<And>a b c s1 s2.\n                    \\<lbrakk>(a, b, c) \\<in> set upds; s1 = s2 on c\\<rbrakk>\n                    \\<Longrightarrow> b s1 = b s2;\n                 (\\<Union>(a, b, c)\\<in>set upds. c) \\<subseteq> LVE;\n                 \\<forall>(a, b, c)\\<in>set upds.\n                    \\<forall>s1 s2.\n                       s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n                \\<Longrightarrow> postList\n                                   (map (\\<lambda>(x, e, v).\n      (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                     upds)\n                                   l s =\n                                  preList\n                                   (map (\\<lambda>(x, e, v).\n      (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                                     upds)\n                                   C l s;\n        bval b s \\<Longrightarrow>\n        S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n        \\<And>aa b c s1 s2.\n           \\<lbrakk>(aa, b, c) \\<in> set (a # upds); s1 = s2 on c\\<rbrakk>\n           \\<Longrightarrow> b s1 = b s2;\n        (\\<Union>(a, b, c)\\<in>set (a # upds). c) \\<subseteq> LVE;\n        \\<forall>(a, b, c)\\<in>set (a # upds).\n           \\<forall>s1 s2.\n              s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            (a # upds))\n                          l s =\n                         preList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            (a # upds))\n                          C l s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. postList\n     (map (\\<lambda>a.\n              case a of\n              (x, e, v) \\<Rightarrow>\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       (a # upds'))\n     l s =\n    preList\n     (map (\\<lambda>a.\n              case a of\n              (x, e, v) \\<Rightarrow>\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       (a # upds'))\n     C l s", "unfolding axe"], ["proof (prove)\ngoal (1 subgoal):\n 1. postList\n     (map (\\<lambda>a.\n              case a of\n              (x, e, v) \\<Rightarrow>\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       ((y, e, v) # upds'))\n     l s =\n    preList\n     (map (\\<lambda>a.\n              case a of\n              (x, e, v) \\<Rightarrow>\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       ((y, e, v) # upds'))\n     C l s", "using IH step"], ["proof (prove)\nusing this:\n  postList\n   (map (\\<lambda>a.\n            case a of\n            (x, e, v) \\<Rightarrow>\n              (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds')\n   l s =\n  preList\n   (map (\\<lambda>a.\n            case a of\n            (x, e, v) \\<Rightarrow>\n              (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds')\n   C l s\n  e (S s) = e (S (postQ C s))\n\ngoal (1 subgoal):\n 1. postList\n     (map (\\<lambda>a.\n              case a of\n              (x, e, v) \\<Rightarrow>\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       ((y, e, v) # upds'))\n     l s =\n    preList\n     (map (\\<lambda>a.\n              case a of\n              (x, e, v) \\<Rightarrow>\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       ((y, e, v) # upds'))\n     C l s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>postList\n              (map (\\<lambda>a.\n                       case a of\n                       (x, e, v) \\<Rightarrow>\n                         (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                upds')\n              l s =\n             preList\n              (map (\\<lambda>a.\n                       case a of\n                       (x, e, v) \\<Rightarrow>\n                         (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                upds')\n              C l s;\n     e (S s) = e (S (postQ C s))\\<rbrakk>\n    \\<Longrightarrow> (l y = e (S (postQ C s)) \\<and>\n                       preList\n                        (map (\\<lambda>a.\n                                 case a of\n                                 (x, e, v) \\<Rightarrow>\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                          upds')\n                        C l s) =\n                      (l y = preT C (\\<lambda>s. e (S s)) s \\<and>\n                       preList\n                        (map (\\<lambda>(x, e, v).\n                                 (x, \\<lambda>s. e (S s),\n                                  \\<Union> (SS ` v)))\n                          upds')\n                        C l s)", "apply(simp only: TQ)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  postList\n   (map (\\<lambda>a.\n            case a of\n            (x, e, v) \\<Rightarrow>\n              (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     (a # upds'))\n   l s =\n  preList\n   (map (\\<lambda>a.\n            case a of\n            (x, e, v) \\<Rightarrow>\n              (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     (a # upds'))\n   C l s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>bval b s \\<Longrightarrow>\n             S s = S (postQ C s)\n             on \\<Union> (funStar SS ` (LVE \\<union> LVQ));\n     \\<And>a b c s1 s2.\n        \\<lbrakk>(a, b, c) \\<in> set []; s1 = s2 on c\\<rbrakk>\n        \\<Longrightarrow> b s1 = b s2;\n     (\\<Union>(a, b, c)\\<in>set []. c) \\<subseteq> LVE;\n     \\<forall>(a, b, c)\\<in>set [].\n        \\<forall>s1 s2. s1 = s2 on c \\<longrightarrow> b s1 = b s2\\<rbrakk>\n    \\<Longrightarrow> postList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       l s =\n                      preList\n                       (map (\\<lambda>(x, e, v).\n                                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                         [])\n                       C l s", "qed simp"], ["proof (state)\nthis:\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s =\n  preList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   C l s\n\ngoal (4 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s;\n        bval b s;\n        preT C E s =\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom\n                          ({(I2, S, E, Es, SS)} WHILE b DO C))\\<rbrakk>\n       \\<Longrightarrow> pre C I l s\n 2. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s;\n        bval b s;\n        preT C E s =\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom\n                          ({(I2, S, E, Es, SS)} WHILE b DO C))\\<rbrakk>\n       \\<Longrightarrow> preList\n                          ((SOME z.\n                               z \\<notin> lesvars upds \\<union>\n    varacom ({A} WHILE b DO C),\n                            E, Es) #\n                           map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            upds)\n                          C l s\n 3. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         ((SOME z.\n              z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n           E, Es) #\n          map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            upds)\n                          l s\n 4. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         ((SOME z.\n              z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n           E, Es) #\n          map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> E s\n                         \\<le> l (SOME z.\n                                     z \\<notin> lesvars upds \\<union>\n          varacom ({A} WHILE b DO C))", "from 2"], ["proof (chain)\npicking this:\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s\n  bval b s\n  preT C E s =\n  l (SOME z.\n        z \\<notin> lesvars upds \\<and>\n        z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C))", "show ?case"], ["proof (prove)\nusing this:\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s\n  bval b s\n  preT C E s =\n  l (SOME z.\n        z \\<notin> lesvars upds \\<and>\n        z \\<notin> varacom ({(I2, S, E, Es, SS)} WHILE b DO C))\n\ngoal (1 subgoal):\n 1. preList\n     ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n       E, Es) #\n      map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds)\n     C l s", "by(simp add: y)"], ["proof (state)\nthis:\n  preList\n   ((SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C), E,\n     Es) #\n    map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   C l s\n\ngoal (3 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s;\n        bval b s;\n        preT C E s =\n        l (SOME z.\n              z \\<notin> lesvars upds \\<and>\n              z \\<notin> varacom\n                          ({(I2, S, E, Es, SS)} WHILE b DO C))\\<rbrakk>\n       \\<Longrightarrow> pre C I l s\n 2. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         ((SOME z.\n              z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n           E, Es) #\n          map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> postList\n                          (map (\\<lambda>(x, e, v).\n                                   (x, \\<lambda>s. e (S s),\n                                    \\<Union> (SS ` v)))\n                            upds)\n                          l s\n 3. \\<And>l s.\n       \\<lbrakk>I l s;\n        postList\n         ((SOME z.\n              z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C),\n           E, Es) #\n          map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> E s\n                         \\<le> l (SOME z.\n                                     z \\<notin> lesvars upds \\<union>\n          varacom ({A} WHILE b DO C))", "qed  (auto simp: inv_impl)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           (I l s \\<and>\n                            postList\n                             (map (\\<lambda>(x, e, v).\n(x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                               upds)\n                             l s) \\<and>\n                           bval b s \\<and>\n                           preT C E s =\n                           l (SOME z.\n                                 z \\<notin> lesvars upds \\<union>\n      varacom ({A} WHILE b DO C))}\n                       strip C\n                       { time\n                          C \\<Down> \\<lambda>l s.\n (I l s \\<and>\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s) \\<and>\n E s\n \\<le> l (SOME z.\n             z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))}\n\ngoal (3 subgoals):\n 1. \\<forall>l s.\n       bval b s \\<and>\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<longrightarrow>\n       1 + preT C E s + time C s \\<le> E s\n 2. \\<forall>l s.\n       \\<not> bval b s \\<and>\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<longrightarrow>\n       1 \\<le> E s\n 3. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> support\n              (\\<lambda>l s.\n                  I l s \\<and>\n                  postList\n                   (map (\\<lambda>(x, e, v).\n                            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                     upds)\n                   l s)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<forall>l s.\n       bval b s \\<and>\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<longrightarrow>\n       1 + preT C E s + time C s \\<le> E s\n 2. \\<forall>l s.\n       \\<not> bval b s \\<and>\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<longrightarrow>\n       1 \\<le> E s\n 3. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> support\n              (\\<lambda>l s.\n                  I l s \\<and>\n                  postList\n                   (map (\\<lambda>(x, e, v).\n                            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                     upds)\n                   l s)", "show \"\\<forall>l s. bval b s \\<and> I l s \\<and> postList ?upds l s \\<longrightarrow>  1 + preT C E s + time C s \\<le>   E s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l s.\n       bval b s \\<and>\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<longrightarrow>\n       1 + preT C E s + time C s \\<le> E s", "proof (clarify, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>bval b s; I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> 1 + preT C E s + time C s \\<le> E s", "case (1 l s)"], ["proof (state)\nthis:\n  bval b s\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>bval b s; I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> 1 + preT C E s + time C s \\<le> E s", "thus ?case"], ["proof (prove)\nusing this:\n  bval b s\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s\n\ngoal (1 subgoal):\n 1. 1 + preT C E s + time C s \\<le> E s", "using 1 IQ"], ["proof (prove)\nusing this:\n  bval b s\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s\n  bval b s\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s\n  \\<forall>l s.\n     I l s \\<and> bval b s \\<longrightarrow>\n     pre C I l s \\<and>\n     1 + preT C E s + time C s \\<le> E s \\<and>\n     S s = S (postQ C s) on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n\ngoal (1 subgoal):\n 1. 1 + preT C E s + time C s \\<le> E s", "by auto"], ["proof (state)\nthis:\n  1 + preT C E s + time C s \\<le> E s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>l s.\n     bval b s \\<and>\n     I l s \\<and>\n     postList\n      (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n        upds)\n      l s \\<longrightarrow>\n     1 + preT C E s + time C s \\<le> E s\n\ngoal (2 subgoals):\n 1. \\<forall>l s.\n       \\<not> bval b s \\<and>\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<longrightarrow>\n       1 \\<le> E s\n 2. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> support\n              (\\<lambda>l s.\n                  I l s \\<and>\n                  postList\n                   (map (\\<lambda>(x, e, v).\n                            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                     upds)\n                   l s)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>l s.\n       \\<not> bval b s \\<and>\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<longrightarrow>\n       1 \\<le> E s\n 2. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> support\n              (\\<lambda>l s.\n                  I l s \\<and>\n                  postList\n                   (map (\\<lambda>(x, e, v).\n                            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                     upds)\n                   l s)", "show \"\\<forall>l s. ~bval b s \\<and> I l s \\<and> postList ?upds l s \\<longrightarrow>  1 \\<le> E s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l s.\n       \\<not> bval b s \\<and>\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s \\<longrightarrow>\n       1 \\<le> E s", "proof (clarify, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> bval b s; I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> 1 \\<le> E s", "case (1 l s)"], ["proof (state)\nthis:\n  \\<not> bval b s\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> bval b s; I l s;\n        postList\n         (map (\\<lambda>(x, e, v).\n                  (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n           upds)\n         l s\\<rbrakk>\n       \\<Longrightarrow> 1 \\<le> E s", "with pre"], ["proof (chain)\npicking this:\n  \\<forall>l s.\n     I l s \\<and> \\<not> bval b s \\<longrightarrow>\n     Q l s \\<and>\n     1 \\<le> E s \\<and>\n     S s = s on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  \\<not> bval b s\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>l s.\n     I l s \\<and> \\<not> bval b s \\<longrightarrow>\n     Q l s \\<and>\n     1 \\<le> E s \\<and>\n     S s = s on \\<Union> (funStar SS ` (LVE \\<union> LVQ))\n  \\<not> bval b s\n  I l s\n  postList\n   (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n     upds)\n   l s\n\ngoal (1 subgoal):\n 1. 1 \\<le> E s", "by auto"], ["proof (state)\nthis:\n  1 \\<le> E s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>l s.\n     \\<not> bval b s \\<and>\n     I l s \\<and>\n     postList\n      (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n        upds)\n      l s \\<longrightarrow>\n     1 \\<le> E s\n\ngoal (1 subgoal):\n 1. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> support\n              (\\<lambda>l s.\n                  I l s \\<and>\n                  postList\n                   (map (\\<lambda>(x, e, v).\n                            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                     upds)\n                   l s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> support\n              (\\<lambda>l s.\n                  I l s \\<and>\n                  postList\n                   (map (\\<lambda>(x, e, v).\n                            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                     upds)\n                   l s)", "have pff: \"?z \\<notin> lesvars ?upds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> lesvars\n              (map (\\<lambda>(x, e, v).\n                       (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                upds)", "apply(simp only: fua)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> lesvars upds", "by fact"], ["proof (state)\nthis:\n  (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n  \\<notin> lesvars\n            (map (\\<lambda>(x, e, v).\n                     (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n              upds)\n\ngoal (1 subgoal):\n 1. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> support\n              (\\<lambda>l s.\n                  I l s \\<and>\n                  postList\n                   (map (\\<lambda>(x, e, v).\n                            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                     upds)\n                   l s)", "have \"support (\\<lambda>l s. I l s \\<and> postList ?upds l s) \\<subseteq> support I \\<union> support (postList ?upds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support\n     (\\<lambda>l s.\n         I l s \\<and>\n         postList\n          (map (\\<lambda>(x, e, v).\n                   (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n            upds)\n          l s)\n    \\<subseteq> support I \\<union>\n                support\n                 (postList\n                   (map (\\<lambda>(x, e, v).\n                            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                     upds))", "by(rule support_and)"], ["proof (state)\nthis:\n  support\n   (\\<lambda>l s.\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s)\n  \\<subseteq> support I \\<union>\n              support\n               (postList\n                 (map (\\<lambda>(x, e, v).\n                          (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                   upds))\n\ngoal (1 subgoal):\n 1. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> support\n              (\\<lambda>l s.\n                  I l s \\<and>\n                  postList\n                   (map (\\<lambda>(x, e, v).\n                            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                     upds)\n                   l s)", "also"], ["proof (state)\nthis:\n  support\n   (\\<lambda>l s.\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s)\n  \\<subseteq> support I \\<union>\n              support\n               (postList\n                 (map (\\<lambda>(x, e, v).\n                          (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                   upds))\n\ngoal (1 subgoal):\n 1. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> support\n              (\\<lambda>l s.\n                  I l s \\<and>\n                  postList\n                   (map (\\<lambda>(x, e, v).\n                            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                     upds)\n                   l s)", "have \"support (postList ?upds)\n          \\<subseteq> lesvars ?upds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support\n     (postList\n       (map (\\<lambda>(x, e, v).\n                (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n         upds))\n    \\<subseteq> lesvars\n                 (map (\\<lambda>(x, e, v).\n                          (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                   upds)", "apply(rule support_postList)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  support\n   (postList\n     (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n       upds))\n  \\<subseteq> lesvars\n               (map (\\<lambda>(x, e, v).\n                        (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                 upds)\n\ngoal (1 subgoal):\n 1. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> support\n              (\\<lambda>l s.\n                  I l s \\<and>\n                  postList\n                   (map (\\<lambda>(x, e, v).\n                            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                     upds)\n                   l s)", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y.\n      x \\<subseteq> y \\<Longrightarrow>\n      support I \\<union> x\n      \\<subseteq> support I \\<union> y) \\<Longrightarrow>\n  support\n   (\\<lambda>l s.\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s)\n  \\<subseteq> support I \\<union>\n              lesvars\n               (map (\\<lambda>(x, e, v).\n                        (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                 upds)", "have \"support (\\<lambda>l s. I l s \\<and> postList ?upds l s) \\<subseteq> support I \\<union> lesvars ?upds\""], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<subseteq> y \\<Longrightarrow>\n      support I \\<union> x\n      \\<subseteq> support I \\<union> y) \\<Longrightarrow>\n  support\n   (\\<lambda>l s.\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s)\n  \\<subseteq> support I \\<union>\n              lesvars\n               (map (\\<lambda>(x, e, v).\n                        (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                 upds)\n\ngoal (1 subgoal):\n 1. support\n     (\\<lambda>l s.\n         I l s \\<and>\n         postList\n          (map (\\<lambda>(x, e, v).\n                   (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n            upds)\n          l s)\n    \\<subseteq> support I \\<union>\n                lesvars\n                 (map (\\<lambda>(x, e, v).\n                          (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                   upds)", "by blast"], ["proof (state)\nthis:\n  support\n   (\\<lambda>l s.\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s)\n  \\<subseteq> support I \\<union>\n              lesvars\n               (map (\\<lambda>(x, e, v).\n                        (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                 upds)\n\ngoal (1 subgoal):\n 1. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> support\n              (\\<lambda>l s.\n                  I l s \\<and>\n                  postList\n                   (map (\\<lambda>(x, e, v).\n                            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                     upds)\n                   l s)", "thus \"?z \\<notin> support (\\<lambda>l s. I l s \\<and> postList ?upds l s)\""], ["proof (prove)\nusing this:\n  support\n   (\\<lambda>l s.\n       I l s \\<and>\n       postList\n        (map (\\<lambda>(x, e, v).\n                 (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n          upds)\n        l s)\n  \\<subseteq> support I \\<union>\n              lesvars\n               (map (\\<lambda>(x, e, v).\n                        (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                 upds)\n\ngoal (1 subgoal):\n 1. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> support\n              (\\<lambda>l s.\n                  I l s \\<and>\n                  postList\n                   (map (\\<lambda>(x, e, v).\n                            (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                     upds)\n                   l s)", "apply(rule contra_subsetD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> support I \\<union>\n             lesvars\n              (map (\\<lambda>(x, e, v).\n                       (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                upds)", "using zI pff"], ["proof (prove)\nusing this:\n  (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n  \\<notin> support I\n  (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n  \\<notin> lesvars\n            (map (\\<lambda>(x, e, v).\n                     (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n              upds)\n\ngoal (1 subgoal):\n 1. (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n    \\<notin> support I \\<union>\n             lesvars\n              (map (\\<lambda>(x, e, v).\n                       (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                upds)", "by(simp)"], ["proof (state)\nthis:\n  (SOME z. z \\<notin> lesvars upds \\<union> varacom ({A} WHILE b DO C))\n  \\<notin> support\n            (\\<lambda>l s.\n                I l s \\<and>\n                postList\n                 (map (\\<lambda>(x, e, v).\n                          (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n                   upds)\n                 l s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           I l s \\<and>\n                           postList\n                            (map (\\<lambda>(x, e, v).\n                                     (x, \\<lambda>s. e (S s),\n\\<Union> (SS ` v)))\n                              upds)\n                            l s}\n                       WHILE b DO strip C\n                       { E \\<Down> \\<lambda>l s.\n(I l s \\<and>\n postList\n  (map (\\<lambda>(x, e, v). (x, \\<lambda>s. e (S s), \\<Union> (SS ` v)))\n    upds)\n  l s) \\<and>\n\\<not> bval b s}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           pre ({A} WHILE b DO C) Q l s \\<and>\n                           preList upds ({A} WHILE b DO C) l s}\n                       strip ({A} WHILE b DO C)\n                       { time\n                          ({A} WHILE b\n                           DO C) \\<Down> \\<lambda>l s.\n      Q l s \\<and> postList upds l s}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {\\<lambda>l s.\n                           pre ({A} WHILE b DO C) Q l s \\<and>\n                           preList upds ({A} WHILE b DO C) l s}\n                       strip ({A} WHILE b DO C)\n                       { time\n                          ({A} WHILE b\n                           DO C) \\<Down> \\<lambda>l s.\n      Q l s \\<and> postList upds l s} \\<and>\n  (\\<forall>l s.\n      pre ({A} WHILE b DO C) Q l s \\<longrightarrow>\n      Q l (postQ ({A} WHILE b DO C) s)) \\<and>\n  K4 upds LVQ ({A} WHILE b DO C) Q\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary vc_sound':\n  assumes \"vc C Q Qset {}\" \n          \"finite (support Q)\" \"finite (varacom C)\"\n          \"\\<forall>l s. P l s \\<longrightarrow> pre C Q l s\" \n          \"\\<And>s1 s2 l. s1 = s2 on Qset \\<Longrightarrow> Q l s1 = Q l s2\"\n  shows \"\\<turnstile>\\<^sub>1 {P} strip C {time C \\<Down> Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} strip C { time C \\<Down> Q}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} strip C { time C \\<Down> Q}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} strip C { time C \\<Down> Q}", "apply(rule conseq_old)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          P l s \\<longrightarrow> ?P l s \\<and> ?e' s \\<le> k * time C s\n 2. \\<turnstile>\\<^sub>1 {?P} strip C { ?e' \\<Down> ?Q}\n 3. \\<forall>l s. ?Q l s \\<longrightarrow> Q l s", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {?P} strip C { ?e' \\<Down> ?Q}\n 2. \\<exists>k>0.\n       \\<forall>l s.\n          P l s \\<longrightarrow> ?P l s \\<and> ?e' s \\<le> k * time C s\n 3. \\<forall>l s. ?Q l s \\<longrightarrow> Q l s", "apply(rule vc_sound[where upds=\"[]\", OF assms(1), simplified, OF assms(2-3), THEN conjunct1])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>l s1 s2. s1 = s2 on Qset \\<longrightarrow> Q l s1 = Q l s2\n 2. \\<exists>k>0.\n       \\<forall>l s.\n          P l s \\<longrightarrow>\n          pre C Q l s \\<and> time C s \\<le> k * time C s\n 3. \\<forall>l s. Q l s \\<longrightarrow> Q l s", "using assms(4,5)"], ["proof (prove)\nusing this:\n  \\<forall>l s. P l s \\<longrightarrow> pre C Q l s\n  ?s1.0 = ?s2.0 on Qset \\<Longrightarrow> Q ?l ?s1.0 = Q ?l ?s2.0\n\ngoal (3 subgoals):\n 1. \\<forall>l s1 s2. s1 = s2 on Qset \\<longrightarrow> Q l s1 = Q l s2\n 2. \\<exists>k>0.\n       \\<forall>l s.\n          P l s \\<longrightarrow>\n          pre C Q l s \\<and> time C s \\<le> k * time C s\n 3. \\<forall>l s. Q l s \\<longrightarrow> Q l s", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {P} strip C { time C \\<Down> Q}\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary vc_sound'':\n  assumes \"vc C Q Qset {}\" \n          \"finite (support Q)\" \"finite (varacom C)\"\n          \" (\\<exists>k>0. \\<forall>l s. P l s \\<longrightarrow> pre C Q l s \\<and> time C s \\<le> k * e s)\"\n          \"\\<And>s1 s2 l. s1 = s2 on Qset \\<Longrightarrow> Q l s1 = Q l s2\"\n  shows \"\\<turnstile>\\<^sub>1 {P} strip C {e \\<Down> Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} strip C { e \\<Down> Q}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} strip C { e \\<Down> Q}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} strip C { e \\<Down> Q}", "apply(rule conseq_old)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          P l s \\<longrightarrow> ?P l s \\<and> ?e' s \\<le> k * e s\n 2. \\<turnstile>\\<^sub>1 {?P} strip C { ?e' \\<Down> ?Q}\n 3. \\<forall>l s. ?Q l s \\<longrightarrow> Q l s", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>1 {?P} strip C { ?e' \\<Down> ?Q}\n 2. \\<exists>k>0.\n       \\<forall>l s.\n          P l s \\<longrightarrow> ?P l s \\<and> ?e' s \\<le> k * e s\n 3. \\<forall>l s. ?Q l s \\<longrightarrow> Q l s", "apply(rule vc_sound[where upds=\"[]\", OF assms(1), simplified, OF assms(2-3), THEN conjunct1])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>l s1 s2. s1 = s2 on Qset \\<longrightarrow> Q l s1 = Q l s2\n 2. \\<exists>k>0.\n       \\<forall>l s.\n          P l s \\<longrightarrow> pre C Q l s \\<and> time C s \\<le> k * e s\n 3. \\<forall>l s. Q l s \\<longrightarrow> Q l s", "using assms(4,5)"], ["proof (prove)\nusing this:\n  \\<exists>k>0.\n     \\<forall>l s.\n        P l s \\<longrightarrow> pre C Q l s \\<and> time C s \\<le> k * e s\n  ?s1.0 = ?s2.0 on Qset \\<Longrightarrow> Q ?l ?s1.0 = Q ?l ?s2.0\n\ngoal (3 subgoals):\n 1. \\<forall>l s1 s2. s1 = s2 on Qset \\<longrightarrow> Q l s1 = Q l s2\n 2. \\<exists>k>0.\n       \\<forall>l s.\n          P l s \\<longrightarrow> pre C Q l s \\<and> time C s \\<le> k * e s\n 3. \\<forall>l s. Q l s \\<longrightarrow> Q l s", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {P} strip C { e \\<Down> Q}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}