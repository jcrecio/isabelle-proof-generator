{"file_name": "/home/qj213/afp-2021-10-22/thys/Hoare_Time/QuantK_Examples.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hoare_Time", "problem_names": ["lemma example: \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (2 + 3*n) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\"", "lemma example_sound:  \"\\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (2 + 3*n) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\"", "lemma \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. 1} SKIP ;; SKIP {\\<lambda>s. 0 }\"", "lemma hoareQ_Seq_assoc: \"\\<turnstile>\\<^sub>2\\<^sub>' {P} A;; B;; C {Q} = (\\<turnstile>\\<^sub>2\\<^sub>' {P} A;; (B;; C) {Q})\"", "lemma \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. 1} SKIP  ;; SKIP ;; SKIP {\\<lambda>s. 0 }\"", "lemma \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (2 + 3*n) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\"", "lemma assumes n0: \"n>0\" shows \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (n ) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\"", "lemma  \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (n+1) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\""], "translations": [["", "lemma example: \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (2 + 3*n) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "apply(rule Seq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>2}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {?P\\<^sub>2} wsum {\\<lambda>s. 0}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P\\<^sub>2} wsum {\\<lambda>s. 0}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>2}", "apply(rule conseq')"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P3} wsum {?Q3}\n 2. \\<forall>s. ?P3 s \\<le> ?P\\<^sub>2 s\n 3. \\<forall>s. 0 \\<le> ?Q3 s\n 4. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>2}", "apply(rule While[where I=\"\\<lambda>s. enat (3 * nat (s ''x''))\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (3 * nat (s ''x'')) +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 ''y'' ::= Plus (V ''y'') (V ''x'');;\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t. enat (3 * nat (t ''x'')) + 1}\n 2. \\<forall>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 3. \\<forall>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>2}", "apply(rule Seq)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (3 * nat (s ''x'')) +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 ''y'' ::= Plus (V ''y'') (V ''x'')\n                                 {?P\\<^sub>29}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {?P\\<^sub>29}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t. enat (3 * nat (t ''x'')) + 1}\n 3. \\<forall>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 4. \\<forall>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>2}", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P\\<^sub>29}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t. enat (3 * nat (t ''x'')) + 1}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (3 * nat (s ''x'')) +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 ''y'' ::= Plus (V ''y'') (V ''x'')\n                                 {?P\\<^sub>29}\n 3. \\<forall>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 4. \\<forall>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>2}", "apply(rule Assign)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (3 * nat (s ''x'')) +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 ''y'' ::= Plus (V ''y'') (V ''x'')\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (3 * nat ((s[Plus (V ''x'') (N (- 1))/''x'']) ''x'')) + 1)}\n 2. \\<forall>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 3. \\<forall>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>2}", "apply(rule Assign')"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<forall>s.\n       eSuc\n        (eSuc\n          (enat\n            (3 *\n             nat (((s[Plus (V ''y'')\n                       (V ''x'')/''y''])[Plus (V ''x'') (N (- 1))/''x''])\n                   ''x'')) +\n           1))\n       \\<le> enat (3 * nat (s ''x'')) +\n             \\<up> (bval (Less (N 0) (V ''x'')) s)\n 2. \\<forall>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 3. \\<forall>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>2}", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<forall>s.\n       eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n       \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<forall>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 3. \\<forall>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>2}", "apply(safe)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s.\n       eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n       \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<And>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 3. \\<And>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>2}", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(cases \"0 < s ''x''\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x''))\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply (smt Suc_eq_plus1 Suc_nat_eq_nat_zadd1 distrib_left_numeral eSuc_numeral enat_numeral eq_iff iadd_Suc_right nat_mult_1_right one_add_one plus_1_eSuc(1) plus_enat_simps(1) semiring_norm(5))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s. enat (3 * nat (s ''x'')) + 1 \\<le> ?P\\<^sub>2 s\n 2. \\<And>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 3. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>2}", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       0 \\<le> enat (3 * nat (s ''x'')) +\n               \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0\n                                 {\\<lambda>s. enat (3 * nat (s ''x'')) + 1}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0\n                                 {\\<lambda>s. enat (3 * nat (s ''x'')) + 1}", "apply(rule Assign')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (enat (3 * nat ((s[N 0/''y'']) ''x'')) + 1)\n       \\<le> enat (2 + 3 * n) + \\<up> (s ''x'' = int n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (enat (3 * nat (s ''x'')) + 1)\n       \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (enat (3 * nat (s ''x'')) + 1)\n       \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply(cases \"s ''x'' = int n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. s ''x'' = int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)\n 2. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. s ''x'' = int n \\<Longrightarrow>\n    eSuc (enat (3 * n) + 1) \\<le> enat (Suc (Suc (3 * n)))\n 2. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply (simp add: eSuc_enat plus_1_eSuc(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma example_sound:  \"\\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (2 + 3*n) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n    ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "apply(rule hoareQ_sound)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "apply (rule example)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. ?A s + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "apply(rule Seq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>24}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {?P\\<^sub>24} wsum {\\<lambda>s. 0}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P\\<^sub>24} wsum {\\<lambda>s. 0}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>24}", "apply(rule conseq')"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P7} wsum {?Q7}\n 2. \\<forall>s. ?P7 s \\<le> ?P\\<^sub>24 s\n 3. \\<forall>s. 0 \\<le> ?Q7 s\n 4. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>24}", "apply(rule While)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?I11 s +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 ''y'' ::= Plus (V ''y'') (V ''x'');;\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t. ?I11 t + 1}\n 2. \\<forall>s. ?I11 s + 1 \\<le> ?P\\<^sub>24 s\n 3. \\<forall>s.\n       0 \\<le> ?I11 s + \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>24}", "apply(rule Seq)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?I11 s +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 ''y'' ::= Plus (V ''y'') (V ''x'')\n                                 {?P\\<^sub>213}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {?P\\<^sub>213}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t. ?I11 t + 1}\n 3. \\<forall>s. ?I11 s + 1 \\<le> ?P\\<^sub>24 s\n 4. \\<forall>s.\n       0 \\<le> ?I11 s + \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>24}", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P\\<^sub>213}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t. ?I11 t + 1}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?I11 s +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 ''y'' ::= Plus (V ''y'') (V ''x'')\n                                 {?P\\<^sub>213}\n 3. \\<forall>s. ?I11 s + 1 \\<le> ?P\\<^sub>24 s\n 4. \\<forall>s.\n       0 \\<le> ?I11 s + \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>24}", "apply(rule Assign)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?I11 s +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 ''y'' ::= Plus (V ''y'') (V ''x'')\n                                 {\\<lambda>s.\n                                     eSuc\n(?I11 (s[Plus (V ''x'') (N (- 1))/''x'']) + 1)}\n 2. \\<forall>s. ?I11 s + 1 \\<le> ?P\\<^sub>24 s\n 3. \\<forall>s.\n       0 \\<le> ?I11 s + \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>24}", "apply(rule Assign')"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<forall>s.\n       eSuc\n        (eSuc\n          (?I11\n            ((s[Plus (V ''y'')\n                 (V ''x'')/''y''])[Plus (V ''x'') (N (- 1))/''x'']) +\n           1))\n       \\<le> ?I11 s + \\<up> (bval (Less (N 0) (V ''x'')) s)\n 2. \\<forall>s. ?I11 s + 1 \\<le> ?P\\<^sub>24 s\n 3. \\<forall>s.\n       0 \\<le> ?I11 s + \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>24}", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<forall>s.\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s + \\<up> (0 < s ''x'')\n 2. \\<forall>s. ?I11 s + 1 \\<le> ?P\\<^sub>24 s\n 3. \\<forall>s.\n       0 \\<le> ?I11 s + \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>24}", "apply(safe)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s.\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s + \\<up> (0 < s ''x'')\n 2. \\<And>s. ?I11 s + 1 \\<le> ?P\\<^sub>24 s\n 3. \\<And>s. 0 \\<le> ?I11 s + \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>24}", "apply(case_tac \"0 < s ''x''\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s + \\<up> (0 < s ''x'')\n 2. \\<And>s.\n       \\<not> 0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s + \\<up> (0 < s ''x'')\n 3. \\<And>s. ?I11 s + 1 \\<le> ?P\\<^sub>24 s\n 4. \\<And>s. 0 \\<le> ?I11 s + \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>24}", "apply(simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s\n 2. \\<And>s.\n       \\<not> 0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s + \\<up> (0 < s ''x'')\n 3. \\<And>s. ?I11 s + 1 \\<le> ?P\\<^sub>24 s\n 4. \\<And>s. 0 \\<le> ?I11 s + \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>24}", "defer"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s.\n       \\<not> 0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s + \\<up> (0 < s ''x'')\n 2. \\<And>s. ?I11 s + 1 \\<le> ?P\\<^sub>24 s\n 3. \\<And>s. 0 \\<le> ?I11 s + \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>24}\n 5. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s. ?I11 s + 1 \\<le> ?P\\<^sub>24 s\n 2. \\<And>s. 0 \\<le> ?I11 s + \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 3. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {?P\\<^sub>24}\n 4. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s. 0 \\<le> ?I11 s + \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {\\<lambda>s. ?I11 s + 1}\n 3. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     ?A s + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0 {\\<lambda>s. ?I11 s + 1}\n 2. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s", "apply(rule Assign')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>s.\n       eSuc (?I11 (s[N 0/''y'']) + 1) \\<le> ?A s + \\<up> (s ''x'' = int n)\n 2. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>s.\n       eSuc (?I11 (s(''y'' := 0)) + 1) \\<le> ?A s + \\<up> (s ''x'' = int n)\n 2. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       eSuc (?I11 (s(''y'' := 0)) + 1) \\<le> ?A s + \\<up> (s ''x'' = int n)\n 2. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s", "apply(case_tac \"s ''x'' = int n\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       s ''x'' = int n \\<Longrightarrow>\n       eSuc (?I11 (s(''y'' := 0)) + 1) \\<le> ?A s + \\<up> (s ''x'' = int n)\n 2. \\<And>s.\n       s ''x'' \\<noteq> int n \\<Longrightarrow>\n       eSuc (?I11 (s(''y'' := 0)) + 1) \\<le> ?A s + \\<up> (s ''x'' = int n)\n 3. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       s ''x'' = int n \\<Longrightarrow>\n       eSuc (?I11 (s(''y'' := 0)) + 1) \\<le> ?A s\n 2. \\<And>s.\n       s ''x'' \\<noteq> int n \\<Longrightarrow>\n       eSuc (?I11 (s(''y'' := 0)) + 1) \\<le> ?A s + \\<up> (s ''x'' = int n)\n 3. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s", "apply (simp add: eSuc_enat plus_1_eSuc(2))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       s ''x'' = int n \\<Longrightarrow>\n       eSuc (eSuc (?I11 (s(''y'' := 0)))) \\<le> ?A s\n 2. \\<And>s.\n       s ''x'' \\<noteq> int n \\<Longrightarrow>\n       eSuc (?I11 (s(''y'' := 0)) + 1) \\<le> ?A s + \\<up> (s ''x'' = int n)\n 3. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s", "defer"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       s ''x'' \\<noteq> int n \\<Longrightarrow>\n       eSuc (?I11 (s(''y'' := 0)) + 1) \\<le> ?A s + \\<up> (s ''x'' = int n)\n 2. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s\n 3. \\<And>s.\n       s ''x'' = int n \\<Longrightarrow>\n       eSuc (eSuc (?I11 (s(''y'' := 0)))) \\<le> ?A s", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s\n 2. \\<And>s.\n       s ''x'' = int n \\<Longrightarrow>\n       eSuc (eSuc (?I11 (s(''y'' := 0)))) \\<le> ?A s", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       s ''x'' = int n \\<Longrightarrow>\n       eSuc (eSuc (?I11 (s(''y'' := 0)))) \\<le> ?A s\n 2. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       0 < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (?I11 (s(''y'' := s ''y'' + s ''x'', ''x'' := s ''x'' - 1)) + 1))\n       \\<le> ?I11 s", "oops"], ["", "subsubsection \"Example for VCG\""], ["", "lemma \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. 1} SKIP ;; SKIP {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. 1} SKIP;; SKIP {\\<lambda>s. 0}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. 1} SKIP;; SKIP {\\<lambda>s. 0}", "have \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat 1} strip ({2} Ab (SKIP ;; SKIP)) {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat 1}\n                                 strip ({2} Ab (SKIP;; SKIP))\n                                 {\\<lambda>s. 0}", "apply(rule vc_sound')"], ["proof (prove)\ngoal (2 subgoals):\n 1. vc ({2} Ab (SKIP;; SKIP)) (\\<lambda>s. 0)\n 2. \\<forall>s. pre ({2} Ab (SKIP;; SKIP)) (\\<lambda>s. 0) s \\<le> enat 1", "apply(auto simp: eSuc_enat zero_enat_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. mydiv (Suc (Suc 0)) 2 \\<le> Suc 0", "by (simp add: mydivcode mydivcode1 mydivcode2)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat 1}\n                               strip ({2} Ab (SKIP;; SKIP)) {\\<lambda>s. 0}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. 1} SKIP;; SKIP {\\<lambda>s. 0}", "then"], ["proof (chain)\npicking this:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat 1}\n                               strip ({2} Ab (SKIP;; SKIP)) {\\<lambda>s. 0}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat 1}\n                               strip ({2} Ab (SKIP;; SKIP)) {\\<lambda>s. 0}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. 1} SKIP;; SKIP {\\<lambda>s. 0}", "by (simp add: one_enat_def)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. 1} SKIP;; SKIP {\\<lambda>s. 0}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hoareQ_Seq_assoc: \"\\<turnstile>\\<^sub>2\\<^sub>' {P} A;; B;; C {Q} = (\\<turnstile>\\<^sub>2\\<^sub>' {P} A;; (B;; C) {Q})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<turnstile>\\<^sub>2\\<^sub>' {P} A;; B;; C {Q}) =\n    (\\<turnstile>\\<^sub>2\\<^sub>' {P} A;; (B;; C) {Q})", "by(auto simp: hoare2o_valid_def hoareQ_sound_complete Seq_t_assoc)"], ["", "lemma \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. 1} SKIP  ;; SKIP ;; SKIP {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. 1} SKIP;; SKIP;; SKIP\n                                 {\\<lambda>s. 0}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. 1} SKIP;; SKIP;; SKIP\n                                 {\\<lambda>s. 0}", "have \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat 1} strip ({2} Ab (SKIP ;; {2} Ab (SKIP ;; SKIP))) {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat 1}\n                                 strip\n                                  ({2} Ab (SKIP;; {2} Ab (SKIP;; SKIP)))\n                                 {\\<lambda>s. 0}", "apply(rule vc_sound')"], ["proof (prove)\ngoal (2 subgoals):\n 1. vc ({2} Ab (SKIP;; {2} Ab (SKIP;; SKIP))) (\\<lambda>s. 0)\n 2. \\<forall>s.\n       pre ({2} Ab (SKIP;; {2} Ab (SKIP;; SKIP))) (\\<lambda>s. 0) s\n       \\<le> enat 1", "apply(auto simp: eSuc_enat zero_enat_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. mydiv (Suc (mydiv (Suc (Suc 0)) 2)) 2 \\<le> Suc 0", "by (simp add: mydivcode mydivcode1 mydivcode2)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat 1}\n                               strip ({2} Ab (SKIP;; {2} Ab (SKIP;; SKIP)))\n                               {\\<lambda>s. 0}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. 1} SKIP;; SKIP;; SKIP\n                                 {\\<lambda>s. 0}", "then"], ["proof (chain)\npicking this:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat 1}\n                               strip ({2} Ab (SKIP;; {2} Ab (SKIP;; SKIP)))\n                               {\\<lambda>s. 0}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat 1}\n                               strip ({2} Ab (SKIP;; {2} Ab (SKIP;; SKIP)))\n                               {\\<lambda>s. 0}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. 1} SKIP;; SKIP;; SKIP\n                                 {\\<lambda>s. 0}", "by (simp add: one_enat_def hoareQ_Seq_assoc)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. 1} SKIP;; SKIP;; SKIP\n                               {\\<lambda>s. 0}\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation \"Wsum ==  \n  {\\<lambda>s. enat (3 * nat (s ''x''))} WHILE Less (N 0) (V ''x'')\n  DO (''y'' ::= Plus (V ''y'') (V ''x'');;\n      ''x'' ::= Plus (V ''x'') (N (- 1)))\""], ["", "lemma \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (2 + 3*n) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "have \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (2 + 3*n) + emb (s ''x'' = int n)} strip (''y'' ::= N 0;; Wsum) {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 strip (''y'' ::= N 0;; Wsum)\n                                 {\\<lambda>s. 0}", "apply(rule vc_sound')"], ["proof (prove)\ngoal (2 subgoals):\n 1. vc (''y'' ::= N 0;; Wsum) (\\<lambda>s. 0)\n 2. \\<forall>s.\n       pre (''y'' ::= N 0;; Wsum) (\\<lambda>s. 0) s\n       \\<le> enat (2 + 3 * n) + \\<up> (s ''x'' = int n)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. vc (''y'' ::= N 0;; Wsum) (\\<lambda>s. 0)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n       \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n       \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(cases \"0 < s ''x''\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x''))\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply ( smt Suc_eq_plus1 Suc_nat_eq_nat_zadd1 distrib_left_numeral eSuc_numeral enat_numeral eq_iff iadd_Suc_right nat_mult_1_right one_add_one plus_1_eSuc(1) plus_enat_simps(1) semiring_norm(5))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       pre (''y'' ::= N 0;; Wsum) (\\<lambda>s. 0) s\n       \\<le> enat (2 + 3 * n) + \\<up> (s ''x'' = int n)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       pre (''y'' ::= N 0;; Wsum) (\\<lambda>s. 0) s\n       \\<le> enat (2 + 3 * n) + \\<up> (s ''x'' = int n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (enat (3 * nat (s ''x'')) + 1)\n       \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (enat (3 * nat (s ''x'')) + 1)\n       \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply(cases \"s ''x'' = int n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. s ''x'' = int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)\n 2. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. s ''x'' = int n \\<Longrightarrow>\n    eSuc (enat (3 * n) + 1) \\<le> enat (Suc (Suc (3 * n)))\n 2. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply (simp add: eSuc_enat plus_1_eSuc(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    eSuc (enat (3 * nat (s ''x'')) + 1)\n    \\<le> enat (Suc (Suc (3 * n))) + \\<up> (s ''x'' = int n)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                   enat (2 + 3 * n) +\n                                   \\<up> (s ''x'' = int n)}\n                               strip (''y'' ::= N 0;; Wsum) {\\<lambda>s. 0}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "then"], ["proof (chain)\npicking this:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                   enat (2 + 3 * n) +\n                                   \\<up> (s ''x'' = int n)}\n                               strip (''y'' ::= N 0;; Wsum) {\\<lambda>s. 0}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                   enat (2 + 3 * n) +\n                                   \\<up> (s ''x'' = int n)}\n                               strip (''y'' ::= N 0;; Wsum) {\\<lambda>s. 0}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (2 + 3 * n) +\n                                     \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "by simp"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                   enat (2 + 3 * n) +\n                                   \\<up> (s ''x'' = int n)}\n                               ''y'' ::= N 0;; wsum {\\<lambda>s. 0}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assumes n0: \"n>0\" shows \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (n ) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat n + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat n + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "from n0"], ["proof (chain)\npicking this:\n  0 < n", "obtain n' where n': \"n=Suc n'\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<And>n'. n = Suc n' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using not0_implies_Suc"], ["proof (prove)\nusing this:\n  0 < n\n  ?n \\<noteq> 0 \\<Longrightarrow> \\<exists>m. ?n = Suc m\n\ngoal (1 subgoal):\n 1. (\\<And>n'. n = Suc n' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat n + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "have \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (n ) + emb (s ''x'' = int n)} strip ({5} Ab (''y'' ::= N 0;; Wsum)) {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat n + \\<up> (s ''x'' = int n)}\n                                 strip ({5} Ab (''y'' ::= N 0;; Wsum))\n                                 {\\<lambda>s. 0}", "apply(rule vc_sound')"], ["proof (prove)\ngoal (2 subgoals):\n 1. vc ({5} Ab (''y'' ::= N 0;; Wsum)) (\\<lambda>s. 0)\n 2. \\<forall>s.\n       pre ({5} Ab (''y'' ::= N 0;; Wsum)) (\\<lambda>s. 0) s\n       \\<le> enat n + \\<up> (s ''x'' = int n)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. vc ({5} Ab (''y'' ::= N 0;; Wsum)) (\\<lambda>s. 0)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n       \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n       \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(cases \"0 < s ''x''\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x''))\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply ( smt Suc_eq_plus1 Suc_nat_eq_nat_zadd1 distrib_left_numeral eSuc_numeral enat_numeral eq_iff iadd_Suc_right nat_mult_1_right one_add_one plus_1_eSuc(1) plus_enat_simps(1) semiring_norm(5))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       pre ({5} Ab (''y'' ::= N 0;; Wsum)) (\\<lambda>s. 0) s\n       \\<le> enat n + \\<up> (s ''x'' = int n)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       pre ({5} Ab (''y'' ::= N 0;; Wsum)) (\\<lambda>s. 0) s\n       \\<le> enat n + \\<up> (s ''x'' = int n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       ediv (eSuc (enat (3 * nat (s ''x'')) + 1)) 5\n       \\<le> enat n + \\<up> (s ''x'' = int n)", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       ediv (eSuc (enat (3 * nat (s ''x'')) + 1)) 5\n       \\<le> enat n + \\<up> (s ''x'' = int n)", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. ediv (eSuc (enat (3 * nat (s ''x'')) + 1)) 5\n    \\<le> enat n + \\<up> (s ''x'' = int n)", "apply(cases \"s ''x'' = int n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. s ''x'' = int n \\<Longrightarrow>\n    ediv (eSuc (enat (3 * nat (s ''x'')) + 1)) 5\n    \\<le> enat n + \\<up> (s ''x'' = int n)\n 2. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    ediv (eSuc (enat (3 * nat (s ''x'')) + 1)) 5\n    \\<le> enat n + \\<up> (s ''x'' = int n)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. s ''x'' = int n \\<Longrightarrow>\n    ediv (eSuc (enat (3 * n) + 1)) 5 \\<le> enat n\n 2. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    ediv (eSuc (enat (3 * nat (s ''x'')) + 1)) 5\n    \\<le> enat n + \\<up> (s ''x'' = int n)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. s ''x'' = int n \\<Longrightarrow>\n    ediv (eSuc (enat (3 * n) + 1)) 5 \\<le> enat n", "apply (simp add: eSuc_enat plus_1_eSuc(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. s ''x'' = int n \\<Longrightarrow> mydiv (Suc (Suc (3 * n))) 5 \\<le> n", "apply(simp add: n')"], ["proof (prove)\ngoal (1 subgoal):\n 1. s ''x'' = 1 + int n' \\<Longrightarrow> mydiv (5 + 3 * n') 5 \\<le> Suc n'", "apply (simp add: mydiv_le_E)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    ediv (eSuc (enat (3 * nat (s ''x'')) + 1)) 5\n    \\<le> enat n + \\<up> (s ''x'' = int n)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                   enat n + \\<up> (s ''x'' = int n)}\n                               strip ({5} Ab (''y'' ::= N 0;; Wsum))\n                               {\\<lambda>s. 0}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat n + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "then"], ["proof (chain)\npicking this:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                   enat n + \\<up> (s ''x'' = int n)}\n                               strip ({5} Ab (''y'' ::= N 0;; Wsum))\n                               {\\<lambda>s. 0}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                   enat n + \\<up> (s ''x'' = int n)}\n                               strip ({5} Ab (''y'' ::= N 0;; Wsum))\n                               {\\<lambda>s. 0}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat n + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "by simp"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                   enat n + \\<up> (s ''x'' = int n)}\n                               ''y'' ::= N 0;; wsum {\\<lambda>s. 0}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (n+1) + emb (s ''x'' = int n)} ''y'' ::= N 0;; wsum {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (n + 1) + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (n + 1) + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "have \"\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (n+1) + emb (s ''x'' = int n)} strip ({3} Ab (''y'' ::= N 0;; Wsum)) {\\<lambda>s. 0 }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (n + 1) + \\<up> (s ''x'' = int n)}\n                                 strip ({3} Ab (''y'' ::= N 0;; Wsum))\n                                 {\\<lambda>s. 0}", "apply(rule vc_sound')"], ["proof (prove)\ngoal (2 subgoals):\n 1. vc ({3} Ab (''y'' ::= N 0;; Wsum)) (\\<lambda>s. 0)\n 2. \\<forall>s.\n       pre ({3} Ab (''y'' ::= N 0;; Wsum)) (\\<lambda>s. 0) s\n       \\<le> enat (n + 1) + \\<up> (s ''x'' = int n)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. vc ({3} Ab (''y'' ::= N 0;; Wsum)) (\\<lambda>s. 0)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n       \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n       \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(cases \"0 < s ''x''\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x''))\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply ( smt Suc_eq_plus1 Suc_nat_eq_nat_zadd1 distrib_left_numeral eSuc_numeral enat_numeral eq_iff iadd_Suc_right nat_mult_1_right one_add_one plus_1_eSuc(1) plus_enat_simps(1) semiring_norm(5))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (enat (3 * nat (s ''x'' - 1)) + 1))\n    \\<le> enat (3 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       pre ({3} Ab (''y'' ::= N 0;; Wsum)) (\\<lambda>s. 0) s\n       \\<le> enat (n + 1) + \\<up> (s ''x'' = int n)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       pre ({3} Ab (''y'' ::= N 0;; Wsum)) (\\<lambda>s. 0) s\n       \\<le> enat (n + 1) + \\<up> (s ''x'' = int n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       ediv (eSuc (enat (3 * nat (s ''x'')) + 1)) 3\n       \\<le> enat (Suc n) + \\<up> (s ''x'' = int n)", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       ediv (eSuc (enat (3 * nat (s ''x'')) + 1)) 3\n       \\<le> enat (Suc n) + \\<up> (s ''x'' = int n)", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. ediv (eSuc (enat (3 * nat (s ''x'')) + 1)) 3\n    \\<le> enat (Suc n) + \\<up> (s ''x'' = int n)", "apply(cases \"s ''x'' = int n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. s ''x'' = int n \\<Longrightarrow>\n    ediv (eSuc (enat (3 * nat (s ''x'')) + 1)) 3\n    \\<le> enat (Suc n) + \\<up> (s ''x'' = int n)\n 2. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    ediv (eSuc (enat (3 * nat (s ''x'')) + 1)) 3\n    \\<le> enat (Suc n) + \\<up> (s ''x'' = int n)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. s ''x'' = int n \\<Longrightarrow>\n    ediv (eSuc (enat (3 * n) + 1)) 3 \\<le> enat (Suc n)\n 2. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    ediv (eSuc (enat (3 * nat (s ''x'')) + 1)) 3\n    \\<le> enat (Suc n) + \\<up> (s ''x'' = int n)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. s ''x'' = int n \\<Longrightarrow>\n    ediv (eSuc (enat (3 * n) + 1)) 3 \\<le> enat (Suc n)", "apply (simp add: eSuc_enat plus_1_eSuc(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. s ''x'' = int n \\<Longrightarrow>\n    mydiv (Suc (Suc (3 * n))) 3 \\<le> Suc n", "apply (simp add: mydiv_le_E)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. s ''x'' \\<noteq> int n \\<Longrightarrow>\n    ediv (eSuc (enat (3 * nat (s ''x'')) + 1)) 3\n    \\<le> enat (Suc n) + \\<up> (s ''x'' = int n)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                   enat (n + 1) + \\<up> (s ''x'' = int n)}\n                               strip ({3} Ab (''y'' ::= N 0;; Wsum))\n                               {\\<lambda>s. 0}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (n + 1) + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "then"], ["proof (chain)\npicking this:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                   enat (n + 1) + \\<up> (s ''x'' = int n)}\n                               strip ({3} Ab (''y'' ::= N 0;; Wsum))\n                               {\\<lambda>s. 0}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                   enat (n + 1) + \\<up> (s ''x'' = int n)}\n                               strip ({3} Ab (''y'' ::= N 0;; Wsum))\n                               {\\<lambda>s. 0}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (n + 1) + \\<up> (s ''x'' = int n)}\n                                 ''y'' ::= N 0;; wsum {\\<lambda>s. 0}", "by simp"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                   enat (n + 1) + \\<up> (s ''x'' = int n)}\n                               ''y'' ::= N 0;; wsum {\\<lambda>s. 0}\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation \"Wsum1 z ==  \n  {\\<lambda>s. enat (z * nat (s ''x''))} WHILE Less (N 0) (V ''x'')\n  DO (''y'' ::= Plus (V ''y'') (V ''x'');;\n      ''x'' ::= Plus (V ''x'') (N (- 1)))\""], ["", "abbreviation \"Wsum2 n vier ==  \n  {\\<lambda>s. enat (vier * (nat (s ''x'') +  n + 1))  } WHILE Less (N 0) (V ''x'')\n  DO (''y'' ::= Plus (V ''y'') (V ''x'');;\n      ''x'' ::= Plus (V ''x'') (N (- 1)))\""], ["", "end"]]}