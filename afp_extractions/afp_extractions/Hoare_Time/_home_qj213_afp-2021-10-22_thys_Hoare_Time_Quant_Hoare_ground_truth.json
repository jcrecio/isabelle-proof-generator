{"file_name": "/home/qj213/afp-2021-10-22/thys/Hoare_Time/Quant_Hoare.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hoare_Time", "problem_names": ["lemma strengthen_pre: \"\\<lbrakk> \\<forall>s. P s \\<le> P' s;  \\<turnstile>\\<^sub>2 {P} c {Q} \\<rbrakk> \\<Longrightarrow> \\<turnstile>\\<^sub>2 {P'} c {Q}\"", "lemma weaken_post: \"\\<lbrakk> \\<turnstile>\\<^sub>2 {P} c {Q};  \\<forall>s. Q s \\<ge> Q' s \\<rbrakk> \\<Longrightarrow>  \\<turnstile>\\<^sub>2 {P} c {Q'}\"", "lemma Assign': \"\\<forall>s. P s \\<ge> eSuc ( Q(s[a/x])) \\<Longrightarrow> \\<turnstile>\\<^sub>2 {P} x ::= a {Q}\"", "lemma progress: \"(c, s) \\<Rightarrow> p \\<Down> t \\<Longrightarrow> p > 0\"", "lemma FalseImplies: \"\\<turnstile>\\<^sub>2 {%s. \\<infinity>} c { Q}\"", "lemma help1: assumes \" enat a + X \\<le> Y\"\n    \"enat b + Z \\<le> X\"\n  shows \"enat (a + b) + Z \\<le> Y\"", "lemma help2': assumes \"enat p + INV t  \\<le> INV s\"\n    \"0 < p\" \"INV s = enat n\"\n  shows \"INV t < INV s\"", "lemma help2: assumes \"enat p + INV t + 1 \\<le> INV s\"\n     \"INV s = enat n\"\n  shows \"INV t < INV s\"", "lemma Seq_sound: assumes \"\\<Turnstile>\\<^sub>2 {P1} C1 {P2}\"\n    \"\\<Turnstile>\\<^sub>2 {P2} C2 {P3}\" \n    shows  \"\\<Turnstile>\\<^sub>2 {P1} C1 ;; C2 {P3}\"", "theorem hoare2_sound: \"\\<turnstile>\\<^sub>2 {P}c{ Q}  \\<Longrightarrow>  \\<Turnstile>\\<^sub>2 {P}c{ Q}\"", "lemma wp2_alt: \"wp\\<^sub>2 c Q = (\\<lambda>s. (if \\<down>(c,s) then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s)) else \\<infinity>))\"", "theorem wp2_is_weakestprePotential: \"\\<Turnstile>\\<^sub>2 {P}c{Q} \\<longleftrightarrow> (\\<forall>s. wp\\<^sub>2 c Q s \\<le> P s)\"", "lemma wp2_Skip[simp]: \"wp\\<^sub>2 SKIP Q = (%s. eSuc (Q s))\"", "lemma wp2_Assign[simp]: \"wp\\<^sub>2 (x ::= e) Q = (\\<lambda>s. eSuc (Q (s(x := aval e s))))\"", "lemma wp2_Seq[simp]: \"wp\\<^sub>2 (c\\<^sub>1;;c\\<^sub>2) Q = wp\\<^sub>2 c\\<^sub>1 (wp\\<^sub>2 c\\<^sub>2 Q)\"", "lemma wp2_If[simp]:\n \"wp\\<^sub>2 (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) Q = (\\<lambda>s. eSuc (wp\\<^sub>2 (if bval b s then c\\<^sub>1 else c\\<^sub>2) Q s))\"", "lemma assumes b: \"bval b s\"\n  shows wp2WhileTrue: \" wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s  + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\"", "lemma assumes b: \"bval b s\"\nshows wp2WhileTrue': \"wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s  + 1 = wp\\<^sub>2 (WHILE b DO c) Q s\"", "lemma assumes b: \"~ bval b s\"\n  shows wp2WhileFalse: \" Q s  + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\"", "lemma thet_WhileFalse: \"~ bval b s \\<Longrightarrow> \\<down>\\<^sub>t (WHILE b DO c, s) = 1\"", "lemma thes_WhileFalse: \"~ bval b s \\<Longrightarrow> \\<down>\\<^sub>s (WHILE b DO c, s) = s\"", "lemma assumes b: \"~ bval b s\"\n  shows wp2WhileFalse': \"Q s  + 1 = wp\\<^sub>2 (WHILE b DO c) Q s\"", "lemma wp2While: \"(if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s else Q s) + 1 = wp\\<^sub>2 (WHILE b DO c) Q s\"", "lemma assumes \"\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}\"\n  shows  \"\\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE b DO c) Q} WHILE b DO c {Q}\"", "lemma wp2_is_pre: \"\\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c { Q}\"", "lemma wp2_is_weakestprePotential1: \"\\<Turnstile>\\<^sub>2 {P}c{Q} \\<Longrightarrow> (\\<forall>s. wp\\<^sub>2 c Q s \\<le> P s)\"", "lemma wp2_is_weakestprePotential2: \"(\\<forall>s. wp\\<^sub>2 c Q s \\<le> P s) \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P}c{Q}\"", "theorem wp2_is_weakestprePotential: \"(\\<forall>s. wp\\<^sub>2 c Q s \\<le> P s) \\<longleftrightarrow> \\<Turnstile>\\<^sub>2 {P}c{Q}\"", "theorem hoare2_complete: \"\\<Turnstile>\\<^sub>2 {P}c{Q} \\<Longrightarrow> \\<turnstile>\\<^sub>2 {P}c{ Q}\""], "translations": [["", "lemma strengthen_pre: \"\\<lbrakk> \\<forall>s. P s \\<le> P' s;  \\<turnstile>\\<^sub>2 {P} c {Q} \\<rbrakk> \\<Longrightarrow> \\<turnstile>\\<^sub>2 {P'} c {Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>s. P s \\<le> P' s;\n     \\<turnstile>\\<^sub>2 {P} c {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2 {P'} c {Q}", "using conseq"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<turnstile>\\<^sub>2 {?P} ?c {?Q}; \\<And>s. ?P s \\<le> ?P' s;\n   \\<And>s. ?Q' s \\<le> ?Q s\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>2 {?P'} ?c {?Q'}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>s. P s \\<le> P' s;\n     \\<turnstile>\\<^sub>2 {P} c {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2 {P'} c {Q}", "by blast"], ["", "lemma weaken_post: \"\\<lbrakk> \\<turnstile>\\<^sub>2 {P} c {Q};  \\<forall>s. Q s \\<ge> Q' s \\<rbrakk> \\<Longrightarrow>  \\<turnstile>\\<^sub>2 {P} c {Q'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n     \\<forall>s. Q' s \\<le> Q s\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2 {P} c {Q'}", "using conseq"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<turnstile>\\<^sub>2 {?P} ?c {?Q}; \\<And>s. ?P s \\<le> ?P' s;\n   \\<And>s. ?Q' s \\<le> ?Q s\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>2 {?P'} ?c {?Q'}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n     \\<forall>s. Q' s \\<le> Q s\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2 {P} c {Q'}", "by blast"], ["", "lemma Assign': \"\\<forall>s. P s \\<ge> eSuc ( Q(s[a/x])) \\<Longrightarrow> \\<turnstile>\\<^sub>2 {P} x ::= a {Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. eSuc (Q (s[a/x])) \\<le> P s \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2 {P} x ::= a {Q}", "by (simp add: strengthen_pre[OF _ Assign])"], ["", "lemma progress: \"(c, s) \\<Rightarrow> p \\<Down> t \\<Longrightarrow> p > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, s) \\<Rightarrow> p \\<Down> t \\<Longrightarrow> 0 < p", "by (induct rule: big_step_t.induct, auto)"], ["", "lemma FalseImplies: \"\\<turnstile>\\<^sub>2 {%s. \\<infinity>} c { Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c {Q}", "apply (induction c arbitrary: Q)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x. \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} SKIP {x}\n 2. \\<And>x1 x2 x.\n       \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} x1 ::= x2 {x}\n 3. \\<And>c1 c2 x.\n       \\<lbrakk>\\<And>x.\n                   \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c1 {x};\n        \\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c2 {x}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>}\n        c1;; c2 {x}\n 4. \\<And>x1 c1 c2 x.\n       \\<lbrakk>\\<And>x.\n                   \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c1 {x};\n        \\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c2 {x}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>}\n        IF x1 THEN c1 ELSE c2 {x}\n 5. \\<And>x1 c x.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c\n                                {x}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} WHILE x1 DO c {x}", "apply(auto intro: hoare2.Skip hoare2.Assign hoare2.Seq hoare2.conseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 x.\n       \\<lbrakk>\\<And>x.\n                   \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c1 {x};\n        \\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c2 {x}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>}\n        IF x1 THEN c1 ELSE c2 {x}\n 2. \\<And>x1 c x.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c\n                                {x}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} WHILE x1 DO c {x}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x.\n                \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c1_ {x};\n     \\<And>x.\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c2_ {x}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>}\n     IF x1_ THEN c1_ ELSE c2_ {x_}", "apply(rule hoare2.conseq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<And>x.\n                \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c1_ {x};\n     \\<And>x.\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c2_ {x}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2 {?P} IF x1_ THEN c1_ ELSE c2_\n     {?Q}\n 2. \\<And>s.\n       \\<lbrakk>\\<And>x.\n                   \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c1_ {x};\n        \\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c2_ {x}\\<rbrakk>\n       \\<Longrightarrow> ?P s \\<le> \\<infinity>\n 3. \\<And>s.\n       \\<lbrakk>\\<And>x.\n                   \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c1_ {x};\n        \\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c2_ {x}\\<rbrakk>\n       \\<Longrightarrow> x_ s \\<le> ?Q s", "apply(rule hoare2.If[where P=\"%s. \\<infinity>\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>x.\n                \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c1_ {x};\n     \\<And>x.\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c2_ {x}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2 {\\<lambda>s.\n         \\<infinity> + \\<up> (bval x1_ s)}\n     c1_ {?Q}\n 2. \\<lbrakk>\\<And>x.\n                \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c1_ {x};\n     \\<And>x.\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c2_ {x}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2 {\\<lambda>s.\n         \\<infinity> + \\<up> (\\<not> bval x1_ s)}\n     c2_ {?Q}\n 3. \\<And>s.\n       \\<lbrakk>\\<And>x.\n                   \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c1_ {x};\n        \\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c2_ {x}\\<rbrakk>\n       \\<Longrightarrow> eSuc \\<infinity> \\<le> \\<infinity>\n 4. \\<And>s.\n       \\<lbrakk>\\<And>x.\n                   \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c1_ {x};\n        \\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c2_ {x}\\<rbrakk>\n       \\<Longrightarrow> x_ s \\<le> ?Q s", "by(auto intro: hoare2.If hoare2.conseq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 c x.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c\n                                {x}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} WHILE x1 DO c {x}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c_\n                             {x}) \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} WHILE x1_ DO c_ {x_}", "apply(rule hoare2.conseq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<And>x.\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c_\n                             {x}) \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2 {?P} WHILE x1_ DO c_ {?Q}\n 2. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c_\n                                {x}) \\<Longrightarrow>\n       ?P s \\<le> \\<infinity>\n 3. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c_\n                                {x}) \\<Longrightarrow>\n       x_ s \\<le> ?Q s", "apply(rule hoare2.While[where I=\"%s. \\<infinity>\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<And>x.\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c_\n                             {x}) \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity> + \\<up> (bval x1_ s)} c_\n                         {\\<lambda>t. \\<infinity> + 1}\n 2. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c_\n                                {x}) \\<Longrightarrow>\n       \\<infinity> + 1 \\<le> \\<infinity>\n 3. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c_\n                                {x}) \\<Longrightarrow>\n       x_ s \\<le> \\<infinity> + \\<up> (\\<not> bval x1_ s)", "apply(rule hoare2.conseq)"], ["proof (prove)\ngoal (5 subgoals):\n 1. (\\<And>x.\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c_\n                             {x}) \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2 {?P6} c_ {?Q6}\n 2. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c_\n                                {x}) \\<Longrightarrow>\n       ?P6 s \\<le> \\<infinity> + \\<up> (bval x1_ s)\n 3. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c_\n                                {x}) \\<Longrightarrow>\n       \\<infinity> + 1 \\<le> ?Q6 s\n 4. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c_\n                                {x}) \\<Longrightarrow>\n       \\<infinity> + 1 \\<le> \\<infinity>\n 5. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2 {\\<lambda>s. \\<infinity>} c_\n                                {x}) \\<Longrightarrow>\n       x_ s \\<le> \\<infinity> + \\<up> (\\<not> bval x1_ s)", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Soundness\""], ["", "text\\<open>The soundness theorem:\\<close>"], ["", "lemma help1: assumes \" enat a + X \\<le> Y\"\n    \"enat b + Z \\<le> X\"\n  shows \"enat (a + b) + Z \\<le> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (a + b) + Z \\<le> Y", "using assms"], ["proof (prove)\nusing this:\n  enat a + X \\<le> Y\n  enat b + Z \\<le> X\n\ngoal (1 subgoal):\n 1. enat (a + b) + Z \\<le> Y", "by (metis ab_semigroup_add_class.add_ac(1) add_left_mono order_trans plus_enat_simps(1))"], ["", "lemma help2': assumes \"enat p + INV t  \\<le> INV s\"\n    \"0 < p\" \"INV s = enat n\"\n  shows \"INV t < INV s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. INV t < INV s", "using assms iadd_le_enat_iff"], ["proof (prove)\nusing this:\n  enat p + INV t \\<le> INV s\n  0 < p\n  INV s = enat n\n  (?x + ?y \\<le> enat ?n) =\n  (\\<exists>y' x'. ?x = enat x' \\<and> ?y = enat y' \\<and> x' + y' \\<le> ?n)\n\ngoal (1 subgoal):\n 1. INV t < INV s", "by auto"], ["", "lemma help2: assumes \"enat p + INV t + 1 \\<le> INV s\"\n     \"INV s = enat n\"\n  shows \"INV t < INV s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. INV t < INV s", "using assms le_less_trans not_less_iff_gr_or_eq"], ["proof (prove)\nusing this:\n  enat p + INV t + 1 \\<le> INV s\n  INV s = enat n\n  \\<lbrakk>?x \\<le> ?y; ?y < ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n  (\\<not> ?x < ?y) = (?y < ?x \\<or> ?x = ?y)\n\ngoal (1 subgoal):\n 1. INV t < INV s", "by fastforce"], ["", "lemma Seq_sound: assumes \"\\<Turnstile>\\<^sub>2 {P1} C1 {P2}\"\n    \"\\<Turnstile>\\<^sub>2 {P2} C2 {P3}\" \n    shows  \"\\<Turnstile>\\<^sub>2 {P1} C1 ;; C2 {P3}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2 {P1} C1;; C2 {P3}", "unfolding hoare2_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       P1 s < \\<infinity> \\<longrightarrow>\n       (\\<exists>t p.\n           (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat p + P3 t \\<le> P1 s)", "proof (safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + P3 t \\<le> P1 s", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + P3 t \\<le> P1 s", "assume ninfP1: \"P1 s < \\<infinity>\""], ["proof (state)\nthis:\n  P1 s < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + P3 t \\<le> P1 s", "with assms(1)[unfolded hoare2_valid_def]"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     P1 s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (C1, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + P2 t \\<le> P1 s)\n  P1 s < \\<infinity>", "obtain t1 p1\n    where 1: \"(C1, s) \\<Rightarrow> p1 \\<Down> t1\" and q1: \"enat p1 + P2 t1 \\<le> P1 s\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     P1 s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (C1, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + P2 t \\<le> P1 s)\n  P1 s < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p1 t1.\n        \\<lbrakk>(C1, s) \\<Rightarrow> p1 \\<Down> t1;\n         enat p1 + P2 t1 \\<le> P1 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (C1, s) \\<Rightarrow> p1 \\<Down> t1\n  enat p1 + P2 t1 \\<le> P1 s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + P3 t \\<le> P1 s", "with ninfP1"], ["proof (chain)\npicking this:\n  P1 s < \\<infinity>\n  (C1, s) \\<Rightarrow> p1 \\<Down> t1\n  enat p1 + P2 t1 \\<le> P1 s", "have ninfP2: \"P2 t1 < \\<infinity>\""], ["proof (prove)\nusing this:\n  P1 s < \\<infinity>\n  (C1, s) \\<Rightarrow> p1 \\<Down> t1\n  enat p1 + P2 t1 \\<le> P1 s\n\ngoal (1 subgoal):\n 1. P2 t1 < \\<infinity>", "using not_le"], ["proof (prove)\nusing this:\n  P1 s < \\<infinity>\n  (C1, s) \\<Rightarrow> p1 \\<Down> t1\n  enat p1 + P2 t1 \\<le> P1 s\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n\ngoal (1 subgoal):\n 1. P2 t1 < \\<infinity>", "by fastforce"], ["proof (state)\nthis:\n  P2 t1 < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + P3 t \\<le> P1 s", "with assms(2)[unfolded hoare2_valid_def]"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     P2 s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (C2, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + P3 t \\<le> P2 s)\n  P2 t1 < \\<infinity>", "obtain t2 p2\n    where 2: \"(C2, t1) \\<Rightarrow> p2 \\<Down> t2\" and q2: \"enat p2 + P3 t2 \\<le> P2 t1\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     P2 s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (C2, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + P3 t \\<le> P2 s)\n  P2 t1 < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p2 t2.\n        \\<lbrakk>(C2, t1) \\<Rightarrow> p2 \\<Down> t2;\n         enat p2 + P3 t2 \\<le> P2 t1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (C2, t1) \\<Rightarrow> p2 \\<Down> t2\n  enat p2 + P3 t2 \\<le> P2 t1\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + P3 t \\<le> P1 s", "with ninfP2"], ["proof (chain)\npicking this:\n  P2 t1 < \\<infinity>\n  (C2, t1) \\<Rightarrow> p2 \\<Down> t2\n  enat p2 + P3 t2 \\<le> P2 t1", "have ninfP3: \"P3 t2 < \\<infinity>\""], ["proof (prove)\nusing this:\n  P2 t1 < \\<infinity>\n  (C2, t1) \\<Rightarrow> p2 \\<Down> t2\n  enat p2 + P3 t2 \\<le> P2 t1\n\ngoal (1 subgoal):\n 1. P3 t2 < \\<infinity>", "using not_le"], ["proof (prove)\nusing this:\n  P2 t1 < \\<infinity>\n  (C2, t1) \\<Rightarrow> p2 \\<Down> t2\n  enat p2 + P3 t2 \\<le> P2 t1\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n\ngoal (1 subgoal):\n 1. P3 t2 < \\<infinity>", "by fastforce"], ["proof (state)\nthis:\n  P3 t2 < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + P3 t \\<le> P1 s", "from Big_StepT.Seq[OF 1 2]"], ["proof (chain)\npicking this:\n  ?z = p1 + p2 \\<Longrightarrow> (C1;; C2, s) \\<Rightarrow> ?z \\<Down> t2", "have bigstep: \"(C1;; C2, s) \\<Rightarrow> p1 + p2 \\<Down> t2\""], ["proof (prove)\nusing this:\n  ?z = p1 + p2 \\<Longrightarrow> (C1;; C2, s) \\<Rightarrow> ?z \\<Down> t2\n\ngoal (1 subgoal):\n 1. (C1;; C2, s) \\<Rightarrow> p1 + p2 \\<Down> t2", "by simp"], ["proof (state)\nthis:\n  (C1;; C2, s) \\<Rightarrow> p1 + p2 \\<Down> t2\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + P3 t \\<le> P1 s", "from help1[OF q1 q2]"], ["proof (chain)\npicking this:\n  enat (p1 + p2) + P3 t2 \\<le> P1 s", "have potential: \"enat (p1 + p2) + P3 t2 \\<le> P1 s\""], ["proof (prove)\nusing this:\n  enat (p1 + p2) + P3 t2 \\<le> P1 s\n\ngoal (1 subgoal):\n 1. enat (p1 + p2) + P3 t2 \\<le> P1 s", "."], ["proof (state)\nthis:\n  enat (p1 + p2) + P3 t2 \\<le> P1 s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + P3 t \\<le> P1 s", "show \"\\<exists>t p. (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + P3 t \\<le> P1 s \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + P3 t \\<le> P1 s", "apply(rule exI[where x=\"t2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (C1;; C2, s) \\<Rightarrow> p \\<Down> t2 \\<and>\n       enat p + P3 t2 \\<le> P1 s", "apply(rule exI[where x=\"p1 + p2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (C1;; C2, s) \\<Rightarrow> p1 + p2 \\<Down> t2 \\<and>\n    enat (p1 + p2) + P3 t2 \\<le> P1 s", "using bigstep potential"], ["proof (prove)\nusing this:\n  (C1;; C2, s) \\<Rightarrow> p1 + p2 \\<Down> t2\n  enat (p1 + p2) + P3 t2 \\<le> P1 s\n\ngoal (1 subgoal):\n 1. (C1;; C2, s) \\<Rightarrow> p1 + p2 \\<Down> t2 \\<and>\n    enat (p1 + p2) + P3 t2 \\<le> P1 s", "by simp"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + P3 t \\<le> P1 s\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem hoare2_sound: \"\\<turnstile>\\<^sub>2 {P}c{ Q}  \\<Longrightarrow>  \\<Turnstile>\\<^sub>2 {P}c{ Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {P} c {Q} \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2 {P} c {Q}", "proof(induction rule: hoare2.induct)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>P. \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)} SKIP {P}\n 2. \\<And>P a x.\n       \\<Turnstile>\\<^sub>2 {\\<lambda>b. eSuc (P (b[a/x]))} x ::= a {P}\n 3. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (bval b s)}\n                                     c\\<^sub>1 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (bval b a)} c\\<^sub>1\n        {Q};\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (\\<not> bval b s)}\n                             c\\<^sub>2 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (\\<not> bval b a)}\n        c\\<^sub>2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)}\n                         IF b THEN c\\<^sub>1 ELSE c\\<^sub>2 {Q}\n 4. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P\\<^sub>1}\n                         c\\<^sub>1;; c\\<^sub>2 {P\\<^sub>3}\n 5. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 6. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n        \\<Turnstile>\\<^sub>2 {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P'} c {Q'}", "case (Skip P)"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>P. \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)} SKIP {P}\n 2. \\<And>P a x.\n       \\<Turnstile>\\<^sub>2 {\\<lambda>b. eSuc (P (b[a/x]))} x ::= a {P}\n 3. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (bval b s)}\n                                     c\\<^sub>1 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (bval b a)} c\\<^sub>1\n        {Q};\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (\\<not> bval b s)}\n                             c\\<^sub>2 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (\\<not> bval b a)}\n        c\\<^sub>2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)}\n                         IF b THEN c\\<^sub>1 ELSE c\\<^sub>2 {Q}\n 4. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P\\<^sub>1}\n                         c\\<^sub>1;; c\\<^sub>2 {P\\<^sub>3}\n 5. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 6. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n        \\<Turnstile>\\<^sub>2 {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P'} c {Q'}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)} SKIP {P}", "unfolding hoare2_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (P s) < \\<infinity> \\<longrightarrow>\n       (\\<exists>t p.\n           (SKIP, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat p + P t \\<le> eSuc (P s))", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (P s) < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (SKIP, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + P t \\<le> eSuc (P s)", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (P s) < \\<infinity> \\<Longrightarrow>\n    \\<exists>t p.\n       (SKIP, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + P t \\<le> eSuc (P s)", "apply(rule exI[where x=s])"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (P s) < \\<infinity> \\<Longrightarrow>\n    \\<exists>p.\n       (SKIP, s) \\<Rightarrow> p \\<Down> s \\<and>\n       enat p + P s \\<le> eSuc (P s)", "apply(rule exI[where x=\"Suc 0\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (P s) < \\<infinity> \\<Longrightarrow>\n    (SKIP, s) \\<Rightarrow> Suc 0 \\<Down> s \\<and>\n    enat (Suc 0) + P s \\<le> eSuc (P s)", "by (auto simp: eSuc_enat_iff eSuc_enat)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)} SKIP {P}\n\ngoal (5 subgoals):\n 1. \\<And>P a x.\n       \\<Turnstile>\\<^sub>2 {\\<lambda>b. eSuc (P (b[a/x]))} x ::= a {P}\n 2. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (bval b s)}\n                                     c\\<^sub>1 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (bval b a)} c\\<^sub>1\n        {Q};\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (\\<not> bval b s)}\n                             c\\<^sub>2 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (\\<not> bval b a)}\n        c\\<^sub>2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)}\n                         IF b THEN c\\<^sub>1 ELSE c\\<^sub>2 {Q}\n 3. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P\\<^sub>1}\n                         c\\<^sub>1;; c\\<^sub>2 {P\\<^sub>3}\n 4. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 5. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n        \\<Turnstile>\\<^sub>2 {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P'} c {Q'}", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>P a x.\n       \\<Turnstile>\\<^sub>2 {\\<lambda>b. eSuc (P (b[a/x]))} x ::= a {P}\n 2. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (bval b s)}\n                                     c\\<^sub>1 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (bval b a)} c\\<^sub>1\n        {Q};\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (\\<not> bval b s)}\n                             c\\<^sub>2 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (\\<not> bval b a)}\n        c\\<^sub>2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)}\n                         IF b THEN c\\<^sub>1 ELSE c\\<^sub>2 {Q}\n 3. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P\\<^sub>1}\n                         c\\<^sub>1;; c\\<^sub>2 {P\\<^sub>3}\n 4. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 5. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n        \\<Turnstile>\\<^sub>2 {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P'} c {Q'}", "case (Assign P a x)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>P a x.\n       \\<Turnstile>\\<^sub>2 {\\<lambda>b. eSuc (P (b[a/x]))} x ::= a {P}\n 2. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (bval b s)}\n                                     c\\<^sub>1 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (bval b a)} c\\<^sub>1\n        {Q};\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (\\<not> bval b s)}\n                             c\\<^sub>2 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (\\<not> bval b a)}\n        c\\<^sub>2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)}\n                         IF b THEN c\\<^sub>1 ELSE c\\<^sub>2 {Q}\n 3. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P\\<^sub>1}\n                         c\\<^sub>1;; c\\<^sub>2 {P\\<^sub>3}\n 4. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 5. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n        \\<Turnstile>\\<^sub>2 {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P'} c {Q'}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2 {\\<lambda>b. eSuc (P (b[a/x]))} x ::= a {P}", "unfolding hoare2_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (P (s[a/x])) < \\<infinity> \\<longrightarrow>\n       (\\<exists>t p.\n           (x ::= a, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat p + P t \\<le> eSuc (P (s[a/x])))", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (P (s[a/x])) < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (x ::= a, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + P t \\<le> eSuc (P (s[a/x]))", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (P (s[a/x])) < \\<infinity> \\<Longrightarrow>\n    \\<exists>t p.\n       (x ::= a, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + P t \\<le> eSuc (P (s[a/x]))", "apply(rule exI[where x=\"s[a/x]\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (P (s[a/x])) < \\<infinity> \\<Longrightarrow>\n    \\<exists>p.\n       (x ::= a, s) \\<Rightarrow> p \\<Down> s[a/x] \\<and>\n       enat p + P (s[a/x]) \\<le> eSuc (P (s[a/x]))", "apply(rule exI[where x=\"Suc 0\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (P (s[a/x])) < \\<infinity> \\<Longrightarrow>\n    (x ::= a, s) \\<Rightarrow> Suc 0 \\<Down> s[a/x] \\<and>\n    enat (Suc 0) + P (s[a/x]) \\<le> eSuc (P (s[a/x]))", "by (auto simp: eSuc_enat_iff eSuc_enat)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Turnstile>\\<^sub>2 {\\<lambda>b. eSuc (P (b[a/x]))} x ::= a {P}\n\ngoal (4 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (bval b s)}\n                                     c\\<^sub>1 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (bval b a)} c\\<^sub>1\n        {Q};\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (\\<not> bval b s)}\n                             c\\<^sub>2 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (\\<not> bval b a)}\n        c\\<^sub>2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)}\n                         IF b THEN c\\<^sub>1 ELSE c\\<^sub>2 {Q}\n 2. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P\\<^sub>1}\n                         c\\<^sub>1;; c\\<^sub>2 {P\\<^sub>3}\n 3. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 4. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n        \\<Turnstile>\\<^sub>2 {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P'} c {Q'}", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (bval b s)}\n                                     c\\<^sub>1 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (bval b a)} c\\<^sub>1\n        {Q};\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (\\<not> bval b s)}\n                             c\\<^sub>2 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (\\<not> bval b a)}\n        c\\<^sub>2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)}\n                         IF b THEN c\\<^sub>1 ELSE c\\<^sub>2 {Q}\n 2. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P\\<^sub>1}\n                         c\\<^sub>1;; c\\<^sub>2 {P\\<^sub>3}\n 3. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 4. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n        \\<Turnstile>\\<^sub>2 {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P'} c {Q'}", "case (Seq P1 C1 P2 C2 P3)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {P1} C1 {P2}\n  \\<turnstile>\\<^sub>2 {P2} C2 {P3}\n  \\<Turnstile>\\<^sub>2 {P1} C1 {P2}\n  \\<Turnstile>\\<^sub>2 {P2} C2 {P3}\n\ngoal (4 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (bval b s)}\n                                     c\\<^sub>1 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (bval b a)} c\\<^sub>1\n        {Q};\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (\\<not> bval b s)}\n                             c\\<^sub>2 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (\\<not> bval b a)}\n        c\\<^sub>2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)}\n                         IF b THEN c\\<^sub>1 ELSE c\\<^sub>2 {Q}\n 2. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<Turnstile>\\<^sub>2 {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P\\<^sub>1}\n                         c\\<^sub>1;; c\\<^sub>2 {P\\<^sub>3}\n 3. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 4. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n        \\<Turnstile>\\<^sub>2 {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P'} c {Q'}", "thus ?case"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2 {P1} C1 {P2}\n  \\<turnstile>\\<^sub>2 {P2} C2 {P3}\n  \\<Turnstile>\\<^sub>2 {P1} C1 {P2}\n  \\<Turnstile>\\<^sub>2 {P2} C2 {P3}\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2 {P1} C1;; C2 {P3}", "using Seq_sound"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2 {P1} C1 {P2}\n  \\<turnstile>\\<^sub>2 {P2} C2 {P3}\n  \\<Turnstile>\\<^sub>2 {P1} C1 {P2}\n  \\<Turnstile>\\<^sub>2 {P2} C2 {P3}\n  \\<lbrakk>\\<Turnstile>\\<^sub>2 {?P1.0} ?C1.0 {?P2.0};\n   \\<Turnstile>\\<^sub>2 {?P2.0} ?C2.0 {?P3.0}\\<rbrakk>\n  \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {?P1.0} ?C1.0;; ?C2.0 {?P3.0}\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2 {P1} C1;; C2 {P3}", "by auto"], ["proof (state)\nthis:\n  \\<Turnstile>\\<^sub>2 {P1} C1;; C2 {P3}\n\ngoal (3 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (bval b s)}\n                                     c\\<^sub>1 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (bval b a)} c\\<^sub>1\n        {Q};\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (\\<not> bval b s)}\n                             c\\<^sub>2 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (\\<not> bval b a)}\n        c\\<^sub>2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)}\n                         IF b THEN c\\<^sub>1 ELSE c\\<^sub>2 {Q}\n 2. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 3. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n        \\<Turnstile>\\<^sub>2 {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P'} c {Q'}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (bval b s)}\n                                     c\\<^sub>1 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (bval b a)} c\\<^sub>1\n        {Q};\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (\\<not> bval b s)}\n                             c\\<^sub>2 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (\\<not> bval b a)}\n        c\\<^sub>2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)}\n                         IF b THEN c\\<^sub>1 ELSE c\\<^sub>2 {Q}\n 2. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 3. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n        \\<Turnstile>\\<^sub>2 {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P'} c {Q'}", "case (If P b c1 Q c2)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (bval b s)} c1 {Q}\n  \\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (\\<not> bval b s)} c2 {Q}\n  \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (bval b a)} c1 {Q}\n  \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (\\<not> bval b a)} c2 {Q}\n\ngoal (3 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (bval b s)}\n                                     c\\<^sub>1 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (bval b a)} c\\<^sub>1\n        {Q};\n        \\<turnstile>\\<^sub>2 {\\<lambda>s. P s + \\<up> (\\<not> bval b s)}\n                             c\\<^sub>2 {Q};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. P a + \\<up> (\\<not> bval b a)}\n        c\\<^sub>2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)}\n                         IF b THEN c\\<^sub>1 ELSE c\\<^sub>2 {Q}\n 2. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 3. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n        \\<Turnstile>\\<^sub>2 {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P'} c {Q'}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)} IF b THEN c1 ELSE c2 {Q}", "unfolding hoare2_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (P s) < \\<infinity> \\<longrightarrow>\n       (\\<exists>t p.\n           (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat p + Q t \\<le> eSuc (P s))", "proof (safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (P s) < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + Q t \\<le> eSuc (P s)", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (P s) < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + Q t \\<le> eSuc (P s)", "assume \"eSuc (P s) < \\<infinity>\""], ["proof (state)\nthis:\n  eSuc (P s) < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (P s) < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + Q t \\<le> eSuc (P s)", "then"], ["proof (chain)\npicking this:\n  eSuc (P s) < \\<infinity>", "have i: \"P s < \\<infinity>\""], ["proof (prove)\nusing this:\n  eSuc (P s) < \\<infinity>\n\ngoal (1 subgoal):\n 1. P s < \\<infinity>", "using enat_ord_simps(4)"], ["proof (prove)\nusing this:\n  eSuc (P s) < \\<infinity>\n  (?q < \\<infinity>) = (?q \\<noteq> \\<infinity>)\n\ngoal (1 subgoal):\n 1. P s < \\<infinity>", "by fastforce"], ["proof (state)\nthis:\n  P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (P s) < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + Q t \\<le> eSuc (P s)", "show \"\\<exists>t p. (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> eSuc (P s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "proof(cases \"bval b s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "case True"], ["proof (state)\nthis:\n  bval b s\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "with i"], ["proof (chain)\npicking this:\n  P s < \\<infinity>\n  bval b s", "have \"P s + emb (bval b s) < \\<infinity>\""], ["proof (prove)\nusing this:\n  P s < \\<infinity>\n  bval b s\n\ngoal (1 subgoal):\n 1. P s + \\<up> (bval b s) < \\<infinity>", "by simp"], ["proof (state)\nthis:\n  P s + \\<up> (bval b s) < \\<infinity>\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "with If(3)[unfolded hoare2_valid_def]"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c1, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + Q t \\<le> P s + \\<up> (bval b s))\n  P s + \\<up> (bval b s) < \\<infinity>", "obtain p t\n        where 1: \"(c1, s) \\<Rightarrow> p \\<Down> t\" and q: \"enat p + Q t \\<le> P s + emb (bval b s)\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c1, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + Q t \\<le> P s + \\<up> (bval b s))\n  P s + \\<up> (bval b s) < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        \\<lbrakk>(c1, s) \\<Rightarrow> p \\<Down> t;\n         enat p + Q t \\<le> P s + \\<up> (bval b s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c1, s) \\<Rightarrow> p \\<Down> t\n  enat p + Q t \\<le> P s + \\<up> (bval b s)\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "from Big_StepT.IfTrue[OF True 1]"], ["proof (chain)\npicking this:\n  ?y = p + 1 \\<Longrightarrow>\n  (IF b THEN c1 ELSE ?c2.0, s) \\<Rightarrow> ?y \\<Down> t", "have 2: \"(IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t\""], ["proof (prove)\nusing this:\n  ?y = p + 1 \\<Longrightarrow>\n  (IF b THEN c1 ELSE ?c2.0, s) \\<Rightarrow> ?y \\<Down> t\n\ngoal (1 subgoal):\n 1. (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t", "by simp"], ["proof (state)\nthis:\n  (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "apply(rule exI[where x=t])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "apply(rule exI[where x=\"p+1\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t \\<and>\n    enat (p + 1) + Q t \\<le> eSuc (P s)", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t\n 2. enat (p + 1) + Q t \\<le> eSuc (P s)", "apply(fact)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (p + 1) + Q t \\<le> eSuc (P s)", "using q True"], ["proof (prove)\nusing this:\n  enat p + Q t \\<le> P s + \\<up> (bval b s)\n  bval b s\n\ngoal (1 subgoal):\n 1. enat (p + 1) + Q t \\<le> eSuc (P s)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>enat p + Q t \\<le> P s; bval b s\\<rbrakk>\n    \\<Longrightarrow> enat (Suc p) + Q t \\<le> eSuc (P s)", "by (metis eSuc_enat eSuc_ile_mono iadd_Suc)"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + Q t \\<le> eSuc (P s)\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "case False"], ["proof (state)\nthis:\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "with i"], ["proof (chain)\npicking this:\n  P s < \\<infinity>\n  \\<not> bval b s", "have \"P s + emb (~ bval b s) < \\<infinity>\""], ["proof (prove)\nusing this:\n  P s < \\<infinity>\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. P s + \\<up> (\\<not> bval b s) < \\<infinity>", "by simp"], ["proof (state)\nthis:\n  P s + \\<up> (\\<not> bval b s) < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "with If(4)[unfolded hoare2_valid_def]"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + Q t \\<le> P s + \\<up> (\\<not> bval b s))\n  P s + \\<up> (\\<not> bval b s) < \\<infinity>", "obtain p t\n        where 1: \"(c2, s) \\<Rightarrow> p \\<Down> t\" and q: \"enat p + Q t \\<le> P s + emb (~ bval b s)\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + Q t \\<le> P s + \\<up> (\\<not> bval b s))\n  P s + \\<up> (\\<not> bval b s) < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        \\<lbrakk>(c2, s) \\<Rightarrow> p \\<Down> t;\n         enat p + Q t \\<le> P s + \\<up> (\\<not> bval b s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c2, s) \\<Rightarrow> p \\<Down> t\n  enat p + Q t \\<le> P s + \\<up> (\\<not> bval b s)\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "from Big_StepT.IfFalse[OF False 1]"], ["proof (chain)\npicking this:\n  ?y = p + 1 \\<Longrightarrow>\n  (IF b THEN ?c1.0 ELSE c2, s) \\<Rightarrow> ?y \\<Down> t", "have 2: \"(IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t\""], ["proof (prove)\nusing this:\n  ?y = p + 1 \\<Longrightarrow>\n  (IF b THEN ?c1.0 ELSE c2, s) \\<Rightarrow> ?y \\<Down> t\n\ngoal (1 subgoal):\n 1. (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t", "by simp"], ["proof (state)\nthis:\n  (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "apply(rule exI[where x=t])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + Q t \\<le> eSuc (P s)", "apply(rule exI[where x=\"p+1\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t \\<and>\n    enat (p + 1) + Q t \\<le> eSuc (P s)", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t\n 2. enat (p + 1) + Q t \\<le> eSuc (P s)", "apply(fact)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (p + 1) + Q t \\<le> eSuc (P s)", "using q False"], ["proof (prove)\nusing this:\n  enat p + Q t \\<le> P s + \\<up> (\\<not> bval b s)\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. enat (p + 1) + Q t \\<le> eSuc (P s)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>enat p + Q t \\<le> P s; \\<not> bval b s\\<rbrakk>\n    \\<Longrightarrow> enat (Suc p) + Q t \\<le> eSuc (P s)", "by (metis eSuc_enat eSuc_ile_mono iadd_Suc)"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + Q t \\<le> eSuc (P s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + Q t \\<le> eSuc (P s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Turnstile>\\<^sub>2 {\\<lambda>a. eSuc (P a)} IF b THEN c1 ELSE c2 {Q}\n\ngoal (2 subgoals):\n 1. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 2. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n        \\<Turnstile>\\<^sub>2 {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P'} c {Q'}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 2. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n        \\<Turnstile>\\<^sub>2 {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P'} c {Q'}", "case (conseq P c Q P' Q')"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {P} c {Q}\n  P ?s \\<le> P' ?s\n  Q' ?s \\<le> Q ?s\n  \\<Turnstile>\\<^sub>2 {P} c {Q}\n\ngoal (2 subgoals):\n 1. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 2. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {P} c {Q};\n        \\<Turnstile>\\<^sub>2 {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P'} c {Q'}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2 {P'} c {Q'}", "unfolding hoare2_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       P' s < \\<infinity> \\<longrightarrow>\n       (\\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q' t \\<le> P' s)", "proof (safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q' t \\<le> P' s", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q' t \\<le> P' s", "assume \"P' s < \\<infinity>\""], ["proof (state)\nthis:\n  P' s < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q' t \\<le> P' s", "with conseq(2)"], ["proof (chain)\npicking this:\n  P ?s \\<le> P' ?s\n  P' s < \\<infinity>", "have \"P s < \\<infinity>\""], ["proof (prove)\nusing this:\n  P ?s \\<le> P' ?s\n  P' s < \\<infinity>\n\ngoal (1 subgoal):\n 1. P s < \\<infinity>", "using le_less_trans"], ["proof (prove)\nusing this:\n  P ?s \\<le> P' ?s\n  P' s < \\<infinity>\n  \\<lbrakk>?x \\<le> ?y; ?y < ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n\ngoal (1 subgoal):\n 1. P s < \\<infinity>", "by blast"], ["proof (state)\nthis:\n  P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q' t \\<le> P' s", "with conseq(4)[unfolded hoare2_valid_def]"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     P s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> P s)\n  P s < \\<infinity>", "obtain p t where \"(c, s) \\<Rightarrow> p \\<Down> t\" \"enat p + Q t \\<le> P s\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     P s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> P s)\n  P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        \\<lbrakk>(c, s) \\<Rightarrow> p \\<Down> t;\n         enat p + Q t \\<le> P s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  enat p + Q t \\<le> P s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q' t \\<le> P' s", "with conseq(2,3)"], ["proof (chain)\npicking this:\n  P ?s \\<le> P' ?s\n  Q' ?s \\<le> Q ?s\n  (c, s) \\<Rightarrow> p \\<Down> t\n  enat p + Q t \\<le> P s", "show \"\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q' t \\<le> P' s\""], ["proof (prove)\nusing this:\n  P ?s \\<le> P' ?s\n  Q' ?s \\<le> Q ?s\n  (c, s) \\<Rightarrow> p \\<Down> t\n  enat p + Q t \\<le> P s\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q' t \\<le> P' s", "by (meson add_left_mono dual_order.trans)"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q' t \\<le> P' s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Turnstile>\\<^sub>2 {P'} c {Q'}\n\ngoal (1 subgoal):\n 1. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}", "case (While INV b c)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {\\<lambda>s. INV s + \\<up> (bval b s)} c\n                       {\\<lambda>t. INV t + 1}\n  \\<Turnstile>\\<^sub>2 {\\<lambda>a. INV a + \\<up> (bval b a)} c\n  {\\<lambda>a. INV a + 1}\n\ngoal (1 subgoal):\n 1. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}", "from While(2)[unfolded hoare2_valid_def]"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     INV s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + (INV t + 1) \\<le> INV s + \\<up> (bval b s))", "have WH2: \"\\<And>s. INV s + \\<up> (bval b s) < \\<infinity> \\<Longrightarrow> (\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + INV t + 1 \\<le> INV s + \\<up> (bval b s))\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     INV s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + (INV t + 1) \\<le> INV s + \\<up> (bval b s))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       INV s + \\<up> (bval b s) < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + INV t + 1 \\<le> INV s + \\<up> (bval b s)", "by (simp add: add.commute add.left_commute)"], ["proof (state)\nthis:\n  INV ?s + \\<up> (bval b ?s) < \\<infinity> \\<Longrightarrow>\n  \\<exists>t p.\n     (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + INV t + 1 \\<le> INV ?s + \\<up> (bval b ?s)\n\ngoal (1 subgoal):\n 1. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2 {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + \\<up> (bval b a)} c\n        {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {\\<lambda>a. I a + 1}\n                         WHILE b DO c\n                         {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2 {\\<lambda>a. INV a + 1} WHILE b DO c\n    {\\<lambda>a. INV a + \\<up> (\\<not> bval b a)}", "unfolding hoare2_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       INV s + 1 < \\<infinity> \\<longrightarrow>\n       (\\<exists>t p.\n           (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1)", "proof (safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       INV s + 1 < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       INV s + 1 < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "assume ninfINV: \"INV s + 1 < \\<infinity>\""], ["proof (state)\nthis:\n  INV s + 1 < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       INV s + 1 < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "then"], ["proof (chain)\npicking this:\n  INV s + 1 < \\<infinity>", "have \"INV s < \\<infinity>\""], ["proof (prove)\nusing this:\n  INV s + 1 < \\<infinity>\n\ngoal (1 subgoal):\n 1. INV s < \\<infinity>", "using enat_ord_simps(4)"], ["proof (prove)\nusing this:\n  INV s + 1 < \\<infinity>\n  (?q < \\<infinity>) = (?q \\<noteq> \\<infinity>)\n\ngoal (1 subgoal):\n 1. INV s < \\<infinity>", "by fastforce"], ["proof (state)\nthis:\n  INV s < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       INV s + 1 < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "then"], ["proof (chain)\npicking this:\n  INV s < \\<infinity>", "obtain n where i: \"INV s = enat n\""], ["proof (prove)\nusing this:\n  INV s < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>n. INV s = enat n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using not_infinity_eq"], ["proof (prove)\nusing this:\n  INV s < \\<infinity>\n  (?x \\<noteq> \\<infinity>) = (\\<exists>i. ?x = enat i)\n\ngoal (1 subgoal):\n 1. (\\<And>n. INV s = enat n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  INV s = enat n\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       INV s + 1 < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "text \\<open>In order to prove validity, we induct on the value of the Invariant, which is a finite number\n          and decreases in every loop iteration. For each step we show that validity holds.\\<close>"], ["proof (state)\nthis:\n  INV s = enat n\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       INV s + 1 < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "have \"INV s = enat n \\<Longrightarrow> \\<exists>t p. (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + (INV t + emb (\\<not> bval b t)) \\<le> INV s + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. INV s = enat n \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "proof (induct n arbitrary: s rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x s.\n       \\<lbrakk>\\<And>y s.\n                   \\<lbrakk>y < x; INV s = enat y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>t p.\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n  enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1;\n        INV s = enat x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t p.\n                            (WHILE b DO c,\n                             s) \\<Rightarrow> p \\<Down> t \\<and>\n                            enat p + (INV t + \\<up> (\\<not> bval b t))\n                            \\<le> INV s + 1", "case (less n)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < n; INV ?s = enat ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t p.\n                       (WHILE b DO c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + (INV t + \\<up> (\\<not> bval b t))\n                       \\<le> INV ?s + 1\n  INV s = enat n\n\ngoal (1 subgoal):\n 1. \\<And>x s.\n       \\<lbrakk>\\<And>y s.\n                   \\<lbrakk>y < x; INV s = enat y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>t p.\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n  enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1;\n        INV s = enat x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t p.\n                            (WHILE b DO c,\n                             s) \\<Rightarrow> p \\<Down> t \\<and>\n                            enat p + (INV t + \\<up> (\\<not> bval b t))\n                            \\<le> INV s + 1", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "proof (cases \"bval b s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "case False"], ["proof (state)\nthis:\n  \\<not> bval b s\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "using WhileFalse[OF False] one_enat_def"], ["proof (prove)\nusing this:\n  (WHILE b DO ?c, s) \\<Rightarrow> Suc 0 \\<Down> s\n  1 = enat 1\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1\n\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "case True\n        \\<comment> \\<open>obtain the loop body from the outer IH\\<close>"], ["proof (state)\nthis:\n  bval b s\n\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "with less(2) WH2"], ["proof (chain)\npicking this:\n  INV s = enat n\n  INV ?s + \\<up> (bval b ?s) < \\<infinity> \\<Longrightarrow>\n  \\<exists>t p.\n     (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + INV t + 1 \\<le> INV ?s + \\<up> (bval b ?s)\n  bval b s", "obtain t p\n          where o: \"(c, s) \\<Rightarrow> p \\<Down> t\"\n            and q: \"enat p + INV t + 1 \\<le> INV s \""], ["proof (prove)\nusing this:\n  INV s = enat n\n  INV ?s + \\<up> (bval b ?s) < \\<infinity> \\<Longrightarrow>\n  \\<exists>t p.\n     (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + INV t + 1 \\<le> INV ?s + \\<up> (bval b ?s)\n  bval b s\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        \\<lbrakk>(c, s) \\<Rightarrow> p \\<Down> t;\n         enat p + INV t + 1 \\<le> INV s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force\n\n        \\<comment> \\<open>prepare premises to ...\\<close>"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  enat p + INV t + 1 \\<le> INV s\n\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "from q"], ["proof (chain)\npicking this:\n  enat p + INV t + 1 \\<le> INV s", "have g: \"INV t < INV s\""], ["proof (prove)\nusing this:\n  enat p + INV t + 1 \\<le> INV s\n\ngoal (1 subgoal):\n 1. INV t < INV s", "using help2 less(2)"], ["proof (prove)\nusing this:\n  enat p + INV t + 1 \\<le> INV s\n  \\<lbrakk>enat ?p + ?INV ?t + 1 \\<le> ?INV ?s; ?INV ?s = enat ?n\\<rbrakk>\n  \\<Longrightarrow> ?INV ?t < ?INV ?s\n  INV s = enat n\n\ngoal (1 subgoal):\n 1. INV t < INV s", "by metis"], ["proof (state)\nthis:\n  INV t < INV s\n\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "then"], ["proof (chain)\npicking this:\n  INV t < INV s", "have ninfINVt: \"INV t < \\<infinity>\""], ["proof (prove)\nusing this:\n  INV t < INV s\n\ngoal (1 subgoal):\n 1. INV t < \\<infinity>", "using less(2)"], ["proof (prove)\nusing this:\n  INV t < INV s\n  INV s = enat n\n\ngoal (1 subgoal):\n 1. INV t < \\<infinity>", "using enat_ord_simps(4)"], ["proof (prove)\nusing this:\n  INV t < INV s\n  INV s = enat n\n  (?q < \\<infinity>) = (?q \\<noteq> \\<infinity>)\n\ngoal (1 subgoal):\n 1. INV t < \\<infinity>", "by fastforce"], ["proof (state)\nthis:\n  INV t < \\<infinity>\n\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "then"], ["proof (chain)\npicking this:\n  INV t < \\<infinity>", "obtain n' where i: \"INV t = enat n'\""], ["proof (prove)\nusing this:\n  INV t < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>n'. INV t = enat n' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using not_infinity_eq"], ["proof (prove)\nusing this:\n  INV t < \\<infinity>\n  (?x \\<noteq> \\<infinity>) = (\\<exists>i. ?x = enat i)\n\ngoal (1 subgoal):\n 1. (\\<And>n'. INV t = enat n' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  INV t = enat n'\n\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "with less(2)"], ["proof (chain)\npicking this:\n  INV s = enat n\n  INV t = enat n'", "have ii: \"n' < n\""], ["proof (prove)\nusing this:\n  INV s = enat n\n  INV t = enat n'\n\ngoal (1 subgoal):\n 1. n' < n", "using g"], ["proof (prove)\nusing this:\n  INV s = enat n\n  INV t = enat n'\n  INV t < INV s\n\ngoal (1 subgoal):\n 1. n' < n", "by auto\n        \\<comment> \\<open>... obtain the tail of the While loop from the inner IH\\<close>"], ["proof (state)\nthis:\n  n' < n\n\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "from i ii less(1)"], ["proof (chain)\npicking this:\n  INV t = enat n'\n  n' < n\n  \\<lbrakk>?y < n; INV ?s = enat ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t p.\n                       (WHILE b DO c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + (INV t + \\<up> (\\<not> bval b t))\n                       \\<le> INV ?s + 1", "obtain t2 p2\n          where o2: \"(WHILE b DO c, t) \\<Rightarrow> p2 \\<Down> t2\"\n            and q2: \"enat p2 + (INV t2 + emb (\\<not> bval b t2)) \\<le> INV t + 1\""], ["proof (prove)\nusing this:\n  INV t = enat n'\n  n' < n\n  \\<lbrakk>?y < n; INV ?s = enat ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t p.\n                       (WHILE b DO c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + (INV t + \\<up> (\\<not> bval b t))\n                       \\<le> INV ?s + 1\n\ngoal (1 subgoal):\n 1. (\\<And>p2 t2.\n        \\<lbrakk>(WHILE b DO c, t) \\<Rightarrow> p2 \\<Down> t2;\n         enat p2 + (INV t2 + \\<up> (\\<not> bval b t2))\n         \\<le> INV t + 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (WHILE b DO c, t) \\<Rightarrow> p2 \\<Down> t2\n  enat p2 + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV t + 1\n\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "have ende: \"~ bval b t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> bval b t2", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<not> bval b t2 \\<Longrightarrow> False", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. bval b t2 \\<Longrightarrow> False", "using q2 ninfINVt"], ["proof (prove)\nusing this:\n  enat p2 + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV t + 1\n  INV t < \\<infinity>\n\ngoal (1 subgoal):\n 1. bval b t2 \\<Longrightarrow> False", "by (simp add: i one_enat_def) \n            \n        \\<comment> \\<open>combine body and tail to one loop unrolling:\\<close>\n        \\<comment> \\<open>- the Bigstep Semantic\\<close>"], ["proof (state)\nthis:\n  \\<not> bval b t2\n\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "from WhileTrue[OF True o o2]"], ["proof (chain)\npicking this:\n  1 + p + p2 = ?z \\<Longrightarrow>\n  (WHILE b DO c, s) \\<Rightarrow> ?z \\<Down> t2", "have BigStep: \"(WHILE b DO c, s) \\<Rightarrow> 1 + p + p2 \\<Down> t2\""], ["proof (prove)\nusing this:\n  1 + p + p2 = ?z \\<Longrightarrow>\n  (WHILE b DO c, s) \\<Rightarrow> ?z \\<Down> t2\n\ngoal (1 subgoal):\n 1. (WHILE b DO c, s) \\<Rightarrow> 1 + p + p2 \\<Down> t2", "by simp\n\n        \\<comment> \\<open>- the potentialPreservation\\<close>"], ["proof (state)\nthis:\n  (WHILE b DO c, s) \\<Rightarrow> 1 + p + p2 \\<Down> t2\n\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "from ende q2"], ["proof (chain)\npicking this:\n  \\<not> bval b t2\n  enat p2 + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV t + 1", "have q2': \"enat p2 + INV t2 \\<le> INV t + 1\""], ["proof (prove)\nusing this:\n  \\<not> bval b t2\n  enat p2 + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV t + 1\n\ngoal (1 subgoal):\n 1. enat p2 + INV t2 \\<le> INV t + 1", "by simp"], ["proof (state)\nthis:\n  enat p2 + INV t2 \\<le> INV t + 1\n\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "have potentialPreservation: \"enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1", "have \"enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2))\n            = enat (Suc (p + p2)) + INV t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) =\n    enat (Suc (p + p2)) + INV t2", "using ende"], ["proof (prove)\nusing this:\n  \\<not> bval b t2\n\ngoal (1 subgoal):\n 1. enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) =\n    enat (Suc (p + p2)) + INV t2", "by simp"], ["proof (state)\nthis:\n  enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) =\n  enat (Suc (p + p2)) + INV t2\n\ngoal (1 subgoal):\n 1. enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1", "also"], ["proof (state)\nthis:\n  enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) =\n  enat (Suc (p + p2)) + INV t2\n\ngoal (1 subgoal):\n 1. enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1", "have \"\\<dots> = enat (Suc p) + enat p2 + INV t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc (p + p2)) + INV t2 = enat (Suc p) + enat p2 + INV t2", "by fastforce"], ["proof (state)\nthis:\n  enat (Suc (p + p2)) + INV t2 = enat (Suc p) + enat p2 + INV t2\n\ngoal (1 subgoal):\n 1. enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1", "also"], ["proof (state)\nthis:\n  enat (Suc (p + p2)) + INV t2 = enat (Suc p) + enat p2 + INV t2\n\ngoal (1 subgoal):\n 1. enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1", "have \"\\<dots> \\<le> enat (Suc p) + INV t + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc p) + enat p2 + INV t2 \\<le> enat (Suc p) + INV t + 1", "using q2'"], ["proof (prove)\nusing this:\n  enat p2 + INV t2 \\<le> INV t + 1\n\ngoal (1 subgoal):\n 1. enat (Suc p) + enat p2 + INV t2 \\<le> enat (Suc p) + INV t + 1", "by (metis ab_semigroup_add_class.add_ac(1) add_left_mono)"], ["proof (state)\nthis:\n  enat (Suc p) + enat p2 + INV t2 \\<le> enat (Suc p) + INV t + 1\n\ngoal (1 subgoal):\n 1. enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1", "also"], ["proof (state)\nthis:\n  enat (Suc p) + enat p2 + INV t2 \\<le> enat (Suc p) + INV t + 1\n\ngoal (1 subgoal):\n 1. enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1", "have \"\\<dots> \\<le> INV s + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc p) + INV t + 1 \\<le> INV s + 1", "using q"], ["proof (prove)\nusing this:\n  enat p + INV t + 1 \\<le> INV s\n\ngoal (1 subgoal):\n 1. enat (Suc p) + INV t + 1 \\<le> INV s + 1", "by (metis (no_types, hide_lams) add.commute add_left_mono eSuc_enat iadd_Suc plus_1_eSuc(1))"], ["proof (state)\nthis:\n  enat (Suc p) + INV t + 1 \\<le> INV s + 1\n\ngoal (1 subgoal):\n 1. enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1", "finally"], ["proof (chain)\npicking this:\n  enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1", "show \"enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1\""], ["proof (prove)\nusing this:\n  enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1\n\ngoal (1 subgoal):\n 1. enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1", "."], ["proof (state)\nthis:\n  enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1\n\ngoal:\nNo subgoals!", "qed\n            \n        \\<comment> \\<open>finally combine BigStep Semantic and TimeBound\\<close>"], ["proof (state)\nthis:\n  enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1\n\ngoal (1 subgoal):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "apply(rule exI[where x=t2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t2 \\<and>\n       enat p + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1", "apply(rule exI[where x= \"1 + p + p2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (WHILE b DO c, s) \\<Rightarrow> 1 + p + p2 \\<Down> t2 \\<and>\n    enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (WHILE b DO c, s) \\<Rightarrow> 1 + p + p2 \\<Down> t2\n 2. enat (1 + p + p2) + (INV t2 + \\<up> (\\<not> bval b t2)) \\<le> INV s + 1", "by(fact BigStep potentialPreservation)+"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  INV s = enat n \\<Longrightarrow>\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       INV s + 1 < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "from this[OF i]"], ["proof (chain)\npicking this:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "show \"\\<exists>t p. (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + (INV t + emb (\\<not> bval b t)) \\<le> INV s + 1\""], ["proof (prove)\nusing this:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1", "."], ["proof (state)\nthis:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + (INV t + \\<up> (\\<not> bval b t)) \\<le> INV s + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Turnstile>\\<^sub>2 {\\<lambda>a. INV a + 1} WHILE b DO c\n  {\\<lambda>a. INV a + \\<up> (\\<not> bval b a)}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Completeness\""], ["", "(* the WeakestPrePotential  *)"], ["", "definition wp2 :: \"com \\<Rightarrow> qassn \\<Rightarrow> qassn\" (\"wp\\<^sub>2\") where\n\"wp\\<^sub>2 c Q  =  (\\<lambda>s. (if (\\<exists>t p. (c,s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>)  then enat (THE p. \\<exists>t. (c,s) \\<Rightarrow> p \\<Down> t) + Q (THE t. \\<exists>p. (c,s) \\<Rightarrow> p \\<Down> t) else \\<infinity>))\""], ["", "lemma wp2_alt: \"wp\\<^sub>2 c Q = (\\<lambda>s. (if \\<down>(c,s) then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s)) else \\<infinity>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>2 c Q =\n    (\\<lambda>s.\n        if \\<down> (c, s)\n        then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n        else \\<infinity>)", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       wp\\<^sub>2 c Q s =\n       (if \\<down> (c, s)\n        then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n        else \\<infinity>)", "by(auto simp: bigstepT_the_state wp2_def split: if_split)"], ["", "theorem wp2_is_weakestprePotential: \"\\<Turnstile>\\<^sub>2 {P}c{Q} \\<longleftrightarrow> (\\<forall>s. wp\\<^sub>2 c Q s \\<le> P s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Turnstile>\\<^sub>2 {P} c {Q}) =\n    (\\<forall>s. wp\\<^sub>2 c Q s \\<le> P s)", "unfolding  wp2_def hoare2_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s.\n        P s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + Q t \\<le> P s)) =\n    (\\<forall>s.\n        (if \\<exists>t p.\n               (c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n         then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n         else \\<infinity>)\n        \\<le> P s)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>s.\n       P s < \\<infinity> \\<longrightarrow>\n       (\\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat p + Q t \\<le> P s) \\<Longrightarrow>\n    \\<forall>s.\n       (if \\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n        else \\<infinity>)\n       \\<le> P s\n 2. \\<forall>s.\n       (if \\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n        else \\<infinity>)\n       \\<le> P s \\<Longrightarrow>\n    \\<forall>s.\n       P s < \\<infinity> \\<longrightarrow>\n       (\\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> P s)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       P s < \\<infinity> \\<longrightarrow>\n       (\\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat p + Q t \\<le> P s) \\<Longrightarrow>\n    \\<forall>s.\n       (if \\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n        else \\<infinity>)\n       \\<le> P s", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<forall>s.\n          P s < \\<infinity> \\<longrightarrow>\n          (\\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat p + Q t \\<le> P s) \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n        else \\<infinity>)\n       \\<le> P s", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       P s < \\<infinity> \\<longrightarrow>\n       (\\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat p + Q t \\<le> P s) \\<Longrightarrow>\n    (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> P s", "apply(cases \"\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>s.\n                P s < \\<infinity> \\<longrightarrow>\n                (\\<exists>t p.\n                    (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                    enat p + Q t \\<le> P s);\n     \\<exists>t p.\n        (c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (if \\<exists>t p.\n                             (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                             Q t < \\<infinity>\n                       then enat (\\<down>\\<^sub>t (c, s)) +\n                            Q (\\<down>\\<^sub>s (c, s))\n                       else \\<infinity>)\n                      \\<le> P s\n 2. \\<lbrakk>\\<forall>s.\n                P s < \\<infinity> \\<longrightarrow>\n                (\\<exists>t p.\n                    (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                    enat p + Q t \\<le> P s);\n     \\<nexists>t p.\n        (c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (if \\<exists>t p.\n                             (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                             Q t < \\<infinity>\n                       then enat (\\<down>\\<^sub>t (c, s)) +\n                            Q (\\<down>\\<^sub>s (c, s))\n                       else \\<infinity>)\n                      \\<le> P s", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>s.\n                (\\<exists>i. P s = enat i) \\<longrightarrow>\n                (\\<exists>t p.\n                    (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                    enat p + Q t \\<le> P s);\n     \\<exists>t.\n        (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n        (\\<exists>i. Q t = enat i)\\<rbrakk>\n    \\<Longrightarrow> enat (\\<down>\\<^sub>t (c, s)) +\n                      Q (\\<down>\\<^sub>s (c, s))\n                      \\<le> P s\n 2. \\<lbrakk>\\<forall>s.\n                P s < \\<infinity> \\<longrightarrow>\n                (\\<exists>t p.\n                    (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                    enat p + Q t \\<le> P s);\n     \\<nexists>t p.\n        (c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (if \\<exists>t p.\n                             (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                             Q t < \\<infinity>\n                       then enat (\\<down>\\<^sub>t (c, s)) +\n                            Q (\\<down>\\<^sub>s (c, s))\n                       else \\<infinity>)\n                      \\<le> P s", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t p i.\n       \\<lbrakk>\\<forall>s.\n                   (\\<exists>i. P s = enat i) \\<longrightarrow>\n                   (\\<exists>t p.\n                       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + Q t \\<le> P s);\n        (c, s) \\<Rightarrow> p \\<Down> t; Q t = enat i\\<rbrakk>\n       \\<Longrightarrow> enat (\\<down>\\<^sub>t (c, s)) +\n                         Q (\\<down>\\<^sub>s (c, s))\n                         \\<le> P s\n 2. \\<lbrakk>\\<forall>s.\n                (\\<exists>i. P s = enat i) \\<longrightarrow>\n                (\\<exists>t p.\n                    (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                    enat p + Q t \\<le> P s);\n     \\<forall>t.\n        (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n        Q t = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> P s = \\<infinity>", "oops"], ["", "lemma wp2_Skip[simp]: \"wp\\<^sub>2 SKIP Q = (%s. eSuc (Q s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>2 SKIP Q = (\\<lambda>s. eSuc (Q s))", "apply(auto intro!: ext simp: wp2_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s i.\n       Q s = enat i \\<Longrightarrow>\n       enat (\\<down>\\<^sub>t (SKIP, s)) + Q (\\<down>\\<^sub>s (SKIP, s)) =\n       eSuc (enat i)\n 2. \\<And>s.\n       \\<forall>t.\n          (\\<forall>p. \\<not> (SKIP, s) \\<Rightarrow> p \\<Down> t) \\<or>\n          Q t = \\<infinity> \\<Longrightarrow>\n       \\<infinity> = eSuc (Q s)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<forall>t.\n          (\\<forall>p. \\<not> (SKIP, s) \\<Rightarrow> p \\<Down> t) \\<or>\n          Q t = \\<infinity> \\<Longrightarrow>\n       \\<infinity> = eSuc (Q s)\n 2. \\<And>s i.\n       Q s = enat i \\<Longrightarrow>\n       enat (\\<down>\\<^sub>t (SKIP, s)) + Q (\\<down>\\<^sub>s (SKIP, s)) =\n       eSuc (enat i)", "apply(simp only: SKIPnot)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<forall>t.\n          (\\<forall>p. s \\<noteq> t \\<or> p \\<noteq> Suc 0) \\<or>\n          Q t = \\<infinity> \\<Longrightarrow>\n       \\<infinity> = eSuc (Q s)\n 2. \\<And>s i.\n       Q s = enat i \\<Longrightarrow>\n       enat (\\<down>\\<^sub>t (SKIP, s)) + Q (\\<down>\\<^sub>s (SKIP, s)) =\n       eSuc (enat i)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       Q s = enat i \\<Longrightarrow>\n       enat (\\<down>\\<^sub>t (SKIP, s)) + Q (\\<down>\\<^sub>s (SKIP, s)) =\n       eSuc (enat i)", "apply(simp only: SKIPp SKIPt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       Q s = enat i \\<Longrightarrow> enat (Suc 0) + enat i = eSuc (enat i)", "using one_enat_def plus_1_eSuc(1)"], ["proof (prove)\nusing this:\n  1 = enat 1\n  1 + ?q = eSuc ?q\n\ngoal (1 subgoal):\n 1. \\<And>s i.\n       Q s = enat i \\<Longrightarrow> enat (Suc 0) + enat i = eSuc (enat i)", "by auto"], ["", "lemma wp2_Assign[simp]: \"wp\\<^sub>2 (x ::= e) Q = (\\<lambda>s. eSuc (Q (s(x := aval e s))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>2 (x ::= e) Q = (\\<lambda>s. eSuc (Q (s[e/x])))", "by (auto intro!: ext simp: wp2_def ASSp ASSt ASSnot eSuc_enat)"], ["", "lemma wp2_Seq[simp]: \"wp\\<^sub>2 (c\\<^sub>1;;c\\<^sub>2) Q = wp\\<^sub>2 c\\<^sub>1 (wp\\<^sub>2 c\\<^sub>2 Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>2 (c\\<^sub>1;; c\\<^sub>2) Q =\n    wp\\<^sub>2 c\\<^sub>1 (wp\\<^sub>2 c\\<^sub>2 Q)", "unfolding wp2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s.\n        if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n    (\\<lambda>s.\n        if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "(* what rule is doing: it uses the extensionality (ext) of functions *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s.\n        if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n    (\\<lambda>s.\n        if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "proof (rule, case_tac \"\\<exists>t p. (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\", goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "case (1 s)"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     Q t < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "then"], ["proof (chain)\npicking this:\n  \\<exists>t p.\n     (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     Q t < \\<infinity>", "obtain u p where ter: \"(c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> u\" and Q: \"Q u < \\<infinity>\""], ["proof (prove)\nusing this:\n  \\<exists>t p.\n     (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p u.\n        \\<lbrakk>(c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> u;\n         Q u < \\<infinity>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> u\n  Q u < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "then"], ["proof (chain)\npicking this:\n  (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> u\n  Q u < \\<infinity>", "obtain t p1 p2 where i: \"(c\\<^sub>1 , s) \\<Rightarrow> p1 \\<Down> t\" and ii: \"(c\\<^sub>2 , t) \\<Rightarrow> p2 \\<Down> u\" and p: \"p1 + p2 = p\""], ["proof (prove)\nusing this:\n  (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> u\n  Q u < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p1 t p2.\n        \\<lbrakk>(c\\<^sub>1, s) \\<Rightarrow> p1 \\<Down> t;\n         (c\\<^sub>2, t) \\<Rightarrow> p2 \\<Down> u; p1 + p2 = p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c\\<^sub>1, s) \\<Rightarrow> p1 \\<Down> t\n  (c\\<^sub>2, t) \\<Rightarrow> p2 \\<Down> u\n  p1 + p2 = p\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "from bigstepT_the_state[OF i]"], ["proof (chain)\npicking this:\n  \\<down>\\<^sub>s (c\\<^sub>1, s) = t", "have t: \"\\<down>\\<^sub>s (c\\<^sub>1, s) = t\""], ["proof (prove)\nusing this:\n  \\<down>\\<^sub>s (c\\<^sub>1, s) = t\n\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>s (c\\<^sub>1, s) = t", "by blast"], ["proof (state)\nthis:\n  \\<down>\\<^sub>s (c\\<^sub>1, s) = t\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "from bigstepT_the_state[OF ii]"], ["proof (chain)\npicking this:\n  \\<down>\\<^sub>s (c\\<^sub>2, t) = u", "have t2: \"\\<down>\\<^sub>s (c\\<^sub>2, t) = u\""], ["proof (prove)\nusing this:\n  \\<down>\\<^sub>s (c\\<^sub>2, t) = u\n\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>s (c\\<^sub>2, t) = u", "by blast"], ["proof (state)\nthis:\n  \\<down>\\<^sub>s (c\\<^sub>2, t) = u\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "from bigstepT_the_cost[OF i]"], ["proof (chain)\npicking this:\n  \\<down>\\<^sub>t (c\\<^sub>1, s) = p1", "have firstcost: \"\\<down>\\<^sub>t (c\\<^sub>1, s) = p1\""], ["proof (prove)\nusing this:\n  \\<down>\\<^sub>t (c\\<^sub>1, s) = p1\n\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>t (c\\<^sub>1, s) = p1", "by blast"], ["proof (state)\nthis:\n  \\<down>\\<^sub>t (c\\<^sub>1, s) = p1\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "from bigstepT_the_cost[OF ii]"], ["proof (chain)\npicking this:\n  \\<down>\\<^sub>t (c\\<^sub>2, t) = p2", "have secondcost: \"\\<down>\\<^sub>t (c\\<^sub>2, t) = p2\""], ["proof (prove)\nusing this:\n  \\<down>\\<^sub>t (c\\<^sub>2, t) = p2\n\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>t (c\\<^sub>2, t) = p2", "by blast"], ["proof (state)\nthis:\n  \\<down>\\<^sub>t (c\\<^sub>2, t) = p2\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "have totalcost: \"\\<down>\\<^sub>t(c\\<^sub>1;; c\\<^sub>2, s) = p1 + p2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s) = p1 + p2", "using bigstepT_the_cost[OF ter] p"], ["proof (prove)\nusing this:\n  \\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s) = p\n  p1 + p2 = p\n\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s) = p1 + p2", "by auto"], ["proof (state)\nthis:\n  \\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s) = p1 + p2\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "have totalstate: \"\\<down>\\<^sub>s(c\\<^sub>1;; c\\<^sub>2, s) = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s) = u", "using bigstepT_the_state[OF ter]"], ["proof (prove)\nusing this:\n  \\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s) = u\n\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s) = u", "by auto"], ["proof (state)\nthis:\n  \\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s) = u\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "have c2: \"\\<exists>ta p. (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and> Q ta < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ta p.\n       (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and> Q ta < \\<infinity>", "apply(rule exI[where x= u])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> u \\<and> Q u < \\<infinity>", "apply(rule exI[where x= p2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c\\<^sub>2, t) \\<Rightarrow> p2 \\<Down> u \\<and> Q u < \\<infinity>", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. (c\\<^sub>2, t) \\<Rightarrow> p2 \\<Down> u\n 2. Q u < \\<infinity>", "apply fact+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>ta p.\n     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and> Q ta < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "have C: \"\\<exists>t p. (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and> (if \\<exists>ta p. (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and> Q ta < \\<infinity> then enat (THE p. Ex (big_step_t (c\\<^sub>2, t) p)) + Q (THE ta. \\<exists>p. (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta) else \\<infinity>) < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n       (if \\<exists>ta p.\n              (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n              Q ta < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n        else \\<infinity>)\n       < \\<infinity>", "apply(rule exI[where x=t])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n       (if \\<exists>ta p.\n              (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n              Q ta < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n        else \\<infinity>)\n       < \\<infinity>", "apply(rule exI[where x=p1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c\\<^sub>1, s) \\<Rightarrow> p1 \\<Down> t \\<and>\n    (if \\<exists>ta p.\n           (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n           Q ta < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n          Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n     else \\<infinity>)\n    < \\<infinity>", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. (c\\<^sub>1, s) \\<Rightarrow> p1 \\<Down> t\n 2. (if \\<exists>ta p.\n           (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n           Q ta < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n          Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n     else \\<infinity>)\n    < \\<infinity>", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>ta p.\n           (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n           Q ta < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n          Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n     else \\<infinity>)\n    < \\<infinity>", "apply(simp only: c2 if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n    < \\<infinity>", "using Q bigstepT_the_state ii"], ["proof (prove)\nusing this:\n  Q u < \\<infinity>\n  (?c, ?s) \\<Rightarrow> ?t \\<Down> ?s' \\<Longrightarrow>\n  \\<down>\\<^sub>s (?c, ?s) = ?s'\n  (c\\<^sub>2, t) \\<Rightarrow> p2 \\<Down> u\n\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n    < \\<infinity>", "by auto"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n     (if \\<exists>ta p.\n            (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n            Q ta < \\<infinity>\n      then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n           Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n      else \\<infinity>)\n     < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n           Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n          Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n     else \\<infinity>) =\n    (if \\<exists>t p.\n           (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n           (if \\<exists>ta p.\n                  (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                  Q ta < \\<infinity>\n            then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                 Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n            else \\<infinity>)\n           < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n          (if \\<exists>t p.\n                 (c\\<^sub>2,\n                  \\<down>\\<^sub>s\n                   (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                 Q t < \\<infinity>\n           then enat\n                 (\\<down>\\<^sub>t\n                   (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                Q (\\<down>\\<^sub>s\n                    (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n           else \\<infinity>)\n     else \\<infinity>)", "apply(simp only: 1 if_True t t2 c2 C totalcost totalstate firstcost secondcost)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (p1 + p2) + Q u = enat p1 + (enat p2 + Q u)", "by fastforce"], ["proof (state)\nthis:\n  (if \\<exists>t p.\n         (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n         Q t < \\<infinity>\n   then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n        Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n   else \\<infinity>) =\n  (if \\<exists>t p.\n         (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n         (if \\<exists>ta p.\n                (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                Q ta < \\<infinity>\n          then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n               Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n          else \\<infinity>)\n         < \\<infinity>\n   then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n        (if \\<exists>t p.\n               (c\\<^sub>2,\n                \\<down>\\<^sub>s\n                 (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n               Q t < \\<infinity>\n         then enat\n               (\\<down>\\<^sub>t\n                 (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n              Q (\\<down>\\<^sub>s\n                  (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n         else \\<infinity>)\n   else \\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "case (2 s)"], ["proof (state)\nthis:\n  \\<nexists>t p.\n     (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n           Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n          Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n     else \\<infinity>) =\n    (if \\<exists>t p.\n           (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n           (if \\<exists>ta p.\n                  (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                  Q ta < \\<infinity>\n            then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                 Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n            else \\<infinity>)\n           < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n          (if \\<exists>t p.\n                 (c\\<^sub>2,\n                  \\<down>\\<^sub>s\n                   (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                 Q t < \\<infinity>\n           then enat\n                 (\\<down>\\<^sub>t\n                   (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                Q (\\<down>\\<^sub>s\n                    (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n           else \\<infinity>)\n     else \\<infinity>)", "apply(simp only: 2 if_False)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<infinity> =\n    (if \\<exists>t p.\n           (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n           (if \\<exists>ta p.\n                  (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                  Q ta < \\<infinity>\n            then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                 Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n            else \\<infinity>)\n           < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n          (if \\<exists>t p.\n                 (c\\<^sub>2,\n                  \\<down>\\<^sub>s\n                   (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                 Q t < \\<infinity>\n           then enat\n                 (\\<down>\\<^sub>t\n                   (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                Q (\\<down>\\<^sub>s\n                    (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n           else \\<infinity>)\n     else \\<infinity>)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t p i ta tb pa ia pb ib.\n       \\<lbrakk>(c\\<^sub>2,\n                 \\<down>\\<^sub>s (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i; (c\\<^sub>1, s) \\<Rightarrow> pa \\<Down> ta;\n        enat (\\<down>\\<^sub>t (c\\<^sub>2, ta)) +\n        Q (\\<down>\\<^sub>s (c\\<^sub>2, ta)) =\n        enat ia;\n        (c\\<^sub>2, ta) \\<Rightarrow> pb \\<Down> tb; Q tb = enat ib\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n                         (enat\n                           (\\<down>\\<^sub>t\n                             (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                          Q (\\<down>\\<^sub>s\n                              (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))))", "using 2"], ["proof (prove)\nusing this:\n  \\<nexists>t p.\n     (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>t p i ta tb pa ia pb ib.\n       \\<lbrakk>(c\\<^sub>2,\n                 \\<down>\\<^sub>s (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i; (c\\<^sub>1, s) \\<Rightarrow> pa \\<Down> ta;\n        enat (\\<down>\\<^sub>t (c\\<^sub>2, ta)) +\n        Q (\\<down>\\<^sub>s (c\\<^sub>2, ta)) =\n        enat ia;\n        (c\\<^sub>2, ta) \\<Rightarrow> pb \\<Down> tb; Q tb = enat ib\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n                         (enat\n                           (\\<down>\\<^sub>t\n                             (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                          Q (\\<down>\\<^sub>s\n                              (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))))", "by force"], ["proof (state)\nthis:\n  (if \\<exists>t p.\n         (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n         Q t < \\<infinity>\n   then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n        Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n   else \\<infinity>) =\n  (if \\<exists>t p.\n         (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n         (if \\<exists>ta p.\n                (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                Q ta < \\<infinity>\n          then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n               Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n          else \\<infinity>)\n         < \\<infinity>\n   then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n        (if \\<exists>t p.\n               (c\\<^sub>2,\n                \\<down>\\<^sub>s\n                 (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n               Q t < \\<infinity>\n         then enat\n               (\\<down>\\<^sub>t\n                 (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n              Q (\\<down>\\<^sub>s\n                  (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n         else \\<infinity>)\n   else \\<infinity>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wp2_If[simp]:\n \"wp\\<^sub>2 (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) Q = (\\<lambda>s. eSuc (wp\\<^sub>2 (if bval b s then c\\<^sub>1 else c\\<^sub>2) Q s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>2 (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) Q =\n    (\\<lambda>s.\n        eSuc (wp\\<^sub>2 (if bval b s then c\\<^sub>1 else c\\<^sub>2) Q s))", "apply (auto simp: wp2_def fun_eq_iff)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; bval b x;\n        (c\\<^sub>1, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>1, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>1, x)))\n 2. \\<And>x t p i.\n       \\<lbrakk>bval b x; (c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>1, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>1, x)))\n 3. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))\n 4. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "subgoal for x t p i ta ia xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n     Q ta = enat ia; bval b x;\n     (c\\<^sub>1, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n    \\<Longrightarrow> enat\n                       (\\<down>\\<^sub>t\n                         (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                      Q (\\<down>\\<^sub>s\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                      eSuc\n                       (enat (\\<down>\\<^sub>t (c\\<^sub>1, x)) +\n                        Q (\\<down>\\<^sub>s (c\\<^sub>1, x)))", "apply(simp only: IfTrue[THEN bigstepT_the_state])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n     Q ta = enat ia; bval b x;\n     (c\\<^sub>1, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n    \\<Longrightarrow> enat\n                       (\\<down>\\<^sub>t\n                         (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                      enat i =\n                      eSuc\n                       (enat (\\<down>\\<^sub>t (c\\<^sub>1, x)) +\n                        Q (\\<down>\\<^sub>s (c\\<^sub>1, x)))", "apply(simp only: IfTrue[THEN bigstepT_the_cost])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n     Q ta = enat ia; bval b x;\n     (c\\<^sub>1, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n    \\<Longrightarrow> enat (p + 1) + enat i =\n                      eSuc\n                       (enat (\\<down>\\<^sub>t (c\\<^sub>1, x)) +\n                        Q (\\<down>\\<^sub>s (c\\<^sub>1, x)))", "apply(simp only: bigstepT_the_cost bigstepT_the_state)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n     Q ta = enat ia; bval b x;\n     (c\\<^sub>1, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n    \\<Longrightarrow> enat (p + 1) + enat i = eSuc (enat p + enat i)", "by (simp add: eSuc_enat)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x t p i.\n       \\<lbrakk>bval b x; (c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>1, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>1, x)))\n 2. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))\n 3. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "apply(simp only: bigstepT_the_state bigstepT_the_cost)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x t p i.\n       \\<lbrakk>bval b x; (c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> = eSuc (enat p + enat i)\n 2. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))\n 3. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "apply force"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))\n 2. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "apply(simp only: bigstepT_the_state bigstepT_the_cost)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc (enat p + enat i)\n 2. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "proof(goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc (enat p + enat i)\n 2. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "case (1 x t p i ta ia xa)"], ["proof (state)\nthis:\n  (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t\n  Q t = enat i\n  Q ta = enat ia\n  \\<not> bval b x\n  (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\n\ngoal (2 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc (enat p + enat i)\n 2. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "note f= IfFalse[THEN bigstepT_the_state, of b x c\\<^sub>2 xa ta \"Suc xa\" c\\<^sub>1, simplified, OF 1(4) 1(5)]"], ["proof (state)\nthis:\n  \\<down>\\<^sub>s (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x) = ta\n\ngoal (2 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc (enat p + enat i)\n 2. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "note f2= IfFalse[THEN bigstepT_the_cost, of b x c\\<^sub>2 xa ta \"Suc xa\" c\\<^sub>1, simplified, OF 1(4) 1(5)]"], ["proof (state)\nthis:\n  \\<down>\\<^sub>t (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x) = Suc xa\n\ngoal (2 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc (enat p + enat i)\n 2. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "note g= bigstep_det[OF 1(1) 1(5)]"], ["proof (state)\nthis:\n  p = xa \\<and> t = ta\n\ngoal (2 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc (enat p + enat i)\n 2. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n    Q (\\<down>\\<^sub>s (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n    eSuc (enat p + enat i)", "apply(simp only: f f2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc xa) + Q ta = eSuc (enat p + enat i)", "using 1 g"], ["proof (prove)\nusing this:\n  (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t\n  Q t = enat i\n  Q ta = enat ia\n  \\<not> bval b x\n  (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\n  p = xa \\<and> t = ta\n\ngoal (1 subgoal):\n 1. enat (Suc xa) + Q ta = eSuc (enat p + enat i)", "by (simp add: eSuc_enat)"], ["proof (state)\nthis:\n  enat (\\<down>\\<^sub>t (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n  Q (\\<down>\\<^sub>s (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n  eSuc (enat p + enat i)\n\ngoal (1 subgoal):\n 1. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "case 2"], ["proof (state)\nthis:\n  \\<not> bval b x_\n  (c\\<^sub>2, x_) \\<Rightarrow> p_ \\<Down> t_\n  Q t_ = enat i_\n  \\<forall>t.\n     (\\<forall>p.\n         \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                 x_) \\<Rightarrow> p \\<Down> t) \\<or>\n     Q t = \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "then"], ["proof (chain)\npicking this:\n  \\<not> bval b x_\n  (c\\<^sub>2, x_) \\<Rightarrow> p_ \\<Down> t_\n  Q t_ = enat i_\n  \\<forall>t.\n     (\\<forall>p.\n         \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                 x_) \\<Rightarrow> p \\<Down> t) \\<or>\n     Q t = \\<infinity>", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> bval b x_\n  (c\\<^sub>2, x_) \\<Rightarrow> p_ \\<Down> t_\n  Q t_ = enat i_\n  \\<forall>t.\n     (\\<forall>p.\n         \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                 x_) \\<Rightarrow> p \\<Down> t) \\<or>\n     Q t = \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<infinity> =\n    eSuc\n     (enat (\\<down>\\<^sub>t (c\\<^sub>2, x_)) +\n      Q (\\<down>\\<^sub>s (c\\<^sub>2, x_)))", "apply(simp only: bigstepT_the_state bigstepT_the_cost)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> bval b x_; (c\\<^sub>2, x_) \\<Rightarrow> p_ \\<Down> t_;\n     Q t_ = enat i_;\n     \\<forall>t.\n        (\\<forall>p.\n            \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                    x_) \\<Rightarrow> p \\<Down> t) \\<or>\n        Q t = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> \\<infinity> = eSuc (enat p_ + enat i_)", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<infinity> =\n  eSuc\n   (enat (\\<down>\\<^sub>t (c\\<^sub>2, x_)) +\n    Q (\\<down>\\<^sub>s (c\\<^sub>2, x_)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assumes b: \"bval b s\"\n  shows wp2WhileTrue: \" wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s  + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "proof (cases \"\\<exists>t p. (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "case True"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "then"], ["proof (chain)\npicking this:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>", "obtain t p where w: \"(WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\" and q: \"Q t < \\<infinity>\""], ["proof (prove)\nusing this:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        \\<lbrakk>(WHILE b DO c, s) \\<Rightarrow> p \\<Down> t;\n         Q t < \\<infinity>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n  Q t < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "from b w"], ["proof (chain)\npicking this:\n  bval b s\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t", "obtain p1 p2 t1 where c: \"(c, s) \\<Rightarrow> p1 \\<Down> t1\" and w': \"(WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t\" and sum: \"1 + p1 + p2 = p\""], ["proof (prove)\nusing this:\n  bval b s\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n\ngoal (1 subgoal):\n 1. (\\<And>p1 t1 p2.\n        \\<lbrakk>(c, s) \\<Rightarrow> p1 \\<Down> t1;\n         (WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t;\n         1 + p1 + p2 = p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> p1 \\<Down> t1\n  (WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t\n  1 + p1 + p2 = p\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "have g: \"\\<exists>ta p. (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> ta \\<and> Q ta < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ta p.\n       (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> ta \\<and>\n       Q ta < \\<infinity>", "apply(rule exI[where x=\"t\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>", "apply(rule exI[where x=\"p2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t \\<and> Q t < \\<infinity>", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. (WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t\n 2. Q t < \\<infinity>", "apply fact+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>ta p.\n     (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> ta \\<and> Q ta < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "have h: \"\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> (if \\<exists>ta p. (WHILE b DO c, t) \\<Rightarrow> p \\<Down> ta \\<and> Q ta < \\<infinity> then enat (THE p. Ex (big_step_t (WHILE b DO c, t) p)) + Q (THE ta. \\<exists>p. (WHILE b DO c, t) \\<Rightarrow> p \\<Down> ta) else \\<infinity>) < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       (if \\<exists>ta p.\n              (WHILE b DO c, t) \\<Rightarrow> p \\<Down> ta \\<and>\n              Q ta < \\<infinity>\n        then enat (\\<down>\\<^sub>t (WHILE b DO c, t)) +\n             Q (\\<down>\\<^sub>s (WHILE b DO c, t))\n        else \\<infinity>)\n       < \\<infinity>", "apply(rule exI[where x=\"t1\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (c, s) \\<Rightarrow> p \\<Down> t1 \\<and>\n       (if \\<exists>ta p.\n              (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> ta \\<and>\n              Q ta < \\<infinity>\n        then enat (\\<down>\\<^sub>t (WHILE b DO c, t1)) +\n             Q (\\<down>\\<^sub>s (WHILE b DO c, t1))\n        else \\<infinity>)\n       < \\<infinity>", "apply(rule exI[where x=\"p1\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, s) \\<Rightarrow> p1 \\<Down> t1 \\<and>\n    (if \\<exists>ta p.\n           (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> ta \\<and>\n           Q ta < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, t1)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, t1))\n     else \\<infinity>)\n    < \\<infinity>", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. (c, s) \\<Rightarrow> p1 \\<Down> t1\n 2. (if \\<exists>ta p.\n           (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> ta \\<and>\n           Q ta < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, t1)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, t1))\n     else \\<infinity>)\n    < \\<infinity>", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>ta p.\n           (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> ta \\<and>\n           Q ta < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, t1)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, t1))\n     else \\<infinity>)\n    < \\<infinity>", "apply(simp only: g if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (WHILE b DO c, t1)) +\n    Q (\\<down>\\<^sub>s (WHILE b DO c, t1))\n    < \\<infinity>", "using   bigstepT_the_state bigstepT_the_cost w' q"], ["proof (prove)\nusing this:\n  (?c, ?s) \\<Rightarrow> ?t \\<Down> ?s' \\<Longrightarrow>\n  \\<down>\\<^sub>s (?c, ?s) = ?s'\n  (?c, ?s) \\<Rightarrow> ?t \\<Down> ?s' \\<Longrightarrow>\n  \\<down>\\<^sub>t (?c, ?s) = ?t\n  (WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t\n  Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (WHILE b DO c, t1)) +\n    Q (\\<down>\\<^sub>s (WHILE b DO c, t1))\n    < \\<infinity>", "by(auto)"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     (if \\<exists>ta p.\n            (WHILE b DO c, t) \\<Rightarrow> p \\<Down> ta \\<and>\n            Q ta < \\<infinity>\n      then enat (\\<down>\\<^sub>t (WHILE b DO c, t)) +\n           Q (\\<down>\\<^sub>s (WHILE b DO c, t))\n      else \\<infinity>)\n     < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "have \"wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 = enat p + Q t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 = enat p + Q t", "unfolding wp2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           (if \\<exists>ta p.\n                  (WHILE b DO c, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                  Q ta < \\<infinity>\n            then enat (\\<down>\\<^sub>t (WHILE b DO c, t)) +\n                 Q (\\<down>\\<^sub>s (WHILE b DO c, t))\n            else \\<infinity>)\n           < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          (if \\<exists>t p.\n                 (WHILE b DO c,\n                  \\<down>\\<^sub>s (c, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                 Q t < \\<infinity>\n           then enat\n                 (\\<down>\\<^sub>t (WHILE b DO c, \\<down>\\<^sub>s (c, s))) +\n                Q (\\<down>\\<^sub>s (WHILE b DO c, \\<down>\\<^sub>s (c, s)))\n           else \\<infinity>)\n     else \\<infinity>) +\n    1 =\n    enat p + Q t", "apply(simp only: h if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (c, s)) +\n    (if \\<exists>t p.\n           (WHILE b DO c,\n            \\<down>\\<^sub>s (c, s)) \\<Rightarrow> p \\<Down> t \\<and>\n           Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, \\<down>\\<^sub>s (c, s))) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, \\<down>\\<^sub>s (c, s)))\n     else \\<infinity>) +\n    1 =\n    enat p + Q t", "apply(simp only: bigstepT_the_state[OF c] bigstepT_the_cost[OF c] g if_True bigstepT_the_state[OF w'] bigstepT_the_cost[OF w'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat p1 + (enat p2 + Q t) + 1 = enat p + Q t", "using sum"], ["proof (prove)\nusing this:\n  1 + p1 + p2 = p\n\ngoal (1 subgoal):\n 1. enat p1 + (enat p2 + Q t) + 1 = enat p + Q t", "by (metis One_nat_def ab_semigroup_add_class.add_ac(1) add.commute add.right_neutral eSuc_enat plus_1_eSuc(2) plus_enat_simps(1))"], ["proof (state)\nthis:\n  wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 = enat p + Q t\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "also"], ["proof (state)\nthis:\n  wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 = enat p + Q t\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "have \"\\<dots> = wp\\<^sub>2 (WHILE b DO c) Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat p + Q t = wp\\<^sub>2 (WHILE b DO c) Q s", "unfolding wp2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat p + Q t =\n    (if \\<exists>t p.\n           (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, s))\n     else \\<infinity>)", "apply(simp only: True if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat p + Q t =\n    enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n    Q (\\<down>\\<^sub>s (WHILE b DO c, s))", "using bigstepT_the_state bigstepT_the_cost w"], ["proof (prove)\nusing this:\n  (?c, ?s) \\<Rightarrow> ?t \\<Down> ?s' \\<Longrightarrow>\n  \\<down>\\<^sub>s (?c, ?s) = ?s'\n  (?c, ?s) \\<Rightarrow> ?t \\<Down> ?s' \\<Longrightarrow>\n  \\<down>\\<^sub>t (?c, ?s) = ?t\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n\ngoal (1 subgoal):\n 1. enat p + Q t =\n    enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n    Q (\\<down>\\<^sub>s (WHILE b DO c, s))", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  enat p + Q t = wp\\<^sub>2 (WHILE b DO c) Q s\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "finally"], ["proof (chain)\npicking this:\n  wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n  wp\\<^sub>2 (WHILE b DO c) Q s", "show ?thesis"], ["proof (prove)\nusing this:\n  wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n  wp\\<^sub>2 (WHILE b DO c) Q s\n\ngoal (1 subgoal):\n 1. wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "by simp"], ["proof (state)\nthis:\n  wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n  \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "case False"], ["proof (state)\nthis:\n  \\<nexists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "have \"wp\\<^sub>2 (WHILE b DO c) Q s = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>2 (WHILE b DO c) Q s = \\<infinity>", "unfolding wp2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, s))\n     else \\<infinity>) =\n    \\<infinity>", "apply(simp only: False if_False)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  wp\\<^sub>2 (WHILE b DO c) Q s = \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "then"], ["proof (chain)\npicking this:\n  wp\\<^sub>2 (WHILE b DO c) Q s = \\<infinity>", "show ?thesis"], ["proof (prove)\nusing this:\n  wp\\<^sub>2 (WHILE b DO c) Q s = \\<infinity>\n\ngoal (1 subgoal):\n 1. wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "by auto"], ["proof (state)\nthis:\n  wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1\n  \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assumes b: \"bval b s\"\nshows wp2WhileTrue': \"wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s  + 1 = wp\\<^sub>2 (WHILE b DO c) Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "proof (cases \"\\<exists>p t. (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<not> \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "case True"], ["proof (state)\nthis:\n  \\<down> (WHILE b DO c, s)\n\ngoal (2 subgoals):\n 1. \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<not> \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "then"], ["proof (chain)\npicking this:\n  \\<down> (WHILE b DO c, s)", "obtain t p where w: \"(WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\""], ["proof (prove)\nusing this:\n  \\<down> (WHILE b DO c, s)\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n\ngoal (2 subgoals):\n 1. \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<not> \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "from b w"], ["proof (chain)\npicking this:\n  bval b s\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t", "obtain p1 p2 t1 where c: \"(c, s) \\<Rightarrow> p1 \\<Down> t1\" and w': \"(WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t\" and sum: \"1 + p1 + p2 = p\""], ["proof (prove)\nusing this:\n  bval b s\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n\ngoal (1 subgoal):\n 1. (\\<And>p1 t1 p2.\n        \\<lbrakk>(c, s) \\<Rightarrow> p1 \\<Down> t1;\n         (WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t;\n         1 + p1 + p2 = p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> p1 \\<Down> t1\n  (WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t\n  1 + p1 + p2 = p\n\ngoal (2 subgoals):\n 1. \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<not> \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "then"], ["proof (chain)\npicking this:\n  (c, s) \\<Rightarrow> p1 \\<Down> t1\n  (WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t\n  1 + p1 + p2 = p", "have z: \"\\<down> (c, s)\" and z2: \"\\<down> (WHILE b DO c, t1)\""], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> p1 \\<Down> t1\n  (WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t\n  1 + p1 + p2 = p\n\ngoal (1 subgoal):\n 1. \\<down> (c, s) &&& \\<down> (WHILE b DO c, t1)", "by auto"], ["proof (state)\nthis:\n  \\<down> (c, s)\n  \\<down> (WHILE b DO c, t1)\n\ngoal (2 subgoals):\n 1. \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<not> \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "have \"wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 = enat p + Q t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 = enat p + Q t", "unfolding wp2_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<down> (c, s)\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          (if \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s))\n           then enat\n                 (\\<down>\\<^sub>t (WHILE b DO c, \\<down>\\<^sub>s (c, s))) +\n                Q (\\<down>\\<^sub>s (WHILE b DO c, \\<down>\\<^sub>s (c, s)))\n           else \\<infinity>)\n     else \\<infinity>) +\n    1 =\n    enat p + Q t", "apply(simp only: z if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (c, s)) +\n    (if \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s))\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, \\<down>\\<^sub>s (c, s))) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, \\<down>\\<^sub>s (c, s)))\n     else \\<infinity>) +\n    1 =\n    enat p + Q t", "apply(simp only: bigstepT_the_state[OF c] bigstepT_the_cost[OF c] z2 if_True bigstepT_the_state[OF w'] bigstepT_the_cost[OF w'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat p1 + (enat p2 + Q t) + 1 = enat p + Q t", "using sum"], ["proof (prove)\nusing this:\n  1 + p1 + p2 = p\n\ngoal (1 subgoal):\n 1. enat p1 + (enat p2 + Q t) + 1 = enat p + Q t", "by (metis One_nat_def ab_semigroup_add_class.add_ac(1) add.commute add.right_neutral eSuc_enat plus_1_eSuc(2) plus_enat_simps(1))"], ["proof (state)\nthis:\n  wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 = enat p + Q t\n\ngoal (2 subgoals):\n 1. \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<not> \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "also"], ["proof (state)\nthis:\n  wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 = enat p + Q t\n\ngoal (2 subgoals):\n 1. \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<not> \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "have \"\\<dots> = wp\\<^sub>2 (WHILE b DO c) Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat p + Q t = wp\\<^sub>2 (WHILE b DO c) Q s", "unfolding wp2_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat p + Q t =\n    (if \\<down> (WHILE b DO c, s)\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, s))\n     else \\<infinity>)", "apply(simp only: True if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat p + Q t =\n    enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n    Q (\\<down>\\<^sub>s (WHILE b DO c, s))", "using bigstepT_the_state bigstepT_the_cost w"], ["proof (prove)\nusing this:\n  (?c, ?s) \\<Rightarrow> ?t \\<Down> ?s' \\<Longrightarrow>\n  \\<down>\\<^sub>s (?c, ?s) = ?s'\n  (?c, ?s) \\<Rightarrow> ?t \\<Down> ?s' \\<Longrightarrow>\n  \\<down>\\<^sub>t (?c, ?s) = ?t\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n\ngoal (1 subgoal):\n 1. enat p + Q t =\n    enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n    Q (\\<down>\\<^sub>s (WHILE b DO c, s))", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  enat p + Q t = wp\\<^sub>2 (WHILE b DO c) Q s\n\ngoal (2 subgoals):\n 1. \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<not> \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "finally"], ["proof (chain)\npicking this:\n  wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n  wp\\<^sub>2 (WHILE b DO c) Q s", "show ?thesis"], ["proof (prove)\nusing this:\n  wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n  wp\\<^sub>2 (WHILE b DO c) Q s\n\ngoal (1 subgoal):\n 1. wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "by simp"], ["proof (state)\nthis:\n  wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n  wp\\<^sub>2 (WHILE b DO c) Q s\n\ngoal (1 subgoal):\n 1. \\<not> \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "case False"], ["proof (state)\nthis:\n  \\<not> \\<down> (WHILE b DO c, s)\n\ngoal (1 subgoal):\n 1. \\<not> \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "have \"\\<not> (\\<down> (WHILE b DO c, \\<down>\\<^sub>s(c,s)) \\<and> \\<down> (c, s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and>\n            \\<down> (c, s))", "proof (rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and>\n    \\<down> (c, s) \\<Longrightarrow>\n    False", "assume P: \"\\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and> \\<down> (c, s)\""], ["proof (state)\nthis:\n  \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and> \\<down> (c, s)\n\ngoal (1 subgoal):\n 1. \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and>\n    \\<down> (c, s) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and> \\<down> (c, s)", "obtain t s' where A: \"(c,s) \\<Rightarrow> t \\<Down> s'\""], ["proof (prove)\nusing this:\n  \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and> \\<down> (c, s)\n\ngoal (1 subgoal):\n 1. (\\<And>t s'.\n        (c, s) \\<Rightarrow> t \\<Down> s' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> t \\<Down> s'\n\ngoal (1 subgoal):\n 1. \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and>\n    \\<down> (c, s) \\<Longrightarrow>\n    False", "with A P"], ["proof (chain)\npicking this:\n  (c, s) \\<Rightarrow> t \\<Down> s'\n  \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and> \\<down> (c, s)\n  (c, s) \\<Rightarrow> t \\<Down> s'", "have \"\\<down> (WHILE b DO c, s')\""], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> t \\<Down> s'\n  \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and> \\<down> (c, s)\n  (c, s) \\<Rightarrow> t \\<Down> s'\n\ngoal (1 subgoal):\n 1. \\<down> (WHILE b DO c, s')", "using bigstepT_the_state"], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> t \\<Down> s'\n  \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and> \\<down> (c, s)\n  (c, s) \\<Rightarrow> t \\<Down> s'\n  (?c, ?s) \\<Rightarrow> ?t \\<Down> ?s' \\<Longrightarrow>\n  \\<down>\\<^sub>s (?c, ?s) = ?s'\n\ngoal (1 subgoal):\n 1. \\<down> (WHILE b DO c, s')", "by auto"], ["proof (state)\nthis:\n  \\<down> (WHILE b DO c, s')\n\ngoal (1 subgoal):\n 1. \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and>\n    \\<down> (c, s) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<down> (WHILE b DO c, s')", "obtain t' s'' where B: \"(WHILE b DO c,s') \\<Rightarrow> t' \\<Down> s''\""], ["proof (prove)\nusing this:\n  \\<down> (WHILE b DO c, s')\n\ngoal (1 subgoal):\n 1. (\\<And>t' s''.\n        (WHILE b DO c, s') \\<Rightarrow> t' \\<Down> s'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (WHILE b DO c, s') \\<Rightarrow> t' \\<Down> s''\n\ngoal (1 subgoal):\n 1. \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and>\n    \\<down> (c, s) \\<Longrightarrow>\n    False", "have \"(WHILE b DO c, s) \\<Rightarrow> 1+t+t' \\<Down> s''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (WHILE b DO c, s) \\<Rightarrow> 1 + t + t' \\<Down> s''", "apply(rule WhileTrue)"], ["proof (prove)\ngoal (4 subgoals):\n 1. bval b s\n 2. (c, s) \\<Rightarrow> ?x \\<Down> ?s2.0\n 3. (WHILE b DO c, ?s2.0) \\<Rightarrow> ?y \\<Down> s''\n 4. 1 + ?x + ?y = 1 + t + t'", "using b A B"], ["proof (prove)\nusing this:\n  bval b s\n  (c, s) \\<Rightarrow> t \\<Down> s'\n  (WHILE b DO c, s') \\<Rightarrow> t' \\<Down> s''\n\ngoal (4 subgoals):\n 1. bval b s\n 2. (c, s) \\<Rightarrow> ?x \\<Down> ?s2.0\n 3. (WHILE b DO c, ?s2.0) \\<Rightarrow> ?y \\<Down> s''\n 4. 1 + ?x + ?y = 1 + t + t'", "by auto"], ["proof (state)\nthis:\n  (WHILE b DO c, s) \\<Rightarrow> 1 + t + t' \\<Down> s''\n\ngoal (1 subgoal):\n 1. \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and>\n    \\<down> (c, s) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  (WHILE b DO c, s) \\<Rightarrow> 1 + t + t' \\<Down> s''", "have \"\\<down> (WHILE b DO c, s)\""], ["proof (prove)\nusing this:\n  (WHILE b DO c, s) \\<Rightarrow> 1 + t + t' \\<Down> s''\n\ngoal (1 subgoal):\n 1. \\<down> (WHILE b DO c, s)", "by auto"], ["proof (state)\nthis:\n  \\<down> (WHILE b DO c, s)\n\ngoal (1 subgoal):\n 1. \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and>\n    \\<down> (c, s) \\<Longrightarrow>\n    False", "thus \"False\""], ["proof (prove)\nusing this:\n  \\<down> (WHILE b DO c, s)\n\ngoal (1 subgoal):\n 1. False", "using False"], ["proof (prove)\nusing this:\n  \\<down> (WHILE b DO c, s)\n  \\<not> \\<down> (WHILE b DO c, s)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> (\\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and>\n          \\<down> (c, s))\n\ngoal (1 subgoal):\n 1. \\<not> \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and>\n          \\<down> (c, s))", "have \"\\<not>\\<down> (WHILE b DO c, \\<down>\\<^sub>s(c,s)) \\<or> \\<not>\\<down> (c, s)\""], ["proof (prove)\nusing this:\n  \\<not> (\\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<and>\n          \\<down> (c, s))\n\ngoal (1 subgoal):\n 1. \\<not> \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<or>\n    \\<not> \\<down> (c, s)", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<or>\n  \\<not> \\<down> (c, s)\n\ngoal (1 subgoal):\n 1. \\<not> \\<down> (WHILE b DO c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "then"], ["proof (chain)\npicking this:\n  \\<not> \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<or>\n  \\<not> \\<down> (c, s)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<or>\n  \\<not> \\<down> (c, s)\n\ngoal (1 subgoal):\n 1. wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<not> \\<down> (c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "unfolding wp2_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<Longrightarrow>\n    (if \\<down> (c, s)\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          (if \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s))\n           then enat\n                 (\\<down>\\<^sub>t (WHILE b DO c, \\<down>\\<^sub>s (c, s))) +\n                Q (\\<down>\\<^sub>s (WHILE b DO c, \\<down>\\<^sub>s (c, s)))\n           else \\<infinity>)\n     else \\<infinity>) +\n    1 =\n    (if \\<down> (WHILE b DO c, s)\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, s))\n     else \\<infinity>)", "apply(simp only: if_False False)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s)) \\<Longrightarrow>\n    (if \\<down> (c, s) then enat (\\<down>\\<^sub>t (c, s)) + \\<infinity>\n     else \\<infinity>) +\n    1 =\n    \\<infinity>", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<down> (c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<down> (c, s) \\<Longrightarrow>\n    wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "unfolding wp2_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<down> (c, s) \\<Longrightarrow>\n    (if \\<down> (c, s)\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          (if \\<down> (WHILE b DO c, \\<down>\\<^sub>s (c, s))\n           then enat\n                 (\\<down>\\<^sub>t (WHILE b DO c, \\<down>\\<^sub>s (c, s))) +\n                Q (\\<down>\\<^sub>s (WHILE b DO c, \\<down>\\<^sub>s (c, s)))\n           else \\<infinity>)\n     else \\<infinity>) +\n    1 =\n    (if \\<down> (WHILE b DO c, s)\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, s))\n     else \\<infinity>)", "apply(simp only: if_False False)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<down> (c, s) \\<Longrightarrow> \\<infinity> + 1 = \\<infinity>", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s + 1 =\n  wp\\<^sub>2 (WHILE b DO c) Q s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assumes b: \"~ bval b s\"\n  shows wp2WhileFalse: \" Q s  + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "proof (cases \"\\<exists>t p. (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "case True"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "with b"], ["proof (chain)\npicking this:\n  \\<not> bval b s\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>", "obtain t p where w: \"(WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\" and \"Q t < \\<infinity>\""], ["proof (prove)\nusing this:\n  \\<not> bval b s\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        \\<lbrakk>(WHILE b DO c, s) \\<Rightarrow> p \\<Down> t;\n         Q t < \\<infinity>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n  Q t < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "with b"], ["proof (chain)\npicking this:\n  \\<not> bval b s\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n  Q t < \\<infinity>", "have c: \"s=t\" \"p=Suc 0\""], ["proof (prove)\nusing this:\n  \\<not> bval b s\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n  Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. s = t &&& p = Suc 0", "by auto"], ["proof (state)\nthis:\n  s = t\n  p = Suc 0\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "have \" wp\\<^sub>2 (WHILE b DO c) Q s =  Q s  + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>2 (WHILE b DO c) Q s = Q s + 1", "unfolding wp2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, s))\n     else \\<infinity>) =\n    Q s + 1", "apply(simp only: True if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n    Q (\\<down>\\<^sub>s (WHILE b DO c, s)) =\n    Q s + 1", "using w c bigstepT_the_cost bigstepT_the_state"], ["proof (prove)\nusing this:\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n  s = t\n  p = Suc 0\n  (?c, ?s) \\<Rightarrow> ?t \\<Down> ?s' \\<Longrightarrow>\n  \\<down>\\<^sub>t (?c, ?s) = ?t\n  (?c, ?s) \\<Rightarrow> ?t \\<Down> ?s' \\<Longrightarrow>\n  \\<down>\\<^sub>s (?c, ?s) = ?s'\n\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n    Q (\\<down>\\<^sub>s (WHILE b DO c, s)) =\n    Q s + 1", "by(auto simp add: one_enat_def)"], ["proof (state)\nthis:\n  wp\\<^sub>2 (WHILE b DO c) Q s = Q s + 1\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "then"], ["proof (chain)\npicking this:\n  wp\\<^sub>2 (WHILE b DO c) Q s = Q s + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  wp\\<^sub>2 (WHILE b DO c) Q s = Q s + 1\n\ngoal (1 subgoal):\n 1. Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "by auto"], ["proof (state)\nthis:\n  Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "case False"], ["proof (state)\nthis:\n  \\<nexists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "have \"wp\\<^sub>2 (WHILE b DO c) Q s = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>2 (WHILE b DO c) Q s = \\<infinity>", "unfolding wp2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, s))\n     else \\<infinity>) =\n    \\<infinity>", "apply(simp only: False if_False)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  wp\\<^sub>2 (WHILE b DO c) Q s = \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "then"], ["proof (chain)\npicking this:\n  wp\\<^sub>2 (WHILE b DO c) Q s = \\<infinity>", "show ?thesis"], ["proof (prove)\nusing this:\n  wp\\<^sub>2 (WHILE b DO c) Q s = \\<infinity>\n\ngoal (1 subgoal):\n 1. Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "by auto"], ["proof (state)\nthis:\n  Q s + 1 \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma thet_WhileFalse: \"~ bval b s \\<Longrightarrow> \\<down>\\<^sub>t (WHILE b DO c, s) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow> \\<down>\\<^sub>t (WHILE b DO c, s) = 1", "by auto"], ["", "lemma thes_WhileFalse: \"~ bval b s \\<Longrightarrow> \\<down>\\<^sub>s (WHILE b DO c, s) = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow> \\<down>\\<^sub>s (WHILE b DO c, s) = s", "by auto"], ["", "lemma assumes b: \"~ bval b s\"\n  shows wp2WhileFalse': \"Q s  + 1 = wp\\<^sub>2 (WHILE b DO c) Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q s + 1 = wp\\<^sub>2 (WHILE b DO c) Q s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Q s + 1 = wp\\<^sub>2 (WHILE b DO c) Q s", "from b"], ["proof (chain)\npicking this:\n  \\<not> bval b s", "have T: \"\\<down> (WHILE b DO c, s)\""], ["proof (prove)\nusing this:\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. \\<down> (WHILE b DO c, s)", "by auto"], ["proof (state)\nthis:\n  \\<down> (WHILE b DO c, s)\n\ngoal (1 subgoal):\n 1. Q s + 1 = wp\\<^sub>2 (WHILE b DO c) Q s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Q s + 1 = wp\\<^sub>2 (WHILE b DO c) Q s", "unfolding wp2_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. Q s + 1 =\n    (if \\<down> (WHILE b DO c, s)\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, s))\n     else \\<infinity>)", "using b"], ["proof (prove)\nusing this:\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. Q s + 1 =\n    (if \\<down> (WHILE b DO c, s)\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, s))\n     else \\<infinity>)", "apply(simp only: T if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    Q s + 1 =\n    enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n    Q (\\<down>\\<^sub>s (WHILE b DO c, s))", "by(simp add: thet_WhileFalse thes_WhileFalse one_enat_def)"], ["proof (state)\nthis:\n  Q s + 1 = wp\\<^sub>2 (WHILE b DO c) Q s\n\ngoal:\nNo subgoals!", "qed"], ["", "(* note that \\<le> is sufficient for the completness proof *)"], ["", "lemma wp2While: \"(if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s else Q s) + 1 = wp\\<^sub>2 (WHILE b DO c) Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n     else Q s) +\n    1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "apply(cases \"bval b s\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n     else Q s) +\n    1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<not> bval b s \\<Longrightarrow>\n    (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n     else Q s) +\n    1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "using wp2WhileTrue'"], ["proof (prove)\nusing this:\n  bval ?b ?s \\<Longrightarrow>\n  wp\\<^sub>2 ?c (wp\\<^sub>2 (WHILE ?b DO ?c) ?Q) ?s + 1 =\n  wp\\<^sub>2 (WHILE ?b DO ?c) ?Q ?s\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n     else Q s) +\n    1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<not> bval b s \\<Longrightarrow>\n    (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n     else Q s) +\n    1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n     else Q s) +\n    1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "using wp2WhileFalse'"], ["proof (prove)\nusing this:\n  \\<not> bval ?b ?s \\<Longrightarrow>\n  ?Q ?s + 1 = wp\\<^sub>2 (WHILE ?b DO ?c) ?Q ?s\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n     else Q s) +\n    1 =\n    wp\\<^sub>2 (WHILE b DO c) Q s", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma assumes \"\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}\"\n  shows  \"\\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE b DO c) Q} WHILE b DO c {Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE b DO c) Q} WHILE b DO c {Q}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE b DO c) Q} WHILE b DO c {Q}", "let ?I = \"%s. (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s else Q s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE b DO c) Q} WHILE b DO c {Q}", "from assms[of \"wp\\<^sub>2 (WHILE b DO c) Q\"]"], ["proof (chain)\npicking this:\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)} c\n                       {wp\\<^sub>2 (WHILE b DO c) Q}", "have A: \" \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)} c {wp\\<^sub>2 (WHILE b DO c) Q}\""], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)} c\n                       {wp\\<^sub>2 (WHILE b DO c) Q}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)} c\n                         {wp\\<^sub>2 (WHILE b DO c) Q}", "."], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)} c\n                       {wp\\<^sub>2 (WHILE b DO c) Q}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE b DO c) Q} WHILE b DO c {Q}", "have B: \"\\<turnstile>\\<^sub>2 {\\<lambda>s. (?I s) + \\<up> (bval b s)} c {\\<lambda>t. (?I t) + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             (if bval b s\n                              then wp\\<^sub>2 c\n                                    (wp\\<^sub>2 (WHILE b DO c) Q) s\n                              else Q s) +\n                             \\<up> (bval b s)}\n                         c {\\<lambda>t.\n                               (if bval b t\n                                then wp\\<^sub>2 c\n(wp\\<^sub>2 (WHILE b DO c) Q) t\n                                else Q t) +\n                               1}", "apply(rule conseq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>2 {?P} c {?Q}\n 2. \\<And>s.\n       ?P s\n       \\<le> (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (bval b s)\n 3. \\<And>s.\n       (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> ?Q s", "apply(rule A)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n       \\<le> (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (bval b s)\n 2. \\<And>s.\n       (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "using wp2While"], ["proof (prove)\nusing this:\n  (if bval ?b ?s then wp\\<^sub>2 ?c (wp\\<^sub>2 (WHILE ?b DO ?c) ?Q) ?s\n   else ?Q ?s) +\n  1 =\n  wp\\<^sub>2 (WHILE ?b DO ?c) ?Q ?s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> wp\\<^sub>2 (WHILE b DO c) Q s", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           \\<up> (bval b s)}\n                       c {\\<lambda>t.\n                             (if bval b t\n                              then wp\\<^sub>2 c\n                                    (wp\\<^sub>2 (WHILE b DO c) Q) t\n                              else Q t) +\n                             1}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE b DO c) Q} WHILE b DO c {Q}", "from hoare2.While[where I=\"?I\"]"], ["proof (chain)\npicking this:\n  \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           \\<up> (bval ?b s)}\n                       ?c {\\<lambda>t.\n                              (if bval b t\n                               then wp\\<^sub>2 c\n                                     (wp\\<^sub>2 (WHILE b DO c) Q) t\n                               else Q t) +\n                              1} \\<Longrightarrow>\n  \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           1}\n                       WHILE ?b DO ?c\n                       {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           \\<up> (\\<not> bval ?b s)}", "have C: \"\\<turnstile>\\<^sub>2 {\\<lambda>s. (?I s) + \\<up> (bval b s)} c {\\<lambda>t. (?I t) + 1} \\<Longrightarrow>\n          \\<turnstile>\\<^sub>2 {\\<lambda>s. (?I s) + 1} WHILE b DO c {\\<lambda>s. (?I s) + \\<up> (\\<not> bval b s)}\""], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           \\<up> (bval ?b s)}\n                       ?c {\\<lambda>t.\n                              (if bval b t\n                               then wp\\<^sub>2 c\n                                     (wp\\<^sub>2 (WHILE b DO c) Q) t\n                               else Q t) +\n                              1} \\<Longrightarrow>\n  \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           1}\n                       WHILE ?b DO ?c\n                       {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           \\<up> (\\<not> bval ?b s)}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             (if bval b s\n                              then wp\\<^sub>2 c\n                                    (wp\\<^sub>2 (WHILE b DO c) Q) s\n                              else Q s) +\n                             \\<up> (bval b s)}\n                         c {\\<lambda>t.\n                               (if bval b t\n                                then wp\\<^sub>2 c\n(wp\\<^sub>2 (WHILE b DO c) Q) t\n                                else Q t) +\n                               1} \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             (if bval b s\n                              then wp\\<^sub>2 c\n                                    (wp\\<^sub>2 (WHILE b DO c) Q) s\n                              else Q s) +\n                             1}\n                         WHILE b DO c\n                         {\\<lambda>s.\n                             (if bval b s\n                              then wp\\<^sub>2 c\n                                    (wp\\<^sub>2 (WHILE b DO c) Q) s\n                              else Q s) +\n                             \\<up> (\\<not> bval b s)}", "by simp"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           \\<up> (bval b s)}\n                       c {\\<lambda>t.\n                             (if bval b t\n                              then wp\\<^sub>2 c\n                                    (wp\\<^sub>2 (WHILE b DO c) Q) t\n                              else Q t) +\n                             1} \\<Longrightarrow>\n  \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           1}\n                       WHILE b DO c\n                       {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           \\<up> (\\<not> bval b s)}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE b DO c) Q} WHILE b DO c {Q}", "from C[OF B]"], ["proof (chain)\npicking this:\n  \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           1}\n                       WHILE b DO c\n                       {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           \\<up> (\\<not> bval b s)}", "have D: \"\\<turnstile>\\<^sub>2 {\\<lambda>s. (?I s) + 1} WHILE b DO c {\\<lambda>s. (?I s) + \\<up> (\\<not> bval b s)}\""], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           1}\n                       WHILE b DO c\n                       {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           \\<up> (\\<not> bval b s)}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             (if bval b s\n                              then wp\\<^sub>2 c\n                                    (wp\\<^sub>2 (WHILE b DO c) Q) s\n                              else Q s) +\n                             1}\n                         WHILE b DO c\n                         {\\<lambda>s.\n                             (if bval b s\n                              then wp\\<^sub>2 c\n                                    (wp\\<^sub>2 (WHILE b DO c) Q) s\n                              else Q s) +\n                             \\<up> (\\<not> bval b s)}", "."], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           1}\n                       WHILE b DO c\n                       {\\<lambda>s.\n                           (if bval b s\n                            then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q)\n                                  s\n                            else Q s) +\n                           \\<up> (\\<not> bval b s)}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE b DO c) Q} WHILE b DO c {Q}", "show \"\\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE b DO c) Q} WHILE b DO c {Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE b DO c) Q} WHILE b DO c {Q}", "apply(rule conseq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>2 {?P} WHILE b DO c {?Q}\n 2. \\<And>s. ?P s \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 3. \\<And>s. Q s \\<le> ?Q s", "apply(rule D)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<And>s.\n       Q s\n       \\<le> (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)", "using wp2While"], ["proof (prove)\nusing this:\n  (if bval ?b ?s then wp\\<^sub>2 ?c (wp\\<^sub>2 (WHILE ?b DO ?c) ?Q) ?s\n   else ?Q ?s) +\n  1 =\n  wp\\<^sub>2 (WHILE ?b DO ?c) ?Q ?s\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 2. \\<And>s.\n       Q s\n       \\<le> (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       Q s\n       \\<le> (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE b DO c) Q} WHILE b DO c {Q}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wp2_is_pre: \"\\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c { Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}", "proof (induction c arbitrary: Q)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 SKIP Q} SKIP {Q}\n 2. \\<And>x1 x2 Q.\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (x1 ::= x2) Q} x1 ::= x2 {Q}\n 3. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (c1;; c2) Q}\n        c1;; c2 {Q}\n 4. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2\n          (IF x1 THEN c1 ELSE c2) Q}\n        IF x1 THEN c1 ELSE c2 {Q}\n 5. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE x1 DO c) Q} WHILE x1 DO c {Q}", "case SKIP"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 SKIP Q} SKIP {Q}\n 2. \\<And>x1 x2 Q.\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (x1 ::= x2) Q} x1 ::= x2 {Q}\n 3. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (c1;; c2) Q}\n        c1;; c2 {Q}\n 4. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2\n          (IF x1 THEN c1 ELSE c2) Q}\n        IF x1 THEN c1 ELSE c2 {Q}\n 5. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE x1 DO c) Q} WHILE x1 DO c {Q}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 SKIP Q} SKIP {Q}", "by (auto intro: hoare2.Skip)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 SKIP Q} SKIP {Q}\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 Q.\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (x1 ::= x2) Q} x1 ::= x2 {Q}\n 2. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (c1;; c2) Q}\n        c1;; c2 {Q}\n 3. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2\n          (IF x1 THEN c1 ELSE c2) Q}\n        IF x1 THEN c1 ELSE c2 {Q}\n 4. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE x1 DO c) Q} WHILE x1 DO c {Q}", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 Q.\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (x1 ::= x2) Q} x1 ::= x2 {Q}\n 2. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (c1;; c2) Q}\n        c1;; c2 {Q}\n 3. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2\n          (IF x1 THEN c1 ELSE c2) Q}\n        IF x1 THEN c1 ELSE c2 {Q}\n 4. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE x1 DO c) Q} WHILE x1 DO c {Q}", "case Assign"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 Q.\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (x1 ::= x2) Q} x1 ::= x2 {Q}\n 2. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (c1;; c2) Q}\n        c1;; c2 {Q}\n 3. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2\n          (IF x1 THEN c1 ELSE c2) Q}\n        IF x1 THEN c1 ELSE c2 {Q}\n 4. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE x1 DO c) Q} WHILE x1 DO c {Q}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (x1_ ::= x2_) Q} x1_ ::= x2_ {Q}", "by (auto intro:hoare2.Assign)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (x1_ ::= x2_) Q} x1_ ::= x2_ {Q}\n\ngoal (3 subgoals):\n 1. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (c1;; c2) Q}\n        c1;; c2 {Q}\n 2. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2\n          (IF x1 THEN c1 ELSE c2) Q}\n        IF x1 THEN c1 ELSE c2 {Q}\n 3. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE x1 DO c) Q} WHILE x1 DO c {Q}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (c1;; c2) Q}\n        c1;; c2 {Q}\n 2. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2\n          (IF x1 THEN c1 ELSE c2) Q}\n        IF x1 THEN c1 ELSE c2 {Q}\n 3. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE x1 DO c) Q} WHILE x1 DO c {Q}", "case Seq"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1_ ?Q} c1_ {?Q}\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2_ ?Q} c2_ {?Q}\n\ngoal (3 subgoals):\n 1. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (c1;; c2) Q}\n        c1;; c2 {Q}\n 2. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2\n          (IF x1 THEN c1 ELSE c2) Q}\n        IF x1 THEN c1 ELSE c2 {Q}\n 3. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE x1 DO c) Q} WHILE x1 DO c {Q}", "thus ?case"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1_ ?Q} c1_ {?Q}\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2_ ?Q} c2_ {?Q}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (c1_;; c2_) Q} c1_;; c2_ {Q}", "by (auto intro:hoare2.Seq)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (c1_;; c2_) Q} c1_;; c2_ {Q}\n\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2\n          (IF x1 THEN c1 ELSE c2) Q}\n        IF x1 THEN c1 ELSE c2 {Q}\n 2. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE x1 DO c) Q} WHILE x1 DO c {Q}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2\n          (IF x1 THEN c1 ELSE c2) Q}\n        IF x1 THEN c1 ELSE c2 {Q}\n 2. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE x1 DO c) Q} WHILE x1 DO c {Q}", "case (If x1 c1 c2 Q)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 ?Q} c1 {?Q}\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 ?Q} c2 {?Q}\n\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2 {wp\\<^sub>2\n          (IF x1 THEN c1 ELSE c2) Q}\n        IF x1 THEN c1 ELSE c2 {Q}\n 2. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE x1 DO c) Q} WHILE x1 DO c {Q}", "thus ?case"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 ?Q} c1 {?Q}\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 ?Q} c2 {?Q}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (IF x1 THEN c1 ELSE c2) Q}\n                         IF x1 THEN c1 ELSE c2 {Q}", "apply (auto intro!: hoare2.If )"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n     \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2 {\\<lambda>s.\n         wp\\<^sub>2 (if bval x1 s then c1 else c2) Q s + \\<up> (bval x1 s)}\n     c1 {Q}\n 2. \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n     \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2 {\\<lambda>s.\n         wp\\<^sub>2 (if bval x1 s then c1 else c2) Q s +\n         \\<up> (\\<not> bval x1 s)}\n     c2 {Q}", "apply(rule hoare2.conseq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n     \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2 {?P5} c1 {?Q5}\n 2. \\<And>s.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> ?P5 s\n                         \\<le> wp\\<^sub>2 (if bval x1 s then c1 else c2) Q\n                                s +\n                               \\<up> (bval x1 s)\n 3. \\<And>s.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> Q s \\<le> ?Q5 s\n 4. \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n     \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2 {\\<lambda>s.\n         wp\\<^sub>2 (if bval x1 s then c1 else c2) Q s +\n         \\<up> (\\<not> bval x1 s)}\n     c2 {Q}", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n     \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2 {\\<lambda>s.\n         wp\\<^sub>2 (if bval x1 s then c1 else c2) Q s +\n         \\<up> (\\<not> bval x1 s)}\n     c2 {Q}", "apply(rule hoare2.conseq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n     \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2 {?P24} c2 {?Q24}\n 2. \\<And>s.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> ?P24 s\n                         \\<le> wp\\<^sub>2 (if bval x1 s then c1 else c2) Q\n                                s +\n                               \\<up> (\\<not> bval x1 s)\n 3. \\<And>s.\n       \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c1 Q} c1 {Q};\n        \\<And>Q. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> Q s \\<le> ?Q24 s", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (IF x1 THEN c1 ELSE c2) Q}\n                       IF x1 THEN c1 ELSE c2 {Q}\n\ngoal (1 subgoal):\n 1. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE x1 DO c) Q} WHILE x1 DO c {Q}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE x1 DO c) Q} WHILE x1 DO c {Q}", "case (While b c)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c ?Q} c {?Q}\n\ngoal (1 subgoal):\n 1. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2 {wp\\<^sub>2 c Q} c {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE x1 DO c) Q} WHILE x1 DO c {Q}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE b DO c) Q} WHILE b DO c {Q}", "apply(rule conseq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>2 {?P} WHILE b DO c {?Q}\n 2. \\<And>s. ?P s \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 3. \\<And>s. Q s \\<le> ?Q s", "apply(rule hoare2.While[where I=\"%s. (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s else Q s)\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>2 {\\<lambda>s.\n                             (if bval b s\n                              then wp\\<^sub>2 c\n                                    (wp\\<^sub>2 (WHILE b DO c) Q) s\n                              else Q s) +\n                             \\<up> (bval b s)}\n                         c {\\<lambda>t.\n                               (if bval b t\n                                then wp\\<^sub>2 c\n(wp\\<^sub>2 (WHILE b DO c) Q) t\n                                else Q t) +\n                               1}\n 2. \\<And>s.\n       (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 3. \\<And>s.\n       Q s\n       \\<le> (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)", "apply(rule conseq)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<turnstile>\\<^sub>2 {?P6} c {?Q6}\n 2. \\<And>s.\n       ?P6 s\n       \\<le> (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (bval b s)\n 3. \\<And>s.\n       (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> ?Q6 s\n 4. \\<And>s.\n       (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 5. \\<And>s.\n       Q s\n       \\<le> (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)", "apply(rule While[of \"wp\\<^sub>2 (WHILE b DO c) Q\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s.\n       wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n       \\<le> (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (bval b s)\n 2. \\<And>s.\n       (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 3. \\<And>s.\n       (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 4. \\<And>s.\n       Q s\n       \\<le> (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)", "using wp2While"], ["proof (prove)\nusing this:\n  (if bval ?b ?s then wp\\<^sub>2 ?c (wp\\<^sub>2 (WHILE ?b DO ?c) ?Q) ?s\n   else ?Q ?s) +\n  1 =\n  wp\\<^sub>2 (WHILE ?b DO ?c) ?Q ?s\n\ngoal (4 subgoals):\n 1. \\<And>s.\n       wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n       \\<le> (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (bval b s)\n 2. \\<And>s.\n       (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 3. \\<And>s.\n       (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> wp\\<^sub>2 (WHILE b DO c) Q s\n 4. \\<And>s.\n       Q s\n       \\<le> (if bval b s then wp\\<^sub>2 c (wp\\<^sub>2 (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)", "by auto"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2 {wp\\<^sub>2 (WHILE b DO c) Q} WHILE b DO c {Q}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wp2_is_weakestprePotential1: \"\\<Turnstile>\\<^sub>2 {P}c{Q} \\<Longrightarrow> (\\<forall>s. wp\\<^sub>2 c Q s \\<le> P s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2 {P} c {Q} \\<Longrightarrow>\n    \\<forall>s. wp\\<^sub>2 c Q s \\<le> P s", "apply(auto simp: hoare2_valid_def wp2_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s t p i.\n       \\<lbrakk>\\<forall>s.\n                   (\\<exists>i. P s = enat i) \\<longrightarrow>\n                   (\\<exists>t p.\n                       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + Q t \\<le> P s);\n        (c, s) \\<Rightarrow> p \\<Down> t; Q t = enat i\\<rbrakk>\n       \\<Longrightarrow> enat (\\<down>\\<^sub>t (c, s)) +\n                         Q (\\<down>\\<^sub>s (c, s))\n                         \\<le> P s\n 2. \\<And>s.\n       \\<lbrakk>\\<forall>s.\n                   (\\<exists>i. P s = enat i) \\<longrightarrow>\n                   (\\<exists>t p.\n                       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + Q t \\<le> P s);\n        \\<forall>t.\n           (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> P s = \\<infinity>", "proof (goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s t p i.\n       \\<lbrakk>\\<forall>s.\n                   (\\<exists>i. P s = enat i) \\<longrightarrow>\n                   (\\<exists>t p.\n                       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + Q t \\<le> P s);\n        (c, s) \\<Rightarrow> p \\<Down> t; Q t = enat i\\<rbrakk>\n       \\<Longrightarrow> enat (\\<down>\\<^sub>t (c, s)) +\n                         Q (\\<down>\\<^sub>s (c, s))\n                         \\<le> P s\n 2. \\<And>s.\n       \\<lbrakk>\\<forall>s.\n                   (\\<exists>i. P s = enat i) \\<longrightarrow>\n                   (\\<exists>t p.\n                       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + Q t \\<le> P s);\n        \\<forall>t.\n           (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> P s = \\<infinity>", "case (1 s t p i)"], ["proof (state)\nthis:\n  \\<forall>s.\n     (\\<exists>i. P s = enat i) \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> P s)\n  (c, s) \\<Rightarrow> p \\<Down> t\n  Q t = enat i\n\ngoal (2 subgoals):\n 1. \\<And>s t p i.\n       \\<lbrakk>\\<forall>s.\n                   (\\<exists>i. P s = enat i) \\<longrightarrow>\n                   (\\<exists>t p.\n                       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + Q t \\<le> P s);\n        (c, s) \\<Rightarrow> p \\<Down> t; Q t = enat i\\<rbrakk>\n       \\<Longrightarrow> enat (\\<down>\\<^sub>t (c, s)) +\n                         Q (\\<down>\\<^sub>s (c, s))\n                         \\<le> P s\n 2. \\<And>s.\n       \\<lbrakk>\\<forall>s.\n                   (\\<exists>i. P s = enat i) \\<longrightarrow>\n                   (\\<exists>t p.\n                       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + Q t \\<le> P s);\n        \\<forall>t.\n           (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> P s = \\<infinity>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s)) \\<le> P s", "proof(cases \"P s < \\<infinity>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s)) \\<le> P s\n 2. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s)) \\<le> P s", "case True"], ["proof (state)\nthis:\n  P s < \\<infinity>\n\ngoal (2 subgoals):\n 1. P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s)) \\<le> P s\n 2. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s)) \\<le> P s", "with 1(1)"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     (\\<exists>i. P s = enat i) \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> P s)\n  P s < \\<infinity>", "obtain t p' where i: \"(c, s) \\<Rightarrow> p' \\<Down> t\" and ii: \"enat p' + Q t \\<le> P s\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     (\\<exists>i. P s = enat i) \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> P s)\n  P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p' t.\n        \\<lbrakk>(c, s) \\<Rightarrow> p' \\<Down> t;\n         enat p' + Q t \\<le> P s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> p' \\<Down> t\n  enat p' + Q t \\<le> P s\n\ngoal (2 subgoals):\n 1. P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s)) \\<le> P s\n 2. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s)) \\<le> P s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s)) \\<le> P s", "apply(simp add: bigstepT_the_state[OF i] bigstepT_the_cost[OF i] ii)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s)) \\<le> P s\n\ngoal (1 subgoal):\n 1. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s)) \\<le> P s", "qed simp"], ["proof (state)\nthis:\n  enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s)) \\<le> P s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>\\<forall>s.\n                   (\\<exists>i. P s = enat i) \\<longrightarrow>\n                   (\\<exists>t p.\n                       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + Q t \\<le> P s);\n        \\<forall>t.\n           (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> P s = \\<infinity>", "qed force"], ["", "lemma wp2_is_weakestprePotential2: \"(\\<forall>s. wp\\<^sub>2 c Q s \\<le> P s) \\<Longrightarrow> \\<Turnstile>\\<^sub>2 {P}c{Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. wp\\<^sub>2 c Q s \\<le> P s \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2 {P} c {Q}", "apply(auto simp: hoare2_valid_def wp2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       \\<lbrakk>\\<forall>s.\n                   (if \\<exists>t.\n                          (\\<exists>p.\n                              (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n                          (\\<exists>i. Q t = enat i)\n                    then enat (\\<down>\\<^sub>t (c, s)) +\n                         Q (\\<down>\\<^sub>s (c, s))\n                    else \\<infinity>)\n                   \\<le> P s;\n        P s = enat i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t p.\n                            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                            enat p + Q t \\<le> enat i", "proof (goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       \\<lbrakk>\\<forall>s.\n                   (if \\<exists>t.\n                          (\\<exists>p.\n                              (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n                          (\\<exists>i. Q t = enat i)\n                    then enat (\\<down>\\<^sub>t (c, s)) +\n                         Q (\\<down>\\<^sub>s (c, s))\n                    else \\<infinity>)\n                   \\<le> P s;\n        P s = enat i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t p.\n                            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                            enat p + Q t \\<le> enat i", "case (1 s i)"], ["proof (state)\nthis:\n  \\<forall>s.\n     (if \\<exists>t.\n            (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n            (\\<exists>i. Q t = enat i)\n      then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n      else \\<infinity>)\n     \\<le> P s\n  P s = enat i\n\ngoal (1 subgoal):\n 1. \\<And>s i.\n       \\<lbrakk>\\<forall>s.\n                   (if \\<exists>t.\n                          (\\<exists>p.\n                              (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n                          (\\<exists>i. Q t = enat i)\n                    then enat (\\<down>\\<^sub>t (c, s)) +\n                         Q (\\<down>\\<^sub>s (c, s))\n                    else \\<infinity>)\n                   \\<le> P s;\n        P s = enat i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t p.\n                            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                            enat p + Q t \\<le> enat i", "then"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     (if \\<exists>t.\n            (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n            (\\<exists>i. Q t = enat i)\n      then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n      else \\<infinity>)\n     \\<le> P s\n  P s = enat i", "have A: \"(if \\<exists>t. (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and> (\\<exists>i. Q t = enat i) then enat (THE p. Ex (big_step_t (c, s) p)) + Q (THE t. \\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) else \\<infinity>) \\<le> P s\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     (if \\<exists>t.\n            (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n            (\\<exists>i. Q t = enat i)\n      then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n      else \\<infinity>)\n     \\<le> P s\n  P s = enat i\n\ngoal (1 subgoal):\n 1. (if \\<exists>t.\n           (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n           (\\<exists>i. Q t = enat i)\n     then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> P s", "by fast"], ["proof (state)\nthis:\n  (if \\<exists>t.\n         (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n         (\\<exists>i. Q t = enat i)\n   then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n   else \\<infinity>)\n  \\<le> P s\n\ngoal (1 subgoal):\n 1. \\<And>s i.\n       \\<lbrakk>\\<forall>s.\n                   (if \\<exists>t.\n                          (\\<exists>p.\n                              (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n                          (\\<exists>i. Q t = enat i)\n                    then enat (\\<down>\\<^sub>t (c, s)) +\n                         Q (\\<down>\\<^sub>s (c, s))\n                    else \\<infinity>)\n                   \\<le> P s;\n        P s = enat i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t p.\n                            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                            enat p + Q t \\<le> enat i", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "proof (cases \"\\<exists>t. (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and> (\\<exists>i. Q t = enat i)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>t.\n       (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n       (\\<exists>i. Q t = enat i) \\<Longrightarrow>\n    \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i\n 2. \\<nexists>t.\n       (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n       (\\<exists>i. Q t = enat i) \\<Longrightarrow>\n    \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "case True"], ["proof (state)\nthis:\n  \\<exists>t.\n     (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n     (\\<exists>i. Q t = enat i)\n\ngoal (2 subgoals):\n 1. \\<exists>t.\n       (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n       (\\<exists>i. Q t = enat i) \\<Longrightarrow>\n    \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i\n 2. \\<nexists>t.\n       (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n       (\\<exists>i. Q t = enat i) \\<Longrightarrow>\n    \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "then"], ["proof (chain)\npicking this:\n  \\<exists>t.\n     (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n     (\\<exists>i. Q t = enat i)", "obtain t p where i: \"(c, s) \\<Rightarrow> p \\<Down> t\""], ["proof (prove)\nusing this:\n  \\<exists>t.\n     (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n     (\\<exists>i. Q t = enat i)\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        (c, s) \\<Rightarrow> p \\<Down> t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> p \\<Down> t\n\ngoal (2 subgoals):\n 1. \\<exists>t.\n       (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n       (\\<exists>i. Q t = enat i) \\<Longrightarrow>\n    \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i\n 2. \\<nexists>t.\n       (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n       (\\<exists>i. Q t = enat i) \\<Longrightarrow>\n    \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "from True A"], ["proof (chain)\npicking this:\n  \\<exists>t.\n     (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n     (\\<exists>i. Q t = enat i)\n  (if \\<exists>t.\n         (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n         (\\<exists>i. Q t = enat i)\n   then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n   else \\<infinity>)\n  \\<le> P s", "have \"enat p + Q t \\<le> P s\""], ["proof (prove)\nusing this:\n  \\<exists>t.\n     (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n     (\\<exists>i. Q t = enat i)\n  (if \\<exists>t.\n         (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n         (\\<exists>i. Q t = enat i)\n   then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n   else \\<infinity>)\n  \\<le> P s\n\ngoal (1 subgoal):\n 1. enat p + Q t \\<le> P s", "by (simp add: bigstepT_the_cost[OF i] bigstepT_the_state[OF i])"], ["proof (state)\nthis:\n  enat p + Q t \\<le> P s\n\ngoal (2 subgoals):\n 1. \\<exists>t.\n       (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n       (\\<exists>i. Q t = enat i) \\<Longrightarrow>\n    \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i\n 2. \\<nexists>t.\n       (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n       (\\<exists>i. Q t = enat i) \\<Longrightarrow>\n    \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "then"], ["proof (chain)\npicking this:\n  enat p + Q t \\<le> P s", "have \"(c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i\""], ["proof (prove)\nusing this:\n  enat p + Q t \\<le> P s\n\ngoal (1 subgoal):\n 1. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "using 1(2) i"], ["proof (prove)\nusing this:\n  enat p + Q t \\<le> P s\n  P s = enat i\n  (c, s) \\<Rightarrow> p \\<Down> t\n\ngoal (1 subgoal):\n 1. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "by simp"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i\n\ngoal (2 subgoals):\n 1. \\<exists>t.\n       (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n       (\\<exists>i. Q t = enat i) \\<Longrightarrow>\n    \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i\n 2. \\<nexists>t.\n       (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n       (\\<exists>i. Q t = enat i) \\<Longrightarrow>\n    \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "then"], ["proof (chain)\npicking this:\n  (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "show ?thesis"], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "by auto"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i\n\ngoal (1 subgoal):\n 1. \\<nexists>t.\n       (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n       (\\<exists>i. Q t = enat i) \\<Longrightarrow>\n    \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>t.\n       (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n       (\\<exists>i. Q t = enat i) \\<Longrightarrow>\n    \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "case False"], ["proof (state)\nthis:\n  \\<nexists>t.\n     (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n     (\\<exists>i. Q t = enat i)\n\ngoal (1 subgoal):\n 1. \\<nexists>t.\n       (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n       (\\<exists>i. Q t = enat i) \\<Longrightarrow>\n    \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "with A"], ["proof (chain)\npicking this:\n  (if \\<exists>t.\n         (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n         (\\<exists>i. Q t = enat i)\n   then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n   else \\<infinity>)\n  \\<le> P s\n  \\<nexists>t.\n     (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n     (\\<exists>i. Q t = enat i)", "have \"P s \\<ge> \\<infinity>\""], ["proof (prove)\nusing this:\n  (if \\<exists>t.\n         (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n         (\\<exists>i. Q t = enat i)\n   then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n   else \\<infinity>)\n  \\<le> P s\n  \\<nexists>t.\n     (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n     (\\<exists>i. Q t = enat i)\n\ngoal (1 subgoal):\n 1. \\<infinity> \\<le> P s", "by auto"], ["proof (state)\nthis:\n  \\<infinity> \\<le> P s\n\ngoal (1 subgoal):\n 1. \\<nexists>t.\n       (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n       (\\<exists>i. Q t = enat i) \\<Longrightarrow>\n    \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "then"], ["proof (chain)\npicking this:\n  \\<infinity> \\<le> P s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<infinity> \\<le> P s\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "using 1"], ["proof (prove)\nusing this:\n  \\<infinity> \\<le> P s\n  \\<forall>s.\n     (if \\<exists>t.\n            (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n            (\\<exists>i. Q t = enat i)\n      then enat (\\<down>\\<^sub>t (c, s)) + Q (\\<down>\\<^sub>s (c, s))\n      else \\<infinity>)\n     \\<le> P s\n  P s = enat i\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i", "by auto"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + Q t \\<le> enat i\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem wp2_is_weakestprePotential: \"(\\<forall>s. wp\\<^sub>2 c Q s \\<le> P s) \\<longleftrightarrow> \\<Turnstile>\\<^sub>2 {P}c{Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s. wp\\<^sub>2 c Q s \\<le> P s) =\n    (\\<Turnstile>\\<^sub>2 {P} c {Q})", "using   wp2_is_weakestprePotential2  wp2_is_weakestprePotential1"], ["proof (prove)\nusing this:\n  \\<forall>s. wp\\<^sub>2 ?c ?Q s \\<le> ?P s \\<Longrightarrow>\n  \\<Turnstile>\\<^sub>2 {?P} ?c {?Q}\n  \\<Turnstile>\\<^sub>2 {?P} ?c {?Q} \\<Longrightarrow>\n  \\<forall>s. wp\\<^sub>2 ?c ?Q s \\<le> ?P s\n\ngoal (1 subgoal):\n 1. (\\<forall>s. wp\\<^sub>2 c Q s \\<le> P s) =\n    (\\<Turnstile>\\<^sub>2 {P} c {Q})", "by metis"], ["", "theorem hoare2_complete: \"\\<Turnstile>\\<^sub>2 {P}c{Q} \\<Longrightarrow> \\<turnstile>\\<^sub>2 {P}c{ Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2 {P} c {Q} \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2 {P} c {Q}", "apply(rule conseq[OF wp2_is_pre, where Q'=Q and Q=Q, simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<Turnstile>\\<^sub>2 {P} c {Q} \\<Longrightarrow>\n       wp\\<^sub>2 c Q s \\<le> P s", "using wp2_is_weakestprePotential1"], ["proof (prove)\nusing this:\n  \\<Turnstile>\\<^sub>2 {?P} ?c {?Q} \\<Longrightarrow>\n  \\<forall>s. wp\\<^sub>2 ?c ?Q s \\<le> ?P s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<Turnstile>\\<^sub>2 {P} c {Q} \\<Longrightarrow>\n       wp\\<^sub>2 c Q s \\<le> P s", "by blast"], ["", "corollary hoare2_sound_complete: \" \\<turnstile>\\<^sub>2 {P}c{Q} \\<longleftrightarrow> \\<Turnstile>\\<^sub>2 {P}c{ Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<turnstile>\\<^sub>2 {P} c {Q}) = (\\<Turnstile>\\<^sub>2 {P} c {Q})", "by (metis hoare2_sound hoare2_complete)"], ["", "end"]]}