{"file_name": "/home/qj213/afp-2021-10-22/thys/Hoare_Time/QuantK_Sqrt.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hoare_Time", "problem_names": ["lemma absch: \"\\<And>s k. 1 + s ''x'' = 2 ^ k \\<Longrightarrow> 5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\"", "lemma \n  assumes   \n    P: \"P  = (\\<lambda>s. \\<up> (  (\\<exists>k. 1 + s ''x''  = 2 ^ k)) + (Discrete.log (nat ( s ''x'')) + 1))\" and\n      Q[simp]: \"Q = (\\<lambda>_. 0)\" \n  shows \" \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}\""], "translations": [["", "lemma absch: \"\\<And>s k. 1 + s ''x'' = 2 ^ k \\<Longrightarrow> 5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s k.\n       1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n       5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s k.\n       1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n       5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "fix s :: state and  k :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s k.\n       1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n       5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "assume F: \" 1 + s ''x'' = 2 ^ k \""], ["proof (state)\nthis:\n  1 + s ''x'' = 2 ^ k\n\ngoal (1 subgoal):\n 1. \\<And>s k.\n       1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n       5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "then"], ["proof (chain)\npicking this:\n  1 + s ''x'' = 2 ^ k", "have i: \"nat (1 + s ''x'') =  2 ^ k\" and nn: \"s ''x''\\<ge> 0\""], ["proof (prove)\nusing this:\n  1 + s ''x'' = 2 ^ k\n\ngoal (1 subgoal):\n 1. nat (1 + s ''x'') = 2 ^ k &&& 0 \\<le> s ''x''", "apply (auto simp: nat_power_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + s ''x'' = 2 ^ k \\<Longrightarrow> 0 \\<le> s ''x''", "by (smt one_le_power)"], ["proof (state)\nthis:\n  nat (1 + s ''x'') = 2 ^ k\n  0 \\<le> s ''x''\n\ngoal (1 subgoal):\n 1. \\<And>s k.\n       1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n       5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "have F: \"1 + nat (s ''x'') = 2 ^k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + nat (s ''x'') = 2 ^ k", "unfolding i[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + nat (s ''x'') = nat (1 + s ''x'')", "using nn"], ["proof (prove)\nusing this:\n  0 \\<le> s ''x''\n\ngoal (1 subgoal):\n 1. 1 + nat (s ''x'') = nat (1 + s ''x'')", "by auto"], ["proof (state)\nthis:\n  1 + nat (s ''x'') = 2 ^ k\n\ngoal (1 subgoal):\n 1. \\<And>s k.\n       1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n       5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "show \"5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "proof (cases \"s ''x'' \\<ge> 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "case True"], ["proof (state)\nthis:\n  1 \\<le> s ''x''\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "have \"5 * k = 5 * (Discrete.log (2^k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 * k = 5 * Discrete.log (2 ^ k)", "by auto"], ["proof (state)\nthis:\n  5 * k = 5 * Discrete.log (2 ^ k)\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "also"], ["proof (state)\nthis:\n  5 * k = 5 * Discrete.log (2 ^ k)\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "have \"\\<dots> = 5 * Discrete.log (1 + nat (s ''x''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 * Discrete.log (2 ^ k) = 5 * Discrete.log (1 + nat (s ''x''))", "by(simp only: F[symmetric])"], ["proof (state)\nthis:\n  5 * Discrete.log (2 ^ k) = 5 * Discrete.log (1 + nat (s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "also"], ["proof (state)\nthis:\n  5 * Discrete.log (2 ^ k) = 5 * Discrete.log (1 + nat (s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "have \"\\<dots> \\<le> 5 * Discrete.log (nat (s ''x'' + s ''x''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 * Discrete.log (1 + nat (s ''x''))\n    \\<le> 5 * Discrete.log (nat (s ''x'' + s ''x''))", "using True"], ["proof (prove)\nusing this:\n  1 \\<le> s ''x''\n\ngoal (1 subgoal):\n 1. 5 * Discrete.log (1 + nat (s ''x''))\n    \\<le> 5 * Discrete.log (nat (s ''x'' + s ''x''))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    Discrete.log (Suc (nat (s ''x'')))\n    \\<le> Discrete.log (nat (2 * s ''x''))", "apply(rule monoD[OF log_mono])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    Suc (nat (s ''x'')) \\<le> nat (2 * s ''x'')", "by auto"], ["proof (state)\nthis:\n  5 * Discrete.log (1 + nat (s ''x''))\n  \\<le> 5 * Discrete.log (nat (s ''x'' + s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "also"], ["proof (state)\nthis:\n  5 * Discrete.log (1 + nat (s ''x''))\n  \\<le> 5 * Discrete.log (nat (s ''x'' + s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "have \"\\<dots> = 5 *  Discrete.log (2 * nat (s ''x''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 * Discrete.log (nat (s ''x'' + s ''x'')) =\n    5 * Discrete.log (2 * nat (s ''x''))", "by (auto simp: nat_mult_distrib)"], ["proof (state)\nthis:\n  5 * Discrete.log (nat (s ''x'' + s ''x'')) =\n  5 * Discrete.log (2 * nat (s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "also"], ["proof (state)\nthis:\n  5 * Discrete.log (nat (s ''x'' + s ''x'')) =\n  5 * Discrete.log (2 * nat (s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "have \"\\<dots> = 5 + 5 * (Discrete.log (nat (s ''x'')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 * Discrete.log (2 * nat (s ''x'')) =\n    5 + 5 * Discrete.log (nat (s ''x''))", "using True"], ["proof (prove)\nusing this:\n  1 \\<le> s ''x''\n\ngoal (1 subgoal):\n 1. 5 * Discrete.log (2 * nat (s ''x'')) =\n    5 + 5 * Discrete.log (nat (s ''x''))", "by auto"], ["proof (state)\nthis:\n  5 * Discrete.log (2 * nat (s ''x'')) =\n  5 + 5 * Discrete.log (nat (s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "also"], ["proof (state)\nthis:\n  5 * Discrete.log (2 * nat (s ''x'')) =\n  5 + 5 * Discrete.log (nat (s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "have \"\\<dots> \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 + 5 * Discrete.log (nat (s ''x''))\n    \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "by simp"], ["proof (state)\nthis:\n  5 + 5 * Discrete.log (nat (s ''x''))\n  \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "finally"], ["proof (chain)\npicking this:\n  5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "show ?thesis"], ["proof (prove)\nusing this:\n  5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n\ngoal (1 subgoal):\n 1. 5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "."], ["proof (state)\nthis:\n  5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "case False"], ["proof (state)\nthis:\n  \\<not> 1 \\<le> s ''x''\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "with nn"], ["proof (chain)\npicking this:\n  0 \\<le> s ''x''\n  \\<not> 1 \\<le> s ''x''", "have gt1: \"s ''x'' = 0\""], ["proof (prove)\nusing this:\n  0 \\<le> s ''x''\n  \\<not> 1 \\<le> s ''x''\n\ngoal (1 subgoal):\n 1. s ''x'' = 0", "by auto"], ["proof (state)\nthis:\n  s ''x'' = 0\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "from F[unfolded gt1]"], ["proof (chain)\npicking this:\n  1 + nat 0 = 2 ^ k", "have \"2 ^ k = (1::int)\""], ["proof (prove)\nusing this:\n  1 + nat 0 = 2 ^ k\n\ngoal (1 subgoal):\n 1. 2 ^ k = 1", "using log_Suc_zero"], ["proof (prove)\nusing this:\n  1 + nat 0 = 2 ^ k\n  Discrete.log (Suc 0) = 0\n\ngoal (1 subgoal):\n 1. 2 ^ k = 1", "by auto"], ["proof (state)\nthis:\n  2 ^ k = 1\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "then"], ["proof (chain)\npicking this:\n  2 ^ k = 1", "have \"k=0\""], ["proof (prove)\nusing this:\n  2 ^ k = 1\n\ngoal (1 subgoal):\n 1. k = 0", "by (metis One_nat_def add.right_neutral gt1 i n_not_Suc_n nat_numeral nat_power_eq_Suc_0_iff numeral_2_eq_2 numeral_One)"], ["proof (state)\nthis:\n  k = 0\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "then"], ["proof (chain)\npicking this:\n  k = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  k = 0\n\ngoal (1 subgoal):\n 1. 5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "by(simp add: gt1)"], ["proof (state)\nthis:\n  5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>For simplicity we assume, that during the process all segments between ''l'' and ''r'' have\n      as length a power of two. This simplifies the analysis.\n      To obtain this we choose the prepotential P accordingly.\n\n      Now lets show the correctness of our time complexity: the binary search is in O(log ''x'') \\<close>"], ["", "lemma \n  assumes   \n    P: \"P  = (\\<lambda>s. \\<up> (  (\\<exists>k. 1 + s ''x''  = 2 ^ k)) + (Discrete.log (nat ( s ''x'')) + 1))\" and\n      Q[simp]: \"Q = (\\<lambda>_. 0)\" \n  shows \" \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "proof -\n  \\<comment> \\<open>first we create an annotated command\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "let ?lb = \"''m'' ::= \n              (Div (Plus (V ''l'') (V ''r'')) (N 2)) ;; \n              (IF Not (Less (Times (V ''m'') (V ''m'')) (V ''x'')) \n                THEN ''l'' ::= V ''m''\n                ELSE ''r'' ::= V ''m'');;\n              (''m'' ::= N 0)::acom\"\n  \\<comment> \\<open>with an invariant potential\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "define I   where \"I \\<equiv> (\\<lambda>s::state. (( emb (  s ''l''\\<ge>0   \\<and> ( \\<exists>k. s ''r'' - s ''l'' = 2 ^ k) ) + 5 * Discrete.log (nat (s ''r'') - nat (s ''l'')))::enat) )\""], ["proof (state)\nthis:\n  I \\<equiv>\n  \\<lambda>s.\n     \\<up>\n      (0 \\<le> s ''l'' \\<and> (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k)) +\n     enat (5 * Discrete.log (nat (s ''r'') - nat (s ''l'')))\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "let ?C = \" ((''l''::= N 0) :: acom) ;; (''m'' ::= N 0) ;; ''r''::= Plus (N 1) (V ''x'');; ({I} WHILE (Less (Plus (N 1) (V ''l'')) (V ''r'')) DO ?lb)\"\n  \n  \\<comment> \\<open>we show that the annotated command corresponds to the command we are interested in\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "have s: \"strip ?C = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip\n     (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n      {I} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n      DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n          IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n          THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n          ''m'' ::= N 0)) =\n    c", "unfolding c_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. strip\n     (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n      {I} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n      DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n          IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n          THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n          ''m'' ::= N 0)) =\n    ''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n    WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n    DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n        IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n        THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n        ''m'' ::= N 0)", "by auto\n    \n  \\<comment> \\<open>now we show that the annotated command is correct; here we use the VCG for the QuantK logic\\<close>"], ["proof (state)\nthis:\n  strip\n   (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n    {I} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n    DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n        IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n        THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n        ''m'' ::= N 0)) =\n  c\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "have v: \"\\<turnstile>\\<^sub>2\\<^sub>' {P} strip ?C {Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {P}\n                                 strip\n                                  (''l'' ::= N 0;; ''m'' ::= N 0;;\n                                   ''r'' ::= Plus (N 1) (V ''x'');;\n                                   {I}\n                                   WHILE Less (Plus (N 1) (V ''l''))\n    (V ''r'')\n                                   DO (''m'' ::= Div\n            (Plus (V ''l'') (V ''r'')) (N 2);;\n IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n ''m'' ::= N 0))\n                                 {Q}", "proof (rule vc_sound'', safe) \n    \n    \\<comment> \\<open>A) first lets show the verification conditions:\\<close>"], ["proof (state)\ngoal (4 subgoals):\n 1. vc (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n        {I} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n        DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n            IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n            THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n            ''m'' ::= N 0))\n     ?Q'\n 2. \\<And>s.\n       pre (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n            {I} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n            DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                ''m'' ::= N 0))\n        ?Q' s\n       \\<le> enat ?k * P s\n 3. \\<And>s. enat ?k * Q s \\<le> ?Q' s\n 4. 0 < ?k", "show \"vc ?C Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vc (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n        {I} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n        DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n            IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n            THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n            ''m'' ::= N 0))\n     Q", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<not> (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n              < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (eSuc\n            (eSuc\n              (I (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)) + 1))))\n       \\<le> I s + \\<up> (1 + s ''l'' < s ''r'')\n 2. \\<And>s.\n       (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n       < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (eSuc\n            (eSuc\n              (I (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)) + 1))))\n       \\<le> I s + \\<up> (1 + s ''l'' < s ''r'')", "unfolding I_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<not> (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n              < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (eSuc\n            (eSuc\n              (\\<up>\n                (0 \\<le> (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                          ''l'' \\<and>\n                 (\\<exists>k.\n                     (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                      ''r'' -\n                     (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                      ''l'' =\n                     2 ^ k)) +\n               enat\n                (5 *\n                 Discrete.log\n                  (nat ((s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                         ''r'') -\n                   nat ((s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                         ''l''))) +\n               1))))\n       \\<le> \\<up>\n              (0 \\<le> s ''l'' \\<and>\n               (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k)) +\n             enat (5 * Discrete.log (nat (s ''r'') - nat (s ''l''))) +\n             \\<up> (1 + s ''l'' < s ''r'')\n 2. \\<And>s.\n       (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n       < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (eSuc\n            (eSuc\n              (\\<up>\n                (0 \\<le> (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                          ''l'' \\<and>\n                 (\\<exists>k.\n                     (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                      ''r'' -\n                     (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                      ''l'' =\n                     2 ^ k)) +\n               enat\n                (5 *\n                 Discrete.log\n                  (nat ((s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                         ''r'') -\n                   nat ((s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                         ''l''))) +\n               1))))\n       \\<le> \\<up>\n              (0 \\<le> s ''l'' \\<and>\n               (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k)) +\n             enat (5 * Discrete.log (nat (s ''r'') - nat (s ''l''))) +\n             \\<up> (1 + s ''l'' < s ''r'')", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n           < s ''x'' \\<Longrightarrow>\n    eSuc\n     (eSuc\n       (eSuc\n         (eSuc\n           (\\<up>\n             (0 \\<le> (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                       ''l'' \\<and>\n              (\\<exists>k.\n                  (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                   ''r'' -\n                  (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                   ''l'' =\n                  2 ^ k)) +\n            enat\n             (5 *\n              Discrete.log\n               (nat ((s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                      ''r'') -\n                nat ((s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                      ''l''))) +\n            1))))\n    \\<le> \\<up>\n           (0 \\<le> s ''l'' \\<and>\n            (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k)) +\n          enat (5 * Discrete.log (nat (s ''r'') - nat (s ''l''))) +\n          \\<up> (1 + s ''l'' < s ''r'')", "apply(cases \"(\\<exists>k. s ''r''  - s ''l'' = 2 ^ k)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                    < s ''x'';\n     \\<exists>k. s ''r'' - s ''l'' = 2 ^ k\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc\n                           (eSuc\n                             (\\<up>\n                               (0 \\<le> (s\n   (''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n   ''l'' \\<and>\n                                (\\<exists>k.\n                                    (s(''l'' := (s ''l'' + s ''r'') div 2,\n ''m'' := 0))\n                                     ''r'' -\n                                    (s(''l'' := (s ''l'' + s ''r'') div 2,\n ''m'' := 0))\n                                     ''l'' =\n                                    2 ^ k)) +\n                              enat\n                               (5 *\n                                Discrete.log\n                                 (nat ((s\n  (''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n  ''r'') -\n                                  nat ((s\n  (''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n  ''l''))) +\n                              1))))\n                      \\<le> \\<up>\n                             (0 \\<le> s ''l'' \\<and>\n                              (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k)) +\n                            enat\n                             (5 *\n                              Discrete.log\n                               (nat (s ''r'') - nat (s ''l''))) +\n                            \\<up> (1 + s ''l'' < s ''r'')\n 2. \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                    < s ''x'';\n     \\<nexists>k. s ''r'' - s ''l'' = 2 ^ k\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc\n                           (eSuc\n                             (\\<up>\n                               (0 \\<le> (s\n   (''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n   ''l'' \\<and>\n                                (\\<exists>k.\n                                    (s(''l'' := (s ''l'' + s ''r'') div 2,\n ''m'' := 0))\n                                     ''r'' -\n                                    (s(''l'' := (s ''l'' + s ''r'') div 2,\n ''m'' := 0))\n                                     ''l'' =\n                                    2 ^ k)) +\n                              enat\n                               (5 *\n                                Discrete.log\n                                 (nat ((s\n  (''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n  ''r'') -\n                                  nat ((s\n  (''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n  ''l''))) +\n                              1))))\n                      \\<le> \\<up>\n                             (0 \\<le> s ''l'' \\<and>\n                              (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k)) +\n                            enat\n                             (5 *\n                              Discrete.log\n                               (nat (s ''r'') - nat (s ''l''))) +\n                            \\<up> (1 + s ''l'' < s ''r'')", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (0 \\<le> s ''l'' + s ''r'' \\<and>\n                                   (\\<exists>k.\n s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k)) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> \\<up> (0 \\<le> s ''l'') +\n                               enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l''))) +\n                               \\<up> (1 + s ''l'' < s ''r'')", "apply(cases \"(1 + s ''l'' < s ''r'')\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (0 \\<le> s ''l'' + s ''r'' \\<and>\n                                   (\\<exists>k.\n s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k)) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> \\<up> (0 \\<le> s ''l'') +\n                               enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l''))) +\n                               \\<up> (1 + s ''l'' < s ''r'')\n 2. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (0 \\<le> s ''l'' + s ''r'' \\<and>\n                                   (\\<exists>k.\n s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k)) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> \\<up> (0 \\<le> s ''l'') +\n                               enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l''))) +\n                               \\<up> (1 + s ''l'' < s ''r'')", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (0 \\<le> s ''l'' + s ''r'' \\<and>\n                                   (\\<exists>k.\n s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k)) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> \\<up> (0 \\<le> s ''l'') +\n                               enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "apply(cases \"0 \\<le> s ''l''\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (0 \\<le> s ''l'' + s ''r'' \\<and>\n                                   (\\<exists>k.\n s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k)) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> \\<up> (0 \\<le> s ''l'') +\n                               enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))\n 2. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        \\<not> 0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (0 \\<le> s ''l'' + s ''r'' \\<and>\n                                   (\\<exists>k.\n s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k)) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> \\<up> (0 \\<le> s ''l'') +\n                               enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\ns ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "proof (goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\ns ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "case (1 k)"], ["proof (state)\nthis:\n  \\<not> (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2) < s ''x''\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n  0 \\<le> s ''l''\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\ns ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "then"], ["proof (chain)\npicking this:\n  \\<not> (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2) < s ''x''\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n  0 \\<le> s ''l''", "have \"k>0\""], ["proof (prove)\nusing this:\n  \\<not> (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2) < s ''x''\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n  0 \\<le> s ''l''\n\ngoal (1 subgoal):\n 1. 0 < k", "using gr0I"], ["proof (prove)\nusing this:\n  \\<not> (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2) < s ''x''\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n  0 \\<le> s ''l''\n  (?n = 0 \\<Longrightarrow> False) \\<Longrightarrow> 0 < ?n\n\ngoal (1 subgoal):\n 1. 0 < k", "by force"], ["proof (state)\nthis:\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\ns ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "then"], ["proof (chain)\npicking this:\n  0 < k", "obtain k' where k': \"k=k'+1\""], ["proof (prove)\nusing this:\n  0 < k\n\ngoal (1 subgoal):\n 1. (\\<And>k'. k = k' + 1 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (metis Suc_eq_plus1 Suc_pred)"], ["proof (state)\nthis:\n  k = k' + 1\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\ns ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "from 1 k'"], ["proof (chain)\npicking this:\n  \\<not> (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2) < s ''x''\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n  0 \\<le> s ''l''\n  k = k' + 1", "have R: \" s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k'\""], ["proof (prove)\nusing this:\n  \\<not> (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2) < s ''x''\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n  0 \\<le> s ''l''\n  k = k' + 1\n\ngoal (1 subgoal):\n 1. s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k'", "by auto"], ["proof (state)\nthis:\n  s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k'\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\ns ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "have gN: \"s ''l''\\<le>s ''r''\"  \"s ''l''\\<ge>0\" \"s ''r'' \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s ''l'' \\<le> s ''r'' &&& 0 \\<le> s ''l'' &&& 0 \\<le> s ''r''", "using 1"], ["proof (prove)\nusing this:\n  \\<not> (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2) < s ''x''\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n  0 \\<le> s ''l''\n\ngoal (1 subgoal):\n 1. s ''l'' \\<le> s ''r'' &&& 0 \\<le> s ''l'' &&& 0 \\<le> s ''r''", "by auto"], ["proof (state)\nthis:\n  s ''l'' \\<le> s ''r''\n  0 \\<le> s ''l''\n  0 \\<le> s ''r''\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\ns ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "have n: \"nat ( s ''r'' - (s ''l'' + s ''r'') div 2 ) =  nat (s ''r'') - nat ((s ''l'' + s ''r'') div 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat (s ''r'' - (s ''l'' + s ''r'') div 2) =\n    nat (s ''r'') - nat ((s ''l'' + s ''r'') div 2)", "using gN"], ["proof (prove)\nusing this:\n  s ''l'' \\<le> s ''r''\n  0 \\<le> s ''l''\n  0 \\<le> s ''r''\n\ngoal (1 subgoal):\n 1. nat (s ''r'' - (s ''l'' + s ''r'') div 2) =\n    nat (s ''r'') - nat ((s ''l'' + s ''r'') div 2)", "apply(simp add: nat_diff_distrib nat_div_distrib)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  nat (s ''r'' - (s ''l'' + s ''r'') div 2) =\n  nat (s ''r'') - nat ((s ''l'' + s ''r'') div 2)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\ns ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "have R': \"nat (s ''r'') -  nat ((s ''l'' + s ''r'') div 2) = 2 ^ k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat (s ''r'') - nat ((s ''l'' + s ''r'') div 2) = 2 ^ k'", "apply(simp only: n[symmetric] R nat_power_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nat 2 ^ k' = 2 ^ k'", "by auto"], ["proof (state)\nthis:\n  nat (s ''r'') - nat ((s ''l'' + s ''r'') div 2) = 2 ^ k'\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\ns ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "have S': \"nat (s ''r'') - nat (s ''l'') = 2 ^ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat (s ''r'') - nat (s ''l'') = 2 ^ k", "using gN"], ["proof (prove)\nusing this:\n  s ''l'' \\<le> s ''r''\n  0 \\<le> s ''l''\n  0 \\<le> s ''r''\n\ngoal (1 subgoal):\n 1. nat (s ''r'') - nat (s ''l'') = 2 ^ k", "apply(simp only: nat_diff_distrib[symmetric] 1(2) nat_power_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s ''l'' \\<le> s ''r''; 0 \\<le> s ''l'';\n     0 \\<le> s ''r''\\<rbrakk>\n    \\<Longrightarrow> nat 2 ^ k = 2 ^ k", "by auto"], ["proof (state)\nthis:\n  nat (s ''r'') - nat (s ''l'') = 2 ^ k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\ns ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "have N: \"0 \\<le> (s ''l'' + s ''r'') div 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> (s ''l'' + s ''r'') div 2", "using gN"], ["proof (prove)\nusing this:\n  s ''l'' \\<le> s ''r''\n  0 \\<le> s ''l''\n  0 \\<le> s ''r''\n\ngoal (1 subgoal):\n 1. 0 \\<le> (s ''l'' + s ''r'') div 2", "by auto"], ["proof (state)\nthis:\n  0 \\<le> (s ''l'' + s ''r'') div 2\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\ns ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat (s ''r'') -\n                                     nat ((s ''l'' + s ''r'') div 2))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "from N"], ["proof (chain)\npicking this:\n  0 \\<le> (s ''l'' + s ''r'') div 2", "show ?case"], ["proof (prove)\nusing this:\n  0 \\<le> (s ''l'' + s ''r'') div 2\n\ngoal (1 subgoal):\n 1. eSuc\n     (eSuc\n       (eSuc\n         (eSuc\n           (\\<up>\n             (\\<exists>k. s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k) +\n            enat\n             (5 *\n              Discrete.log\n               (nat (s ''r'') - nat ((s ''l'' + s ''r'') div 2))) +\n            1))))\n    \\<le> enat (5 * Discrete.log (nat (s ''r'') - nat (s ''l'')))", "apply (simp )"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> s ''l'' + s ''r'' \\<Longrightarrow>\n    eSuc\n     (eSuc\n       (eSuc\n         (eSuc\n           (\\<up>\n             (\\<exists>k. s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k) +\n            enat\n             (5 *\n              Discrete.log\n               (nat (s ''r'') - nat ((s ''l'' + s ''r'') div 2))) +\n            1))))\n    \\<le> enat (5 * Discrete.log (nat (s ''r'') - nat (s ''l'')))", "apply (simp only : R R' S' k')"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> s ''l'' + s ''r'' \\<Longrightarrow>\n    eSuc\n     (eSuc\n       (eSuc\n         (eSuc\n           (\\<up> (\\<exists>k. 2 ^ k' = 2 ^ k) +\n            enat (5 * Discrete.log (2 ^ k')) +\n            1))))\n    \\<le> enat (5 * Discrete.log (2 ^ (k' + 1)))", "by (auto simp: eSuc_enat plus_1_eSuc(2))"], ["proof (state)\nthis:\n  eSuc\n   (eSuc\n     (eSuc\n       (eSuc\n         (\\<up> (\\<exists>k. s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k) +\n          enat\n           (5 *\n            Discrete.log\n             (nat (s ''r'') - nat ((s ''l'' + s ''r'') div 2))) +\n          1))))\n  \\<le> enat (5 * Discrete.log (nat (s ''r'') - nat (s ''l'')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n       < s ''x'' \\<Longrightarrow>\n       eSuc\n        (eSuc\n          (eSuc\n            (eSuc\n              (\\<up>\n                (0 \\<le> (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                          ''l'' \\<and>\n                 (\\<exists>k.\n                     (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                      ''r'' -\n                     (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                      ''l'' =\n                     2 ^ k)) +\n               enat\n                (5 *\n                 Discrete.log\n                  (nat ((s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                         ''r'') -\n                   nat ((s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                         ''l''))) +\n               1))))\n       \\<le> \\<up>\n              (0 \\<le> s ''l'' \\<and>\n               (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k)) +\n             enat (5 * Discrete.log (nat (s ''r'') - nat (s ''l''))) +\n             \\<up> (1 + s ''l'' < s ''r'')", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n    < s ''x'' \\<Longrightarrow>\n    eSuc\n     (eSuc\n       (eSuc\n         (eSuc\n           (\\<up>\n             (0 \\<le> (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                       ''l'' \\<and>\n              (\\<exists>k.\n                  (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                   ''r'' -\n                  (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                   ''l'' =\n                  2 ^ k)) +\n            enat\n             (5 *\n              Discrete.log\n               (nat ((s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                      ''r'') -\n                nat ((s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n                      ''l''))) +\n            1))))\n    \\<le> \\<up>\n           (0 \\<le> s ''l'' \\<and>\n            (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k)) +\n          enat (5 * Discrete.log (nat (s ''r'') - nat (s ''l''))) +\n          \\<up> (1 + s ''l'' < s ''r'')", "apply(cases \"\\<exists>k. s ''r''  - s ''l'' = 2 ^ k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n             < s ''x'';\n     \\<exists>k. s ''r'' - s ''l'' = 2 ^ k\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc\n                           (eSuc\n                             (\\<up>\n                               (0 \\<le> (s\n   (''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n   ''l'' \\<and>\n                                (\\<exists>k.\n                                    (s(''r'' := (s ''l'' + s ''r'') div 2,\n ''m'' := 0))\n                                     ''r'' -\n                                    (s(''r'' := (s ''l'' + s ''r'') div 2,\n ''m'' := 0))\n                                     ''l'' =\n                                    2 ^ k)) +\n                              enat\n                               (5 *\n                                Discrete.log\n                                 (nat ((s\n  (''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n  ''r'') -\n                                  nat ((s\n  (''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n  ''l''))) +\n                              1))))\n                      \\<le> \\<up>\n                             (0 \\<le> s ''l'' \\<and>\n                              (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k)) +\n                            enat\n                             (5 *\n                              Discrete.log\n                               (nat (s ''r'') - nat (s ''l''))) +\n                            \\<up> (1 + s ''l'' < s ''r'')\n 2. \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n             < s ''x'';\n     \\<nexists>k. s ''r'' - s ''l'' = 2 ^ k\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc\n                           (eSuc\n                             (\\<up>\n                               (0 \\<le> (s\n   (''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n   ''l'' \\<and>\n                                (\\<exists>k.\n                                    (s(''r'' := (s ''l'' + s ''r'') div 2,\n ''m'' := 0))\n                                     ''r'' -\n                                    (s(''r'' := (s ''l'' + s ''r'') div 2,\n ''m'' := 0))\n                                     ''l'' =\n                                    2 ^ k)) +\n                              enat\n                               (5 *\n                                Discrete.log\n                                 (nat ((s\n  (''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n  ''r'') -\n                                  nat ((s\n  (''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n  ''l''))) +\n                              1))))\n                      \\<le> \\<up>\n                             (0 \\<le> s ''l'' \\<and>\n                              (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k)) +\n                            enat\n                             (5 *\n                              Discrete.log\n                               (nat (s ''r'') - nat (s ''l''))) +\n                            \\<up> (1 + s ''l'' < s ''r'')", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (0 \\<le> s ''l'' \\<and>\n                                   (\\<exists>k.\n (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k)) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> \\<up> (0 \\<le> s ''l'') +\n                               enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l''))) +\n                               \\<up> (1 + s ''l'' < s ''r'')", "apply (cases \"(1 + s ''l'' < s ''r'')\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (0 \\<le> s ''l'' \\<and>\n                                   (\\<exists>k.\n (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k)) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> \\<up> (0 \\<le> s ''l'') +\n                               enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l''))) +\n                               \\<up> (1 + s ''l'' < s ''r'')\n 2. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (0 \\<le> s ''l'' \\<and>\n                                   (\\<exists>k.\n (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k)) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> \\<up> (0 \\<le> s ''l'') +\n                               enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l''))) +\n                               \\<up> (1 + s ''l'' < s ''r'')", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (0 \\<le> s ''l'' \\<and>\n                                   (\\<exists>k.\n (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k)) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> \\<up> (0 \\<le> s ''l'') +\n                               enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "apply(cases \"0 \\<le> s ''l''\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (0 \\<le> s ''l'' \\<and>\n                                   (\\<exists>k.\n (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k)) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> \\<up> (0 \\<le> s ''l'') +\n                               enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))\n 2. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        \\<not> 0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (0 \\<le> s ''l'' \\<and>\n                                   (\\<exists>k.\n (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k)) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> \\<up> (0 \\<le> s ''l'') +\n                               enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\n(s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "proof (goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\n(s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "case (1 k)"], ["proof (state)\nthis:\n  (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2) < s ''x''\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n  0 \\<le> s ''l''\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\n(s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "from 1(2,3)"], ["proof (chain)\npicking this:\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''", "have \"k>0\""], ["proof (prove)\nusing this:\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n\ngoal (1 subgoal):\n 1. 0 < k", "using gr0I"], ["proof (prove)\nusing this:\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n  (?n = 0 \\<Longrightarrow> False) \\<Longrightarrow> 0 < ?n\n\ngoal (1 subgoal):\n 1. 0 < k", "by force"], ["proof (state)\nthis:\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\n(s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "then"], ["proof (chain)\npicking this:\n  0 < k", "obtain k' where k': \"k=k'+1\""], ["proof (prove)\nusing this:\n  0 < k\n\ngoal (1 subgoal):\n 1. (\\<And>k'. k = k' + 1 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (metis Suc_eq_plus1 Suc_pred)"], ["proof (state)\nthis:\n  k = k' + 1\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\n(s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "from 1 k'"], ["proof (chain)\npicking this:\n  (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2) < s ''x''\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n  0 \\<le> s ''l''\n  k = k' + 1", "have R: \" (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k'\""], ["proof (prove)\nusing this:\n  (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2) < s ''x''\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n  0 \\<le> s ''l''\n  k = k' + 1\n\ngoal (1 subgoal):\n 1. (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k'", "by auto"], ["proof (state)\nthis:\n  (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k'\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\n(s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "have gN: \"s ''l''\\<le>s ''r''\"  \"s ''l''\\<ge>0\" \"s ''r'' \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s ''l'' \\<le> s ''r'' &&& 0 \\<le> s ''l'' &&& 0 \\<le> s ''r''", "using 1"], ["proof (prove)\nusing this:\n  (s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2) < s ''x''\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n  0 \\<le> s ''l''\n\ngoal (1 subgoal):\n 1. s ''l'' \\<le> s ''r'' &&& 0 \\<le> s ''l'' &&& 0 \\<le> s ''r''", "by auto"], ["proof (state)\nthis:\n  s ''l'' \\<le> s ''r''\n  0 \\<le> s ''l''\n  0 \\<le> s ''r''\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\n(s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "have n: \"nat ((s ''l'' + s ''r'') div 2 - s ''l'') =  nat ( (s ''l'' + s ''r'') div 2) - nat (s ''l'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat ((s ''l'' + s ''r'') div 2 - s ''l'') =\n    nat ((s ''l'' + s ''r'') div 2) - nat (s ''l'')", "using gN"], ["proof (prove)\nusing this:\n  s ''l'' \\<le> s ''r''\n  0 \\<le> s ''l''\n  0 \\<le> s ''r''\n\ngoal (1 subgoal):\n 1. nat ((s ''l'' + s ''r'') div 2 - s ''l'') =\n    nat ((s ''l'' + s ''r'') div 2) - nat (s ''l'')", "apply(simp add: nat_diff_distrib nat_div_distrib)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  nat ((s ''l'' + s ''r'') div 2 - s ''l'') =\n  nat ((s ''l'' + s ''r'') div 2) - nat (s ''l'')\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\n(s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "have R': \"nat ( (s ''l'' + s ''r'') div 2) - nat (s ''l'') = 2 ^ k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat ((s ''l'' + s ''r'') div 2) - nat (s ''l'') = 2 ^ k'", "apply(simp only: n[symmetric] R nat_power_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nat 2 ^ k' = 2 ^ k'", "by auto"], ["proof (state)\nthis:\n  nat ((s ''l'' + s ''r'') div 2) - nat (s ''l'') = 2 ^ k'\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\n(s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "have S': \"nat (s ''r'') - nat (s ''l'') = 2 ^ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat (s ''r'') - nat (s ''l'') = 2 ^ k", "using gN"], ["proof (prove)\nusing this:\n  s ''l'' \\<le> s ''r''\n  0 \\<le> s ''l''\n  0 \\<le> s ''r''\n\ngoal (1 subgoal):\n 1. nat (s ''r'') - nat (s ''l'') = 2 ^ k", "apply(simp only: nat_diff_distrib[symmetric] 1(2) nat_power_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s ''l'' \\<le> s ''r''; 0 \\<le> s ''l'';\n     0 \\<le> s ''r''\\<rbrakk>\n    \\<Longrightarrow> nat 2 ^ k = 2 ^ k", "by auto"], ["proof (state)\nthis:\n  nat (s ''r'') - nat (s ''l'') = 2 ^ k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        s ''r'' - s ''l'' = 2 ^ k; 1 + s ''l'' < s ''r'';\n        0 \\<le> s ''l''\\<rbrakk>\n       \\<Longrightarrow> eSuc\n                          (eSuc\n                            (eSuc\n                              (eSuc\n                                (\\<up>\n                                  (\\<exists>k.\n(s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k) +\n                                 enat\n                                  (5 *\n                                   Discrete.log\n                                    (nat ((s ''l'' + s ''r'') div 2) -\n                                     nat (s ''l''))) +\n                                 1))))\n                         \\<le> enat\n                                (5 *\n                                 Discrete.log\n                                  (nat (s ''r'') - nat (s ''l'')))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc\n     (eSuc\n       (eSuc\n         (eSuc\n           (\\<up>\n             (\\<exists>k. (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k) +\n            enat\n             (5 *\n              Discrete.log\n               (nat ((s ''l'' + s ''r'') div 2) - nat (s ''l''))) +\n            1))))\n    \\<le> enat (5 * Discrete.log (nat (s ''r'') - nat (s ''l'')))", "apply (simp only : R R' S' k')"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc\n     (eSuc\n       (eSuc\n         (eSuc\n           (\\<up> (\\<exists>k. 2 ^ k' = 2 ^ k) +\n            enat (5 * Discrete.log (2 ^ k')) +\n            1))))\n    \\<le> enat (5 * Discrete.log (2 ^ (k' + 1)))", "by (auto simp: eSuc_enat plus_1_eSuc(2))"], ["proof (state)\nthis:\n  eSuc\n   (eSuc\n     (eSuc\n       (eSuc\n         (\\<up> (\\<exists>k. (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k) +\n          enat\n           (5 *\n            Discrete.log\n             (nat ((s ''l'' + s ''r'') div 2) - nat (s ''l''))) +\n          1))))\n  \\<le> enat (5 * Discrete.log (nat (s ''r'') - nat (s ''l'')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  vc (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n      {I} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n      DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n          IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n          THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n          ''m'' ::= N 0))\n   Q\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       pre (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n            {I} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n            DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                ''m'' ::= N 0))\n        Q s\n       \\<le> enat ?k * P s\n 2. \\<And>s. enat ?k * Q s \\<le> Q s\n 3. 0 < ?k", "next\n    \\<comment> \\<open>B) lets show that the precondition implies the weakest precondition, and that the\n            time bound of C can be bounded by log ''x''\\<close>"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       pre (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n            {I} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n            DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                ''m'' ::= N 0))\n        Q s\n       \\<le> enat ?k * P s\n 2. \\<And>s. enat ?k * Q s \\<le> Q s\n 3. 0 < ?k", "fix s"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       pre (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n            {I} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n            DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                ''m'' ::= N 0))\n        Q s\n       \\<le> enat ?k * P s\n 2. \\<And>s. enat ?k * Q s \\<le> Q s\n 3. 0 < ?k", "show \"pre ?C Q s \\<le> enat 100 * P s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n         {I} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n         DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n             IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n             THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n             ''m'' ::= N 0))\n     Q s\n    \\<le> enat 100 * P s", "unfolding  I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. pre (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n         {\\<lambda>s.\n             \\<up>\n              (0 \\<le> s ''l'' \\<and>\n               (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k)) +\n             enat (5 * Discrete.log (nat (s ''r'') - nat (s ''l'')))}\n         WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n         DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n             IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n             THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n             ''m'' ::= N 0))\n     Q s\n    \\<le> enat 100 * P s", "apply(simp only: P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. pre (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n         {\\<lambda>s.\n             \\<up>\n              (0 \\<le> s ''l'' \\<and>\n               (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k)) +\n             enat (5 * Discrete.log (nat (s ''r'') - nat (s ''l'')))}\n         WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n         DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n             IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n             THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n             ''m'' ::= N 0))\n     Q s\n    \\<le> enat 100 *\n          (\\<up> (\\<exists>k. 1 + s ''x'' = 2 ^ k) +\n           enat (Discrete.log (nat (s ''x'')) + 1))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc\n     (eSuc\n       (eSuc\n         (\\<up> (\\<exists>k. 1 + s ''x'' = 2 ^ k) +\n          enat (5 * Discrete.log (nat (1 + s ''x''))) +\n          1)))\n    \\<le> enat 100 *\n          (\\<up> (\\<exists>k. 1 + s ''x'' = 2 ^ k) +\n           enat (Suc (Discrete.log (nat (s ''x'')))))", "apply(cases \"(\\<exists>k. 1 + s ''x''   = 2 ^ k)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>k. 1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n    eSuc\n     (eSuc\n       (eSuc\n         (\\<up> (\\<exists>k. 1 + s ''x'' = 2 ^ k) +\n          enat (5 * Discrete.log (nat (1 + s ''x''))) +\n          1)))\n    \\<le> enat 100 *\n          (\\<up> (\\<exists>k. 1 + s ''x'' = 2 ^ k) +\n           enat (Suc (Discrete.log (nat (s ''x'')))))\n 2. \\<nexists>k. 1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n    eSuc\n     (eSuc\n       (eSuc\n         (\\<up> (\\<exists>k. 1 + s ''x'' = 2 ^ k) +\n          enat (5 * Discrete.log (nat (1 + s ''x''))) +\n          1)))\n    \\<le> enat 100 *\n          (\\<up> (\\<exists>k. 1 + s ''x'' = 2 ^ k) +\n           enat (Suc (Discrete.log (nat (s ''x'')))))", "apply (auto simp: eSuc_enat plus_1_eSuc(2) nat_power_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n       5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "using absch"], ["proof (prove)\nusing this:\n  1 + ?s ''x'' = 2 ^ ?k \\<Longrightarrow>\n  5 * ?k \\<le> 96 + 100 * Discrete.log (nat (?s ''x''))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n       5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "by force"], ["proof (state)\nthis:\n  pre (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n       {I} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n       DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n           IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n           THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n           ''m'' ::= N 0))\n   Q s\n  \\<le> enat 100 * P s\n\ngoal (2 subgoals):\n 1. \\<And>s. enat 100 * Q s \\<le> Q s\n 2. 0 < 100", "qed auto"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {P}\n                               strip\n                                (''l'' ::= N 0;; ''m'' ::= N 0;;\n                                 ''r'' ::= Plus (N 1) (V ''x'');;\n                                 {I}\n                                 WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n                                 DO (''m'' ::= Div\n          (Plus (V ''l'') (V ''r'')) (N 2);;\n                                     IF bexp.Not\n   (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                                     THEN ''l'' ::= V ''m''\n                                     ELSE ''r'' ::= V ''m'';;\n                                     ''m'' ::= N 0))\n                               {Q}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "from s v"], ["proof (chain)\npicking this:\n  strip\n   (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n    {I} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n    DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n        IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n        THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n        ''m'' ::= N 0)) =\n  c\n  \\<turnstile>\\<^sub>2\\<^sub>' {P}\n                               strip\n                                (''l'' ::= N 0;; ''m'' ::= N 0;;\n                                 ''r'' ::= Plus (N 1) (V ''x'');;\n                                 {I}\n                                 WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n                                 DO (''m'' ::= Div\n          (Plus (V ''l'') (V ''r'')) (N 2);;\n                                     IF bexp.Not\n   (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                                     THEN ''l'' ::= V ''m''\n                                     ELSE ''r'' ::= V ''m'';;\n                                     ''m'' ::= N 0))\n                               {Q}", "show ?thesis"], ["proof (prove)\nusing this:\n  strip\n   (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n    {I} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n    DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n        IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n        THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n        ''m'' ::= N 0)) =\n  c\n  \\<turnstile>\\<^sub>2\\<^sub>' {P}\n                               strip\n                                (''l'' ::= N 0;; ''m'' ::= N 0;;\n                                 ''r'' ::= Plus (N 1) (V ''x'');;\n                                 {I}\n                                 WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n                                 DO (''m'' ::= Div\n          (Plus (V ''l'') (V ''r'')) (N 2);;\n                                     IF bexp.Not\n   (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                                     THEN ''l'' ::= V ''m''\n                                     ELSE ''r'' ::= V ''m'';;\n                                     ''m'' ::= N 0))\n                               {Q}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "by simp"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}