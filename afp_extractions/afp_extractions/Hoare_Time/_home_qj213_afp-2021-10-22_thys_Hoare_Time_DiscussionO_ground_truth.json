{"file_name": "/home/qj213/afp-2021-10-22/thys/Hoare_Time/DiscussionO.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hoare_Time", "problem_names": ["lemma assumes s: \"\\<Turnstile>\\<^sub>1 { emN P'} c {  %s. (THE e. enat e = P' s - Q' (THE t. (\\<exists>n. (c, s) \\<Rightarrow> n \\<Down> t ) )) \\<Down> emN Q' }\" (is \"\\<Turnstile>\\<^sub>1 { ?P } c { ?e \\<Down> ?Q }\")\n  shows quantNielson: \"\\<Turnstile>\\<^sub>2\\<^sub>' { P' } c { Q' }\"", "lemma assumes s: \"\\<Turnstile>\\<^sub>2\\<^sub>' { %s . emb (\\<forall>l. P l s) + enat (e s) } c { %s. emb (\\<forall>l. Q l s) }\" (is \"\\<Turnstile>\\<^sub>2\\<^sub>' { ?P } c { ?Q }\")\n    and sP: \"\\<And>l t. P l t \\<Longrightarrow> \\<forall>l. P l t\" (* \"support P = {}\" *)\n    and sQ: \"\\<And>l t. Q l t \\<Longrightarrow> \\<forall>l. Q l t\" (* \"support Q = {}\" *)\n  shows  NielsonQuant: \"\\<Turnstile>\\<^sub>1 { P } c { e \\<Down> Q }\"", "lemma assumes s: \"\\<Turnstile>\\<^sub>3\\<^sub>' { em P} c { em Q }\"\nshows  \"\\<Turnstile>\\<^sub>2\\<^sub>' { P } c { Q }\"", "lemma assumes s: \"\\<Turnstile>\\<^sub>2\\<^sub>' { embe P } c { embe Q }\" and full: \"\\<And>ps n. P (ps,n) \\<Longrightarrow> dom ps = UNIV\"            \n  shows  \"\\<Turnstile>\\<^sub>3\\<^sub>' {  P} c { Q }\"", "lemma \"validk P c Q n = (\\<exists>k>0. valid P c Q (k*n))\"", "lemma \"\\<Turnstile>\\<^sub>2\\<^sub>' {%s.  emb (P s)  + enat n} c { \\<lambda>s.  emb (Q s)  } \\<Longrightarrow> \\<exists>k>0. valid P c Q (k*n)\"", "lemma valid_quantHoare: \"\\<exists>k>0. valid P c Q (k*n) \\<Longrightarrow> \\<Turnstile>\\<^sub>2\\<^sub>' {%s. emb (P s)  + enat n} c { \\<lambda>s. emb (Q s)  }\"", "lemma emp: \"a + Map.empty = a\"", "lemma oneway: \"\\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P ** $n} c {embP2 Q} \\<Longrightarrow> validk P c Q n\"", "lemma theother: \"validk P c Q n \\<Longrightarrow> \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P ** $n} c {embP2 Q }\"", "lemma \"validk P c Q n \\<longleftrightarrow> \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P ** $n} c {embP2 Q }\""], "translations": [["", "lemma assumes s: \"\\<Turnstile>\\<^sub>1 { emN P'} c {  %s. (THE e. enat e = P' s - Q' (THE t. (\\<exists>n. (c, s) \\<Rightarrow> n \\<Down> t ) )) \\<Down> emN Q' }\" (is \"\\<Turnstile>\\<^sub>1 { ?P } c { ?e \\<Down> ?Q }\")\n  shows quantNielson: \"\\<Turnstile>\\<^sub>2\\<^sub>' { P' } c { Q' }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P'} c {Q'}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P'} c {Q'}", "from s"], ["proof (chain)\npicking this:\n  \\<Turnstile>\\<^sub>1 {emN P'} c\n  { \\<lambda>s.\n       THE e. enat e = P' s - Q' (\\<down>\\<^sub>s (c, s)) \\<Down>emN Q'}", "obtain k where k: \"k>0\" and qd: \"\\<And>l s. emN P' l s \\<Longrightarrow> (\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> p \\<le> k * ?e s \\<and> emN Q' l t)\""], ["proof (prove)\nusing this:\n  \\<Turnstile>\\<^sub>1 {emN P'} c\n  { \\<lambda>s.\n       THE e. enat e = P' s - Q' (\\<down>\\<^sub>s (c, s)) \\<Down>emN Q'}\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>0 < k;\n         \\<And>l s.\n            emN P' l s \\<Longrightarrow>\n            \\<exists>t p.\n               (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n               p \\<le> k *\n                       (THE e.\n                           enat e =\n                           P' s - Q' (\\<down>\\<^sub>s (c, s))) \\<and>\n               emN Q' l t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding hoare1_valid_def"], ["proof (prove)\nusing this:\n  \\<exists>k>0.\n     \\<forall>l s.\n        emN P' l s \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            p \\<le> k *\n                    (THE e.\n                        enat e = P' s - Q' (\\<down>\\<^sub>s (c, s))) \\<and>\n            emN Q' l t)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>0 < k;\n         \\<And>l s.\n            emN P' l s \\<Longrightarrow>\n            \\<exists>t p.\n               (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n               p \\<le> k *\n                       (THE e.\n                           enat e =\n                           P' s - Q' (\\<down>\\<^sub>s (c, s))) \\<and>\n               emN Q' l t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  0 < k\n  emN P' ?l ?s \\<Longrightarrow>\n  \\<exists>t p.\n     (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n     p \\<le> k *\n             (THE e. enat e = P' ?s - Q' (\\<down>\\<^sub>s (c, ?s))) \\<and>\n     emN Q' ?l t\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P'} c {Q'}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P'} c {Q'}", "unfolding QuantK_Hoare.hoare2o_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          P' s < \\<infinity> \\<longrightarrow>\n          (\\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat p + enat k * Q' t \\<le> enat k * P' s)", "apply(rule exI[where x=k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<and>\n    (\\<forall>s.\n        P' s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * Q' t \\<le> enat k * P' s))", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < k\n 2. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "assume P': \"P' s < \\<infinity>\""], ["proof (state)\nthis:\n  P' s < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "then"], ["proof (chain)\npicking this:\n  P' s < \\<infinity>", "have \"(emN P') (\\<lambda>_. 0) s\""], ["proof (prove)\nusing this:\n  P' s < \\<infinity>\n\ngoal (1 subgoal):\n 1. emN P' (\\<lambda>_. 0) s", "unfolding  emN_def"], ["proof (prove)\nusing this:\n  P' s < \\<infinity>\n\ngoal (1 subgoal):\n 1. P' s < \\<infinity>", "by auto"], ["proof (state)\nthis:\n  emN P' (\\<lambda>_. 0) s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "with qd"], ["proof (chain)\npicking this:\n  emN P' ?l ?s \\<Longrightarrow>\n  \\<exists>t p.\n     (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n     p \\<le> k *\n             (THE e. enat e = P' ?s - Q' (\\<down>\\<^sub>s (c, ?s))) \\<and>\n     emN Q' ?l t\n  emN P' (\\<lambda>_. 0) s", "obtain p t where i: \"(c, s) \\<Rightarrow> p \\<Down> t\" and p: \"p \\<le> k * ?e s\" and e: \"emN Q' (\\<lambda>_. 0) t\""], ["proof (prove)\nusing this:\n  emN P' ?l ?s \\<Longrightarrow>\n  \\<exists>t p.\n     (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n     p \\<le> k *\n             (THE e. enat e = P' ?s - Q' (\\<down>\\<^sub>s (c, ?s))) \\<and>\n     emN Q' ?l t\n  emN P' (\\<lambda>_. 0) s\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        \\<lbrakk>(c, s) \\<Rightarrow> p \\<Down> t;\n         p \\<le> k * (THE e. enat e = P' s - Q' (\\<down>\\<^sub>s (c, s)));\n         emN Q' (\\<lambda>_. 0) t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  p \\<le> k * (THE e. enat e = P' s - Q' (\\<down>\\<^sub>s (c, s)))\n  emN Q' (\\<lambda>_. 0) t\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "have t: \"\\<down>\\<^sub>s (c, s) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>s (c, s) = t", "using bigstepT_the_state[OF i]"], ["proof (prove)\nusing this:\n  \\<down>\\<^sub>s (c, s) = t\n\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>s (c, s) = t", "by auto"], ["proof (state)\nthis:\n  \\<down>\\<^sub>s (c, s) = t\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "from P'"], ["proof (chain)\npicking this:\n  P' s < \\<infinity>", "obtain pre where pre: \"P' s = enat pre\""], ["proof (prove)\nusing this:\n  P' s < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>pre. P' s = enat pre \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  P' s = enat pre\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "from e"], ["proof (chain)\npicking this:\n  emN Q' (\\<lambda>_. 0) t", "have \"Q' t < \\<infinity>\""], ["proof (prove)\nusing this:\n  emN Q' (\\<lambda>_. 0) t\n\ngoal (1 subgoal):\n 1. Q' t < \\<infinity>", "unfolding emN_def"], ["proof (prove)\nusing this:\n  Q' t < \\<infinity>\n\ngoal (1 subgoal):\n 1. Q' t < \\<infinity>", "by auto"], ["proof (state)\nthis:\n  Q' t < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "then"], ["proof (chain)\npicking this:\n  Q' t < \\<infinity>", "obtain post where post: \"Q' t = enat post\""], ["proof (prove)\nusing this:\n  Q' t < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>post.\n        Q' t = enat post \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  Q' t = enat post\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "have \"p > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < p", "using i bigstep_progress"], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  (?c, ?s) \\<Rightarrow> ?p \\<Down> ?t \\<Longrightarrow> 0 < ?p\n\ngoal (1 subgoal):\n 1. 0 < p", "by auto"], ["proof (state)\nthis:\n  0 < p\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "thm enat.inject idiff_enat_enat the_equality"], ["proof (state)\nthis:\n  0 < p\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "have k: \"(THE e. enat e = P' s - Q' (THE t. \\<exists>n. (c, s) \\<Rightarrow> n \\<Down> t)) = pre - post\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE e. enat e = P' s - Q' (\\<down>\\<^sub>s (c, s))) = pre - post", "unfolding t pre post"], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE e. enat e = enat pre - enat post) = pre - post", "apply(rule the_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. enat (pre - post) = enat pre - enat post\n 2. \\<And>e. enat e = enat pre - enat post \\<Longrightarrow> e = pre - post", "using idiff_enat_enat"], ["proof (prove)\nusing this:\n  enat ?a - enat ?b = enat (?a - ?b)\n\ngoal (2 subgoals):\n 1. enat (pre - post) = enat pre - enat post\n 2. \\<And>e. enat e = enat pre - enat post \\<Longrightarrow> e = pre - post", "by auto"], ["proof (state)\nthis:\n  (THE e. enat e = P' s - Q' (\\<down>\\<^sub>s (c, s))) = pre - post\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "with p"], ["proof (chain)\npicking this:\n  p \\<le> k * (THE e. enat e = P' s - Q' (\\<down>\\<^sub>s (c, s)))\n  (THE e. enat e = P' s - Q' (\\<down>\\<^sub>s (c, s))) = pre - post", "have ieq: \"p \\<le> k * (pre - post)\""], ["proof (prove)\nusing this:\n  p \\<le> k * (THE e. enat e = P' s - Q' (\\<down>\\<^sub>s (c, s)))\n  (THE e. enat e = P' s - Q' (\\<down>\\<^sub>s (c, s))) = pre - post\n\ngoal (1 subgoal):\n 1. p \\<le> k * (pre - post)", "by auto"], ["proof (state)\nthis:\n  p \\<le> k * (pre - post)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "then"], ["proof (chain)\npicking this:\n  p \\<le> k * (pre - post)", "have \"p + k * post \\<le> k * pre\""], ["proof (prove)\nusing this:\n  p \\<le> k * (pre - post)\n\ngoal (1 subgoal):\n 1. p + k * post \\<le> k * pre", "using \\<open>p>0\\<close>"], ["proof (prove)\nusing this:\n  p \\<le> k * (pre - post)\n  0 < p\n\ngoal (1 subgoal):\n 1. p + k * post \\<le> k * pre", "using diff_mult_distrib2"], ["proof (prove)\nusing this:\n  p \\<le> k * (pre - post)\n  0 < p\n  ?k * (?m - ?n) = ?k * ?m - ?k * ?n\n\ngoal (1 subgoal):\n 1. p + k * post \\<le> k * pre", "by auto"], ["proof (state)\nthis:\n  p + k * post \\<le> k * pre\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "then"], ["proof (chain)\npicking this:\n  p + k * post \\<le> k * pre", "have ii: \"enat p + k * Q' t \\<le> k * P' s\""], ["proof (prove)\nusing this:\n  p + k * post \\<le> k * pre\n\ngoal (1 subgoal):\n 1. enat p + enat k * Q' t \\<le> enat k * P' s", "unfolding post pre"], ["proof (prove)\nusing this:\n  p + k * post \\<le> k * pre\n\ngoal (1 subgoal):\n 1. enat p + enat k * enat post \\<le> enat k * enat pre", "by simp"], ["proof (state)\nthis:\n  enat p + enat k * Q' t \\<le> enat k * P' s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q' t \\<le> enat k * P' s", "from i ii"], ["proof (chain)\npicking this:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  enat p + enat k * Q' t \\<le> enat k * P' s", "show \"(\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + k * Q' t \\<le> k * P' s)\""], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  enat p + enat k * Q' t \\<le> enat k * P' s\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat k * Q' t \\<le> enat k * P' s", "by auto"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * Q' t \\<le> enat k * P' s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Turnstile>\\<^sub>2\\<^sub>' {P'} c {Q'}\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Nielson can be simulated by quanthoare *)"], ["", "lemma assumes s: \"\\<Turnstile>\\<^sub>2\\<^sub>' { %s . emb (\\<forall>l. P l s) + enat (e s) } c { %s. emb (\\<forall>l. Q l s) }\" (is \"\\<Turnstile>\\<^sub>2\\<^sub>' { ?P } c { ?Q }\")\n    and sP: \"\\<And>l t. P l t \\<Longrightarrow> \\<forall>l. P l t\" (* \"support P = {}\" *)\n    and sQ: \"\\<And>l t. Q l t \\<Longrightarrow> \\<forall>l. Q l t\" (* \"support Q = {}\" *)\n  shows  NielsonQuant: \"\\<Turnstile>\\<^sub>1 { P } c { e \\<Down> Q }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>1 {P} c { e \\<Down>Q}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>1 {P} c { e \\<Down>Q}", "from s"], ["proof (chain)\npicking this:\n  \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                   \\<up> (\\<forall>l. P l s) + enat (e s)}\n  c {\\<lambda>s. \\<up> (\\<forall>l. Q l s)}", "obtain k where k: \"k>0\" and qd: \"\\<And>s. ?P s < \\<infinity> \\<longrightarrow> (\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat k * ?Q t \\<le> enat k * ?P s)\""], ["proof (prove)\nusing this:\n  \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                   \\<up> (\\<forall>l. P l s) + enat (e s)}\n  c {\\<lambda>s. \\<up> (\\<forall>l. Q l s)}\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>0 < k;\n         \\<And>s.\n            \\<up> (\\<forall>l. P l s) + enat (e s)\n            < \\<infinity> \\<longrightarrow>\n            (\\<exists>t p.\n                (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                enat p + enat k * \\<up> (\\<forall>l. Q l t)\n                \\<le> enat k *\n                      (\\<up> (\\<forall>l. P l s) + enat (e s)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding QuantK_Hoare.hoare2o_valid_def"], ["proof (prove)\nusing this:\n  \\<exists>k>0.\n     \\<forall>s.\n        \\<up> (\\<forall>l. P l s) + enat (e s)\n        < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * \\<up> (\\<forall>l. Q l t)\n            \\<le> enat k * (\\<up> (\\<forall>l. P l s) + enat (e s)))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>0 < k;\n         \\<And>s.\n            \\<up> (\\<forall>l. P l s) + enat (e s)\n            < \\<infinity> \\<longrightarrow>\n            (\\<exists>t p.\n                (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                enat p + enat k * \\<up> (\\<forall>l. Q l t)\n                \\<le> enat k *\n                      (\\<up> (\\<forall>l. P l s) + enat (e s)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  0 < k\n  \\<up> (\\<forall>l. P l ?s) + enat (e ?s) < \\<infinity> \\<longrightarrow>\n  (\\<exists>t p.\n      (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n      enat p + enat k * \\<up> (\\<forall>l. Q l t)\n      \\<le> enat k * (\\<up> (\\<forall>l. P l ?s) + enat (e ?s)))\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>1 {P} c { e \\<Down>Q}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>1 {P} c { e \\<Down>Q}", "unfolding hoare1_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          P l s \\<longrightarrow>\n          (\\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n              p \\<le> k * e s \\<and> Q l t)", "apply(rule exI[where x=k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<and>\n    (\\<forall>l s.\n        P l s \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            p \\<le> k * e s \\<and> Q l t))", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < k\n 2. \\<And>l s.\n       P l s \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          p \\<le> k * e s \\<and> Q l t", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l s.\n       P l s \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          p \\<le> k * e s \\<and> Q l t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l s.\n       P l s \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          p \\<le> k * e s \\<and> Q l t", "fix l s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l s.\n       P l s \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          p \\<le> k * e s \\<and> Q l t", "assume P': \"P l s\""], ["proof (state)\nthis:\n  P l s\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       P l s \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          p \\<le> k * e s \\<and> Q l t", "then"], ["proof (chain)\npicking this:\n  P l s", "have aP: \"\\<forall>l. P l s\""], ["proof (prove)\nusing this:\n  P l s\n\ngoal (1 subgoal):\n 1. \\<forall>l. P l s", "using sP"], ["proof (prove)\nusing this:\n  P l s\n  P ?l ?t \\<Longrightarrow> \\<forall>l. P l ?t\n\ngoal (1 subgoal):\n 1. \\<forall>l. P l s", "by auto"], ["proof (state)\nthis:\n  \\<forall>l. P l s\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       P l s \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          p \\<le> k * e s \\<and> Q l t", "then"], ["proof (chain)\npicking this:\n  \\<forall>l. P l s", "have P: \"?P s < \\<infinity>\""], ["proof (prove)\nusing this:\n  \\<forall>l. P l s\n\ngoal (1 subgoal):\n 1. \\<up> (\\<forall>l. P l s) + enat (e s) < \\<infinity>", "by auto"], ["proof (state)\nthis:\n  \\<up> (\\<forall>l. P l s) + enat (e s) < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       P l s \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          p \\<le> k * e s \\<and> Q l t", "with qd"], ["proof (chain)\npicking this:\n  \\<up> (\\<forall>l. P l ?s) + enat (e ?s) < \\<infinity> \\<longrightarrow>\n  (\\<exists>t p.\n      (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n      enat p + enat k * \\<up> (\\<forall>l. Q l t)\n      \\<le> enat k * (\\<up> (\\<forall>l. P l ?s) + enat (e ?s)))\n  \\<up> (\\<forall>l. P l s) + enat (e s) < \\<infinity>", "obtain p t where i: \"(c, s) \\<Rightarrow> p \\<Down> t\" and p: \"enat p + enat k * ?Q t \\<le> enat k * ?P s\""], ["proof (prove)\nusing this:\n  \\<up> (\\<forall>l. P l ?s) + enat (e ?s) < \\<infinity> \\<longrightarrow>\n  (\\<exists>t p.\n      (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n      enat p + enat k * \\<up> (\\<forall>l. Q l t)\n      \\<le> enat k * (\\<up> (\\<forall>l. P l ?s) + enat (e ?s)))\n  \\<up> (\\<forall>l. P l s) + enat (e s) < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        \\<lbrakk>(c, s) \\<Rightarrow> p \\<Down> t;\n         enat p + enat k * \\<up> (\\<forall>l. Q l t)\n         \\<le> enat k * (\\<up> (\\<forall>l. P l s) + enat (e s))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  enat p + enat k * \\<up> (\\<forall>l. Q l t)\n  \\<le> enat k * (\\<up> (\\<forall>l. P l s) + enat (e s))\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       P l s \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          p \\<le> k * e s \\<and> Q l t", "have t: \"\\<down>\\<^sub>s (c, s) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>s (c, s) = t", "using bigstepT_the_state[OF i]"], ["proof (prove)\nusing this:\n  \\<down>\\<^sub>s (c, s) = t\n\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>s (c, s) = t", "by auto"], ["proof (state)\nthis:\n  \\<down>\\<^sub>s (c, s) = t\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       P l s \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          p \\<le> k * e s \\<and> Q l t", "from P"], ["proof (chain)\npicking this:\n  \\<up> (\\<forall>l. P l s) + enat (e s) < \\<infinity>", "have Q: \"Q l t\""], ["proof (prove)\nusing this:\n  \\<up> (\\<forall>l. P l s) + enat (e s) < \\<infinity>\n\ngoal (1 subgoal):\n 1. Q l t", "using p k"], ["proof (prove)\nusing this:\n  \\<up> (\\<forall>l. P l s) + enat (e s) < \\<infinity>\n  enat p + enat k * \\<up> (\\<forall>l. Q l t)\n  \\<le> enat k * (\\<up> (\\<forall>l. P l s) + enat (e s))\n  0 < k\n\ngoal (1 subgoal):\n 1. Q l t", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>enat p + enat k * \\<up> (\\<forall>l. Q l t)\n                \\<le> enat (k * i);\n        0 < k; \\<up> (\\<forall>l. P l s) + enat (e s) = enat i\\<rbrakk>\n       \\<Longrightarrow> Q l t", "by (metis (full_types) emb.simps(1) enat_ord_simps(2) imult_is_infinity infinity_ileE not_less_zero plus_enat_simps(3))"], ["proof (state)\nthis:\n  Q l t\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       P l s \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          p \\<le> k * e s \\<and> Q l t", "with sQ"], ["proof (chain)\npicking this:\n  Q ?l ?t \\<Longrightarrow> \\<forall>l. Q l ?t\n  Q l t", "have \"\\<forall>l. Q l t\""], ["proof (prove)\nusing this:\n  Q ?l ?t \\<Longrightarrow> \\<forall>l. Q l ?t\n  Q l t\n\ngoal (1 subgoal):\n 1. \\<forall>l. Q l t", "by auto"], ["proof (state)\nthis:\n  \\<forall>l. Q l t\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       P l s \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          p \\<le> k * e s \\<and> Q l t", "then"], ["proof (chain)\npicking this:\n  \\<forall>l. Q l t", "have \"?Q t = 0\""], ["proof (prove)\nusing this:\n  \\<forall>l. Q l t\n\ngoal (1 subgoal):\n 1. \\<up> (\\<forall>l. Q l t) = 0", "by auto"], ["proof (state)\nthis:\n  \\<up> (\\<forall>l. Q l t) = 0\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       P l s \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          p \\<le> k * e s \\<and> Q l t", "with p"], ["proof (chain)\npicking this:\n  enat p + enat k * \\<up> (\\<forall>l. Q l t)\n  \\<le> enat k * (\\<up> (\\<forall>l. P l s) + enat (e s))\n  \\<up> (\\<forall>l. Q l t) = 0", "have \"enat p \\<le> enat k * ?P s\""], ["proof (prove)\nusing this:\n  enat p + enat k * \\<up> (\\<forall>l. Q l t)\n  \\<le> enat k * (\\<up> (\\<forall>l. P l s) + enat (e s))\n  \\<up> (\\<forall>l. Q l t) = 0\n\ngoal (1 subgoal):\n 1. enat p \\<le> enat k * (\\<up> (\\<forall>l. P l s) + enat (e s))", "by auto"], ["proof (state)\nthis:\n  enat p \\<le> enat k * (\\<up> (\\<forall>l. P l s) + enat (e s))\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       P l s \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          p \\<le> k * e s \\<and> Q l t", "with aP"], ["proof (chain)\npicking this:\n  \\<forall>l. P l s\n  enat p \\<le> enat k * (\\<up> (\\<forall>l. P l s) + enat (e s))", "have p': \"p \\<le> k * e s\""], ["proof (prove)\nusing this:\n  \\<forall>l. P l s\n  enat p \\<le> enat k * (\\<up> (\\<forall>l. P l s) + enat (e s))\n\ngoal (1 subgoal):\n 1. p \\<le> k * e s", "by auto"], ["proof (state)\nthis:\n  p \\<le> k * e s\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       P l s \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          p \\<le> k * e s \\<and> Q l t", "from i Q p'"], ["proof (chain)\npicking this:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  Q l t\n  p \\<le> k * e s", "show \"\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> p \\<le> k * e s \\<and> Q l t\""], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  Q l t\n  p \\<le> k * e s\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> p \\<le> k * e s \\<and> Q l t", "by blast"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c, s) \\<Rightarrow> p \\<Down> t \\<and> p \\<le> k * e s \\<and> Q l t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Turnstile>\\<^sub>1 {P} c { e \\<Down>Q}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Relation SepLogic to quantHoare\\<close>"], ["", "definition em :: \"qassn \\<Rightarrow> (pstate_t \\<Rightarrow> bool)\" where\n  \"em P = (%(ps,n). (\\<forall>ex. P (Partial_Evaluation.emb ps ex) \\<le> enat n) )\""], ["", "(* with equality next lemma also works *)"], ["", "lemma assumes s: \"\\<Turnstile>\\<^sub>3\\<^sub>' { em P} c { em Q }\"\nshows  \"\\<Turnstile>\\<^sub>2\\<^sub>' { P } c { Q }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "from s"], ["proof (chain)\npicking this:\n  \\<Turnstile>\\<^sub>3\\<^sub>' {em P} c { em Q}", "obtain k where k: \"0<k\" and s': \"\\<And>ps n. em P (ps, n) \\<Longrightarrow> (\\<exists>ps' ps'' m e e'. (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps'+ ps'' \\<and> ps' ## ps'' \\<and> k * n = k * e + e' + m \\<and> em Q (ps', e))\""], ["proof (prove)\nusing this:\n  \\<Turnstile>\\<^sub>3\\<^sub>' {em P} c { em Q}\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>0 < k;\n         \\<And>ps n.\n            em P (ps, n) \\<Longrightarrow>\n            \\<exists>ps' ps'' m e e'.\n               (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n               ps' ## ps'' \\<and>\n               k * n = k * e + e' + m \\<and> em Q (ps', e)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding hoare3o_valid_def"], ["proof (prove)\nusing this:\n  \\<exists>k>0.\n     \\<forall>ps n.\n        em P (ps, n) \\<longrightarrow>\n        (\\<exists>ps' ps'' m e e'.\n            (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n            ps' ## ps'' \\<and> k * n = k * e + e' + m \\<and> em Q (ps', e))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>0 < k;\n         \\<And>ps n.\n            em P (ps, n) \\<Longrightarrow>\n            \\<exists>ps' ps'' m e e'.\n               (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n               ps' ## ps'' \\<and>\n               k * n = k * e + e' + m \\<and> em Q (ps', e)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  0 < k\n  em P (?ps, ?n) \\<Longrightarrow>\n  \\<exists>ps' ps'' m e e'.\n     (c, ?ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n     ps' ## ps'' \\<and> k * ?n = k * e + e' + m \\<and> em Q (ps', e)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "{"], ["proof (state)\nthis:\n  0 < k\n  em P (?ps, ?n) \\<Longrightarrow>\n  \\<exists>ps' ps'' m e e'.\n     (c, ?ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n     ps' ## ps'' \\<and> k * ?n = k * e + e' + m \\<and> em Q (ps', e)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "assume P: \"P s < \\<infinity>\""], ["proof (state)\nthis:\n  P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "then"], ["proof (chain)\npicking this:\n  P s < \\<infinity>", "obtain n where n: \"P s = enat n\""], ["proof (prove)\nusing this:\n  P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>n. P s = enat n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  P s = enat n\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "with P"], ["proof (chain)\npicking this:\n  P s < \\<infinity>\n  P s = enat n", "have \"em P (part s, n)\""], ["proof (prove)\nusing this:\n  P s < \\<infinity>\n  P s = enat n\n\ngoal (1 subgoal):\n 1. em P (part s, n)", "unfolding em_def"], ["proof (prove)\nusing this:\n  P s < \\<infinity>\n  P s = enat n\n\ngoal (1 subgoal):\n 1. case (part s, n) of\n    (ps, n) \\<Rightarrow>\n      \\<forall>ex. P (Partial_Evaluation.emb ps ex) \\<le> enat n", "by auto"], ["proof (state)\nthis:\n  em P (part s, n)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "with s'"], ["proof (chain)\npicking this:\n  em P (?ps, ?n) \\<Longrightarrow>\n  \\<exists>ps' ps'' m e e'.\n     (c, ?ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n     ps' ## ps'' \\<and> k * ?n = k * e + e' + m \\<and> em Q (ps', e)\n  em P (part s, n)", "obtain ps' ps'' m e e' where c: \"(c, part s) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps''\" and orth: \"ps' ## ps''\"\n              and m: \"k * n = k * e + e' + m\" and Q: \"em Q (ps', e)\""], ["proof (prove)\nusing this:\n  em P (?ps, ?n) \\<Longrightarrow>\n  \\<exists>ps' ps'' m e e'.\n     (c, ?ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n     ps' ## ps'' \\<and> k * ?n = k * e + e' + m \\<and> em Q (ps', e)\n  em P (part s, n)\n\ngoal (1 subgoal):\n 1. (\\<And>m ps' ps'' e e'.\n        \\<lbrakk>(c, part s) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'';\n         ps' ## ps''; k * n = k * e + e' + m; em Q (ps', e)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c, part s) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps''\n  ps' ## ps''\n  k * n = k * e + e' + m\n  em Q (ps', e)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "from Q"], ["proof (chain)\npicking this:\n  em Q (ps', e)", "have q: \"Q (Partial_Evaluation.emb ps' (Partial_Evaluation.emb ps'' (\\<lambda>_. 0))) \\<le> enat (e)\""], ["proof (prove)\nusing this:\n  em Q (ps', e)\n\ngoal (1 subgoal):\n 1. Q (Partial_Evaluation.emb ps'\n        (Partial_Evaluation.emb ps'' (\\<lambda>_. 0)))\n    \\<le> enat e", "unfolding em_def"], ["proof (prove)\nusing this:\n  case (ps', e) of\n  (ps, n) \\<Rightarrow>\n    \\<forall>ex. Q (Partial_Evaluation.emb ps ex) \\<le> enat n\n\ngoal (1 subgoal):\n 1. Q (Partial_Evaluation.emb ps'\n        (Partial_Evaluation.emb ps'' (\\<lambda>_. 0)))\n    \\<le> enat e", "by auto"], ["proof (state)\nthis:\n  Q (Partial_Evaluation.emb ps'\n      (Partial_Evaluation.emb ps'' (\\<lambda>_. 0)))\n  \\<le> enat e\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "have z: \"(Partial_Evaluation.emb ps' (Partial_Evaluation.emb ps'' (\\<lambda>_. 0))) = (Partial_Evaluation.emb (ps'+ps'') (\\<lambda>_. 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Partial_Evaluation.emb ps'\n     (Partial_Evaluation.emb ps'' (\\<lambda>_. 0)) =\n    Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0)", "unfolding Partial_Evaluation.emb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v.\n        case ps' v of\n        None \\<Rightarrow>\n          case ps'' v of None \\<Rightarrow> 0 | Some r \\<Rightarrow> r\n        | Some r \\<Rightarrow> r) =\n    (\\<lambda>v.\n        case (ps' + ps'') v of None \\<Rightarrow> 0\n        | Some r \\<Rightarrow> r)", "apply (auto simp: plus_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v.\n        case ps' v of\n        None \\<Rightarrow>\n          case ps'' v of None \\<Rightarrow> 0 | Some r \\<Rightarrow> r\n        | Some r \\<Rightarrow> r) =\n    (\\<lambda>v.\n        case if ps'' v = None then ps' v else ps'' v of None \\<Rightarrow> 0\n        | Some r \\<Rightarrow> r)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       (case ps' v of\n        None \\<Rightarrow>\n          case ps'' v of None \\<Rightarrow> 0 | Some r \\<Rightarrow> r\n        | Some r \\<Rightarrow> r) =\n       (case if ps'' v = None then ps' v else ps'' v of None \\<Rightarrow> 0\n        | Some r \\<Rightarrow> r)", "subgoal for v"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case ps' v of\n     None \\<Rightarrow>\n       case ps'' v of None \\<Rightarrow> 0 | Some r \\<Rightarrow> r\n     | Some r \\<Rightarrow> r) =\n    (case if ps'' v = None then ps' v else ps'' v of None \\<Rightarrow> 0\n     | Some r \\<Rightarrow> r)", "apply (cases \"ps' v\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. ps' v = None \\<Longrightarrow>\n    (case ps' v of\n     None \\<Rightarrow>\n       case ps'' v of None \\<Rightarrow> 0 | Some r \\<Rightarrow> r\n     | Some r \\<Rightarrow> r) =\n    (case if ps'' v = None then ps' v else ps'' v of None \\<Rightarrow> 0\n     | Some r \\<Rightarrow> r)\n 2. \\<And>a.\n       ps' v = Some a \\<Longrightarrow>\n       (case ps' v of\n        None \\<Rightarrow>\n          case ps'' v of None \\<Rightarrow> 0 | Some r \\<Rightarrow> r\n        | Some r \\<Rightarrow> r) =\n       (case if ps'' v = None then ps' v else ps'' v of None \\<Rightarrow> 0\n        | Some r \\<Rightarrow> r)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a y.\n       \\<lbrakk>ps' v = Some a; ps'' v = Some y\\<rbrakk>\n       \\<Longrightarrow> a = y", "using orth"], ["proof (prove)\nusing this:\n  ps' ## ps''\n\ngoal (1 subgoal):\n 1. \\<And>a y.\n       \\<lbrakk>ps' v = Some a; ps'' v = Some y\\<rbrakk>\n       \\<Longrightarrow> a = y", "by (auto simp: sep_disj_fun_def domain_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Partial_Evaluation.emb ps' (Partial_Evaluation.emb ps'' (\\<lambda>_. 0)) =\n  Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "from q z"], ["proof (chain)\npicking this:\n  Q (Partial_Evaluation.emb ps'\n      (Partial_Evaluation.emb ps'' (\\<lambda>_. 0)))\n  \\<le> enat e\n  Partial_Evaluation.emb ps' (Partial_Evaluation.emb ps'' (\\<lambda>_. 0)) =\n  Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0)", "have q:  \"enat k * Q (Partial_Evaluation.emb (ps'+ps'') (\\<lambda>_. 0)) \\<le> enat k * enat e\""], ["proof (prove)\nusing this:\n  Q (Partial_Evaluation.emb ps'\n      (Partial_Evaluation.emb ps'' (\\<lambda>_. 0)))\n  \\<le> enat e\n  Partial_Evaluation.emb ps' (Partial_Evaluation.emb ps'' (\\<lambda>_. 0)) =\n  Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0)\n\ngoal (1 subgoal):\n 1. enat k * Q (Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0))\n    \\<le> enat k * enat e", "using k"], ["proof (prove)\nusing this:\n  Q (Partial_Evaluation.emb ps'\n      (Partial_Evaluation.emb ps'' (\\<lambda>_. 0)))\n  \\<le> enat e\n  Partial_Evaluation.emb ps' (Partial_Evaluation.emb ps'' (\\<lambda>_. 0)) =\n  Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0)\n  0 < k\n\ngoal (1 subgoal):\n 1. enat k * Q (Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0))\n    \\<le> enat k * enat e", "by (metis i0_lb mult_left_mono)"], ["proof (state)\nthis:\n  enat k * Q (Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0))\n  \\<le> enat k * enat e\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "have i: \"(c, s) \\<Rightarrow> m \\<Down> (Partial_Evaluation.emb (ps'+ps'') (\\<lambda>_. 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, s) \\<Rightarrow> m \\<Down> Partial_Evaluation.emb (ps' + ps'')\n                                    (\\<lambda>_. 0)", "using  part_to_full'[OF c]"], ["proof (prove)\nusing this:\n  (c, Partial_Evaluation.emb (part s)\n       ?s) \\<Rightarrow> m \\<Down> Partial_Evaluation.emb (ps' + ps'') ?s\n\ngoal (1 subgoal):\n 1. (c, s) \\<Rightarrow> m \\<Down> Partial_Evaluation.emb (ps' + ps'')\n                                    (\\<lambda>_. 0)", "by simp"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> m \\<Down> Partial_Evaluation.emb (ps' + ps'')\n                                  (\\<lambda>_. 0)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "have ii: \"enat m + enat k * Q (Partial_Evaluation.emb (ps'+ps'') (\\<lambda>_. 0)) \\<le> enat k * P s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat m +\n    enat k * Q (Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0))\n    \\<le> enat k * P s", "unfolding  n"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat m +\n    enat k * Q (Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0))\n    \\<le> enat k * enat n", "using q m"], ["proof (prove)\nusing this:\n  enat k * Q (Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0))\n  \\<le> enat k * enat e\n  k * n = k * e + e' + m\n\ngoal (1 subgoal):\n 1. enat m +\n    enat k * Q (Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0))\n    \\<le> enat k * enat n", "using enat_ile"], ["proof (prove)\nusing this:\n  enat k * Q (Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0))\n  \\<le> enat k * enat e\n  k * n = k * e + e' + m\n  ?n \\<le> enat ?m \\<Longrightarrow> \\<exists>k. ?n = enat k\n\ngoal (1 subgoal):\n 1. enat m +\n    enat k * Q (Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0))\n    \\<le> enat k * enat n", "by fastforce"], ["proof (state)\nthis:\n  enat m + enat k * Q (Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0))\n  \\<le> enat k * P s\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "from i ii"], ["proof (chain)\npicking this:\n  (c, s) \\<Rightarrow> m \\<Down> Partial_Evaluation.emb (ps' + ps'')\n                                  (\\<lambda>_. 0)\n  enat m + enat k * Q (Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0))\n  \\<le> enat k * P s", "have \"(\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat k * Q t \\<le> enat k * P s)\""], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> m \\<Down> Partial_Evaluation.emb (ps' + ps'')\n                                  (\\<lambda>_. 0)\n  enat m + enat k * Q (Partial_Evaluation.emb (ps' + ps'') (\\<lambda>_. 0))\n  \\<le> enat k * P s\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat k * Q t \\<le> enat k * P s", "by auto"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * Q t \\<le> enat k * P s\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "}"], ["proof (state)\nthis:\n  P ?s2 < \\<infinity> \\<Longrightarrow>\n  \\<exists>t p.\n     (c, ?s2) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * Q t \\<le> enat k * P ?s2\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "note B=this"], ["proof (state)\nthis:\n  P ?s2 < \\<infinity> \\<Longrightarrow>\n  \\<exists>t p.\n     (c, ?s2) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * Q t \\<le> enat k * P ?s2\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "unfolding QuantK_Hoare.hoare2o_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          P s < \\<infinity> \\<longrightarrow>\n          (\\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat p + enat k * Q t \\<le> enat k * P s)", "apply(rule exI[where x=k], safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < k\n 2. \\<And>s.\n       P s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q t \\<le> enat k * P s", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       P s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * Q t \\<le> enat k * P s", "apply (fact B)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}\n\ngoal:\nNo subgoals!", "qed"], ["", "definition embe :: \"(pstate_t \\<Rightarrow> bool) \\<Rightarrow> qassn\" where\n    \"embe P = (%s. Inf {enat n|n. P (part s, n)} )\""], ["", "lemma assumes s: \"\\<Turnstile>\\<^sub>2\\<^sub>' { embe P } c { embe Q }\" and full: \"\\<And>ps n. P (ps,n) \\<Longrightarrow> dom ps = UNIV\"            \n  shows  \"\\<Turnstile>\\<^sub>3\\<^sub>' {  P} c { Q }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "from s"], ["proof (chain)\npicking this:\n  \\<Turnstile>\\<^sub>2\\<^sub>' {embe P} c {embe Q}", "obtain k where k: \"k>0\" and s: \"\\<And>s. embe P s < \\<infinity> \\<longrightarrow> (\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat k * embe Q t \\<le> enat k * embe P s)\""], ["proof (prove)\nusing this:\n  \\<Turnstile>\\<^sub>2\\<^sub>' {embe P} c {embe Q}\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>0 < k;\n         \\<And>s.\n            embe P s < \\<infinity> \\<longrightarrow>\n            (\\<exists>t p.\n                (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                enat p + enat k * embe Q t \\<le> enat k * embe P s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding QuantK_Hoare.hoare2o_valid_def"], ["proof (prove)\nusing this:\n  \\<exists>k>0.\n     \\<forall>s.\n        embe P s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * embe Q t \\<le> enat k * embe P s)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>0 < k;\n         \\<And>s.\n            embe P s < \\<infinity> \\<longrightarrow>\n            (\\<exists>t p.\n                (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                enat p + enat k * embe Q t \\<le> enat k * embe P s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  0 < k\n  embe P ?s < \\<infinity> \\<longrightarrow>\n  (\\<exists>t p.\n      (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n      enat p + enat k * embe Q t \\<le> enat k * embe P ?s)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "{"], ["proof (state)\nthis:\n  0 < k\n  embe P ?s < \\<infinity> \\<longrightarrow>\n  (\\<exists>t p.\n      (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n      enat p + enat k * embe Q t \\<le> enat k * embe P ?s)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "fix ps n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "let ?s =\" (Partial_Evaluation.emb ps (\\<lambda>_. 0))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "assume P: \"P (ps, n)\""], ["proof (state)\nthis:\n  P (ps, n)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "with full"], ["proof (chain)\npicking this:\n  P (?ps, ?n) \\<Longrightarrow> dom ?ps = UNIV\n  P (ps, n)", "have \"dom ps = UNIV\""], ["proof (prove)\nusing this:\n  P (?ps, ?n) \\<Longrightarrow> dom ?ps = UNIV\n  P (ps, n)\n\ngoal (1 subgoal):\n 1. dom ps = UNIV", "by auto"], ["proof (state)\nthis:\n  dom ps = UNIV\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "then"], ["proof (chain)\npicking this:\n  dom ps = UNIV", "have ps: \"part ?s = ps\""], ["proof (prove)\nusing this:\n  dom ps = UNIV\n\ngoal (1 subgoal):\n 1. part (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = ps", "by simp"], ["proof (state)\nthis:\n  part (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = ps\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "from P"], ["proof (chain)\npicking this:\n  P (ps, n)", "have l': \"({enat n |n. P (ps, n)} = {}) =  False \""], ["proof (prove)\nusing this:\n  P (ps, n)\n\ngoal (1 subgoal):\n 1. ({enat n |n. P (ps, n)} = {}) = False", "by auto"], ["proof (state)\nthis:\n  ({enat n |n. P (ps, n)} = {}) = False\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "have t: \"embe P ?s < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) < \\<infinity>", "unfolding embe_def Inf_enat_def ps l'"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if False then \\<infinity> else LEAST x. x \\<in> {enat n |n. P (ps, n)})\n    < \\<infinity>", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (if False then \\<infinity>\n            else LEAST x. x \\<in> {enat n |n. P (ps, n)})\n           < \\<infinity> \\<Longrightarrow>\n    False", "using l'"], ["proof (prove)\nusing this:\n  ({enat n |n. P (ps, n)} = {}) = False\n\ngoal (1 subgoal):\n 1. \\<not> (if False then \\<infinity>\n            else LEAST x. x \\<in> {enat n |n. P (ps, n)})\n           < \\<infinity> \\<Longrightarrow>\n    False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(LEAST x. \\<exists>n. x = enat n \\<and> P (ps, n)) =\n                \\<infinity>;\n        P (ps, n)\\<rbrakk>\n       \\<Longrightarrow> False", "by (metis (mono_tags, lifting) Least_le infinity_ileE)"], ["proof (state)\nthis:\n  embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "with s"], ["proof (chain)\npicking this:\n  embe P ?s < \\<infinity> \\<longrightarrow>\n  (\\<exists>t p.\n      (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n      enat p + enat k * embe Q t \\<le> enat k * embe P ?s)\n  embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) < \\<infinity>", "obtain t p where c: \"(c, ?s) \\<Rightarrow> p \\<Down> t\" and ineq: \"enat p + enat k * embe Q t \\<le> enat k * embe P ?s\""], ["proof (prove)\nusing this:\n  embe P ?s < \\<infinity> \\<longrightarrow>\n  (\\<exists>t p.\n      (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n      enat p + enat k * embe Q t \\<le> enat k * embe P ?s)\n  embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        \\<lbrakk>(c, Partial_Evaluation.emb ps\n                      (\\<lambda>_. 0)) \\<Rightarrow> p \\<Down> t;\n         enat p + enat k * embe Q t\n         \\<le> enat k *\n               embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c, Partial_Evaluation.emb ps (\\<lambda>_. 0)) \\<Rightarrow> p \\<Down> t\n  enat p + enat k * embe Q t\n  \\<le> enat k * embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0))\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "from t"], ["proof (chain)\npicking this:\n  embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) < \\<infinity>", "obtain z where z: \"embe P ?s = enat z\""], ["proof (prove)\nusing this:\n  embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) =\n        enat z \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using less_infinityE"], ["proof (prove)\nusing this:\n  embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) < \\<infinity>\n  \\<lbrakk>?n < \\<infinity>;\n   \\<And>k. ?n = enat k \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) =\n        enat z \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = enat z\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "with ineq"], ["proof (chain)\npicking this:\n  enat p + enat k * embe Q t\n  \\<le> enat k * embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0))\n  embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = enat z", "obtain y where y: \"embe Q t = enat y\""], ["proof (prove)\nusing this:\n  enat p + enat k * embe Q t\n  \\<le> enat k * embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0))\n  embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = enat z\n\ngoal (1 subgoal):\n 1. (\\<And>y. embe Q t = enat y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using k"], ["proof (prove)\nusing this:\n  enat p + enat k * embe Q t\n  \\<le> enat k * embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0))\n  embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = enat z\n  0 < k\n\ngoal (1 subgoal):\n 1. (\\<And>y. embe Q t = enat y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  embe Q t = enat y\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "then"], ["proof (chain)\npicking this:\n  embe Q t = enat y", "have l: \"embe Q t < \\<infinity>\""], ["proof (prove)\nusing this:\n  embe Q t = enat y\n\ngoal (1 subgoal):\n 1. embe Q t < \\<infinity>", "by auto"], ["proof (state)\nthis:\n  embe Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "then"], ["proof (chain)\npicking this:\n  embe Q t < \\<infinity>", "have zz: \"({enat n|n. Q (part t, n)} = {}) = False\""], ["proof (prove)\nusing this:\n  embe Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. ({enat n |n. Q (part t, n)} = {}) = False", "unfolding embe_def Inf_enat_def"], ["proof (prove)\nusing this:\n  (if {enat n |n. Q (part t, n)} = {} then \\<infinity>\n   else LEAST x. x \\<in> {enat n |n. Q (part t, n)})\n  < \\<infinity>\n\ngoal (1 subgoal):\n 1. ({enat n |n. Q (part t, n)} = {}) = False", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(if {enat n |n. Q (part t, n)} = {} then \\<infinity>\n              else LEAST x. x \\<in> {enat n |n. Q (part t, n)})\n             < \\<infinity>;\n     {enat n |n. Q (part t, n)} = {}\\<rbrakk>\n    \\<Longrightarrow> False", "by simp"], ["proof (state)\nthis:\n  ({enat n |n. Q (part t, n)} = {}) = False\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "from y"], ["proof (chain)\npicking this:\n  embe Q t = enat y", "have \"Q (part t, y)\""], ["proof (prove)\nusing this:\n  embe Q t = enat y\n\ngoal (1 subgoal):\n 1. Q (part t, y)", "unfolding embe_def zz Inf_enat_def"], ["proof (prove)\nusing this:\n  (if False then \\<infinity>\n   else LEAST x. x \\<in> {enat n |n. Q (part t, n)}) =\n  enat y\n\ngoal (1 subgoal):\n 1. Q (part t, y)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST x. \\<exists>n. x = enat n \\<and> Q (part t, n)) =\n    enat y \\<Longrightarrow>\n    Q (part t, y)", "using zz"], ["proof (prove)\nusing this:\n  ({enat n |n. Q (part t, n)} = {}) = False\n\ngoal (1 subgoal):\n 1. (LEAST x. \\<exists>n. x = enat n \\<and> Q (part t, n)) =\n    enat y \\<Longrightarrow>\n    Q (part t, y)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(LEAST x. \\<exists>n. x = enat n \\<and> Q (part t, n)) =\n                enat y;\n        Q (part t, n)\\<rbrakk>\n       \\<Longrightarrow> Q (part t, y)", "by (smt Collect_empty_eq LeastI enat.inject)"], ["proof (state)\nthis:\n  Q (part t, y)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "from full_to_part[OF c] ps"], ["proof (chain)\npicking this:\n  (c, part\n       (Partial_Evaluation.emb ps\n         (\\<lambda>_. 0))) \\<Rightarrow>\\<^sub>A p \\<Down> part t\n  part (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = ps", "have c': \"(c, ps) \\<Rightarrow>\\<^sub>A p \\<Down> part t\""], ["proof (prove)\nusing this:\n  (c, part\n       (Partial_Evaluation.emb ps\n         (\\<lambda>_. 0))) \\<Rightarrow>\\<^sub>A p \\<Down> part t\n  part (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = ps\n\ngoal (1 subgoal):\n 1. (c, ps) \\<Rightarrow>\\<^sub>A p \\<Down> part t", "by auto"], ["proof (state)\nthis:\n  (c, ps) \\<Rightarrow>\\<^sub>A p \\<Down> part t\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "have \"\\<And>P n. P (n::nat) \\<Longrightarrow> (LEAST n. P n) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P n. P n \\<Longrightarrow> (LEAST n. P n) \\<le> n", "apply(rule Least_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P n. P n \\<Longrightarrow> P n", "by auto"], ["proof (state)\nthis:\n  ?P ?n \\<Longrightarrow> (LEAST n. ?P n) \\<le> ?n\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "from z P"], ["proof (chain)\npicking this:\n  embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = enat z\n  P (ps, n)", "have zn: \"z \\<le> n\""], ["proof (prove)\nusing this:\n  embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = enat z\n  P (ps, n)\n\ngoal (1 subgoal):\n 1. z \\<le> n", "unfolding embe_def ps"], ["proof (prove)\nusing this:\n  Inf {enat n |n. P (ps, n)} = enat z\n  P (ps, n)\n\ngoal (1 subgoal):\n 1. z \\<le> n", "unfolding embe_def Inf_enat_def l'"], ["proof (prove)\nusing this:\n  (if False then \\<infinity> else LEAST x. x \\<in> {enat n |n. P (ps, n)}) =\n  enat z\n  P (ps, n)\n\ngoal (1 subgoal):\n 1. z \\<le> n", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(LEAST x. \\<exists>n. x = enat n \\<and> P (ps, n)) = enat z;\n     P (ps, n)\\<rbrakk>\n    \\<Longrightarrow> z \\<le> n", "by (metis (mono_tags, lifting) Least_le enat_ord_simps(1))"], ["proof (state)\nthis:\n  z \\<le> n\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "from ineq z y"], ["proof (chain)\npicking this:\n  enat p + enat k * embe Q t\n  \\<le> enat k * embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0))\n  embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = enat z\n  embe Q t = enat y", "have \"enat p + enat k * y \\<le> enat k * z\""], ["proof (prove)\nusing this:\n  enat p + enat k * embe Q t\n  \\<le> enat k * embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0))\n  embe P (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = enat z\n  embe Q t = enat y\n\ngoal (1 subgoal):\n 1. enat p + enat k * enat y \\<le> enat k * enat z", "by auto"], ["proof (state)\nthis:\n  enat p + enat k * enat y \\<le> enat k * enat z\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "then"], ["proof (chain)\npicking this:\n  enat p + enat k * enat y \\<le> enat k * enat z", "have \"p + k * y \\<le> k * z\""], ["proof (prove)\nusing this:\n  enat p + enat k * enat y \\<le> enat k * enat z\n\ngoal (1 subgoal):\n 1. p + k * y \\<le> k * z", "by auto"], ["proof (state)\nthis:\n  p + k * y \\<le> k * z\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "also"], ["proof (state)\nthis:\n  p + k * y \\<le> k * z\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "have \"\\<dots> \\<le> k * n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k * z \\<le> k * n", "using zn k"], ["proof (prove)\nusing this:\n  z \\<le> n\n  0 < k\n\ngoal (1 subgoal):\n 1. k * z \\<le> k * n", "by simp"], ["proof (state)\nthis:\n  k * z \\<le> k * n\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "finally"], ["proof (chain)\npicking this:\n  p + k * y \\<le> k * n", "obtain e' where \"k * n = k * y + e' + p\""], ["proof (prove)\nusing this:\n  p + k * y \\<le> k * n\n\ngoal (1 subgoal):\n 1. (\\<And>e'.\n        k * n = k * y + e' + p \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using k"], ["proof (prove)\nusing this:\n  p + k * y \\<le> k * n\n  0 < k\n\ngoal (1 subgoal):\n 1. (\\<And>e'.\n        k * n = k * y + e' + p \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis add.assoc add.commute le_iff_add)"], ["proof (state)\nthis:\n  k * n = k * y + e' + p\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "have \"\\<exists>ps' ps'' m e e'. (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and> ps' ## ps'' \\<and> k * n = k * e + e' + m \\<and> Q (ps', e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ps' ps'' m e e'.\n       (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n       ps' ## ps'' \\<and> k * n = k * e + e' + m \\<and> Q (ps', e)", "apply(rule exI[where x=\"part t\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ps'' m e e'.\n       (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> part t + ps'' \\<and>\n       part t ## ps'' \\<and> k * n = k * e + e' + m \\<and> Q (part t, e)", "apply(rule exI[where x=\"0\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m e e'.\n       (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> part t + 0 \\<and>\n       part t ## 0 \\<and> k * n = k * e + e' + m \\<and> Q (part t, e)", "apply(rule exI[where x=\"p\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e e'.\n       (c, ps) \\<Rightarrow>\\<^sub>A p \\<Down> part t + 0 \\<and>\n       part t ## 0 \\<and> k * n = k * e + e' + p \\<and> Q (part t, e)", "apply(rule exI[where x=\"y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e'.\n       (c, ps) \\<Rightarrow>\\<^sub>A p \\<Down> part t + 0 \\<and>\n       part t ## 0 \\<and> k * n = k * y + e' + p \\<and> Q (part t, y)", "apply(rule exI[where x=\"e'\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, ps) \\<Rightarrow>\\<^sub>A p \\<Down> part t + 0 \\<and>\n    part t ## 0 \\<and> k * n = k * y + e' + p \\<and> Q (part t, y)", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. (c, ps) \\<Rightarrow>\\<^sub>A p \\<Down> part t\n 2. k * n = k * y + e' + p\n 3. Q (part t, y)", "by fact+"], ["proof (state)\nthis:\n  \\<exists>ps' ps'' m e e'.\n     (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n     ps' ## ps'' \\<and> k * n = k * e + e' + m \\<and> Q (ps', e)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "}"], ["proof (state)\nthis:\n  P (?ps2, ?n2) \\<Longrightarrow>\n  \\<exists>ps' ps'' m e e'.\n     (c, ?ps2) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n     ps' ## ps'' \\<and> k * ?n2 = k * e + e' + m \\<and> Q (ps', e)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}", "unfolding hoare3o_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>ps n.\n          P (ps, n) \\<longrightarrow>\n          (\\<exists>ps' ps'' m e e'.\n              (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n              ps' ## ps'' \\<and> k * n = k * e + e' + m \\<and> Q (ps', e))", "apply(rule exI[where x=k], safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < k\n 2. \\<And>ps n.\n       P (ps, n) \\<Longrightarrow>\n       \\<exists>ps' ps'' m e e'.\n          (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n          ps' ## ps'' \\<and> k * n = k * e + e' + m \\<and> Q (ps', e)", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ps n.\n       P (ps, n) \\<Longrightarrow>\n       \\<exists>ps' ps'' m e e'.\n          (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n          ps' ## ps'' \\<and> k * n = k * e + e' + m \\<and> Q (ps', e)", "by fact"], ["proof (state)\nthis:\n  \\<Turnstile>\\<^sub>3\\<^sub>' {P} c { Q}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>A General Validity Predicate with Time\\<close>"], ["", "definition valid  where\n  \"valid P c Q n = (\\<forall>s. P s \\<longrightarrow> (\\<exists>s' m. (c, s) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> n \\<and> Q s'))\""], ["", "definition validk  where\n  \"validk P c Q n = (\\<exists>k>0. (\\<forall>s. P s \\<longrightarrow> (\\<exists>s' m. (c, s) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s')))\""], ["", "lemma \"validk P c Q n = (\\<exists>k>0. valid P c Q (k*n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. validk P c Q n = (\\<exists>k>0. valid P c Q (k * n))", "unfolding valid_def validk_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>k>0.\n        \\<forall>s.\n           P s \\<longrightarrow>\n           (\\<exists>s' m.\n               (c, s) \\<Rightarrow> m \\<Down> s' \\<and>\n               m \\<le> k * n \\<and> Q s')) =\n    (\\<exists>k>0.\n        \\<forall>s.\n           P s \\<longrightarrow>\n           (\\<exists>s' m.\n               (c, s) \\<Rightarrow> m \\<Down> s' \\<and>\n               m \\<le> k * n \\<and> Q s'))", "by simp"], ["", "subsubsection \\<open>Relation between valid predicate and Quantitative Hoare Logic\\<close>"], ["", "lemma \"\\<Turnstile>\\<^sub>2\\<^sub>' {%s.  emb (P s)  + enat n} c { \\<lambda>s.  emb (Q s)  } \\<Longrightarrow> \\<exists>k>0. valid P c Q (k*n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)} \\<Longrightarrow>\n    \\<exists>k>0. valid P c Q (k * n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)} \\<Longrightarrow>\n    \\<exists>k>0. valid P c Q (k * n)", "assume valid: \"\\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c {\\<lambda>s. \\<up> (Q s)}\""], ["proof (state)\nthis:\n  \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n  {\\<lambda>s. \\<up> (Q s)}\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)} \\<Longrightarrow>\n    \\<exists>k>0. valid P c Q (k * n)", "then"], ["proof (chain)\npicking this:\n  \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n  {\\<lambda>s. \\<up> (Q s)}", "obtain k where val: \"\\<And>s. \\<up> (P s) + enat n < \\<infinity> \\<Longrightarrow> (\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat k * \\<up> (Q t) \\<le> enat k * (\\<up> (P s) + enat n))\"\n    and k: \"k>0\""], ["proof (prove)\nusing this:\n  \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n  {\\<lambda>s. \\<up> (Q s)}\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>\\<And>s.\n                    \\<up> (P s) + enat n < \\<infinity> \\<Longrightarrow>\n                    \\<exists>t p.\n                       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + enat k * \\<up> (Q t)\n                       \\<le> enat k * (\\<up> (P s) + enat n);\n         0 < k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding QuantK_Hoare.hoare2o_valid_def"], ["proof (prove)\nusing this:\n  \\<exists>k>0.\n     \\<forall>s.\n        \\<up> (P s) + enat n < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * \\<up> (Q t)\n            \\<le> enat k * (\\<up> (P s) + enat n))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>\\<And>s.\n                    \\<up> (P s) + enat n < \\<infinity> \\<Longrightarrow>\n                    \\<exists>t p.\n                       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + enat k * \\<up> (Q t)\n                       \\<le> enat k * (\\<up> (P s) + enat n);\n         0 < k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<up> (P ?s) + enat n < \\<infinity> \\<Longrightarrow>\n  \\<exists>t p.\n     (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * \\<up> (Q t) \\<le> enat k * (\\<up> (P ?s) + enat n)\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)} \\<Longrightarrow>\n    \\<exists>k>0. valid P c Q (k * n)", "{"], ["proof (state)\nthis:\n  \\<up> (P ?s) + enat n < \\<infinity> \\<Longrightarrow>\n  \\<exists>t p.\n     (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * \\<up> (Q t) \\<le> enat k * (\\<up> (P ?s) + enat n)\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)} \\<Longrightarrow>\n    \\<exists>k>0. valid P c Q (k * n)", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)} \\<Longrightarrow>\n    \\<exists>k>0. valid P c Q (k * n)", "assume Ps: \"P s\""], ["proof (state)\nthis:\n  P s\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)} \\<Longrightarrow>\n    \\<exists>k>0. valid P c Q (k * n)", "then"], ["proof (chain)\npicking this:\n  P s", "have \" \\<up> (P s) + enat n < \\<infinity>\""], ["proof (prove)\nusing this:\n  P s\n\ngoal (1 subgoal):\n 1. \\<up> (P s) + enat n < \\<infinity>", "by auto"], ["proof (state)\nthis:\n  \\<up> (P s) + enat n < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)} \\<Longrightarrow>\n    \\<exists>k>0. valid P c Q (k * n)", "with val"], ["proof (chain)\npicking this:\n  \\<up> (P ?s) + enat n < \\<infinity> \\<Longrightarrow>\n  \\<exists>t p.\n     (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * \\<up> (Q t) \\<le> enat k * (\\<up> (P ?s) + enat n)\n  \\<up> (P s) + enat n < \\<infinity>", "obtain  t m where\n        c: \"(c, s) \\<Rightarrow> m \\<Down> t\" and \"enat m + k * \\<up> (Q t) \\<le> k * (\\<up> (P s) + enat n)\""], ["proof (prove)\nusing this:\n  \\<up> (P ?s) + enat n < \\<infinity> \\<Longrightarrow>\n  \\<exists>t p.\n     (c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * \\<up> (Q t) \\<le> enat k * (\\<up> (P ?s) + enat n)\n  \\<up> (P s) + enat n < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>m t.\n        \\<lbrakk>(c, s) \\<Rightarrow> m \\<Down> t;\n         enat m + enat k * \\<up> (Q t)\n         \\<le> enat k * (\\<up> (P s) + enat n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> m \\<Down> t\n  enat m + enat k * \\<up> (Q t) \\<le> enat k * (\\<up> (P s) + enat n)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)} \\<Longrightarrow>\n    \\<exists>k>0. valid P c Q (k * n)", "then"], ["proof (chain)\npicking this:\n  (c, s) \\<Rightarrow> m \\<Down> t\n  enat m + enat k * \\<up> (Q t) \\<le> enat k * (\\<up> (P s) + enat n)", "have \"m \\<le> k * n \\<and> Q t\""], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> m \\<Down> t\n  enat m + enat k * \\<up> (Q t) \\<le> enat k * (\\<up> (P s) + enat n)\n\ngoal (1 subgoal):\n 1. m \\<le> k * n \\<and> Q t", "using k"], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> m \\<Down> t\n  enat m + enat k * \\<up> (Q t) \\<le> enat k * (\\<up> (P s) + enat n)\n  0 < k\n\ngoal (1 subgoal):\n 1. m \\<le> k * n \\<and> Q t", "using Ps add.commute add.right_neutral emb.simps(1) emb.simps(2) enat_ord_simps(1) infinity_ileE plus_enat_simps(3)"], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> m \\<Down> t\n  enat m + enat k * \\<up> (Q t) \\<le> enat k * (\\<up> (P s) + enat n)\n  0 < k\n  P s\n  ?a + ?b = ?b + ?a\n  ?a + (0::?'a) = ?a\n  \\<up> False = \\<infinity>\n  \\<up> True = 0\n  (enat ?m \\<le> enat ?n) = (?m \\<le> ?n)\n  \\<infinity> \\<le> enat ?m \\<Longrightarrow> ?R\n  ?q + \\<infinity> = \\<infinity>\n\ngoal (1 subgoal):\n 1. m \\<le> k * n \\<and> Q t", "by (metis (full_types) mult_zero_right not_gr_zero times_enat_simps(1) times_enat_simps(4))"], ["proof (state)\nthis:\n  m \\<le> k * n \\<and> Q t\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)} \\<Longrightarrow>\n    \\<exists>k>0. valid P c Q (k * n)", "with     c"], ["proof (chain)\npicking this:\n  (c, s) \\<Rightarrow> m \\<Down> t\n  m \\<le> k * n \\<and> Q t", "have \"(\\<exists>s' m. (c, s) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le>  k * n \\<and> Q s')\""], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> m \\<Down> t\n  m \\<le> k * n \\<and> Q t\n\ngoal (1 subgoal):\n 1. \\<exists>s' m.\n       (c, s) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s'", "by blast"], ["proof (state)\nthis:\n  \\<exists>s' m.\n     (c, s) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s'\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)} \\<Longrightarrow>\n    \\<exists>k>0. valid P c Q (k * n)", "}"], ["proof (state)\nthis:\n  P ?s2 \\<Longrightarrow>\n  \\<exists>s' m.\n     (c, ?s2) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s'\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)} \\<Longrightarrow>\n    \\<exists>k>0. valid P c Q (k * n)", "note bla=this"], ["proof (state)\nthis:\n  P ?s2 \\<Longrightarrow>\n  \\<exists>s' m.\n     (c, ?s2) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s'\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)} \\<Longrightarrow>\n    \\<exists>k>0. valid P c Q (k * n)", "show \"\\<exists>k>0. valid P c Q (k*n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0. valid P c Q (k * n)", "unfolding valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          P s \\<longrightarrow>\n          (\\<exists>s' m.\n              (c, s) \\<Rightarrow> m \\<Down> s' \\<and>\n              m \\<le> k * n \\<and> Q s')", "apply(rule exI[where x=k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<and>\n    (\\<forall>s.\n        P s \\<longrightarrow>\n        (\\<exists>s' m.\n            (c, s) \\<Rightarrow> m \\<Down> s' \\<and>\n            m \\<le> k * n \\<and> Q s'))", "using bla k"], ["proof (prove)\nusing this:\n  P ?s2 \\<Longrightarrow>\n  \\<exists>s' m.\n     (c, ?s2) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s'\n  0 < k\n\ngoal (1 subgoal):\n 1. 0 < k \\<and>\n    (\\<forall>s.\n        P s \\<longrightarrow>\n        (\\<exists>s' m.\n            (c, s) \\<Rightarrow> m \\<Down> s' \\<and>\n            m \\<le> k * n \\<and> Q s'))", "by auto"], ["proof (state)\nthis:\n  \\<exists>k>0. valid P c Q (k * n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma valid_quantHoare: \"\\<exists>k>0. valid P c Q (k*n) \\<Longrightarrow> \\<Turnstile>\\<^sub>2\\<^sub>' {%s. emb (P s)  + enat n} c { \\<lambda>s. emb (Q s)  }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0. valid P c Q (k * n) \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k>0. valid P c Q (k * n) \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)}", "assume  \"\\<exists>k>0. valid P c Q (k*n)\""], ["proof (state)\nthis:\n  \\<exists>k>0. valid P c Q (k * n)\n\ngoal (1 subgoal):\n 1. \\<exists>k>0. valid P c Q (k * n) \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)}", "then"], ["proof (chain)\npicking this:\n  \\<exists>k>0. valid P c Q (k * n)", "obtain k where valid: \"valid P c Q (k*n)\" and k: \"k>0\""], ["proof (prove)\nusing this:\n  \\<exists>k>0. valid P c Q (k * n)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>valid P c Q (k * n); 0 < k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  valid P c Q (k * n)\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<exists>k>0. valid P c Q (k * n) \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)}", "{"], ["proof (state)\nthis:\n  valid P c Q (k * n)\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<exists>k>0. valid P c Q (k * n) \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)}", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k>0. valid P c Q (k * n) \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)}", "assume \"(%s. emb (P s)  + enat n) s < \\<infinity>\""], ["proof (state)\nthis:\n  \\<up> (P s) + enat n < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<exists>k>0. valid P c Q (k * n) \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)}", "then"], ["proof (chain)\npicking this:\n  \\<up> (P s) + enat n < \\<infinity>", "have Ps: \"P s\""], ["proof (prove)\nusing this:\n  \\<up> (P s) + enat n < \\<infinity>\n\ngoal (1 subgoal):\n 1. P s", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. \\<up> (P s) + enat n = enat i \\<Longrightarrow> P s", "by (metis emb.elims enat.distinct(2) enat.simps(5) enat_defs(4))"], ["proof (state)\nthis:\n  P s\n\ngoal (1 subgoal):\n 1. \\<exists>k>0. valid P c Q (k * n) \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)}", "with valid[unfolded valid_def]"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     P s \\<longrightarrow>\n     (\\<exists>s' m.\n         (c, s) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s')\n  P s", "obtain t m where\n        c: \"(c, s) \\<Rightarrow> m \\<Down> t\" and \"m \\<le> k * n\" \"Q t\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     P s \\<longrightarrow>\n     (\\<exists>s' m.\n         (c, s) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s')\n  P s\n\ngoal (1 subgoal):\n 1. (\\<And>m t.\n        \\<lbrakk>(c, s) \\<Rightarrow> m \\<Down> t; m \\<le> k * n;\n         Q t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> m \\<Down> t\n  m \\<le> k * n\n  Q t\n\ngoal (1 subgoal):\n 1. \\<exists>k>0. valid P c Q (k * n) \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)}", "then"], ["proof (chain)\npicking this:\n  (c, s) \\<Rightarrow> m \\<Down> t\n  m \\<le> k * n\n  Q t", "have \"enat m +  k * \\<up> (Q t) \\<le>  k * (\\<up> (P s) + enat n)\""], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> m \\<Down> t\n  m \\<le> k * n\n  Q t\n\ngoal (1 subgoal):\n 1. enat m + enat k * \\<up> (Q t) \\<le> enat k * (\\<up> (P s) + enat n)", "using Ps"], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> m \\<Down> t\n  m \\<le> k * n\n  Q t\n  P s\n\ngoal (1 subgoal):\n 1. enat m + enat k * \\<up> (Q t) \\<le> enat k * (\\<up> (P s) + enat n)", "by simp"], ["proof (state)\nthis:\n  enat m + enat k * \\<up> (Q t) \\<le> enat k * (\\<up> (P s) + enat n)\n\ngoal (1 subgoal):\n 1. \\<exists>k>0. valid P c Q (k * n) \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)}", "with     c"], ["proof (chain)\npicking this:\n  (c, s) \\<Rightarrow> m \\<Down> t\n  enat m + enat k * \\<up> (Q t) \\<le> enat k * (\\<up> (P s) + enat n)", "have \"(\\<exists>s' m. (c, s) \\<Rightarrow> m \\<Down> s' \\<and> enat m + enat k * \\<up> (Q s') \\<le> enat k * (\\<up> (P s) + enat n))\""], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> m \\<Down> t\n  enat m + enat k * \\<up> (Q t) \\<le> enat k * (\\<up> (P s) + enat n)\n\ngoal (1 subgoal):\n 1. \\<exists>s' m.\n       (c, s) \\<Rightarrow> m \\<Down> s' \\<and>\n       enat m + enat k * \\<up> (Q s') \\<le> enat k * (\\<up> (P s) + enat n)", "by blast"], ["proof (state)\nthis:\n  \\<exists>s' m.\n     (c, s) \\<Rightarrow> m \\<Down> s' \\<and>\n     enat m + enat k * \\<up> (Q s') \\<le> enat k * (\\<up> (P s) + enat n)\n\ngoal (1 subgoal):\n 1. \\<exists>k>0. valid P c Q (k * n) \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)}", "}"], ["proof (state)\nthis:\n  \\<up> (P ?s2) + enat n < \\<infinity> \\<Longrightarrow>\n  \\<exists>s' m.\n     (c, ?s2) \\<Rightarrow> m \\<Down> s' \\<and>\n     enat m + enat k * \\<up> (Q s') \\<le> enat k * (\\<up> (P ?s2) + enat n)\n\ngoal (1 subgoal):\n 1. \\<exists>k>0. valid P c Q (k * n) \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)}", "note funk=this"], ["proof (state)\nthis:\n  \\<up> (P ?s2) + enat n < \\<infinity> \\<Longrightarrow>\n  \\<exists>s' m.\n     (c, ?s2) \\<Rightarrow> m \\<Down> s' \\<and>\n     enat m + enat k * \\<up> (Q s') \\<le> enat k * (\\<up> (P ?s2) + enat n)\n\ngoal (1 subgoal):\n 1. \\<exists>k>0. valid P c Q (k * n) \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)}", "show \"\\<Turnstile>\\<^sub>2\\<^sub>' {%s.  emb (P s)  + enat n} c { \\<lambda>s. emb (Q s)  }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n    {\\<lambda>s. \\<up> (Q s)}", "unfolding QuantK_Hoare.hoare2o_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          \\<up> (P s) + enat n < \\<infinity> \\<longrightarrow>\n          (\\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat p + enat k * \\<up> (Q t)\n              \\<le> enat k * (\\<up> (P s) + enat n))", "apply(rule exI[where x=k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<and>\n    (\\<forall>s.\n        \\<up> (P s) + enat n < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * \\<up> (Q t)\n            \\<le> enat k * (\\<up> (P s) + enat n)))", "using funk k"], ["proof (prove)\nusing this:\n  \\<up> (P ?s2) + enat n < \\<infinity> \\<Longrightarrow>\n  \\<exists>s' m.\n     (c, ?s2) \\<Rightarrow> m \\<Down> s' \\<and>\n     enat m + enat k * \\<up> (Q s') \\<le> enat k * (\\<up> (P ?s2) + enat n)\n  0 < k\n\ngoal (1 subgoal):\n 1. 0 < k \\<and>\n    (\\<forall>s.\n        \\<up> (P s) + enat n < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * \\<up> (Q t)\n            \\<le> enat k * (\\<up> (P s) + enat n)))", "by auto"], ["proof (state)\nthis:\n  \\<Turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<up> (P s) + enat n} c\n  {\\<lambda>s. \\<up> (Q s)}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Relation between valid predicate and Hoare Logic based on Separation Logic\\<close>"], ["", "definition \"embP2 P = (%(ps,n). \\<forall>s.  P (Partial_Evaluation.emb ps s) \\<and> n = 0)\""], ["", "definition \"embP3 P = (%(ps,n). dom ps = UNIV \\<and> (\\<forall>s.  P (Partial_Evaluation.emb ps s)) \\<and> n = 0)\""], ["", "lemma emp: \"a + Map.empty = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a + Map.empty = a", "by (simp add: plus_fun_conv)"], ["", "lemma oneway: \"\\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P ** $n} c {embP2 Q} \\<Longrightarrow> validk P c Q n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "assume partial_true: \"\\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P ** $n} c {embP2 Q}\""], ["proof (state)\nthis:\n  \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "from partial_true[unfolded hoare3o_valid_def]"], ["proof (chain)\npicking this:\n  \\<exists>k>0.\n     \\<forall>ps na.\n        (embP3 P \\<and>* $ n) (ps, na) \\<longrightarrow>\n        (\\<exists>ps' ps'' m e e'.\n            (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n            ps' ## ps'' \\<and>\n            k * na = k * e + e' + m \\<and> embP2 Q (ps', e))", "obtain k where k: \"k>0\" and\n   q : \"\\<forall>ps na. (embP3 P \\<and>* $ n) (ps, na) \\<longrightarrow>\n                (\\<exists>ps' ps'' m e e'. (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and> ps' ## ps'' \\<and> k * na = k * e + e' + m \\<and> embP2 Q (ps', e)) \""], ["proof (prove)\nusing this:\n  \\<exists>k>0.\n     \\<forall>ps na.\n        (embP3 P \\<and>* $ n) (ps, na) \\<longrightarrow>\n        (\\<exists>ps' ps'' m e e'.\n            (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n            ps' ## ps'' \\<and>\n            k * na = k * e + e' + m \\<and> embP2 Q (ps', e))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>0 < k;\n         \\<forall>ps na.\n            (embP3 P \\<and>* $ n) (ps, na) \\<longrightarrow>\n            (\\<exists>ps' ps'' m e e'.\n                (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n                ps' ## ps'' \\<and>\n                k * na = k * e + e' + m \\<and> embP2 Q (ps', e))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  0 < k\n  \\<forall>ps na.\n     (embP3 P \\<and>* $ n) (ps, na) \\<longrightarrow>\n     (\\<exists>ps' ps'' m e e'.\n         (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n         ps' ## ps'' \\<and> k * na = k * e + e' + m \\<and> embP2 Q (ps', e))\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "{"], ["proof (state)\nthis:\n  0 < k\n  \\<forall>ps na.\n     (embP3 P \\<and>* $ n) (ps, na) \\<longrightarrow>\n     (\\<exists>ps' ps'' m e e'.\n         (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n         ps' ## ps'' \\<and> k * na = k * e + e' + m \\<and> embP2 Q (ps', e))\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "assume \"P s\""], ["proof (state)\nthis:\n  P s\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "then"], ["proof (chain)\npicking this:\n  P s", "have g: \" (embP3 P \\<and>* $ n) (part s, n)\""], ["proof (prove)\nusing this:\n  P s\n\ngoal (1 subgoal):\n 1. (embP3 P \\<and>* $ n) (part s, n)", "unfolding embP3_def dollar_def sep_conj_def"], ["proof (prove)\nusing this:\n  P s\n\ngoal (1 subgoal):\n 1. \\<exists>x y.\n       x ## y \\<and>\n       (part s, n) = x + y \\<and>\n       (case x of\n        (ps, n) \\<Rightarrow>\n          dom ps = UNIV \\<and>\n          (\\<forall>s. P (Partial_Evaluation.emb ps s)) \\<and> n = 0) \\<and>\n       (case y of (s, c) \\<Rightarrow> s = 0 \\<and> c = n)", "by auto"], ["proof (state)\nthis:\n  (embP3 P \\<and>* $ n) (part s, n)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "from q  g"], ["proof (chain)\npicking this:\n  \\<forall>ps na.\n     (embP3 P \\<and>* $ n) (ps, na) \\<longrightarrow>\n     (\\<exists>ps' ps'' m e e'.\n         (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n         ps' ## ps'' \\<and> k * na = k * e + e' + m \\<and> embP2 Q (ps', e))\n  (embP3 P \\<and>* $ n) (part s, n)", "obtain ps' ps'' m e e' where pbig: \"(c, part s) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps''\" and orth: \"ps' ## ps''\"\n        and ii: \"k * n = k * e + e' + m\" and erg: \"embP2 Q (ps', e)\""], ["proof (prove)\nusing this:\n  \\<forall>ps na.\n     (embP3 P \\<and>* $ n) (ps, na) \\<longrightarrow>\n     (\\<exists>ps' ps'' m e e'.\n         (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n         ps' ## ps'' \\<and> k * na = k * e + e' + m \\<and> embP2 Q (ps', e))\n  (embP3 P \\<and>* $ n) (part s, n)\n\ngoal (1 subgoal):\n 1. (\\<And>m ps' ps'' e e'.\n        \\<lbrakk>(c, part s) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'';\n         ps' ## ps''; k * n = k * e + e' + m; embP2 Q (ps', e)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c, part s) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps''\n  ps' ## ps''\n  k * n = k * e + e' + m\n  embP2 Q (ps', e)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "have ii': \"m \\<le> k * n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> k * n", "using ii"], ["proof (prove)\nusing this:\n  k * n = k * e + e' + m\n\ngoal (1 subgoal):\n 1. m \\<le> k * n", "by auto"], ["proof (state)\nthis:\n  m \\<le> k * n\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "from part_to_full'[OF pbig]"], ["proof (chain)\npicking this:\n  (c, Partial_Evaluation.emb (part s)\n       ?s) \\<Rightarrow> m \\<Down> Partial_Evaluation.emb (ps' + ps'') ?s", "have i: \"(c, s ) \\<Rightarrow> m \\<Down> Partial_Evaluation.emb (ps' + ps'') s\""], ["proof (prove)\nusing this:\n  (c, Partial_Evaluation.emb (part s)\n       ?s) \\<Rightarrow> m \\<Down> Partial_Evaluation.emb (ps' + ps'') ?s\n\ngoal (1 subgoal):\n 1. (c, s) \\<Rightarrow> m \\<Down> Partial_Evaluation.emb (ps' + ps'') s", "by simp"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> m \\<Down> Partial_Evaluation.emb (ps' + ps'') s\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "from erg"], ["proof (chain)\npicking this:\n  embP2 Q (ps', e)", "have z2: \"\\<And>s. Q (Partial_Evaluation.emb ps' s)\""], ["proof (prove)\nusing this:\n  embP2 Q (ps', e)\n\ngoal (1 subgoal):\n 1. \\<And>s. Q (Partial_Evaluation.emb ps' s)", "unfolding embP2_def"], ["proof (prove)\nusing this:\n  case (ps', e) of\n  (ps, n) \\<Rightarrow>\n    \\<forall>s. Q (Partial_Evaluation.emb ps s) \\<and> n = 0\n\ngoal (1 subgoal):\n 1. \\<And>s. Q (Partial_Evaluation.emb ps' s)", "by auto"], ["proof (state)\nthis:\n  Q (Partial_Evaluation.emb ps' ?s)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "have \"Partial_Evaluation.emb (ps' + ps'') s = Partial_Evaluation.emb (ps'' + ps') s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Partial_Evaluation.emb (ps' + ps'') s =\n    Partial_Evaluation.emb (ps'' + ps') s", "using orth"], ["proof (prove)\nusing this:\n  ps' ## ps''\n\ngoal (1 subgoal):\n 1. Partial_Evaluation.emb (ps' + ps'') s =\n    Partial_Evaluation.emb (ps'' + ps') s", "by (simp add: sep_add_commute)"], ["proof (state)\nthis:\n  Partial_Evaluation.emb (ps' + ps'') s =\n  Partial_Evaluation.emb (ps'' + ps') s\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "also"], ["proof (state)\nthis:\n  Partial_Evaluation.emb (ps' + ps'') s =\n  Partial_Evaluation.emb (ps'' + ps') s\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "have \"Partial_Evaluation.emb (ps'' + ps') s = Partial_Evaluation.emb (ps') (Partial_Evaluation.emb (ps'') s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Partial_Evaluation.emb (ps'' + ps') s =\n    Partial_Evaluation.emb ps' (Partial_Evaluation.emb ps'' s)", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       Partial_Evaluation.emb (ps'' + ps') s x =\n       Partial_Evaluation.emb ps' (Partial_Evaluation.emb ps'' s) x", "unfolding emb_def plus_fun_conv map_add_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (case case ps' x of None \\<Rightarrow> ps'' x\n             | Some x \\<Rightarrow> Some x of\n        None \\<Rightarrow> s x | Some r \\<Rightarrow> r) =\n       (case ps' x of\n        None \\<Rightarrow>\n          case ps'' x of None \\<Rightarrow> s x | Some r \\<Rightarrow> r\n        | Some r \\<Rightarrow> r)", "by (metis option.case_eq_if option.simps(5))"], ["proof (state)\nthis:\n  Partial_Evaluation.emb (ps'' + ps') s =\n  Partial_Evaluation.emb ps' (Partial_Evaluation.emb ps'' s)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "finally"], ["proof (chain)\npicking this:\n  Partial_Evaluation.emb (ps' + ps'') s =\n  Partial_Evaluation.emb ps' (Partial_Evaluation.emb ps'' s)", "have z: \"Partial_Evaluation.emb (ps' + ps'') s = Partial_Evaluation.emb (ps') (Partial_Evaluation.emb (ps'') s)\""], ["proof (prove)\nusing this:\n  Partial_Evaluation.emb (ps' + ps'') s =\n  Partial_Evaluation.emb ps' (Partial_Evaluation.emb ps'' s)\n\ngoal (1 subgoal):\n 1. Partial_Evaluation.emb (ps' + ps'') s =\n    Partial_Evaluation.emb ps' (Partial_Evaluation.emb ps'' s)", "."], ["proof (state)\nthis:\n  Partial_Evaluation.emb (ps' + ps'') s =\n  Partial_Evaluation.emb ps' (Partial_Evaluation.emb ps'' s)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "have iii: \"Q (Partial_Evaluation.emb (ps' + ps'') s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q (Partial_Evaluation.emb (ps' + ps'') s)", "unfolding z"], ["proof (prove)\ngoal (1 subgoal):\n 1. Q (Partial_Evaluation.emb ps' (Partial_Evaluation.emb ps'' s))", "apply (fact)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  Q (Partial_Evaluation.emb (ps' + ps'') s)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "from i ii' iii"], ["proof (chain)\npicking this:\n  (c, s) \\<Rightarrow> m \\<Down> Partial_Evaluation.emb (ps' + ps'') s\n  m \\<le> k * n\n  Q (Partial_Evaluation.emb (ps' + ps'') s)", "have \"\\<exists>s' m. (c, s) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s'\""], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> m \\<Down> Partial_Evaluation.emb (ps' + ps'') s\n  m \\<le> k * n\n  Q (Partial_Evaluation.emb (ps' + ps'') s)\n\ngoal (1 subgoal):\n 1. \\<exists>s' m.\n       (c, s) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s'", "by auto"], ["proof (state)\nthis:\n  \\<exists>s' m.\n     (c, s) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s'\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "}"], ["proof (state)\nthis:\n  P ?s2 \\<Longrightarrow>\n  \\<exists>s' m.\n     (c, ?s2) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s'\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c\n    { embP2 Q} \\<Longrightarrow>\n    validk P c Q n", "with k"], ["proof (chain)\npicking this:\n  0 < k\n  P ?s2 \\<Longrightarrow>\n  \\<exists>s' m.\n     (c, ?s2) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s'", "show \"validk P c Q n\""], ["proof (prove)\nusing this:\n  0 < k\n  P ?s2 \\<Longrightarrow>\n  \\<exists>s' m.\n     (c, ?s2) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s'\n\ngoal (1 subgoal):\n 1. validk P c Q n", "unfolding validk_def"], ["proof (prove)\nusing this:\n  0 < k\n  P ?s2 \\<Longrightarrow>\n  \\<exists>s' m.\n     (c, ?s2) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s'\n\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          P s \\<longrightarrow>\n          (\\<exists>s' m.\n              (c, s) \\<Rightarrow> m \\<Down> s' \\<and>\n              m \\<le> k * n \\<and> Q s')", "by blast"], ["proof (state)\nthis:\n  validk P c Q n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma theother: \"validk P c Q n \\<Longrightarrow> \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P ** $n} c {embP2 Q }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. validk P c Q n \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. validk P c Q n \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "assume valid: \"validk P c Q n\""], ["proof (state)\nthis:\n  validk P c Q n\n\ngoal (1 subgoal):\n 1. validk P c Q n \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "then"], ["proof (chain)\npicking this:\n  validk P c Q n", "obtain k where k : \"k>0\" and v: \"(\\<forall>s. P s \\<longrightarrow> (\\<exists>s' m. (c, s) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s'))\""], ["proof (prove)\nusing this:\n  validk P c Q n\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>0 < k;\n         \\<forall>s.\n            P s \\<longrightarrow>\n            (\\<exists>s' m.\n                (c, s) \\<Rightarrow> m \\<Down> s' \\<and>\n                m \\<le> k * n \\<and> Q s')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding validk_def"], ["proof (prove)\nusing this:\n  \\<exists>k>0.\n     \\<forall>s.\n        P s \\<longrightarrow>\n        (\\<exists>s' m.\n            (c, s) \\<Rightarrow> m \\<Down> s' \\<and>\n            m \\<le> k * n \\<and> Q s')\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>0 < k;\n         \\<forall>s.\n            P s \\<longrightarrow>\n            (\\<exists>s' m.\n                (c, s) \\<Rightarrow> m \\<Down> s' \\<and>\n                m \\<le> k * n \\<and> Q s')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  0 < k\n  \\<forall>s.\n     P s \\<longrightarrow>\n     (\\<exists>s' m.\n         (c, s) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s')\n\ngoal (1 subgoal):\n 1. validk P c Q n \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "{"], ["proof (state)\nthis:\n  0 < k\n  \\<forall>s.\n     P s \\<longrightarrow>\n     (\\<exists>s' m.\n         (c, s) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s')\n\ngoal (1 subgoal):\n 1. validk P c Q n \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "fix ps na"], ["proof (state)\ngoal (1 subgoal):\n 1. validk P c Q n \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "assume an: \"(embP3 P \\<and>* $ n) (ps, na)\""], ["proof (state)\nthis:\n  (embP3 P \\<and>* $ n) (ps, na)\n\ngoal (1 subgoal):\n 1. validk P c Q n \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "have dom: \"dom ps = UNIV\" and Pps: \"\\<And>s. P (Partial_Evaluation.emb ps s)\" and nan: \"na = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom ps = UNIV &&& (\\<And>s. P (Partial_Evaluation.emb ps s)) &&& na = n", "using an"], ["proof (prove)\nusing this:\n  (embP3 P \\<and>* $ n) (ps, na)\n\ngoal (1 subgoal):\n 1. dom ps = UNIV &&& (\\<And>s. P (Partial_Evaluation.emb ps s)) &&& na = n", "unfolding sep_conj_def"], ["proof (prove)\nusing this:\n  \\<exists>x y. x ## y \\<and> (ps, na) = x + y \\<and> embP3 P x \\<and> $ n y\n\ngoal (1 subgoal):\n 1. dom ps = UNIV &&& (\\<And>s. P (Partial_Evaluation.emb ps s)) &&& na = n", "by (auto simp: embP3_def dollar_def)"], ["proof (state)\nthis:\n  dom ps = UNIV\n  P (Partial_Evaluation.emb ps ?s)\n  na = n\n\ngoal (1 subgoal):\n 1. validk P c Q n \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "from v Pps"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     P s \\<longrightarrow>\n     (\\<exists>s' m.\n         (c, s) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s')\n  P (Partial_Evaluation.emb ps ?s)", "obtain s' m where big: \"(c, (Partial_Evaluation.emb ps (%_. 0))) \\<Rightarrow> m \\<Down> s'\" and ii: \"m \\<le> k * n\" and erg: \"Q s'\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     P s \\<longrightarrow>\n     (\\<exists>s' m.\n         (c, s) \\<Rightarrow> m \\<Down> s' \\<and> m \\<le> k * n \\<and> Q s')\n  P (Partial_Evaluation.emb ps ?s)\n\ngoal (1 subgoal):\n 1. (\\<And>m s'.\n        \\<lbrakk>(c, Partial_Evaluation.emb ps\n                      (\\<lambda>_. 0)) \\<Rightarrow> m \\<Down> s';\n         m \\<le> k * n; Q s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c, Partial_Evaluation.emb ps (\\<lambda>_. 0)) \\<Rightarrow> m \\<Down> s'\n  m \\<le> k * n\n  Q s'\n\ngoal (1 subgoal):\n 1. validk P c Q n \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "have \"part (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = ps \""], ["proof (prove)\ngoal (1 subgoal):\n 1. part (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = ps", "using dom"], ["proof (prove)\nusing this:\n  dom ps = UNIV\n\ngoal (1 subgoal):\n 1. part (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = ps", "by simp"], ["proof (state)\nthis:\n  part (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = ps\n\ngoal (1 subgoal):\n 1. validk P c Q n \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "with full_to_part[OF big]"], ["proof (chain)\npicking this:\n  (c, part\n       (Partial_Evaluation.emb ps\n         (\\<lambda>_. 0))) \\<Rightarrow>\\<^sub>A m \\<Down> part s'\n  part (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = ps", "have i: \"(c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> part s'\""], ["proof (prove)\nusing this:\n  (c, part\n       (Partial_Evaluation.emb ps\n         (\\<lambda>_. 0))) \\<Rightarrow>\\<^sub>A m \\<Down> part s'\n  part (Partial_Evaluation.emb ps (\\<lambda>_. 0)) = ps\n\ngoal (1 subgoal):\n 1. (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> part s'", "by auto"], ["proof (state)\nthis:\n  (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> part s'\n\ngoal (1 subgoal):\n 1. validk P c Q n \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "have iii: \"embP2 Q (part s', 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. embP2 Q (part s', 0::'a)", "unfolding embP2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (part s', 0::'a) of\n    (ps, n) \\<Rightarrow>\n      \\<forall>s. Q (Partial_Evaluation.emb ps s) \\<and> n = (0::'a)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. Q s'", "by fact"], ["proof (state)\nthis:\n  embP2 Q (part s', 0::?'a1)\n\ngoal (1 subgoal):\n 1. validk P c Q n \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "have \"k * na = k * n - m + m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k * na = k * n - m + m", "using ii k nan"], ["proof (prove)\nusing this:\n  m \\<le> k * n\n  0 < k\n  na = n\n\ngoal (1 subgoal):\n 1. k * na = k * n - m + m", "by simp"], ["proof (state)\nthis:\n  k * na = k * n - m + m\n\ngoal (1 subgoal):\n 1. validk P c Q n \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "have \"(\\<exists>ps' ps'' m e e'. (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and> ps' ## ps'' \\<and> k * na = k * e + e' + m \\<and> embP2 Q (ps', e))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ps' ps'' m e e'.\n       (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n       ps' ## ps'' \\<and> k * na = k * e + e' + m \\<and> embP2 Q (ps', e)", "apply(rule exI[where x=\"part s'\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ps'' m e e'.\n       (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> part s' + ps'' \\<and>\n       part s' ## ps'' \\<and>\n       k * na = k * e + e' + m \\<and> embP2 Q (part s', e)", "apply(rule exI[where x=\"0\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m e e'.\n       (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> part s' + 0 \\<and>\n       part s' ## 0 \\<and>\n       k * na = k * e + e' + m \\<and> embP2 Q (part s', e)", "apply(rule exI[where x=\"m\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e e'.\n       (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> part s' + 0 \\<and>\n       part s' ## 0 \\<and>\n       k * na = k * e + e' + m \\<and> embP2 Q (part s', e)", "apply(rule exI[where x=\"0\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e'.\n       (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> part s' + 0 \\<and>\n       part s' ## 0 \\<and>\n       k * na = k * 0 + e' + m \\<and> embP2 Q (part s', 0)", "apply(rule exI[where x=\"k * n - m\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> part s' + 0 \\<and>\n    part s' ## 0 \\<and>\n    k * na = k * 0 + (k * n - m) + m \\<and> embP2 Q (part s', 0)", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> part s'\n 2. k * na = k * n - m + m\n 3. embP2 Q (part s', 0)", "by fact+"], ["proof (state)\nthis:\n  \\<exists>ps' ps'' m e e'.\n     (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n     ps' ## ps'' \\<and> k * na = k * e + e' + m \\<and> embP2 Q (ps', e)\n\ngoal (1 subgoal):\n 1. validk P c Q n \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "}"], ["proof (state)\nthis:\n  (embP3 P \\<and>* $ n) (?ps2, ?na2) \\<Longrightarrow>\n  \\<exists>ps' ps'' m e e'.\n     (c, ?ps2) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n     ps' ## ps'' \\<and> k * ?na2 = k * e + e' + m \\<and> embP2 Q (ps', e)\n\ngoal (1 subgoal):\n 1. validk P c Q n \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "with k"], ["proof (chain)\npicking this:\n  0 < k\n  (embP3 P \\<and>* $ n) (?ps2, ?na2) \\<Longrightarrow>\n  \\<exists>ps' ps'' m e e'.\n     (c, ?ps2) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n     ps' ## ps'' \\<and> k * ?na2 = k * e + e' + m \\<and> embP2 Q (ps', e)", "show \"\\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P ** $n} c {embP2 Q }\""], ["proof (prove)\nusing this:\n  0 < k\n  (embP3 P \\<and>* $ n) (?ps2, ?na2) \\<Longrightarrow>\n  \\<exists>ps' ps'' m e e'.\n     (c, ?ps2) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n     ps' ## ps'' \\<and> k * ?na2 = k * e + e' + m \\<and> embP2 Q (ps', e)\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}", "unfolding hoare3o_valid_def"], ["proof (prove)\nusing this:\n  0 < k\n  (embP3 P \\<and>* $ n) (?ps2, ?na2) \\<Longrightarrow>\n  \\<exists>ps' ps'' m e e'.\n     (c, ?ps2) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n     ps' ## ps'' \\<and> k * ?na2 = k * e + e' + m \\<and> embP2 Q (ps', e)\n\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>ps na.\n          (embP3 P \\<and>* $ n) (ps, na) \\<longrightarrow>\n          (\\<exists>ps' ps'' m e e'.\n              (c, ps) \\<Rightarrow>\\<^sub>A m \\<Down> ps' + ps'' \\<and>\n              ps' ## ps'' \\<and>\n              k * na = k * e + e' + m \\<and> embP2 Q (ps', e))", "by blast"], ["proof (state)\nthis:\n  \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \"validk P c Q n \\<longleftrightarrow> \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P ** $n} c {embP2 Q }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. validk P c Q n =\n    (\\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q})", "using oneway and theother"], ["proof (prove)\nusing this:\n  \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 ?P \\<and>* $ ?n} ?c\n  { embP2 ?Q} \\<Longrightarrow>\n  validk ?P ?c ?Q ?n\n  validk ?P ?c ?Q ?n \\<Longrightarrow>\n  \\<Turnstile>\\<^sub>3\\<^sub>' {embP3 ?P \\<and>* $ ?n} ?c { embP2 ?Q}\n\ngoal (1 subgoal):\n 1. validk P c Q n =\n    (\\<Turnstile>\\<^sub>3\\<^sub>' {embP3 P \\<and>* $ n} c { embP2 Q})", "by metis"], ["", "end"]]}