{"file_name": "/home/qj213/afp-2021-10-22/thys/Hoare_Time/Nielson_VCGi_complete.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hoare_Time", "problem_names": ["lemma qdeps_UNIV: \"qdeps (transl C) UNIV = UNIV\"", "lemma fune_UNIV: \"fune (transl C) UNIV = UNIV\"", "lemma pre_transl: \"Nielson_VCGi.pre (transl C) Q = Nielson_VCG.pre C Q\"", "lemma preT_transl: \"Nielson_VCGi.preT (transl C) E = Nielson_VCG.preT C E\"", "lemma postQ_transl: \"Nielson_VCGi.postQ (transl C) = Nielson_VCG.postQ C\"", "lemma time_transl: \"Nielson_VCGi.time (transl C)  = Nielson_VCG.time C\"", "lemma vc_transl: \"Nielson_VCG.vc C Q \\<Longrightarrow> Nielson_VCGi.vc (transl C) Q UNIV UNIV\"", "lemma strip_transl: \"Nielson_VCGi.strip (transl C) = Nielson_VCG.strip C\"", "lemma vc_restrict_complete:\n  assumes  \"\\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}\"\n  shows \"\\<exists>C. Nielson_VCGi.strip C = c \\<and> Nielson_VCGi.vc C Q UNIV UNIV \n  \\<and> (\\<forall>l s. P l s \\<longrightarrow> Nielson_VCGi.pre C Q l s \\<and> Q l (Nielson_VCGi.postQ C s))\n  \\<and> (\\<exists>k. \\<forall>l s. P l s \\<longrightarrow>  Nielson_VCGi.time C s \\<le> k * e s)  \"\n  (is \"\\<exists>C. ?G P c Q C e\")"], "translations": [["", "lemma qdeps_UNIV: \"qdeps (transl C) UNIV = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qdeps (transl C) UNIV = UNIV", "apply(induct C)"], ["proof (prove)\ngoal (6 subgoals):\n 1. qdeps (transl SKIP) UNIV = UNIV\n 2. \\<And>x1 x2. qdeps (transl (x1 ::= x2)) UNIV = UNIV\n 3. \\<And>C1 C2.\n       \\<lbrakk>qdeps (transl C1) UNIV = UNIV;\n        qdeps (transl C2) UNIV = UNIV\\<rbrakk>\n       \\<Longrightarrow> qdeps (transl (C1;; C2)) UNIV = UNIV\n 4. \\<And>x1 C1 C2.\n       \\<lbrakk>qdeps (transl C1) UNIV = UNIV;\n        qdeps (transl C2) UNIV = UNIV\\<rbrakk>\n       \\<Longrightarrow> qdeps (transl (IF x1 THEN C1 ELSE C2)) UNIV = UNIV\n 5. \\<And>x1 x2 x3 C.\n       qdeps (transl C) UNIV = UNIV \\<Longrightarrow>\n       qdeps (transl ({x1/x2/x3} CONSEQ C)) UNIV = UNIV\n 6. \\<And>x1 x2 C.\n       qdeps (transl C) UNIV = UNIV \\<Longrightarrow>\n       qdeps (transl ({x1} WHILE x2 DO C)) UNIV = UNIV", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fune_UNIV: \"fune (transl C) UNIV = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fune (transl C) UNIV = UNIV", "apply(induct C)"], ["proof (prove)\ngoal (6 subgoals):\n 1. fune (transl SKIP) UNIV = UNIV\n 2. \\<And>x1 x2. fune (transl (x1 ::= x2)) UNIV = UNIV\n 3. \\<And>C1 C2.\n       \\<lbrakk>fune (transl C1) UNIV = UNIV;\n        fune (transl C2) UNIV = UNIV\\<rbrakk>\n       \\<Longrightarrow> fune (transl (C1;; C2)) UNIV = UNIV\n 4. \\<And>x1 C1 C2.\n       \\<lbrakk>fune (transl C1) UNIV = UNIV;\n        fune (transl C2) UNIV = UNIV\\<rbrakk>\n       \\<Longrightarrow> fune (transl (IF x1 THEN C1 ELSE C2)) UNIV = UNIV\n 5. \\<And>x1 x2 x3 C.\n       fune (transl C) UNIV = UNIV \\<Longrightarrow>\n       fune (transl ({x1/x2/x3} CONSEQ C)) UNIV = UNIV\n 6. \\<And>x1 x2 C.\n       fune (transl C) UNIV = UNIV \\<Longrightarrow>\n       fune (transl ({x1} WHILE x2 DO C)) UNIV = UNIV", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma pre_transl: \"Nielson_VCGi.pre (transl C) Q = Nielson_VCG.pre C Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nielson_VCGi.pre (transl C) Q = Nielson_VCG.pre C Q", "apply(induct C arbitrary: Q)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>Q. Nielson_VCGi.pre (transl SKIP) Q = Nielson_VCG.pre SKIP Q\n 2. \\<And>x1 x2 Q.\n       Nielson_VCGi.pre (transl (x1 ::= x2)) Q =\n       Nielson_VCG.pre (x1 ::= x2) Q\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCGi.pre (transl C1) Q = Nielson_VCG.pre C1 Q;\n        \\<And>Q.\n           Nielson_VCGi.pre (transl C2) Q = Nielson_VCG.pre C2 Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.pre (transl (C1;; C2)) Q =\n                         Nielson_VCG.pre (C1;; C2) Q\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCGi.pre (transl C1) Q = Nielson_VCG.pre C1 Q;\n        \\<And>Q.\n           Nielson_VCGi.pre (transl C2) Q = Nielson_VCG.pre C2 Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.pre (transl (IF x1 THEN C1 ELSE C2))\n                          Q =\n                         Nielson_VCG.pre (IF x1 THEN C1 ELSE C2) Q\n 5. \\<And>x1 x2 x3 C Q.\n       (\\<And>Q.\n           Nielson_VCGi.pre (transl C) Q =\n           Nielson_VCG.pre C Q) \\<Longrightarrow>\n       Nielson_VCGi.pre (transl ({x1/x2/x3} CONSEQ C)) Q =\n       Nielson_VCG.pre ({x1/x2/x3} CONSEQ C) Q\n 6. \\<And>x1 x2 C Q.\n       (\\<And>Q.\n           Nielson_VCGi.pre (transl C) Q =\n           Nielson_VCG.pre C Q) \\<Longrightarrow>\n       Nielson_VCGi.pre (transl ({x1} WHILE x2 DO C)) Q =\n       Nielson_VCG.pre ({x1} WHILE x2 DO C) Q", "by (auto)"], ["", "lemma preT_transl: \"Nielson_VCGi.preT (transl C) E = Nielson_VCG.preT C E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nielson_VCGi.preT (transl C) E = Nielson_VCG.preT C E", "apply(induct C arbitrary: E)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>E. Nielson_VCGi.preT (transl SKIP) E = Nielson_VCG.preT SKIP E\n 2. \\<And>x1 x2 E.\n       Nielson_VCGi.preT (transl (x1 ::= x2)) E =\n       Nielson_VCG.preT (x1 ::= x2) E\n 3. \\<And>C1 C2 E.\n       \\<lbrakk>\\<And>E.\n                   Nielson_VCGi.preT (transl C1) E = Nielson_VCG.preT C1 E;\n        \\<And>E.\n           Nielson_VCGi.preT (transl C2) E = Nielson_VCG.preT C2 E\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.preT (transl (C1;; C2)) E =\n                         Nielson_VCG.preT (C1;; C2) E\n 4. \\<And>x1 C1 C2 E.\n       \\<lbrakk>\\<And>E.\n                   Nielson_VCGi.preT (transl C1) E = Nielson_VCG.preT C1 E;\n        \\<And>E.\n           Nielson_VCGi.preT (transl C2) E = Nielson_VCG.preT C2 E\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.preT (transl (IF x1 THEN C1 ELSE C2))\n                          E =\n                         Nielson_VCG.preT (IF x1 THEN C1 ELSE C2) E\n 5. \\<And>x1 x2 x3 C E.\n       (\\<And>E.\n           Nielson_VCGi.preT (transl C) E =\n           Nielson_VCG.preT C E) \\<Longrightarrow>\n       Nielson_VCGi.preT (transl ({x1/x2/x3} CONSEQ C)) E =\n       Nielson_VCG.preT ({x1/x2/x3} CONSEQ C) E\n 6. \\<And>x1 x2 C E.\n       (\\<And>E.\n           Nielson_VCGi.preT (transl C) E =\n           Nielson_VCG.preT C E) \\<Longrightarrow>\n       Nielson_VCGi.preT (transl ({x1} WHILE x2 DO C)) E =\n       Nielson_VCG.preT ({x1} WHILE x2 DO C) E", "by (auto)"], ["", "lemma postQ_transl: \"Nielson_VCGi.postQ (transl C) = Nielson_VCG.postQ C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nielson_VCGi.postQ (transl C) = Nielson_VCG.postQ C", "apply(induct C)"], ["proof (prove)\ngoal (6 subgoals):\n 1. Nielson_VCGi.postQ (transl SKIP) = Nielson_VCG.postQ SKIP\n 2. \\<And>x1 x2.\n       Nielson_VCGi.postQ (transl (x1 ::= x2)) =\n       Nielson_VCG.postQ (x1 ::= x2)\n 3. \\<And>C1 C2.\n       \\<lbrakk>Nielson_VCGi.postQ (transl C1) = Nielson_VCG.postQ C1;\n        Nielson_VCGi.postQ (transl C2) = Nielson_VCG.postQ C2\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.postQ (transl (C1;; C2)) =\n                         Nielson_VCG.postQ (C1;; C2)\n 4. \\<And>x1 C1 C2.\n       \\<lbrakk>Nielson_VCGi.postQ (transl C1) = Nielson_VCG.postQ C1;\n        Nielson_VCGi.postQ (transl C2) = Nielson_VCG.postQ C2\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.postQ\n                          (transl (IF x1 THEN C1 ELSE C2)) =\n                         Nielson_VCG.postQ (IF x1 THEN C1 ELSE C2)\n 5. \\<And>x1 x2 x3 C.\n       Nielson_VCGi.postQ (transl C) = Nielson_VCG.postQ C \\<Longrightarrow>\n       Nielson_VCGi.postQ (transl ({x1/x2/x3} CONSEQ C)) =\n       Nielson_VCG.postQ ({x1/x2/x3} CONSEQ C)\n 6. \\<And>x1 x2 C.\n       Nielson_VCGi.postQ (transl C) = Nielson_VCG.postQ C \\<Longrightarrow>\n       Nielson_VCGi.postQ (transl ({x1} WHILE x2 DO C)) =\n       Nielson_VCG.postQ ({x1} WHILE x2 DO C)", "by (auto)"], ["", "lemma time_transl: \"Nielson_VCGi.time (transl C)  = Nielson_VCG.time C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nielson_VCGi.time (transl C) = Nielson_VCG.time C", "apply(induct C )"], ["proof (prove)\ngoal (6 subgoals):\n 1. Nielson_VCGi.time (transl SKIP) = Nielson_VCG.time SKIP\n 2. \\<And>x1 x2.\n       Nielson_VCGi.time (transl (x1 ::= x2)) = Nielson_VCG.time (x1 ::= x2)\n 3. \\<And>C1 C2.\n       \\<lbrakk>Nielson_VCGi.time (transl C1) = Nielson_VCG.time C1;\n        Nielson_VCGi.time (transl C2) = Nielson_VCG.time C2\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.time (transl (C1;; C2)) =\n                         Nielson_VCG.time (C1;; C2)\n 4. \\<And>x1 C1 C2.\n       \\<lbrakk>Nielson_VCGi.time (transl C1) = Nielson_VCG.time C1;\n        Nielson_VCGi.time (transl C2) = Nielson_VCG.time C2\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.time\n                          (transl (IF x1 THEN C1 ELSE C2)) =\n                         Nielson_VCG.time (IF x1 THEN C1 ELSE C2)\n 5. \\<And>x1 x2 x3 C.\n       Nielson_VCGi.time (transl C) = Nielson_VCG.time C \\<Longrightarrow>\n       Nielson_VCGi.time (transl ({x1/x2/x3} CONSEQ C)) =\n       Nielson_VCG.time ({x1/x2/x3} CONSEQ C)\n 6. \\<And>x1 x2 C.\n       Nielson_VCGi.time (transl C) = Nielson_VCG.time C \\<Longrightarrow>\n       Nielson_VCGi.time (transl ({x1} WHILE x2 DO C)) =\n       Nielson_VCG.time ({x1} WHILE x2 DO C)", "by(auto simp: preT_transl)"], ["", "lemma vc_transl: \"Nielson_VCG.vc C Q \\<Longrightarrow> Nielson_VCGi.vc (transl C) Q UNIV UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nielson_VCG.vc C Q \\<Longrightarrow>\n    Nielson_VCGi.vc (transl C) Q UNIV UNIV", "proof (induct C arbitrary: Q)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>Q.\n       Nielson_VCG.vc SKIP Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl SKIP) Q UNIV UNIV\n 2. \\<And>x1 x2 Q.\n       Nielson_VCG.vc (x1 ::= x2) Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl (x1 ::= x2)) Q UNIV UNIV\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (C1;; C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (C1;; C2)) Q UNIV UNIV\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (IF x1 THEN C1 ELSE C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (IF x1 THEN C1 ELSE C2)) Q\n                          UNIV UNIV\n 5. \\<And>x1 x2 x3 C Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        Nielson_VCG.vc ({x1/x2/x3} CONSEQ C) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl ({x1/x2/x3} CONSEQ C)) Q\n                          UNIV UNIV\n 6. \\<And>x1 x2 C Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        Nielson_VCG.vc ({x1} WHILE x2 DO C) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl ({x1} WHILE x2 DO C)) Q\n                          UNIV UNIV", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>Q.\n       Nielson_VCG.vc SKIP Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl SKIP) Q UNIV UNIV\n 2. \\<And>x1 x2 Q.\n       Nielson_VCG.vc (x1 ::= x2) Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl (x1 ::= x2)) Q UNIV UNIV\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (C1;; C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (C1;; C2)) Q UNIV UNIV\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (IF x1 THEN C1 ELSE C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (IF x1 THEN C1 ELSE C2)) Q\n                          UNIV UNIV\n 5. \\<And>x1 x2 x3 C Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        Nielson_VCG.vc ({x1/x2/x3} CONSEQ C) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl ({x1/x2/x3} CONSEQ C)) Q\n                          UNIV UNIV\n 6. \\<And>x1 x2 C Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        Nielson_VCG.vc ({x1} WHILE x2 DO C) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl ({x1} WHILE x2 DO C)) Q\n                          UNIV UNIV", "case (Aconseq x1 x2 x3 C)"], ["proof (state)\nthis:\n  Nielson_VCG.vc C ?Q \\<Longrightarrow>\n  Nielson_VCGi.vc (transl C) ?Q UNIV UNIV\n  Nielson_VCG.vc ({x1/x2/x3} CONSEQ C) Q\n\ngoal (6 subgoals):\n 1. \\<And>Q.\n       Nielson_VCG.vc SKIP Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl SKIP) Q UNIV UNIV\n 2. \\<And>x1 x2 Q.\n       Nielson_VCG.vc (x1 ::= x2) Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl (x1 ::= x2)) Q UNIV UNIV\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (C1;; C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (C1;; C2)) Q UNIV UNIV\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (IF x1 THEN C1 ELSE C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (IF x1 THEN C1 ELSE C2)) Q\n                          UNIV UNIV\n 5. \\<And>x1 x2 x3 C Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        Nielson_VCG.vc ({x1/x2/x3} CONSEQ C) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl ({x1/x2/x3} CONSEQ C)) Q\n                          UNIV UNIV\n 6. \\<And>x1 x2 C Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        Nielson_VCG.vc ({x1} WHILE x2 DO C) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl ({x1} WHILE x2 DO C)) Q\n                          UNIV UNIV", "then"], ["proof (chain)\npicking this:\n  Nielson_VCG.vc C ?Q \\<Longrightarrow>\n  Nielson_VCGi.vc (transl C) ?Q UNIV UNIV\n  Nielson_VCG.vc ({x1/x2/x3} CONSEQ C) Q", "show ?case"], ["proof (prove)\nusing this:\n  Nielson_VCG.vc C ?Q \\<Longrightarrow>\n  Nielson_VCGi.vc (transl C) ?Q UNIV UNIV\n  Nielson_VCG.vc ({x1/x2/x3} CONSEQ C) Q\n\ngoal (1 subgoal):\n 1. Nielson_VCGi.vc (transl ({x1/x2/x3} CONSEQ C)) Q UNIV UNIV", "apply (auto simp: pre_transl time_transl)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>k s1 s2 l.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        Nielson_VCG.vc C x2; 0 < k;\n        \\<forall>l s.\n           x1 l s \\<longrightarrow>\n           Nielson_VCG.time C s \\<le> k * x3 s \\<and>\n           (\\<forall>t.\n               \\<exists>l'.\n                  Nielson_VCG.pre C x2 l' s \\<and>\n                  (x2 l' t \\<longrightarrow> Q l t));\n        \\<forall>x. s1 x = s2 x; x1 l s1\\<rbrakk>\n       \\<Longrightarrow> x1 l s2\n 2. \\<And>k s1 s2 l.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        Nielson_VCG.vc C x2; 0 < k;\n        \\<forall>l s.\n           x1 l s \\<longrightarrow>\n           Nielson_VCG.time C s \\<le> k * x3 s \\<and>\n           (\\<forall>t.\n               \\<exists>l'.\n                  Nielson_VCG.pre C x2 l' s \\<and>\n                  (x2 l' t \\<longrightarrow> Q l t));\n        \\<forall>x. s1 x = s2 x; x1 l s2\\<rbrakk>\n       \\<Longrightarrow> x1 l s1\n 3. \\<And>k s1 s2 l.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        Nielson_VCG.vc C x2; 0 < k;\n        \\<forall>l s.\n           x1 l s \\<longrightarrow>\n           Nielson_VCG.time C s \\<le> k * x3 s \\<and>\n           (\\<forall>t.\n               \\<exists>l'.\n                  Nielson_VCG.pre C x2 l' s \\<and>\n                  (x2 l' t \\<longrightarrow> Q l t));\n        \\<forall>x. s1 x = s2 x; x2 l s1\\<rbrakk>\n       \\<Longrightarrow> x2 l s2\n 4. \\<And>k s1 s2 l.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        Nielson_VCG.vc C x2; 0 < k;\n        \\<forall>l s.\n           x1 l s \\<longrightarrow>\n           Nielson_VCG.time C s \\<le> k * x3 s \\<and>\n           (\\<forall>t.\n               \\<exists>l'.\n                  Nielson_VCG.pre C x2 l' s \\<and>\n                  (x2 l' t \\<longrightarrow> Q l t));\n        \\<forall>x. s1 x = s2 x; x2 l s2\\<rbrakk>\n       \\<Longrightarrow> x2 l s1\n 5. \\<And>k s1 s2.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        Nielson_VCG.vc C x2; 0 < k;\n        \\<forall>l s.\n           x1 l s \\<longrightarrow>\n           Nielson_VCG.time C s \\<le> k * x3 s \\<and>\n           (\\<forall>t.\n               \\<exists>l'.\n                  Nielson_VCG.pre C x2 l' s \\<and>\n                  (x2 l' t \\<longrightarrow> Q l t));\n        \\<forall>x. s1 x = s2 x\\<rbrakk>\n       \\<Longrightarrow> x3 s1 = x3 s2", "apply presburger+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Nielson_VCGi.vc (transl ({x1/x2/x3} CONSEQ C)) Q UNIV UNIV\n\ngoal (5 subgoals):\n 1. \\<And>Q.\n       Nielson_VCG.vc SKIP Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl SKIP) Q UNIV UNIV\n 2. \\<And>x1 x2 Q.\n       Nielson_VCG.vc (x1 ::= x2) Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl (x1 ::= x2)) Q UNIV UNIV\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (C1;; C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (C1;; C2)) Q UNIV UNIV\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (IF x1 THEN C1 ELSE C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (IF x1 THEN C1 ELSE C2)) Q\n                          UNIV UNIV\n 5. \\<And>x1 x2 C Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        Nielson_VCG.vc ({x1} WHILE x2 DO C) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl ({x1} WHILE x2 DO C)) Q\n                          UNIV UNIV", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>Q.\n       Nielson_VCG.vc SKIP Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl SKIP) Q UNIV UNIV\n 2. \\<And>x1 x2 Q.\n       Nielson_VCG.vc (x1 ::= x2) Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl (x1 ::= x2)) Q UNIV UNIV\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (C1;; C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (C1;; C2)) Q UNIV UNIV\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (IF x1 THEN C1 ELSE C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (IF x1 THEN C1 ELSE C2)) Q\n                          UNIV UNIV\n 5. \\<And>x1 x2 C Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        Nielson_VCG.vc ({x1} WHILE x2 DO C) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl ({x1} WHILE x2 DO C)) Q\n                          UNIV UNIV", "case (Awhile A b C)"], ["proof (state)\nthis:\n  Nielson_VCG.vc C ?Q \\<Longrightarrow>\n  Nielson_VCGi.vc (transl C) ?Q UNIV UNIV\n  Nielson_VCG.vc ({A} WHILE b DO C) Q\n\ngoal (5 subgoals):\n 1. \\<And>Q.\n       Nielson_VCG.vc SKIP Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl SKIP) Q UNIV UNIV\n 2. \\<And>x1 x2 Q.\n       Nielson_VCG.vc (x1 ::= x2) Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl (x1 ::= x2)) Q UNIV UNIV\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (C1;; C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (C1;; C2)) Q UNIV UNIV\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (IF x1 THEN C1 ELSE C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (IF x1 THEN C1 ELSE C2)) Q\n                          UNIV UNIV\n 5. \\<And>x1 x2 C Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        Nielson_VCG.vc ({x1} WHILE x2 DO C) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl ({x1} WHILE x2 DO C)) Q\n                          UNIV UNIV", "obtain I S E where \"A=(I,S,E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>I S E. A = (I, S, E) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>I S E. A = (I, S, E) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  A = (I, S, E)\n\ngoal (5 subgoals):\n 1. \\<And>Q.\n       Nielson_VCG.vc SKIP Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl SKIP) Q UNIV UNIV\n 2. \\<And>x1 x2 Q.\n       Nielson_VCG.vc (x1 ::= x2) Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl (x1 ::= x2)) Q UNIV UNIV\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (C1;; C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (C1;; C2)) Q UNIV UNIV\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (IF x1 THEN C1 ELSE C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (IF x1 THEN C1 ELSE C2)) Q\n                          UNIV UNIV\n 5. \\<And>x1 x2 C Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        Nielson_VCG.vc ({x1} WHILE x2 DO C) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl ({x1} WHILE x2 DO C)) Q\n                          UNIV UNIV", "with Awhile"], ["proof (chain)\npicking this:\n  Nielson_VCG.vc C ?Q \\<Longrightarrow>\n  Nielson_VCGi.vc (transl C) ?Q UNIV UNIV\n  Nielson_VCG.vc ({A} WHILE b DO C) Q\n  A = (I, S, E)", "show ?case"], ["proof (prove)\nusing this:\n  Nielson_VCG.vc C ?Q \\<Longrightarrow>\n  Nielson_VCGi.vc (transl C) ?Q UNIV UNIV\n  Nielson_VCG.vc ({A} WHILE b DO C) Q\n  A = (I, S, E)\n\ngoal (1 subgoal):\n 1. Nielson_VCGi.vc (transl ({A} WHILE b DO C)) Q UNIV UNIV", "apply (auto simp: pre_transl preT_transl time_transl postQ_transl)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s1 s2 l.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        A = (I, S, E);\n        \\<forall>l s.\n           (I l s \\<and> bval b s \\<longrightarrow>\n            Nielson_VCG.pre C I l s \\<and>\n            Suc (Nielson_VCG.preT C E s + Nielson_VCG.time C s)\n            \\<le> E s \\<and>\n            S s = S (Nielson_VCG.postQ C s)) \\<and>\n           (I l s \\<and> \\<not> bval b s \\<longrightarrow>\n            Q l s \\<and> Suc 0 \\<le> E s \\<and> S s = s);\n        Nielson_VCG.vc C I; \\<forall>x. s1 x = s2 x; I l s1\\<rbrakk>\n       \\<Longrightarrow> I l s2\n 2. \\<And>s1 s2 l.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        A = (I, S, E);\n        \\<forall>l s.\n           (I l s \\<and> bval b s \\<longrightarrow>\n            Nielson_VCG.pre C I l s \\<and>\n            Suc (Nielson_VCG.preT C E s + Nielson_VCG.time C s)\n            \\<le> E s \\<and>\n            S s = S (Nielson_VCG.postQ C s)) \\<and>\n           (I l s \\<and> \\<not> bval b s \\<longrightarrow>\n            Q l s \\<and> Suc 0 \\<le> E s \\<and> S s = s);\n        Nielson_VCG.vc C I; \\<forall>x. s1 x = s2 x; I l s2\\<rbrakk>\n       \\<Longrightarrow> I l s1\n 3. \\<And>y s1 s2.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        A = (I, S, E);\n        \\<forall>l s.\n           (I l s \\<and> bval b s \\<longrightarrow>\n            Nielson_VCG.pre C I l s \\<and>\n            Suc (Nielson_VCG.preT C E s + Nielson_VCG.time C s)\n            \\<le> E s \\<and>\n            S s = S (Nielson_VCG.postQ C s)) \\<and>\n           (I l s \\<and> \\<not> bval b s \\<longrightarrow>\n            Q l s \\<and> Suc 0 \\<le> E s \\<and> S s = s);\n        Nielson_VCG.vc C I; \\<forall>x. s1 x = s2 x\\<rbrakk>\n       \\<Longrightarrow> S s1 y = S s2 y\n 4. \\<And>s1 s2.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C) Q UNIV UNIV;\n        A = (I, S, E);\n        \\<forall>l s.\n           (I l s \\<and> bval b s \\<longrightarrow>\n            Nielson_VCG.pre C I l s \\<and>\n            Suc (Nielson_VCG.preT C E s + Nielson_VCG.time C s)\n            \\<le> E s \\<and>\n            S s = S (Nielson_VCG.postQ C s)) \\<and>\n           (I l s \\<and> \\<not> bval b s \\<longrightarrow>\n            Q l s \\<and> Suc 0 \\<le> E s \\<and> S s = s);\n        Nielson_VCG.vc C I; \\<forall>x. s1 x = s2 x\\<rbrakk>\n       \\<Longrightarrow> E s1 = E s2", "apply presburger+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Nielson_VCGi.vc (transl ({A} WHILE b DO C)) Q UNIV UNIV\n\ngoal (4 subgoals):\n 1. \\<And>Q.\n       Nielson_VCG.vc SKIP Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl SKIP) Q UNIV UNIV\n 2. \\<And>x1 x2 Q.\n       Nielson_VCG.vc (x1 ::= x2) Q \\<Longrightarrow>\n       Nielson_VCGi.vc (transl (x1 ::= x2)) Q UNIV UNIV\n 3. \\<And>C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (C1;; C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (C1;; C2)) Q UNIV UNIV\n 4. \\<And>x1 C1 C2 Q.\n       \\<lbrakk>\\<And>Q.\n                   Nielson_VCG.vc C1 Q \\<Longrightarrow>\n                   Nielson_VCGi.vc (transl C1) Q UNIV UNIV;\n        \\<And>Q.\n           Nielson_VCG.vc C2 Q \\<Longrightarrow>\n           Nielson_VCGi.vc (transl C2) Q UNIV UNIV;\n        Nielson_VCG.vc (IF x1 THEN C1 ELSE C2) Q\\<rbrakk>\n       \\<Longrightarrow> Nielson_VCGi.vc (transl (IF x1 THEN C1 ELSE C2)) Q\n                          UNIV UNIV", "qed (auto simp: qdeps_UNIV fune_UNIV pre_transl)"], ["", "lemma strip_transl: \"Nielson_VCGi.strip (transl C) = Nielson_VCG.strip C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nielson_VCGi.strip (transl C) = Nielson_VCG.strip C", "by (induct C, auto)"], ["", "lemma vc_restrict_complete:\n  assumes  \"\\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}\"\n  shows \"\\<exists>C. Nielson_VCGi.strip C = c \\<and> Nielson_VCGi.vc C Q UNIV UNIV \n  \\<and> (\\<forall>l s. P l s \\<longrightarrow> Nielson_VCGi.pre C Q l s \\<and> Q l (Nielson_VCGi.postQ C s))\n  \\<and> (\\<exists>k. \\<forall>l s. P l s \\<longrightarrow>  Nielson_VCGi.time C s \\<le> k * e s)  \"\n  (is \"\\<exists>C. ?G P c Q C e\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>C.\n       Nielson_VCGi.strip C = c \\<and>\n       Nielson_VCGi.vc C Q UNIV UNIV \\<and>\n       (\\<forall>l s.\n           P l s \\<longrightarrow>\n           Nielson_VCGi.pre C Q l s \\<and>\n           Q l (Nielson_VCGi.postQ C s)) \\<and>\n       (\\<exists>k.\n           \\<forall>l s.\n              P l s \\<longrightarrow> Nielson_VCGi.time C s \\<le> k * e s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>C.\n       Nielson_VCGi.strip C = c \\<and>\n       Nielson_VCGi.vc C Q UNIV UNIV \\<and>\n       (\\<forall>l s.\n           P l s \\<longrightarrow>\n           Nielson_VCGi.pre C Q l s \\<and>\n           Q l (Nielson_VCGi.postQ C s)) \\<and>\n       (\\<exists>k.\n           \\<forall>l s.\n              P l s \\<longrightarrow> Nielson_VCGi.time C s \\<le> k * e s)", "obtain C where C: \"Nielson_VCG.strip C = c\" \"Nielson_VCG.vc C Q\" \"(\\<forall>l s. P l s \\<longrightarrow> Nielson_VCG.pre C Q l s \\<and> Q l (Nielson_VCG.postQ C s))\"\n        \"(\\<exists>k. \\<forall>l s. P l s \\<longrightarrow> Nielson_VCG.time C s \\<le> k * e s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>Nielson_VCG.strip C = c; Nielson_VCG.vc C Q;\n         \\<forall>l s.\n            P l s \\<longrightarrow>\n            Nielson_VCG.pre C Q l s \\<and> Q l (Nielson_VCG.postQ C s);\n         \\<exists>k.\n            \\<forall>l s.\n               P l s \\<longrightarrow>\n               Nielson_VCG.time C s \\<le> k * e s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using vc_complete[OF assms]"], ["proof (prove)\nusing this:\n  \\<exists>C.\n     Nielson_VCG.strip C = c \\<and>\n     Nielson_VCG.vc C Q \\<and>\n     (\\<forall>l s.\n         P l s \\<longrightarrow>\n         Nielson_VCG.pre C Q l s \\<and> Q l (Nielson_VCG.postQ C s)) \\<and>\n     (\\<exists>k.\n         \\<forall>l s.\n            P l s \\<longrightarrow> Nielson_VCG.time C s \\<le> k * e s)\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>Nielson_VCG.strip C = c; Nielson_VCG.vc C Q;\n         \\<forall>l s.\n            P l s \\<longrightarrow>\n            Nielson_VCG.pre C Q l s \\<and> Q l (Nielson_VCG.postQ C s);\n         \\<exists>k.\n            \\<forall>l s.\n               P l s \\<longrightarrow>\n               Nielson_VCG.time C s \\<le> k * e s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Nielson_VCG.strip C = c\n  Nielson_VCG.vc C Q\n  \\<forall>l s.\n     P l s \\<longrightarrow>\n     Nielson_VCG.pre C Q l s \\<and> Q l (Nielson_VCG.postQ C s)\n  \\<exists>k.\n     \\<forall>l s.\n        P l s \\<longrightarrow> Nielson_VCG.time C s \\<le> k * e s\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       Nielson_VCGi.strip C = c \\<and>\n       Nielson_VCGi.vc C Q UNIV UNIV \\<and>\n       (\\<forall>l s.\n           P l s \\<longrightarrow>\n           Nielson_VCGi.pre C Q l s \\<and>\n           Q l (Nielson_VCGi.postQ C s)) \\<and>\n       (\\<exists>k.\n           \\<forall>l s.\n              P l s \\<longrightarrow> Nielson_VCGi.time C s \\<le> k * e s)", "let ?C=\"transl C\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>C.\n       Nielson_VCGi.strip C = c \\<and>\n       Nielson_VCGi.vc C Q UNIV UNIV \\<and>\n       (\\<forall>l s.\n           P l s \\<longrightarrow>\n           Nielson_VCGi.pre C Q l s \\<and>\n           Q l (Nielson_VCGi.postQ C s)) \\<and>\n       (\\<exists>k.\n           \\<forall>l s.\n              P l s \\<longrightarrow> Nielson_VCGi.time C s \\<le> k * e s)", "from C"], ["proof (chain)\npicking this:\n  Nielson_VCG.strip C = c\n  Nielson_VCG.vc C Q\n  \\<forall>l s.\n     P l s \\<longrightarrow>\n     Nielson_VCG.pre C Q l s \\<and> Q l (Nielson_VCG.postQ C s)\n  \\<exists>k.\n     \\<forall>l s.\n        P l s \\<longrightarrow> Nielson_VCG.time C s \\<le> k * e s", "have \"?G P c Q ?C e\""], ["proof (prove)\nusing this:\n  Nielson_VCG.strip C = c\n  Nielson_VCG.vc C Q\n  \\<forall>l s.\n     P l s \\<longrightarrow>\n     Nielson_VCG.pre C Q l s \\<and> Q l (Nielson_VCG.postQ C s)\n  \\<exists>k.\n     \\<forall>l s.\n        P l s \\<longrightarrow> Nielson_VCG.time C s \\<le> k * e s\n\ngoal (1 subgoal):\n 1. Nielson_VCGi.strip (transl C) = c \\<and>\n    Nielson_VCGi.vc (transl C) Q UNIV UNIV \\<and>\n    (\\<forall>l s.\n        P l s \\<longrightarrow>\n        Nielson_VCGi.pre (transl C) Q l s \\<and>\n        Q l (Nielson_VCGi.postQ (transl C) s)) \\<and>\n    (\\<exists>k.\n        \\<forall>l s.\n           P l s \\<longrightarrow>\n           Nielson_VCGi.time (transl C) s \\<le> k * e s)", "by(auto simp: strip_transl vc_transl pre_transl postQ_transl time_transl)"], ["proof (state)\nthis:\n  Nielson_VCGi.strip (transl C) = c \\<and>\n  Nielson_VCGi.vc (transl C) Q UNIV UNIV \\<and>\n  (\\<forall>l s.\n      P l s \\<longrightarrow>\n      Nielson_VCGi.pre (transl C) Q l s \\<and>\n      Q l (Nielson_VCGi.postQ (transl C) s)) \\<and>\n  (\\<exists>k.\n      \\<forall>l s.\n         P l s \\<longrightarrow>\n         Nielson_VCGi.time (transl C) s \\<le> k * e s)\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       Nielson_VCGi.strip C = c \\<and>\n       Nielson_VCGi.vc C Q UNIV UNIV \\<and>\n       (\\<forall>l s.\n           P l s \\<longrightarrow>\n           Nielson_VCGi.pre C Q l s \\<and>\n           Q l (Nielson_VCGi.postQ C s)) \\<and>\n       (\\<exists>k.\n           \\<forall>l s.\n              P l s \\<longrightarrow> Nielson_VCGi.time C s \\<le> k * e s)", "then"], ["proof (chain)\npicking this:\n  Nielson_VCGi.strip (transl C) = c \\<and>\n  Nielson_VCGi.vc (transl C) Q UNIV UNIV \\<and>\n  (\\<forall>l s.\n      P l s \\<longrightarrow>\n      Nielson_VCGi.pre (transl C) Q l s \\<and>\n      Q l (Nielson_VCGi.postQ (transl C) s)) \\<and>\n  (\\<exists>k.\n      \\<forall>l s.\n         P l s \\<longrightarrow>\n         Nielson_VCGi.time (transl C) s \\<le> k * e s)", "show ?thesis"], ["proof (prove)\nusing this:\n  Nielson_VCGi.strip (transl C) = c \\<and>\n  Nielson_VCGi.vc (transl C) Q UNIV UNIV \\<and>\n  (\\<forall>l s.\n      P l s \\<longrightarrow>\n      Nielson_VCGi.pre (transl C) Q l s \\<and>\n      Q l (Nielson_VCGi.postQ (transl C) s)) \\<and>\n  (\\<exists>k.\n      \\<forall>l s.\n         P l s \\<longrightarrow>\n         Nielson_VCGi.time (transl C) s \\<le> k * e s)\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       Nielson_VCGi.strip C = c \\<and>\n       Nielson_VCGi.vc C Q UNIV UNIV \\<and>\n       (\\<forall>l s.\n           P l s \\<longrightarrow>\n           Nielson_VCGi.pre C Q l s \\<and>\n           Q l (Nielson_VCGi.postQ C s)) \\<and>\n       (\\<exists>k.\n           \\<forall>l s.\n              P l s \\<longrightarrow> Nielson_VCGi.time C s \\<le> k * e s)", ".."], ["proof (state)\nthis:\n  \\<exists>C.\n     Nielson_VCGi.strip C = c \\<and>\n     Nielson_VCGi.vc C Q UNIV UNIV \\<and>\n     (\\<forall>l s.\n         P l s \\<longrightarrow>\n         Nielson_VCGi.pre C Q l s \\<and>\n         Q l (Nielson_VCGi.postQ C s)) \\<and>\n     (\\<exists>k.\n         \\<forall>l s.\n            P l s \\<longrightarrow> Nielson_VCGi.time C s \\<le> k * e s)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}