{"file_name": "/home/qj213/afp-2021-10-22/thys/Hoare_Time/QuantK_Hoare.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hoare_Time", "problem_names": ["lemma const: \"\\<lbrakk> \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat k * P s}c{\\<lambda>s. enat k * Q s};  k>0 \\<rbrakk> \\<Longrightarrow>\n           \\<turnstile>\\<^sub>2\\<^sub>' {P}c{ Q}\"", "lemma Zconseq: \"\\<lbrakk> \\<turnstile>\\<^sub>Z {P}c{Q} ; \\<And>s. P s \\<le> enat k *  P' s ; \\<And>s. enat k * Q' s \\<le> Q s; k>0 \\<rbrakk> \\<Longrightarrow>\n           \\<turnstile>\\<^sub>Z {P'}c{ Q'}\"", "lemma ZQ: \" \\<turnstile>\\<^sub>Z { P } c { Q } \\<Longrightarrow>  \\<turnstile>\\<^sub>2\\<^sub>' { P } c { Q }\"", "lemma QZ: \" \\<turnstile>\\<^sub>2\\<^sub>' { P } c { Q } \\<Longrightarrow>  \\<turnstile>\\<^sub>Z { P } c { Q }\"", "lemma QZ_iff:  \"\\<turnstile>\\<^sub>2\\<^sub>' { P } c { Q } \\<longleftrightarrow>  \\<turnstile>\\<^sub>Z { P } c { Q }\"", "lemma enatSuc0[simp]: \"enat (Suc 0) * x = x\"", "theorem hoareQ_sound: \"\\<turnstile>\\<^sub>2\\<^sub>' {P}c{ Q}  \\<Longrightarrow>  \\<Turnstile>\\<^sub>2\\<^sub>' {P}c{ Q}\"", "lemma conseq':\n  \"\\<lbrakk> \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q} ;  \\<forall>s. P s \\<le> P' s; \\<forall>s. Q' s \\<le> Q s  \\<rbrakk> \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P'} c {Q'}\"", "lemma strengthen_pre:\n  \"\\<lbrakk> \\<forall>s. P s \\<le> P' s;  \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q} \\<rbrakk> \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P'} c {Q}\"", "lemma weaken_post:\n  \"\\<lbrakk> \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};  \\<forall>s. Q s \\<ge> Q' s \\<rbrakk> \\<Longrightarrow>  \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q'}\"", "lemma Assign': \"\\<forall>s. P s \\<ge> eSuc ( Q(s[a/x])) \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P} x ::= a {Q}\"", "lemma bigstep_det: \"(c1, s) \\<Rightarrow> p1 \\<Down> t1 \\<Longrightarrow> (c1, s) \\<Rightarrow> p \\<Down> t \\<Longrightarrow> p1=p \\<and> t1=t\"", "lemma bigstepT_the_cost: \"(c, s) \\<Rightarrow> P \\<Down> T \\<Longrightarrow> (THE n. \\<exists>a. (c, s) \\<Rightarrow> n \\<Down> a) = P\"", "lemma bigstepT_the_state: \"(c, s) \\<Rightarrow> P \\<Down> T \\<Longrightarrow> (THE a. \\<exists>n. (c, s) \\<Rightarrow> n \\<Down> a) = T\"", "lemma SKIPnot: \"(\\<not> (SKIP, s) \\<Rightarrow> p \\<Down> t) = (s\\<noteq>t \\<or> p\\<noteq>Suc 0)\"", "lemma SKIPp: \"(THE p. \\<exists>t. (SKIP, s) \\<Rightarrow> p \\<Down> t) = Suc 0\"", "lemma SKIPt: \"(THE t. \\<exists>p. (SKIP, s) \\<Rightarrow> p \\<Down> t) = s\"", "lemma ASSp: \"(THE p. Ex (big_step_t (x ::= e, s) p)) = Suc 0\"", "lemma ASSt: \"(THE t. \\<exists>p. (x ::= e, s) \\<Rightarrow> p \\<Down> t) = s(x := aval e s)\"", "lemma ASSnot: \"( \\<not> (x ::= e, s) \\<Rightarrow> p \\<Down> t ) = (p\\<noteq>Suc 0 \\<or> t\\<noteq>s(x := aval e s))\"", "lemma wpQ_skip[simp]: \"wp\\<^sub>Q SKIP Q = (%s. eSuc (Q s))\"", "lemma wpQ_ass[simp]: \"wp\\<^sub>Q (x ::= e) Q = (\\<lambda>s. eSuc (Q (s(x := aval e s))))\"", "lemma wpt_Seq[simp]: \"wp\\<^sub>Q (c\\<^sub>1;;c\\<^sub>2) Q = wp\\<^sub>Q c\\<^sub>1 (wp\\<^sub>Q c\\<^sub>2 Q)\"", "lemma wpQ_If[simp]:\n \"wp\\<^sub>Q (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) Q = (\\<lambda>s. eSuc (wp\\<^sub>Q (if bval b s then c\\<^sub>1 else c\\<^sub>2) Q s))\"", "lemma hoareQ_inf: \"\\<turnstile>\\<^sub>2\\<^sub>' {%s. \\<infinity>} c { Q}\"", "lemma assumes b: \"bval b s\"\n  shows wpQ_WhileTrue: \" wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s  + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\"", "lemma assumes b: \"~ bval b s\"\n  shows wpQ_WhileFalse: \" Q s  + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\"", "lemma wpQ_is_pre: \"\\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c { Q}\"", "lemma wpQ_is_pre': \"\\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c (%s. enat k * Q s )} c {(%s. enat k * Q s )}\"", "lemma wpQ_is_weakestprePotential1: \"\\<Turnstile>\\<^sub>2\\<^sub>' {P}c{Q} \\<Longrightarrow> (\\<exists>k>0. \\<forall>s. wp\\<^sub>Q c (%s. enat k* Q s) s \\<le> enat k * P s)\"", "theorem hoareQ_complete: \"\\<Turnstile>\\<^sub>2\\<^sub>' {P}c{Q} \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P}c{ Q}\"", "theorem hoareQ_complete': \"\\<Turnstile>\\<^sub>2\\<^sub>' {P}c{Q} \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P}c{ Q}\"", "lemma fixes X::int assumes \"0 < X\" shows  \n Z: \"eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * (nat (X * X)))\"", "lemma weakenpre: \"\\<lbrakk> \\<turnstile>\\<^sub>2\\<^sub>' {P}c{Q} ;   (\\<forall>s. P s \\<le>  P' s)  \\<rbrakk> \\<Longrightarrow>\n           \\<turnstile>\\<^sub>2\\<^sub>' {P'}c{ Q}\"", "lemma whileDecr: \"\\<turnstile>\\<^sub>2\\<^sub>' { %s. enat (nat (s ''x'')) + 1} WHILE (Less (N 0) (V ''x'')) DO (SKIP;; SKIP;; ''x'' ::= Plus (V ''x'') (N (-1))) { %s. enat 0}\"", "lemma whileDecrIf: \"\\<turnstile>\\<^sub>2\\<^sub>' { %s. enat (nat (s ''x'')) + 1} WHILE (Less (N 0) (V ''x'')) DO ( (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP );; ''x'' ::= Plus (V ''x'') (N (-1))) { %s. enat 0}\"", "lemma whileDecrIf2: \"\\<turnstile>\\<^sub>2\\<^sub>' { %s. enat (nat (s ''x'')) + 1} WHILE (Less (N 0) (V ''x'')) DO ( (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP );; ''x'' ::= Plus (V ''x'') (N (-1))) { %s. enat 0}\""], "translations": [["", "lemma const: \"\\<lbrakk> \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat k * P s}c{\\<lambda>s. enat k * Q s};  k>0 \\<rbrakk> \\<Longrightarrow>\n           \\<turnstile>\\<^sub>2\\<^sub>' {P}c{ Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat k * P s} c\n    {\\<lambda>s. enat k * Q s};\n     0 < k\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "apply(rule conseq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat k * P s} c\n    {\\<lambda>s. enat k * Q s};\n     0 < k\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {?P} c {?Q}\n 2. \\<And>s.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat k * P s} c\n       {\\<lambda>s. enat k * Q s};\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> ?P s \\<le> enat ?k * P s\n 3. \\<And>s.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat k * P s} c\n       {\\<lambda>s. enat k * Q s};\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> enat ?k * Q s \\<le> ?Q s\n 4. \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat k * P s} c\n    {\\<lambda>s. enat k * Q s};\n     0 < k\\<rbrakk>\n    \\<Longrightarrow> 0 < ?k", "by auto"], ["", "inductive\n  hoareQ' :: \"qassn \\<Rightarrow> com \\<Rightarrow> qassn \\<Rightarrow> bool\" (\"\\<turnstile>\\<^sub>Z ({(1_)}/ (_)/ {(1_)})\" 50)\nwhere\n\nZSkip:  \"\\<turnstile>\\<^sub>Z {%s. eSuc (P s)} SKIP {P}\"  |\n\nZAssign:  \"\\<turnstile>\\<^sub>Z {\\<lambda>s. eSuc (P (s[a/x]))} x::=a { P }\"  |\n\nZIf: \"\\<lbrakk> \\<turnstile>\\<^sub>Z {\\<lambda>s. P s + \\<up>( bval b s)} c\\<^sub>1 { Q};\n       \\<turnstile>\\<^sub>Z {\\<lambda>s. P s + \\<up>(\\<not> bval b s)} c\\<^sub>2 { Q} \\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>Z {\\<lambda>s. eSuc (P s)} IF b THEN c\\<^sub>1 ELSE c\\<^sub>2 { Q }\"  |\n\nZSeq: \"\\<lbrakk> \\<turnstile>\\<^sub>Z { P\\<^sub>1 } c\\<^sub>1 { P\\<^sub>2 }; \\<turnstile>\\<^sub>Z {P\\<^sub>2} c\\<^sub>2 { P\\<^sub>3 }\\<rbrakk> \\<Longrightarrow> \\<turnstile>\\<^sub>Z {P\\<^sub>1} c\\<^sub>1;;c\\<^sub>2 {P\\<^sub>3}\"  |\n \nZWhile:\n  \"\\<lbrakk>   \\<turnstile>\\<^sub>Z { %s. I s + \\<up>(bval b s) } c { %t. I t + 1 }   \\<rbrakk>\n   \\<Longrightarrow> \\<turnstile>\\<^sub>Z {\\<lambda>s. I s + 1 } WHILE b DO c {\\<lambda>s.  I s + \\<up>(\\<not> bval b s)  }\" |\n\nZconseq': \"\\<lbrakk> \\<turnstile>\\<^sub>Z {P}c{Q} ; \\<And>s. P s \\<le>  P' s ; \\<And>s. Q' s \\<le> Q s \\<rbrakk> \\<Longrightarrow>\n           \\<turnstile>\\<^sub>Z {P'}c{ Q'}\"   |\n   \nZconst:  \"\\<lbrakk> \\<turnstile>\\<^sub>Z {\\<lambda>s. enat k * P s}c{\\<lambda>s. enat k * Q s};  k>0 \\<rbrakk> \\<Longrightarrow>\n           \\<turnstile>\\<^sub>Z {P}c{ Q}\""], ["", "lemma Zconseq: \"\\<lbrakk> \\<turnstile>\\<^sub>Z {P}c{Q} ; \\<And>s. P s \\<le> enat k *  P' s ; \\<And>s. enat k * Q' s \\<le> Q s; k>0 \\<rbrakk> \\<Longrightarrow>\n           \\<turnstile>\\<^sub>Z {P'}c{ Q'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>Z {P} c {Q};\n     \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n     0 < k\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>Z {P'} c {Q'}", "apply(rule Zconst[of k P' c Q'])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>Z {P} c {Q};\n     \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n     0 < k\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>Z {\\<lambda>s. enat k * P' s} c\n     {\\<lambda>s. enat k * Q' s}\n 2. \\<lbrakk>\\<turnstile>\\<^sub>Z {P} c {Q};\n     \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n     0 < k\\<rbrakk>\n    \\<Longrightarrow> 0 < k", "apply(rule Zconseq'[where P=P and Q=Q])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>Z {P} c {Q};\n     \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n     0 < k\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>Z {P} c {Q}\n 2. \\<And>s.\n       \\<lbrakk>\\<turnstile>\\<^sub>Z {P} c {Q};\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> P s \\<le> enat k * P' s\n 3. \\<And>s.\n       \\<lbrakk>\\<turnstile>\\<^sub>Z {P} c {Q};\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> enat k * Q' s \\<le> Q s\n 4. \\<lbrakk>\\<turnstile>\\<^sub>Z {P} c {Q};\n     \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n     0 < k\\<rbrakk>\n    \\<Longrightarrow> 0 < k", "by auto"], ["", "lemma ZQ: \" \\<turnstile>\\<^sub>Z { P } c { Q } \\<Longrightarrow>  \\<turnstile>\\<^sub>2\\<^sub>' { P } c { Q }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>Z {P} c {Q} \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "apply(induct rule: hoareQ'.induct)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>P. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>a. eSuc (P a)} SKIP {P}\n 2. \\<And>P a x.\n       \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>b. eSuc (P (b[a/x]))} x ::= a\n                                    {P}\n 3. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>Z {\\<lambda>s. P s + \\<up> (bval b s)}\n                                     c\\<^sub>1 {Q};\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>a. P a + \\<up> (bval b a)}\n                                     c\\<^sub>1 {Q};\n        \\<turnstile>\\<^sub>Z {\\<lambda>s. P s + \\<up> (\\<not> bval b s)}\n                             c\\<^sub>2 {Q};\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>a.\n   P a + \\<up> (\\<not> bval b a)}\n                                     c\\<^sub>2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>a.\n                    eSuc (P a)}\n                IF b THEN c\\<^sub>1 ELSE c\\<^sub>2 {Q}\n 4. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>Z {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<turnstile>\\<^sub>Z {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>2} c\\<^sub>2\n                                     {P\\<^sub>3}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>1}\n                c\\<^sub>1;; c\\<^sub>2 {P\\<^sub>3}\n 5. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>Z {\\<lambda>s. I s + \\<up> (bval b s)} c\n                                     {\\<lambda>t. I t + 1};\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>a. I a + \\<up> (bval b a)} c\n                                     {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>a. I a + 1}\n                WHILE b DO c {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 6. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>Z {P} c {Q};\n        \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P'} c {Q'}\n 7. \\<And>k P c Q.\n       \\<lbrakk>\\<turnstile>\\<^sub>Z {\\<lambda>s. enat k * P s} c\n                                     {\\<lambda>s. enat k * Q s};\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>a. enat k * P a} c\n                                     {\\<lambda>a. enat k * Q a};\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "apply (auto simp: hoareQ.Skip  hoareQ.Assign hoareQ.If hoareQ.Seq hoareQ.While)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P c Q P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>Z {P} c {Q};\n        \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}; \\<And>s. P s \\<le> P' s;\n        \\<And>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P'} c {Q'}\n 2. \\<And>k P c Q.\n       \\<lbrakk>\\<turnstile>\\<^sub>Z {\\<lambda>s. enat k * P s} c\n                                     {\\<lambda>s. enat k * Q s};\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>a. enat k * P a} c\n                                     {\\<lambda>a. enat k * Q a};\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>Z {P_} c_ {Q_};\n     \\<turnstile>\\<^sub>2\\<^sub>' {P_} c_ {Q_}; \\<And>s. P_ s \\<le> P'_ s;\n     \\<And>s. Q'_ s \\<le> Q_ s\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P'_} c_ {Q'_}", "using conseq[where k=1]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {?P} ?c {?Q};\n   \\<And>s. ?P s \\<le> enat 1 * ?P' s; \\<And>s. enat 1 * ?Q' s \\<le> ?Q s;\n   0 < 1\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {?P'} ?c {?Q'}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>Z {P_} c_ {Q_};\n     \\<turnstile>\\<^sub>2\\<^sub>' {P_} c_ {Q_}; \\<And>s. P_ s \\<le> P'_ s;\n     \\<And>s. Q'_ s \\<le> Q_ s\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P'_} c_ {Q'_}", "using one_enat_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {?P} ?c {?Q};\n   \\<And>s. ?P s \\<le> enat 1 * ?P' s; \\<And>s. enat 1 * ?Q' s \\<le> ?Q s;\n   0 < 1\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {?P'} ?c {?Q'}\n  1 = enat 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>Z {P_} c_ {Q_};\n     \\<turnstile>\\<^sub>2\\<^sub>' {P_} c_ {Q_}; \\<And>s. P_ s \\<le> P'_ s;\n     \\<And>s. Q'_ s \\<le> Q_ s\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P'_} c_ {Q'_}", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k P c Q.\n       \\<lbrakk>\\<turnstile>\\<^sub>Z {\\<lambda>s. enat k * P s} c\n                                     {\\<lambda>s. enat k * Q s};\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>a. enat k * P a} c\n                                     {\\<lambda>a. enat k * Q a};\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "subgoal for k P c Q"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>Z {\\<lambda>s. enat k * P s} c\n                                  {\\<lambda>s. enat k * Q s};\n     \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>a. enat k * P a} c\n                                  {\\<lambda>a. enat k * Q a};\n     0 < k\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "using const"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat ?k * ?P s} ?c\n  {\\<lambda>s. enat ?k * ?Q s};\n   0 < ?k\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {?P} ?c {?Q}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>Z {\\<lambda>s. enat k * P s} c\n                                  {\\<lambda>s. enat k * Q s};\n     \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>a. enat k * P a} c\n                                  {\\<lambda>a. enat k * Q a};\n     0 < k\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma QZ: \" \\<turnstile>\\<^sub>2\\<^sub>' { P } c { Q } \\<Longrightarrow>  \\<turnstile>\\<^sub>Z { P } c { Q }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q} \\<Longrightarrow>\n    \\<turnstile>\\<^sub>Z {P} c {Q}", "apply(induct rule: hoareQ.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>P. \\<turnstile>\\<^sub>Z {\\<lambda>a. eSuc (P a)} SKIP {P}\n 2. \\<And>P a x.\n       \\<turnstile>\\<^sub>Z {\\<lambda>b. eSuc (P (b[a/x]))} x ::= a {P}\n 3. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<turnstile>\\<^sub>Z {\\<lambda>a. P a + \\<up> (bval b a)} c\\<^sub>1\n                             {Q};\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<turnstile>\\<^sub>Z {\\<lambda>a. P a + \\<up> (\\<not> bval b a)}\n                             c\\<^sub>2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>Z {\\<lambda>a. eSuc (P a)}\n        IF b THEN c\\<^sub>1 ELSE c\\<^sub>2 {Q}\n 4. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>1} c\\<^sub>1\n       {P\\<^sub>2};\n        \\<turnstile>\\<^sub>Z {P\\<^sub>1} c\\<^sub>1 {P\\<^sub>2};\n        \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<turnstile>\\<^sub>Z {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>Z {P\\<^sub>1}\n        c\\<^sub>1;; c\\<^sub>2 {P\\<^sub>3}\n 5. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<turnstile>\\<^sub>Z {\\<lambda>a. I a + \\<up> (bval b a)} c\n                             {\\<lambda>a. I a + 1}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>Z {\\<lambda>a. I a + 1}\n        WHILE b DO c {\\<lambda>a. I a + \\<up> (\\<not> bval b a)}\n 6. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<turnstile>\\<^sub>Z {P} c {Q}; \\<And>s. P s \\<le> enat k * P' s;\n        \\<And>s. enat k * Q' s \\<le> Q s; 0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>Z {P'} c {Q'}", "apply (auto simp: ZSkip  ZAssign ZIf ZSeq ZWhile )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<turnstile>\\<^sub>Z {P} c {Q}; \\<And>s. P s \\<le> enat k * P' s;\n        \\<And>s. enat k * Q' s \\<le> Q s; 0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>Z {P'} c {Q'}", "using Zconseq"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<turnstile>\\<^sub>Z {?P} ?c {?Q};\n   \\<And>s. ?P s \\<le> enat ?k * ?P' s; \\<And>s. enat ?k * ?Q' s \\<le> ?Q s;\n   0 < ?k\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>Z {?P'} ?c {?Q'}\n\ngoal (1 subgoal):\n 1. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<turnstile>\\<^sub>Z {P} c {Q}; \\<And>s. P s \\<le> enat k * P' s;\n        \\<And>s. enat k * Q' s \\<le> Q s; 0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>Z {P'} c {Q'}", "by blast"], ["", "lemma QZ_iff:  \"\\<turnstile>\\<^sub>2\\<^sub>' { P } c { Q } \\<longleftrightarrow>  \\<turnstile>\\<^sub>Z { P } c { Q }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}) =\n    (\\<turnstile>\\<^sub>Z {P} c {Q})", "using ZQ QZ"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>Z {?P} ?c {?Q} \\<Longrightarrow>\n  \\<turnstile>\\<^sub>2\\<^sub>' {?P} ?c {?Q}\n  \\<turnstile>\\<^sub>2\\<^sub>' {?P} ?c {?Q} \\<Longrightarrow>\n  \\<turnstile>\\<^sub>Z {?P} ?c {?Q}\n\ngoal (1 subgoal):\n 1. (\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}) =\n    (\\<turnstile>\\<^sub>Z {P} c {Q})", "by metis"], ["", "subsection \"Soundness\""], ["", "lemma enatSuc0[simp]: \"enat (Suc 0) * x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc 0) * x = x", "using one_enat_def"], ["proof (prove)\nusing this:\n  1 = enat 1\n\ngoal (1 subgoal):\n 1. enat (Suc 0) * x = x", "by auto"], ["", "theorem hoareQ_sound: \"\\<turnstile>\\<^sub>2\\<^sub>' {P}c{ Q}  \\<Longrightarrow>  \\<Turnstile>\\<^sub>2\\<^sub>' {P}c{ Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q} \\<Longrightarrow>\n    \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "apply(unfold hoare2o_valid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q} \\<Longrightarrow>\n    \\<exists>k>0.\n       \\<forall>s.\n          P s < \\<infinity> \\<longrightarrow>\n          (\\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat p + enat k * Q t \\<le> enat k * P s)", "proof(  induction  rule: hoareQ.induct)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>P.\n       \\<exists>k>0.\n          \\<forall>s.\n             eSuc (P s) < \\<infinity> \\<longrightarrow>\n             (\\<exists>t p.\n                 (SKIP, s) \\<Rightarrow> p \\<Down> t \\<and>\n                 enat p + enat k * P t \\<le> enat k * eSuc (P s))\n 2. \\<And>P a x.\n       \\<exists>k>0.\n          \\<forall>s.\n             eSuc (P (s[a/x])) < \\<infinity> \\<longrightarrow>\n             (\\<exists>t p.\n                 (x ::= a, s) \\<Rightarrow> p \\<Down> t \\<and>\n                 enat p + enat k * P t \\<le> enat k * eSuc (P (s[a/x])))\n 3. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 4. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>1} c\\<^sub>1\n       {P\\<^sub>2};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>2 t \\<le> enat k * P\\<^sub>1 s);\n        \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>2 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>3 t\n                  \\<le> enat k * P\\<^sub>2 s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c\\<^sub>1;; c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * P\\<^sub>3 t\n                                   \\<le> enat k * P\\<^sub>1 s)\n 5. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 6. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "case (Skip P)"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>P.\n       \\<exists>k>0.\n          \\<forall>s.\n             eSuc (P s) < \\<infinity> \\<longrightarrow>\n             (\\<exists>t p.\n                 (SKIP, s) \\<Rightarrow> p \\<Down> t \\<and>\n                 enat p + enat k * P t \\<le> enat k * eSuc (P s))\n 2. \\<And>P a x.\n       \\<exists>k>0.\n          \\<forall>s.\n             eSuc (P (s[a/x])) < \\<infinity> \\<longrightarrow>\n             (\\<exists>t p.\n                 (x ::= a, s) \\<Rightarrow> p \\<Down> t \\<and>\n                 enat p + enat k * P t \\<le> enat k * eSuc (P (s[a/x])))\n 3. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 4. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>1} c\\<^sub>1\n       {P\\<^sub>2};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>2 t \\<le> enat k * P\\<^sub>1 s);\n        \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>2 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>3 t\n                  \\<le> enat k * P\\<^sub>2 s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c\\<^sub>1;; c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * P\\<^sub>3 t\n                                   \\<le> enat k * P\\<^sub>1 s)\n 5. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 6. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          eSuc (P s) < \\<infinity> \\<longrightarrow>\n          (\\<exists>t p.\n              (SKIP, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat p + enat k * P t \\<le> enat k * eSuc (P s))", "apply(rule exI[where x=1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 1 \\<and>\n    (\\<forall>s.\n        eSuc (P s) < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (SKIP, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat 1 * P t \\<le> enat 1 * eSuc (P s)))", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       eSuc (P s) = enat i \\<Longrightarrow>\n       \\<exists>t p.\n          (SKIP, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + P t \\<le> enat i", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (P s) = enat i_ \\<Longrightarrow>\n    \\<exists>t p.\n       (SKIP, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + P t \\<le> enat i_", "apply(rule exI[where x=s])"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (P s) = enat i_ \\<Longrightarrow>\n    \\<exists>p.\n       (SKIP, s) \\<Rightarrow> p \\<Down> s \\<and> enat p + P s \\<le> enat i_", "apply(rule exI[where x=\"Suc 0\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (P s) = enat i_ \\<Longrightarrow>\n    (SKIP, s) \\<Rightarrow> Suc 0 \\<Down> s \\<and>\n    enat (Suc 0) + P s \\<le> enat i_", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. eSuc (P s) = enat i_ \\<Longrightarrow>\n    (SKIP, s) \\<Rightarrow> Suc 0 \\<Down> s\n 2. eSuc (P s) = enat i_ \\<Longrightarrow> enat (Suc 0) + P s \\<le> enat i_", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (P s) = enat i_ \\<Longrightarrow> enat (Suc 0) + P s \\<le> enat i_", "by (metis add.left_neutral add.right_neutral eSuc_enat iadd_Suc le_iff_add zero_enat_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>k>0.\n     \\<forall>s.\n        eSuc (P s) < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (SKIP, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * P t \\<le> enat k * eSuc (P s))\n\ngoal (5 subgoals):\n 1. \\<And>P a x.\n       \\<exists>k>0.\n          \\<forall>s.\n             eSuc (P (s[a/x])) < \\<infinity> \\<longrightarrow>\n             (\\<exists>t p.\n                 (x ::= a, s) \\<Rightarrow> p \\<Down> t \\<and>\n                 enat p + enat k * P t \\<le> enat k * eSuc (P (s[a/x])))\n 2. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 3. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>1} c\\<^sub>1\n       {P\\<^sub>2};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>2 t \\<le> enat k * P\\<^sub>1 s);\n        \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>2 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>3 t\n                  \\<le> enat k * P\\<^sub>2 s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c\\<^sub>1;; c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * P\\<^sub>3 t\n                                   \\<le> enat k * P\\<^sub>1 s)\n 4. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 5. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>P a x.\n       \\<exists>k>0.\n          \\<forall>s.\n             eSuc (P (s[a/x])) < \\<infinity> \\<longrightarrow>\n             (\\<exists>t p.\n                 (x ::= a, s) \\<Rightarrow> p \\<Down> t \\<and>\n                 enat p + enat k * P t \\<le> enat k * eSuc (P (s[a/x])))\n 2. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 3. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>1} c\\<^sub>1\n       {P\\<^sub>2};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>2 t \\<le> enat k * P\\<^sub>1 s);\n        \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>2 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>3 t\n                  \\<le> enat k * P\\<^sub>2 s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c\\<^sub>1;; c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * P\\<^sub>3 t\n                                   \\<le> enat k * P\\<^sub>1 s)\n 4. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 5. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "case (Assign P a x)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>P a x.\n       \\<exists>k>0.\n          \\<forall>s.\n             eSuc (P (s[a/x])) < \\<infinity> \\<longrightarrow>\n             (\\<exists>t p.\n                 (x ::= a, s) \\<Rightarrow> p \\<Down> t \\<and>\n                 enat p + enat k * P t \\<le> enat k * eSuc (P (s[a/x])))\n 2. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 3. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>1} c\\<^sub>1\n       {P\\<^sub>2};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>2 t \\<le> enat k * P\\<^sub>1 s);\n        \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>2 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>3 t\n                  \\<le> enat k * P\\<^sub>2 s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c\\<^sub>1;; c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * P\\<^sub>3 t\n                                   \\<le> enat k * P\\<^sub>1 s)\n 4. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 5. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          eSuc (P (s[a/x])) < \\<infinity> \\<longrightarrow>\n          (\\<exists>t p.\n              (x ::= a, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat p + enat k * P t \\<le> enat k * eSuc (P (s[a/x])))", "apply(rule exI[where x=1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 1 \\<and>\n    (\\<forall>s.\n        eSuc (P (s[a/x])) < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (x ::= a, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat 1 * P t \\<le> enat 1 * eSuc (P (s[a/x]))))", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       eSuc (P (s[a/x])) = enat i \\<Longrightarrow>\n       \\<exists>t p.\n          (x ::= a, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + P t \\<le> enat i", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (P (s[a/x])) = enat i_ \\<Longrightarrow>\n    \\<exists>t p.\n       (x ::= a, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + P t \\<le> enat i_", "apply(rule exI[where x=\"s[a/x]\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (P (s[a/x])) = enat i_ \\<Longrightarrow>\n    \\<exists>p.\n       (x ::= a, s) \\<Rightarrow> p \\<Down> s[a/x] \\<and>\n       enat p + P (s[a/x]) \\<le> enat i_", "apply(rule exI[where x=\"Suc 0\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (P (s[a/x])) = enat i_ \\<Longrightarrow>\n    (x ::= a, s) \\<Rightarrow> Suc 0 \\<Down> s[a/x] \\<and>\n    enat (Suc 0) + P (s[a/x]) \\<le> enat i_", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. eSuc (P (s[a/x])) = enat i_ \\<Longrightarrow>\n    (x ::= a, s) \\<Rightarrow> Suc 0 \\<Down> s[a/x]\n 2. eSuc (P (s[a/x])) = enat i_ \\<Longrightarrow>\n    enat (Suc 0) + P (s[a/x]) \\<le> enat i_", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (P (s[a/x])) = enat i_ \\<Longrightarrow>\n    enat (Suc 0) + P (s[a/x]) \\<le> enat i_", "by (metis add.left_neutral add.right_neutral  eSuc_enat iadd_Suc le_iff_add zero_enat_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>k>0.\n     \\<forall>s.\n        eSuc (P (s[a/x])) < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (x ::= a, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * P t \\<le> enat k * eSuc (P (s[a/x])))\n\ngoal (4 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 2. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>1} c\\<^sub>1\n       {P\\<^sub>2};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>2 t \\<le> enat k * P\\<^sub>1 s);\n        \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>2 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>3 t\n                  \\<le> enat k * P\\<^sub>2 s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c\\<^sub>1;; c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * P\\<^sub>3 t\n                                   \\<le> enat k * P\\<^sub>1 s)\n 3. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 4. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 2. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>1} c\\<^sub>1\n       {P\\<^sub>2};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>2 t \\<le> enat k * P\\<^sub>1 s);\n        \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>2 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>3 t\n                  \\<le> enat k * P\\<^sub>2 s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c\\<^sub>1;; c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * P\\<^sub>3 t\n                                   \\<le> enat k * P\\<^sub>1 s)\n 3. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 4. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "case (Seq P1 C1 P2 C2 P3)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {P1} C1 {P2}\n  \\<turnstile>\\<^sub>2\\<^sub>' {P2} C2 {P3}\n  \\<exists>k>0.\n     \\<forall>s.\n        P1 s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (C1, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * P2 t \\<le> enat k * P1 s)\n  \\<exists>k>0.\n     \\<forall>s.\n        P2 s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * P3 t \\<le> enat k * P2 s)\n\ngoal (4 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 2. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>1} c\\<^sub>1\n       {P\\<^sub>2};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>2 t \\<le> enat k * P\\<^sub>1 s);\n        \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>2 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>3 t\n                  \\<le> enat k * P\\<^sub>2 s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c\\<^sub>1;; c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * P\\<^sub>3 t\n                                   \\<le> enat k * P\\<^sub>1 s)\n 3. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 4. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "from Seq(3)"], ["proof (chain)\npicking this:\n  \\<exists>k>0.\n     \\<forall>s.\n        P1 s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (C1, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * P2 t \\<le> enat k * P1 s)", "obtain k1 where Seq3: \"\\<forall>s. P1 s < \\<infinity> \\<longrightarrow> (\\<exists>t p. (C1, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat k1 * P2 t \\<le> enat k1 * P1 s)\" and 10: \"k1>0\""], ["proof (prove)\nusing this:\n  \\<exists>k>0.\n     \\<forall>s.\n        P1 s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (C1, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * P2 t \\<le> enat k * P1 s)\n\ngoal (1 subgoal):\n 1. (\\<And>k1.\n        \\<lbrakk>\\<forall>s.\n                    P1 s < \\<infinity> \\<longrightarrow>\n                    (\\<exists>t p.\n                        (C1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                        enat p + enat k1 * P2 t \\<le> enat k1 * P1 s);\n         0 < k1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>s.\n     P1 s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (C1, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k1 * P2 t \\<le> enat k1 * P1 s)\n  0 < k1\n\ngoal (4 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 2. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>1} c\\<^sub>1\n       {P\\<^sub>2};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>2 t \\<le> enat k * P\\<^sub>1 s);\n        \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>2 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>3 t\n                  \\<le> enat k * P\\<^sub>2 s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c\\<^sub>1;; c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * P\\<^sub>3 t\n                                   \\<le> enat k * P\\<^sub>1 s)\n 3. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 4. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "from Seq(4)"], ["proof (chain)\npicking this:\n  \\<exists>k>0.\n     \\<forall>s.\n        P2 s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * P3 t \\<le> enat k * P2 s)", "obtain k2 where Seq4: \"\\<forall>s. P2 s < \\<infinity> \\<longrightarrow> (\\<exists>t p. (C2, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat k2 * P3 t \\<le> enat k2 * P2 s)\" and 20: \"k2>0\""], ["proof (prove)\nusing this:\n  \\<exists>k>0.\n     \\<forall>s.\n        P2 s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * P3 t \\<le> enat k * P2 s)\n\ngoal (1 subgoal):\n 1. (\\<And>k2.\n        \\<lbrakk>\\<forall>s.\n                    P2 s < \\<infinity> \\<longrightarrow>\n                    (\\<exists>t p.\n                        (C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                        enat p + enat k2 * P3 t \\<le> enat k2 * P2 s);\n         0 < k2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>s.\n     P2 s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k2 * P3 t \\<le> enat k2 * P2 s)\n  0 < k2\n\ngoal (4 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 2. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>1} c\\<^sub>1\n       {P\\<^sub>2};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>2 t \\<le> enat k * P\\<^sub>1 s);\n        \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>2 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>3 t\n                  \\<le> enat k * P\\<^sub>2 s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c\\<^sub>1;; c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * P\\<^sub>3 t\n                                   \\<le> enat k * P\\<^sub>1 s)\n 3. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 4. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "let ?k = \"lcm k1 k2\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 2. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>1} c\\<^sub>1\n       {P\\<^sub>2};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>2 t \\<le> enat k * P\\<^sub>1 s);\n        \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>2 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>3 t\n                  \\<le> enat k * P\\<^sub>2 s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c\\<^sub>1;; c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * P\\<^sub>3 t\n                                   \\<le> enat k * P\\<^sub>1 s)\n 3. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 4. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "(* or k1*k2 *)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 2. \\<And>P\\<^sub>1 c\\<^sub>1 P\\<^sub>2 c\\<^sub>2 P\\<^sub>3.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>1} c\\<^sub>1\n       {P\\<^sub>2};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>2 t \\<le> enat k * P\\<^sub>1 s);\n        \\<turnstile>\\<^sub>2\\<^sub>' {P\\<^sub>2} c\\<^sub>2 {P\\<^sub>3};\n        \\<exists>k>0.\n           \\<forall>s.\n              P\\<^sub>2 s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * P\\<^sub>3 t\n                  \\<le> enat k * P\\<^sub>2 s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P\\<^sub>1 s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c\\<^sub>1;; c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * P\\<^sub>3 t\n                                   \\<le> enat k * P\\<^sub>1 s)\n 3. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 4. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          P1 s < \\<infinity> \\<longrightarrow>\n          (\\<exists>t p.\n              (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat p + enat k * P3 t \\<le> enat k * P1 s)", "apply(rule exI[where x=\"?k\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < lcm k1 k2 \\<and>\n    (\\<forall>s.\n        P1 s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s))", "proof (safe)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < lcm k1 k2\n 2. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "from 10 20"], ["proof (chain)\npicking this:\n  0 < k1\n  0 < k2", "show \"lcm k1 k2>0\""], ["proof (prove)\nusing this:\n  0 < k1\n  0 < k2\n\ngoal (1 subgoal):\n 1. 0 < lcm k1 k2", "by (auto simp: lcm_pos_nat)"], ["proof (state)\nthis:\n  0 < lcm k1 k2\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "assume ninfP1: \"P1 s < \\<infinity>\""], ["proof (state)\nthis:\n  P1 s < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "with Seq3"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     P1 s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (C1, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k1 * P2 t \\<le> enat k1 * P1 s)\n  P1 s < \\<infinity>", "obtain t1 p1 where 1: \"(C1, s) \\<Rightarrow> p1 \\<Down> t1\" and q1: \"enat p1 + k1 * P2 t1 \\<le> k1 * P1 s\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     P1 s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (C1, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k1 * P2 t \\<le> enat k1 * P1 s)\n  P1 s < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p1 t1.\n        \\<lbrakk>(C1, s) \\<Rightarrow> p1 \\<Down> t1;\n         enat p1 + enat k1 * P2 t1 \\<le> enat k1 * P1 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (C1, s) \\<Rightarrow> p1 \\<Down> t1\n  enat p1 + enat k1 * P2 t1 \\<le> enat k1 * P1 s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "with ninfP1"], ["proof (chain)\npicking this:\n  P1 s < \\<infinity>\n  (C1, s) \\<Rightarrow> p1 \\<Down> t1\n  enat p1 + enat k1 * P2 t1 \\<le> enat k1 * P1 s", "have ninfP2: \"P2 t1 < \\<infinity>\""], ["proof (prove)\nusing this:\n  P1 s < \\<infinity>\n  (C1, s) \\<Rightarrow> p1 \\<Down> t1\n  enat p1 + enat k1 * P2 t1 \\<le> enat k1 * P1 s\n\ngoal (1 subgoal):\n 1. P2 t1 < \\<infinity>", "using not_le 10"], ["proof (prove)\nusing this:\n  P1 s < \\<infinity>\n  (C1, s) \\<Rightarrow> p1 \\<Down> t1\n  enat p1 + enat k1 * P2 t1 \\<le> enat k1 * P1 s\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n  0 < k1\n\ngoal (1 subgoal):\n 1. P2 t1 < \\<infinity>", "by fastforce"], ["proof (state)\nthis:\n  P2 t1 < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "with Seq4"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     P2 s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k2 * P3 t \\<le> enat k2 * P2 s)\n  P2 t1 < \\<infinity>", "obtain t2 p2 where 2: \"(C2, t1) \\<Rightarrow> p2 \\<Down> t2\" and q2: \"enat p2 + k2 * P3 t2 \\<le> k2 * P2 t1\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     P2 s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k2 * P3 t \\<le> enat k2 * P2 s)\n  P2 t1 < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p2 t2.\n        \\<lbrakk>(C2, t1) \\<Rightarrow> p2 \\<Down> t2;\n         enat p2 + enat k2 * P3 t2 \\<le> enat k2 * P2 t1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (C2, t1) \\<Rightarrow> p2 \\<Down> t2\n  enat p2 + enat k2 * P3 t2 \\<le> enat k2 * P2 t1\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "with ninfP2"], ["proof (chain)\npicking this:\n  P2 t1 < \\<infinity>\n  (C2, t1) \\<Rightarrow> p2 \\<Down> t2\n  enat p2 + enat k2 * P3 t2 \\<le> enat k2 * P2 t1", "have ninfP3: \"P3 t2 < \\<infinity>\""], ["proof (prove)\nusing this:\n  P2 t1 < \\<infinity>\n  (C2, t1) \\<Rightarrow> p2 \\<Down> t2\n  enat p2 + enat k2 * P3 t2 \\<le> enat k2 * P2 t1\n\ngoal (1 subgoal):\n 1. P3 t2 < \\<infinity>", "using not_le 20"], ["proof (prove)\nusing this:\n  P2 t1 < \\<infinity>\n  (C2, t1) \\<Rightarrow> p2 \\<Down> t2\n  enat p2 + enat k2 * P3 t2 \\<le> enat k2 * P2 t1\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n  0 < k2\n\ngoal (1 subgoal):\n 1. P3 t2 < \\<infinity>", "by fastforce"], ["proof (state)\nthis:\n  P3 t2 < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "then"], ["proof (chain)\npicking this:\n  P3 t2 < \\<infinity>", "obtain u2 where u2: \"P3 t2 = enat u2\""], ["proof (prove)\nusing this:\n  P3 t2 < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>u2. P3 t2 = enat u2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  P3 t2 = enat u2\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "from ninfP2"], ["proof (chain)\npicking this:\n  P2 t1 < \\<infinity>", "obtain u1 where u1: \"P2 t1 = enat u1\""], ["proof (prove)\nusing this:\n  P2 t1 < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>u1. P2 t1 = enat u1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  P2 t1 = enat u1\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "from ninfP1"], ["proof (chain)\npicking this:\n  P1 s < \\<infinity>", "obtain u0 where u0: \"P1 s = enat u0\""], ["proof (prove)\nusing this:\n  P1 s < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>u0. P1 s = enat u0 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  P1 s = enat u0\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "from Big_StepT.Seq[OF 1 2]"], ["proof (chain)\npicking this:\n  ?z = p1 + p2 \\<Longrightarrow> (C1;; C2, s) \\<Rightarrow> ?z \\<Down> t2", "have 12: \"(C1;; C2, s) \\<Rightarrow> p1 + p2 \\<Down> t2\""], ["proof (prove)\nusing this:\n  ?z = p1 + p2 \\<Longrightarrow> (C1;; C2, s) \\<Rightarrow> ?z \\<Down> t2\n\ngoal (1 subgoal):\n 1. (C1;; C2, s) \\<Rightarrow> p1 + p2 \\<Down> t2", "by simp"], ["proof (state)\nthis:\n  (C1;; C2, s) \\<Rightarrow> p1 + p2 \\<Down> t2\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "have i: \"(C1;; C2, s) \\<Rightarrow> p1+p2 \\<Down> t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C1;; C2, s) \\<Rightarrow> p1 + p2 \\<Down> t2", "using 1 and 2"], ["proof (prove)\nusing this:\n  (C1, s) \\<Rightarrow> p1 \\<Down> t1\n  (C2, t1) \\<Rightarrow> p2 \\<Down> t2\n\ngoal (1 subgoal):\n 1. (C1;; C2, s) \\<Rightarrow> p1 + p2 \\<Down> t2", "by auto"], ["proof (state)\nthis:\n  (C1;; C2, s) \\<Rightarrow> p1 + p2 \\<Down> t2\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "from 10 20"], ["proof (chain)\npicking this:\n  0 < k1\n  0 < k2", "have p: \"k1 div gcd k1 k2 > 0\" \"k2 div gcd k1 k2 > 0\""], ["proof (prove)\nusing this:\n  0 < k1\n  0 < k2\n\ngoal (1 subgoal):\n 1. 0 < k1 div gcd k1 k2 &&& 0 < k2 div gcd k1 k2", "by (simp_all add: Divides.div_positive)"], ["proof (state)\nthis:\n  0 < k1 div gcd k1 k2\n  0 < k2 div gcd k1 k2\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "have za: \"?k = (k1 div gcd k1 k2) * k2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lcm k1 k2 = k1 div gcd k1 k2 * k2", "apply(simp only: lcm_nat_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k1 * k2 div gcd k1 k2 = k1 div gcd k1 k2 * k2", "by (simp add: dvd_div_mult)"], ["proof (state)\nthis:\n  lcm k1 k2 = k1 div gcd k1 k2 * k2\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "have za2: \"?k = (k2 div gcd k1 k2) * k1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lcm k1 k2 = k2 div gcd k1 k2 * k1", "apply(simp only: lcm_nat_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k1 * k2 div gcd k1 k2 = k2 div gcd k1 k2 * k1", "by (metis dvd_div_mult gcd_dvd2 mult.commute)"], ["proof (state)\nthis:\n  lcm k1 k2 = k2 div gcd k1 k2 * k1\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "from q1[unfolded u1 u2 u0]"], ["proof (chain)\npicking this:\n  enat p1 + enat k1 * enat u1 \\<le> enat k1 * enat u0", "have z: \"p1 + k1 * u1 \\<le> k1 * u0\""], ["proof (prove)\nusing this:\n  enat p1 + enat k1 * enat u1 \\<le> enat k1 * enat u0\n\ngoal (1 subgoal):\n 1. p1 + k1 * u1 \\<le> k1 * u0", "by auto"], ["proof (state)\nthis:\n  p1 + k1 * u1 \\<le> k1 * u0\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "from q2[unfolded u1 u2 u0]"], ["proof (chain)\npicking this:\n  enat p2 + enat k2 * enat u2 \\<le> enat k2 * enat u1", "have y: \"  p2 + k2 *   u2 \\<le> k2 *   u1\""], ["proof (prove)\nusing this:\n  enat p2 + enat k2 * enat u2 \\<le> enat k2 * enat u1\n\ngoal (1 subgoal):\n 1. p2 + k2 * u2 \\<le> k2 * u1", "by auto"], ["proof (state)\nthis:\n  p2 + k2 * u2 \\<le> k2 * u1\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "have \"p1+p2 + ?k * u2 \\<le> p1 + (k1 div gcd k1 k2)*p2  + ?k * u2  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. p1 + p2 + lcm k1 k2 * u2\n    \\<le> p1 + k1 div gcd k1 k2 * p2 + lcm k1 k2 * u2", "using p"], ["proof (prove)\nusing this:\n  0 < k1 div gcd k1 k2\n  0 < k2 div gcd k1 k2\n\ngoal (1 subgoal):\n 1. p1 + p2 + lcm k1 k2 * u2\n    \\<le> p1 + k1 div gcd k1 k2 * p2 + lcm k1 k2 * u2", "by simp"], ["proof (state)\nthis:\n  p1 + p2 + lcm k1 k2 * u2 \\<le> p1 + k1 div gcd k1 k2 * p2 + lcm k1 k2 * u2\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "also"], ["proof (state)\nthis:\n  p1 + p2 + lcm k1 k2 * u2 \\<le> p1 + k1 div gcd k1 k2 * p2 + lcm k1 k2 * u2\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "have \"\\<dots> \\<le> (k2 div gcd k1 k2)*p1 + (k1 div gcd k1 k2)*p2  + ?k * u2  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. p1 + k1 div gcd k1 k2 * p2 + lcm k1 k2 * u2\n    \\<le> k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * p2 + lcm k1 k2 * u2", "using p"], ["proof (prove)\nusing this:\n  0 < k1 div gcd k1 k2\n  0 < k2 div gcd k1 k2\n\ngoal (1 subgoal):\n 1. p1 + k1 div gcd k1 k2 * p2 + lcm k1 k2 * u2\n    \\<le> k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * p2 + lcm k1 k2 * u2", "by simp"], ["proof (state)\nthis:\n  p1 + k1 div gcd k1 k2 * p2 + lcm k1 k2 * u2\n  \\<le> k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * p2 + lcm k1 k2 * u2\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "also"], ["proof (state)\nthis:\n  p1 + k1 div gcd k1 k2 * p2 + lcm k1 k2 * u2\n  \\<le> k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * p2 + lcm k1 k2 * u2\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "have \"\\<dots> = (k2 div gcd k1 k2)*p1 + (k1 div gcd k1 k2)*(p2 + k2* u2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * p2 + lcm k1 k2 * u2 =\n    k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * (p2 + k2 * u2)", "apply(simp only: za)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * p2 +\n    k1 div gcd k1 k2 * k2 * u2 =\n    k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * (p2 + k2 * u2)", "by algebra"], ["proof (state)\nthis:\n  k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * p2 + lcm k1 k2 * u2 =\n  k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * (p2 + k2 * u2)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "also"], ["proof (state)\nthis:\n  k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * p2 + lcm k1 k2 * u2 =\n  k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * (p2 + k2 * u2)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "have \"\\<dots> \\<le> (k2 div gcd k1 k2)*p1 + (k1 div gcd k1 k2)*(k2 *   u1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * (p2 + k2 * u2)\n    \\<le> k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * (k2 * u1)", "using y"], ["proof (prove)\nusing this:\n  p2 + k2 * u2 \\<le> k2 * u1\n\ngoal (1 subgoal):\n 1. k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * (p2 + k2 * u2)\n    \\<le> k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * (k2 * u1)", "by (metis add_left_mono distrib_left le_iff_add)"], ["proof (state)\nthis:\n  k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * (p2 + k2 * u2)\n  \\<le> k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * (k2 * u1)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "also"], ["proof (state)\nthis:\n  k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * (p2 + k2 * u2)\n  \\<le> k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * (k2 * u1)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "have \"\\<dots> = (k2 div gcd k1 k2)*p1 + ?k * u1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * (k2 * u1) =\n    k2 div gcd k1 k2 * p1 + lcm k1 k2 * u1", "by(simp only: za)"], ["proof (state)\nthis:\n  k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * (k2 * u1) =\n  k2 div gcd k1 k2 * p1 + lcm k1 k2 * u1\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "also"], ["proof (state)\nthis:\n  k2 div gcd k1 k2 * p1 + k1 div gcd k1 k2 * (k2 * u1) =\n  k2 div gcd k1 k2 * p1 + lcm k1 k2 * u1\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "have \"\\<dots> = (k2 div gcd k1 k2)*p1 + (k2 div gcd k1 k2) *(k1* u1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k2 div gcd k1 k2 * p1 + lcm k1 k2 * u1 =\n    k2 div gcd k1 k2 * p1 + k2 div gcd k1 k2 * (k1 * u1)", "by(simp only: za2)"], ["proof (state)\nthis:\n  k2 div gcd k1 k2 * p1 + lcm k1 k2 * u1 =\n  k2 div gcd k1 k2 * p1 + k2 div gcd k1 k2 * (k1 * u1)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "also"], ["proof (state)\nthis:\n  k2 div gcd k1 k2 * p1 + lcm k1 k2 * u1 =\n  k2 div gcd k1 k2 * p1 + k2 div gcd k1 k2 * (k1 * u1)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "have \"\\<dots> \\<le> (k2 div gcd k1 k2)*(p1 + k1*u1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k2 div gcd k1 k2 * p1 + k2 div gcd k1 k2 * (k1 * u1)\n    \\<le> k2 div gcd k1 k2 * (p1 + k1 * u1)", "by (simp add: distrib_left)"], ["proof (state)\nthis:\n  k2 div gcd k1 k2 * p1 + k2 div gcd k1 k2 * (k1 * u1)\n  \\<le> k2 div gcd k1 k2 * (p1 + k1 * u1)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "also"], ["proof (state)\nthis:\n  k2 div gcd k1 k2 * p1 + k2 div gcd k1 k2 * (k1 * u1)\n  \\<le> k2 div gcd k1 k2 * (p1 + k1 * u1)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "have \"\\<dots> \\<le> (k2 div gcd k1 k2)*(k1 * u0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k2 div gcd k1 k2 * (p1 + k1 * u1) \\<le> k2 div gcd k1 k2 * (k1 * u0)", "using z"], ["proof (prove)\nusing this:\n  p1 + k1 * u1 \\<le> k1 * u0\n\ngoal (1 subgoal):\n 1. k2 div gcd k1 k2 * (p1 + k1 * u1) \\<le> k2 div gcd k1 k2 * (k1 * u0)", "by fastforce"], ["proof (state)\nthis:\n  k2 div gcd k1 k2 * (p1 + k1 * u1) \\<le> k2 div gcd k1 k2 * (k1 * u0)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "also"], ["proof (state)\nthis:\n  k2 div gcd k1 k2 * (p1 + k1 * u1) \\<le> k2 div gcd k1 k2 * (k1 * u0)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "have \"\\<dots> \\<le> ?k * u0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k2 div gcd k1 k2 * (k1 * u0) \\<le> lcm k1 k2 * u0", "by(simp only: za2)"], ["proof (state)\nthis:\n  k2 div gcd k1 k2 * (k1 * u0) \\<le> lcm k1 k2 * u0\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "finally"], ["proof (chain)\npicking this:\n  p1 + p2 + lcm k1 k2 * u2 \\<le> lcm k1 k2 * u0", "have \"p1+p2 + ?k * u2 \\<le> ?k * u0\""], ["proof (prove)\nusing this:\n  p1 + p2 + lcm k1 k2 * u2 \\<le> lcm k1 k2 * u0\n\ngoal (1 subgoal):\n 1. p1 + p2 + lcm k1 k2 * u2 \\<le> lcm k1 k2 * u0", "."], ["proof (state)\nthis:\n  p1 + p2 + lcm k1 k2 * u2 \\<le> lcm k1 k2 * u0\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "then"], ["proof (chain)\npicking this:\n  p1 + p2 + lcm k1 k2 * u2 \\<le> lcm k1 k2 * u0", "have ii: \"enat (p1+p2) + ?k * P3 t2 \\<le> ?k * P1 s\""], ["proof (prove)\nusing this:\n  p1 + p2 + lcm k1 k2 * u2 \\<le> lcm k1 k2 * u0\n\ngoal (1 subgoal):\n 1. enat (p1 + p2) + enat (lcm k1 k2) * P3 t2 \\<le> enat (lcm k1 k2) * P1 s", "unfolding u0 u2"], ["proof (prove)\nusing this:\n  p1 + p2 + lcm k1 k2 * u2 \\<le> lcm k1 k2 * u0\n\ngoal (1 subgoal):\n 1. enat (p1 + p2) + enat (lcm k1 k2) * enat u2\n    \\<le> enat (lcm k1 k2) * enat u0", "by auto"], ["proof (state)\nthis:\n  enat (p1 + p2) + enat (lcm k1 k2) * P3 t2 \\<le> enat (lcm k1 k2) * P1 s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P1 s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "from i ii"], ["proof (chain)\npicking this:\n  (C1;; C2, s) \\<Rightarrow> p1 + p2 \\<Down> t2\n  enat (p1 + p2) + enat (lcm k1 k2) * P3 t2 \\<le> enat (lcm k1 k2) * P1 s", "show \"\\<exists>t p. (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + ?k * P3 t \\<le> ?k * P1 s \""], ["proof (prove)\nusing this:\n  (C1;; C2, s) \\<Rightarrow> p1 + p2 \\<Down> t2\n  enat (p1 + p2) + enat (lcm k1 k2) * P3 t2 \\<le> enat (lcm k1 k2) * P1 s\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s", "by blast"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat (lcm k1 k2) * P3 t \\<le> enat (lcm k1 k2) * P1 s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k>0.\n     \\<forall>s.\n        P1 s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (C1;; C2, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * P3 t \\<le> enat k * P1 s)\n\ngoal (3 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 2. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 3. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 2. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 3. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "case (If P b c1 Q c2)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. P s + \\<up> (bval b s)} c1 {Q}\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. P s + \\<up> (\\<not> bval b s)}\n                               c2 {Q}\n  \\<exists>k>0.\n     \\<forall>s.\n        P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c1, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * Q t \\<le> enat k * (P s + \\<up> (bval b s)))\n  \\<exists>k>0.\n     \\<forall>s.\n        P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * Q t\n            \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\n\ngoal (3 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 2. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 3. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "from If(3)"], ["proof (chain)\npicking this:\n  \\<exists>k>0.\n     \\<forall>s.\n        P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c1, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * Q t \\<le> enat k * (P s + \\<up> (bval b s)))", "obtain kT where If3: \"\\<forall>s. P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow> (\\<exists>t p. (c1, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat kT * Q t \\<le> enat kT * (P s + \\<up> (bval b s))) \" and T: \"kT > 0\""], ["proof (prove)\nusing this:\n  \\<exists>k>0.\n     \\<forall>s.\n        P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c1, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * Q t \\<le> enat k * (P s + \\<up> (bval b s)))\n\ngoal (1 subgoal):\n 1. (\\<And>kT.\n        \\<lbrakk>\\<forall>s.\n                    P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n                    (\\<exists>t p.\n                        (c1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                        enat p + enat kT * Q t\n                        \\<le> enat kT * (P s + \\<up> (bval b s)));\n         0 < kT\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>s.\n     P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c1, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat kT * Q t \\<le> enat kT * (P s + \\<up> (bval b s)))\n  0 < kT\n\ngoal (3 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 2. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 3. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "from If(4)"], ["proof (chain)\npicking this:\n  \\<exists>k>0.\n     \\<forall>s.\n        P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * Q t\n            \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))", "obtain kF where If4: \"\\<forall>s. P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow> (\\<exists>t p. (c2, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat kF * Q t \\<le> enat kF * (P s + \\<up> (\\<not> bval b s)))\" and F: \"kF > 0\""], ["proof (prove)\nusing this:\n  \\<exists>k>0.\n     \\<forall>s.\n        P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * Q t\n            \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\n\ngoal (1 subgoal):\n 1. (\\<And>kF.\n        \\<lbrakk>\\<forall>s.\n                    P s + \\<up> (\\<not> bval b s)\n                    < \\<infinity> \\<longrightarrow>\n                    (\\<exists>t p.\n                        (c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                        enat p + enat kF * Q t\n                        \\<le> enat kF * (P s + \\<up> (\\<not> bval b s)));\n         0 < kF\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>s.\n     P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat kF * Q t\n         \\<le> enat kF * (P s + \\<up> (\\<not> bval b s)))\n  0 < kF\n\ngoal (3 subgoals):\n 1. \\<And>P b c\\<^sub>1 Q c\\<^sub>2.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           P s + \\<up> (bval b s)}\n       c\\<^sub>1 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (bval b s)));\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n   P s + \\<up> (\\<not> bval b s)}\n                                     c\\<^sub>2 {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t\n                  \\<le> enat k * (P s + \\<up> (\\<not> bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               eSuc (P s) < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q t\n                                   \\<le> enat k * eSuc (P s))\n 2. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 3. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          eSuc (P s) < \\<infinity> \\<longrightarrow>\n          (\\<exists>t p.\n              (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat p + enat k * Q t \\<le> enat k * eSuc (P s))", "apply(rule exI[where x=\"kT*kF\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < kT * kF \\<and>\n    (\\<forall>s.\n        eSuc (P s) < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat (kT * kF) * Q t\n            \\<le> enat (kT * kF) * eSuc (P s)))", "proof (safe)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < kT * kF\n 2. \\<And>s.\n       eSuc (P s) < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "from T F"], ["proof (chain)\npicking this:\n  0 < kT\n  0 < kF", "show \"0 < kT * kF\""], ["proof (prove)\nusing this:\n  0 < kT\n  0 < kF\n\ngoal (1 subgoal):\n 1. 0 < kT * kF", "by auto"], ["proof (state)\nthis:\n  0 < kT * kF\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (P s) < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (P s) < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "assume \"eSuc (P s) < \\<infinity>\""], ["proof (state)\nthis:\n  eSuc (P s) < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (P s) < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "then"], ["proof (chain)\npicking this:\n  eSuc (P s) < \\<infinity>", "have i: \"P s < \\<infinity>\""], ["proof (prove)\nusing this:\n  eSuc (P s) < \\<infinity>\n\ngoal (1 subgoal):\n 1. P s < \\<infinity>", "using enat_ord_simps(4)"], ["proof (prove)\nusing this:\n  eSuc (P s) < \\<infinity>\n  (?q < \\<infinity>) = (?q \\<noteq> \\<infinity>)\n\ngoal (1 subgoal):\n 1. P s < \\<infinity>", "by fastforce"], ["proof (state)\nthis:\n  P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (P s) < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "then"], ["proof (chain)\npicking this:\n  P s < \\<infinity>", "obtain u0 where u0: \"P s = enat u0\""], ["proof (prove)\nusing this:\n  P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>u0. P s = enat u0 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  P s = enat u0\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (P s) < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "show \"\\<exists>t p. (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "proof(cases \"bval b s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "case True"], ["proof (state)\nthis:\n  bval b s\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "with i"], ["proof (chain)\npicking this:\n  P s < \\<infinity>\n  bval b s", "have \"P s + emb (bval b s) < \\<infinity>\""], ["proof (prove)\nusing this:\n  P s < \\<infinity>\n  bval b s\n\ngoal (1 subgoal):\n 1. P s + \\<up> (bval b s) < \\<infinity>", "by simp"], ["proof (state)\nthis:\n  P s + \\<up> (bval b s) < \\<infinity>\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "with If3"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c1, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat kT * Q t \\<le> enat kT * (P s + \\<up> (bval b s)))\n  P s + \\<up> (bval b s) < \\<infinity>", "obtain p t where 1: \"(c1, s) \\<Rightarrow> p \\<Down> t\" and q: \"enat p + enat kT * Q t \\<le> enat kT * (P s + emb (bval b s))\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     P s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c1, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat kT * Q t \\<le> enat kT * (P s + \\<up> (bval b s)))\n  P s + \\<up> (bval b s) < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        \\<lbrakk>(c1, s) \\<Rightarrow> p \\<Down> t;\n         enat p + enat kT * Q t\n         \\<le> enat kT * (P s + \\<up> (bval b s))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c1, s) \\<Rightarrow> p \\<Down> t\n  enat p + enat kT * Q t \\<le> enat kT * (P s + \\<up> (bval b s))\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "from Big_StepT.IfTrue[OF True 1]"], ["proof (chain)\npicking this:\n  ?y = p + 1 \\<Longrightarrow>\n  (IF b THEN c1 ELSE ?c2.0, s) \\<Rightarrow> ?y \\<Down> t", "have 2: \"(IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t\""], ["proof (prove)\nusing this:\n  ?y = p + 1 \\<Longrightarrow>\n  (IF b THEN c1 ELSE ?c2.0, s) \\<Rightarrow> ?y \\<Down> t\n\ngoal (1 subgoal):\n 1. (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t", "by simp"], ["proof (state)\nthis:\n  (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "from q"], ["proof (chain)\npicking this:\n  enat p + enat kT * Q t \\<le> enat kT * (P s + \\<up> (bval b s))", "have \"Q t < \\<infinity>\""], ["proof (prove)\nusing this:\n  enat p + enat kT * Q t \\<le> enat kT * (P s + \\<up> (bval b s))\n\ngoal (1 subgoal):\n 1. Q t < \\<infinity>", "using i T True"], ["proof (prove)\nusing this:\n  enat p + enat kT * Q t \\<le> enat kT * (P s + \\<up> (bval b s))\n  P s < \\<infinity>\n  0 < kT\n  bval b s\n\ngoal (1 subgoal):\n 1. Q t < \\<infinity>", "using less_irrefl"], ["proof (prove)\nusing this:\n  enat p + enat kT * Q t \\<le> enat kT * (P s + \\<up> (bval b s))\n  P s < \\<infinity>\n  0 < kT\n  bval b s\n  \\<not> ?x < ?x\n\ngoal (1 subgoal):\n 1. Q t < \\<infinity>", "by fastforce"], ["proof (state)\nthis:\n  Q t < \\<infinity>\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "then"], ["proof (chain)\npicking this:\n  Q t < \\<infinity>", "obtain u1 where u1: \"Q t = enat u1\""], ["proof (prove)\nusing this:\n  Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>u1. Q t = enat u1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Q t = enat u1\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "from q True"], ["proof (chain)\npicking this:\n  enat p + enat kT * Q t \\<le> enat kT * (P s + \\<up> (bval b s))\n  bval b s", "have q': \"p + kT * u1 \\<le> kT * u0\""], ["proof (prove)\nusing this:\n  enat p + enat kT * Q t \\<le> enat kT * (P s + \\<up> (bval b s))\n  bval b s\n\ngoal (1 subgoal):\n 1. p + kT * u1 \\<le> kT * u0", "unfolding u0 u1"], ["proof (prove)\nusing this:\n  enat p + enat kT * enat u1 \\<le> enat kT * (enat u0 + \\<up> (bval b s))\n  bval b s\n\ngoal (1 subgoal):\n 1. p + kT * u1 \\<le> kT * u0", "by auto"], ["proof (state)\nthis:\n  p + kT * u1 \\<le> kT * u0\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "have \"(p+1) +  (kT * kF) * u1 \\<le> kF*(p+1) + (kT * kF) * u1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p + 1 + kT * kF * u1 \\<le> kF * (p + 1) + kT * kF * u1", "using F"], ["proof (prove)\nusing this:\n  0 < kF\n\ngoal (1 subgoal):\n 1. p + 1 + kT * kF * u1 \\<le> kF * (p + 1) + kT * kF * u1", "by (simp add: mult_eq_if)"], ["proof (state)\nthis:\n  p + 1 + kT * kF * u1 \\<le> kF * (p + 1) + kT * kF * u1\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "also"], ["proof (state)\nthis:\n  p + 1 + kT * kF * u1 \\<le> kF * (p + 1) + kT * kF * u1\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "have \"\\<dots> \\<le> kF*(p+1  + kT  * u1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kF * (p + 1) + kT * kF * u1 \\<le> kF * (p + 1 + kT * u1)", "by (simp add: add_mult_distrib2)"], ["proof (state)\nthis:\n  kF * (p + 1) + kT * kF * u1 \\<le> kF * (p + 1 + kT * u1)\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "also"], ["proof (state)\nthis:\n  kF * (p + 1) + kT * kF * u1 \\<le> kF * (p + 1 + kT * u1)\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "have \"\\<dots> \\<le> kF*(1  + kT  * u0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kF * (p + 1 + kT * u1) \\<le> kF * (1 + kT * u0)", "using q'"], ["proof (prove)\nusing this:\n  p + kT * u1 \\<le> kT * u0\n\ngoal (1 subgoal):\n 1. kF * (p + 1 + kT * u1) \\<le> kF * (1 + kT * u0)", "by auto"], ["proof (state)\nthis:\n  kF * (p + 1 + kT * u1) \\<le> kF * (1 + kT * u0)\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "also"], ["proof (state)\nthis:\n  kF * (p + 1 + kT * u1) \\<le> kF * (1 + kT * u0)\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "have \"\\<dots> \\<le> (kT * kF) * Suc u0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kF * (1 + kT * u0) \\<le> kT * kF * Suc u0", "using T"], ["proof (prove)\nusing this:\n  0 < kT\n\ngoal (1 subgoal):\n 1. kF * (1 + kT * u0) \\<le> kT * kF * Suc u0", "by simp"], ["proof (state)\nthis:\n  kF * (1 + kT * u0) \\<le> kT * kF * Suc u0\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "finally"], ["proof (chain)\npicking this:\n  p + 1 + kT * kF * u1 \\<le> kT * kF * Suc u0", "have \" (p+1) +  (kT * kF) * u1 \\<le>  (kT * kF) * Suc u0\""], ["proof (prove)\nusing this:\n  p + 1 + kT * kF * u1 \\<le> kT * kF * Suc u0\n\ngoal (1 subgoal):\n 1. p + 1 + kT * kF * u1 \\<le> kT * kF * Suc u0", "."], ["proof (state)\nthis:\n  p + 1 + kT * kF * u1 \\<le> kT * kF * Suc u0\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "then"], ["proof (chain)\npicking this:\n  p + 1 + kT * kF * u1 \\<le> kT * kF * Suc u0", "have 1: \"enat (p+1) + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\""], ["proof (prove)\nusing this:\n  p + 1 + kT * kF * u1 \\<le> kT * kF * Suc u0\n\ngoal (1 subgoal):\n 1. enat (p + 1) + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "unfolding u1 u0"], ["proof (prove)\nusing this:\n  p + 1 + kT * kF * u1 \\<le> kT * kF * Suc u0\n\ngoal (1 subgoal):\n 1. enat (p + 1) + enat (kT * kF) * enat u1\n    \\<le> enat (kT * kF) * eSuc (enat u0)", "by (simp add: eSuc_enat)"], ["proof (state)\nthis:\n  enat (p + 1) + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n 2. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "from 1 2"], ["proof (chain)\npicking this:\n  enat (p + 1) + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n  (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t", "show ?thesis"], ["proof (prove)\nusing this:\n  enat (p + 1) + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n  (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "by metis"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "case False"], ["proof (state)\nthis:\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "with i"], ["proof (chain)\npicking this:\n  P s < \\<infinity>\n  \\<not> bval b s", "have \"P s + emb (~bval b s) < \\<infinity>\""], ["proof (prove)\nusing this:\n  P s < \\<infinity>\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. P s + \\<up> (\\<not> bval b s) < \\<infinity>", "by simp"], ["proof (state)\nthis:\n  P s + \\<up> (\\<not> bval b s) < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "with If4"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat kF * Q t\n         \\<le> enat kF * (P s + \\<up> (\\<not> bval b s)))\n  P s + \\<up> (\\<not> bval b s) < \\<infinity>", "obtain p t where 1: \"(c2, s) \\<Rightarrow> p \\<Down> t\" and q: \"enat p + enat kF * Q t \\<le> enat kF * (P s + emb (~bval b s))\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     P s + \\<up> (\\<not> bval b s) < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat kF * Q t\n         \\<le> enat kF * (P s + \\<up> (\\<not> bval b s)))\n  P s + \\<up> (\\<not> bval b s) < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        \\<lbrakk>(c2, s) \\<Rightarrow> p \\<Down> t;\n         enat p + enat kF * Q t\n         \\<le> enat kF * (P s + \\<up> (\\<not> bval b s))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c2, s) \\<Rightarrow> p \\<Down> t\n  enat p + enat kF * Q t \\<le> enat kF * (P s + \\<up> (\\<not> bval b s))\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "from Big_StepT.IfFalse[OF False 1]"], ["proof (chain)\npicking this:\n  ?y = p + 1 \\<Longrightarrow>\n  (IF b THEN ?c1.0 ELSE c2, s) \\<Rightarrow> ?y \\<Down> t", "have 2: \"(IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t\""], ["proof (prove)\nusing this:\n  ?y = p + 1 \\<Longrightarrow>\n  (IF b THEN ?c1.0 ELSE c2, s) \\<Rightarrow> ?y \\<Down> t\n\ngoal (1 subgoal):\n 1. (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t", "by simp"], ["proof (state)\nthis:\n  (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "from q"], ["proof (chain)\npicking this:\n  enat p + enat kF * Q t \\<le> enat kF * (P s + \\<up> (\\<not> bval b s))", "have \"Q t < \\<infinity>\""], ["proof (prove)\nusing this:\n  enat p + enat kF * Q t \\<le> enat kF * (P s + \\<up> (\\<not> bval b s))\n\ngoal (1 subgoal):\n 1. Q t < \\<infinity>", "using i F False"], ["proof (prove)\nusing this:\n  enat p + enat kF * Q t \\<le> enat kF * (P s + \\<up> (\\<not> bval b s))\n  P s < \\<infinity>\n  0 < kF\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. Q t < \\<infinity>", "using less_irrefl"], ["proof (prove)\nusing this:\n  enat p + enat kF * Q t \\<le> enat kF * (P s + \\<up> (\\<not> bval b s))\n  P s < \\<infinity>\n  0 < kF\n  \\<not> bval b s\n  \\<not> ?x < ?x\n\ngoal (1 subgoal):\n 1. Q t < \\<infinity>", "by fastforce"], ["proof (state)\nthis:\n  Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "then"], ["proof (chain)\npicking this:\n  Q t < \\<infinity>", "obtain u1 where u1: \"Q t = enat u1\""], ["proof (prove)\nusing this:\n  Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>u1. Q t = enat u1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Q t = enat u1\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "from q False"], ["proof (chain)\npicking this:\n  enat p + enat kF * Q t \\<le> enat kF * (P s + \\<up> (\\<not> bval b s))\n  \\<not> bval b s", "have q': \"p + kF * u1 \\<le> kF * u0\""], ["proof (prove)\nusing this:\n  enat p + enat kF * Q t \\<le> enat kF * (P s + \\<up> (\\<not> bval b s))\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. p + kF * u1 \\<le> kF * u0", "unfolding u0 u1"], ["proof (prove)\nusing this:\n  enat p + enat kF * enat u1\n  \\<le> enat kF * (enat u0 + \\<up> (\\<not> bval b s))\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. p + kF * u1 \\<le> kF * u0", "by auto"], ["proof (state)\nthis:\n  p + kF * u1 \\<le> kF * u0\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "have \"(p+1) +  (kF * kT) * u1 \\<le> kT*(p+1) + (kF * kT) * u1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p + 1 + kF * kT * u1 \\<le> kT * (p + 1) + kF * kT * u1", "using T"], ["proof (prove)\nusing this:\n  0 < kT\n\ngoal (1 subgoal):\n 1. p + 1 + kF * kT * u1 \\<le> kT * (p + 1) + kF * kT * u1", "by (simp add: mult_eq_if)"], ["proof (state)\nthis:\n  p + 1 + kF * kT * u1 \\<le> kT * (p + 1) + kF * kT * u1\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "also"], ["proof (state)\nthis:\n  p + 1 + kF * kT * u1 \\<le> kT * (p + 1) + kF * kT * u1\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "have \"\\<dots> \\<le> kT*(p+1  + kF  * u1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kT * (p + 1) + kF * kT * u1 \\<le> kT * (p + 1 + kF * u1)", "by (simp add: add_mult_distrib2)"], ["proof (state)\nthis:\n  kT * (p + 1) + kF * kT * u1 \\<le> kT * (p + 1 + kF * u1)\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "also"], ["proof (state)\nthis:\n  kT * (p + 1) + kF * kT * u1 \\<le> kT * (p + 1 + kF * u1)\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "have \"\\<dots> \\<le> kT*(1  + kF  * u0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kT * (p + 1 + kF * u1) \\<le> kT * (1 + kF * u0)", "using q'"], ["proof (prove)\nusing this:\n  p + kF * u1 \\<le> kF * u0\n\ngoal (1 subgoal):\n 1. kT * (p + 1 + kF * u1) \\<le> kT * (1 + kF * u0)", "by auto"], ["proof (state)\nthis:\n  kT * (p + 1 + kF * u1) \\<le> kT * (1 + kF * u0)\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "also"], ["proof (state)\nthis:\n  kT * (p + 1 + kF * u1) \\<le> kT * (1 + kF * u0)\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "have \"\\<dots> \\<le> (kF * kT) * Suc u0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kT * (1 + kF * u0) \\<le> kF * kT * Suc u0", "using F"], ["proof (prove)\nusing this:\n  0 < kF\n\ngoal (1 subgoal):\n 1. kT * (1 + kF * u0) \\<le> kF * kT * Suc u0", "by simp"], ["proof (state)\nthis:\n  kT * (1 + kF * u0) \\<le> kF * kT * Suc u0\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "finally"], ["proof (chain)\npicking this:\n  p + 1 + kF * kT * u1 \\<le> kF * kT * Suc u0", "have \" (p+1) +  (kT * kF) * u1 \\<le>  (kT * kF) * Suc u0\""], ["proof (prove)\nusing this:\n  p + 1 + kF * kT * u1 \\<le> kF * kT * Suc u0\n\ngoal (1 subgoal):\n 1. p + 1 + kT * kF * u1 \\<le> kT * kF * Suc u0", "by (simp add: mult.commute)"], ["proof (state)\nthis:\n  p + 1 + kT * kF * u1 \\<le> kT * kF * Suc u0\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "then"], ["proof (chain)\npicking this:\n  p + 1 + kT * kF * u1 \\<le> kT * kF * Suc u0", "have 1: \"enat (p+1) + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\""], ["proof (prove)\nusing this:\n  p + 1 + kT * kF * u1 \\<le> kT * kF * Suc u0\n\ngoal (1 subgoal):\n 1. enat (p + 1) + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "unfolding u1 u0"], ["proof (prove)\nusing this:\n  p + 1 + kT * kF * u1 \\<le> kT * kF * Suc u0\n\ngoal (1 subgoal):\n 1. enat (p + 1) + enat (kT * kF) * enat u1\n    \\<le> enat (kT * kF) * eSuc (enat u0)", "by (simp add: eSuc_enat)"], ["proof (state)\nthis:\n  enat (p + 1) + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "from 1 2"], ["proof (chain)\npicking this:\n  enat (p + 1) + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n  (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t", "show ?thesis"], ["proof (prove)\nusing this:\n  enat (p + 1) + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n  (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p + 1 \\<Down> t\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)", "by metis"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat (kT * kF) * Q t \\<le> enat (kT * kF) * eSuc (P s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k>0.\n     \\<forall>s.\n        eSuc (P s) < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (IF b THEN c1 ELSE c2, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * Q t \\<le> enat k * eSuc (P s))\n\ngoal (2 subgoals):\n 1. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 2. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 2. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "case (conseq P c Q k1 P' Q')"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}\n  P ?s \\<le> enat k1 * P' ?s\n  enat k1 * Q' ?s \\<le> Q ?s\n  0 < k1\n  \\<exists>k>0.\n     \\<forall>s.\n        P s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * Q t \\<le> enat k * P s)\n\ngoal (2 subgoals):\n 1. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 2. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "from conseq(5)"], ["proof (chain)\npicking this:\n  \\<exists>k>0.\n     \\<forall>s.\n        P s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * Q t \\<le> enat k * P s)", "obtain k where c4: \"\\<forall>s. P s < \\<infinity> \\<longrightarrow> (\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat k * Q t \\<le> enat k * P s)\" and 0: \"k>0\""], ["proof (prove)\nusing this:\n  \\<exists>k>0.\n     \\<forall>s.\n        P s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * Q t \\<le> enat k * P s)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>\\<forall>s.\n                    P s < \\<infinity> \\<longrightarrow>\n                    (\\<exists>t p.\n                        (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                        enat p + enat k * Q t \\<le> enat k * P s);\n         0 < k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>s.\n     P s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k * Q t \\<le> enat k * P s)\n  0 < k\n\ngoal (2 subgoals):\n 1. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))\n 2. \\<And>P c Q k P' Q'.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<exists>k>0.\n           \\<forall>s.\n              P s < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * Q t \\<le> enat k * P s);\n        \\<And>s. P s \\<le> enat k * P' s; \\<And>s. enat k * Q' s \\<le> Q s;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               P' s < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p + enat k * Q' t\n                                   \\<le> enat k * P' s)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          P' s < \\<infinity> \\<longrightarrow>\n          (\\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat p + enat k * Q' t \\<le> enat k * P' s)", "apply(rule exI[where x=\"k*k1\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k * k1 \\<and>\n    (\\<forall>s.\n        P' s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s))", "proof (safe)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < k * k1\n 2. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "show \"k*k1>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k * k1", "using 0 conseq(4)"], ["proof (prove)\nusing this:\n  0 < k\n  0 < k1\n\ngoal (1 subgoal):\n 1. 0 < k * k1", "by auto"], ["proof (state)\nthis:\n  0 < k * k1\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "assume \"P' s < \\<infinity>\""], ["proof (state)\nthis:\n  P' s < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "with conseq(2,4)"], ["proof (chain)\npicking this:\n  P ?s \\<le> enat k1 * P' ?s\n  0 < k1\n  P' s < \\<infinity>", "have \"P s < \\<infinity>\""], ["proof (prove)\nusing this:\n  P ?s \\<le> enat k1 * P' ?s\n  0 < k1\n  P' s < \\<infinity>\n\ngoal (1 subgoal):\n 1. P s < \\<infinity>", "using le_less_trans"], ["proof (prove)\nusing this:\n  P ?s \\<le> enat k1 * P' ?s\n  0 < k1\n  P' s < \\<infinity>\n  \\<lbrakk>?x \\<le> ?y; ?y < ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n\ngoal (1 subgoal):\n 1. P s < \\<infinity>", "by (metis enat.distinct(2) enat_ord_simps(4) imult_is_infinity)"], ["proof (state)\nthis:\n  P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "with c4"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     P s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k * Q t \\<le> enat k * P s)\n  P s < \\<infinity>", "obtain p t where 1: \"(c, s) \\<Rightarrow> p \\<Down> t\" and 2: \"enat p + enat k * Q t \\<le> enat k * P s\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     P s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k * Q t \\<le> enat k * P s)\n  P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        \\<lbrakk>(c, s) \\<Rightarrow> p \\<Down> t;\n         enat p + enat k * Q t \\<le> enat k * P s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  enat p + enat k * Q t \\<le> enat k * P s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "have \"enat p + enat (k*k1) * Q' t = enat p + enat (k) * ( (enat k1) * Q' t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat p + enat (k * k1) * Q' t = enat p + enat k * (enat k1 * Q' t)", "by (metis mult.assoc times_enat_simps(1))"], ["proof (state)\nthis:\n  enat p + enat (k * k1) * Q' t = enat p + enat k * (enat k1 * Q' t)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "also"], ["proof (state)\nthis:\n  enat p + enat (k * k1) * Q' t = enat p + enat k * (enat k1 * Q' t)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "have \"\\<dots> \\<le> enat p + enat (k) * Q t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat p + enat k * (enat k1 * Q' t) \\<le> enat p + enat k * Q t", "using conseq(3)"], ["proof (prove)\nusing this:\n  enat k1 * Q' ?s \\<le> Q ?s\n\ngoal (1 subgoal):\n 1. enat p + enat k * (enat k1 * Q' t) \\<le> enat p + enat k * Q t", "by (metis add_left_mono distrib_left le_iff_add)"], ["proof (state)\nthis:\n  enat p + enat k * (enat k1 * Q' t) \\<le> enat p + enat k * Q t\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "also"], ["proof (state)\nthis:\n  enat p + enat k * (enat k1 * Q' t) \\<le> enat p + enat k * Q t\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "have \"\\<dots> \\<le> enat k * P s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat p + enat k * Q t \\<le> enat k * P s", "using 2"], ["proof (prove)\nusing this:\n  enat p + enat k * Q t \\<le> enat k * P s\n\ngoal (1 subgoal):\n 1. enat p + enat k * Q t \\<le> enat k * P s", "by auto"], ["proof (state)\nthis:\n  enat p + enat k * Q t \\<le> enat k * P s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "also"], ["proof (state)\nthis:\n  enat p + enat k * Q t \\<le> enat k * P s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "have \"\\<dots> \\<le> enat (k*k1)  * P' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat k * P s \\<le> enat (k * k1) * P' s", "using conseq(2)"], ["proof (prove)\nusing this:\n  P ?s \\<le> enat k1 * P' ?s\n\ngoal (1 subgoal):\n 1. enat k * P s \\<le> enat (k * k1) * P' s", "by (metis mult.assoc mult_left_mono not_less not_less_zero times_enat_simps(1))"], ["proof (state)\nthis:\n  enat k * P s \\<le> enat (k * k1) * P' s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "finally"], ["proof (chain)\npicking this:\n  enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "have 2: \"enat p + enat (k*k1) * Q' t \\<le> enat (k*k1) * P' s\""], ["proof (prove)\nusing this:\n  enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s\n\ngoal (1 subgoal):\n 1. enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "by auto"], ["proof (state)\nthis:\n  enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P' s < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "from 1 2"], ["proof (chain)\npicking this:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "show \"\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + (k*k1) * Q' t \\<le> (k*k1) * P' s\""], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s", "by auto"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat (k * k1) * Q' t \\<le> enat (k * k1) * P' s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k>0.\n     \\<forall>s.\n        P' s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * Q' t \\<le> enat k * P' s)\n\ngoal (1 subgoal):\n 1. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))", "case (While INV b c)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. INV s + \\<up> (bval b s)} c\n                               {\\<lambda>t. INV t + 1}\n  \\<exists>k>0.\n     \\<forall>s.\n        INV s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * (INV t + 1)\n            \\<le> enat k * (INV s + \\<up> (bval b s)))\n\ngoal (1 subgoal):\n 1. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))", "then"], ["proof (chain)\npicking this:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. INV s + \\<up> (bval b s)} c\n                               {\\<lambda>t. INV t + 1}\n  \\<exists>k>0.\n     \\<forall>s.\n        INV s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * (INV t + 1)\n            \\<le> enat k * (INV s + \\<up> (bval b s)))", "obtain k where W2: \"\\<forall>s. INV s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow> (\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat k * (INV t + 1) \\<le> enat k * (INV s + \\<up> (bval b s)))\" and g0: \"k>0\""], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. INV s + \\<up> (bval b s)} c\n                               {\\<lambda>t. INV t + 1}\n  \\<exists>k>0.\n     \\<forall>s.\n        INV s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * (INV t + 1)\n            \\<le> enat k * (INV s + \\<up> (bval b s)))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>\\<forall>s.\n                    INV s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n                    (\\<exists>t p.\n                        (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                        enat p + enat k * (INV t + 1)\n                        \\<le> enat k * (INV s + \\<up> (bval b s)));\n         0 < k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>s.\n     INV s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k * (INV t + 1)\n         \\<le> enat k * (INV s + \\<up> (bval b s)))\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<And>I b c.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n           I s + \\<up> (bval b s)}\n       c {\\<lambda>t. I t + 1};\n        \\<exists>k>0.\n           \\<forall>s.\n              I s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n              (\\<exists>t p.\n                  (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                  enat p + enat k * (I t + 1)\n                  \\<le> enat k * (I s + \\<up> (bval b s)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               I s + 1 < \\<infinity> \\<longrightarrow>\n                               (\\<exists>t p.\n                                   (WHILE b DO c,\n                                    s) \\<Rightarrow> p \\<Down> t \\<and>\n                                   enat p +\n                                   enat k * (I t + \\<up> (\\<not> bval b t))\n                                   \\<le> enat k * (I s + 1))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          INV s + 1 < \\<infinity> \\<longrightarrow>\n          (\\<exists>t p.\n              (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n              \\<le> enat k * (INV s + 1))", "apply(rule exI[where x=k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<and>\n    (\\<forall>s.\n        INV s + 1 < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n            \\<le> enat k * (INV s + 1)))", "proof (safe)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < k\n 2. \\<And>s.\n       INV s + 1 < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n          \\<le> enat k * (INV s + 1)", "show \"0<k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k", "by fact"], ["proof (state)\nthis:\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       INV s + 1 < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n          \\<le> enat k * (INV s + 1)", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       INV s + 1 < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n          \\<le> enat k * (INV s + 1)", "assume ninfINV: \"INV s + 1 < \\<infinity>\""], ["proof (state)\nthis:\n  INV s + 1 < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       INV s + 1 < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n          \\<le> enat k * (INV s + 1)", "then"], ["proof (chain)\npicking this:\n  INV s + 1 < \\<infinity>", "have f: \"INV s < \\<infinity>\""], ["proof (prove)\nusing this:\n  INV s + 1 < \\<infinity>\n\ngoal (1 subgoal):\n 1. INV s < \\<infinity>", "using enat_ord_simps(4)"], ["proof (prove)\nusing this:\n  INV s + 1 < \\<infinity>\n  (?q < \\<infinity>) = (?q \\<noteq> \\<infinity>)\n\ngoal (1 subgoal):\n 1. INV s < \\<infinity>", "by fastforce"], ["proof (state)\nthis:\n  INV s < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       INV s + 1 < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n          \\<le> enat k * (INV s + 1)", "then"], ["proof (chain)\npicking this:\n  INV s < \\<infinity>", "obtain n where i: \"INV s = enat n\""], ["proof (prove)\nusing this:\n  INV s < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>n. INV s = enat n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using not_infinity_eq"], ["proof (prove)\nusing this:\n  INV s < \\<infinity>\n  (?x \\<noteq> \\<infinity>) = (\\<exists>i. ?x = enat i)\n\ngoal (1 subgoal):\n 1. (\\<And>n. INV s = enat n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  INV s = enat n\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       INV s + 1 < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n          \\<le> enat k * (INV s + 1)", "have \"INV s = enat n \\<Longrightarrow> \\<exists>t p. (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat k * (INV t + emb (\\<not> bval b t)) \\<le> enat k * (INV s + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. INV s = enat n \\<Longrightarrow>\n    \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n       \\<le> enat k * (INV s + 1)", "proof (induct n arbitrary: s rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x s.\n       \\<lbrakk>\\<And>y s.\n                   \\<lbrakk>y < x; INV s = enat y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>t p.\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n  enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n  \\<le> enat k * (INV s + 1);\n        INV s = enat x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t p.\n                            (WHILE b DO c,\n                             s) \\<Rightarrow> p \\<Down> t \\<and>\n                            enat p +\n                            enat k * (INV t + \\<up> (\\<not> bval b t))\n                            \\<le> enat k * (INV s + 1)", "case (less n)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < n; INV ?s = enat ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t p.\n                       (WHILE b DO c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                       \\<le> enat k * (INV ?s + 1)\n  INV s = enat n\n\ngoal (1 subgoal):\n 1. \\<And>x s.\n       \\<lbrakk>\\<And>y s.\n                   \\<lbrakk>y < x; INV s = enat y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>t p.\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n  enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n  \\<le> enat k * (INV s + 1);\n        INV s = enat x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t p.\n                            (WHILE b DO c,\n                             s) \\<Rightarrow> p \\<Down> t \\<and>\n                            enat p +\n                            enat k * (INV t + \\<up> (\\<not> bval b t))\n                            \\<le> enat k * (INV s + 1)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?y < n; INV ?s = enat ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t p.\n                       (WHILE b DO c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                       \\<le> enat k * (INV ?s + 1)\n  INV s = enat n", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y < n; INV ?s = enat ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t p.\n                       (WHILE b DO c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                       \\<le> enat k * (INV ?s + 1)\n  INV s = enat n\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n       \\<le> enat k * (INV s + 1)", "proof (cases \"bval b s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)\n 2. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; \\<not> bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "case False"], ["proof (state)\nthis:\n  \\<not> bval b s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)\n 2. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; \\<not> bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n       \\<le> enat k * (INV s + 1)", "apply(rule exI[where x=\"s\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> s \\<and>\n       enat p + enat k * (INV s + \\<up> (\\<not> bval b s))\n       \\<le> enat k * (INV s + 1)", "apply(rule exI[where x=\"Suc 0\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (WHILE b DO c, s) \\<Rightarrow> Suc 0 \\<Down> s \\<and>\n    enat (Suc 0) + enat k * (INV s + \\<up> (\\<not> bval b s))\n    \\<le> enat k * (INV s + 1)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. (WHILE b DO c, s) \\<Rightarrow> Suc 0 \\<Down> s\n 2. enat (Suc 0) + enat k * (INV s + \\<up> (\\<not> bval b s))\n    \\<le> enat k * (INV s + 1)", "apply (fact WhileFalse[OF False])"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc 0) + enat k * (INV s + \\<up> (\\<not> bval b s))\n    \\<le> enat k * (INV s + 1)", "using False"], ["proof (prove)\nusing this:\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. enat (Suc 0) + enat k * (INV s + \\<up> (\\<not> bval b s))\n    \\<le> enat k * (INV s + 1)", "apply (simp add: one_enat_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    enat (Suc 0) + enat k * INV s \\<le> enat k * (INV s + enat (Suc 0))", "using g0"], ["proof (prove)\nusing this:\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    enat (Suc 0) + enat k * INV s \\<le> enat k * (INV s + enat (Suc 0))", "by (metis One_nat_def Suc_ile_eq add.commute add_left_mono distrib_left enat_0_iff(2) mult.right_neutral not_gr_zero one_enat_def)"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n     \\<le> enat k * (INV s + 1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "case True"], ["proof (state)\nthis:\n  bval b s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "with less(2) W2"], ["proof (chain)\npicking this:\n  INV s = enat n\n  \\<forall>s.\n     INV s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k * (INV t + 1)\n         \\<le> enat k * (INV s + \\<up> (bval b s)))\n  bval b s", "have \"(\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat k * (INV t + 1) \\<le> enat k * INV s )\""], ["proof (prove)\nusing this:\n  INV s = enat n\n  \\<forall>s.\n     INV s + \\<up> (bval b s) < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k * (INV t + 1)\n         \\<le> enat k * (INV s + \\<up> (bval b s)))\n  bval b s\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat k * (INV t + 1) \\<le> enat k * INV s", "by force"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * (INV t + 1) \\<le> enat k * INV s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "then"], ["proof (chain)\npicking this:\n  \\<exists>t p.\n     (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * (INV t + 1) \\<le> enat k * INV s", "obtain t p where o: \"(c, s) \\<Rightarrow> p \\<Down> t\" and q: \"enat p + enat k * (INV t + 1) \\<le> enat k * INV s \""], ["proof (prove)\nusing this:\n  \\<exists>t p.\n     (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * (INV t + 1) \\<le> enat k * INV s\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        \\<lbrakk>(c, s) \\<Rightarrow> p \\<Down> t;\n         enat p + enat k * (INV t + 1) \\<le> enat k * INV s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  enat p + enat k * (INV t + 1) \\<le> enat k * INV s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "from o bigstep_progress"], ["proof (chain)\npicking this:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  (?c, ?s) \\<Rightarrow> ?p \\<Down> ?t \\<Longrightarrow> 0 < ?p", "have p: \"p > 0\""], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  (?c, ?s) \\<Rightarrow> ?p \\<Down> ?t \\<Longrightarrow> 0 < ?p\n\ngoal (1 subgoal):\n 1. 0 < p", "by blast"], ["proof (state)\nthis:\n  0 < p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "from q"], ["proof (chain)\npicking this:\n  enat p + enat k * (INV t + 1) \\<le> enat k * INV s", "have pf: \"enat k * (INV t + 1) \\<le> enat k * INV s\""], ["proof (prove)\nusing this:\n  enat p + enat k * (INV t + 1) \\<le> enat k * INV s\n\ngoal (1 subgoal):\n 1. enat k * (INV t + 1) \\<le> enat k * INV s", "using dual_order.trans"], ["proof (prove)\nusing this:\n  enat p + enat k * (INV t + 1) \\<le> enat k * INV s\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n\ngoal (1 subgoal):\n 1. enat k * (INV t + 1) \\<le> enat k * INV s", "by fastforce"], ["proof (state)\nthis:\n  enat k * (INV t + 1) \\<le> enat k * INV s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "then"], ["proof (chain)\npicking this:\n  enat k * (INV t + 1) \\<le> enat k * INV s", "have \"INV t < \\<infinity>\""], ["proof (prove)\nusing this:\n  enat k * (INV t + 1) \\<le> enat k * INV s\n\ngoal (1 subgoal):\n 1. INV t < \\<infinity>", "using less(2)"], ["proof (prove)\nusing this:\n  enat k * (INV t + 1) \\<le> enat k * INV s\n  INV s = enat n\n\ngoal (1 subgoal):\n 1. INV t < \\<infinity>", "using g0 not_le"], ["proof (prove)\nusing this:\n  enat k * (INV t + 1) \\<le> enat k * INV s\n  INV s = enat n\n  0 < k\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n\ngoal (1 subgoal):\n 1. INV t < \\<infinity>", "by fastforce"], ["proof (state)\nthis:\n  INV t < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "then"], ["proof (chain)\npicking this:\n  INV t < \\<infinity>", "obtain invt where invt: \"INV t = enat invt\""], ["proof (prove)\nusing this:\n  INV t < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>invt.\n        INV t = enat invt \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  INV t = enat invt\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "from pf g0"], ["proof (chain)\npicking this:\n  enat k * (INV t + 1) \\<le> enat k * INV s\n  0 < k", "have g: \"INV t  < INV s\""], ["proof (prove)\nusing this:\n  enat k * (INV t + 1) \\<le> enat k * INV s\n  0 < k\n\ngoal (1 subgoal):\n 1. INV t < INV s", "unfolding less(2) invt"], ["proof (prove)\nusing this:\n  enat k * (enat invt + 1) \\<le> enat k * enat n\n  0 < k\n\ngoal (1 subgoal):\n 1. enat invt < enat n", "by (metis (full_types) Suc_ile_eq add.commute eSuc_enat enat_ord_simps(1) nat_mult_le_cancel_disj plus_1_eSuc(1) times_enat_simps(1))"], ["proof (state)\nthis:\n  INV t < INV s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "then"], ["proof (chain)\npicking this:\n  INV t < INV s", "have ninfINVt: \"INV t < \\<infinity>\""], ["proof (prove)\nusing this:\n  INV t < INV s\n\ngoal (1 subgoal):\n 1. INV t < \\<infinity>", "using less(2)"], ["proof (prove)\nusing this:\n  INV t < INV s\n  INV s = enat n\n\ngoal (1 subgoal):\n 1. INV t < \\<infinity>", "using enat_ord_simps(4)"], ["proof (prove)\nusing this:\n  INV t < INV s\n  INV s = enat n\n  (?q < \\<infinity>) = (?q \\<noteq> \\<infinity>)\n\ngoal (1 subgoal):\n 1. INV t < \\<infinity>", "by fastforce"], ["proof (state)\nthis:\n  INV t < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "then"], ["proof (chain)\npicking this:\n  INV t < \\<infinity>", "obtain n' where i: \"INV t = enat n'\""], ["proof (prove)\nusing this:\n  INV t < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>n'. INV t = enat n' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using not_infinity_eq"], ["proof (prove)\nusing this:\n  INV t < \\<infinity>\n  (?x \\<noteq> \\<infinity>) = (\\<exists>i. ?x = enat i)\n\ngoal (1 subgoal):\n 1. (\\<And>n'. INV t = enat n' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  INV t = enat n'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "with less(2)"], ["proof (chain)\npicking this:\n  INV s = enat n\n  INV t = enat n'", "have ii: \"n' < n\""], ["proof (prove)\nusing this:\n  INV s = enat n\n  INV t = enat n'\n\ngoal (1 subgoal):\n 1. n' < n", "using g"], ["proof (prove)\nusing this:\n  INV s = enat n\n  INV t = enat n'\n  INV t < INV s\n\ngoal (1 subgoal):\n 1. n' < n", "by auto"], ["proof (state)\nthis:\n  n' < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "from i ii less(1)"], ["proof (chain)\npicking this:\n  INV t = enat n'\n  n' < n\n  \\<lbrakk>?y < n; INV ?s = enat ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t p.\n                       (WHILE b DO c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                       \\<le> enat k * (INV ?s + 1)", "obtain t2 p2 where o2: \"(WHILE b DO c, t) \\<Rightarrow> p2 \\<Down> t2\" and q2: \"enat p2 + enat k * (INV t2 + emb (\\<not> bval b t2)) \\<le> enat k * ( INV t + 1)\""], ["proof (prove)\nusing this:\n  INV t = enat n'\n  n' < n\n  \\<lbrakk>?y < n; INV ?s = enat ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t p.\n                       (WHILE b DO c, ?s) \\<Rightarrow> p \\<Down> t \\<and>\n                       enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                       \\<le> enat k * (INV ?s + 1)\n\ngoal (1 subgoal):\n 1. (\\<And>p2 t2.\n        \\<lbrakk>(WHILE b DO c, t) \\<Rightarrow> p2 \\<Down> t2;\n         enat p2 + enat k * (INV t2 + \\<up> (\\<not> bval b t2))\n         \\<le> enat k * (INV t + 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (WHILE b DO c, t) \\<Rightarrow> p2 \\<Down> t2\n  enat p2 + enat k * (INV t2 + \\<up> (\\<not> bval b t2))\n  \\<le> enat k * (INV t + 1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "have ende: \"~ bval b t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> bval b t2", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<not> bval b t2 \\<Longrightarrow> False", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. bval b t2 \\<Longrightarrow> False", "using q2 g0 ninfINVt"], ["proof (prove)\nusing this:\n  enat p2 + enat k * (INV t2 + \\<up> (\\<not> bval b t2))\n  \\<le> enat k * (INV t + 1)\n  0 < k\n  INV t < \\<infinity>\n\ngoal (1 subgoal):\n 1. bval b t2 \\<Longrightarrow> False", "by (simp add: i one_enat_def)"], ["proof (state)\nthis:\n  \\<not> bval b t2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "from WhileTrue[OF True o o2]"], ["proof (chain)\npicking this:\n  1 + p + p2 = ?z \\<Longrightarrow>\n  (WHILE b DO c, s) \\<Rightarrow> ?z \\<Down> t2", "have \"(WHILE b DO c, s) \\<Rightarrow> 1 + p + p2 \\<Down> t2\""], ["proof (prove)\nusing this:\n  1 + p + p2 = ?z \\<Longrightarrow>\n  (WHILE b DO c, s) \\<Rightarrow> ?z \\<Down> t2\n\ngoal (1 subgoal):\n 1. (WHILE b DO c, s) \\<Rightarrow> 1 + p + p2 \\<Down> t2", "by simp"], ["proof (state)\nthis:\n  (WHILE b DO c, s) \\<Rightarrow> 1 + p + p2 \\<Down> t2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "from ende q2"], ["proof (chain)\npicking this:\n  \\<not> bval b t2\n  enat p2 + enat k * (INV t2 + \\<up> (\\<not> bval b t2))\n  \\<le> enat k * (INV t + 1)", "have q2': \"enat p2 + enat k * INV t2 \\<le> enat k * (INV t + 1)\""], ["proof (prove)\nusing this:\n  \\<not> bval b t2\n  enat p2 + enat k * (INV t2 + \\<up> (\\<not> bval b t2))\n  \\<le> enat k * (INV t + 1)\n\ngoal (1 subgoal):\n 1. enat p2 + enat k * INV t2 \\<le> enat k * (INV t + 1)", "by simp"], ["proof (state)\nthis:\n  enat p2 + enat k * INV t2 \\<le> enat k * (INV t + 1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>y s.\n                \\<lbrakk>y < n; INV s = enat y\\<rbrakk>\n                \\<Longrightarrow> \\<exists>t p.\n                                     (WHILE b DO c,\ns) \\<Rightarrow> p \\<Down> t \\<and>\n                                     enat p +\n                                     enat k *\n                                     (INV t + \\<up> (\\<not> bval b t))\n                                     \\<le> enat k * (INV s + 1);\n     INV s = enat n; bval b s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t p.\n                         (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                         enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n                         \\<le> enat k * (INV s + 1)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n       \\<le> enat k * (INV s + 1)", "apply(rule exI[where x=t2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t2 \\<and>\n       enat p + enat k * (INV t2 + \\<up> (\\<not> bval b t2))\n       \\<le> enat k * (INV s + 1)", "apply(rule exI[where x= \"1 + p + p2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (WHILE b DO c, s) \\<Rightarrow> 1 + p + p2 \\<Down> t2 \\<and>\n    enat (1 + p + p2) + enat k * (INV t2 + \\<up> (\\<not> bval b t2))\n    \\<le> enat k * (INV s + 1)", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (WHILE b DO c, s) \\<Rightarrow> 1 + p + p2 \\<Down> t2\n 2. enat (1 + p + p2) + enat k * (INV t2 + \\<up> (\\<not> bval b t2))\n    \\<le> enat k * (INV s + 1)", "apply(fact)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (1 + p + p2) + enat k * (INV t2 + \\<up> (\\<not> bval b t2))\n    \\<le> enat k * (INV s + 1)", "using ende"], ["proof (prove)\nusing this:\n  \\<not> bval b t2\n\ngoal (1 subgoal):\n 1. enat (1 + p + p2) + enat k * (INV t2 + \\<up> (\\<not> bval b t2))\n    \\<le> enat k * (INV s + 1)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> bval b t2 \\<Longrightarrow>\n    enat (Suc (p + p2)) + enat k * INV t2 \\<le> enat k * (INV s + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> bval b t2 \\<Longrightarrow>\n    enat (Suc (p + p2)) + enat k * INV t2 \\<le> enat k * (INV s + 1)", "have \"enat (Suc (p + p2)) +  enat k * INV t2 = enat (Suc p) + enat p2 +  enat k * INV t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc (p + p2)) + enat k * INV t2 =\n    enat (Suc p) + enat p2 + enat k * INV t2", "by fastforce"], ["proof (state)\nthis:\n  enat (Suc (p + p2)) + enat k * INV t2 =\n  enat (Suc p) + enat p2 + enat k * INV t2\n\ngoal (1 subgoal):\n 1. \\<not> bval b t2 \\<Longrightarrow>\n    enat (Suc (p + p2)) + enat k * INV t2 \\<le> enat k * (INV s + 1)", "also"], ["proof (state)\nthis:\n  enat (Suc (p + p2)) + enat k * INV t2 =\n  enat (Suc p) + enat p2 + enat k * INV t2\n\ngoal (1 subgoal):\n 1. \\<not> bval b t2 \\<Longrightarrow>\n    enat (Suc (p + p2)) + enat k * INV t2 \\<le> enat k * (INV s + 1)", "have \"\\<dots> \\<le> enat (Suc p) + enat k * (INV t + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc p) + enat p2 + enat k * INV t2\n    \\<le> enat (Suc p) + enat k * (INV t + 1)", "using q2'"], ["proof (prove)\nusing this:\n  enat p2 + enat k * INV t2 \\<le> enat k * (INV t + 1)\n\ngoal (1 subgoal):\n 1. enat (Suc p) + enat p2 + enat k * INV t2\n    \\<le> enat (Suc p) + enat k * (INV t + 1)", "by (metis ab_semigroup_add_class.add_ac(1) add_left_mono)"], ["proof (state)\nthis:\n  enat (Suc p) + enat p2 + enat k * INV t2\n  \\<le> enat (Suc p) + enat k * (INV t + 1)\n\ngoal (1 subgoal):\n 1. \\<not> bval b t2 \\<Longrightarrow>\n    enat (Suc (p + p2)) + enat k * INV t2 \\<le> enat k * (INV s + 1)", "also"], ["proof (state)\nthis:\n  enat (Suc p) + enat p2 + enat k * INV t2\n  \\<le> enat (Suc p) + enat k * (INV t + 1)\n\ngoal (1 subgoal):\n 1. \\<not> bval b t2 \\<Longrightarrow>\n    enat (Suc (p + p2)) + enat k * INV t2 \\<le> enat k * (INV s + 1)", "have \"\\<dots> \\<le> 1 + enat k * (INV s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc p) + enat k * (INV t + 1) \\<le> 1 + enat k * INV s", "using q"], ["proof (prove)\nusing this:\n  enat p + enat k * (INV t + 1) \\<le> enat k * INV s\n\ngoal (1 subgoal):\n 1. enat (Suc p) + enat k * (INV t + 1) \\<le> 1 + enat k * INV s", "by (metis (no_types, hide_lams) add.commute add_left_mono eSuc_enat iadd_Suc plus_1_eSuc(1))"], ["proof (state)\nthis:\n  enat (Suc p) + enat k * (INV t + 1) \\<le> 1 + enat k * INV s\n\ngoal (1 subgoal):\n 1. \\<not> bval b t2 \\<Longrightarrow>\n    enat (Suc (p + p2)) + enat k * INV t2 \\<le> enat k * (INV s + 1)", "also"], ["proof (state)\nthis:\n  enat (Suc p) + enat k * (INV t + 1) \\<le> 1 + enat k * INV s\n\ngoal (1 subgoal):\n 1. \\<not> bval b t2 \\<Longrightarrow>\n    enat (Suc (p + p2)) + enat k * INV t2 \\<le> enat k * (INV s + 1)", "have \"\\<dots> \\<le> enat k + enat k * (INV s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + enat k * INV s \\<le> enat k + enat k * INV s", "using g0"], ["proof (prove)\nusing this:\n  0 < k\n\ngoal (1 subgoal):\n 1. 1 + enat k * INV s \\<le> enat k + enat k * INV s", "by (simp add: Suc_leI one_enat_def)"], ["proof (state)\nthis:\n  1 + enat k * INV s \\<le> enat k + enat k * INV s\n\ngoal (1 subgoal):\n 1. \\<not> bval b t2 \\<Longrightarrow>\n    enat (Suc (p + p2)) + enat k * INV t2 \\<le> enat k * (INV s + 1)", "also"], ["proof (state)\nthis:\n  1 + enat k * INV s \\<le> enat k + enat k * INV s\n\ngoal (1 subgoal):\n 1. \\<not> bval b t2 \\<Longrightarrow>\n    enat (Suc (p + p2)) + enat k * INV t2 \\<le> enat k * (INV s + 1)", "have \"\\<dots> \\<le>  enat k * (INV s + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat k + enat k * INV s \\<le> enat k * (INV s + 1)", "by (simp add: add.commute distrib_left)"], ["proof (state)\nthis:\n  enat k + enat k * INV s \\<le> enat k * (INV s + 1)\n\ngoal (1 subgoal):\n 1. \\<not> bval b t2 \\<Longrightarrow>\n    enat (Suc (p + p2)) + enat k * INV t2 \\<le> enat k * (INV s + 1)", "finally"], ["proof (chain)\npicking this:\n  enat (Suc (p + p2)) + enat k * INV t2 \\<le> enat k * (INV s + 1)", "show \"enat (Suc (p + p2)) +  enat k * INV t2 \\<le>  enat k * (INV s + 1)\""], ["proof (prove)\nusing this:\n  enat (Suc (p + p2)) + enat k * INV t2 \\<le> enat k * (INV s + 1)\n\ngoal (1 subgoal):\n 1. enat (Suc (p + p2)) + enat k * INV t2 \\<le> enat k * (INV s + 1)", "."], ["proof (state)\nthis:\n  enat (Suc (p + p2)) + enat k * INV t2 \\<le> enat k * (INV s + 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n     \\<le> enat k * (INV s + 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n     \\<le> enat k * (INV s + 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  INV s = enat n \\<Longrightarrow>\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n     \\<le> enat k * (INV s + 1)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       INV s + 1 < \\<infinity> \\<Longrightarrow>\n       \\<exists>t p.\n          (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n          enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n          \\<le> enat k * (INV s + 1)", "from this[OF i]"], ["proof (chain)\npicking this:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n     \\<le> enat k * (INV s + 1)", "show \"\\<exists>t p. (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat k * (INV t + emb (\\<not> bval b t)) \\<le> enat k * (INV s + 1)\""], ["proof (prove)\nusing this:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n     \\<le> enat k * (INV s + 1)\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n       \\<le> enat k * (INV s + 1)", "."], ["proof (state)\nthis:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n     \\<le> enat k * (INV s + 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k>0.\n     \\<forall>s.\n        INV s + 1 < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * (INV t + \\<up> (\\<not> bval b t))\n            \\<le> enat k * (INV s + 1))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conseq':\n  \"\\<lbrakk> \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q} ;  \\<forall>s. P s \\<le> P' s; \\<forall>s. Q' s \\<le> Q s  \\<rbrakk> \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P'} c {Q'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n     \\<forall>s. P s \\<le> P' s; \\<forall>s. Q' s \\<le> Q s\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P'} c {Q'}", "apply(rule conseq[where k=1])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n     \\<forall>s. P s \\<le> P' s; \\<forall>s. Q' s \\<le> Q s\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {?P} c {?Q}\n 2. \\<And>s.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<forall>s. P s \\<le> P' s; \\<forall>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> ?P s \\<le> enat 1 * P' s\n 3. \\<And>s.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<forall>s. P s \\<le> P' s; \\<forall>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> enat 1 * Q' s \\<le> ?Q s\n 4. \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n     \\<forall>s. P s \\<le> P' s; \\<forall>s. Q' s \\<le> Q s\\<rbrakk>\n    \\<Longrightarrow> 0 < 1", "by auto"], ["", "lemma strengthen_pre:\n  \"\\<lbrakk> \\<forall>s. P s \\<le> P' s;  \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q} \\<rbrakk> \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P'} c {Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>s. P s \\<le> P' s;\n     \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P'} c {Q}", "apply(rule conseq[where k=1 and Q'=Q and Q=Q])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<forall>s. P s \\<le> P' s;\n     \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {?P} c {Q}\n 2. \\<And>s.\n       \\<lbrakk>\\<forall>s. P s \\<le> P' s;\n        \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}\\<rbrakk>\n       \\<Longrightarrow> ?P s \\<le> enat 1 * P' s\n 3. \\<And>s.\n       \\<lbrakk>\\<forall>s. P s \\<le> P' s;\n        \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}\\<rbrakk>\n       \\<Longrightarrow> enat 1 * Q s \\<le> Q s\n 4. \\<lbrakk>\\<forall>s. P s \\<le> P' s;\n     \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}\\<rbrakk>\n    \\<Longrightarrow> 0 < 1", "by auto"], ["", "lemma weaken_post:\n  \"\\<lbrakk> \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};  \\<forall>s. Q s \\<ge> Q' s \\<rbrakk> \\<Longrightarrow>  \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n     \\<forall>s. Q' s \\<le> Q s\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q'}", "apply(rule conseq[where k=1])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n     \\<forall>s. Q' s \\<le> Q s\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {?P} c {?Q}\n 2. \\<And>s.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<forall>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> ?P s \\<le> enat 1 * P s\n 3. \\<And>s.\n       \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n        \\<forall>s. Q' s \\<le> Q s\\<rbrakk>\n       \\<Longrightarrow> enat 1 * Q' s \\<le> ?Q s\n 4. \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n     \\<forall>s. Q' s \\<le> Q s\\<rbrakk>\n    \\<Longrightarrow> 0 < 1", "by auto"], ["", "lemma Assign': \"\\<forall>s. P s \\<ge> eSuc ( Q(s[a/x])) \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P} x ::= a {Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. eSuc (Q (s[a/x])) \\<le> P s \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2\\<^sub>' {P} x ::= a {Q}", "by (simp add: strengthen_pre[OF _ Assign])"], ["", "subsection \"Completeness\""], ["", "lemma bigstep_det: \"(c1, s) \\<Rightarrow> p1 \\<Down> t1 \\<Longrightarrow> (c1, s) \\<Rightarrow> p \\<Down> t \\<Longrightarrow> p1=p \\<and> t1=t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c1, s) \\<Rightarrow> p1 \\<Down> t1;\n     (c1, s) \\<Rightarrow> p \\<Down> t\\<rbrakk>\n    \\<Longrightarrow> p1 = p \\<and> t1 = t", "using big_step_t_determ2"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?c, ?s) \\<Rightarrow> ?p \\<Down> ?t;\n   (?c, ?s) \\<Rightarrow> ?q \\<Down> ?u\\<rbrakk>\n  \\<Longrightarrow> ?u = ?t \\<and> ?p = ?q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(c1, s) \\<Rightarrow> p1 \\<Down> t1;\n     (c1, s) \\<Rightarrow> p \\<Down> t\\<rbrakk>\n    \\<Longrightarrow> p1 = p \\<and> t1 = t", "by simp"], ["", "lemma bigstepT_the_cost: \"(c, s) \\<Rightarrow> P \\<Down> T \\<Longrightarrow> (THE n. \\<exists>a. (c, s) \\<Rightarrow> n \\<Down> a) = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, s) \\<Rightarrow> P \\<Down> T \\<Longrightarrow>\n    \\<down>\\<^sub>t (c, s) = P", "using bigstep_det"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?c1.0, ?s) \\<Rightarrow> ?p1.0 \\<Down> ?t1.0;\n   (?c1.0, ?s) \\<Rightarrow> ?p \\<Down> ?t\\<rbrakk>\n  \\<Longrightarrow> ?p1.0 = ?p \\<and> ?t1.0 = ?t\n\ngoal (1 subgoal):\n 1. (c, s) \\<Rightarrow> P \\<Down> T \\<Longrightarrow>\n    \\<down>\\<^sub>t (c, s) = P", "by blast"], ["", "lemma bigstepT_the_state: \"(c, s) \\<Rightarrow> P \\<Down> T \\<Longrightarrow> (THE a. \\<exists>n. (c, s) \\<Rightarrow> n \\<Down> a) = T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, s) \\<Rightarrow> P \\<Down> T \\<Longrightarrow>\n    \\<down>\\<^sub>s (c, s) = T", "using bigstep_det"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?c1.0, ?s) \\<Rightarrow> ?p1.0 \\<Down> ?t1.0;\n   (?c1.0, ?s) \\<Rightarrow> ?p \\<Down> ?t\\<rbrakk>\n  \\<Longrightarrow> ?p1.0 = ?p \\<and> ?t1.0 = ?t\n\ngoal (1 subgoal):\n 1. (c, s) \\<Rightarrow> P \\<Down> T \\<Longrightarrow>\n    \\<down>\\<^sub>s (c, s) = T", "by blast"], ["", "lemma SKIPnot: \"(\\<not> (SKIP, s) \\<Rightarrow> p \\<Down> t) = (s\\<noteq>t \\<or> p\\<noteq>Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> (SKIP, s) \\<Rightarrow> p \\<Down> t) =\n    (s \\<noteq> t \\<or> p \\<noteq> Suc 0)", "by blast"], ["", "lemma SKIPp: \"(THE p. \\<exists>t. (SKIP, s) \\<Rightarrow> p \\<Down> t) = Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>t (SKIP, s) = Suc 0", "apply(rule the_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>t. (SKIP, s) \\<Rightarrow> Suc 0 \\<Down> t\n 2. \\<And>p.\n       \\<exists>t. (SKIP, s) \\<Rightarrow> p \\<Down> t \\<Longrightarrow>\n       p = Suc 0", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<exists>t. (SKIP, s) \\<Rightarrow> p \\<Down> t \\<Longrightarrow>\n       p = Suc 0", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SKIPt: \"(THE t. \\<exists>p. (SKIP, s) \\<Rightarrow> p \\<Down> t) = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>s (SKIP, s) = s", "apply(rule the_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>p. (SKIP, s) \\<Rightarrow> p \\<Down> s\n 2. \\<And>t.\n       \\<exists>p. (SKIP, s) \\<Rightarrow> p \\<Down> t \\<Longrightarrow>\n       t = s", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<exists>p. (SKIP, s) \\<Rightarrow> p \\<Down> t \\<Longrightarrow>\n       t = s", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ASSp: \"(THE p. Ex (big_step_t (x ::= e, s) p)) = Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>t (x ::= e, s) = Suc 0", "apply(rule the_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Ex (big_step_t (x ::= e, s) (Suc 0))\n 2. \\<And>p. Ex (big_step_t (x ::= e, s) p) \\<Longrightarrow> p = Suc 0", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p. Ex (big_step_t (x ::= e, s) p) \\<Longrightarrow> p = Suc 0", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ASSt: \"(THE t. \\<exists>p. (x ::= e, s) \\<Rightarrow> p \\<Down> t) = s(x := aval e s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>s (x ::= e, s) = s[e/x]", "apply(rule the_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>p. (x ::= e, s) \\<Rightarrow> p \\<Down> s[e/x]\n 2. \\<And>t.\n       \\<exists>p. (x ::= e, s) \\<Rightarrow> p \\<Down> t \\<Longrightarrow>\n       t = s[e/x]", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<exists>p. (x ::= e, s) \\<Rightarrow> p \\<Down> t \\<Longrightarrow>\n       t = s[e/x]", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ASSnot: \"( \\<not> (x ::= e, s) \\<Rightarrow> p \\<Down> t ) = (p\\<noteq>Suc 0 \\<or> t\\<noteq>s(x := aval e s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> (x ::= e, s) \\<Rightarrow> p \\<Down> t) =\n    (p \\<noteq> Suc 0 \\<or> t \\<noteq> s[e/x])", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>\nThe completeness proof proceeds along the same lines as the one for partial\ncorrectness. First we have to strengthen our notion of weakest precondition\nto take termination into account:\\<close>"], ["", "definition wpQ :: \"com \\<Rightarrow> qassn \\<Rightarrow> qassn\" (\"wp\\<^sub>Q\") where\n\"wp\\<^sub>Q c Q  =  (\\<lambda>s. (if (\\<exists>t p. (c,s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>)  then enat (THE p. \\<exists>t. (c,s) \\<Rightarrow> p \\<Down> t) + Q (THE t. \\<exists>p. (c,s) \\<Rightarrow> p \\<Down> t) else \\<infinity>))\""], ["", "lemma wpQ_skip[simp]: \"wp\\<^sub>Q SKIP Q = (%s. eSuc (Q s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>Q SKIP Q = (\\<lambda>s. eSuc (Q s))", "apply(auto intro!: ext simp: wpQ_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s i.\n       Q s = enat i \\<Longrightarrow>\n       enat (\\<down>\\<^sub>t (SKIP, s)) + Q (\\<down>\\<^sub>s (SKIP, s)) =\n       eSuc (enat i)\n 2. \\<And>s.\n       \\<forall>t.\n          (\\<forall>p. \\<not> (SKIP, s) \\<Rightarrow> p \\<Down> t) \\<or>\n          Q t = \\<infinity> \\<Longrightarrow>\n       \\<infinity> = eSuc (Q s)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<forall>t.\n          (\\<forall>p. \\<not> (SKIP, s) \\<Rightarrow> p \\<Down> t) \\<or>\n          Q t = \\<infinity> \\<Longrightarrow>\n       \\<infinity> = eSuc (Q s)\n 2. \\<And>s i.\n       Q s = enat i \\<Longrightarrow>\n       enat (\\<down>\\<^sub>t (SKIP, s)) + Q (\\<down>\\<^sub>s (SKIP, s)) =\n       eSuc (enat i)", "apply(simp only: SKIPnot)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<forall>t.\n          (\\<forall>p. s \\<noteq> t \\<or> p \\<noteq> Suc 0) \\<or>\n          Q t = \\<infinity> \\<Longrightarrow>\n       \\<infinity> = eSuc (Q s)\n 2. \\<And>s i.\n       Q s = enat i \\<Longrightarrow>\n       enat (\\<down>\\<^sub>t (SKIP, s)) + Q (\\<down>\\<^sub>s (SKIP, s)) =\n       eSuc (enat i)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       Q s = enat i \\<Longrightarrow>\n       enat (\\<down>\\<^sub>t (SKIP, s)) + Q (\\<down>\\<^sub>s (SKIP, s)) =\n       eSuc (enat i)", "apply(simp only: SKIPp SKIPt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       Q s = enat i \\<Longrightarrow> enat (Suc 0) + enat i = eSuc (enat i)", "using one_enat_def plus_1_eSuc(1)"], ["proof (prove)\nusing this:\n  1 = enat 1\n  1 + ?q = eSuc ?q\n\ngoal (1 subgoal):\n 1. \\<And>s i.\n       Q s = enat i \\<Longrightarrow> enat (Suc 0) + enat i = eSuc (enat i)", "by auto"], ["", "lemma wpQ_ass[simp]: \"wp\\<^sub>Q (x ::= e) Q = (\\<lambda>s. eSuc (Q (s(x := aval e s))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>Q (x ::= e) Q = (\\<lambda>s. eSuc (Q (s[e/x])))", "by (auto intro!: ext simp: wpQ_def ASSp ASSt ASSnot eSuc_enat)"], ["", "lemma wpt_Seq[simp]: \"wp\\<^sub>Q (c\\<^sub>1;;c\\<^sub>2) Q = wp\\<^sub>Q c\\<^sub>1 (wp\\<^sub>Q c\\<^sub>2 Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>Q (c\\<^sub>1;; c\\<^sub>2) Q =\n    wp\\<^sub>Q c\\<^sub>1 (wp\\<^sub>Q c\\<^sub>2 Q)", "unfolding wpQ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s.\n        if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n    (\\<lambda>s.\n        if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "proof (rule, case_tac \"\\<exists>t p. (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\", goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "case (1 s)"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     Q t < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "then"], ["proof (chain)\npicking this:\n  \\<exists>t p.\n     (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     Q t < \\<infinity>", "obtain u p where ter: \"(c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> u\" and Q: \"Q u < \\<infinity>\""], ["proof (prove)\nusing this:\n  \\<exists>t p.\n     (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p u.\n        \\<lbrakk>(c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> u;\n         Q u < \\<infinity>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> u\n  Q u < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "then"], ["proof (chain)\npicking this:\n  (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> u\n  Q u < \\<infinity>", "obtain t p1 p2 where i: \"(c\\<^sub>1 , s) \\<Rightarrow> p1 \\<Down> t\" and ii: \"(c\\<^sub>2 , t) \\<Rightarrow> p2 \\<Down> u\" and p: \"p1 + p2 = p\""], ["proof (prove)\nusing this:\n  (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> u\n  Q u < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p1 t p2.\n        \\<lbrakk>(c\\<^sub>1, s) \\<Rightarrow> p1 \\<Down> t;\n         (c\\<^sub>2, t) \\<Rightarrow> p2 \\<Down> u; p1 + p2 = p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c\\<^sub>1, s) \\<Rightarrow> p1 \\<Down> t\n  (c\\<^sub>2, t) \\<Rightarrow> p2 \\<Down> u\n  p1 + p2 = p\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "from bigstepT_the_state[OF i]"], ["proof (chain)\npicking this:\n  \\<down>\\<^sub>s (c\\<^sub>1, s) = t", "have t: \"(THE t. \\<exists>p. (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t) = t\""], ["proof (prove)\nusing this:\n  \\<down>\\<^sub>s (c\\<^sub>1, s) = t\n\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>s (c\\<^sub>1, s) = t", "by blast"], ["proof (state)\nthis:\n  \\<down>\\<^sub>s (c\\<^sub>1, s) = t\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "from bigstepT_the_state[OF ii]"], ["proof (chain)\npicking this:\n  \\<down>\\<^sub>s (c\\<^sub>2, t) = u", "have t2: \"(THE u. \\<exists>p. (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> u) = u\""], ["proof (prove)\nusing this:\n  \\<down>\\<^sub>s (c\\<^sub>2, t) = u\n\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>s (c\\<^sub>2, t) = u", "by blast"], ["proof (state)\nthis:\n  \\<down>\\<^sub>s (c\\<^sub>2, t) = u\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "from bigstepT_the_cost[OF i]"], ["proof (chain)\npicking this:\n  \\<down>\\<^sub>t (c\\<^sub>1, s) = p1", "have firstcost: \"(THE p. \\<exists>t. (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t) = p1\""], ["proof (prove)\nusing this:\n  \\<down>\\<^sub>t (c\\<^sub>1, s) = p1\n\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>t (c\\<^sub>1, s) = p1", "by blast"], ["proof (state)\nthis:\n  \\<down>\\<^sub>t (c\\<^sub>1, s) = p1\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "from bigstepT_the_cost[OF ii]"], ["proof (chain)\npicking this:\n  \\<down>\\<^sub>t (c\\<^sub>2, t) = p2", "have secondcost: \"(THE p. \\<exists>u. (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> u) = p2\""], ["proof (prove)\nusing this:\n  \\<down>\\<^sub>t (c\\<^sub>2, t) = p2\n\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>t (c\\<^sub>2, t) = p2", "by blast"], ["proof (state)\nthis:\n  \\<down>\\<^sub>t (c\\<^sub>2, t) = p2\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "have totalcost: \"(THE p. Ex (big_step_t (c\\<^sub>1;; c\\<^sub>2, s) p)) = p1 + p2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s) = p1 + p2", "using bigstepT_the_cost[OF ter] p"], ["proof (prove)\nusing this:\n  \\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s) = p\n  p1 + p2 = p\n\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s) = p1 + p2", "by auto"], ["proof (state)\nthis:\n  \\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s) = p1 + p2\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "have totalstate: \"(THE t. \\<exists>p. (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t) = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s) = u", "using bigstepT_the_state[OF ter]"], ["proof (prove)\nusing this:\n  \\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s) = u\n\ngoal (1 subgoal):\n 1. \\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s) = u", "by auto"], ["proof (state)\nthis:\n  \\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s) = u\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "have c2: \"\\<exists>ta p. (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and> Q ta < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ta p.\n       (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and> Q ta < \\<infinity>", "apply(rule exI[where x= u])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> u \\<and> Q u < \\<infinity>", "apply(rule exI[where x= p2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c\\<^sub>2, t) \\<Rightarrow> p2 \\<Down> u \\<and> Q u < \\<infinity>", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. (c\\<^sub>2, t) \\<Rightarrow> p2 \\<Down> u\n 2. Q u < \\<infinity>", "apply fact+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>ta p.\n     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and> Q ta < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "have C: \"\\<exists>t p. (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and> (if \\<exists>ta p. (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and> Q ta < \\<infinity> then enat (THE p. Ex (big_step_t (c\\<^sub>2, t) p)) + Q (THE ta. \\<exists>p. (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta) else \\<infinity>) < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n       (if \\<exists>ta p.\n              (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n              Q ta < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n        else \\<infinity>)\n       < \\<infinity>", "apply(rule exI[where x=t])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n       (if \\<exists>ta p.\n              (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n              Q ta < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n        else \\<infinity>)\n       < \\<infinity>", "apply(rule exI[where x=p1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c\\<^sub>1, s) \\<Rightarrow> p1 \\<Down> t \\<and>\n    (if \\<exists>ta p.\n           (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n           Q ta < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n          Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n     else \\<infinity>)\n    < \\<infinity>", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. (c\\<^sub>1, s) \\<Rightarrow> p1 \\<Down> t\n 2. (if \\<exists>ta p.\n           (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n           Q ta < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n          Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n     else \\<infinity>)\n    < \\<infinity>", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>ta p.\n           (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n           Q ta < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n          Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n     else \\<infinity>)\n    < \\<infinity>", "apply(simp only: c2 if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n    < \\<infinity>", "using Q bigstepT_the_state ii"], ["proof (prove)\nusing this:\n  Q u < \\<infinity>\n  (?c, ?s) \\<Rightarrow> ?P \\<Down> ?T \\<Longrightarrow>\n  \\<down>\\<^sub>s (?c, ?s) = ?T\n  (c\\<^sub>2, t) \\<Rightarrow> p2 \\<Down> u\n\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n    < \\<infinity>", "by auto"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n     (if \\<exists>ta p.\n            (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n            Q ta < \\<infinity>\n      then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n           Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n      else \\<infinity>)\n     < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)\n 2. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n           Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n          Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n     else \\<infinity>) =\n    (if \\<exists>t p.\n           (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n           (if \\<exists>ta p.\n                  (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                  Q ta < \\<infinity>\n            then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                 Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n            else \\<infinity>)\n           < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n          (if \\<exists>t p.\n                 (c\\<^sub>2,\n                  \\<down>\\<^sub>s\n                   (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                 Q t < \\<infinity>\n           then enat\n                 (\\<down>\\<^sub>t\n                   (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                Q (\\<down>\\<^sub>s\n                    (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n           else \\<infinity>)\n     else \\<infinity>)", "apply(simp only: 1 if_True t t2 c2 C totalcost totalstate firstcost secondcost)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (p1 + p2) + Q u = enat p1 + (enat p2 + Q u)", "by fastforce"], ["proof (state)\nthis:\n  (if \\<exists>t p.\n         (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n         Q t < \\<infinity>\n   then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n        Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n   else \\<infinity>) =\n  (if \\<exists>t p.\n         (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n         (if \\<exists>ta p.\n                (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                Q ta < \\<infinity>\n          then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n               Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n          else \\<infinity>)\n         < \\<infinity>\n   then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n        (if \\<exists>t p.\n               (c\\<^sub>2,\n                \\<down>\\<^sub>s\n                 (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n               Q t < \\<infinity>\n         then enat\n               (\\<down>\\<^sub>t\n                 (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n              Q (\\<down>\\<^sub>s\n                  (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n         else \\<infinity>)\n   else \\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "case (2 s)"], ["proof (state)\nthis:\n  \\<nexists>t p.\n     (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<nexists>t p.\n          (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n          Q t < \\<infinity> \\<Longrightarrow>\n       (if \\<exists>t p.\n              (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n              Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n             Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n        else \\<infinity>) =\n       (if \\<exists>t p.\n              (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n              (if \\<exists>ta p.\n                     (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                     Q ta < \\<infinity>\n               then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                    Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n               else \\<infinity>)\n              < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n             (if \\<exists>t p.\n                    (c\\<^sub>2,\n                     \\<down>\\<^sub>s\n                      (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                    Q t < \\<infinity>\n              then enat\n                    (\\<down>\\<^sub>t\n                      (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                   Q (\\<down>\\<^sub>s\n                       (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n              else \\<infinity>)\n        else \\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n           Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n          Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n     else \\<infinity>) =\n    (if \\<exists>t p.\n           (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n           (if \\<exists>ta p.\n                  (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                  Q ta < \\<infinity>\n            then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                 Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n            else \\<infinity>)\n           < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n          (if \\<exists>t p.\n                 (c\\<^sub>2,\n                  \\<down>\\<^sub>s\n                   (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                 Q t < \\<infinity>\n           then enat\n                 (\\<down>\\<^sub>t\n                   (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                Q (\\<down>\\<^sub>s\n                    (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n           else \\<infinity>)\n     else \\<infinity>)", "apply(simp only: 2 if_False)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<infinity> =\n    (if \\<exists>t p.\n           (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n           (if \\<exists>ta p.\n                  (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                  Q ta < \\<infinity>\n            then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n                 Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n            else \\<infinity>)\n           < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n          (if \\<exists>t p.\n                 (c\\<^sub>2,\n                  \\<down>\\<^sub>s\n                   (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                 Q t < \\<infinity>\n           then enat\n                 (\\<down>\\<^sub>t\n                   (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                Q (\\<down>\\<^sub>s\n                    (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n           else \\<infinity>)\n     else \\<infinity>)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t p i ta tb pa ia pb ib.\n       \\<lbrakk>(c\\<^sub>2,\n                 \\<down>\\<^sub>s (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i; (c\\<^sub>1, s) \\<Rightarrow> pa \\<Down> ta;\n        enat (\\<down>\\<^sub>t (c\\<^sub>2, ta)) +\n        Q (\\<down>\\<^sub>s (c\\<^sub>2, ta)) =\n        enat ia;\n        (c\\<^sub>2, ta) \\<Rightarrow> pb \\<Down> tb; Q tb = enat ib\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n                         (enat\n                           (\\<down>\\<^sub>t\n                             (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                          Q (\\<down>\\<^sub>s\n                              (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))))", "using 2"], ["proof (prove)\nusing this:\n  \\<nexists>t p.\n     (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n     Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>t p i ta tb pa ia pb ib.\n       \\<lbrakk>(c\\<^sub>2,\n                 \\<down>\\<^sub>s (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i; (c\\<^sub>1, s) \\<Rightarrow> pa \\<Down> ta;\n        enat (\\<down>\\<^sub>t (c\\<^sub>2, ta)) +\n        Q (\\<down>\\<^sub>s (c\\<^sub>2, ta)) =\n        enat ia;\n        (c\\<^sub>2, ta) \\<Rightarrow> pb \\<Down> tb; Q tb = enat ib\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n                         (enat\n                           (\\<down>\\<^sub>t\n                             (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n                          Q (\\<down>\\<^sub>s\n                              (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))))", "by force"], ["proof (state)\nthis:\n  (if \\<exists>t p.\n         (c\\<^sub>1;; c\\<^sub>2, s) \\<Rightarrow> p \\<Down> t \\<and>\n         Q t < \\<infinity>\n   then enat (\\<down>\\<^sub>t (c\\<^sub>1;; c\\<^sub>2, s)) +\n        Q (\\<down>\\<^sub>s (c\\<^sub>1;; c\\<^sub>2, s))\n   else \\<infinity>) =\n  (if \\<exists>t p.\n         (c\\<^sub>1, s) \\<Rightarrow> p \\<Down> t \\<and>\n         (if \\<exists>ta p.\n                (c\\<^sub>2, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                Q ta < \\<infinity>\n          then enat (\\<down>\\<^sub>t (c\\<^sub>2, t)) +\n               Q (\\<down>\\<^sub>s (c\\<^sub>2, t))\n          else \\<infinity>)\n         < \\<infinity>\n   then enat (\\<down>\\<^sub>t (c\\<^sub>1, s)) +\n        (if \\<exists>t p.\n               (c\\<^sub>2,\n                \\<down>\\<^sub>s\n                 (c\\<^sub>1, s)) \\<Rightarrow> p \\<Down> t \\<and>\n               Q t < \\<infinity>\n         then enat\n               (\\<down>\\<^sub>t\n                 (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s))) +\n              Q (\\<down>\\<^sub>s\n                  (c\\<^sub>2, \\<down>\\<^sub>s (c\\<^sub>1, s)))\n         else \\<infinity>)\n   else \\<infinity>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wpQ_If[simp]:\n \"wp\\<^sub>Q (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) Q = (\\<lambda>s. eSuc (wp\\<^sub>Q (if bval b s then c\\<^sub>1 else c\\<^sub>2) Q s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>Q (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) Q =\n    (\\<lambda>s.\n        eSuc (wp\\<^sub>Q (if bval b s then c\\<^sub>1 else c\\<^sub>2) Q s))", "apply (auto simp: wpQ_def fun_eq_iff)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; bval b x;\n        (c\\<^sub>1, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>1, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>1, x)))\n 2. \\<And>x t p i.\n       \\<lbrakk>bval b x; (c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>1, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>1, x)))\n 3. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))\n 4. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "subgoal for x t p i ta ia xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n     Q ta = enat ia; bval b x;\n     (c\\<^sub>1, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n    \\<Longrightarrow> enat\n                       (\\<down>\\<^sub>t\n                         (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                      Q (\\<down>\\<^sub>s\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                      eSuc\n                       (enat (\\<down>\\<^sub>t (c\\<^sub>1, x)) +\n                        Q (\\<down>\\<^sub>s (c\\<^sub>1, x)))", "apply(simp only: IfTrue[THEN bigstepT_the_state])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n     Q ta = enat ia; bval b x;\n     (c\\<^sub>1, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n    \\<Longrightarrow> enat\n                       (\\<down>\\<^sub>t\n                         (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                      enat i =\n                      eSuc\n                       (enat (\\<down>\\<^sub>t (c\\<^sub>1, x)) +\n                        Q (\\<down>\\<^sub>s (c\\<^sub>1, x)))", "apply(simp only: IfTrue[THEN bigstepT_the_cost])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n     Q ta = enat ia; bval b x;\n     (c\\<^sub>1, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n    \\<Longrightarrow> enat (p + 1) + enat i =\n                      eSuc\n                       (enat (\\<down>\\<^sub>t (c\\<^sub>1, x)) +\n                        Q (\\<down>\\<^sub>s (c\\<^sub>1, x)))", "apply(simp only: bigstepT_the_cost bigstepT_the_state)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n     Q ta = enat ia; bval b x;\n     (c\\<^sub>1, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n    \\<Longrightarrow> enat (p + 1) + enat i = eSuc (enat p + enat i)", "by (simp add: eSuc_enat)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x t p i.\n       \\<lbrakk>bval b x; (c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>1, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>1, x)))\n 2. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))\n 3. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "apply(simp only: bigstepT_the_state bigstepT_the_cost)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x t p i.\n       \\<lbrakk>bval b x; (c\\<^sub>1, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> = eSuc (enat p + enat i)\n 2. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))\n 3. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "apply force"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))\n 2. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "apply(simp only: bigstepT_the_state bigstepT_the_cost)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc (enat p + enat i)\n 2. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "proof(goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc (enat p + enat i)\n 2. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "case (1 x t p i ta ia xa)"], ["proof (state)\nthis:\n  (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t\n  Q t = enat i\n  Q ta = enat ia\n  \\<not> bval b x\n  (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\n\ngoal (2 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc (enat p + enat i)\n 2. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "note f= IfFalse[THEN bigstepT_the_state, of b x c\\<^sub>2 xa ta \"Suc xa\" c\\<^sub>1, simplified, OF 1(4) 1(5)]"], ["proof (state)\nthis:\n  \\<down>\\<^sub>s (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x) = ta\n\ngoal (2 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc (enat p + enat i)\n 2. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "note f2= IfFalse[THEN bigstepT_the_cost, of b x c\\<^sub>2 xa ta \"Suc xa\" c\\<^sub>1, simplified, OF 1(4) 1(5)]"], ["proof (state)\nthis:\n  \\<down>\\<^sub>t (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x) = Suc xa\n\ngoal (2 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc (enat p + enat i)\n 2. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "note g= bigstep_det[OF 1(1) 1(5)]"], ["proof (state)\nthis:\n  p = xa \\<and> t = ta\n\ngoal (2 subgoals):\n 1. \\<And>x t p i ta ia xa.\n       \\<lbrakk>(c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t; Q t = enat i;\n        Q ta = enat ia; \\<not> bval b x;\n        (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\\<rbrakk>\n       \\<Longrightarrow> enat\n                          (\\<down>\\<^sub>t\n                            (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n                         Q (\\<down>\\<^sub>s\n                             (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n                         eSuc (enat p + enat i)\n 2. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n    Q (\\<down>\\<^sub>s (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n    eSuc (enat p + enat i)", "apply(simp only: f f2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc xa) + Q ta = eSuc (enat p + enat i)", "using 1 g"], ["proof (prove)\nusing this:\n  (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t\n  Q t = enat i\n  Q ta = enat ia\n  \\<not> bval b x\n  (c\\<^sub>2, x) \\<Rightarrow> xa \\<Down> ta\n  p = xa \\<and> t = ta\n\ngoal (1 subgoal):\n 1. enat (Suc xa) + Q ta = eSuc (enat p + enat i)", "by (simp add: eSuc_enat)"], ["proof (state)\nthis:\n  enat (\\<down>\\<^sub>t (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) +\n  Q (\\<down>\\<^sub>s (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, x)) =\n  eSuc (enat p + enat i)\n\ngoal (1 subgoal):\n 1. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "case 2"], ["proof (state)\nthis:\n  \\<not> bval b x_\n  (c\\<^sub>2, x_) \\<Rightarrow> p_ \\<Down> t_\n  Q t_ = enat i_\n  \\<forall>t.\n     (\\<forall>p.\n         \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                 x_) \\<Rightarrow> p \\<Down> t) \\<or>\n     Q t = \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>x t p i.\n       \\<lbrakk>\\<not> bval b x; (c\\<^sub>2, x) \\<Rightarrow> p \\<Down> t;\n        Q t = enat i;\n        \\<forall>t.\n           (\\<forall>p.\n               \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                       x) \\<Rightarrow> p \\<Down> t) \\<or>\n           Q t = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> =\n                         eSuc\n                          (enat (\\<down>\\<^sub>t (c\\<^sub>2, x)) +\n                           Q (\\<down>\\<^sub>s (c\\<^sub>2, x)))", "then"], ["proof (chain)\npicking this:\n  \\<not> bval b x_\n  (c\\<^sub>2, x_) \\<Rightarrow> p_ \\<Down> t_\n  Q t_ = enat i_\n  \\<forall>t.\n     (\\<forall>p.\n         \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                 x_) \\<Rightarrow> p \\<Down> t) \\<or>\n     Q t = \\<infinity>", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> bval b x_\n  (c\\<^sub>2, x_) \\<Rightarrow> p_ \\<Down> t_\n  Q t_ = enat i_\n  \\<forall>t.\n     (\\<forall>p.\n         \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                 x_) \\<Rightarrow> p \\<Down> t) \\<or>\n     Q t = \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<infinity> =\n    eSuc\n     (enat (\\<down>\\<^sub>t (c\\<^sub>2, x_)) +\n      Q (\\<down>\\<^sub>s (c\\<^sub>2, x_)))", "apply(simp only: bigstepT_the_state bigstepT_the_cost)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> bval b x_; (c\\<^sub>2, x_) \\<Rightarrow> p_ \\<Down> t_;\n     Q t_ = enat i_;\n     \\<forall>t.\n        (\\<forall>p.\n            \\<not> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                    x_) \\<Rightarrow> p \\<Down> t) \\<or>\n        Q t = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> \\<infinity> = eSuc (enat p_ + enat i_)", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<infinity> =\n  eSuc\n   (enat (\\<down>\\<^sub>t (c\\<^sub>2, x_)) +\n    Q (\\<down>\\<^sub>s (c\\<^sub>2, x_)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hoareQ_inf: \"\\<turnstile>\\<^sub>2\\<^sub>' {%s. \\<infinity>} c { Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c {Q}", "apply (induction c arbitrary: Q)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} SKIP {x}\n 2. \\<And>x1 x2 x.\n       \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} x1 ::= x2 {x}\n 3. \\<And>c1 c2 x.\n       \\<lbrakk>\\<And>x.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c1\n          {x};\n        \\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c2\n  {x}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                    \\<infinity>}\n                c1;; c2 {x}\n 4. \\<And>x1 c1 c2 x.\n       \\<lbrakk>\\<And>x.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c1\n          {x};\n        \\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c2\n  {x}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                    \\<infinity>}\n                IF x1 THEN c1 ELSE c2 {x}\n 5. \\<And>x1 c x.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c\n  {x}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} WHILE x1 DO c\n                                    {x}", "apply(auto intro: hoareQ.Skip hoareQ.Assign hoareQ.Seq hoareQ.conseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 x.\n       \\<lbrakk>\\<And>x.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c1\n          {x};\n        \\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c2\n  {x}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                    \\<infinity>}\n                IF x1 THEN c1 ELSE c2 {x}\n 2. \\<And>x1 c x.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c\n  {x}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} WHILE x1 DO c\n                                    {x}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x.\n                \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c1_\n       {x};\n     \\<And>x.\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c2_\n                                     {x}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>}\n             IF x1_ THEN c1_ ELSE c2_ {x_}", "apply(rule hoareQ.conseq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>x.\n                \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c1_\n       {x};\n     \\<And>x.\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c2_\n                                     {x}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {?P}\n             IF x1_ THEN c1_ ELSE c2_ {?Q}\n 2. \\<And>s.\n       \\<lbrakk>\\<And>x.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>}\n          c1_ {x};\n        \\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c2_\n  {x}\\<rbrakk>\n       \\<Longrightarrow> ?P s \\<le> enat ?k * \\<infinity>\n 3. \\<And>s.\n       \\<lbrakk>\\<And>x.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>}\n          c1_ {x};\n        \\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c2_\n  {x}\\<rbrakk>\n       \\<Longrightarrow> enat ?k * x_ s \\<le> ?Q s\n 4. \\<lbrakk>\\<And>x.\n                \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c1_\n       {x};\n     \\<And>x.\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c2_\n                                     {x}\\<rbrakk>\n    \\<Longrightarrow> 0 < ?k", "apply(rule hoareQ.If[where P=\"%s. \\<infinity>\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>x.\n                \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c1_\n       {x};\n     \\<And>x.\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c2_\n                                     {x}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                 \\<infinity> + \\<up> (bval x1_ s)}\n             c1_ {?Q}\n 2. \\<lbrakk>\\<And>x.\n                \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c1_\n       {x};\n     \\<And>x.\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c2_\n                                     {x}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                 \\<infinity> + \\<up> (\\<not> bval x1_ s)}\n             c2_ {?Q}\n 3. \\<And>s.\n       \\<lbrakk>\\<And>x.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>}\n          c1_ {x};\n        \\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c2_\n  {x}\\<rbrakk>\n       \\<Longrightarrow> eSuc \\<infinity> \\<le> enat ?k * \\<infinity>\n 4. \\<And>s.\n       \\<lbrakk>\\<And>x.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>}\n          c1_ {x};\n        \\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c2_\n  {x}\\<rbrakk>\n       \\<Longrightarrow> enat ?k * x_ s \\<le> ?Q s\n 5. \\<lbrakk>\\<And>x.\n                \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c1_\n       {x};\n     \\<And>x.\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c2_\n                                     {x}\\<rbrakk>\n    \\<Longrightarrow> 0 < ?k", "by(auto intro: hoareQ.If hoareQ.conseq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 c x.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c\n  {x}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} WHILE x1 DO c\n                                    {x}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n                                     {x}) \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} WHILE x1_ DO c_\n                                 {x_}", "apply(rule hoareQ.conseq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. (\\<And>x.\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n                                     {x}) \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2\\<^sub>' {?P} WHILE x1_ DO c_ {?Q}\n 2. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n  {x}) \\<Longrightarrow>\n       ?P s \\<le> enat ?k * \\<infinity>\n 3. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n  {x}) \\<Longrightarrow>\n       enat ?k * x_ s \\<le> ?Q s\n 4. (\\<And>x.\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n                                     {x}) \\<Longrightarrow>\n    0 < ?k", "apply(rule hoareQ.While[where I=\"%s. \\<infinity>\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. (\\<And>x.\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n                                     {x}) \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     \\<infinity> + \\<up> (bval x1_ s)}\n                                 c_ {\\<lambda>t. \\<infinity> + 1}\n 2. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n  {x}) \\<Longrightarrow>\n       \\<infinity> + 1 \\<le> enat ?k * \\<infinity>\n 3. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n  {x}) \\<Longrightarrow>\n       enat ?k * x_ s \\<le> \\<infinity> + \\<up> (\\<not> bval x1_ s)\n 4. (\\<And>x.\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n                                     {x}) \\<Longrightarrow>\n    0 < ?k", "apply(rule hoareQ.conseq)"], ["proof (prove)\ngoal (7 subgoals):\n 1. (\\<And>x.\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n                                     {x}) \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2\\<^sub>' {?P7} c_ {?Q7}\n 2. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n  {x}) \\<Longrightarrow>\n       ?P7 s \\<le> enat ?k7 * (\\<infinity> + \\<up> (bval x1_ s))\n 3. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n  {x}) \\<Longrightarrow>\n       enat ?k7 * (\\<infinity> + 1) \\<le> ?Q7 s\n 4. (\\<And>x.\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n                                     {x}) \\<Longrightarrow>\n    0 < ?k7\n 5. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n  {x}) \\<Longrightarrow>\n       \\<infinity> + 1 \\<le> enat ?k * \\<infinity>\n 6. \\<And>s.\n       (\\<And>x.\n           \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n  {x}) \\<Longrightarrow>\n       enat ?k * x_ s \\<le> \\<infinity> + \\<up> (\\<not> bval x1_ s)\n 7. (\\<And>x.\n        \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. \\<infinity>} c_\n                                     {x}) \\<Longrightarrow>\n    0 < ?k", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma assumes b: \"bval b s\"\n  shows wpQ_WhileTrue: \" wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s  + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "proof (cases \"\\<exists>t p. (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "case True"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "then"], ["proof (chain)\npicking this:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>", "obtain t p where w: \"(WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\" and q: \"Q t < \\<infinity>\""], ["proof (prove)\nusing this:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        \\<lbrakk>(WHILE b DO c, s) \\<Rightarrow> p \\<Down> t;\n         Q t < \\<infinity>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n  Q t < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "from b w"], ["proof (chain)\npicking this:\n  bval b s\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t", "obtain p1 p2 t1 where c: \"(c, s) \\<Rightarrow> p1 \\<Down> t1\" and w': \"(WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t\" and sum: \"1 + p1 + p2 = p\""], ["proof (prove)\nusing this:\n  bval b s\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n\ngoal (1 subgoal):\n 1. (\\<And>p1 t1 p2.\n        \\<lbrakk>(c, s) \\<Rightarrow> p1 \\<Down> t1;\n         (WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t;\n         1 + p1 + p2 = p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> p1 \\<Down> t1\n  (WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t\n  1 + p1 + p2 = p\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "have g: \"\\<exists>ta p. (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> ta \\<and> Q ta < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ta p.\n       (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> ta \\<and>\n       Q ta < \\<infinity>", "apply(rule exI[where x=\"t\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>", "apply(rule exI[where x=\"p2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t \\<and> Q t < \\<infinity>", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. (WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t\n 2. Q t < \\<infinity>", "apply fact+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>ta p.\n     (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> ta \\<and> Q ta < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "have h: \"\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> (if \\<exists>ta p. (WHILE b DO c, t) \\<Rightarrow> p \\<Down> ta \\<and> Q ta < \\<infinity> then enat (THE p. Ex (big_step_t (WHILE b DO c, t) p)) + Q (THE ta. \\<exists>p. (WHILE b DO c, t) \\<Rightarrow> p \\<Down> ta) else \\<infinity>) < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       (if \\<exists>ta p.\n              (WHILE b DO c, t) \\<Rightarrow> p \\<Down> ta \\<and>\n              Q ta < \\<infinity>\n        then enat (\\<down>\\<^sub>t (WHILE b DO c, t)) +\n             Q (\\<down>\\<^sub>s (WHILE b DO c, t))\n        else \\<infinity>)\n       < \\<infinity>", "apply(rule exI[where x=\"t1\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (c, s) \\<Rightarrow> p \\<Down> t1 \\<and>\n       (if \\<exists>ta p.\n              (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> ta \\<and>\n              Q ta < \\<infinity>\n        then enat (\\<down>\\<^sub>t (WHILE b DO c, t1)) +\n             Q (\\<down>\\<^sub>s (WHILE b DO c, t1))\n        else \\<infinity>)\n       < \\<infinity>", "apply(rule exI[where x=\"p1\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, s) \\<Rightarrow> p1 \\<Down> t1 \\<and>\n    (if \\<exists>ta p.\n           (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> ta \\<and>\n           Q ta < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, t1)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, t1))\n     else \\<infinity>)\n    < \\<infinity>", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. (c, s) \\<Rightarrow> p1 \\<Down> t1\n 2. (if \\<exists>ta p.\n           (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> ta \\<and>\n           Q ta < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, t1)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, t1))\n     else \\<infinity>)\n    < \\<infinity>", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>ta p.\n           (WHILE b DO c, t1) \\<Rightarrow> p \\<Down> ta \\<and>\n           Q ta < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, t1)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, t1))\n     else \\<infinity>)\n    < \\<infinity>", "apply(simp only: g if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (WHILE b DO c, t1)) +\n    Q (\\<down>\\<^sub>s (WHILE b DO c, t1))\n    < \\<infinity>", "using   bigstepT_the_state bigstepT_the_cost w' q"], ["proof (prove)\nusing this:\n  (?c, ?s) \\<Rightarrow> ?P \\<Down> ?T \\<Longrightarrow>\n  \\<down>\\<^sub>s (?c, ?s) = ?T\n  (?c, ?s) \\<Rightarrow> ?P \\<Down> ?T \\<Longrightarrow>\n  \\<down>\\<^sub>t (?c, ?s) = ?P\n  (WHILE b DO c, t1) \\<Rightarrow> p2 \\<Down> t\n  Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (WHILE b DO c, t1)) +\n    Q (\\<down>\\<^sub>s (WHILE b DO c, t1))\n    < \\<infinity>", "by(auto)"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n     (if \\<exists>ta p.\n            (WHILE b DO c, t) \\<Rightarrow> p \\<Down> ta \\<and>\n            Q ta < \\<infinity>\n      then enat (\\<down>\\<^sub>t (WHILE b DO c, t)) +\n           Q (\\<down>\\<^sub>s (WHILE b DO c, t))\n      else \\<infinity>)\n     < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "have \"wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1 = enat p + Q t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1 = enat p + Q t", "unfolding wpQ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           (if \\<exists>ta p.\n                  (WHILE b DO c, t) \\<Rightarrow> p \\<Down> ta \\<and>\n                  Q ta < \\<infinity>\n            then enat (\\<down>\\<^sub>t (WHILE b DO c, t)) +\n                 Q (\\<down>\\<^sub>s (WHILE b DO c, t))\n            else \\<infinity>)\n           < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          (if \\<exists>t p.\n                 (WHILE b DO c,\n                  \\<down>\\<^sub>s (c, s)) \\<Rightarrow> p \\<Down> t \\<and>\n                 Q t < \\<infinity>\n           then enat\n                 (\\<down>\\<^sub>t (WHILE b DO c, \\<down>\\<^sub>s (c, s))) +\n                Q (\\<down>\\<^sub>s (WHILE b DO c, \\<down>\\<^sub>s (c, s)))\n           else \\<infinity>)\n     else \\<infinity>) +\n    1 =\n    enat p + Q t", "apply(simp only: h if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (c, s)) +\n    (if \\<exists>t p.\n           (WHILE b DO c,\n            \\<down>\\<^sub>s (c, s)) \\<Rightarrow> p \\<Down> t \\<and>\n           Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, \\<down>\\<^sub>s (c, s))) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, \\<down>\\<^sub>s (c, s)))\n     else \\<infinity>) +\n    1 =\n    enat p + Q t", "apply(simp only: bigstepT_the_state[OF c] bigstepT_the_cost[OF c] g if_True bigstepT_the_state[OF w'] bigstepT_the_cost[OF w'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat p1 + (enat p2 + Q t) + 1 = enat p + Q t", "using sum"], ["proof (prove)\nusing this:\n  1 + p1 + p2 = p\n\ngoal (1 subgoal):\n 1. enat p1 + (enat p2 + Q t) + 1 = enat p + Q t", "by (metis One_nat_def ab_semigroup_add_class.add_ac(1) add.commute add.right_neutral eSuc_enat plus_1_eSuc(2) plus_enat_simps(1))"], ["proof (state)\nthis:\n  wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1 = enat p + Q t\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "also"], ["proof (state)\nthis:\n  wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1 = enat p + Q t\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "have \"\\<dots> = wp\\<^sub>Q (WHILE b DO c) Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat p + Q t = wp\\<^sub>Q (WHILE b DO c) Q s", "unfolding wpQ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat p + Q t =\n    (if \\<exists>t p.\n           (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, s))\n     else \\<infinity>)", "apply(simp only: True if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat p + Q t =\n    enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n    Q (\\<down>\\<^sub>s (WHILE b DO c, s))", "using bigstepT_the_state bigstepT_the_cost w"], ["proof (prove)\nusing this:\n  (?c, ?s) \\<Rightarrow> ?P \\<Down> ?T \\<Longrightarrow>\n  \\<down>\\<^sub>s (?c, ?s) = ?T\n  (?c, ?s) \\<Rightarrow> ?P \\<Down> ?T \\<Longrightarrow>\n  \\<down>\\<^sub>t (?c, ?s) = ?P\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n\ngoal (1 subgoal):\n 1. enat p + Q t =\n    enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n    Q (\\<down>\\<^sub>s (WHILE b DO c, s))", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  enat p + Q t = wp\\<^sub>Q (WHILE b DO c) Q s\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "finally"], ["proof (chain)\npicking this:\n  wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1 =\n  wp\\<^sub>Q (WHILE b DO c) Q s", "show ?thesis"], ["proof (prove)\nusing this:\n  wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1 =\n  wp\\<^sub>Q (WHILE b DO c) Q s\n\ngoal (1 subgoal):\n 1. wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "by simp"], ["proof (state)\nthis:\n  wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n  \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "case False"], ["proof (state)\nthis:\n  \\<nexists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "have \"wp\\<^sub>Q (WHILE b DO c) Q s = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>Q (WHILE b DO c) Q s = \\<infinity>", "unfolding wpQ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, s))\n     else \\<infinity>) =\n    \\<infinity>", "apply(simp only: False if_False)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  wp\\<^sub>Q (WHILE b DO c) Q s = \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "then"], ["proof (chain)\npicking this:\n  wp\\<^sub>Q (WHILE b DO c) Q s = \\<infinity>", "show ?thesis"], ["proof (prove)\nusing this:\n  wp\\<^sub>Q (WHILE b DO c) Q s = \\<infinity>\n\ngoal (1 subgoal):\n 1. wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "by auto"], ["proof (state)\nthis:\n  wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s + 1\n  \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assumes b: \"~ bval b s\"\n  shows wpQ_WhileFalse: \" Q s  + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "proof (cases \"\\<exists>t p. (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "case True"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "with b"], ["proof (chain)\npicking this:\n  \\<not> bval b s\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>", "obtain t p where w: \"(WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\" and \"Q t < \\<infinity>\""], ["proof (prove)\nusing this:\n  \\<not> bval b s\n  \\<exists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p t.\n        \\<lbrakk>(WHILE b DO c, s) \\<Rightarrow> p \\<Down> t;\n         Q t < \\<infinity>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n  Q t < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "with b"], ["proof (chain)\npicking this:\n  \\<not> bval b s\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n  Q t < \\<infinity>", "have c: \"s=t\" \"p=Suc 0\""], ["proof (prove)\nusing this:\n  \\<not> bval b s\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n  Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. s = t &&& p = Suc 0", "by auto"], ["proof (state)\nthis:\n  s = t\n  p = Suc 0\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "have \" wp\\<^sub>Q (WHILE b DO c) Q s =  Q s  + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>Q (WHILE b DO c) Q s = Q s + 1", "unfolding wpQ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, s))\n     else \\<infinity>) =\n    Q s + 1", "apply(simp only: True if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n    Q (\\<down>\\<^sub>s (WHILE b DO c, s)) =\n    Q s + 1", "using w c bigstepT_the_cost bigstepT_the_state"], ["proof (prove)\nusing this:\n  (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t\n  s = t\n  p = Suc 0\n  (?c, ?s) \\<Rightarrow> ?P \\<Down> ?T \\<Longrightarrow>\n  \\<down>\\<^sub>t (?c, ?s) = ?P\n  (?c, ?s) \\<Rightarrow> ?P \\<Down> ?T \\<Longrightarrow>\n  \\<down>\\<^sub>s (?c, ?s) = ?T\n\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n    Q (\\<down>\\<^sub>s (WHILE b DO c, s)) =\n    Q s + 1", "by(auto simp add: one_enat_def)"], ["proof (state)\nthis:\n  wp\\<^sub>Q (WHILE b DO c) Q s = Q s + 1\n\ngoal (2 subgoals):\n 1. \\<exists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "then"], ["proof (chain)\npicking this:\n  wp\\<^sub>Q (WHILE b DO c) Q s = Q s + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  wp\\<^sub>Q (WHILE b DO c) Q s = Q s + 1\n\ngoal (1 subgoal):\n 1. Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "by auto"], ["proof (state)\nthis:\n  Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "case False"], ["proof (state)\nthis:\n  \\<nexists>t p.\n     (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and> Q t < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "have \"wp\\<^sub>Q (WHILE b DO c) Q s = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp\\<^sub>Q (WHILE b DO c) Q s = \\<infinity>", "unfolding wpQ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (WHILE b DO c, s)) +\n          Q (\\<down>\\<^sub>s (WHILE b DO c, s))\n     else \\<infinity>) =\n    \\<infinity>", "apply(simp only: False if_False)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  wp\\<^sub>Q (WHILE b DO c) Q s = \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<nexists>t p.\n       (WHILE b DO c, s) \\<Rightarrow> p \\<Down> t \\<and>\n       Q t < \\<infinity> \\<Longrightarrow>\n    Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "then"], ["proof (chain)\npicking this:\n  wp\\<^sub>Q (WHILE b DO c) Q s = \\<infinity>", "show ?thesis"], ["proof (prove)\nusing this:\n  wp\\<^sub>Q (WHILE b DO c) Q s = \\<infinity>\n\ngoal (1 subgoal):\n 1. Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "by auto"], ["proof (state)\nthis:\n  Q s + 1 \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wpQ_is_pre: \"\\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c { Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c {Q}", "proof (induction c arbitrary: Q)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q SKIP Q} SKIP {Q}\n 2. \\<And>x1 x2 Q.\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (x1 ::= x2) Q} x1 ::= x2 {Q}\n 3. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (c1;; c2)\n                  Q}\n                c1;; c2 {Q}\n 4. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                  (IF x1 THEN c1 ELSE c2) Q}\n                IF x1 THEN c1 ELSE c2 {Q}\n 5. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c\n  {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE x1 DO c) Q}\n                                    WHILE x1 DO c {Q}", "case SKIP"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q SKIP Q} SKIP {Q}\n 2. \\<And>x1 x2 Q.\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (x1 ::= x2) Q} x1 ::= x2 {Q}\n 3. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (c1;; c2)\n                  Q}\n                c1;; c2 {Q}\n 4. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                  (IF x1 THEN c1 ELSE c2) Q}\n                IF x1 THEN c1 ELSE c2 {Q}\n 5. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c\n  {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE x1 DO c) Q}\n                                    WHILE x1 DO c {Q}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q SKIP Q} SKIP {Q}", "apply (auto intro: hoareQ.Skip)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q SKIP Q} SKIP {Q}\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 Q.\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (x1 ::= x2) Q} x1 ::= x2 {Q}\n 2. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (c1;; c2)\n                  Q}\n                c1;; c2 {Q}\n 3. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                  (IF x1 THEN c1 ELSE c2) Q}\n                IF x1 THEN c1 ELSE c2 {Q}\n 4. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c\n  {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE x1 DO c) Q}\n                                    WHILE x1 DO c {Q}", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 Q.\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (x1 ::= x2) Q} x1 ::= x2 {Q}\n 2. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (c1;; c2)\n                  Q}\n                c1;; c2 {Q}\n 3. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                  (IF x1 THEN c1 ELSE c2) Q}\n                IF x1 THEN c1 ELSE c2 {Q}\n 4. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c\n  {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE x1 DO c) Q}\n                                    WHILE x1 DO c {Q}", "case Assign"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 Q.\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (x1 ::= x2) Q} x1 ::= x2 {Q}\n 2. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (c1;; c2)\n                  Q}\n                c1;; c2 {Q}\n 3. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                  (IF x1 THEN c1 ELSE c2) Q}\n                IF x1 THEN c1 ELSE c2 {Q}\n 4. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c\n  {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE x1 DO c) Q}\n                                    WHILE x1 DO c {Q}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (x1_ ::= x2_) Q} x1_ ::= x2_\n                                 {Q}", "apply (auto intro:hoareQ.Assign)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (x1_ ::= x2_) Q} x1_ ::= x2_ {Q}\n\ngoal (3 subgoals):\n 1. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (c1;; c2)\n                  Q}\n                c1;; c2 {Q}\n 2. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                  (IF x1 THEN c1 ELSE c2) Q}\n                IF x1 THEN c1 ELSE c2 {Q}\n 3. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c\n  {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE x1 DO c) Q}\n                                    WHILE x1 DO c {Q}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (c1;; c2)\n                  Q}\n                c1;; c2 {Q}\n 2. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                  (IF x1 THEN c1 ELSE c2) Q}\n                IF x1 THEN c1 ELSE c2 {Q}\n 3. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c\n  {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE x1 DO c) Q}\n                                    WHILE x1 DO c {Q}", "case Seq"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1_ ?Q} c1_ {?Q}\n  \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2_ ?Q} c2_ {?Q}\n\ngoal (3 subgoals):\n 1. \\<And>c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (c1;; c2)\n                  Q}\n                c1;; c2 {Q}\n 2. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                  (IF x1 THEN c1 ELSE c2) Q}\n                IF x1 THEN c1 ELSE c2 {Q}\n 3. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c\n  {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE x1 DO c) Q}\n                                    WHILE x1 DO c {Q}", "thus ?case"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1_ ?Q} c1_ {?Q}\n  \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2_ ?Q} c2_ {?Q}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (c1_;; c2_) Q} c1_;; c2_ {Q}", "by (auto intro:hoareQ.Seq)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (c1_;; c2_) Q} c1_;; c2_ {Q}\n\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                  (IF x1 THEN c1 ELSE c2) Q}\n                IF x1 THEN c1 ELSE c2 {Q}\n 2. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c\n  {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE x1 DO c) Q}\n                                    WHILE x1 DO c {Q}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                  (IF x1 THEN c1 ELSE c2) Q}\n                IF x1 THEN c1 ELSE c2 {Q}\n 2. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c\n  {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE x1 DO c) Q}\n                                    WHILE x1 DO c {Q}", "case (If x1 c1 c2 Q)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 ?Q} c1 {?Q}\n  \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 ?Q} c2 {?Q}\n\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 Q.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                  (IF x1 THEN c1 ELSE c2) Q}\n                IF x1 THEN c1 ELSE c2 {Q}\n 2. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c\n  {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE x1 DO c) Q}\n                                    WHILE x1 DO c {Q}", "thus ?case"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 ?Q} c1 {?Q}\n  \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 ?Q} c2 {?Q}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (IF x1 THEN c1 ELSE c2) Q}\n                                 IF x1 THEN c1 ELSE c2 {Q}", "apply (auto intro!: hoareQ.If )"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n     \\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                 wp\\<^sub>Q (if bval x1 s then c1 else c2) Q s +\n                 \\<up> (bval x1 s)}\n             c1 {Q}\n 2. \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n     \\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                 wp\\<^sub>Q (if bval x1 s then c1 else c2) Q s +\n                 \\<up> (\\<not> bval x1 s)}\n             c2 {Q}", "apply(rule hoareQ.conseq)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n     \\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {?P5} c1 {?Q5}\n 2. \\<And>s.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> ?P5 s\n                         \\<le> enat ?k5 *\n                               (wp\\<^sub>Q (if bval x1 s then c1 else c2) Q\n                                 s +\n                                \\<up> (bval x1 s))\n 3. \\<And>s.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> enat ?k5 * Q s \\<le> ?Q5 s\n 4. \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n     \\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n    \\<Longrightarrow> 0 < ?k5\n 5. \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n     \\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                 wp\\<^sub>Q (if bval x1 s then c1 else c2) Q s +\n                 \\<up> (\\<not> bval x1 s)}\n             c2 {Q}", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n     \\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                 wp\\<^sub>Q (if bval x1 s then c1 else c2) Q s +\n                 \\<up> (\\<not> bval x1 s)}\n             c2 {Q}", "apply(rule hoareQ.conseq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n     \\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {?P51} c2 {?Q51}\n 2. \\<And>s.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> ?P51 s\n                         \\<le> enat ?k51 *\n                               (wp\\<^sub>Q (if bval x1 s then c1 else c2) Q\n                                 s +\n                                \\<up> (\\<not> bval x1 s))\n 3. \\<And>s.\n       \\<lbrakk>\\<And>Q.\n                   \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n        \\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n       \\<Longrightarrow> enat ?k51 * Q s \\<le> ?Q51 s\n 4. \\<lbrakk>\\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c1 Q} c1 {Q};\n     \\<And>Q. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c2 Q} c2 {Q}\\<rbrakk>\n    \\<Longrightarrow> 0 < ?k51", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (IF x1 THEN c1 ELSE c2) Q}\n                               IF x1 THEN c1 ELSE c2 {Q}\n\ngoal (1 subgoal):\n 1. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c\n  {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE x1 DO c) Q}\n                                    WHILE x1 DO c {Q}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c\n  {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE x1 DO c) Q}\n                                    WHILE x1 DO c {Q}", "case (While b c)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c ?Q} c {?Q}\n\ngoal (1 subgoal):\n 1. \\<And>x1 c Q.\n       (\\<And>Q.\n           \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c Q} c\n  {Q}) \\<Longrightarrow>\n       \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE x1 DO c) Q}\n                                    WHILE x1 DO c {Q}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE b DO c) Q} WHILE b DO c\n                                 {Q}", "apply(rule conseq[where k=1])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P} WHILE b DO c {?Q}\n 2. \\<And>s. ?P s \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s\n 3. \\<And>s. enat 1 * Q s \\<le> ?Q s\n 4. 0 < 1", "apply(rule hoareQ.While[where I=\"%s. (if bval b s then  wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s else Q s)\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     (if bval b s\nthen wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s else Q s) +\n                                     \\<up> (bval b s)}\n                                 c {\\<lambda>t.\n (if bval b t then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) t else Q t) +\n 1}\n 2. \\<And>s.\n       (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s\n 3. \\<And>s.\n       enat 1 * Q s\n       \\<le> (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)\n 4. 0 < 1", "apply(rule conseq[where k=1])"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P7} c {?Q7}\n 2. \\<And>s.\n       ?P7 s\n       \\<le> enat 1 *\n             ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n               else Q s) +\n              \\<up> (bval b s))\n 3. \\<And>s.\n       enat 1 *\n       ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n         else Q s) +\n        1)\n       \\<le> ?Q7 s\n 4. 0 < 1\n 5. \\<And>s.\n       (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s\n 6. \\<And>s.\n       enat 1 * Q s\n       \\<le> (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)\n 7. 0 < 1", "apply(rule While[of \"wp\\<^sub>Q (WHILE b DO c) Q\"])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>s.\n       wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n       \\<le> enat 1 *\n             ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n               else Q s) +\n              \\<up> (bval b s))\n 2. \\<And>s.\n       enat 1 *\n       ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n         else Q s) +\n        1)\n       \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 3. 0 < 1\n 4. \\<And>s.\n       (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s\n 5. \\<And>s.\n       enat 1 * Q s\n       \\<le> (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)\n 6. 0 < 1", "apply(case_tac \"bval b s\")"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>s.\n       bval b s \\<Longrightarrow>\n       wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n       \\<le> enat 1 *\n             ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n               else Q s) +\n              \\<up> (bval b s))\n 2. \\<And>s.\n       \\<not> bval b s \\<Longrightarrow>\n       wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n       \\<le> enat 1 *\n             ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n               else Q s) +\n              \\<up> (bval b s))\n 3. \\<And>s.\n       enat 1 *\n       ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n         else Q s) +\n        1)\n       \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 4. 0 < 1\n 5. \\<And>s.\n       (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s\n 6. \\<And>s.\n       enat 1 * Q s\n       \\<le> (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)\n 7. 0 < 1", "apply(simp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>s.\n       \\<not> bval b s \\<Longrightarrow>\n       wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n       \\<le> enat 1 *\n             ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n               else Q s) +\n              \\<up> (bval b s))\n 2. \\<And>s.\n       enat 1 *\n       ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n         else Q s) +\n        1)\n       \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 3. 0 < 1\n 4. \\<And>s.\n       (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s\n 5. \\<And>s.\n       enat 1 * Q s\n       \\<le> (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)\n 6. 0 < 1", "apply(simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s.\n       enat 1 *\n       ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n         else Q s) +\n        1)\n       \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. 0 < 1\n 3. \\<And>s.\n       (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s\n 4. \\<And>s.\n       enat 1 * Q s\n       \\<le> (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)\n 5. 0 < 1", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat 1 *\n    ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n      else Q s) +\n     1)\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "apply(cases \"bval b s\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    enat 1 *\n    ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n      else Q s) +\n     1)\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<not> bval b s \\<Longrightarrow>\n    enat 1 *\n    ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n      else Q s) +\n     1)\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "using wpQ_WhileTrue"], ["proof (prove)\nusing this:\n  bval ?b ?s \\<Longrightarrow>\n  wp\\<^sub>Q ?c (wp\\<^sub>Q (WHILE ?b DO ?c) ?Q) ?s + 1\n  \\<le> wp\\<^sub>Q (WHILE ?b DO ?c) ?Q ?s\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    enat 1 *\n    ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n      else Q s) +\n     1)\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<not> bval b s \\<Longrightarrow>\n    enat 1 *\n    ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n      else Q s) +\n     1)\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    enat 1 *\n    ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n      else Q s) +\n     1)\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "using wpQ_WhileFalse"], ["proof (prove)\nusing this:\n  \\<not> bval ?b ?s \\<Longrightarrow>\n  ?Q ?s + 1 \\<le> wp\\<^sub>Q (WHILE ?b DO ?c) ?Q ?s\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    enat 1 *\n    ((if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n      else Q s) +\n     1)\n    \\<le> wp\\<^sub>Q (WHILE b DO c) Q s", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (4 subgoals):\n 1. 0 < 1\n 2. \\<And>s.\n       (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s\n 3. \\<And>s.\n       enat 1 * Q s\n       \\<le> (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)\n 4. 0 < 1", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n        else Q s) +\n       1\n       \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<And>s.\n       enat 1 * Q s\n       \\<le> (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)\n 3. 0 < 1", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n     else Q s) +\n    1\n    \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s", "apply(cases \"bval b s\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n     else Q s) +\n    1\n    \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<not> bval b s \\<Longrightarrow>\n    (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n     else Q s) +\n    1\n    \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s", "using wpQ_WhileTrue"], ["proof (prove)\nusing this:\n  bval ?b ?s \\<Longrightarrow>\n  wp\\<^sub>Q ?c (wp\\<^sub>Q (WHILE ?b DO ?c) ?Q) ?s + 1\n  \\<le> wp\\<^sub>Q (WHILE ?b DO ?c) ?Q ?s\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow>\n    (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n     else Q s) +\n    1\n    \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s\n 2. \\<not> bval b s \\<Longrightarrow>\n    (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n     else Q s) +\n    1\n    \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n     else Q s) +\n    1\n    \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s", "using wpQ_WhileFalse"], ["proof (prove)\nusing this:\n  \\<not> bval ?b ?s \\<Longrightarrow>\n  ?Q ?s + 1 \\<le> wp\\<^sub>Q (WHILE ?b DO ?c) ?Q ?s\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow>\n    (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n     else Q s) +\n    1\n    \\<le> enat 1 * wp\\<^sub>Q (WHILE b DO c) Q s", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       enat 1 * Q s\n       \\<le> (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)\n 2. 0 < 1", "apply(case_tac \"bval b s\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       bval b s \\<Longrightarrow>\n       enat 1 * Q s\n       \\<le> (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)\n 2. \\<And>s.\n       \\<not> bval b s \\<Longrightarrow>\n       enat 1 * Q s\n       \\<le> (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)\n 3. 0 < 1", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<not> bval b s \\<Longrightarrow>\n       enat 1 * Q s\n       \\<le> (if bval b s then wp\\<^sub>Q c (wp\\<^sub>Q (WHILE b DO c) Q) s\n              else Q s) +\n             \\<up> (\\<not> bval b s)\n 2. 0 < 1", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 1", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q (WHILE b DO c) Q} WHILE b DO c\n                               {Q}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wpQ_is_pre': \"\\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c (%s. enat k * Q s )} c {(%s. enat k * Q s )}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c (\\<lambda>s. enat k * Q s)} c\n                                 {\\<lambda>s. enat k * Q s}", "using wpQ_is_pre"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q ?c ?Q} ?c {?Q}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q c (\\<lambda>s. enat k * Q s)} c\n                                 {\\<lambda>s. enat k * Q s}", "by blast"], ["", "lemma wpQ_is_weakestprePotential1: \"\\<Turnstile>\\<^sub>2\\<^sub>' {P}c{Q} \\<Longrightarrow> (\\<exists>k>0. \\<forall>s. wp\\<^sub>Q c (%s. enat k* Q s) s \\<le> enat k * P s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q} \\<Longrightarrow>\n    \\<exists>k>0.\n       \\<forall>s.\n          wp\\<^sub>Q c (\\<lambda>s. enat k * Q s) s \\<le> enat k * P s", "apply(auto simp: hoare2o_valid_def wpQ_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>0 < k;\n        \\<forall>s.\n           (\\<exists>i. P s = enat i) \\<longrightarrow>\n           (\\<exists>t p.\n               (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n               enat p + enat k * Q t \\<le> enat k * P s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               ((\\<exists>t.\n                                    (\\<exists>p.\n  (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n                                    (\\<exists>i.\n  enat k * Q t = enat i)) \\<longrightarrow>\n                                enat (\\<down>\\<^sub>t (c, s)) +\n                                enat k * Q (\\<down>\\<^sub>s (c, s))\n                                \\<le> enat k * P s) \\<and>\n                               ((\\<forall>t.\n                                    (\\<forall>p.\n  \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n                                    enat k * Q t =\n                                    \\<infinity>) \\<longrightarrow>\n                                enat k * P s = \\<infinity>)", "proof (goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>0 < k;\n        \\<forall>s.\n           (\\<exists>i. P s = enat i) \\<longrightarrow>\n           (\\<exists>t p.\n               (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n               enat p + enat k * Q t \\<le> enat k * P s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               ((\\<exists>t.\n                                    (\\<exists>p.\n  (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n                                    (\\<exists>i.\n  enat k * Q t = enat i)) \\<longrightarrow>\n                                enat (\\<down>\\<^sub>t (c, s)) +\n                                enat k * Q (\\<down>\\<^sub>s (c, s))\n                                \\<le> enat k * P s) \\<and>\n                               ((\\<forall>t.\n                                    (\\<forall>p.\n  \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n                                    enat k * Q t =\n                                    \\<infinity>) \\<longrightarrow>\n                                enat k * P s = \\<infinity>)", "case (1 k)"], ["proof (state)\nthis:\n  0 < k\n  \\<forall>s.\n     (\\<exists>i. P s = enat i) \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k * Q t \\<le> enat k * P s)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>0 < k;\n        \\<forall>s.\n           (\\<exists>i. P s = enat i) \\<longrightarrow>\n           (\\<exists>t p.\n               (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n               enat p + enat k * Q t \\<le> enat k * P s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k>0.\n                            \\<forall>s.\n                               ((\\<exists>t.\n                                    (\\<exists>p.\n  (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n                                    (\\<exists>i.\n  enat k * Q t = enat i)) \\<longrightarrow>\n                                enat (\\<down>\\<^sub>t (c, s)) +\n                                enat k * Q (\\<down>\\<^sub>s (c, s))\n                                \\<le> enat k * P s) \\<and>\n                               ((\\<forall>t.\n                                    (\\<forall>p.\n  \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n                                    enat k * Q t =\n                                    \\<infinity>) \\<longrightarrow>\n                                enat k * P s = \\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          ((\\<exists>t.\n               (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n               (\\<exists>i. enat k * Q t = enat i)) \\<longrightarrow>\n           enat (\\<down>\\<^sub>t (c, s)) +\n           enat k * Q (\\<down>\\<^sub>s (c, s))\n           \\<le> enat k * P s) \\<and>\n          ((\\<forall>t.\n               (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n               enat k * Q t = \\<infinity>) \\<longrightarrow>\n           enat k * P s = \\<infinity>)", "proof (rule exI[where x=k], safe)"], ["proof (state)\ngoal (3 subgoals):\n 1. 0 < k\n 2. \\<And>s t p i.\n       \\<lbrakk>(c, s) \\<Rightarrow> p \\<Down> t;\n        enat k * Q t = enat i\\<rbrakk>\n       \\<Longrightarrow> enat (\\<down>\\<^sub>t (c, s)) +\n                         enat k * Q (\\<down>\\<^sub>s (c, s))\n                         \\<le> enat k * P s\n 3. \\<And>s.\n       \\<forall>t.\n          (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n          enat k * Q t = \\<infinity> \\<Longrightarrow>\n       enat k * P s = \\<infinity>", "show \"0<k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k", "by fact"], ["proof (state)\nthis:\n  0 < k\n\ngoal (2 subgoals):\n 1. \\<And>s t p i.\n       \\<lbrakk>(c, s) \\<Rightarrow> p \\<Down> t;\n        enat k * Q t = enat i\\<rbrakk>\n       \\<Longrightarrow> enat (\\<down>\\<^sub>t (c, s)) +\n                         enat k * Q (\\<down>\\<^sub>s (c, s))\n                         \\<le> enat k * P s\n 2. \\<And>s.\n       \\<forall>t.\n          (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n          enat k * Q t = \\<infinity> \\<Longrightarrow>\n       enat k * P s = \\<infinity>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s t p i.\n       \\<lbrakk>(c, s) \\<Rightarrow> p \\<Down> t;\n        enat k * Q t = enat i\\<rbrakk>\n       \\<Longrightarrow> enat (\\<down>\\<^sub>t (c, s)) +\n                         enat k * Q (\\<down>\\<^sub>s (c, s))\n                         \\<le> enat k * P s\n 2. \\<And>s.\n       \\<forall>t.\n          (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n          enat k * Q t = \\<infinity> \\<Longrightarrow>\n       enat k * P s = \\<infinity>", "fix s t p i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s t p i.\n       \\<lbrakk>(c, s) \\<Rightarrow> p \\<Down> t;\n        enat k * Q t = enat i\\<rbrakk>\n       \\<Longrightarrow> enat (\\<down>\\<^sub>t (c, s)) +\n                         enat k * Q (\\<down>\\<^sub>s (c, s))\n                         \\<le> enat k * P s\n 2. \\<And>s.\n       \\<forall>t.\n          (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n          enat k * Q t = \\<infinity> \\<Longrightarrow>\n       enat k * P s = \\<infinity>", "assume \"(c, s) \\<Rightarrow> p \\<Down> t\" \"enat k * Q t = enat i\""], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> p \\<Down> t\n  enat k * Q t = enat i\n\ngoal (2 subgoals):\n 1. \\<And>s t p i.\n       \\<lbrakk>(c, s) \\<Rightarrow> p \\<Down> t;\n        enat k * Q t = enat i\\<rbrakk>\n       \\<Longrightarrow> enat (\\<down>\\<^sub>t (c, s)) +\n                         enat k * Q (\\<down>\\<^sub>s (c, s))\n                         \\<le> enat k * P s\n 2. \\<And>s.\n       \\<forall>t.\n          (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n          enat k * Q t = \\<infinity> \\<Longrightarrow>\n       enat k * P s = \\<infinity>", "show \"enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s)) \\<le> enat k * P s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n    \\<le> enat k * P s", "proof (cases \"P s < \\<infinity>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n    \\<le> enat k * P s\n 2. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n    \\<le> enat k * P s", "case True"], ["proof (state)\nthis:\n  P s < \\<infinity>\n\ngoal (2 subgoals):\n 1. P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n    \\<le> enat k * P s\n 2. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n    \\<le> enat k * P s", "with 1"], ["proof (chain)\npicking this:\n  0 < k\n  \\<forall>s.\n     (\\<exists>i. P s = enat i) \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k * Q t \\<le> enat k * P s)\n  P s < \\<infinity>", "obtain t p' where i: \"(c, s) \\<Rightarrow> p' \\<Down> t\" and ii: \"enat p' + enat k *  Q t \\<le> enat k * P s\""], ["proof (prove)\nusing this:\n  0 < k\n  \\<forall>s.\n     (\\<exists>i. P s = enat i) \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k * Q t \\<le> enat k * P s)\n  P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p' t.\n        \\<lbrakk>(c, s) \\<Rightarrow> p' \\<Down> t;\n         enat p' + enat k * Q t \\<le> enat k * P s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> p' \\<Down> t\n  enat p' + enat k * Q t \\<le> enat k * P s\n\ngoal (2 subgoals):\n 1. P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n    \\<le> enat k * P s\n 2. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n    \\<le> enat k * P s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n    \\<le> enat k * P s", "by(simp add: bigstepT_the_state[OF i] bigstepT_the_cost[OF i] ii)"], ["proof (state)\nthis:\n  enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n  \\<le> enat k * P s\n\ngoal (1 subgoal):\n 1. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n    \\<le> enat k * P s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n    \\<le> enat k * P s", "case False"], ["proof (state)\nthis:\n  \\<not> P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n    \\<le> enat k * P s", "then"], ["proof (chain)\npicking this:\n  \\<not> P s < \\<infinity>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n    \\<le> enat k * P s", "using 1"], ["proof (prove)\nusing this:\n  \\<not> P s < \\<infinity>\n  0 < k\n  \\<forall>s.\n     (\\<exists>i. P s = enat i) \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k * Q t \\<le> enat k * P s)\n\ngoal (1 subgoal):\n 1. enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n    \\<le> enat k * P s", "by auto"], ["proof (state)\nthis:\n  enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n  \\<le> enat k * P s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n  \\<le> enat k * P s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<forall>t.\n          (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n          enat k * Q t = \\<infinity> \\<Longrightarrow>\n       enat k * P s = \\<infinity>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<forall>t.\n          (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n          enat k * Q t = \\<infinity> \\<Longrightarrow>\n       enat k * P s = \\<infinity>", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<forall>t.\n          (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n          enat k * Q t = \\<infinity> \\<Longrightarrow>\n       enat k * P s = \\<infinity>", "assume \"\\<forall>t. (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or> enat k * Q t = \\<infinity>\""], ["proof (state)\nthis:\n  \\<forall>t.\n     (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n     enat k * Q t = \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<forall>t.\n          (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n          enat k * Q t = \\<infinity> \\<Longrightarrow>\n       enat k * P s = \\<infinity>", "then"], ["proof (chain)\npicking this:\n  \\<forall>t.\n     (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n     enat k * Q t = \\<infinity>", "show \"enat k * P s = \\<infinity>\""], ["proof (prove)\nusing this:\n  \\<forall>t.\n     (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n     enat k * Q t = \\<infinity>\n\ngoal (1 subgoal):\n 1. enat k * P s = \\<infinity>", "using 1"], ["proof (prove)\nusing this:\n  \\<forall>t.\n     (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n     enat k * Q t = \\<infinity>\n  0 < k\n  \\<forall>s.\n     (\\<exists>i. P s = enat i) \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k * Q t \\<le> enat k * P s)\n\ngoal (1 subgoal):\n 1. enat k * P s = \\<infinity>", "by force"], ["proof (state)\nthis:\n  enat k * P s = \\<infinity>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k>0.\n     \\<forall>s.\n        ((\\<exists>t.\n             (\\<exists>p. (c, s) \\<Rightarrow> p \\<Down> t) \\<and>\n             (\\<exists>i. enat k * Q t = enat i)) \\<longrightarrow>\n         enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n         \\<le> enat k * P s) \\<and>\n        ((\\<forall>t.\n             (\\<forall>p. \\<not> (c, s) \\<Rightarrow> p \\<Down> t) \\<or>\n             enat k * Q t = \\<infinity>) \\<longrightarrow>\n         enat k * P s = \\<infinity>)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem hoareQ_complete: \"\\<Turnstile>\\<^sub>2\\<^sub>' {P}c{Q} \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P}c{ Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q} \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q} \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "assume \"\\<Turnstile>\\<^sub>2\\<^sub>' {P}c{Q}\""], ["proof (state)\nthis:\n  \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q} \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "with wpQ_is_weakestprePotential1"], ["proof (chain)\npicking this:\n  \\<Turnstile>\\<^sub>2\\<^sub>' {?P} ?c {?Q} \\<Longrightarrow>\n  \\<exists>k>0.\n     \\<forall>s.\n        wp\\<^sub>Q ?c (\\<lambda>s. enat k * ?Q s) s \\<le> enat k * ?P s\n  \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "obtain k where \"k>0\" \n    and 1: \"\\<And>s. wp\\<^sub>Q c (\\<lambda>s. enat k * Q s) s \\<le> enat k * P s\""], ["proof (prove)\nusing this:\n  \\<Turnstile>\\<^sub>2\\<^sub>' {?P} ?c {?Q} \\<Longrightarrow>\n  \\<exists>k>0.\n     \\<forall>s.\n        wp\\<^sub>Q ?c (\\<lambda>s. enat k * ?Q s) s \\<le> enat k * ?P s\n  \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q}\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>0 < k;\n         \\<And>s.\n            wp\\<^sub>Q c (\\<lambda>s. enat k * Q s) s\n            \\<le> enat k * P s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  0 < k\n  wp\\<^sub>Q c (\\<lambda>s. enat k * Q s) ?s \\<le> enat k * P ?s\n\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q} \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "show \"\\<turnstile>\\<^sub>2\\<^sub>' {P}c{Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "apply(rule conseq[OF wpQ_is_pre'])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       wp\\<^sub>Q c (\\<lambda>s. enat ?k1 * ?Q1 s) s \\<le> enat ?k * P s\n 2. \\<And>s. enat ?k * Q s \\<le> enat ?k1 * ?Q1 s\n 3. 0 < ?k", "apply(fact 1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s. enat k * Q s \\<le> enat k * Q s\n 2. 0 < k", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k", "by fact"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem hoareQ_complete': \"\\<Turnstile>\\<^sub>2\\<^sub>' {P}c{Q} \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P}c{ Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q} \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "unfolding hoare2o_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          P s < \\<infinity> \\<longrightarrow>\n          (\\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat p + enat k * Q t \\<le> enat k * P s) \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          P s < \\<infinity> \\<longrightarrow>\n          (\\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat p + enat k * Q t \\<le> enat k * P s) \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "assume \"\\<exists>k>0. \\<forall>s. P s < \\<infinity> \\<longrightarrow> (\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat k * Q t \\<le> enat k * P s)\""], ["proof (state)\nthis:\n  \\<exists>k>0.\n     \\<forall>s.\n        P s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * Q t \\<le> enat k * P s)\n\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          P s < \\<infinity> \\<longrightarrow>\n          (\\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat p + enat k * Q t \\<le> enat k * P s) \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "then"], ["proof (chain)\npicking this:\n  \\<exists>k>0.\n     \\<forall>s.\n        P s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * Q t \\<le> enat k * P s)", "obtain k where f: \"\\<forall>s. P s < \\<infinity> \\<longrightarrow> (\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat p + enat k * Q t \\<le> enat k * P s)\" and k: \"k>0\""], ["proof (prove)\nusing this:\n  \\<exists>k>0.\n     \\<forall>s.\n        P s < \\<infinity> \\<longrightarrow>\n        (\\<exists>t p.\n            (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n            enat p + enat k * Q t \\<le> enat k * P s)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>\\<forall>s.\n                    P s < \\<infinity> \\<longrightarrow>\n                    (\\<exists>t p.\n                        (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n                        enat p + enat k * Q t \\<le> enat k * P s);\n         0 < k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>s.\n     P s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k * Q t \\<le> enat k * P s)\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>s.\n          P s < \\<infinity> \\<longrightarrow>\n          (\\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat p + enat k * Q t \\<le> enat k * P s) \\<Longrightarrow>\n    \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "show \"\\<turnstile>\\<^sub>2\\<^sub>' {P}c{ Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}", "apply(rule conseq[OF wpQ_is_pre', where Q'=Q, simplified, where k1=k and k=k and Q1=Q])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s. wp\\<^sub>Q c (\\<lambda>s. enat k * Q s) s \\<le> enat k * P s\n 2. \\<And>s. enat k * Q s \\<le> enat k * Q s\n 3. 0 < k", "unfolding  wpQ_def"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       (if \\<exists>t p.\n              (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n              enat k * Q t < \\<infinity>\n        then enat (\\<down>\\<^sub>t (c, s)) +\n             enat k * Q (\\<down>\\<^sub>s (c, s))\n        else \\<infinity>)\n       \\<le> enat k * P s\n 2. \\<And>s. enat k * Q s \\<le> enat k * Q s\n 3. 0 < k", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s", "proof(cases \"P s < \\<infinity>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. P s < \\<infinity> \\<Longrightarrow>\n    (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s\n 2. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s", "case True"], ["proof (state)\nthis:\n  P s < \\<infinity>\n\ngoal (2 subgoals):\n 1. P s < \\<infinity> \\<Longrightarrow>\n    (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s\n 2. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s", "with f"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     P s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k * Q t \\<le> enat k * P s)\n  P s < \\<infinity>", "obtain t p' where i: \"(c, s) \\<Rightarrow> p' \\<Down> t\" and ii: \"enat p' + enat k * Q t \\<le> enat k * P s\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     P s < \\<infinity> \\<longrightarrow>\n     (\\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n         enat p + enat k * Q t \\<le> enat k * P s)\n  P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>p' t.\n        \\<lbrakk>(c, s) \\<Rightarrow> p' \\<Down> t;\n         enat p' + enat k * Q t \\<le> enat k * P s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (c, s) \\<Rightarrow> p' \\<Down> t\n  enat p' + enat k * Q t \\<le> enat k * P s\n\ngoal (2 subgoals):\n 1. P s < \\<infinity> \\<Longrightarrow>\n    (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s\n 2. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s", "from ii k True"], ["proof (chain)\npicking this:\n  enat p' + enat k * Q t \\<le> enat k * P s\n  0 < k\n  P s < \\<infinity>", "have iii: \"enat k * Q t < \\<infinity>\""], ["proof (prove)\nusing this:\n  enat p' + enat k * Q t \\<le> enat k * P s\n  0 < k\n  P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. enat k * Q t < \\<infinity>", "using imult_is_infinity"], ["proof (prove)\nusing this:\n  enat p' + enat k * Q t \\<le> enat k * P s\n  0 < k\n  P s < \\<infinity>\n  (?a * ?b = \\<infinity>) =\n  (?a = \\<infinity> \\<and> ?b \\<noteq> 0 \\<or>\n   ?b = \\<infinity> \\<and> ?a \\<noteq> 0)\n\ngoal (1 subgoal):\n 1. enat k * Q t < \\<infinity>", "by fastforce"], ["proof (state)\nthis:\n  enat k * Q t < \\<infinity>\n\ngoal (2 subgoals):\n 1. P s < \\<infinity> \\<Longrightarrow>\n    (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s\n 2. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s", "have kla: \"\\<exists>t p. (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat k * Q t < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat k * Q t < \\<infinity>", "using iii i"], ["proof (prove)\nusing this:\n  enat k * Q t < \\<infinity>\n  (c, s) \\<Rightarrow> p' \\<Down> t\n\ngoal (1 subgoal):\n 1. \\<exists>t p.\n       (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat k * Q t < \\<infinity>", "by auto"], ["proof (state)\nthis:\n  \\<exists>t p.\n     (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat k * Q t < \\<infinity>\n\ngoal (2 subgoals):\n 1. P s < \\<infinity> \\<Longrightarrow>\n    (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s\n 2. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s", "unfolding bigstepT_the_state[OF i]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) + enat k * Q t else \\<infinity>)\n    \\<le> enat k * P s", "unfolding bigstepT_the_cost[OF i]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat p' + enat k * Q t else \\<infinity>)\n    \\<le> enat k * P s", "apply(simp only: kla)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if True then enat p' + enat k * Q t else \\<infinity>)\n    \\<le> enat k * P s", "using ii"], ["proof (prove)\nusing this:\n  enat p' + enat k * Q t \\<le> enat k * P s\n\ngoal (1 subgoal):\n 1. (if True then enat p' + enat k * Q t else \\<infinity>)\n    \\<le> enat k * P s", "by simp"], ["proof (state)\nthis:\n  (if \\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat k * Q t < \\<infinity>\n   then enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n   else \\<infinity>)\n  \\<le> enat k * P s\n\ngoal (1 subgoal):\n 1. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s", "case False"], ["proof (state)\nthis:\n  \\<not> P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<not> P s < \\<infinity> \\<Longrightarrow>\n    (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s", "then"], ["proof (chain)\npicking this:\n  \\<not> P s < \\<infinity>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> P s < \\<infinity>\n\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s", "using k"], ["proof (prove)\nusing this:\n  \\<not> P s < \\<infinity>\n  0 < k\n\ngoal (1 subgoal):\n 1. (if \\<exists>t p.\n           (c, s) \\<Rightarrow> p \\<Down> t \\<and>\n           enat k * Q t < \\<infinity>\n     then enat (\\<down>\\<^sub>t (c, s)) +\n          enat k * Q (\\<down>\\<^sub>s (c, s))\n     else \\<infinity>)\n    \\<le> enat k * P s", "by auto"], ["proof (state)\nthis:\n  (if \\<exists>t p.\n         (c, s) \\<Rightarrow> p \\<Down> t \\<and> enat k * Q t < \\<infinity>\n   then enat (\\<down>\\<^sub>t (c, s)) + enat k * Q (\\<down>\\<^sub>s (c, s))\n   else \\<infinity>)\n  \\<le> enat k * P s\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s. enat k * Q s \\<le> enat k * Q s\n 2. 0 < k", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat k * Q s_ \\<le> enat k * Q s_", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k", "using k"], ["proof (prove)\nusing this:\n  0 < k\n\ngoal (1 subgoal):\n 1. 0 < k", "by auto"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary hoareQ_sound_complete: \" \\<turnstile>\\<^sub>2\\<^sub>' {P}c{Q} \\<longleftrightarrow> \\<Turnstile>\\<^sub>2\\<^sub>' {P}c{ Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q}) =\n    (\\<Turnstile>\\<^sub>2\\<^sub>' {P} c {Q})", "by (metis hoareQ_sound hoareQ_complete)"], ["", "subsection \"Example\""], ["", "lemma fixes X::int assumes \"0 < X\" shows  \n Z: \"eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * (nat (X * X)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "from assms"], ["proof (chain)\npicking this:\n  0 < X", "have nn: \"0 \\<le> X\""], ["proof (prove)\nusing this:\n  0 < X\n\ngoal (1 subgoal):\n 1. 0 \\<le> X", "by auto"], ["proof (state)\nthis:\n  0 \\<le> X\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "from assms"], ["proof (chain)\npicking this:\n  0 < X", "have \"0 < nat X\""], ["proof (prove)\nusing this:\n  0 < X\n\ngoal (1 subgoal):\n 1. 0 < nat X", "by auto"], ["proof (state)\nthis:\n  0 < nat X\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "then"], ["proof (chain)\npicking this:\n  0 < nat X", "have \"0 < enat (nat X)\""], ["proof (prove)\nusing this:\n  0 < nat X\n\ngoal (1 subgoal):\n 1. 0 < enat (nat X)", "by (simp add: zero_enat_def)"], ["proof (state)\nthis:\n  0 < enat (nat X)\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "then"], ["proof (chain)\npicking this:\n  0 < enat (nat X)", "have A: \"eSuc 0 \\<le> enat (nat X)\""], ["proof (prove)\nusing this:\n  0 < enat (nat X)\n\ngoal (1 subgoal):\n 1. eSuc 0 \\<le> enat (nat X)", "using ileI1"], ["proof (prove)\nusing this:\n  0 < enat (nat X)\n  ?m < ?n \\<Longrightarrow> eSuc ?m \\<le> ?n\n\ngoal (1 subgoal):\n 1. eSuc 0 \\<le> enat (nat X)", "by blast"], ["proof (state)\nthis:\n  eSuc 0 \\<le> enat (nat X)\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "have \" (nat X) \\<le>  (nat (X*X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat X \\<le> nat (X * X)", "using nn nat_mult_distrib"], ["proof (prove)\nusing this:\n  0 \\<le> X\n  0 \\<le> ?z \\<Longrightarrow> nat (?z * ?z') = nat ?z * nat ?z'\n\ngoal (1 subgoal):\n 1. nat X \\<le> nat (X * X)", "by auto"], ["proof (state)\nthis:\n  nat X \\<le> nat (X * X)\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "then"], ["proof (chain)\npicking this:\n  nat X \\<le> nat (X * X)", "have D: \"enat (nat X) \\<le> enat (nat (X*X))\""], ["proof (prove)\nusing this:\n  nat X \\<le> nat (X * X)\n\ngoal (1 subgoal):\n 1. enat (nat X) \\<le> enat (nat (X * X))", "by auto"], ["proof (state)\nthis:\n  enat (nat X) \\<le> enat (nat (X * X))\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "have C: \"(enat (nat (2 * X) * nat (2 * X))) = 4* enat (nat (X * X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (nat (2 * X) * nat (2 * X)) = 4 * enat (nat (X * X))", "using nn nat_mult_distrib"], ["proof (prove)\nusing this:\n  0 \\<le> X\n  0 \\<le> ?z \\<Longrightarrow> nat (?z * ?z') = nat ?z * nat ?z'\n\ngoal (1 subgoal):\n 1. enat (nat (2 * X) * nat (2 * X)) = 4 * enat (nat (X * X))", "by (simp add: numeral_eq_enat)"], ["proof (state)\nthis:\n  enat (nat (2 * X) * nat (2 * X)) = 4 * enat (nat (X * X))\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "have \"eSuc (enat (nat (2 * X) * nat (2 * X)))\n    = eSuc 0 +  (enat (nat (2 * X) * nat (2 * X)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) =\n    eSuc 0 + enat (nat (2 * X) * nat (2 * X))", "using one_eSuc plus_1_eSuc(1)"], ["proof (prove)\nusing this:\n  1 = eSuc 0\n  1 + ?q = eSuc ?q\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) =\n    eSuc 0 + enat (nat (2 * X) * nat (2 * X))", "by auto"], ["proof (state)\nthis:\n  eSuc (enat (nat (2 * X) * nat (2 * X))) =\n  eSuc 0 + enat (nat (2 * X) * nat (2 * X))\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "also"], ["proof (state)\nthis:\n  eSuc (enat (nat (2 * X) * nat (2 * X))) =\n  eSuc 0 + enat (nat (2 * X) * nat (2 * X))\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "have \"\\<dots> \\<le> enat (nat X) +  (enat (nat (2 * X) * nat (2 * X)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc 0 + enat (nat (2 * X) * nat (2 * X))\n    \\<le> enat (nat X) + enat (nat (2 * X) * nat (2 * X))", "using A  add_right_mono"], ["proof (prove)\nusing this:\n  eSuc 0 \\<le> enat (nat X)\n  ?a \\<le> ?b \\<Longrightarrow> ?a + ?c \\<le> ?b + ?c\n\ngoal (1 subgoal):\n 1. eSuc 0 + enat (nat (2 * X) * nat (2 * X))\n    \\<le> enat (nat X) + enat (nat (2 * X) * nat (2 * X))", "by blast"], ["proof (state)\nthis:\n  eSuc 0 + enat (nat (2 * X) * nat (2 * X))\n  \\<le> enat (nat X) + enat (nat (2 * X) * nat (2 * X))\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "also"], ["proof (state)\nthis:\n  eSuc 0 + enat (nat (2 * X) * nat (2 * X))\n  \\<le> enat (nat X) + enat (nat (2 * X) * nat (2 * X))\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "have \"\\<dots> \\<le> enat (nat X) + 4* enat (nat (X * X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (nat X) + enat (nat (2 * X) * nat (2 * X))\n    \\<le> enat (nat X) + 4 * enat (nat (X * X))", "using C"], ["proof (prove)\nusing this:\n  enat (nat (2 * X) * nat (2 * X)) = 4 * enat (nat (X * X))\n\ngoal (1 subgoal):\n 1. enat (nat X) + enat (nat (2 * X) * nat (2 * X))\n    \\<le> enat (nat X) + 4 * enat (nat (X * X))", "by auto"], ["proof (state)\nthis:\n  enat (nat X) + enat (nat (2 * X) * nat (2 * X))\n  \\<le> enat (nat X) + 4 * enat (nat (X * X))\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "also"], ["proof (state)\nthis:\n  enat (nat X) + enat (nat (2 * X) * nat (2 * X))\n  \\<le> enat (nat X) + 4 * enat (nat (X * X))\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "have \"\\<dots> \\<le> enat (nat (X * X)) + 4* enat (nat (X * X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (nat X) + 4 * enat (nat (X * X))\n    \\<le> enat (nat (X * X)) + 4 * enat (nat (X * X))", "using D"], ["proof (prove)\nusing this:\n  enat (nat X) \\<le> enat (nat (X * X))\n\ngoal (1 subgoal):\n 1. enat (nat X) + 4 * enat (nat (X * X))\n    \\<le> enat (nat (X * X)) + 4 * enat (nat (X * X))", "by auto"], ["proof (state)\nthis:\n  enat (nat X) + 4 * enat (nat (X * X))\n  \\<le> enat (nat (X * X)) + 4 * enat (nat (X * X))\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "also"], ["proof (state)\nthis:\n  enat (nat X) + 4 * enat (nat (X * X))\n  \\<le> enat (nat (X * X)) + 4 * enat (nat (X * X))\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "have \"\\<dots> = 5* enat (nat (X * X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (nat (X * X)) + 4 * enat (nat (X * X)) = 5 * enat (nat (X * X))", "by (metis eSuc_numeral mult_eSuc semiring_norm(5))"], ["proof (state)\nthis:\n  enat (nat (X * X)) + 4 * enat (nat (X * X)) = 5 * enat (nat (X * X))\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "also"], ["proof (state)\nthis:\n  enat (nat (X * X)) + 4 * enat (nat (X * X)) = 5 * enat (nat (X * X))\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "have \"\\<dots> =  enat ( 5* nat (X * X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 * enat (nat (X * X)) = enat (5 * nat (X * X))", "by (simp add: numeral_eq_enat)"], ["proof (state)\nthis:\n  5 * enat (nat (X * X)) = enat (5 * nat (X * X))\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "finally"], ["proof (chain)\npicking this:\n  eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "show ?thesis"], ["proof (prove)\nusing this:\n  eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))\n\ngoal (1 subgoal):\n 1. eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))", "."], ["proof (state)\nthis:\n  eSuc (enat (nat (2 * X) * nat (2 * X))) \\<le> enat (5 * nat (X * X))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakenpre: \"\\<lbrakk> \\<turnstile>\\<^sub>2\\<^sub>' {P}c{Q} ;   (\\<forall>s. P s \\<le>  P' s)  \\<rbrakk> \\<Longrightarrow>\n           \\<turnstile>\\<^sub>2\\<^sub>' {P'}c{ Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n     \\<forall>s. P s \\<le> P' s\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P'} c {Q}", "using conseq[where Q'=Q and k=1]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {?P} ?c {?Q};\n   \\<And>s. ?P s \\<le> enat 1 * ?P' s; \\<And>s. enat 1 * Q s \\<le> ?Q s;\n   0 < 1\\<rbrakk>\n  \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {?P'} ?c {Q}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile>\\<^sub>2\\<^sub>' {P} c {Q};\n     \\<forall>s. P s \\<le> P' s\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile>\\<^sub>2\\<^sub>' {P'} c {Q}", "by auto"], ["", "lemma whileDecr: \"\\<turnstile>\\<^sub>2\\<^sub>' { %s. enat (nat (s ''x'')) + 1} WHILE (Less (N 0) (V ''x'')) DO (SKIP;; SKIP;; ''x'' ::= Plus (V ''x'') (N (-1))) { %s. enat 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (nat (s ''x'')) + 1}\n                                 WHILE Less (N 0) (V ''x'')\n                                 DO (SKIP;; SKIP;;\n                                     ''x'' ::= Plus (V ''x'') (N (- 1)))\n                                 {\\<lambda>s. enat 0}", "apply(rule conseq[where k=4])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P}\n                                 WHILE Less (N 0) (V ''x'')\n                                 DO (SKIP;; SKIP;;\n                                     ''x'' ::= Plus (V ''x'') (N (- 1)))\n                                 {?Q}\n 2. \\<And>s. ?P s \\<le> enat 4 * (enat (nat (s ''x'')) + 1)\n 3. \\<And>s. enat 4 * enat 0 \\<le> ?Q s\n 4. 0 < 4", "apply(rule While[where I=\"%s. enat 4 * (enat (nat (s ''x'')))\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat 4 * enat (nat (s ''x'')) +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 SKIP;; SKIP;;\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 4 * enat (nat (t ''x'')) + 1}\n 2. \\<And>s.\n       enat 4 * enat (nat (s ''x'')) + 1\n       \\<le> enat 4 * (enat (nat (s ''x'')) + 1)\n 3. \\<And>s.\n       enat 4 * enat 0\n       \\<le> enat 4 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. 0 < 4", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s.\n       enat 4 * enat (nat (s ''x'')) + 1\n       \\<le> enat 4 * (enat (nat (s ''x'')) + 1)\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat 4 * enat (nat (s ''x'')) +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 SKIP;; SKIP;;\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 4 * enat (nat (t ''x'')) + 1}\n 3. \\<And>s.\n       enat 4 * enat 0\n       \\<le> enat 4 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. 0 < 4", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat 4 * enat (nat (s ''x'')) + 1\n    \\<le> enat 4 * (enat (nat (s ''x'')) + 1)", "apply(simp only: one_enat_def plus_enat_simps times_enat_simps enat_ord_code(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. 4 * nat (s ''x'') + 1 \\<le> 4 * (nat (s ''x'') + 1)", "by presburger"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat 4 * enat (nat (s ''x'')) +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 SKIP;; SKIP;;\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 4 * enat (nat (t ''x'')) + 1}\n 2. \\<And>s.\n       enat 4 * enat 0\n       \\<le> enat 4 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 3. 0 < 4", "apply(rule Seq[where P\\<^sub>2=\"wp\\<^sub>Q (''x'' ::= Plus (V ''x'') (N (-1))) (\\<lambda>t. enat 4 * enat (nat (t ''x'')) + 1)\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat 4 * enat (nat (s ''x'')) +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 SKIP;; SKIP\n                                 {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 4 * enat (nat (t ''x'')) + 1)}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 4 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 4 * enat (nat (t ''x'')) + 1}\n 3. \\<And>s.\n       enat 4 * enat 0\n       \\<le> enat 4 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. 0 < 4", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (4 * nat (s ''x'')) +\n                                     \\<up> (0 < s ''x'')}\n                                 SKIP;; SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (4 * nat (s ''x'' - 1)) + 1)}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 4 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 4 * enat (nat (t ''x'')) + 1}\n 3. \\<And>s.\n       enat 4 * enat 0\n       \\<le> enat 4 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. 0 < 4", "apply(rule Seq[where P\\<^sub>2=\"wp\\<^sub>Q (SKIP) (\\<lambda>s. eSuc (enat (4 * nat (s ''x'' - 1)) + 1))\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (4 * nat (s ''x'')) +\n                                     \\<up> (0 < s ''x'')}\n                                 SKIP\n                                 {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (4 * nat (s ''x'' - 1)) + 1))}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (4 * nat (s ''x'' - 1)) + 1))}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (4 * nat (s ''x'' - 1)) + 1)}\n 3. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 4 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 4 * enat (nat (t ''x'')) + 1}\n 4. \\<And>s.\n       enat 4 * enat 0\n       \\<le> enat 4 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. 0 < 4", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (4 * nat (s ''x'')) +\n                                     \\<up> (0 < s ''x'')}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(eSuc (enat (4 * nat (s ''x'' - 1)) + 1))}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (4 * nat (s ''x'' - 1)) + 1))}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (4 * nat (s ''x'' - 1)) + 1)}\n 3. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 4 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 4 * enat (nat (t ''x'')) + 1}\n 4. \\<And>s.\n       enat 4 * enat 0\n       \\<le> enat 4 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. 0 < 4", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (4 * nat (s ''x'')) +\n                                     \\<up> (0 < s ''x'')}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(eSuc (enat (4 * nat (s ''x'' - 1)) + 1))}", "apply(rule weakenpre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P} SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(eSuc (enat (4 * nat (s ''x'' - 1)) + 1))}\n 2. \\<forall>s. ?P s \\<le> enat (4 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(rule Skip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (eSuc (eSuc (enat (4 * nat (s ''x'' - 1)) + 1)))\n       \\<le> enat (4 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       eSuc (eSuc (eSuc (enat (4 * nat (s ''x'' - 1)) + 1)))\n       \\<le> enat (4 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. eSuc (eSuc (eSuc (enat (4 * nat (s ''x'' - 1)) + 1)))\n    \\<le> enat (4 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(cases \"s ''x'' > 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (eSuc (enat (4 * nat (s ''x'' - 1)) + 1)))\n    \\<le> enat (4 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (eSuc (enat (4 * nat (s ''x'' - 1)) + 1)))\n    \\<le> enat (4 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    eSuc (eSuc (eSuc (enat (4 * nat (s ''x'' - 1)) + 1)))\n    \\<le> enat (4 * nat (s ''x''))", "apply(simp only: one_enat_def plus_enat_simps times_enat_simps enat_ord_code(1) eSuc_enat)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (4 * nat (s ''x'' - 1)) + 1))}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (4 * nat (s ''x'' - 1)) + 1)}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 4 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 4 * enat (nat (t ''x'')) + 1}\n 3. \\<And>s.\n       enat 4 * enat 0\n       \\<le> enat 4 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. 0 < 4", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (4 * nat (s ''x'' - 1)) + 1))}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (4 * nat (s ''x'' - 1)) + 1)}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     eSuc\n(eSuc (enat (4 * nat (s ''x'' - 1)) + 1))}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (4 * nat (s ''x'' - 1)) + 1)}", "apply(rule Skip)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 4 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 4 * enat (nat (t ''x'')) + 1}\n 2. \\<And>s.\n       enat 4 * enat 0\n       \\<le> enat 4 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 3. 0 < 4", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 4 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 4 * enat (nat (t ''x'')) + 1}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     eSuc\n(enat (4 * nat (s ''x'' - 1)) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t. enat (4 * nat (t ''x'')) + 1}", "apply(rule weakenpre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P2} ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t. enat (4 * nat (t ''x'')) + 1}\n 2. \\<forall>s. ?P2 s \\<le> eSuc (enat (4 * nat (s ''x'' - 1)) + 1)", "apply(rule Assign)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (enat (4 * nat ((s[Plus (V ''x'') (N (- 1))/''x'']) ''x'')) + 1)\n       \\<le> eSuc (enat (4 * nat (s ''x'' - 1)) + 1)", "by simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       enat 4 * enat 0\n       \\<le> enat 4 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 2. 0 < 4", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       enat 0 \\<le> enat (4 * nat (s ''x'')) + \\<up> (\\<not> 0 < s ''x'')\n 2. 0 < 4", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat 0 \\<le> enat (4 * nat (s ''x'')) + \\<up> (\\<not> 0 < s ''x'')", "apply(cases \"s ''x'' > 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    enat 0 \\<le> enat (4 * nat (s ''x'')) + \\<up> (\\<not> 0 < s ''x'')\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    enat 0 \\<le> enat (4 * nat (s ''x'')) + \\<up> (\\<not> 0 < s ''x'')", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 4", "by simp"], ["", "lemma whileDecrIf: \"\\<turnstile>\\<^sub>2\\<^sub>' { %s. enat (nat (s ''x'')) + 1} WHILE (Less (N 0) (V ''x'')) DO ( (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP );; ''x'' ::= Plus (V ''x'') (N (-1))) { %s. enat 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (nat (s ''x'')) + 1}\n                                 WHILE Less (N 0) (V ''x'')\n                                 DO (IF Less (N 0) (V ''z'') THEN SKIP;;\n                                     SKIP ELSE SKIP;;\n                                     ''x'' ::= Plus (V ''x'') (N (- 1)))\n                                 {\\<lambda>s. enat 0}", "apply(rule conseq[OF While, where k=6 and I1=\"%s. enat 6 * (enat (nat (s ''x'')))\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat 6 * enat (nat (s ''x'')) +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 IF Less (N 0) (V ''z'') THEN SKIP;; SKIP\n                                 ELSE SKIP;;\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 2. \\<And>s.\n       enat 6 * enat (nat (s ''x'')) + 1\n       \\<le> enat 6 * (enat (nat (s ''x'')) + 1)\n 3. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. 0 < 6", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s.\n       enat 6 * enat (nat (s ''x'')) + 1\n       \\<le> enat 6 * (enat (nat (s ''x'')) + 1)\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat 6 * enat (nat (s ''x'')) +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 IF Less (N 0) (V ''z'') THEN SKIP;; SKIP\n                                 ELSE SKIP;;\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 3. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. 0 < 6", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat 6 * enat (nat (s ''x'')) + 1\n    \\<le> enat 6 * (enat (nat (s ''x'')) + 1)", "apply(simp only: one_enat_def plus_enat_simps times_enat_simps enat_ord_code(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. 6 * nat (s ''x'') + 1 \\<le> 6 * (nat (s ''x'') + 1)", "by presburger"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat 6 * enat (nat (s ''x'')) +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 IF Less (N 0) (V ''z'') THEN SKIP;; SKIP\n                                 ELSE SKIP;;\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 2. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 3. 0 < 6", "apply(rule Seq[where P\\<^sub>2=\"wp\\<^sub>Q (''x'' ::= Plus (V ''x'') (N (-1))) (\\<lambda>t. enat 6 * enat (nat (t ''x'')) + 1)\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat 6 * enat (nat (s ''x'')) +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 IF Less (N 0) (V ''z'') THEN SKIP;; SKIP\n                                 ELSE SKIP\n                                 {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 3. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. 0 < 6", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (6 * nat (s ''x'')) +\n                                     \\<up> (0 < s ''x'')}\n                                 IF Less (N 0) (V ''z'') THEN SKIP;; SKIP\n                                 ELSE SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 3. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. 0 < 6", "apply(rule weakenpre)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P9}\n                                 IF Less (N 0) (V ''z'') THEN SKIP;; SKIP\n                                 ELSE SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n 2. \\<forall>s. ?P9 s \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 3. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 4. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. 0 < 6", "apply(rule If[where P=\"wp\\<^sub>Q (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP ) (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1))\"])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     wp\\<^sub>Q\n(IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n(\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s +\n                                     \\<up> (bval (Less (N 0) (V ''z'')) s)}\n                                 SKIP;; SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     wp\\<^sub>Q\n(IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n(\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s +\n                                     \\<up>\n(\\<not> bval (Less (N 0) (V ''z'')) s)}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n 3. \\<forall>s.\n       eSuc\n        (wp\\<^sub>Q (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n          (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s)\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 4. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 5. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 6. 0 < 6", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     wp\\<^sub>Q\n(IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n(\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s +\n                                     \\<up> (bval (Less (N 0) (V ''z'')) s)}\n                                 SKIP;; SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     eSuc\n(wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n  (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n                                     \\<up> (0 < s ''z'')}\n                                 SKIP;; SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "apply(rule Seq[where P\\<^sub>2=\"wp\\<^sub>Q (SKIP) (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1))\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     eSuc\n(wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n  (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n                                     \\<up> (0 < s ''z'')}\n                                 SKIP\n                                 {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (6 * nat (s ''x'' - 1)) + 1))}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (6 * nat (s ''x'' - 1)) + 1))}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     eSuc\n(wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n  (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n                                     \\<up> (0 < s ''z'')}\n                                 SKIP\n                                 {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (6 * nat (s ''x'' - 1)) + 1))}", "apply(rule weakenpre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P} SKIP\n                                 {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (6 * nat (s ''x'' - 1)) + 1))}\n 2. \\<forall>s.\n       ?P s\n       \\<le> eSuc\n              (wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n                (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n             \\<up> (0 < s ''z'')", "apply(rule Skip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc\n        (wp\\<^sub>Q SKIP\n          (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s)\n       \\<le> eSuc\n              (wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n                (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n             \\<up> (0 < s ''z'')", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (6 * nat (s ''x'' - 1)) + 1))}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (6 * nat (s ''x'' - 1)) + 1))}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "apply(rule weakenpre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P} SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n 2. \\<forall>s.\n       ?P s\n       \\<le> wp\\<^sub>Q SKIP\n              (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s", "apply(rule Skip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))\n       \\<le> wp\\<^sub>Q SKIP\n              (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     wp\\<^sub>Q\n(IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n(\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s +\n                                     \\<up>\n(\\<not> bval (Less (N 0) (V ''z'')) s)}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n 2. \\<forall>s.\n       eSuc\n        (wp\\<^sub>Q (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n          (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s)\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 3. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 4. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. 0 < 6", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     wp\\<^sub>Q\n(IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n(\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s +\n                                     \\<up>\n(\\<not> bval (Less (N 0) (V ''z'')) s)}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     eSuc\n(wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n  (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n                                     \\<up> (\\<not> 0 < s ''z'')}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     eSuc\n(wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n  (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n                                     \\<up> (\\<not> 0 < s ''z'')}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "apply(rule weakenpre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P} SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n 2. \\<forall>s.\n       ?P s\n       \\<le> eSuc\n              (wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n                (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n             \\<up> (\\<not> 0 < s ''z'')", "apply(rule Skip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))\n       \\<le> eSuc\n              (wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n                (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n             \\<up> (\\<not> 0 < s ''z'')", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<forall>s.\n       eSuc\n        (wp\\<^sub>Q (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n          (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s)\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 3. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. 0 < 6", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc\n        (wp\\<^sub>Q (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n          (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s)\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       0 < s ''z'' \\<Longrightarrow>\n       eSuc (eSuc (eSuc (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1)))))\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<And>s.\n       \\<not> 0 < s ''z'' \\<Longrightarrow>\n       eSuc (eSuc (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))))\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < s ''z'' \\<Longrightarrow>\n    eSuc (eSuc (eSuc (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1)))))\n    \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(cases \"s ''x'' > 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < s ''z''; 0 < s ''x''\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc\n                           (eSuc\n                             (eSuc (enat (6 * nat (s ''x'' - 1)) + 1)))))\n                      \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<lbrakk>0 < s ''z''; \\<not> 0 < s ''x''\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc\n                           (eSuc\n                             (eSuc (enat (6 * nat (s ''x'' - 1)) + 1)))))\n                      \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < s ''z''; 0 < s ''x''\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc\n                           (eSuc\n                             (eSuc (enat (6 * nat (s ''x'' - 1)) + 1)))))\n                      \\<le> enat (6 * nat (s ''x''))", "apply(simp only: one_enat_def plus_enat_simps times_enat_simps enat_ord_code(1) eSuc_enat)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<not> 0 < s ''z'' \\<Longrightarrow>\n       eSuc (eSuc (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))))\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> 0 < s ''z'' \\<Longrightarrow>\n    eSuc (eSuc (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))))\n    \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(cases \"s ''x'' > 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> 0 < s ''z''; 0 < s ''x''\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))))\n                      \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<lbrakk>\\<not> 0 < s ''z''; \\<not> 0 < s ''x''\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))))\n                      \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> 0 < s ''z''; 0 < s ''x''\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))))\n                      \\<le> enat (6 * nat (s ''x''))", "apply(simp only: one_enat_def plus_enat_simps times_enat_simps enat_ord_code(1) eSuc_enat)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 2. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 3. 0 < 6", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t. enat (6 * nat (t ''x'')) + 1}", "apply(rule weakenpre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P2} ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t. enat (6 * nat (t ''x'')) + 1}\n 2. \\<forall>s. ?P2 s \\<le> eSuc (enat (6 * nat (s ''x'' - 1)) + 1)", "apply(rule Assign)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (enat (6 * nat ((s[Plus (V ''x'') (N (- 1))/''x'']) ''x'')) + 1)\n       \\<le> eSuc (enat (6 * nat (s ''x'' - 1)) + 1)", "by simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 2. 0 < 6", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       enat 0 \\<le> enat (6 * nat (s ''x'')) + \\<up> (\\<not> 0 < s ''x'')\n 2. 0 < 6", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat 0 \\<le> enat (6 * nat (s ''x'')) + \\<up> (\\<not> 0 < s ''x'')", "apply(cases \"s ''x'' > 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    enat 0 \\<le> enat (6 * nat (s ''x'')) + \\<up> (\\<not> 0 < s ''x'')\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    enat 0 \\<le> enat (6 * nat (s ''x'')) + \\<up> (\\<not> 0 < s ''x'')", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 6", "by simp"], ["", "lemma whileDecrIf2: \"\\<turnstile>\\<^sub>2\\<^sub>' { %s. enat (nat (s ''x'')) + 1} WHILE (Less (N 0) (V ''x'')) DO ( (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP );; ''x'' ::= Plus (V ''x'') (N (-1))) { %s. enat 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s. enat (nat (s ''x'')) + 1}\n                                 WHILE Less (N 0) (V ''x'')\n                                 DO (IF Less (N 0) (V ''z'') THEN SKIP;;\n                                     SKIP ELSE SKIP;;\n                                     ''x'' ::= Plus (V ''x'') (N (- 1)))\n                                 {\\<lambda>s. enat 0}", "apply(rule conseq[OF While, where k=6 and I1=\"%s. enat 6 * (enat (nat (s ''x'')))\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat 6 * enat (nat (s ''x'')) +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 IF Less (N 0) (V ''z'') THEN SKIP;; SKIP\n                                 ELSE SKIP;;\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 2. \\<And>s.\n       enat 6 * enat (nat (s ''x'')) + 1\n       \\<le> enat 6 * (enat (nat (s ''x'')) + 1)\n 3. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. 0 < 6", "apply(rule Seq[where P\\<^sub>2=\"wp\\<^sub>Q (''x'' ::= Plus (V ''x'') (N (-1))) (\\<lambda>t. enat 6 * enat (nat (t ''x'')) + 1)\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat 6 * enat (nat (s ''x'')) +\n                                     \\<up> (bval (Less (N 0) (V ''x'')) s)}\n                                 IF Less (N 0) (V ''z'') THEN SKIP;; SKIP\n                                 ELSE SKIP\n                                 {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 3. \\<And>s.\n       enat 6 * enat (nat (s ''x'')) + 1\n       \\<le> enat 6 * (enat (nat (s ''x'')) + 1)\n 4. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. 0 < 6", "apply(simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     enat (6 * nat (s ''x'')) +\n                                     \\<up> (0 < s ''x'')}\n                                 IF Less (N 0) (V ''z'') THEN SKIP;; SKIP\n                                 ELSE SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 3. \\<And>s.\n       enat 6 * enat (nat (s ''x'')) + 1\n       \\<le> enat 6 * (enat (nat (s ''x'')) + 1)\n 4. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. 0 < 6", "apply(rule weakenpre)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P9}\n                                 IF Less (N 0) (V ''z'') THEN SKIP;; SKIP\n                                 ELSE SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n 2. \\<forall>s. ?P9 s \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 3. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 4. \\<And>s.\n       enat 6 * enat (nat (s ''x'')) + 1\n       \\<le> enat 6 * (enat (nat (s ''x'')) + 1)\n 5. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 6. 0 < 6", "apply(rule If[where P=\"wp\\<^sub>Q (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP ) (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1))\"])"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     wp\\<^sub>Q\n(IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n(\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s +\n                                     \\<up> (bval (Less (N 0) (V ''z'')) s)}\n                                 SKIP;; SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     wp\\<^sub>Q\n(IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n(\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s +\n                                     \\<up>\n(\\<not> bval (Less (N 0) (V ''z'')) s)}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n 3. \\<forall>s.\n       eSuc\n        (wp\\<^sub>Q (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n          (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s)\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 4. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 5. \\<And>s.\n       enat 6 * enat (nat (s ''x'')) + 1\n       \\<le> enat 6 * (enat (nat (s ''x'')) + 1)\n 6. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 7. 0 < 6", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     wp\\<^sub>Q\n(IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n(\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s +\n                                     \\<up> (bval (Less (N 0) (V ''z'')) s)}\n                                 SKIP;; SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     eSuc\n(wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n  (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n                                     \\<up> (0 < s ''z'')}\n                                 SKIP;; SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "apply(rule Seq[where P\\<^sub>2=\"wp\\<^sub>Q (SKIP) (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1))\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     eSuc\n(wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n  (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n                                     \\<up> (0 < s ''z'')}\n                                 SKIP\n                                 {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (6 * nat (s ''x'' - 1)) + 1))}\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (6 * nat (s ''x'' - 1)) + 1))}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     eSuc\n(wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n  (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n                                     \\<up> (0 < s ''z'')}\n                                 SKIP\n                                 {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (6 * nat (s ''x'' - 1)) + 1))}", "apply(rule weakenpre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P} SKIP\n                                 {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (6 * nat (s ''x'' - 1)) + 1))}\n 2. \\<forall>s.\n       ?P s\n       \\<le> eSuc\n              (wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n                (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n             \\<up> (0 < s ''z'')", "apply(rule Skip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc\n        (wp\\<^sub>Q SKIP\n          (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s)\n       \\<le> eSuc\n              (wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n                (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n             \\<up> (0 < s ''z'')", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (6 * nat (s ''x'' - 1)) + 1))}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q SKIP\n                                   (\\<lambda>s.\n eSuc (enat (6 * nat (s ''x'' - 1)) + 1))}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "apply(rule weakenpre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P} SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n 2. \\<forall>s.\n       ?P s\n       \\<le> wp\\<^sub>Q SKIP\n              (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s", "apply(rule Skip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))\n       \\<le> wp\\<^sub>Q SKIP\n              (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     wp\\<^sub>Q\n(IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n(\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s +\n                                     \\<up>\n(\\<not> bval (Less (N 0) (V ''z'')) s)}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n 2. \\<forall>s.\n       eSuc\n        (wp\\<^sub>Q (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n          (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s)\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 3. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 4. \\<And>s.\n       enat 6 * enat (nat (s ''x'')) + 1\n       \\<le> enat 6 * (enat (nat (s ''x'')) + 1)\n 5. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 6. 0 < 6", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     wp\\<^sub>Q\n(IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n(\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s +\n                                     \\<up>\n(\\<not> bval (Less (N 0) (V ''z'')) s)}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     eSuc\n(wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n  (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n                                     \\<up> (\\<not> 0 < s ''z'')}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     eSuc\n(wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n  (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n                                     \\<up> (\\<not> 0 < s ''z'')}\n                                 SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}", "apply(rule weakenpre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P} SKIP\n                                 {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n 2. \\<forall>s.\n       ?P s\n       \\<le> eSuc\n              (wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n                (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n             \\<up> (\\<not> 0 < s ''z'')", "apply(rule Skip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))\n       \\<le> eSuc\n              (wp\\<^sub>Q (if 0 < s ''z'' then SKIP;; SKIP else SKIP)\n                (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s) +\n             \\<up> (\\<not> 0 < s ''z'')", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<forall>s.\n       eSuc\n        (wp\\<^sub>Q (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n          (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s)\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 3. \\<And>s.\n       enat 6 * enat (nat (s ''x'')) + 1\n       \\<le> enat 6 * (enat (nat (s ''x'')) + 1)\n 4. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. 0 < 6", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}\n 2. \\<forall>s.\n       eSuc\n        (wp\\<^sub>Q (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n          (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s)\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 3. \\<And>s.\n       enat 6 * enat (nat (s ''x'')) + 1\n       \\<le> enat 6 * (enat (nat (s ''x'')) + 1)\n 4. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 5. 0 < 6", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {wp\\<^sub>Q\n                                   (''x'' ::= Plus (V ''x'') (N (- 1)))\n                                   (\\<lambda>t.\n enat 6 * enat (nat (t ''x'')) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t.\n                                     enat 6 * enat (nat (t ''x'')) + 1}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {\\<lambda>s.\n                                     eSuc\n(enat (6 * nat (s ''x'' - 1)) + 1)}\n                                 ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t. enat (6 * nat (t ''x'')) + 1}", "apply(rule weakenpre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>2\\<^sub>' {?P2} ''x'' ::= Plus (V ''x'') (N (- 1))\n                                 {\\<lambda>t. enat (6 * nat (t ''x'')) + 1}\n 2. \\<forall>s. ?P2 s \\<le> eSuc (enat (6 * nat (s ''x'' - 1)) + 1)", "apply(rule Assign)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc (enat (6 * nat ((s[Plus (V ''x'') (N (- 1))/''x'']) ''x'')) + 1)\n       \\<le> eSuc (enat (6 * nat (s ''x'' - 1)) + 1)", "by simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<forall>s.\n       eSuc\n        (wp\\<^sub>Q (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n          (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s)\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<And>s.\n       enat 6 * enat (nat (s ''x'')) + 1\n       \\<le> enat 6 * (enat (nat (s ''x'')) + 1)\n 3. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 4. 0 < 6", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       eSuc\n        (wp\\<^sub>Q (IF Less (N 0) (V ''z'') THEN SKIP;; SKIP ELSE SKIP)\n          (\\<lambda>s. eSuc (enat (6 * nat (s ''x'' - 1)) + 1)) s)\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       0 < s ''z'' \\<Longrightarrow>\n       eSuc (eSuc (eSuc (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1)))))\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<And>s.\n       \\<not> 0 < s ''z'' \\<Longrightarrow>\n       eSuc (eSuc (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))))\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < s ''z'' \\<Longrightarrow>\n    eSuc (eSuc (eSuc (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1)))))\n    \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(cases \"s ''x'' > 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < s ''z''; 0 < s ''x''\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc\n                           (eSuc\n                             (eSuc (enat (6 * nat (s ''x'' - 1)) + 1)))))\n                      \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<lbrakk>0 < s ''z''; \\<not> 0 < s ''x''\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc\n                           (eSuc\n                             (eSuc (enat (6 * nat (s ''x'' - 1)) + 1)))))\n                      \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < s ''z''; 0 < s ''x''\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc\n                           (eSuc\n                             (eSuc (enat (6 * nat (s ''x'' - 1)) + 1)))))\n                      \\<le> enat (6 * nat (s ''x''))", "apply(simp only: one_enat_def plus_enat_simps times_enat_simps enat_ord_code(1) eSuc_enat)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<not> 0 < s ''z'' \\<Longrightarrow>\n       eSuc (eSuc (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))))\n       \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> 0 < s ''z'' \\<Longrightarrow>\n    eSuc (eSuc (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))))\n    \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply(cases \"s ''x'' > 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> 0 < s ''z''; 0 < s ''x''\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))))\n                      \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')\n 2. \\<lbrakk>\\<not> 0 < s ''z''; \\<not> 0 < s ''x''\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))))\n                      \\<le> enat (6 * nat (s ''x'')) + \\<up> (0 < s ''x'')", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> 0 < s ''z''; 0 < s ''x''\\<rbrakk>\n    \\<Longrightarrow> eSuc\n                       (eSuc\n                         (eSuc (eSuc (enat (6 * nat (s ''x'' - 1)) + 1))))\n                      \\<le> enat (6 * nat (s ''x''))", "apply(simp only: one_enat_def plus_enat_simps times_enat_simps enat_ord_code(1) eSuc_enat)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       enat 6 * enat (nat (s ''x'')) + 1\n       \\<le> enat 6 * (enat (nat (s ''x'')) + 1)\n 2. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 3. 0 < 6", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat 6 * enat (nat (s ''x'')) + 1\n    \\<le> enat 6 * (enat (nat (s ''x'')) + 1)", "apply(simp only: one_enat_def plus_enat_simps times_enat_simps enat_ord_code(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. 6 * nat (s ''x'') + 1 \\<le> 6 * (nat (s ''x'') + 1)", "by presburger"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       enat 6 * enat 0\n       \\<le> enat 6 * enat (nat (s ''x'')) +\n             \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 2. 0 < 6", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat 6 * enat 0\n    \\<le> enat 6 * enat (nat (s ''x'')) +\n          \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)", "apply(cases \"s ''x'' > 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s ''x'' \\<Longrightarrow>\n    enat 6 * enat 0\n    \\<le> enat 6 * enat (nat (s ''x'')) +\n          \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)\n 2. \\<not> 0 < s ''x'' \\<Longrightarrow>\n    enat 6 * enat 0\n    \\<le> enat 6 * enat (nat (s ''x'')) +\n          \\<up> (\\<not> bval (Less (N 0) (V ''x'')) s)", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 6", "by simp"], ["", "end"]]}