{"file_name": "/home/qj213/afp-2021-10-22/thys/Hoare_Time/Nielson_Sqrt.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hoare_Time", "problem_names": ["lemma absch: \"\\<And>s k. 1 + s ''x'' = 2 ^ k \\<Longrightarrow> 5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\"", "lemma \n  assumes P: \"P  = (\\<lambda>l s.  (\\<exists>k. 1 + s ''x''  = 2 ^ k) )\"\n      and e : \"e  = (\\<lambda>s. Discrete.log (nat (s ''x'')) + 1)\" and\n      Q[simp]: \"Q = (\\<lambda>l s. True)\" \n  shows \" \\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}\""], "translations": [["", "lemma absch: \"\\<And>s k. 1 + s ''x'' = 2 ^ k \\<Longrightarrow> 5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s k.\n       1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n       5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s k.\n       1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n       5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "fix s :: state and  k :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s k.\n       1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n       5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "assume F: \" 1 + s ''x'' = 2 ^ k \""], ["proof (state)\nthis:\n  1 + s ''x'' = 2 ^ k\n\ngoal (1 subgoal):\n 1. \\<And>s k.\n       1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n       5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "then"], ["proof (chain)\npicking this:\n  1 + s ''x'' = 2 ^ k", "have i: \"nat (1 + s ''x'') =  2 ^ k\" and nn: \"s ''x''\\<ge> 0\""], ["proof (prove)\nusing this:\n  1 + s ''x'' = 2 ^ k\n\ngoal (1 subgoal):\n 1. nat (1 + s ''x'') = 2 ^ k &&& 0 \\<le> s ''x''", "apply (auto simp: nat_power_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + s ''x'' = 2 ^ k \\<Longrightarrow> 0 \\<le> s ''x''", "by (smt one_le_power)"], ["proof (state)\nthis:\n  nat (1 + s ''x'') = 2 ^ k\n  0 \\<le> s ''x''\n\ngoal (1 subgoal):\n 1. \\<And>s k.\n       1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n       5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "have F: \"1 + nat (s ''x'') = 2 ^k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + nat (s ''x'') = 2 ^ k", "unfolding i[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + nat (s ''x'') = nat (1 + s ''x'')", "using nn"], ["proof (prove)\nusing this:\n  0 \\<le> s ''x''\n\ngoal (1 subgoal):\n 1. 1 + nat (s ''x'') = nat (1 + s ''x'')", "by auto"], ["proof (state)\nthis:\n  1 + nat (s ''x'') = 2 ^ k\n\ngoal (1 subgoal):\n 1. \\<And>s k.\n       1 + s ''x'' = 2 ^ k \\<Longrightarrow>\n       5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "show \"5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "proof (cases \"s ''x'' \\<ge> 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "case True"], ["proof (state)\nthis:\n  1 \\<le> s ''x''\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "have \"5 * k = 5 * (Discrete.log (2^k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 * k = 5 * Discrete.log (2 ^ k)", "by auto"], ["proof (state)\nthis:\n  5 * k = 5 * Discrete.log (2 ^ k)\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "also"], ["proof (state)\nthis:\n  5 * k = 5 * Discrete.log (2 ^ k)\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "have \"\\<dots> = 5 * Discrete.log (1 + nat (s ''x''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 * Discrete.log (2 ^ k) = 5 * Discrete.log (1 + nat (s ''x''))", "by(simp only: F[symmetric])"], ["proof (state)\nthis:\n  5 * Discrete.log (2 ^ k) = 5 * Discrete.log (1 + nat (s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "also"], ["proof (state)\nthis:\n  5 * Discrete.log (2 ^ k) = 5 * Discrete.log (1 + nat (s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "have \"\\<dots> \\<le> 5 * Discrete.log (nat (s ''x'' + s ''x''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 * Discrete.log (1 + nat (s ''x''))\n    \\<le> 5 * Discrete.log (nat (s ''x'' + s ''x''))", "using True"], ["proof (prove)\nusing this:\n  1 \\<le> s ''x''\n\ngoal (1 subgoal):\n 1. 5 * Discrete.log (1 + nat (s ''x''))\n    \\<le> 5 * Discrete.log (nat (s ''x'' + s ''x''))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    Discrete.log (Suc (nat (s ''x'')))\n    \\<le> Discrete.log (nat (2 * s ''x''))", "apply(rule monoD[OF log_mono])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    Suc (nat (s ''x'')) \\<le> nat (2 * s ''x'')", "by auto"], ["proof (state)\nthis:\n  5 * Discrete.log (1 + nat (s ''x''))\n  \\<le> 5 * Discrete.log (nat (s ''x'' + s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "also"], ["proof (state)\nthis:\n  5 * Discrete.log (1 + nat (s ''x''))\n  \\<le> 5 * Discrete.log (nat (s ''x'' + s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "have \"\\<dots> = 5 *  Discrete.log (2 * nat (s ''x''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 * Discrete.log (nat (s ''x'' + s ''x'')) =\n    5 * Discrete.log (2 * nat (s ''x''))", "by (auto simp: nat_mult_distrib)"], ["proof (state)\nthis:\n  5 * Discrete.log (nat (s ''x'' + s ''x'')) =\n  5 * Discrete.log (2 * nat (s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "also"], ["proof (state)\nthis:\n  5 * Discrete.log (nat (s ''x'' + s ''x'')) =\n  5 * Discrete.log (2 * nat (s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "have \"\\<dots> = 5 + 5 * (Discrete.log (nat (s ''x'')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 * Discrete.log (2 * nat (s ''x'')) =\n    5 + 5 * Discrete.log (nat (s ''x''))", "using True"], ["proof (prove)\nusing this:\n  1 \\<le> s ''x''\n\ngoal (1 subgoal):\n 1. 5 * Discrete.log (2 * nat (s ''x'')) =\n    5 + 5 * Discrete.log (nat (s ''x''))", "by auto"], ["proof (state)\nthis:\n  5 * Discrete.log (2 * nat (s ''x'')) =\n  5 + 5 * Discrete.log (nat (s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "also"], ["proof (state)\nthis:\n  5 * Discrete.log (2 * nat (s ''x'')) =\n  5 + 5 * Discrete.log (nat (s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "have \"\\<dots> \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 + 5 * Discrete.log (nat (s ''x''))\n    \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "by simp"], ["proof (state)\nthis:\n  5 + 5 * Discrete.log (nat (s ''x''))\n  \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n\ngoal (2 subgoals):\n 1. 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n 2. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "finally"], ["proof (chain)\npicking this:\n  5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "show ?thesis"], ["proof (prove)\nusing this:\n  5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n\ngoal (1 subgoal):\n 1. 5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "."], ["proof (state)\nthis:\n  5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "case False"], ["proof (state)\nthis:\n  \\<not> 1 \\<le> s ''x''\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "with nn"], ["proof (chain)\npicking this:\n  0 \\<le> s ''x''\n  \\<not> 1 \\<le> s ''x''", "have gt1: \"s ''x'' = 0\""], ["proof (prove)\nusing this:\n  0 \\<le> s ''x''\n  \\<not> 1 \\<le> s ''x''\n\ngoal (1 subgoal):\n 1. s ''x'' = 0", "by auto"], ["proof (state)\nthis:\n  s ''x'' = 0\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "from F[unfolded gt1]"], ["proof (chain)\npicking this:\n  1 + nat 0 = 2 ^ k", "have \"2 ^ k = (1::int)\""], ["proof (prove)\nusing this:\n  1 + nat 0 = 2 ^ k\n\ngoal (1 subgoal):\n 1. 2 ^ k = 1", "using log_Suc_zero"], ["proof (prove)\nusing this:\n  1 + nat 0 = 2 ^ k\n  Discrete.log (Suc 0) = 0\n\ngoal (1 subgoal):\n 1. 2 ^ k = 1", "by auto"], ["proof (state)\nthis:\n  2 ^ k = 1\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "then"], ["proof (chain)\npicking this:\n  2 ^ k = 1", "have \"k=0\""], ["proof (prove)\nusing this:\n  2 ^ k = 1\n\ngoal (1 subgoal):\n 1. k = 0", "by (metis One_nat_def add.right_neutral gt1 i n_not_Suc_n nat_numeral nat_power_eq_Suc_0_iff numeral_2_eq_2 numeral_One)"], ["proof (state)\nthis:\n  k = 0\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> s ''x'' \\<Longrightarrow>\n    5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "then"], ["proof (chain)\npicking this:\n  k = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  k = 0\n\ngoal (1 subgoal):\n 1. 5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))", "by(simp add: gt1)"], ["proof (state)\nthis:\n  5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  5 * k \\<le> 96 + 100 * Discrete.log (nat (s ''x''))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>For simplicity we assume, that during the process all segments between ''l'' and ''r'' have\n      as length a power of two. This simplifies the analysis.\n      To obtain this we choose the precondition P accordingly.\n\n      Now lets show the correctness of our time complexity: the binary search is in O(log ''x'') \\<close>"], ["", "lemma \n  assumes P: \"P  = (\\<lambda>l s.  (\\<exists>k. 1 + s ''x''  = 2 ^ k) )\"\n      and e : \"e  = (\\<lambda>s. Discrete.log (nat (s ''x'')) + 1)\" and\n      Q[simp]: \"Q = (\\<lambda>l s. True)\" \n  shows \" \\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}", "proof -\n  \n  \\<comment> \\<open>first we create an annotated command\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}", "let ?lb = \"''m'' ::= \n              (Div (Plus (V ''l'') (V ''r'')) (N 2)) ;; \n              (IF Not (Less (Times (V ''m'') (V ''m'')) (V ''x'')) \n                THEN ''l'' ::= V ''m''\n                ELSE ''r'' ::= V ''m'');;\n              (''m'' ::= N 0)::acom\"\n  \\<comment> \\<open>with an Invariant\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}", "define I :: assn2 where \"I \\<equiv> (\\<lambda>l s. (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k ) \\<and> s ''l'' \\<ge> 0 )\"\n    \n  \\<comment> \\<open>and an time bound annotation for the loop\\<close>"], ["proof (state)\nthis:\n  I \\<equiv>\n  \\<lambda>l s.\n     (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k) \\<and> 0 \\<le> s ''l''\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}", "define E :: tbd where \"E \\<equiv> %s. 1 + 5 * Discrete.log (nat(s ''r'' - s ''l''))\""], ["proof (state)\nthis:\n  E \\<equiv> \\<lambda>s. 1 + 5 * Discrete.log (nat (s ''r'' - s ''l''))\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}", "define S :: \"state \\<Rightarrow> state\" where \"S \\<equiv> %s. s\""], ["proof (state)\nthis:\n  S \\<equiv> \\<lambda>s. s\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}", "define Es :: \"vname \\<Rightarrow> vname set\" where \"Es  = (%x. {x})\""], ["proof (state)\nthis:\n  Es = (\\<lambda>x. {x})\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}", "define R :: \"(assn2*(vname set))*((state\\<Rightarrow>state)*(tbd*((vname set*(vname \\<Rightarrow> vname set)))))\"\n      where \"R=((I,{''l'',''r''}),(S,(E,({''l'',''r''},Es))))\""], ["proof (state)\nthis:\n  R = ((I, {''l'', ''r''}), S, E, {''l'', ''r''}, Es)\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}", "let ?C = \"''l''::= N 0 ;; (''m'' ::= N 0) ;; ''r''::= Plus (N 1) (V ''x'');; ({R} WHILE (Less (Plus (N 1) (V ''l'')) (V ''r'')) DO ?lb)\"\n  \n  \\<comment> \\<open>we show that the annotated command corresponds to the command we are interested in\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}", "have s: \"strip ?C = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip\n     (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n      {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n      DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n          IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n          THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n          ''m'' ::= N 0)) =\n    c", "unfolding c_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. strip\n     (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n      {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n      DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n          IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n          THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n          ''m'' ::= N 0)) =\n    ''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n    WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n    DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n        IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n        THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n        ''m'' ::= N 0)", "by auto\n    \n  \\<comment> \\<open>now we show that the annotated command is correct; here we use the improved VCG and the\n      Nielson\\<close>"], ["proof (state)\nthis:\n  strip\n   (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n    {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n    DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n        IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n        THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n        ''m'' ::= N 0)) =\n  c\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}", "have v: \"\\<turnstile>\\<^sub>1 {P} strip ?C {e  \\<Down> Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P}\n                         strip\n                          (''l'' ::= N 0;; ''m'' ::= N 0;;\n                           ''r'' ::= Plus (N 1) (V ''x'');;\n                           {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n                           DO (''m'' ::= Div (Plus (V ''l'') (V ''r''))\n    (N 2);;\n                               IF bexp.Not\n                                   (Less (Times (V ''m'') (V ''m''))\n                                     (V ''x''))\n                               THEN ''l'' ::= V ''m''\n                               ELSE ''r'' ::= V ''m'';;\n                               ''m'' ::= N 0))\n                         { e \\<Down> Q}", "proof (rule vc_sound'', safe)     \n    \n    \\<comment> \\<open>A) first lets show the verification conditions:\\<close>"], ["proof (state)\ngoal (6 subgoals):\n 1. vc (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n        {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n        DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n            IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n            THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n            ''m'' ::= N 0))\n     Q ?Qset {}\n 2. finite (support Q)\n 3. finite\n     (varacom\n       (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n        {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n        DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n            IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n            THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n            ''m'' ::= N 0)))\n 4. \\<exists>k>0.\n       \\<forall>l s.\n          P l s \\<longrightarrow>\n          pre (''l'' ::= N 0;; ''m'' ::= N 0;;\n               ''r'' ::= Plus (N 1) (V ''x'');;\n               {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n               DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                   IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                   THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                   ''m'' ::= N 0))\n           Q l s \\<and>\n          time\n           (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n            {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n            DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                ''m'' ::= N 0))\n           s\n          \\<le> k * e s\n 5. \\<And>s1 s2 l.\n       \\<lbrakk>s1 = s2 on ?Qset; Q l s1\\<rbrakk> \\<Longrightarrow> Q l s2\n 6. \\<And>s1 s2 l.\n       \\<lbrakk>s1 = s2 on ?Qset; Q l s2\\<rbrakk> \\<Longrightarrow> Q l s1", "show \"vc ?C Q {} {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vc (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n        {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n        DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n            IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n            THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n            ''m'' ::= N 0))\n     Q {} {}", "unfolding R_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vc (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n        {((I, {''l'', ''r''}), S, E, {''l'', ''r''}, Es)}\n        WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n        DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n            IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n            THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n            ''m'' ::= N 0))\n     Q {} {}", "apply (simp only: vc.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((True \\<and> True) \\<and> True) \\<and>\n    (\\<forall>s1 s2 l.\n        s1 = s2 on {''l'', ''r''} \\<longrightarrow> I l s1 = I l s2) \\<and>\n    (\\<forall>y\\<in>{} \\<union> {}.\n        let Ss = Es y\n        in \\<forall>s1 s2.\n              s1 = s2 on Ss \\<longrightarrow> S s1 y = S s2 y) \\<and>\n    (\\<forall>s1 s2.\n        s1 = s2 on {''l'', ''r''} \\<longrightarrow> E s1 = E s2) \\<and>\n    (\\<forall>l s.\n        (I l s \\<and>\n         bval (Less (Plus (N 1) (V ''l'')) (V ''r'')) s \\<longrightarrow>\n         pre (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n              IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n              THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n              ''m'' ::= N 0)\n          I l s \\<and>\n         1 +\n         preT\n          (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n           IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n           THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n           ''m'' ::= N 0)\n          E s +\n         time\n          (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n           IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n           THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n           ''m'' ::= N 0)\n          s\n         \\<le> E s \\<and>\n         S s =\n         S (postQ\n             (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n              IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n              THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n              ''m'' ::= N 0)\n             s)\n         on \\<Union> (funStar Es ` ({} \\<union> {}))) \\<and>\n        (I l s \\<and>\n         \\<not> bval (Less (Plus (N 1) (V ''l'')) (V ''r''))\n                 s \\<longrightarrow>\n         Q l s \\<and>\n         1 \\<le> E s \\<and>\n         S s = s on \\<Union> (funStar Es ` ({} \\<union> {})))) \\<and>\n    (True \\<and> True \\<and> True) \\<and> True", "apply auto"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>s1 s2 l.\n       \\<lbrakk>s1 ''l'' = s2 ''l''; s1 ''r'' = s2 ''r''; I l s1\\<rbrakk>\n       \\<Longrightarrow> I l s2\n 2. \\<And>s1 s2 l.\n       \\<lbrakk>s1 ''l'' = s2 ''l''; s1 ''r'' = s2 ''r''; I l s2\\<rbrakk>\n       \\<Longrightarrow> I l s1\n 3. \\<And>s1 s2.\n       \\<lbrakk>s1 ''l'' = s2 ''l''; s1 ''r'' = s2 ''r''\\<rbrakk>\n       \\<Longrightarrow> E s1 = E s2\n 4. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''l'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 5. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 6. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 7. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''r'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 8. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 9. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1_ ''l'' = s2_ ''l''; s1_ ''r'' = s2_ ''r''; I l_ s1_\\<rbrakk>\n    \\<Longrightarrow> I l_ s2_", "unfolding I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1_ ''l'' = s2_ ''l''; s1_ ''r'' = s2_ ''r'';\n     (\\<exists>k. s1_ ''r'' - s1_ ''l'' = 2 ^ k) \\<and>\n     0 \\<le> s1_ ''l''\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>k. s2_ ''r'' - s2_ ''l'' = 2 ^ k) \\<and>\n                      0 \\<le> s2_ ''l''", "by auto"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>s1 s2 l.\n       \\<lbrakk>s1 ''l'' = s2 ''l''; s1 ''r'' = s2 ''r''; I l s2\\<rbrakk>\n       \\<Longrightarrow> I l s1\n 2. \\<And>s1 s2.\n       \\<lbrakk>s1 ''l'' = s2 ''l''; s1 ''r'' = s2 ''r''\\<rbrakk>\n       \\<Longrightarrow> E s1 = E s2\n 3. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''l'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 4. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 5. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 6. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''r'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 7. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 8. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1_ ''l'' = s2_ ''l''; s1_ ''r'' = s2_ ''r''; I l_ s2_\\<rbrakk>\n    \\<Longrightarrow> I l_ s1_", "unfolding I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1_ ''l'' = s2_ ''l''; s1_ ''r'' = s2_ ''r'';\n     (\\<exists>k. s2_ ''r'' - s2_ ''l'' = 2 ^ k) \\<and>\n     0 \\<le> s2_ ''l''\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>k. s1_ ''r'' - s1_ ''l'' = 2 ^ k) \\<and>\n                      0 \\<le> s1_ ''l''", "by auto"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 ''l'' = s2 ''l''; s1 ''r'' = s2 ''r''\\<rbrakk>\n       \\<Longrightarrow> E s1 = E s2\n 2. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''l'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 3. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 4. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 5. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''r'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 6. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 7. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1_ ''l'' = s2_ ''l''; s1_ ''r'' = s2_ ''r''\\<rbrakk>\n    \\<Longrightarrow> E s1_ = E s2_", "unfolding E_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1_ ''l'' = s2_ ''l''; s1_ ''r'' = s2_ ''r''\\<rbrakk>\n    \\<Longrightarrow> 1 + 5 * Discrete.log (nat (s1_ ''r'' - s1_ ''l'')) =\n                      1 + 5 * Discrete.log (nat (s2_ ''r'' - s2_ ''l''))", "by auto"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''l'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 2. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 3. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 4. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''r'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 5. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 6. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "proof (goal_cases)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''l'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 2. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 3. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 4. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''r'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 5. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 6. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "fix s::state and l"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''l'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 2. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 3. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 4. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''r'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 5. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 6. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "assume  I: \"I l s\" and 2: \"1 + s ''l'' < s ''r''\""], ["proof (state)\nthis:\n  I l s\n  1 + s ''l'' < s ''r''\n\ngoal (6 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''l'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 2. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 3. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 4. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''r'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 5. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 6. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "from I"], ["proof (chain)\npicking this:\n  I l s", "obtain k :: nat where 3: \"s ''r'' - s ''l'' = 2 ^ k\" and 4: \"s ''l'' \\<ge> 0\""], ["proof (prove)\nusing this:\n  I l s\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>s ''r'' - s ''l'' = 2 ^ k; 0 \\<le> s ''l''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding I_def"], ["proof (prove)\nusing this:\n  (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k) \\<and> 0 \\<le> s ''l''\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>s ''r'' - s ''l'' = 2 ^ k; 0 \\<le> s ''l''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s ''r'' - s ''l'' = 2 ^ k\n  0 \\<le> s ''l''\n\ngoal (6 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''l'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 2. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 3. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 4. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''r'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 5. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 6. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "from 3 2"], ["proof (chain)\npicking this:\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''", "have \"k>0\""], ["proof (prove)\nusing this:\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n\ngoal (1 subgoal):\n 1. 0 < k", "using gr0I"], ["proof (prove)\nusing this:\n  s ''r'' - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n  (?n = 0 \\<Longrightarrow> False) \\<Longrightarrow> 0 < ?n\n\ngoal (1 subgoal):\n 1. 0 < k", "by force"], ["proof (state)\nthis:\n  0 < k\n\ngoal (6 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''l'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 2. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 3. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 4. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''r'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 5. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 6. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "then"], ["proof (chain)\npicking this:\n  0 < k", "obtain k' where k': \"k=k'+1\""], ["proof (prove)\nusing this:\n  0 < k\n\ngoal (1 subgoal):\n 1. (\\<And>k'. k = k' + 1 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (metis Suc_eq_plus1 Suc_pred)"], ["proof (state)\nthis:\n  k = k' + 1\n\ngoal (6 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''l'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 2. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 3. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 4. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''r'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 5. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 6. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "from 3 k'"], ["proof (chain)\npicking this:\n  s ''r'' - s ''l'' = 2 ^ k\n  k = k' + 1", "have R1: \" s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k'\" and\n          R2: \"(s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k'\""], ["proof (prove)\nusing this:\n  s ''r'' - s ''l'' = 2 ^ k\n  k = k' + 1\n\ngoal (1 subgoal):\n 1. s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k' &&&\n    (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k'", "by auto"], ["proof (state)\nthis:\n  s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k'\n  (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k'\n\ngoal (6 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''l'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 2. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 3. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 4. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''r'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 5. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 6. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "then"], ["proof (chain)\npicking this:\n  s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k'\n  (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k'", "have E1: \"\\<exists>k. s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k\" and\n          E2: \"\\<exists>k. (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k\""], ["proof (prove)\nusing this:\n  s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k'\n  (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k'\n\ngoal (1 subgoal):\n 1. \\<exists>k. s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k &&&\n    \\<exists>k. (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k", "by auto"], ["proof (state)\nthis:\n  \\<exists>k. s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k\n  \\<exists>k. (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k\n\ngoal (6 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''l'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 2. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 3. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 4. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> I l (s(''r'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0))\n 5. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 6. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "then"], ["proof (chain)\npicking this:\n  \\<exists>k. s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k\n  \\<exists>k. (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k", "show \"I l (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\" and \n          \"I l (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\""], ["proof (prove)\nusing this:\n  \\<exists>k. s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k\n  \\<exists>k. (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k\n\ngoal (1 subgoal):\n 1. I l (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)) &&&\n    I l (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))", "using 2 4"], ["proof (prove)\nusing this:\n  \\<exists>k. s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k\n  \\<exists>k. (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n  0 \\<le> s ''l''\n\ngoal (1 subgoal):\n 1. I l (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)) &&&\n    I l (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))", "unfolding I_def"], ["proof (prove)\nusing this:\n  \\<exists>k. s ''r'' - (s ''l'' + s ''r'') div 2 = 2 ^ k\n  \\<exists>k. (s ''l'' + s ''r'') div 2 - s ''l'' = 2 ^ k\n  1 + s ''l'' < s ''r''\n  0 \\<le> s ''l''\n\ngoal (1 subgoal):\n 1. (\\<exists>k.\n        (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)) ''r'' -\n        (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)) ''l'' =\n        2 ^ k) \\<and>\n    0 \\<le> (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)) ''l'' &&&\n    (\\<exists>k.\n        (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)) ''r'' -\n        (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)) ''l'' =\n        2 ^ k) \\<and>\n    0 \\<le> (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)) ''l''", "by auto"], ["proof (state)\nthis:\n  I l (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n  I l (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))\n\ngoal (4 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 2. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 3. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 4. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "show \"Suc (Suc (Suc (Suc (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))))))) \\<le> E s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc (Suc (Suc (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2,\n                                  ''m'' := 0)))))))\n    \\<le> E s", "unfolding E_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc (Suc (Suc (Suc (1 +\n                             5 *\n                             Discrete.log\n                              (nat ((s(''l'' := (s ''l'' + s ''r'') div 2,\n ''m'' := 0))\n                                     ''r'' -\n                                    (s(''l'' := (s ''l'' + s ''r'') div 2,\n ''m'' := 0))\n                                     ''l'')))))))\n    \\<le> 1 + 5 * Discrete.log (nat (s ''r'' - s ''l''))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc (Suc (Suc (Suc (5 *\n                             Discrete.log\n                              (nat (s ''r'' -\n                                    (s ''l'' + s ''r'') div 2)))))))\n    \\<le> 5 * Discrete.log (nat (s ''r'' - s ''l''))", "unfolding R1 3 k'"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc (Suc (Suc (Suc (5 * Discrete.log (nat (2 ^ k')))))))\n    \\<le> 5 * Discrete.log (nat (2 ^ (k' + 1)))", "by (auto  simp: nat_power_eq nat_mult_distrib)"], ["proof (state)\nthis:\n  Suc (Suc (Suc (Suc (Suc (E (s(''l'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0)))))))\n  \\<le> E s\n\ngoal (3 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 2. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc (Suc (Suc (Suc\n   (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0)))))))\n                         \\<le> E s\n 3. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "show \"Suc (Suc (Suc (Suc (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2, ''m'' := 0))))))) \\<le> E s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc (Suc (Suc (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2,\n                                  ''m'' := 0)))))))\n    \\<le> E s", "unfolding E_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc (Suc (Suc (Suc (1 +\n                             5 *\n                             Discrete.log\n                              (nat ((s(''r'' := (s ''l'' + s ''r'') div 2,\n ''m'' := 0))\n                                     ''r'' -\n                                    (s(''r'' := (s ''l'' + s ''r'') div 2,\n ''m'' := 0))\n                                     ''l'')))))))\n    \\<le> 1 + 5 * Discrete.log (nat (s ''r'' - s ''l''))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc (Suc (Suc (Suc (5 *\n                             Discrete.log\n                              (nat ((s ''l'' + s ''r'') div 2 -\n                                    s ''l'')))))))\n    \\<le> 5 * Discrete.log (nat (s ''r'' - s ''l''))", "unfolding R2 3 k'"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc (Suc (Suc (Suc (5 * Discrete.log (nat (2 ^ k')))))))\n    \\<le> 5 * Discrete.log (nat (2 ^ (k' + 1)))", "by (auto  simp: nat_power_eq nat_mult_distrib)"], ["proof (state)\nthis:\n  Suc (Suc (Suc (Suc (Suc (E (s(''r'' := (s ''l'' + s ''r'') div 2,\n                                ''m'' := 0)))))))\n  \\<le> E s\n\ngoal (2 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 2. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 2. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "fix l s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l s.\n       \\<lbrakk>\\<not> (s ''l'' + s ''r'') div 2 *\n                       ((s ''l'' + s ''r'') div 2)\n                       < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s\n 2. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "show \"Suc 0 \\<le> E s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc 0 \\<le> E s", "unfolding E_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc 0 \\<le> 1 + 5 * Discrete.log (nat (s ''r'' - s ''l''))", "by auto"], ["proof (state)\nthis:\n  Suc 0 \\<le> E s\n\ngoal (1 subgoal):\n 1. \\<And>l s.\n       \\<lbrakk>(s ''l'' + s ''r'') div 2 * ((s ''l'' + s ''r'') div 2)\n                < s ''x'';\n        I l s; \\<not> 1 + s ''l'' < s ''r''\\<rbrakk>\n       \\<Longrightarrow> Suc 0 \\<le> E s", "show \"Suc 0 \\<le> E s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc 0 \\<le> E s", "unfolding E_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc 0 \\<le> 1 + 5 * Discrete.log (nat (s ''r'' - s ''l''))", "by auto"], ["proof (state)\nthis:\n  Suc 0 \\<le> E s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vc (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n      {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n      DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n          IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n          THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n          ''m'' ::= N 0))\n   Q {} {}\n\ngoal (5 subgoals):\n 1. finite (support Q)\n 2. finite\n     (varacom\n       (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n        {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n        DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n            IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n            THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n            ''m'' ::= N 0)))\n 3. \\<exists>k>0.\n       \\<forall>l s.\n          P l s \\<longrightarrow>\n          pre (''l'' ::= N 0;; ''m'' ::= N 0;;\n               ''r'' ::= Plus (N 1) (V ''x'');;\n               {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n               DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                   IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                   THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                   ''m'' ::= N 0))\n           Q l s \\<and>\n          time\n           (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n            {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n            DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                ''m'' ::= N 0))\n           s\n          \\<le> k * e s\n 4. \\<And>s1 s2 l.\n       \\<lbrakk>s1 = s2 on {}; Q l s1\\<rbrakk> \\<Longrightarrow> Q l s2\n 5. \\<And>s1 s2 l.\n       \\<lbrakk>s1 = s2 on {}; Q l s2\\<rbrakk> \\<Longrightarrow> Q l s1", "next\n    \\<comment> \\<open>B) lets show that the precondition implies the weakest precondition, and that the\n            time bound of C can be bounded by log ''x''\\<close>"], ["proof (state)\ngoal (5 subgoals):\n 1. finite (support Q)\n 2. finite\n     (varacom\n       (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n        {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n        DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n            IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n            THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n            ''m'' ::= N 0)))\n 3. \\<exists>k>0.\n       \\<forall>l s.\n          P l s \\<longrightarrow>\n          pre (''l'' ::= N 0;; ''m'' ::= N 0;;\n               ''r'' ::= Plus (N 1) (V ''x'');;\n               {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n               DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                   IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                   THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                   ''m'' ::= N 0))\n           Q l s \\<and>\n          time\n           (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n            {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n            DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                ''m'' ::= N 0))\n           s\n          \\<le> k * e s\n 4. \\<And>s1 s2 l.\n       \\<lbrakk>s1 = s2 on {}; Q l s1\\<rbrakk> \\<Longrightarrow> Q l s2\n 5. \\<And>s1 s2 l.\n       \\<lbrakk>s1 = s2 on {}; Q l s2\\<rbrakk> \\<Longrightarrow> Q l s1", "fix s"], ["proof (state)\ngoal (5 subgoals):\n 1. finite (support Q)\n 2. finite\n     (varacom\n       (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n        {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n        DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n            IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n            THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n            ''m'' ::= N 0)))\n 3. \\<exists>k>0.\n       \\<forall>l s.\n          P l s \\<longrightarrow>\n          pre (''l'' ::= N 0;; ''m'' ::= N 0;;\n               ''r'' ::= Plus (N 1) (V ''x'');;\n               {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n               DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                   IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                   THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                   ''m'' ::= N 0))\n           Q l s \\<and>\n          time\n           (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n            {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n            DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                ''m'' ::= N 0))\n           s\n          \\<le> k * e s\n 4. \\<And>s1 s2 l.\n       \\<lbrakk>s1 = s2 on {}; Q l s1\\<rbrakk> \\<Longrightarrow> Q l s2\n 5. \\<And>s1 s2 l.\n       \\<lbrakk>s1 = s2 on {}; Q l s2\\<rbrakk> \\<Longrightarrow> Q l s1", "show \"(\\<exists>k>0. \\<forall>l s. P l s \\<longrightarrow> pre ?C Q l s \\<and> time ?C s \\<le> k * e s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k>0.\n       \\<forall>l s.\n          P l s \\<longrightarrow>\n          pre (''l'' ::= N 0;; ''m'' ::= N 0;;\n               ''r'' ::= Plus (N 1) (V ''x'');;\n               {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n               DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                   IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                   THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                   ''m'' ::= N 0))\n           Q l s \\<and>\n          time\n           (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n            {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n            DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                ''m'' ::= N 0))\n           s\n          \\<le> k * e s", "apply(rule exI[where x=100])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 100 \\<and>\n    (\\<forall>l s.\n        P l s \\<longrightarrow>\n        pre (''l'' ::= N 0;; ''m'' ::= N 0;;\n             ''r'' ::= Plus (N 1) (V ''x'');;\n             {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n             DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                 IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                 THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                 ''m'' ::= N 0))\n         Q l s \\<and>\n        time\n         (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n          {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n          DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n              IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n              THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n              ''m'' ::= N 0))\n         s\n        \\<le> 100 * e s)", "unfolding P R_def I_def E_def e"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 100 \\<and>\n    (\\<forall>l s.\n        (\\<exists>k. 1 + s ''x'' = 2 ^ k) \\<longrightarrow>\n        pre (''l'' ::= N 0;; ''m'' ::= N 0;;\n             ''r'' ::= Plus (N 1) (V ''x'');;\n             {((\\<lambda>l s.\n                   (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k) \\<and>\n                   0 \\<le> s ''l'',\n                {''l'', ''r''}),\n               S, \\<lambda>s.\n                     1 + 5 * Discrete.log (nat (s ''r'' - s ''l'')),\n               {''l'', ''r''}, Es)}\n             WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n             DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                 IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                 THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                 ''m'' ::= N 0))\n         Q l s \\<and>\n        time\n         (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n          {((\\<lambda>l s.\n                (\\<exists>k. s ''r'' - s ''l'' = 2 ^ k) \\<and>\n                0 \\<le> s ''l'',\n             {''l'', ''r''}),\n            S, \\<lambda>s. 1 + 5 * Discrete.log (nat (s ''r'' - s ''l'')),\n            {''l'', ''r''}, Es)}\n          WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n          DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n              IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n              THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n              ''m'' ::= N 0))\n         s\n        \\<le> 100 * (Discrete.log (nat (s ''x'')) + 1))", "by (auto simp: nat_power_eq absch)"], ["proof (state)\nthis:\n  \\<exists>k>0.\n     \\<forall>l s.\n        P l s \\<longrightarrow>\n        pre (''l'' ::= N 0;; ''m'' ::= N 0;;\n             ''r'' ::= Plus (N 1) (V ''x'');;\n             {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n             DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n                 IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n                 THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                 ''m'' ::= N 0))\n         Q l s \\<and>\n        time\n         (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n          {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n          DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n              IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n              THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n              ''m'' ::= N 0))\n         s\n        \\<le> k * e s\n\ngoal (4 subgoals):\n 1. finite (support Q)\n 2. finite\n     (varacom\n       (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n        {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n        DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n            IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n            THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n            ''m'' ::= N 0)))\n 3. \\<And>s1 s2 l.\n       \\<lbrakk>s1 = s2 on {}; Q l s1\\<rbrakk> \\<Longrightarrow> Q l s2\n 4. \\<And>s1 s2 l.\n       \\<lbrakk>s1 = s2 on {}; Q l s2\\<rbrakk> \\<Longrightarrow> Q l s1", "qed\n    \\<comment> \\<open>last side conditions are proven automatically\\<close>\n    (auto simp: Q support_inv R_def I_def)\n    \n  \\<comment> \\<open>now we conclude with the correctness of the Hoare triple involving the time bound\\<close>"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {P}\n                       strip\n                        (''l'' ::= N 0;; ''m'' ::= N 0;;\n                         ''r'' ::= Plus (N 1) (V ''x'');;\n                         {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n                         DO (''m'' ::= Div (Plus (V ''l'') (V ''r''))\n  (N 2);;\n                             IF bexp.Not\n                                 (Less (Times (V ''m'') (V ''m''))\n                                   (V ''x''))\n                             THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                             ''m'' ::= N 0))\n                       { e \\<Down> Q}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}", "from s v"], ["proof (chain)\npicking this:\n  strip\n   (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n    {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n    DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n        IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n        THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n        ''m'' ::= N 0)) =\n  c\n  \\<turnstile>\\<^sub>1 {P}\n                       strip\n                        (''l'' ::= N 0;; ''m'' ::= N 0;;\n                         ''r'' ::= Plus (N 1) (V ''x'');;\n                         {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n                         DO (''m'' ::= Div (Plus (V ''l'') (V ''r''))\n  (N 2);;\n                             IF bexp.Not\n                                 (Less (Times (V ''m'') (V ''m''))\n                                   (V ''x''))\n                             THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                             ''m'' ::= N 0))\n                       { e \\<Down> Q}", "show ?thesis"], ["proof (prove)\nusing this:\n  strip\n   (''l'' ::= N 0;; ''m'' ::= N 0;; ''r'' ::= Plus (N 1) (V ''x'');;\n    {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n    DO (''m'' ::= Div (Plus (V ''l'') (V ''r'')) (N 2);;\n        IF bexp.Not (Less (Times (V ''m'') (V ''m'')) (V ''x''))\n        THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n        ''m'' ::= N 0)) =\n  c\n  \\<turnstile>\\<^sub>1 {P}\n                       strip\n                        (''l'' ::= N 0;; ''m'' ::= N 0;;\n                         ''r'' ::= Plus (N 1) (V ''x'');;\n                         {R} WHILE Less (Plus (N 1) (V ''l'')) (V ''r'')\n                         DO (''m'' ::= Div (Plus (V ''l'') (V ''r''))\n  (N 2);;\n                             IF bexp.Not\n                                 (Less (Times (V ''m'') (V ''m''))\n                                   (V ''x''))\n                             THEN ''l'' ::= V ''m'' ELSE ''r'' ::= V ''m'';;\n                             ''m'' ::= N 0))\n                       { e \\<Down> Q}\n\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}", "by simp"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>1 {P} c { e \\<Down> Q}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}