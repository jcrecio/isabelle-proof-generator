{"file_name": "/home/qj213/afp-2021-10-22/thys/Ordered_Resolution_Prover/Inference_System.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Ordered_Resolution_Prover", "problem_names": ["lemma inferences_from_mono: \"CC \\<subseteq> DD \\<Longrightarrow> inferences_from CC \\<subseteq> inferences_from DD\"", "lemma saturatedD:\n  assumes\n    satur: \"saturated N\" and\n    inf: \"Infer CC D E \\<in> \\<Gamma>\" and\n    cc_subs_n: \"set_mset CC \\<subseteq> N\" and\n    d_in_n: \"D \\<in> N\"\n  shows \"E \\<in> N\"", "lemma \\<Gamma>_sat_preserving:\n  assumes sat_n: \"satisfiable N\"\n  shows \"satisfiable (N \\<union> concls_of (inferences_from N))\"", "lemma ex_min_counterex:\n  fixes N :: \"('a :: wellorder) clause set\"\n  assumes \"\\<not> I \\<Turnstile>s N\"\n  shows \"\\<exists>C \\<in> N. \\<not> I \\<Turnstile> C \\<and> (\\<forall>D \\<in> N. D < C \\<longrightarrow> I \\<Turnstile> D)\"", "theorem saturated_model:\n  assumes\n    satur: \"saturated N\" and\n    ec_ni_n: \"{#} \\<notin> N\"\n  shows \"I_of N \\<Turnstile>s N\"", "lemma saturate_mono: \"C \\<in> saturate CC \\<Longrightarrow> CC \\<subseteq> DD \\<Longrightarrow> C \\<in> saturate DD\"", "lemma saturated_saturate[simp, intro]: \"saturated (saturate N)\"", "lemma saturate_finite: \"C \\<in> saturate CC \\<Longrightarrow> \\<exists>DD. DD \\<subseteq> CC \\<and> finite DD \\<and> C \\<in> saturate DD\"", "theorem saturate_sound: \"C \\<in> saturate CC \\<Longrightarrow> I \\<Turnstile>s CC \\<Longrightarrow> I \\<Turnstile> C\"", "theorem saturate_sat_preserving: \"satisfiable CC \\<Longrightarrow> satisfiable (saturate CC)\"", "theorem clausal_logic_compact:\n  fixes N :: \"('a :: wellorder) clause set\"\n  shows \"\\<not> satisfiable N \\<longleftrightarrow> (\\<exists>DD \\<subseteq> N. finite DD \\<and> \\<not> satisfiable DD)\""], "translations": [["", "lemma inferences_from_mono: \"CC \\<subseteq> DD \\<Longrightarrow> inferences_from CC \\<subseteq> inferences_from DD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CC \\<subseteq> DD \\<Longrightarrow>\n    inferences_from CC \\<subseteq> inferences_from DD", "unfolding inferences_from_def infer_from_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. CC \\<subseteq> DD \\<Longrightarrow>\n    {\\<gamma> \\<in> \\<Gamma>. set_mset (prems_of \\<gamma>) \\<subseteq> CC}\n    \\<subseteq> {\\<gamma> \\<in> \\<Gamma>.\n                 set_mset (prems_of \\<gamma>) \\<subseteq> DD}", "by fast"], ["", "definition saturated :: \"'a clause set \\<Rightarrow> bool\" where\n  \"saturated N \\<longleftrightarrow> concls_of (inferences_from N) \\<subseteq> N\""], ["", "lemma saturatedD:\n  assumes\n    satur: \"saturated N\" and\n    inf: \"Infer CC D E \\<in> \\<Gamma>\" and\n    cc_subs_n: \"set_mset CC \\<subseteq> N\" and\n    d_in_n: \"D \\<in> N\"\n  shows \"E \\<in> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<in> N", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. E \\<in> N", "have \"Infer CC D E \\<in> inferences_from N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Infer CC D E \\<in> inferences_from N", "unfolding inferences_from_def infer_from_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Infer CC D E\n    \\<in> {\\<gamma> \\<in> \\<Gamma>.\n           set_mset (prems_of \\<gamma>) \\<subseteq> N}", "using inf cc_subs_n d_in_n"], ["proof (prove)\nusing this:\n  Infer CC D E \\<in> \\<Gamma>\n  set_mset CC \\<subseteq> N\n  D \\<in> N\n\ngoal (1 subgoal):\n 1. Infer CC D E\n    \\<in> {\\<gamma> \\<in> \\<Gamma>.\n           set_mset (prems_of \\<gamma>) \\<subseteq> N}", "by simp"], ["proof (state)\nthis:\n  Infer CC D E \\<in> inferences_from N\n\ngoal (1 subgoal):\n 1. E \\<in> N", "then"], ["proof (chain)\npicking this:\n  Infer CC D E \\<in> inferences_from N", "have \"E \\<in> concls_of (inferences_from N)\""], ["proof (prove)\nusing this:\n  Infer CC D E \\<in> inferences_from N\n\ngoal (1 subgoal):\n 1. E \\<in> concls_of (inferences_from N)", "unfolding image_iff"], ["proof (prove)\nusing this:\n  Infer CC D E \\<in> inferences_from N\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>inferences_from N. E = concl_of x", "by (metis inference.sel(3))"], ["proof (state)\nthis:\n  E \\<in> concls_of (inferences_from N)\n\ngoal (1 subgoal):\n 1. E \\<in> N", "then"], ["proof (chain)\npicking this:\n  E \\<in> concls_of (inferences_from N)", "show \"E \\<in> N\""], ["proof (prove)\nusing this:\n  E \\<in> concls_of (inferences_from N)\n\ngoal (1 subgoal):\n 1. E \\<in> N", "using satur"], ["proof (prove)\nusing this:\n  E \\<in> concls_of (inferences_from N)\n  saturated N\n\ngoal (1 subgoal):\n 1. E \\<in> N", "unfolding saturated_def"], ["proof (prove)\nusing this:\n  E \\<in> concls_of (inferences_from N)\n  concls_of (inferences_from N) \\<subseteq> N\n\ngoal (1 subgoal):\n 1. E \\<in> N", "by blast"], ["proof (state)\nthis:\n  E \\<in> N\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>\nSatisfiability preservation is a weaker requirement than soundness.\n\\<close>"], ["", "locale sat_preserving_inference_system = inference_system +\n  assumes \\<Gamma>_sat_preserving: \"satisfiable N \\<Longrightarrow> satisfiable (N \\<union> concls_of (inferences_from N))\""], ["", "locale sound_inference_system = inference_system +\n  assumes \\<Gamma>_sound: \"Infer CC D E \\<in> \\<Gamma> \\<Longrightarrow> I \\<Turnstile>m CC \\<Longrightarrow> I \\<Turnstile> D \\<Longrightarrow> I \\<Turnstile> E\"\nbegin"], ["", "lemma \\<Gamma>_sat_preserving:\n  assumes sat_n: \"satisfiable N\"\n  shows \"satisfiable (N \\<union> concls_of (inferences_from N))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfiable (N \\<union> concls_of (inferences_from N))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. satisfiable (N \\<union> concls_of (inferences_from N))", "obtain I where i: \"I \\<Turnstile>s N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>I. I \\<Turnstile>s N \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using sat_n"], ["proof (prove)\nusing this:\n  satisfiable N\n\ngoal (1 subgoal):\n 1. (\\<And>I. I \\<Turnstile>s N \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  I \\<Turnstile>s N\n\ngoal (1 subgoal):\n 1. satisfiable (N \\<union> concls_of (inferences_from N))", "then"], ["proof (chain)\npicking this:\n  I \\<Turnstile>s N", "have \"\\<And>CC D E. Infer CC D E \\<in> \\<Gamma> \\<Longrightarrow> set_mset CC \\<subseteq> N \\<Longrightarrow> D \\<in> N \\<Longrightarrow> I \\<Turnstile> E\""], ["proof (prove)\nusing this:\n  I \\<Turnstile>s N\n\ngoal (1 subgoal):\n 1. \\<And>CC D E.\n       \\<lbrakk>Infer CC D E \\<in> \\<Gamma>; set_mset CC \\<subseteq> N;\n        D \\<in> N\\<rbrakk>\n       \\<Longrightarrow> I \\<Turnstile> E", "using \\<Gamma>_sound"], ["proof (prove)\nusing this:\n  I \\<Turnstile>s N\n  \\<lbrakk>Infer ?CC ?D ?E \\<in> \\<Gamma>; ?I \\<Turnstile>m ?CC;\n   ?I \\<Turnstile> ?D\\<rbrakk>\n  \\<Longrightarrow> ?I \\<Turnstile> ?E\n\ngoal (1 subgoal):\n 1. \\<And>CC D E.\n       \\<lbrakk>Infer CC D E \\<in> \\<Gamma>; set_mset CC \\<subseteq> N;\n        D \\<in> N\\<rbrakk>\n       \\<Longrightarrow> I \\<Turnstile> E", "unfolding true_clss_def true_cls_mset_def"], ["proof (prove)\nusing this:\n  Ball N ((\\<Turnstile>) I)\n  \\<lbrakk>Infer ?CC ?D ?E \\<in> \\<Gamma>;\n   Multiset.Ball ?CC ((\\<Turnstile>) ?I); ?I \\<Turnstile> ?D\\<rbrakk>\n  \\<Longrightarrow> ?I \\<Turnstile> ?E\n\ngoal (1 subgoal):\n 1. \\<And>CC D E.\n       \\<lbrakk>Infer CC D E \\<in> \\<Gamma>; set_mset CC \\<subseteq> N;\n        D \\<in> N\\<rbrakk>\n       \\<Longrightarrow> I \\<Turnstile> E", "by (simp add: subset_eq)"], ["proof (state)\nthis:\n  \\<lbrakk>Infer ?CC ?D ?E \\<in> \\<Gamma>; set_mset ?CC \\<subseteq> N;\n   ?D \\<in> N\\<rbrakk>\n  \\<Longrightarrow> I \\<Turnstile> ?E\n\ngoal (1 subgoal):\n 1. satisfiable (N \\<union> concls_of (inferences_from N))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>Infer ?CC ?D ?E \\<in> \\<Gamma>; set_mset ?CC \\<subseteq> N;\n   ?D \\<in> N\\<rbrakk>\n  \\<Longrightarrow> I \\<Turnstile> ?E", "have \"\\<And>\\<gamma>. \\<gamma> \\<in> \\<Gamma> \\<Longrightarrow> infer_from N \\<gamma> \\<Longrightarrow> I \\<Turnstile> concl_of \\<gamma>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>Infer ?CC ?D ?E \\<in> \\<Gamma>; set_mset ?CC \\<subseteq> N;\n   ?D \\<in> N\\<rbrakk>\n  \\<Longrightarrow> I \\<Turnstile> ?E\n\ngoal (1 subgoal):\n 1. \\<And>\\<gamma>.\n       \\<lbrakk>\\<gamma> \\<in> \\<Gamma>; infer_from N \\<gamma>\\<rbrakk>\n       \\<Longrightarrow> I \\<Turnstile> concl_of \\<gamma>", "unfolding infer_from_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>Infer ?CC ?D ?E \\<in> \\<Gamma>; set_mset ?CC \\<subseteq> N;\n   ?D \\<in> N\\<rbrakk>\n  \\<Longrightarrow> I \\<Turnstile> ?E\n\ngoal (1 subgoal):\n 1. \\<And>\\<gamma>.\n       \\<lbrakk>\\<gamma> \\<in> \\<Gamma>;\n        set_mset (prems_of \\<gamma>) \\<subseteq> N\\<rbrakk>\n       \\<Longrightarrow> I \\<Turnstile> concl_of \\<gamma>", "by (case_tac \\<gamma>) clarsimp"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<gamma> \\<in> \\<Gamma>; infer_from N ?\\<gamma>\\<rbrakk>\n  \\<Longrightarrow> I \\<Turnstile> concl_of ?\\<gamma>\n\ngoal (1 subgoal):\n 1. satisfiable (N \\<union> concls_of (inferences_from N))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?\\<gamma> \\<in> \\<Gamma>; infer_from N ?\\<gamma>\\<rbrakk>\n  \\<Longrightarrow> I \\<Turnstile> concl_of ?\\<gamma>", "have \"I \\<Turnstile>s concls_of (inferences_from N)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<gamma> \\<in> \\<Gamma>; infer_from N ?\\<gamma>\\<rbrakk>\n  \\<Longrightarrow> I \\<Turnstile> concl_of ?\\<gamma>\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s concls_of (inferences_from N)", "unfolding inferences_from_def image_def true_clss_def infer_from_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<gamma> \\<in> \\<Gamma>;\n   set_mset (prems_of ?\\<gamma>) \\<subseteq> N\\<rbrakk>\n  \\<Longrightarrow> I \\<Turnstile> concl_of ?\\<gamma>\n\ngoal (1 subgoal):\n 1. Ball\n     {y. \\<exists>x\\<in>{\\<gamma> \\<in> \\<Gamma>.\n                         set_mset (prems_of \\<gamma>) \\<subseteq> N}.\n            y = concl_of x}\n     ((\\<Turnstile>) I)", "by blast"], ["proof (state)\nthis:\n  I \\<Turnstile>s concls_of (inferences_from N)\n\ngoal (1 subgoal):\n 1. satisfiable (N \\<union> concls_of (inferences_from N))", "then"], ["proof (chain)\npicking this:\n  I \\<Turnstile>s concls_of (inferences_from N)", "have \"I \\<Turnstile>s N \\<union> concls_of (inferences_from N)\""], ["proof (prove)\nusing this:\n  I \\<Turnstile>s concls_of (inferences_from N)\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s N \\<union> concls_of (inferences_from N)", "using i"], ["proof (prove)\nusing this:\n  I \\<Turnstile>s concls_of (inferences_from N)\n  I \\<Turnstile>s N\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s N \\<union> concls_of (inferences_from N)", "by simp"], ["proof (state)\nthis:\n  I \\<Turnstile>s N \\<union> concls_of (inferences_from N)\n\ngoal (1 subgoal):\n 1. satisfiable (N \\<union> concls_of (inferences_from N))", "then"], ["proof (chain)\npicking this:\n  I \\<Turnstile>s N \\<union> concls_of (inferences_from N)", "show ?thesis"], ["proof (prove)\nusing this:\n  I \\<Turnstile>s N \\<union> concls_of (inferences_from N)\n\ngoal (1 subgoal):\n 1. satisfiable (N \\<union> concls_of (inferences_from N))", "by blast"], ["proof (state)\nthis:\n  satisfiable (N \\<union> concls_of (inferences_from N))\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale sat_preserving_inference_system"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_preserving_inference_system \\<Gamma>", "by unfold_locales (erule \\<Gamma>_sat_preserving)"], ["", "end"], ["", "locale reductive_inference_system = inference_system \\<Gamma> for \\<Gamma> :: \"('a :: wellorder) inference set\" +\n  assumes \\<Gamma>_reductive: \"\\<gamma> \\<in> \\<Gamma> \\<Longrightarrow> concl_of \\<gamma> < main_prem_of \\<gamma>\""], ["", "subsection \\<open>Refutational Completeness\\<close>"], ["", "text \\<open>\nRefutational completeness can be established once and for all for counterexample-reducing inference\nsystems. The material formalized here draws from both the general framework of Section 4.2 and the\nconcrete instances of Section 3.\n\\<close>"], ["", "locale counterex_reducing_inference_system =\n  inference_system \\<Gamma> for \\<Gamma> :: \"('a :: wellorder) inference set\" +\n  fixes I_of :: \"'a clause set \\<Rightarrow> 'a interp\"\n  assumes \\<Gamma>_counterex_reducing:\n    \"{#} \\<notin> N \\<Longrightarrow> D \\<in> N \\<Longrightarrow> \\<not> I_of N \\<Turnstile> D \\<Longrightarrow> (\\<And>C. C \\<in> N \\<Longrightarrow> \\<not> I_of N \\<Turnstile> C \\<Longrightarrow> D \\<le> C) \\<Longrightarrow>\n     \\<exists>CC E. set_mset CC \\<subseteq> N \\<and> I_of N \\<Turnstile>m CC \\<and> Infer CC D E \\<in> \\<Gamma> \\<and> \\<not> I_of N \\<Turnstile> E \\<and> E < D\"\nbegin"], ["", "lemma ex_min_counterex:\n  fixes N :: \"('a :: wellorder) clause set\"\n  assumes \"\\<not> I \\<Turnstile>s N\"\n  shows \"\\<exists>C \\<in> N. \\<not> I \\<Turnstile> C \\<and> (\\<forall>D \\<in> N. D < C \\<longrightarrow> I \\<Turnstile> D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>C\\<in>N.\n       \\<not> I \\<Turnstile> C \\<and>\n       (\\<forall>D\\<in>N. D < C \\<longrightarrow> I \\<Turnstile> D)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>C\\<in>N.\n       \\<not> I \\<Turnstile> C \\<and>\n       (\\<forall>D\\<in>N. D < C \\<longrightarrow> I \\<Turnstile> D)", "obtain C where \"C \\<in> N\" and \"\\<not> I \\<Turnstile> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>C \\<in> N; \\<not> I \\<Turnstile> C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  \\<not> I \\<Turnstile>s N\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>C \\<in> N; \\<not> I \\<Turnstile> C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding true_clss_def"], ["proof (prove)\nusing this:\n  \\<not> Ball N ((\\<Turnstile>) I)\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>C \\<in> N; \\<not> I \\<Turnstile> C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  C \\<in> N\n  \\<not> I \\<Turnstile> C\n\ngoal (1 subgoal):\n 1. \\<exists>C\\<in>N.\n       \\<not> I \\<Turnstile> C \\<and>\n       (\\<forall>D\\<in>N. D < C \\<longrightarrow> I \\<Turnstile> D)", "then"], ["proof (chain)\npicking this:\n  C \\<in> N\n  \\<not> I \\<Turnstile> C", "have c_in: \"C \\<in> {C \\<in> N. \\<not> I \\<Turnstile> C}\""], ["proof (prove)\nusing this:\n  C \\<in> N\n  \\<not> I \\<Turnstile> C\n\ngoal (1 subgoal):\n 1. C \\<in> {C \\<in> N. \\<not> I \\<Turnstile> C}", "by blast"], ["proof (state)\nthis:\n  C \\<in> {C \\<in> N. \\<not> I \\<Turnstile> C}\n\ngoal (1 subgoal):\n 1. \\<exists>C\\<in>N.\n       \\<not> I \\<Turnstile> C \\<and>\n       (\\<forall>D\\<in>N. D < C \\<longrightarrow> I \\<Turnstile> D)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>C\\<in>N.\n       \\<not> I \\<Turnstile> C \\<and>\n       (\\<forall>D\\<in>N. D < C \\<longrightarrow> I \\<Turnstile> D)", "using wf_eq_minimal[THEN iffD1, rule_format, OF wf_less_multiset c_in]"], ["proof (prove)\nusing this:\n  \\<exists>z\\<in>{C \\<in> N. \\<not> I \\<Turnstile> C}.\n     \\<forall>y.\n        (y, z) \\<in> {(M, N). M < N} \\<longrightarrow>\n        y \\<notin> {C \\<in> N. \\<not> I \\<Turnstile> C}\n\ngoal (1 subgoal):\n 1. \\<exists>C\\<in>N.\n       \\<not> I \\<Turnstile> C \\<and>\n       (\\<forall>D\\<in>N. D < C \\<longrightarrow> I \\<Turnstile> D)", "by blast"], ["proof (state)\nthis:\n  \\<exists>C\\<in>N.\n     \\<not> I \\<Turnstile> C \\<and>\n     (\\<forall>D\\<in>N. D < C \\<longrightarrow> I \\<Turnstile> D)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Theorem 4.4 (generalizes Theorems 3.9 and 3.16) *)"], ["", "theorem saturated_model:\n  assumes\n    satur: \"saturated N\" and\n    ec_ni_n: \"{#} \\<notin> N\"\n  shows \"I_of N \\<Turnstile>s N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I_of N \\<Turnstile>s N", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. I_of N \\<Turnstile>s N", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. I_of N \\<Turnstile>s N", "assume \"\\<not> I_of N \\<Turnstile>s N\""], ["proof (state)\nthis:\n  \\<not> I_of N \\<Turnstile>s N\n\ngoal (1 subgoal):\n 1. I_of N \\<Turnstile>s N", "then"], ["proof (chain)\npicking this:\n  \\<not> I_of N \\<Turnstile>s N", "obtain D where\n      d_in_n: \"D \\<in> N\" and\n      d_cex: \"\\<not> I_of N \\<Turnstile> D\" and\n      d_min: \"\\<And>C. C \\<in> N \\<Longrightarrow> C < D \\<Longrightarrow> I_of N \\<Turnstile> C\""], ["proof (prove)\nusing this:\n  \\<not> I_of N \\<Turnstile>s N\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        \\<lbrakk>D \\<in> N; \\<not> I_of N \\<Turnstile> D;\n         \\<And>C.\n            \\<lbrakk>C \\<in> N; C < D\\<rbrakk>\n            \\<Longrightarrow> I_of N \\<Turnstile> C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson ex_min_counterex)"], ["proof (state)\nthis:\n  D \\<in> N\n  \\<not> I_of N \\<Turnstile> D\n  \\<lbrakk>?C \\<in> N; ?C < D\\<rbrakk>\n  \\<Longrightarrow> I_of N \\<Turnstile> ?C\n\ngoal (1 subgoal):\n 1. I_of N \\<Turnstile>s N", "then"], ["proof (chain)\npicking this:\n  D \\<in> N\n  \\<not> I_of N \\<Turnstile> D\n  \\<lbrakk>?C \\<in> N; ?C < D\\<rbrakk>\n  \\<Longrightarrow> I_of N \\<Turnstile> ?C", "obtain CC E where\n      cc_subs_n: \"set_mset CC \\<subseteq> N\" and\n      inf_e: \"Infer CC D E \\<in> \\<Gamma>\" and\n      e_cex: \"\\<not> I_of N \\<Turnstile> E\" and\n      e_lt_d: \"E < D\""], ["proof (prove)\nusing this:\n  D \\<in> N\n  \\<not> I_of N \\<Turnstile> D\n  \\<lbrakk>?C \\<in> N; ?C < D\\<rbrakk>\n  \\<Longrightarrow> I_of N \\<Turnstile> ?C\n\ngoal (1 subgoal):\n 1. (\\<And>CC E.\n        \\<lbrakk>set_mset CC \\<subseteq> N; Infer CC D E \\<in> \\<Gamma>;\n         \\<not> I_of N \\<Turnstile> E; E < D\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<Gamma>_counterex_reducing[OF ec_ni_n] not_less"], ["proof (prove)\nusing this:\n  D \\<in> N\n  \\<not> I_of N \\<Turnstile> D\n  \\<lbrakk>?C \\<in> N; ?C < D\\<rbrakk>\n  \\<Longrightarrow> I_of N \\<Turnstile> ?C\n  \\<lbrakk>?D \\<in> N; \\<not> I_of N \\<Turnstile> ?D;\n   \\<And>C.\n      \\<lbrakk>C \\<in> N; \\<not> I_of N \\<Turnstile> C\\<rbrakk>\n      \\<Longrightarrow> ?D \\<le> C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>CC E.\n                       set_mset CC \\<subseteq> N \\<and>\n                       I_of N \\<Turnstile>m CC \\<and>\n                       Infer CC ?D E \\<in> \\<Gamma> \\<and>\n                       \\<not> I_of N \\<Turnstile> E \\<and> E < ?D\n  (\\<not> ?x < ?y) = (?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. (\\<And>CC E.\n        \\<lbrakk>set_mset CC \\<subseteq> N; Infer CC D E \\<in> \\<Gamma>;\n         \\<not> I_of N \\<Turnstile> E; E < D\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  set_mset CC \\<subseteq> N\n  Infer CC D E \\<in> \\<Gamma>\n  \\<not> I_of N \\<Turnstile> E\n  E < D\n\ngoal (1 subgoal):\n 1. I_of N \\<Turnstile>s N", "from cc_subs_n inf_e"], ["proof (chain)\npicking this:\n  set_mset CC \\<subseteq> N\n  Infer CC D E \\<in> \\<Gamma>", "have \"E \\<in> N\""], ["proof (prove)\nusing this:\n  set_mset CC \\<subseteq> N\n  Infer CC D E \\<in> \\<Gamma>\n\ngoal (1 subgoal):\n 1. E \\<in> N", "using d_in_n satur"], ["proof (prove)\nusing this:\n  set_mset CC \\<subseteq> N\n  Infer CC D E \\<in> \\<Gamma>\n  D \\<in> N\n  saturated N\n\ngoal (1 subgoal):\n 1. E \\<in> N", "by (blast dest: saturatedD)"], ["proof (state)\nthis:\n  E \\<in> N\n\ngoal (1 subgoal):\n 1. I_of N \\<Turnstile>s N", "then"], ["proof (chain)\npicking this:\n  E \\<in> N", "have False"], ["proof (prove)\nusing this:\n  E \\<in> N\n\ngoal (1 subgoal):\n 1. False", "using e_cex e_lt_d d_min not_less"], ["proof (prove)\nusing this:\n  E \\<in> N\n  \\<not> I_of N \\<Turnstile> E\n  E < D\n  \\<lbrakk>?C \\<in> N; ?C < D\\<rbrakk>\n  \\<Longrightarrow> I_of N \\<Turnstile> ?C\n  (\\<not> ?x < ?y) = (?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. I_of N \\<Turnstile>s N", "}"], ["proof (state)\nthis:\n  \\<not> I_of N \\<Turnstile>s N \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. I_of N \\<Turnstile>s N", "then"], ["proof (chain)\npicking this:\n  \\<not> I_of N \\<Turnstile>s N \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> I_of N \\<Turnstile>s N \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. I_of N \\<Turnstile>s N", "by satx"], ["proof (state)\nthis:\n  I_of N \\<Turnstile>s N\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nCf. Corollary 3.10:\n\\<close>"], ["", "corollary saturated_complete: \"saturated N \\<Longrightarrow> \\<not> satisfiable N \\<Longrightarrow> {#} \\<in> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>saturated N; \\<not> satisfiable N\\<rbrakk>\n    \\<Longrightarrow> {#} \\<in> N", "using saturated_model"], ["proof (prove)\nusing this:\n  \\<lbrakk>saturated ?N; {#} \\<notin> ?N\\<rbrakk>\n  \\<Longrightarrow> I_of ?N \\<Turnstile>s ?N\n\ngoal (1 subgoal):\n 1. \\<lbrakk>saturated N; \\<not> satisfiable N\\<rbrakk>\n    \\<Longrightarrow> {#} \\<in> N", "by blast"], ["", "end"], ["", "subsection \\<open>Compactness\\<close>"], ["", "text \\<open>\nBachmair and Ganzinger claim that compactness follows from refutational completeness but leave the\nproof to the readers' imagination. Our proof relies on an inductive definition of saturation in\nterms of a base set of clauses.\n\\<close>"], ["", "context inference_system\nbegin"], ["", "inductive_set saturate :: \"'a clause set \\<Rightarrow> 'a clause set\" for CC :: \"'a clause set\" where\n  base: \"C \\<in> CC \\<Longrightarrow> C \\<in> saturate CC\"\n| step: \"Infer CC' D E \\<in> \\<Gamma> \\<Longrightarrow> (\\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC) \\<Longrightarrow> D \\<in> saturate CC \\<Longrightarrow>\n    E \\<in> saturate CC\""], ["", "lemma saturate_mono: \"C \\<in> saturate CC \\<Longrightarrow> CC \\<subseteq> DD \\<Longrightarrow> C \\<in> saturate DD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> saturate CC; CC \\<subseteq> DD\\<rbrakk>\n    \\<Longrightarrow> C \\<in> saturate DD", "by (induct rule: saturate.induct) (auto intro: saturate.intros)"], ["", "lemma saturated_saturate[simp, intro]: \"saturated (saturate N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. saturated (saturate N)", "unfolding saturated_def inferences_from_def infer_from_def image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>{\\<gamma> \\<in> \\<Gamma>.\n                        set_mset (prems_of \\<gamma>)\n                        \\<subseteq> saturate N}.\n           y = concl_of x}\n    \\<subseteq> saturate N", "by clarify (rename_tac x, case_tac x, auto elim!: saturate.step)"], ["", "lemma saturate_finite: \"C \\<in> saturate CC \\<Longrightarrow> \\<exists>DD. DD \\<subseteq> CC \\<and> finite DD \\<and> C \\<in> saturate DD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> saturate CC \\<Longrightarrow>\n    \\<exists>DD\\<subseteq>CC. finite DD \\<and> C \\<in> saturate DD", "proof (induct rule: saturate.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C.\n       C \\<in> CC \\<Longrightarrow>\n       \\<exists>DD\\<subseteq>CC. finite DD \\<and> C \\<in> saturate DD\n 2. \\<And>CC' D E.\n       \\<lbrakk>Infer CC' D E \\<in> \\<Gamma>;\n        \\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC;\n        \\<And>C'.\n           C' \\<in># CC' \\<Longrightarrow>\n           \\<exists>DD\\<subseteq>CC. finite DD \\<and> C' \\<in> saturate DD;\n        D \\<in> saturate CC;\n        \\<exists>DD\\<subseteq>CC.\n           finite DD \\<and> D \\<in> saturate DD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>CC.\n                            finite DD \\<and> E \\<in> saturate DD", "case (base C)"], ["proof (state)\nthis:\n  C \\<in> CC\n\ngoal (2 subgoals):\n 1. \\<And>C.\n       C \\<in> CC \\<Longrightarrow>\n       \\<exists>DD\\<subseteq>CC. finite DD \\<and> C \\<in> saturate DD\n 2. \\<And>CC' D E.\n       \\<lbrakk>Infer CC' D E \\<in> \\<Gamma>;\n        \\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC;\n        \\<And>C'.\n           C' \\<in># CC' \\<Longrightarrow>\n           \\<exists>DD\\<subseteq>CC. finite DD \\<and> C' \\<in> saturate DD;\n        D \\<in> saturate CC;\n        \\<exists>DD\\<subseteq>CC.\n           finite DD \\<and> D \\<in> saturate DD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>CC.\n                            finite DD \\<and> E \\<in> saturate DD", "then"], ["proof (chain)\npicking this:\n  C \\<in> CC", "have \"{C} \\<subseteq> CC\" and \"finite {C}\" and \"C \\<in> saturate {C}\""], ["proof (prove)\nusing this:\n  C \\<in> CC\n\ngoal (1 subgoal):\n 1. {C} \\<subseteq> CC &&& finite {C} &&& C \\<in> saturate {C}", "by (auto intro: saturate.intros)"], ["proof (state)\nthis:\n  {C} \\<subseteq> CC\n  finite {C}\n  C \\<in> saturate {C}\n\ngoal (2 subgoals):\n 1. \\<And>C.\n       C \\<in> CC \\<Longrightarrow>\n       \\<exists>DD\\<subseteq>CC. finite DD \\<and> C \\<in> saturate DD\n 2. \\<And>CC' D E.\n       \\<lbrakk>Infer CC' D E \\<in> \\<Gamma>;\n        \\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC;\n        \\<And>C'.\n           C' \\<in># CC' \\<Longrightarrow>\n           \\<exists>DD\\<subseteq>CC. finite DD \\<and> C' \\<in> saturate DD;\n        D \\<in> saturate CC;\n        \\<exists>DD\\<subseteq>CC.\n           finite DD \\<and> D \\<in> saturate DD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>CC.\n                            finite DD \\<and> E \\<in> saturate DD", "then"], ["proof (chain)\npicking this:\n  {C} \\<subseteq> CC\n  finite {C}\n  C \\<in> saturate {C}", "show ?case"], ["proof (prove)\nusing this:\n  {C} \\<subseteq> CC\n  finite {C}\n  C \\<in> saturate {C}\n\ngoal (1 subgoal):\n 1. \\<exists>DD\\<subseteq>CC. finite DD \\<and> C \\<in> saturate DD", "by blast"], ["proof (state)\nthis:\n  \\<exists>DD\\<subseteq>CC. finite DD \\<and> C \\<in> saturate DD\n\ngoal (1 subgoal):\n 1. \\<And>CC' D E.\n       \\<lbrakk>Infer CC' D E \\<in> \\<Gamma>;\n        \\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC;\n        \\<And>C'.\n           C' \\<in># CC' \\<Longrightarrow>\n           \\<exists>DD\\<subseteq>CC. finite DD \\<and> C' \\<in> saturate DD;\n        D \\<in> saturate CC;\n        \\<exists>DD\\<subseteq>CC.\n           finite DD \\<and> D \\<in> saturate DD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>CC.\n                            finite DD \\<and> E \\<in> saturate DD", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>CC' D E.\n       \\<lbrakk>Infer CC' D E \\<in> \\<Gamma>;\n        \\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC;\n        \\<And>C'.\n           C' \\<in># CC' \\<Longrightarrow>\n           \\<exists>DD\\<subseteq>CC. finite DD \\<and> C' \\<in> saturate DD;\n        D \\<in> saturate CC;\n        \\<exists>DD\\<subseteq>CC.\n           finite DD \\<and> D \\<in> saturate DD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>CC.\n                            finite DD \\<and> E \\<in> saturate DD", "case (step CC' D E)"], ["proof (state)\nthis:\n  Infer CC' D E \\<in> \\<Gamma>\n  ?C' \\<in># CC' \\<Longrightarrow> ?C' \\<in> saturate CC\n  ?C' \\<in># CC' \\<Longrightarrow>\n  \\<exists>DD\\<subseteq>CC. finite DD \\<and> ?C' \\<in> saturate DD\n  D \\<in> saturate CC\n  \\<exists>DD\\<subseteq>CC. finite DD \\<and> D \\<in> saturate DD\n\ngoal (1 subgoal):\n 1. \\<And>CC' D E.\n       \\<lbrakk>Infer CC' D E \\<in> \\<Gamma>;\n        \\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC;\n        \\<And>C'.\n           C' \\<in># CC' \\<Longrightarrow>\n           \\<exists>DD\\<subseteq>CC. finite DD \\<and> C' \\<in> saturate DD;\n        D \\<in> saturate CC;\n        \\<exists>DD\\<subseteq>CC.\n           finite DD \\<and> D \\<in> saturate DD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>CC.\n                            finite DD \\<and> E \\<in> saturate DD", "obtain DD_of where\n    \"\\<And>C. C \\<in># CC' \\<Longrightarrow> DD_of C \\<subseteq> CC \\<and> finite (DD_of C) \\<and> C \\<in> saturate (DD_of C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>DD_of.\n        (\\<And>C.\n            C \\<in># CC' \\<Longrightarrow>\n            DD_of C \\<subseteq> CC \\<and>\n            finite (DD_of C) \\<and>\n            C \\<in> saturate (DD_of C)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using step(3)"], ["proof (prove)\nusing this:\n  ?C' \\<in># CC' \\<Longrightarrow>\n  \\<exists>DD\\<subseteq>CC. finite DD \\<and> ?C' \\<in> saturate DD\n\ngoal (1 subgoal):\n 1. (\\<And>DD_of.\n        (\\<And>C.\n            C \\<in># CC' \\<Longrightarrow>\n            DD_of C \\<subseteq> CC \\<and>\n            finite (DD_of C) \\<and>\n            C \\<in> saturate (DD_of C)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  ?C \\<in># CC' \\<Longrightarrow>\n  DD_of ?C \\<subseteq> CC \\<and>\n  finite (DD_of ?C) \\<and> ?C \\<in> saturate (DD_of ?C)\n\ngoal (1 subgoal):\n 1. \\<And>CC' D E.\n       \\<lbrakk>Infer CC' D E \\<in> \\<Gamma>;\n        \\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC;\n        \\<And>C'.\n           C' \\<in># CC' \\<Longrightarrow>\n           \\<exists>DD\\<subseteq>CC. finite DD \\<and> C' \\<in> saturate DD;\n        D \\<in> saturate CC;\n        \\<exists>DD\\<subseteq>CC.\n           finite DD \\<and> D \\<in> saturate DD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>CC.\n                            finite DD \\<and> E \\<in> saturate DD", "then"], ["proof (chain)\npicking this:\n  ?C \\<in># CC' \\<Longrightarrow>\n  DD_of ?C \\<subseteq> CC \\<and>\n  finite (DD_of ?C) \\<and> ?C \\<in> saturate (DD_of ?C)", "have\n    \"(\\<Union>C \\<in> set_mset CC'. DD_of C) \\<subseteq> CC\"\n    \"finite (\\<Union>C \\<in> set_mset CC'. DD_of C) \\<and> set_mset CC' \\<subseteq> saturate (\\<Union>C \\<in> set_mset CC'. DD_of C)\""], ["proof (prove)\nusing this:\n  ?C \\<in># CC' \\<Longrightarrow>\n  DD_of ?C \\<subseteq> CC \\<and>\n  finite (DD_of ?C) \\<and> ?C \\<in> saturate (DD_of ?C)\n\ngoal (1 subgoal):\n 1. \\<Union> (DD_of ` set_mset CC') \\<subseteq> CC &&&\n    finite (\\<Union> (DD_of ` set_mset CC')) \\<and>\n    set_mset CC' \\<subseteq> saturate (\\<Union> (DD_of ` set_mset CC'))", "by (auto intro: saturate_mono)"], ["proof (state)\nthis:\n  \\<Union> (DD_of ` set_mset CC') \\<subseteq> CC\n  finite (\\<Union> (DD_of ` set_mset CC')) \\<and>\n  set_mset CC' \\<subseteq> saturate (\\<Union> (DD_of ` set_mset CC'))\n\ngoal (1 subgoal):\n 1. \\<And>CC' D E.\n       \\<lbrakk>Infer CC' D E \\<in> \\<Gamma>;\n        \\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC;\n        \\<And>C'.\n           C' \\<in># CC' \\<Longrightarrow>\n           \\<exists>DD\\<subseteq>CC. finite DD \\<and> C' \\<in> saturate DD;\n        D \\<in> saturate CC;\n        \\<exists>DD\\<subseteq>CC.\n           finite DD \\<and> D \\<in> saturate DD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>CC.\n                            finite DD \\<and> E \\<in> saturate DD", "then"], ["proof (chain)\npicking this:\n  \\<Union> (DD_of ` set_mset CC') \\<subseteq> CC\n  finite (\\<Union> (DD_of ` set_mset CC')) \\<and>\n  set_mset CC' \\<subseteq> saturate (\\<Union> (DD_of ` set_mset CC'))", "obtain DD where\n    d_sub: \"DD \\<subseteq> CC\" and d_fin: \"finite DD\" and in_sat_d: \"set_mset CC' \\<subseteq> saturate DD\""], ["proof (prove)\nusing this:\n  \\<Union> (DD_of ` set_mset CC') \\<subseteq> CC\n  finite (\\<Union> (DD_of ` set_mset CC')) \\<and>\n  set_mset CC' \\<subseteq> saturate (\\<Union> (DD_of ` set_mset CC'))\n\ngoal (1 subgoal):\n 1. (\\<And>DD.\n        \\<lbrakk>DD \\<subseteq> CC; finite DD;\n         set_mset CC' \\<subseteq> saturate DD\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  DD \\<subseteq> CC\n  finite DD\n  set_mset CC' \\<subseteq> saturate DD\n\ngoal (1 subgoal):\n 1. \\<And>CC' D E.\n       \\<lbrakk>Infer CC' D E \\<in> \\<Gamma>;\n        \\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC;\n        \\<And>C'.\n           C' \\<in># CC' \\<Longrightarrow>\n           \\<exists>DD\\<subseteq>CC. finite DD \\<and> C' \\<in> saturate DD;\n        D \\<in> saturate CC;\n        \\<exists>DD\\<subseteq>CC.\n           finite DD \\<and> D \\<in> saturate DD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>CC.\n                            finite DD \\<and> E \\<in> saturate DD", "obtain EE where\n    e_sub: \"EE \\<subseteq> CC\" and e_fin: \"finite EE\" and in_sat_ee: \"D \\<in> saturate EE\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>EE.\n        \\<lbrakk>EE \\<subseteq> CC; finite EE; D \\<in> saturate EE\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using step(5)"], ["proof (prove)\nusing this:\n  \\<exists>DD\\<subseteq>CC. finite DD \\<and> D \\<in> saturate DD\n\ngoal (1 subgoal):\n 1. (\\<And>EE.\n        \\<lbrakk>EE \\<subseteq> CC; finite EE; D \\<in> saturate EE\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  EE \\<subseteq> CC\n  finite EE\n  D \\<in> saturate EE\n\ngoal (1 subgoal):\n 1. \\<And>CC' D E.\n       \\<lbrakk>Infer CC' D E \\<in> \\<Gamma>;\n        \\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC;\n        \\<And>C'.\n           C' \\<in># CC' \\<Longrightarrow>\n           \\<exists>DD\\<subseteq>CC. finite DD \\<and> C' \\<in> saturate DD;\n        D \\<in> saturate CC;\n        \\<exists>DD\\<subseteq>CC.\n           finite DD \\<and> D \\<in> saturate DD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>CC.\n                            finite DD \\<and> E \\<in> saturate DD", "have \"DD \\<union> EE \\<subseteq> CC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DD \\<union> EE \\<subseteq> CC", "using d_sub e_sub step(1)"], ["proof (prove)\nusing this:\n  DD \\<subseteq> CC\n  EE \\<subseteq> CC\n  Infer CC' D E \\<in> \\<Gamma>\n\ngoal (1 subgoal):\n 1. DD \\<union> EE \\<subseteq> CC", "by fast"], ["proof (state)\nthis:\n  DD \\<union> EE \\<subseteq> CC\n\ngoal (1 subgoal):\n 1. \\<And>CC' D E.\n       \\<lbrakk>Infer CC' D E \\<in> \\<Gamma>;\n        \\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC;\n        \\<And>C'.\n           C' \\<in># CC' \\<Longrightarrow>\n           \\<exists>DD\\<subseteq>CC. finite DD \\<and> C' \\<in> saturate DD;\n        D \\<in> saturate CC;\n        \\<exists>DD\\<subseteq>CC.\n           finite DD \\<and> D \\<in> saturate DD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>CC.\n                            finite DD \\<and> E \\<in> saturate DD", "moreover"], ["proof (state)\nthis:\n  DD \\<union> EE \\<subseteq> CC\n\ngoal (1 subgoal):\n 1. \\<And>CC' D E.\n       \\<lbrakk>Infer CC' D E \\<in> \\<Gamma>;\n        \\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC;\n        \\<And>C'.\n           C' \\<in># CC' \\<Longrightarrow>\n           \\<exists>DD\\<subseteq>CC. finite DD \\<and> C' \\<in> saturate DD;\n        D \\<in> saturate CC;\n        \\<exists>DD\\<subseteq>CC.\n           finite DD \\<and> D \\<in> saturate DD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>CC.\n                            finite DD \\<and> E \\<in> saturate DD", "have \"finite (DD \\<union> EE)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (DD \\<union> EE)", "using d_fin e_fin"], ["proof (prove)\nusing this:\n  finite DD\n  finite EE\n\ngoal (1 subgoal):\n 1. finite (DD \\<union> EE)", "by fast"], ["proof (state)\nthis:\n  finite (DD \\<union> EE)\n\ngoal (1 subgoal):\n 1. \\<And>CC' D E.\n       \\<lbrakk>Infer CC' D E \\<in> \\<Gamma>;\n        \\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC;\n        \\<And>C'.\n           C' \\<in># CC' \\<Longrightarrow>\n           \\<exists>DD\\<subseteq>CC. finite DD \\<and> C' \\<in> saturate DD;\n        D \\<in> saturate CC;\n        \\<exists>DD\\<subseteq>CC.\n           finite DD \\<and> D \\<in> saturate DD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>CC.\n                            finite DD \\<and> E \\<in> saturate DD", "moreover"], ["proof (state)\nthis:\n  finite (DD \\<union> EE)\n\ngoal (1 subgoal):\n 1. \\<And>CC' D E.\n       \\<lbrakk>Infer CC' D E \\<in> \\<Gamma>;\n        \\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC;\n        \\<And>C'.\n           C' \\<in># CC' \\<Longrightarrow>\n           \\<exists>DD\\<subseteq>CC. finite DD \\<and> C' \\<in> saturate DD;\n        D \\<in> saturate CC;\n        \\<exists>DD\\<subseteq>CC.\n           finite DD \\<and> D \\<in> saturate DD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>CC.\n                            finite DD \\<and> E \\<in> saturate DD", "have \"E \\<in> saturate (DD \\<union> EE)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<in> saturate (DD \\<union> EE)", "using in_sat_d in_sat_ee step.hyps(1)"], ["proof (prove)\nusing this:\n  set_mset CC' \\<subseteq> saturate DD\n  D \\<in> saturate EE\n  Infer CC' D E \\<in> \\<Gamma>\n\ngoal (1 subgoal):\n 1. E \\<in> saturate (DD \\<union> EE)", "by (blast intro: inference_system.saturate.step saturate_mono)"], ["proof (state)\nthis:\n  E \\<in> saturate (DD \\<union> EE)\n\ngoal (1 subgoal):\n 1. \\<And>CC' D E.\n       \\<lbrakk>Infer CC' D E \\<in> \\<Gamma>;\n        \\<And>C'. C' \\<in># CC' \\<Longrightarrow> C' \\<in> saturate CC;\n        \\<And>C'.\n           C' \\<in># CC' \\<Longrightarrow>\n           \\<exists>DD\\<subseteq>CC. finite DD \\<and> C' \\<in> saturate DD;\n        D \\<in> saturate CC;\n        \\<exists>DD\\<subseteq>CC.\n           finite DD \\<and> D \\<in> saturate DD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>DD\\<subseteq>CC.\n                            finite DD \\<and> E \\<in> saturate DD", "ultimately"], ["proof (chain)\npicking this:\n  DD \\<union> EE \\<subseteq> CC\n  finite (DD \\<union> EE)\n  E \\<in> saturate (DD \\<union> EE)", "show ?case"], ["proof (prove)\nusing this:\n  DD \\<union> EE \\<subseteq> CC\n  finite (DD \\<union> EE)\n  E \\<in> saturate (DD \\<union> EE)\n\ngoal (1 subgoal):\n 1. \\<exists>DD\\<subseteq>CC. finite DD \\<and> E \\<in> saturate DD", "by blast"], ["proof (state)\nthis:\n  \\<exists>DD\\<subseteq>CC. finite DD \\<and> E \\<in> saturate DD\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context sound_inference_system\nbegin"], ["", "theorem saturate_sound: \"C \\<in> saturate CC \\<Longrightarrow> I \\<Turnstile>s CC \\<Longrightarrow> I \\<Turnstile> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> saturate CC; I \\<Turnstile>s CC\\<rbrakk>\n    \\<Longrightarrow> I \\<Turnstile> C", "by (induct rule: saturate.induct) (auto simp: true_cls_mset_def true_clss_def \\<Gamma>_sound)"], ["", "end"], ["", "context sat_preserving_inference_system\nbegin"], ["", "text \\<open>\nThis result surely holds, but we have yet to prove it. The challenge is: Every time a new clause is\nintroduced, we also get a new interpretation (by the definition of\n\\<open>sat_preserving_inference_system\\<close>). But the interpretation we want here is then the one that\nexists \"at the limit\". Maybe we can use compactness to prove it.\n\\<close>"], ["", "theorem saturate_sat_preserving: \"satisfiable CC \\<Longrightarrow> satisfiable (saturate CC)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfiable CC \\<Longrightarrow> satisfiable (saturate CC)", "oops"], ["", "end"], ["", "locale sound_counterex_reducing_inference_system =\n  counterex_reducing_inference_system + sound_inference_system\nbegin"], ["", "text \\<open>\nCompactness of clausal logic is stated as Theorem 3.12 for the case of unordered ground resolution.\nThe proof below is a generalization to any sound counterexample-reducing inference system. The\nactual theorem will become available once the locale has been instantiated with a concrete inference\nsystem.\n\\<close>"], ["", "theorem clausal_logic_compact:\n  fixes N :: \"('a :: wellorder) clause set\"\n  shows \"\\<not> satisfiable N \\<longleftrightarrow> (\\<exists>DD \\<subseteq> N. finite DD \\<and> \\<not> satisfiable DD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> satisfiable N) =\n    (\\<exists>DD\\<subseteq>N. finite DD \\<and> \\<not> satisfiable DD)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> satisfiable N \\<Longrightarrow>\n    \\<exists>DD\\<subseteq>N. finite DD \\<and> \\<not> satisfiable DD\n 2. \\<exists>DD\\<subseteq>N.\n       finite DD \\<and> \\<not> satisfiable DD \\<Longrightarrow>\n    \\<not> satisfiable N", "assume \"\\<not> satisfiable N\""], ["proof (state)\nthis:\n  \\<not> satisfiable N\n\ngoal (2 subgoals):\n 1. \\<not> satisfiable N \\<Longrightarrow>\n    \\<exists>DD\\<subseteq>N. finite DD \\<and> \\<not> satisfiable DD\n 2. \\<exists>DD\\<subseteq>N.\n       finite DD \\<and> \\<not> satisfiable DD \\<Longrightarrow>\n    \\<not> satisfiable N", "then"], ["proof (chain)\npicking this:\n  \\<not> satisfiable N", "have \"{#} \\<in> saturate N\""], ["proof (prove)\nusing this:\n  \\<not> satisfiable N\n\ngoal (1 subgoal):\n 1. {#} \\<in> saturate N", "using saturated_complete saturated_saturate saturate.base"], ["proof (prove)\nusing this:\n  \\<not> satisfiable N\n  \\<lbrakk>saturated ?N; \\<not> satisfiable ?N\\<rbrakk>\n  \\<Longrightarrow> {#} \\<in> ?N\n  saturated (saturate ?N)\n  ?C \\<in> ?CC \\<Longrightarrow> ?C \\<in> saturate ?CC\n\ngoal (1 subgoal):\n 1. {#} \\<in> saturate N", "unfolding true_clss_def"], ["proof (prove)\nusing this:\n  \\<nexists>I. Ball N ((\\<Turnstile>) I)\n  \\<lbrakk>saturated ?N; \\<nexists>I. Ball ?N ((\\<Turnstile>) I)\\<rbrakk>\n  \\<Longrightarrow> {#} \\<in> ?N\n  saturated (saturate ?N)\n  ?C \\<in> ?CC \\<Longrightarrow> ?C \\<in> saturate ?CC\n\ngoal (1 subgoal):\n 1. {#} \\<in> saturate N", "by meson"], ["proof (state)\nthis:\n  {#} \\<in> saturate N\n\ngoal (2 subgoals):\n 1. \\<not> satisfiable N \\<Longrightarrow>\n    \\<exists>DD\\<subseteq>N. finite DD \\<and> \\<not> satisfiable DD\n 2. \\<exists>DD\\<subseteq>N.\n       finite DD \\<and> \\<not> satisfiable DD \\<Longrightarrow>\n    \\<not> satisfiable N", "then"], ["proof (chain)\npicking this:\n  {#} \\<in> saturate N", "have \"\\<exists>DD \\<subseteq> N. finite DD \\<and> {#} \\<in> saturate DD\""], ["proof (prove)\nusing this:\n  {#} \\<in> saturate N\n\ngoal (1 subgoal):\n 1. \\<exists>DD\\<subseteq>N. finite DD \\<and> {#} \\<in> saturate DD", "using saturate_finite"], ["proof (prove)\nusing this:\n  {#} \\<in> saturate N\n  ?C \\<in> saturate ?CC \\<Longrightarrow>\n  \\<exists>DD\\<subseteq>?CC. finite DD \\<and> ?C \\<in> saturate DD\n\ngoal (1 subgoal):\n 1. \\<exists>DD\\<subseteq>N. finite DD \\<and> {#} \\<in> saturate DD", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>DD\\<subseteq>N. finite DD \\<and> {#} \\<in> saturate DD\n\ngoal (2 subgoals):\n 1. \\<not> satisfiable N \\<Longrightarrow>\n    \\<exists>DD\\<subseteq>N. finite DD \\<and> \\<not> satisfiable DD\n 2. \\<exists>DD\\<subseteq>N.\n       finite DD \\<and> \\<not> satisfiable DD \\<Longrightarrow>\n    \\<not> satisfiable N", "then"], ["proof (chain)\npicking this:\n  \\<exists>DD\\<subseteq>N. finite DD \\<and> {#} \\<in> saturate DD", "show \"\\<exists>DD \\<subseteq> N. finite DD \\<and> \\<not> satisfiable DD\""], ["proof (prove)\nusing this:\n  \\<exists>DD\\<subseteq>N. finite DD \\<and> {#} \\<in> saturate DD\n\ngoal (1 subgoal):\n 1. \\<exists>DD\\<subseteq>N. finite DD \\<and> \\<not> satisfiable DD", "using saturate_sound"], ["proof (prove)\nusing this:\n  \\<exists>DD\\<subseteq>N. finite DD \\<and> {#} \\<in> saturate DD\n  \\<lbrakk>?C \\<in> saturate ?CC; ?I \\<Turnstile>s ?CC\\<rbrakk>\n  \\<Longrightarrow> ?I \\<Turnstile> ?C\n\ngoal (1 subgoal):\n 1. \\<exists>DD\\<subseteq>N. finite DD \\<and> \\<not> satisfiable DD", "by auto"], ["proof (state)\nthis:\n  \\<exists>DD\\<subseteq>N. finite DD \\<and> \\<not> satisfiable DD\n\ngoal (1 subgoal):\n 1. \\<exists>DD\\<subseteq>N.\n       finite DD \\<and> \\<not> satisfiable DD \\<Longrightarrow>\n    \\<not> satisfiable N", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>DD\\<subseteq>N.\n       finite DD \\<and> \\<not> satisfiable DD \\<Longrightarrow>\n    \\<not> satisfiable N", "assume \"\\<exists>DD \\<subseteq> N. finite DD \\<and> \\<not> satisfiable DD\""], ["proof (state)\nthis:\n  \\<exists>DD\\<subseteq>N. finite DD \\<and> \\<not> satisfiable DD\n\ngoal (1 subgoal):\n 1. \\<exists>DD\\<subseteq>N.\n       finite DD \\<and> \\<not> satisfiable DD \\<Longrightarrow>\n    \\<not> satisfiable N", "then"], ["proof (chain)\npicking this:\n  \\<exists>DD\\<subseteq>N. finite DD \\<and> \\<not> satisfiable DD", "show \"\\<not> satisfiable N\""], ["proof (prove)\nusing this:\n  \\<exists>DD\\<subseteq>N. finite DD \\<and> \\<not> satisfiable DD\n\ngoal (1 subgoal):\n 1. \\<not> satisfiable N", "by (blast intro: true_clss_mono)"], ["proof (state)\nthis:\n  \\<not> satisfiable N\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}