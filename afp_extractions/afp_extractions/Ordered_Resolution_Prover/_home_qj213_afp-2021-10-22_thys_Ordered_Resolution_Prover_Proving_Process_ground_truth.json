{"file_name": "/home/qj213/afp-2021-10-22/thys/Ordered_Resolution_Prover/Proving_Process.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Ordered_Resolution_Prover", "problem_names": ["lemma derive_subset: \"M \\<triangleright> N \\<Longrightarrow> N \\<subseteq> M \\<union> concls_of (inferences_from M)\"", "lemma deriv_sat_preserving:\n  assumes\n    deriv: \"chain (\\<triangleright>) Ns\" and\n    sat_n0: \"satisfiable (lhd Ns)\"\n  shows \"satisfiable (Sup_llist Ns)\"", "lemma\n  assumes deriv: \"chain (\\<triangleright>) Ns\"\n  shows\n    Rf_Sup_subset_Rf_Liminf: \"Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)\" and\n    Ri_Sup_subset_Ri_Liminf: \"Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)\" and\n    sat_limit_iff: \"satisfiable (Liminf_llist Ns) \\<longleftrightarrow> satisfiable (lhd Ns)\"", "lemma\n  assumes \"chain (\\<triangleright>) Ns\"\n  shows\n    Rf_limit_Sup: \"Rf (Liminf_llist Ns) = Rf (Sup_llist Ns)\" and\n    Ri_limit_Sup: \"Ri (Liminf_llist Ns) = Ri (Sup_llist Ns)\"", "theorem fair_derive_saturated_upto:\n  assumes\n    deriv: \"chain (\\<triangleright>) Ns\" and\n    fair: \"fair_clss_seq Ns\"\n  shows \"saturated_upto (Liminf_llist Ns)\"", "lemma saturated_upto_iff: \"saturated_upto N \\<longleftrightarrow> concls_of (inferences_from N) \\<subseteq> N\"", "lemma redundancy_criterion_standard_extension:\n  assumes \"\\<Gamma> \\<subseteq> \\<Gamma>'\" and \"redundancy_criterion \\<Gamma> Rf Ri\"\n  shows \"redundancy_criterion \\<Gamma>' Rf (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>))\"", "lemma redundancy_criterion_standard_extension_saturated_upto_iff:\n  assumes \"\\<Gamma> \\<subseteq> \\<Gamma>'\" and \"redundancy_criterion \\<Gamma> Rf Ri\"\n  shows \"redundancy_criterion.saturated_upto \\<Gamma> Rf Ri M \\<longleftrightarrow>\n    redundancy_criterion.saturated_upto \\<Gamma>' Rf (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) M\"", "lemma redundancy_criterion_standard_extension_effective:\n  assumes \"\\<Gamma> \\<subseteq> \\<Gamma>'\" and \"effective_redundancy_criterion \\<Gamma> Rf Ri\"\n  shows \"effective_redundancy_criterion \\<Gamma>' Rf (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>))\"", "lemma redundancy_criterion_standard_extension_fair_iff:\n  assumes \"\\<Gamma> \\<subseteq> \\<Gamma>'\" and \"effective_redundancy_criterion \\<Gamma> Rf Ri\"\n  shows \"effective_redundancy_criterion.fair_clss_seq \\<Gamma>' Rf (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) Ns \\<longleftrightarrow>\n    effective_redundancy_criterion.fair_clss_seq \\<Gamma> Rf Ri Ns\"", "theorem redundancy_criterion_standard_extension_fair_derive_saturated_upto:\n  assumes\n    subs: \"\\<Gamma> \\<subseteq> \\<Gamma>'\" and\n    red: \"redundancy_criterion \\<Gamma> Rf Ri\" and\n    red': \"sat_preserving_effective_redundancy_criterion \\<Gamma>' Rf (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>))\" and\n    deriv: \"chain (redundancy_criterion.derive \\<Gamma>' Rf) Ns\" and\n    fair: \"effective_redundancy_criterion.fair_clss_seq \\<Gamma>' Rf (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) Ns\"\n  shows \"redundancy_criterion.saturated_upto \\<Gamma> Rf Ri (Liminf_llist Ns)\""], "translations": [["", "lemma derive_subset: \"M \\<triangleright> N \\<Longrightarrow> N \\<subseteq> M \\<union> concls_of (inferences_from M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<triangleright> N \\<Longrightarrow>\n    N \\<subseteq> M \\<union> concls_of (inferences_from M)", "by (meson Diff_subset_conv derive.cases)"], ["", "end"], ["", "locale sat_preserving_redundancy_criterion =\n  sat_preserving_inference_system \"\\<Gamma> :: ('a :: wellorder) inference set\" + redundancy_criterion\nbegin"], ["", "lemma deriv_sat_preserving:\n  assumes\n    deriv: \"chain (\\<triangleright>) Ns\" and\n    sat_n0: \"satisfiable (lhd Ns)\"\n  shows \"satisfiable (Sup_llist Ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "have len_ns: \"llength Ns > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < llength Ns", "using deriv"], ["proof (prove)\nusing this:\n  chain (\\<triangleright>) Ns\n\ngoal (1 subgoal):\n 1. 0 < llength Ns", "by (case_tac Ns) simp+"], ["proof (state)\nthis:\n  0 < llength Ns\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "{"], ["proof (state)\nthis:\n  0 < llength Ns\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "fix DD"], ["proof (state)\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "assume fin: \"finite DD\" and sset_lun: \"DD \\<subseteq> Sup_llist Ns\""], ["proof (state)\nthis:\n  finite DD\n  DD \\<subseteq> Sup_llist Ns\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "then"], ["proof (chain)\npicking this:\n  finite DD\n  DD \\<subseteq> Sup_llist Ns", "obtain k where\n      dd_sset: \"DD \\<subseteq> Sup_upto_llist Ns (enat k)\""], ["proof (prove)\nusing this:\n  finite DD\n  DD \\<subseteq> Sup_llist Ns\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        DD \\<subseteq> Sup_upto_llist Ns (enat k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using finite_Sup_llist_imp_Sup_upto_llist"], ["proof (prove)\nusing this:\n  finite DD\n  DD \\<subseteq> Sup_llist Ns\n  \\<lbrakk>finite ?X; ?X \\<subseteq> Sup_llist ?Xs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k. ?X \\<subseteq> Sup_upto_llist ?Xs (enat k)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        DD \\<subseteq> Sup_upto_llist Ns (enat k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  DD \\<subseteq> Sup_upto_llist Ns (enat k)\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "have \"satisfiable (Sup_upto_llist Ns k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfiable (Sup_upto_llist Ns (enat k))", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. satisfiable (Sup_upto_llist Ns (enat 0))\n 2. \\<And>k.\n       satisfiable (Sup_upto_llist Ns (enat k)) \\<Longrightarrow>\n       satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. satisfiable (Sup_upto_llist Ns (enat 0))\n 2. \\<And>k.\n       satisfiable (Sup_upto_llist Ns (enat k)) \\<Longrightarrow>\n       satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfiable (Sup_upto_llist Ns (enat 0))", "using len_ns sat_n0"], ["proof (prove)\nusing this:\n  0 < llength Ns\n  satisfiable (lhd Ns)\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_upto_llist Ns (enat 0))", "unfolding Sup_upto_llist_def true_clss_def lhd_conv_lnth[OF chain_not_lnull[OF deriv]]"], ["proof (prove)\nusing this:\n  0 < llength Ns\n  \\<exists>I. Ball (lnth Ns 0) ((\\<Turnstile>) I)\n\ngoal (1 subgoal):\n 1. \\<exists>I.\n       Ball\n        (\\<Union>\n          (lnth Ns ` {i. enat i < llength Ns \\<and> enat i \\<le> enat 0}))\n        ((\\<Turnstile>) I)", "by auto"], ["proof (state)\nthis:\n  satisfiable (Sup_upto_llist Ns (enat 0))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       satisfiable (Sup_upto_llist Ns (enat k)) \\<Longrightarrow>\n       satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       satisfiable (Sup_upto_llist Ns (enat k)) \\<Longrightarrow>\n       satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "case (Suc k)"], ["proof (state)\nthis:\n  satisfiable (Sup_upto_llist Ns (enat k))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       satisfiable (Sup_upto_llist Ns (enat k)) \\<Longrightarrow>\n       satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "proof (cases \"enat (Suc k) \\<ge> llength Ns\")"], ["proof (state)\ngoal (2 subgoals):\n 1. llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))\n 2. \\<not> llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "case True"], ["proof (state)\nthis:\n  llength Ns \\<le> enat (Suc k)\n\ngoal (2 subgoals):\n 1. llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))\n 2. \\<not> llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "then"], ["proof (chain)\npicking this:\n  llength Ns \\<le> enat (Suc k)", "have \"Sup_upto_llist Ns (enat k) = Sup_upto_llist Ns (enat (Suc k))\""], ["proof (prove)\nusing this:\n  llength Ns \\<le> enat (Suc k)\n\ngoal (1 subgoal):\n 1. Sup_upto_llist Ns (enat k) = Sup_upto_llist Ns (enat (Suc k))", "unfolding Sup_upto_llist_def"], ["proof (prove)\nusing this:\n  llength Ns \\<le> enat (Suc k)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (lnth Ns ` {i. enat i < llength Ns \\<and> enat i \\<le> enat k}) =\n    \\<Union>\n     (lnth Ns ` {i. enat i < llength Ns \\<and> enat i \\<le> enat (Suc k)})", "using le_Suc_eq"], ["proof (prove)\nusing this:\n  llength Ns \\<le> enat (Suc k)\n  (?m \\<le> Suc ?n) = (?m \\<le> ?n \\<or> ?m = Suc ?n)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (lnth Ns ` {i. enat i < llength Ns \\<and> enat i \\<le> enat k}) =\n    \\<Union>\n     (lnth Ns ` {i. enat i < llength Ns \\<and> enat i \\<le> enat (Suc k)})", "by auto"], ["proof (state)\nthis:\n  Sup_upto_llist Ns (enat k) = Sup_upto_llist Ns (enat (Suc k))\n\ngoal (2 subgoals):\n 1. llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))\n 2. \\<not> llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "then"], ["proof (chain)\npicking this:\n  Sup_upto_llist Ns (enat k) = Sup_upto_llist Ns (enat (Suc k))", "show ?thesis"], ["proof (prove)\nusing this:\n  Sup_upto_llist Ns (enat k) = Sup_upto_llist Ns (enat (Suc k))\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "using Suc"], ["proof (prove)\nusing this:\n  Sup_upto_llist Ns (enat k) = Sup_upto_llist Ns (enat (Suc k))\n  satisfiable (Sup_upto_llist Ns (enat k))\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "by simp"], ["proof (state)\nthis:\n  satisfiable (Sup_upto_llist Ns (enat (Suc k)))\n\ngoal (1 subgoal):\n 1. \\<not> llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "case False"], ["proof (state)\nthis:\n  \\<not> llength Ns \\<le> enat (Suc k)\n\ngoal (1 subgoal):\n 1. \\<not> llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "then"], ["proof (chain)\npicking this:\n  \\<not> llength Ns \\<le> enat (Suc k)", "have \"lnth Ns k \\<triangleright> lnth Ns (Suc k)\""], ["proof (prove)\nusing this:\n  \\<not> llength Ns \\<le> enat (Suc k)\n\ngoal (1 subgoal):\n 1. lnth Ns k \\<triangleright> lnth Ns (Suc k)", "using deriv"], ["proof (prove)\nusing this:\n  \\<not> llength Ns \\<le> enat (Suc k)\n  chain (\\<triangleright>) Ns\n\ngoal (1 subgoal):\n 1. lnth Ns k \\<triangleright> lnth Ns (Suc k)", "by (auto simp: chain_lnth_rel)"], ["proof (state)\nthis:\n  lnth Ns k \\<triangleright> lnth Ns (Suc k)\n\ngoal (1 subgoal):\n 1. \\<not> llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "then"], ["proof (chain)\npicking this:\n  lnth Ns k \\<triangleright> lnth Ns (Suc k)", "have \"lnth Ns (Suc k) \\<subseteq> lnth Ns k \\<union> concls_of (inferences_from (lnth Ns k))\""], ["proof (prove)\nusing this:\n  lnth Ns k \\<triangleright> lnth Ns (Suc k)\n\ngoal (1 subgoal):\n 1. lnth Ns (Suc k)\n    \\<subseteq> lnth Ns k \\<union> concls_of (inferences_from (lnth Ns k))", "by (rule derive_subset)"], ["proof (state)\nthis:\n  lnth Ns (Suc k)\n  \\<subseteq> lnth Ns k \\<union> concls_of (inferences_from (lnth Ns k))\n\ngoal (1 subgoal):\n 1. \\<not> llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "moreover"], ["proof (state)\nthis:\n  lnth Ns (Suc k)\n  \\<subseteq> lnth Ns k \\<union> concls_of (inferences_from (lnth Ns k))\n\ngoal (1 subgoal):\n 1. \\<not> llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "have \"lnth Ns k \\<subseteq> Sup_upto_llist Ns k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lnth Ns k \\<subseteq> Sup_upto_llist Ns (enat k)", "unfolding Sup_upto_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lnth Ns k\n    \\<subseteq> \\<Union>\n                 (lnth Ns `\n                  {i. enat i < llength Ns \\<and> enat i \\<le> enat k})", "using False Suc_ile_eq linear"], ["proof (prove)\nusing this:\n  \\<not> llength Ns \\<le> enat (Suc k)\n  (enat (Suc ?m) \\<le> ?n) = (enat ?m < ?n)\n  ?x \\<le> ?y \\<or> ?y \\<le> ?x\n\ngoal (1 subgoal):\n 1. lnth Ns k\n    \\<subseteq> \\<Union>\n                 (lnth Ns `\n                  {i. enat i < llength Ns \\<and> enat i \\<le> enat k})", "by blast"], ["proof (state)\nthis:\n  lnth Ns k \\<subseteq> Sup_upto_llist Ns (enat k)\n\ngoal (1 subgoal):\n 1. \\<not> llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "ultimately"], ["proof (chain)\npicking this:\n  lnth Ns (Suc k)\n  \\<subseteq> lnth Ns k \\<union> concls_of (inferences_from (lnth Ns k))\n  lnth Ns k \\<subseteq> Sup_upto_llist Ns (enat k)", "have \"lnth Ns (Suc k)\n          \\<subseteq> Sup_upto_llist Ns k \\<union> concls_of (inferences_from (Sup_upto_llist Ns k))\""], ["proof (prove)\nusing this:\n  lnth Ns (Suc k)\n  \\<subseteq> lnth Ns k \\<union> concls_of (inferences_from (lnth Ns k))\n  lnth Ns k \\<subseteq> Sup_upto_llist Ns (enat k)\n\ngoal (1 subgoal):\n 1. lnth Ns (Suc k)\n    \\<subseteq> Sup_upto_llist Ns (enat k) \\<union>\n                concls_of (inferences_from (Sup_upto_llist Ns (enat k)))", "by clarsimp (metis UnCI UnE image_Un inferences_from_mono le_iff_sup)"], ["proof (state)\nthis:\n  lnth Ns (Suc k)\n  \\<subseteq> Sup_upto_llist Ns (enat k) \\<union>\n              concls_of (inferences_from (Sup_upto_llist Ns (enat k)))\n\ngoal (1 subgoal):\n 1. \\<not> llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "moreover"], ["proof (state)\nthis:\n  lnth Ns (Suc k)\n  \\<subseteq> Sup_upto_llist Ns (enat k) \\<union>\n              concls_of (inferences_from (Sup_upto_llist Ns (enat k)))\n\ngoal (1 subgoal):\n 1. \\<not> llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "have \"Sup_upto_llist Ns (Suc k) = Sup_upto_llist Ns k \\<union> lnth Ns (Suc k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_upto_llist Ns (enat (Suc k)) =\n    Sup_upto_llist Ns (enat k) \\<union> lnth Ns (Suc k)", "unfolding Sup_upto_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (lnth Ns ` {i. enat i < llength Ns \\<and> enat i \\<le> enat (Suc k)}) =\n    \\<Union>\n     (lnth Ns `\n      {i. enat i < llength Ns \\<and> enat i \\<le> enat k}) \\<union>\n    lnth Ns (Suc k)", "using False"], ["proof (prove)\nusing this:\n  \\<not> llength Ns \\<le> enat (Suc k)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (lnth Ns ` {i. enat i < llength Ns \\<and> enat i \\<le> enat (Suc k)}) =\n    \\<Union>\n     (lnth Ns `\n      {i. enat i < llength Ns \\<and> enat i \\<le> enat k}) \\<union>\n    lnth Ns (Suc k)", "by (force elim: le_SucE)"], ["proof (state)\nthis:\n  Sup_upto_llist Ns (enat (Suc k)) =\n  Sup_upto_llist Ns (enat k) \\<union> lnth Ns (Suc k)\n\ngoal (1 subgoal):\n 1. \\<not> llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "moreover"], ["proof (state)\nthis:\n  Sup_upto_llist Ns (enat (Suc k)) =\n  Sup_upto_llist Ns (enat k) \\<union> lnth Ns (Suc k)\n\ngoal (1 subgoal):\n 1. \\<not> llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "have\n          \"satisfiable (Sup_upto_llist Ns k \\<union> concls_of (inferences_from (Sup_upto_llist Ns k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfiable\n     (Sup_upto_llist Ns (enat k) \\<union>\n      concls_of (inferences_from (Sup_upto_llist Ns (enat k))))", "using Suc \\<Gamma>_sat_preserving"], ["proof (prove)\nusing this:\n  satisfiable (Sup_upto_llist Ns (enat k))\n  satisfiable ?N \\<Longrightarrow>\n  satisfiable (?N \\<union> concls_of (inferences_from ?N))\n\ngoal (1 subgoal):\n 1. satisfiable\n     (Sup_upto_llist Ns (enat k) \\<union>\n      concls_of (inferences_from (Sup_upto_llist Ns (enat k))))", "unfolding sat_preserving_inference_system_def"], ["proof (prove)\nusing this:\n  satisfiable (Sup_upto_llist Ns (enat k))\n  satisfiable ?N \\<Longrightarrow>\n  satisfiable (?N \\<union> concls_of (inferences_from ?N))\n\ngoal (1 subgoal):\n 1. satisfiable\n     (Sup_upto_llist Ns (enat k) \\<union>\n      concls_of (inferences_from (Sup_upto_llist Ns (enat k))))", "by simp"], ["proof (state)\nthis:\n  satisfiable\n   (Sup_upto_llist Ns (enat k) \\<union>\n    concls_of (inferences_from (Sup_upto_llist Ns (enat k))))\n\ngoal (1 subgoal):\n 1. \\<not> llength Ns \\<le> enat (Suc k) \\<Longrightarrow>\n    satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "ultimately"], ["proof (chain)\npicking this:\n  lnth Ns (Suc k)\n  \\<subseteq> Sup_upto_llist Ns (enat k) \\<union>\n              concls_of (inferences_from (Sup_upto_llist Ns (enat k)))\n  Sup_upto_llist Ns (enat (Suc k)) =\n  Sup_upto_llist Ns (enat k) \\<union> lnth Ns (Suc k)\n  satisfiable\n   (Sup_upto_llist Ns (enat k) \\<union>\n    concls_of (inferences_from (Sup_upto_llist Ns (enat k))))", "show ?thesis"], ["proof (prove)\nusing this:\n  lnth Ns (Suc k)\n  \\<subseteq> Sup_upto_llist Ns (enat k) \\<union>\n              concls_of (inferences_from (Sup_upto_llist Ns (enat k)))\n  Sup_upto_llist Ns (enat (Suc k)) =\n  Sup_upto_llist Ns (enat k) \\<union> lnth Ns (Suc k)\n  satisfiable\n   (Sup_upto_llist Ns (enat k) \\<union>\n    concls_of (inferences_from (Sup_upto_llist Ns (enat k))))\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_upto_llist Ns (enat (Suc k)))", "by (metis le_iff_sup true_clss_union)"], ["proof (state)\nthis:\n  satisfiable (Sup_upto_llist Ns (enat (Suc k)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  satisfiable (Sup_upto_llist Ns (enat (Suc k)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  satisfiable (Sup_upto_llist Ns (enat k))\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "then"], ["proof (chain)\npicking this:\n  satisfiable (Sup_upto_llist Ns (enat k))", "have \"satisfiable DD\""], ["proof (prove)\nusing this:\n  satisfiable (Sup_upto_llist Ns (enat k))\n\ngoal (1 subgoal):\n 1. satisfiable DD", "using dd_sset"], ["proof (prove)\nusing this:\n  satisfiable (Sup_upto_llist Ns (enat k))\n  DD \\<subseteq> Sup_upto_llist Ns (enat k)\n\ngoal (1 subgoal):\n 1. satisfiable DD", "unfolding Sup_upto_llist_def"], ["proof (prove)\nusing this:\n  satisfiable\n   (\\<Union>\n     (lnth Ns ` {i. enat i < llength Ns \\<and> enat i \\<le> enat k}))\n  DD \\<subseteq> \\<Union>\n                  (lnth Ns `\n                   {i. enat i < llength Ns \\<and> enat i \\<le> enat k})\n\ngoal (1 subgoal):\n 1. satisfiable DD", "by (blast intro: true_clss_mono)"], ["proof (state)\nthis:\n  satisfiable DD\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>finite ?DD2; ?DD2 \\<subseteq> Sup_llist Ns\\<rbrakk>\n  \\<Longrightarrow> satisfiable ?DD2\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>finite ?DD2; ?DD2 \\<subseteq> Sup_llist Ns\\<rbrakk>\n  \\<Longrightarrow> satisfiable ?DD2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?DD2; ?DD2 \\<subseteq> Sup_llist Ns\\<rbrakk>\n  \\<Longrightarrow> satisfiable ?DD2\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "using ground_resolution_without_selection.clausal_logic_compact[THEN iffD1]"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?DD2; ?DD2 \\<subseteq> Sup_llist Ns\\<rbrakk>\n  \\<Longrightarrow> satisfiable ?DD2\n  \\<not> satisfiable ?N1 \\<Longrightarrow>\n  \\<exists>DD\\<subseteq>?N1. finite DD \\<and> \\<not> satisfiable DD\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "by metis"], ["proof (state)\nthis:\n  satisfiable (Sup_llist Ns)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nThis corresponds to Lemma 4.2:\n\\<close>"], ["", "lemma\n  assumes deriv: \"chain (\\<triangleright>) Ns\"\n  shows\n    Rf_Sup_subset_Rf_Liminf: \"Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)\" and\n    Ri_Sup_subset_Ri_Liminf: \"Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)\" and\n    sat_limit_iff: \"satisfiable (Liminf_llist Ns) \\<longleftrightarrow> satisfiable (lhd Ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns) &&&\n    Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns) &&&\n    satisfiable (Liminf_llist Ns) = satisfiable (lhd Ns)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)\n 2. Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)\n 3. satisfiable (Liminf_llist Ns) = satisfiable (lhd Ns)", "{"], ["proof (state)\ngoal (3 subgoals):\n 1. Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)\n 2. Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)\n 3. satisfiable (Liminf_llist Ns) = satisfiable (lhd Ns)", "fix C i j"], ["proof (state)\ngoal (3 subgoals):\n 1. Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)\n 2. Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)\n 3. satisfiable (Liminf_llist Ns) = satisfiable (lhd Ns)", "assume\n      c_in: \"C \\<in> lnth Ns i\" and\n      c_ni: \"C \\<notin> Rf (Sup_llist Ns)\" and\n      j: \"j \\<ge> i\" and\n      j': \"enat j < llength Ns\""], ["proof (state)\nthis:\n  C \\<in> lnth Ns i\n  C \\<notin> Rf (Sup_llist Ns)\n  i \\<le> j\n  enat j < llength Ns\n\ngoal (3 subgoals):\n 1. Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)\n 2. Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)\n 3. satisfiable (Liminf_llist Ns) = satisfiable (lhd Ns)", "from c_ni"], ["proof (chain)\npicking this:\n  C \\<notin> Rf (Sup_llist Ns)", "have c_ni': \"\\<And>i. enat i < llength Ns \\<Longrightarrow> C \\<notin> Rf (lnth Ns i)\""], ["proof (prove)\nusing this:\n  C \\<notin> Rf (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<And>i. enat i < llength Ns \\<Longrightarrow> C \\<notin> Rf (lnth Ns i)", "using Rf_mono lnth_subset_Sup_llist Sup_llist_def"], ["proof (prove)\nusing this:\n  C \\<notin> Rf (Sup_llist Ns)\n  ?N \\<subseteq> ?N' \\<Longrightarrow> Rf ?N \\<subseteq> Rf ?N'\n  enat ?i < llength ?Xs \\<Longrightarrow>\n  lnth ?Xs ?i \\<subseteq> Sup_llist ?Xs\n  Sup_llist ?Xs = \\<Union> (lnth ?Xs ` {i. enat i < llength ?Xs})\n\ngoal (1 subgoal):\n 1. \\<And>i. enat i < llength Ns \\<Longrightarrow> C \\<notin> Rf (lnth Ns i)", "by (blast dest: contra_subsetD)"], ["proof (state)\nthis:\n  enat ?i < llength Ns \\<Longrightarrow> C \\<notin> Rf (lnth Ns ?i)\n\ngoal (3 subgoals):\n 1. Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)\n 2. Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)\n 3. satisfiable (Liminf_llist Ns) = satisfiable (lhd Ns)", "have \"C \\<in> lnth Ns j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> lnth Ns j", "using j j'"], ["proof (prove)\nusing this:\n  i \\<le> j\n  enat j < llength Ns\n\ngoal (1 subgoal):\n 1. C \\<in> lnth Ns j", "proof (induct j)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> 0; enat 0 < llength Ns\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns 0\n 2. \\<And>j.\n       \\<lbrakk>\\<lbrakk>i \\<le> j; enat j < llength Ns\\<rbrakk>\n                \\<Longrightarrow> C \\<in> lnth Ns j;\n        i \\<le> Suc j; enat (Suc j) < llength Ns\\<rbrakk>\n       \\<Longrightarrow> C \\<in> lnth Ns (Suc j)", "case 0"], ["proof (state)\nthis:\n  i \\<le> 0\n  enat 0 < llength Ns\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> 0; enat 0 < llength Ns\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns 0\n 2. \\<And>j.\n       \\<lbrakk>\\<lbrakk>i \\<le> j; enat j < llength Ns\\<rbrakk>\n                \\<Longrightarrow> C \\<in> lnth Ns j;\n        i \\<le> Suc j; enat (Suc j) < llength Ns\\<rbrakk>\n       \\<Longrightarrow> C \\<in> lnth Ns (Suc j)", "then"], ["proof (chain)\npicking this:\n  i \\<le> 0\n  enat 0 < llength Ns", "show ?case"], ["proof (prove)\nusing this:\n  i \\<le> 0\n  enat 0 < llength Ns\n\ngoal (1 subgoal):\n 1. C \\<in> lnth Ns 0", "using c_in"], ["proof (prove)\nusing this:\n  i \\<le> 0\n  enat 0 < llength Ns\n  C \\<in> lnth Ns i\n\ngoal (1 subgoal):\n 1. C \\<in> lnth Ns 0", "by blast"], ["proof (state)\nthis:\n  C \\<in> lnth Ns 0\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<lbrakk>i \\<le> j; enat j < llength Ns\\<rbrakk>\n                \\<Longrightarrow> C \\<in> lnth Ns j;\n        i \\<le> Suc j; enat (Suc j) < llength Ns\\<rbrakk>\n       \\<Longrightarrow> C \\<in> lnth Ns (Suc j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<lbrakk>i \\<le> j; enat j < llength Ns\\<rbrakk>\n                \\<Longrightarrow> C \\<in> lnth Ns j;\n        i \\<le> Suc j; enat (Suc j) < llength Ns\\<rbrakk>\n       \\<Longrightarrow> C \\<in> lnth Ns (Suc j)", "case (Suc k)"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n  \\<Longrightarrow> C \\<in> lnth Ns k\n  i \\<le> Suc k\n  enat (Suc k) < llength Ns\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<lbrakk>i \\<le> j; enat j < llength Ns\\<rbrakk>\n                \\<Longrightarrow> C \\<in> lnth Ns j;\n        i \\<le> Suc j; enat (Suc j) < llength Ns\\<rbrakk>\n       \\<Longrightarrow> C \\<in> lnth Ns (Suc j)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n  \\<Longrightarrow> C \\<in> lnth Ns k\n  i \\<le> Suc k\n  enat (Suc k) < llength Ns", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n  \\<Longrightarrow> C \\<in> lnth Ns k\n  i \\<le> Suc k\n  enat (Suc k) < llength Ns\n\ngoal (1 subgoal):\n 1. C \\<in> lnth Ns (Suc k)", "proof (cases \"i < Suc k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)\n 2. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; \\<not> i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)", "case True"], ["proof (state)\nthis:\n  i < Suc k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)\n 2. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; \\<not> i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)", "have \"i \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> k", "using True"], ["proof (prove)\nusing this:\n  i < Suc k\n\ngoal (1 subgoal):\n 1. i \\<le> k", "by linarith"], ["proof (state)\nthis:\n  i \\<le> k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)\n 2. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; \\<not> i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)", "moreover"], ["proof (state)\nthis:\n  i \\<le> k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)\n 2. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; \\<not> i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)", "have \"enat k < llength Ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat k < llength Ns", "using Suc.prems(2) Suc_ile_eq"], ["proof (prove)\nusing this:\n  enat (Suc k) < llength Ns\n  (enat (Suc ?m) \\<le> ?n) = (enat ?m < ?n)\n\ngoal (1 subgoal):\n 1. enat k < llength Ns", "by (blast intro: dual_order.strict_implies_order)"], ["proof (state)\nthis:\n  enat k < llength Ns\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)\n 2. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; \\<not> i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)", "ultimately"], ["proof (chain)\npicking this:\n  i \\<le> k\n  enat k < llength Ns", "have c_in_k: \"C \\<in> lnth Ns k\""], ["proof (prove)\nusing this:\n  i \\<le> k\n  enat k < llength Ns\n\ngoal (1 subgoal):\n 1. C \\<in> lnth Ns k", "using Suc.hyps"], ["proof (prove)\nusing this:\n  i \\<le> k\n  enat k < llength Ns\n  \\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n  \\<Longrightarrow> C \\<in> lnth Ns k\n\ngoal (1 subgoal):\n 1. C \\<in> lnth Ns k", "by blast"], ["proof (state)\nthis:\n  C \\<in> lnth Ns k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)\n 2. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; \\<not> i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)", "have rel: \"lnth Ns k \\<triangleright> lnth Ns (Suc k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lnth Ns k \\<triangleright> lnth Ns (Suc k)", "using Suc.prems deriv"], ["proof (prove)\nusing this:\n  i \\<le> Suc k\n  enat (Suc k) < llength Ns\n  chain (\\<triangleright>) Ns\n\ngoal (1 subgoal):\n 1. lnth Ns k \\<triangleright> lnth Ns (Suc k)", "by (auto simp: chain_lnth_rel)"], ["proof (state)\nthis:\n  lnth Ns k \\<triangleright> lnth Ns (Suc k)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)\n 2. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; \\<not> i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)", "then"], ["proof (chain)\npicking this:\n  lnth Ns k \\<triangleright> lnth Ns (Suc k)", "show ?thesis"], ["proof (prove)\nusing this:\n  lnth Ns k \\<triangleright> lnth Ns (Suc k)\n\ngoal (1 subgoal):\n 1. C \\<in> lnth Ns (Suc k)", "using c_in_k c_ni' Suc.prems(2)"], ["proof (prove)\nusing this:\n  lnth Ns k \\<triangleright> lnth Ns (Suc k)\n  C \\<in> lnth Ns k\n  enat ?i < llength Ns \\<Longrightarrow> C \\<notin> Rf (lnth Ns ?i)\n  enat (Suc k) < llength Ns\n\ngoal (1 subgoal):\n 1. C \\<in> lnth Ns (Suc k)", "by cases auto"], ["proof (state)\nthis:\n  C \\<in> lnth Ns (Suc k)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; \\<not> i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; \\<not> i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)", "case False"], ["proof (state)\nthis:\n  \\<not> i < Suc k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n             \\<Longrightarrow> C \\<in> lnth Ns k;\n     i \\<le> Suc k; enat (Suc k) < llength Ns; \\<not> i < Suc k\\<rbrakk>\n    \\<Longrightarrow> C \\<in> lnth Ns (Suc k)", "then"], ["proof (chain)\npicking this:\n  \\<not> i < Suc k", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> i < Suc k\n\ngoal (1 subgoal):\n 1. C \\<in> lnth Ns (Suc k)", "using Suc c_in"], ["proof (prove)\nusing this:\n  \\<not> i < Suc k\n  \\<lbrakk>i \\<le> k; enat k < llength Ns\\<rbrakk>\n  \\<Longrightarrow> C \\<in> lnth Ns k\n  i \\<le> Suc k\n  enat (Suc k) < llength Ns\n  C \\<in> lnth Ns i\n\ngoal (1 subgoal):\n 1. C \\<in> lnth Ns (Suc k)", "by auto"], ["proof (state)\nthis:\n  C \\<in> lnth Ns (Suc k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C \\<in> lnth Ns (Suc k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C \\<in> lnth Ns j\n\ngoal (3 subgoals):\n 1. Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)\n 2. Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)\n 3. satisfiable (Liminf_llist Ns) = satisfiable (lhd Ns)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?C2 \\<in> lnth Ns ?i2; ?C2 \\<notin> Rf (Sup_llist Ns);\n   ?i2 \\<le> ?j2; enat ?j2 < llength Ns\\<rbrakk>\n  \\<Longrightarrow> ?C2 \\<in> lnth Ns ?j2\n\ngoal (3 subgoals):\n 1. Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)\n 2. Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)\n 3. satisfiable (Liminf_llist Ns) = satisfiable (lhd Ns)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?C2 \\<in> lnth Ns ?i2; ?C2 \\<notin> Rf (Sup_llist Ns);\n   ?i2 \\<le> ?j2; enat ?j2 < llength Ns\\<rbrakk>\n  \\<Longrightarrow> ?C2 \\<in> lnth Ns ?j2", "have lu_ll: \"Sup_llist Ns - Rf (Sup_llist Ns) \\<subseteq> Liminf_llist Ns\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?C2 \\<in> lnth Ns ?i2; ?C2 \\<notin> Rf (Sup_llist Ns);\n   ?i2 \\<le> ?j2; enat ?j2 < llength Ns\\<rbrakk>\n  \\<Longrightarrow> ?C2 \\<in> lnth Ns ?j2\n\ngoal (1 subgoal):\n 1. Sup_llist Ns - Rf (Sup_llist Ns) \\<subseteq> Liminf_llist Ns", "unfolding Sup_llist_def Liminf_llist_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?C2 \\<in> lnth Ns ?i2;\n   ?C2 \\<notin> Rf (\\<Union> (lnth Ns ` {i. enat i < llength Ns}));\n   ?i2 \\<le> ?j2; enat ?j2 < llength Ns\\<rbrakk>\n  \\<Longrightarrow> ?C2 \\<in> lnth Ns ?j2\n\ngoal (1 subgoal):\n 1. \\<Union> (lnth Ns ` {i. enat i < llength Ns}) -\n    Rf (\\<Union> (lnth Ns ` {i. enat i < llength Ns}))\n    \\<subseteq> (\\<Union>i\\<in>{i. enat i < llength Ns}.\n                    \\<Inter>\n                     (lnth Ns ` {j. i \\<le> j \\<and> enat j < llength Ns}))", "by blast"], ["proof (state)\nthis:\n  Sup_llist Ns - Rf (Sup_llist Ns) \\<subseteq> Liminf_llist Ns\n\ngoal (3 subgoals):\n 1. Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)\n 2. Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)\n 3. satisfiable (Liminf_llist Ns) = satisfiable (lhd Ns)", "have rf: \"Rf (Sup_llist Ns - Rf (Sup_llist Ns)) \\<subseteq> Rf (Liminf_llist Ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rf (Sup_llist Ns - Rf (Sup_llist Ns)) \\<subseteq> Rf (Liminf_llist Ns)", "using lu_ll Rf_mono"], ["proof (prove)\nusing this:\n  Sup_llist Ns - Rf (Sup_llist Ns) \\<subseteq> Liminf_llist Ns\n  ?N \\<subseteq> ?N' \\<Longrightarrow> Rf ?N \\<subseteq> Rf ?N'\n\ngoal (1 subgoal):\n 1. Rf (Sup_llist Ns - Rf (Sup_llist Ns)) \\<subseteq> Rf (Liminf_llist Ns)", "by simp"], ["proof (state)\nthis:\n  Rf (Sup_llist Ns - Rf (Sup_llist Ns)) \\<subseteq> Rf (Liminf_llist Ns)\n\ngoal (3 subgoals):\n 1. Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)\n 2. Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)\n 3. satisfiable (Liminf_llist Ns) = satisfiable (lhd Ns)", "have ri: \"Ri (Sup_llist Ns - Rf (Sup_llist Ns)) \\<subseteq> Ri (Liminf_llist Ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ri (Sup_llist Ns - Rf (Sup_llist Ns)) \\<subseteq> Ri (Liminf_llist Ns)", "using lu_ll Ri_mono"], ["proof (prove)\nusing this:\n  Sup_llist Ns - Rf (Sup_llist Ns) \\<subseteq> Liminf_llist Ns\n  ?N \\<subseteq> ?N' \\<Longrightarrow> Ri ?N \\<subseteq> Ri ?N'\n\ngoal (1 subgoal):\n 1. Ri (Sup_llist Ns - Rf (Sup_llist Ns)) \\<subseteq> Ri (Liminf_llist Ns)", "by simp"], ["proof (state)\nthis:\n  Ri (Sup_llist Ns - Rf (Sup_llist Ns)) \\<subseteq> Ri (Liminf_llist Ns)\n\ngoal (3 subgoals):\n 1. Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)\n 2. Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)\n 3. satisfiable (Liminf_llist Ns) = satisfiable (lhd Ns)", "show \"Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)", "using rf Rf_indep"], ["proof (prove)\nusing this:\n  Rf (Sup_llist Ns - Rf (Sup_llist Ns)) \\<subseteq> Rf (Liminf_llist Ns)\n  ?N' \\<subseteq> Rf ?N \\<Longrightarrow> Rf ?N \\<subseteq> Rf (?N - ?N')\n\ngoal (1 subgoal):\n 1. Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)", "by blast"], ["proof (state)\nthis:\n  Rf (Sup_llist Ns) \\<subseteq> Rf (Liminf_llist Ns)\n\ngoal (2 subgoals):\n 1. Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)\n 2. satisfiable (Liminf_llist Ns) = satisfiable (lhd Ns)", "show \"Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)", "using ri Ri_indep"], ["proof (prove)\nusing this:\n  Ri (Sup_llist Ns - Rf (Sup_llist Ns)) \\<subseteq> Ri (Liminf_llist Ns)\n  ?N' \\<subseteq> Rf ?N \\<Longrightarrow> Ri ?N \\<subseteq> Ri (?N - ?N')\n\ngoal (1 subgoal):\n 1. Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)", "by blast"], ["proof (state)\nthis:\n  Ri (Sup_llist Ns) \\<subseteq> Ri (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. satisfiable (Liminf_llist Ns) = satisfiable (lhd Ns)", "show \"satisfiable (Liminf_llist Ns) \\<longleftrightarrow> satisfiable (lhd Ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfiable (Liminf_llist Ns) = satisfiable (lhd Ns)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. satisfiable (Liminf_llist Ns) \\<Longrightarrow> satisfiable (lhd Ns)\n 2. satisfiable (lhd Ns) \\<Longrightarrow> satisfiable (Liminf_llist Ns)", "assume \"satisfiable (lhd Ns)\""], ["proof (state)\nthis:\n  satisfiable (lhd Ns)\n\ngoal (2 subgoals):\n 1. satisfiable (Liminf_llist Ns) \\<Longrightarrow> satisfiable (lhd Ns)\n 2. satisfiable (lhd Ns) \\<Longrightarrow> satisfiable (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  satisfiable (lhd Ns)", "have \"satisfiable (Sup_llist Ns)\""], ["proof (prove)\nusing this:\n  satisfiable (lhd Ns)\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "using deriv deriv_sat_preserving"], ["proof (prove)\nusing this:\n  satisfiable (lhd Ns)\n  chain (\\<triangleright>) Ns\n  \\<lbrakk>chain (\\<triangleright>) ?Ns; satisfiable (lhd ?Ns)\\<rbrakk>\n  \\<Longrightarrow> satisfiable (Sup_llist ?Ns)\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "by simp"], ["proof (state)\nthis:\n  satisfiable (Sup_llist Ns)\n\ngoal (2 subgoals):\n 1. satisfiable (Liminf_llist Ns) \\<Longrightarrow> satisfiable (lhd Ns)\n 2. satisfiable (lhd Ns) \\<Longrightarrow> satisfiable (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  satisfiable (Sup_llist Ns)", "show \"satisfiable (Liminf_llist Ns)\""], ["proof (prove)\nusing this:\n  satisfiable (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. satisfiable (Liminf_llist Ns)", "using true_clss_mono[OF Liminf_llist_subset_Sup_llist]"], ["proof (prove)\nusing this:\n  satisfiable (Sup_llist Ns)\n  ?I \\<Turnstile>s Sup_llist ?Xs1 \\<Longrightarrow>\n  ?I \\<Turnstile>s Liminf_llist ?Xs1\n\ngoal (1 subgoal):\n 1. satisfiable (Liminf_llist Ns)", "by blast"], ["proof (state)\nthis:\n  satisfiable (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. satisfiable (Liminf_llist Ns) \\<Longrightarrow> satisfiable (lhd Ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. satisfiable (Liminf_llist Ns) \\<Longrightarrow> satisfiable (lhd Ns)", "assume \"satisfiable (Liminf_llist Ns)\""], ["proof (state)\nthis:\n  satisfiable (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. satisfiable (Liminf_llist Ns) \\<Longrightarrow> satisfiable (lhd Ns)", "then"], ["proof (chain)\npicking this:\n  satisfiable (Liminf_llist Ns)", "have \"satisfiable (Sup_llist Ns - Rf (Sup_llist Ns))\""], ["proof (prove)\nusing this:\n  satisfiable (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns - Rf (Sup_llist Ns))", "using true_clss_mono[OF lu_ll]"], ["proof (prove)\nusing this:\n  satisfiable (Liminf_llist Ns)\n  ?I \\<Turnstile>s Liminf_llist Ns \\<Longrightarrow>\n  ?I \\<Turnstile>s Sup_llist Ns - Rf (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns - Rf (Sup_llist Ns))", "by blast"], ["proof (state)\nthis:\n  satisfiable (Sup_llist Ns - Rf (Sup_llist Ns))\n\ngoal (1 subgoal):\n 1. satisfiable (Liminf_llist Ns) \\<Longrightarrow> satisfiable (lhd Ns)", "then"], ["proof (chain)\npicking this:\n  satisfiable (Sup_llist Ns - Rf (Sup_llist Ns))", "have \"satisfiable (Sup_llist Ns)\""], ["proof (prove)\nusing this:\n  satisfiable (Sup_llist Ns - Rf (Sup_llist Ns))\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "using Rf_sat"], ["proof (prove)\nusing this:\n  satisfiable (Sup_llist Ns - Rf (Sup_llist Ns))\n  satisfiable (?N - Rf ?N) \\<Longrightarrow> satisfiable ?N\n\ngoal (1 subgoal):\n 1. satisfiable (Sup_llist Ns)", "by blast"], ["proof (state)\nthis:\n  satisfiable (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. satisfiable (Liminf_llist Ns) \\<Longrightarrow> satisfiable (lhd Ns)", "then"], ["proof (chain)\npicking this:\n  satisfiable (Sup_llist Ns)", "show \"satisfiable (lhd Ns)\""], ["proof (prove)\nusing this:\n  satisfiable (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. satisfiable (lhd Ns)", "using deriv true_clss_mono lhd_subset_Sup_llist chain_not_lnull"], ["proof (prove)\nusing this:\n  satisfiable (Sup_llist Ns)\n  chain (\\<triangleright>) Ns\n  \\<lbrakk>?DD \\<subseteq> ?CC; ?I \\<Turnstile>s ?CC\\<rbrakk>\n  \\<Longrightarrow> ?I \\<Turnstile>s ?DD\n  \\<not> lnull ?Xs \\<Longrightarrow> lhd ?Xs \\<subseteq> Sup_llist ?Xs\n  chain ?R ?xs \\<Longrightarrow> \\<not> lnull ?xs\n\ngoal (1 subgoal):\n 1. satisfiable (lhd Ns)", "by metis"], ["proof (state)\nthis:\n  satisfiable (lhd Ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  satisfiable (Liminf_llist Ns) = satisfiable (lhd Ns)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\n  assumes \"chain (\\<triangleright>) Ns\"\n  shows\n    Rf_limit_Sup: \"Rf (Liminf_llist Ns) = Rf (Sup_llist Ns)\" and\n    Ri_limit_Sup: \"Ri (Liminf_llist Ns) = Ri (Sup_llist Ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rf (Liminf_llist Ns) = Rf (Sup_llist Ns) &&&\n    Ri (Liminf_llist Ns) = Ri (Sup_llist Ns)", "using assms"], ["proof (prove)\nusing this:\n  chain (\\<triangleright>) Ns\n\ngoal (1 subgoal):\n 1. Rf (Liminf_llist Ns) = Rf (Sup_llist Ns) &&&\n    Ri (Liminf_llist Ns) = Ri (Sup_llist Ns)", "by (auto simp: Rf_Sup_subset_Rf_Liminf Rf_mono Ri_Sup_subset_Ri_Liminf Ri_mono\n      Liminf_llist_subset_Sup_llist subset_antisym)"], ["", "end"], ["", "text \\<open>\nThe assumption below corresponds to condition R4 of Definition 4.1.\n\\<close>"], ["", "locale effective_redundancy_criterion = redundancy_criterion +\n  assumes Ri_effective: \"\\<gamma> \\<in> \\<Gamma> \\<Longrightarrow> concl_of \\<gamma> \\<in> N \\<union> Rf N \\<Longrightarrow> \\<gamma> \\<in> Ri N\"\nbegin"], ["", "definition fair_clss_seq :: \"'a clause set llist \\<Rightarrow> bool\" where\n  \"fair_clss_seq Ns \\<longleftrightarrow> (let N' = Liminf_llist Ns - Rf (Liminf_llist Ns) in\n     concls_of (inferences_from N' - Ri N') \\<subseteq> Sup_llist Ns \\<union> Rf (Sup_llist Ns))\""], ["", "end"], ["", "locale sat_preserving_effective_redundancy_criterion =\n  sat_preserving_inference_system \"\\<Gamma> :: ('a :: wellorder) inference set\" +\n  effective_redundancy_criterion\nbegin"], ["", "sublocale sat_preserving_redundancy_criterion"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_preserving_redundancy_criterion \\<Gamma> Rf Ri", ".."], ["", "text \\<open>\nThe result below corresponds to Theorem 4.3.\n\\<close>"], ["", "theorem fair_derive_saturated_upto:\n  assumes\n    deriv: \"chain (\\<triangleright>) Ns\" and\n    fair: \"fair_clss_seq Ns\"\n  shows \"saturated_upto (Liminf_llist Ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. saturated_upto (Liminf_llist Ns)", "unfolding saturated_upto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inferences_from (Liminf_llist Ns - Rf (Liminf_llist Ns))\n    \\<subseteq> Ri (Liminf_llist Ns)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> inferences_from\n                (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n       x \\<in> Ri (Liminf_llist Ns)", "fix \\<gamma>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> inferences_from\n                (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n       x \\<in> Ri (Liminf_llist Ns)", "let ?N' = \"Liminf_llist Ns - Rf (Liminf_llist Ns)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> inferences_from\n                (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n       x \\<in> Ri (Liminf_llist Ns)", "assume \\<gamma>: \"\\<gamma> \\<in> inferences_from ?N'\""], ["proof (state)\nthis:\n  \\<gamma> \\<in> inferences_from (Liminf_llist Ns - Rf (Liminf_llist Ns))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> inferences_from\n                (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n       x \\<in> Ri (Liminf_llist Ns)", "show \"\\<gamma> \\<in> Ri (Liminf_llist Ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> \\<in> Ri (Liminf_llist Ns)", "proof (cases \"\\<gamma> \\<in> Ri ?N'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<gamma>\n    \\<in> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)\n 2. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "case True"], ["proof (state)\nthis:\n  \\<gamma> \\<in> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns))\n\ngoal (2 subgoals):\n 1. \\<gamma>\n    \\<in> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)\n 2. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  \\<gamma> \\<in> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<gamma> \\<in> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns))\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<in> Ri (Liminf_llist Ns)", "using Ri_mono"], ["proof (prove)\nusing this:\n  \\<gamma> \\<in> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns))\n  ?N \\<subseteq> ?N' \\<Longrightarrow> Ri ?N \\<subseteq> Ri ?N'\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<in> Ri (Liminf_llist Ns)", "by blast"], ["proof (state)\nthis:\n  \\<gamma> \\<in> Ri (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "case False"], ["proof (state)\nthis:\n  \\<gamma> \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns))\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "have \"concls_of (inferences_from ?N' - Ri ?N') \\<subseteq> Sup_llist Ns \\<union> Rf (Sup_llist Ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. concls_of\n     (inferences_from (Liminf_llist Ns - Rf (Liminf_llist Ns)) -\n      Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)))\n    \\<subseteq> Sup_llist Ns \\<union> Rf (Sup_llist Ns)", "using fair"], ["proof (prove)\nusing this:\n  fair_clss_seq Ns\n\ngoal (1 subgoal):\n 1. concls_of\n     (inferences_from (Liminf_llist Ns - Rf (Liminf_llist Ns)) -\n      Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)))\n    \\<subseteq> Sup_llist Ns \\<union> Rf (Sup_llist Ns)", "unfolding fair_clss_seq_def Let_def"], ["proof (prove)\nusing this:\n  concls_of\n   (inferences_from (Liminf_llist Ns - Rf (Liminf_llist Ns)) -\n    Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)))\n  \\<subseteq> Sup_llist Ns \\<union> Rf (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. concls_of\n     (inferences_from (Liminf_llist Ns - Rf (Liminf_llist Ns)) -\n      Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)))\n    \\<subseteq> Sup_llist Ns \\<union> Rf (Sup_llist Ns)", "."], ["proof (state)\nthis:\n  concls_of\n   (inferences_from (Liminf_llist Ns - Rf (Liminf_llist Ns)) -\n    Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)))\n  \\<subseteq> Sup_llist Ns \\<union> Rf (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  concls_of\n   (inferences_from (Liminf_llist Ns - Rf (Liminf_llist Ns)) -\n    Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)))\n  \\<subseteq> Sup_llist Ns \\<union> Rf (Sup_llist Ns)", "have \"concl_of \\<gamma> \\<in> Sup_llist Ns \\<union> Rf (Sup_llist Ns)\""], ["proof (prove)\nusing this:\n  concls_of\n   (inferences_from (Liminf_llist Ns - Rf (Liminf_llist Ns)) -\n    Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)))\n  \\<subseteq> Sup_llist Ns \\<union> Rf (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. concl_of \\<gamma> \\<in> Sup_llist Ns \\<union> Rf (Sup_llist Ns)", "using False \\<gamma>"], ["proof (prove)\nusing this:\n  concls_of\n   (inferences_from (Liminf_llist Ns - Rf (Liminf_llist Ns)) -\n    Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)))\n  \\<subseteq> Sup_llist Ns \\<union> Rf (Sup_llist Ns)\n  \\<gamma> \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns))\n  \\<gamma> \\<in> inferences_from (Liminf_llist Ns - Rf (Liminf_llist Ns))\n\ngoal (1 subgoal):\n 1. concl_of \\<gamma> \\<in> Sup_llist Ns \\<union> Rf (Sup_llist Ns)", "by auto"], ["proof (state)\nthis:\n  concl_of \\<gamma> \\<in> Sup_llist Ns \\<union> Rf (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "moreover"], ["proof (state)\nthis:\n  concl_of \\<gamma> \\<in> Sup_llist Ns \\<union> Rf (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "{"], ["proof (state)\nthis:\n  concl_of \\<gamma> \\<in> Sup_llist Ns \\<union> Rf (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "assume \"concl_of \\<gamma> \\<in> Sup_llist Ns\""], ["proof (state)\nthis:\n  concl_of \\<gamma> \\<in> Sup_llist Ns\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  concl_of \\<gamma> \\<in> Sup_llist Ns", "have \"\\<gamma> \\<in> Ri (Sup_llist Ns)\""], ["proof (prove)\nusing this:\n  concl_of \\<gamma> \\<in> Sup_llist Ns\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<in> Ri (Sup_llist Ns)", "using \\<gamma> Ri_effective inferences_from_def"], ["proof (prove)\nusing this:\n  concl_of \\<gamma> \\<in> Sup_llist Ns\n  \\<gamma> \\<in> inferences_from (Liminf_llist Ns - Rf (Liminf_llist Ns))\n  \\<lbrakk>?\\<gamma> \\<in> \\<Gamma>;\n   concl_of ?\\<gamma> \\<in> ?N \\<union> Rf ?N\\<rbrakk>\n  \\<Longrightarrow> ?\\<gamma> \\<in> Ri ?N\n  inferences_from ?CC = {\\<gamma> \\<in> \\<Gamma>. infer_from ?CC \\<gamma>}\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<in> Ri (Sup_llist Ns)", "by blast"], ["proof (state)\nthis:\n  \\<gamma> \\<in> Ri (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  \\<gamma> \\<in> Ri (Sup_llist Ns)", "have \"\\<gamma> \\<in> Ri (Liminf_llist Ns)\""], ["proof (prove)\nusing this:\n  \\<gamma> \\<in> Ri (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<in> Ri (Liminf_llist Ns)", "using deriv Ri_Sup_subset_Ri_Liminf"], ["proof (prove)\nusing this:\n  \\<gamma> \\<in> Ri (Sup_llist Ns)\n  chain (\\<triangleright>) Ns\n  chain (\\<triangleright>) ?Ns \\<Longrightarrow>\n  Ri (Sup_llist ?Ns) \\<subseteq> Ri (Liminf_llist ?Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<in> Ri (Liminf_llist Ns)", "by fast"], ["proof (state)\nthis:\n  \\<gamma> \\<in> Ri (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "}"], ["proof (state)\nthis:\n  concl_of \\<gamma> \\<in> Sup_llist Ns \\<Longrightarrow>\n  \\<gamma> \\<in> Ri (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "moreover"], ["proof (state)\nthis:\n  concl_of \\<gamma> \\<in> Sup_llist Ns \\<Longrightarrow>\n  \\<gamma> \\<in> Ri (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "{"], ["proof (state)\nthis:\n  concl_of \\<gamma> \\<in> Sup_llist Ns \\<Longrightarrow>\n  \\<gamma> \\<in> Ri (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "assume \"concl_of \\<gamma> \\<in> Rf (Sup_llist Ns)\""], ["proof (state)\nthis:\n  concl_of \\<gamma> \\<in> Rf (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  concl_of \\<gamma> \\<in> Rf (Sup_llist Ns)", "have \"concl_of \\<gamma> \\<in> Rf (Liminf_llist Ns)\""], ["proof (prove)\nusing this:\n  concl_of \\<gamma> \\<in> Rf (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. concl_of \\<gamma> \\<in> Rf (Liminf_llist Ns)", "using deriv Rf_Sup_subset_Rf_Liminf"], ["proof (prove)\nusing this:\n  concl_of \\<gamma> \\<in> Rf (Sup_llist Ns)\n  chain (\\<triangleright>) Ns\n  chain (\\<triangleright>) ?Ns \\<Longrightarrow>\n  Rf (Sup_llist ?Ns) \\<subseteq> Rf (Liminf_llist ?Ns)\n\ngoal (1 subgoal):\n 1. concl_of \\<gamma> \\<in> Rf (Liminf_llist Ns)", "by blast"], ["proof (state)\nthis:\n  concl_of \\<gamma> \\<in> Rf (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  concl_of \\<gamma> \\<in> Rf (Liminf_llist Ns)", "have \"\\<gamma> \\<in> Ri (Liminf_llist Ns)\""], ["proof (prove)\nusing this:\n  concl_of \\<gamma> \\<in> Rf (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<in> Ri (Liminf_llist Ns)", "using \\<gamma> Ri_effective inferences_from_def"], ["proof (prove)\nusing this:\n  concl_of \\<gamma> \\<in> Rf (Liminf_llist Ns)\n  \\<gamma> \\<in> inferences_from (Liminf_llist Ns - Rf (Liminf_llist Ns))\n  \\<lbrakk>?\\<gamma> \\<in> \\<Gamma>;\n   concl_of ?\\<gamma> \\<in> ?N \\<union> Rf ?N\\<rbrakk>\n  \\<Longrightarrow> ?\\<gamma> \\<in> Ri ?N\n  inferences_from ?CC = {\\<gamma> \\<in> \\<Gamma>. infer_from ?CC \\<gamma>}\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<in> Ri (Liminf_llist Ns)", "by auto"], ["proof (state)\nthis:\n  \\<gamma> \\<in> Ri (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "}"], ["proof (state)\nthis:\n  concl_of \\<gamma> \\<in> Rf (Sup_llist Ns) \\<Longrightarrow>\n  \\<gamma> \\<in> Ri (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<notin> Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<Longrightarrow>\n    \\<gamma> \\<in> Ri (Liminf_llist Ns)", "ultimately"], ["proof (chain)\npicking this:\n  concl_of \\<gamma> \\<in> Sup_llist Ns \\<union> Rf (Sup_llist Ns)\n  concl_of \\<gamma> \\<in> Sup_llist Ns \\<Longrightarrow>\n  \\<gamma> \\<in> Ri (Liminf_llist Ns)\n  concl_of \\<gamma> \\<in> Rf (Sup_llist Ns) \\<Longrightarrow>\n  \\<gamma> \\<in> Ri (Liminf_llist Ns)", "show \"\\<gamma> \\<in> Ri (Liminf_llist Ns)\""], ["proof (prove)\nusing this:\n  concl_of \\<gamma> \\<in> Sup_llist Ns \\<union> Rf (Sup_llist Ns)\n  concl_of \\<gamma> \\<in> Sup_llist Ns \\<Longrightarrow>\n  \\<gamma> \\<in> Ri (Liminf_llist Ns)\n  concl_of \\<gamma> \\<in> Rf (Sup_llist Ns) \\<Longrightarrow>\n  \\<gamma> \\<in> Ri (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<in> Ri (Liminf_llist Ns)", "by blast"], ["proof (state)\nthis:\n  \\<gamma> \\<in> Ri (Liminf_llist Ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<gamma> \\<in> Ri (Liminf_llist Ns)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>\nThis corresponds to the trivial redundancy criterion defined on page 36 of\nSection 4.1.\n\\<close>"], ["", "locale trivial_redundancy_criterion = inference_system\nbegin"], ["", "definition Rf :: \"'a clause set \\<Rightarrow> 'a clause set\" where\n  \"Rf _ = {}\""], ["", "definition Ri :: \"'a clause set \\<Rightarrow> 'a inference set\" where\n  \"Ri N = {\\<gamma>. \\<gamma> \\<in> \\<Gamma> \\<and> concl_of \\<gamma> \\<in> N}\""], ["", "sublocale effective_redundancy_criterion \\<Gamma> Rf Ri"], ["proof (prove)\ngoal (1 subgoal):\n 1. effective_redundancy_criterion \\<Gamma> Rf Ri", "by unfold_locales (auto simp: Rf_def Ri_def)"], ["", "lemma saturated_upto_iff: \"saturated_upto N \\<longleftrightarrow> concls_of (inferences_from N) \\<subseteq> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. saturated_upto N = (concls_of (inferences_from N) \\<subseteq> N)", "unfolding saturated_upto_def inferences_from_def Rf_def Ri_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({\\<gamma> \\<in> \\<Gamma>. infer_from (N - {}) \\<gamma>}\n     \\<subseteq> {\\<gamma> \\<in> \\<Gamma>. concl_of \\<gamma> \\<in> N}) =\n    (concls_of {\\<gamma> \\<in> \\<Gamma>. infer_from N \\<gamma>}\n     \\<subseteq> N)", "by auto"], ["", "end"], ["", "text \\<open>\nThe following lemmas corresponds to the standard extension of a redundancy criterion defined on\npage 38 of Section 4.1.\n\\<close>"], ["", "lemma redundancy_criterion_standard_extension:\n  assumes \"\\<Gamma> \\<subseteq> \\<Gamma>'\" and \"redundancy_criterion \\<Gamma> Rf Ri\"\n  shows \"redundancy_criterion \\<Gamma>' Rf (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. redundancy_criterion \\<Gamma>' Rf\n     (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>))", "using assms"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<subseteq> \\<Gamma>'\n  redundancy_criterion \\<Gamma> Rf Ri\n\ngoal (1 subgoal):\n 1. redundancy_criterion \\<Gamma>' Rf\n     (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>))", "unfolding redundancy_criterion_def"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<subseteq> \\<Gamma>'\n  ((\\<forall>N. Ri N \\<subseteq> \\<Gamma>) \\<and>\n   (\\<forall>N N'.\n       N \\<subseteq> N' \\<longrightarrow> Rf N \\<subseteq> Rf N') \\<and>\n   (\\<forall>N N'.\n       N \\<subseteq> N' \\<longrightarrow> Ri N \\<subseteq> Ri N')) \\<and>\n  (\\<forall>N' N.\n      N' \\<subseteq> Rf N \\<longrightarrow>\n      Rf N \\<subseteq> Rf (N - N')) \\<and>\n  (\\<forall>N' N.\n      N' \\<subseteq> Rf N \\<longrightarrow>\n      Ri N \\<subseteq> Ri (N - N')) \\<and>\n  (\\<forall>N. satisfiable (N - Rf N) \\<longrightarrow> satisfiable N)\n\ngoal (1 subgoal):\n 1. ((\\<forall>N.\n         Ri N \\<union> (\\<Gamma>' - \\<Gamma>) \\<subseteq> \\<Gamma>') \\<and>\n     (\\<forall>N N'.\n         N \\<subseteq> N' \\<longrightarrow> Rf N \\<subseteq> Rf N') \\<and>\n     (\\<forall>N N'.\n         N \\<subseteq> N' \\<longrightarrow>\n         Ri N \\<union> (\\<Gamma>' - \\<Gamma>)\n         \\<subseteq> Ri N' \\<union> (\\<Gamma>' - \\<Gamma>))) \\<and>\n    (\\<forall>N' N.\n        N' \\<subseteq> Rf N \\<longrightarrow>\n        Rf N \\<subseteq> Rf (N - N')) \\<and>\n    (\\<forall>N' N.\n        N' \\<subseteq> Rf N \\<longrightarrow>\n        Ri N \\<union> (\\<Gamma>' - \\<Gamma>)\n        \\<subseteq> Ri (N - N') \\<union> (\\<Gamma>' - \\<Gamma>)) \\<and>\n    (\\<forall>N. satisfiable (N - Rf N) \\<longrightarrow> satisfiable N)", "by (intro conjI) ((auto simp: rev_subsetD)[5], sat)"], ["", "lemma redundancy_criterion_standard_extension_saturated_upto_iff:\n  assumes \"\\<Gamma> \\<subseteq> \\<Gamma>'\" and \"redundancy_criterion \\<Gamma> Rf Ri\"\n  shows \"redundancy_criterion.saturated_upto \\<Gamma> Rf Ri M \\<longleftrightarrow>\n    redundancy_criterion.saturated_upto \\<Gamma>' Rf (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. redundancy_criterion.saturated_upto \\<Gamma> Rf Ri M =\n    redundancy_criterion.saturated_upto \\<Gamma>' Rf\n     (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) M", "using assms redundancy_criterion.saturated_upto_def redundancy_criterion.saturated_upto_def\n    redundancy_criterion_standard_extension"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<subseteq> \\<Gamma>'\n  redundancy_criterion \\<Gamma> Rf Ri\n  redundancy_criterion ?\\<Gamma> ?Rf ?Ri \\<Longrightarrow>\n  redundancy_criterion.saturated_upto ?\\<Gamma> ?Rf ?Ri ?N =\n  (inference_system.inferences_from ?\\<Gamma> (?N - ?Rf ?N)\n   \\<subseteq> ?Ri ?N)\n  redundancy_criterion ?\\<Gamma> ?Rf ?Ri \\<Longrightarrow>\n  redundancy_criterion.saturated_upto ?\\<Gamma> ?Rf ?Ri ?N =\n  (inference_system.inferences_from ?\\<Gamma> (?N - ?Rf ?N)\n   \\<subseteq> ?Ri ?N)\n  \\<lbrakk>?\\<Gamma> \\<subseteq> ?\\<Gamma>';\n   redundancy_criterion ?\\<Gamma> ?Rf ?Ri\\<rbrakk>\n  \\<Longrightarrow> redundancy_criterion ?\\<Gamma>' ?Rf\n                     (\\<lambda>N. ?Ri N \\<union> (?\\<Gamma>' - ?\\<Gamma>))\n\ngoal (1 subgoal):\n 1. redundancy_criterion.saturated_upto \\<Gamma> Rf Ri M =\n    redundancy_criterion.saturated_upto \\<Gamma>' Rf\n     (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) M", "unfolding inference_system.inferences_from_def"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<subseteq> \\<Gamma>'\n  redundancy_criterion \\<Gamma> Rf Ri\n  redundancy_criterion ?\\<Gamma> ?Rf ?Ri \\<Longrightarrow>\n  redundancy_criterion.saturated_upto ?\\<Gamma> ?Rf ?Ri ?N =\n  ({\\<gamma> \\<in> ?\\<Gamma>. infer_from (?N - ?Rf ?N) \\<gamma>}\n   \\<subseteq> ?Ri ?N)\n  redundancy_criterion ?\\<Gamma> ?Rf ?Ri \\<Longrightarrow>\n  redundancy_criterion.saturated_upto ?\\<Gamma> ?Rf ?Ri ?N =\n  ({\\<gamma> \\<in> ?\\<Gamma>. infer_from (?N - ?Rf ?N) \\<gamma>}\n   \\<subseteq> ?Ri ?N)\n  \\<lbrakk>?\\<Gamma> \\<subseteq> ?\\<Gamma>';\n   redundancy_criterion ?\\<Gamma> ?Rf ?Ri\\<rbrakk>\n  \\<Longrightarrow> redundancy_criterion ?\\<Gamma>' ?Rf\n                     (\\<lambda>N. ?Ri N \\<union> (?\\<Gamma>' - ?\\<Gamma>))\n\ngoal (1 subgoal):\n 1. redundancy_criterion.saturated_upto \\<Gamma> Rf Ri M =\n    redundancy_criterion.saturated_upto \\<Gamma>' Rf\n     (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) M", "by blast"], ["", "lemma redundancy_criterion_standard_extension_effective:\n  assumes \"\\<Gamma> \\<subseteq> \\<Gamma>'\" and \"effective_redundancy_criterion \\<Gamma> Rf Ri\"\n  shows \"effective_redundancy_criterion \\<Gamma>' Rf (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. effective_redundancy_criterion \\<Gamma>' Rf\n     (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>))", "using assms redundancy_criterion_standard_extension[of \\<Gamma>]"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<subseteq> \\<Gamma>'\n  effective_redundancy_criterion \\<Gamma> Rf Ri\n  \\<lbrakk>\\<Gamma> \\<subseteq> ?\\<Gamma>';\n   redundancy_criterion \\<Gamma> ?Rf ?Ri\\<rbrakk>\n  \\<Longrightarrow> redundancy_criterion ?\\<Gamma>' ?Rf\n                     (\\<lambda>N. ?Ri N \\<union> (?\\<Gamma>' - \\<Gamma>))\n\ngoal (1 subgoal):\n 1. effective_redundancy_criterion \\<Gamma>' Rf\n     (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>))", "unfolding effective_redundancy_criterion_def effective_redundancy_criterion_axioms_def"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<subseteq> \\<Gamma>'\n  redundancy_criterion \\<Gamma> Rf Ri \\<and>\n  (\\<forall>\\<gamma> N.\n      \\<gamma> \\<in> \\<Gamma> \\<longrightarrow>\n      concl_of \\<gamma> \\<in> N \\<union> Rf N \\<longrightarrow>\n      \\<gamma> \\<in> Ri N)\n  \\<lbrakk>\\<Gamma> \\<subseteq> ?\\<Gamma>';\n   redundancy_criterion \\<Gamma> ?Rf ?Ri\\<rbrakk>\n  \\<Longrightarrow> redundancy_criterion ?\\<Gamma>' ?Rf\n                     (\\<lambda>N. ?Ri N \\<union> (?\\<Gamma>' - \\<Gamma>))\n\ngoal (1 subgoal):\n 1. redundancy_criterion \\<Gamma>' Rf\n     (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) \\<and>\n    (\\<forall>\\<gamma> N.\n        \\<gamma> \\<in> \\<Gamma>' \\<longrightarrow>\n        concl_of \\<gamma> \\<in> N \\<union> Rf N \\<longrightarrow>\n        \\<gamma> \\<in> Ri N \\<union> (\\<Gamma>' - \\<Gamma>))", "by auto"], ["", "lemma redundancy_criterion_standard_extension_fair_iff:\n  assumes \"\\<Gamma> \\<subseteq> \\<Gamma>'\" and \"effective_redundancy_criterion \\<Gamma> Rf Ri\"\n  shows \"effective_redundancy_criterion.fair_clss_seq \\<Gamma>' Rf (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) Ns \\<longleftrightarrow>\n    effective_redundancy_criterion.fair_clss_seq \\<Gamma> Rf Ri Ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. effective_redundancy_criterion.fair_clss_seq \\<Gamma>' Rf\n     (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) Ns =\n    effective_redundancy_criterion.fair_clss_seq \\<Gamma> Rf Ri Ns", "using assms redundancy_criterion_standard_extension_effective[of \\<Gamma> \\<Gamma>' Rf Ri]\n    effective_redundancy_criterion.fair_clss_seq_def[of \\<Gamma> Rf Ri Ns]\n    effective_redundancy_criterion.fair_clss_seq_def[of \\<Gamma>' Rf \"(\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>))\" Ns]"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<subseteq> \\<Gamma>'\n  effective_redundancy_criterion \\<Gamma> Rf Ri\n  \\<lbrakk>\\<Gamma> \\<subseteq> \\<Gamma>';\n   effective_redundancy_criterion \\<Gamma> Rf Ri\\<rbrakk>\n  \\<Longrightarrow> effective_redundancy_criterion \\<Gamma>' Rf\n                     (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>))\n  effective_redundancy_criterion \\<Gamma> Rf Ri \\<Longrightarrow>\n  effective_redundancy_criterion.fair_clss_seq \\<Gamma> Rf Ri Ns =\n  (let N' = Liminf_llist Ns - Rf (Liminf_llist Ns)\n   in concls_of (inference_system.inferences_from \\<Gamma> N' - Ri N')\n      \\<subseteq> Sup_llist Ns \\<union> Rf (Sup_llist Ns))\n  effective_redundancy_criterion \\<Gamma>' Rf\n   (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) \\<Longrightarrow>\n  effective_redundancy_criterion.fair_clss_seq \\<Gamma>' Rf\n   (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) Ns =\n  (let N' = Liminf_llist Ns - Rf (Liminf_llist Ns)\n   in concls_of\n       (inference_system.inferences_from \\<Gamma>' N' -\n        (Ri N' \\<union> (\\<Gamma>' - \\<Gamma>)))\n      \\<subseteq> Sup_llist Ns \\<union> Rf (Sup_llist Ns))\n\ngoal (1 subgoal):\n 1. effective_redundancy_criterion.fair_clss_seq \\<Gamma>' Rf\n     (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) Ns =\n    effective_redundancy_criterion.fair_clss_seq \\<Gamma> Rf Ri Ns", "unfolding inference_system.inferences_from_def Let_def"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<subseteq> \\<Gamma>'\n  effective_redundancy_criterion \\<Gamma> Rf Ri\n  \\<lbrakk>\\<Gamma> \\<subseteq> \\<Gamma>';\n   effective_redundancy_criterion \\<Gamma> Rf Ri\\<rbrakk>\n  \\<Longrightarrow> effective_redundancy_criterion \\<Gamma>' Rf\n                     (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>))\n  effective_redundancy_criterion \\<Gamma> Rf Ri \\<Longrightarrow>\n  effective_redundancy_criterion.fair_clss_seq \\<Gamma> Rf Ri Ns =\n  (concls_of\n    ({\\<gamma> \\<in> \\<Gamma>.\n      infer_from (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<gamma>} -\n     Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)))\n   \\<subseteq> Sup_llist Ns \\<union> Rf (Sup_llist Ns))\n  effective_redundancy_criterion \\<Gamma>' Rf\n   (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) \\<Longrightarrow>\n  effective_redundancy_criterion.fair_clss_seq \\<Gamma>' Rf\n   (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) Ns =\n  (concls_of\n    ({\\<gamma> \\<in> \\<Gamma>'.\n      infer_from (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<gamma>} -\n     (Ri (Liminf_llist Ns - Rf (Liminf_llist Ns)) \\<union>\n      (\\<Gamma>' - \\<Gamma>)))\n   \\<subseteq> Sup_llist Ns \\<union> Rf (Sup_llist Ns))\n\ngoal (1 subgoal):\n 1. effective_redundancy_criterion.fair_clss_seq \\<Gamma>' Rf\n     (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) Ns =\n    effective_redundancy_criterion.fair_clss_seq \\<Gamma> Rf Ri Ns", "by auto"], ["", "theorem redundancy_criterion_standard_extension_fair_derive_saturated_upto:\n  assumes\n    subs: \"\\<Gamma> \\<subseteq> \\<Gamma>'\" and\n    red: \"redundancy_criterion \\<Gamma> Rf Ri\" and\n    red': \"sat_preserving_effective_redundancy_criterion \\<Gamma>' Rf (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>))\" and\n    deriv: \"chain (redundancy_criterion.derive \\<Gamma>' Rf) Ns\" and\n    fair: \"effective_redundancy_criterion.fair_clss_seq \\<Gamma>' Rf (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) Ns\"\n  shows \"redundancy_criterion.saturated_upto \\<Gamma> Rf Ri (Liminf_llist Ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. redundancy_criterion.saturated_upto \\<Gamma> Rf Ri (Liminf_llist Ns)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. redundancy_criterion.saturated_upto \\<Gamma> Rf Ri (Liminf_llist Ns)", "have \"redundancy_criterion.saturated_upto \\<Gamma>' Rf (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) (Liminf_llist Ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. redundancy_criterion.saturated_upto \\<Gamma>' Rf\n     (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) (Liminf_llist Ns)", "by (rule sat_preserving_effective_redundancy_criterion.fair_derive_saturated_upto\n        [OF red' deriv fair])"], ["proof (state)\nthis:\n  redundancy_criterion.saturated_upto \\<Gamma>' Rf\n   (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. redundancy_criterion.saturated_upto \\<Gamma> Rf Ri (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  redundancy_criterion.saturated_upto \\<Gamma>' Rf\n   (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) (Liminf_llist Ns)", "show ?thesis"], ["proof (prove)\nusing this:\n  redundancy_criterion.saturated_upto \\<Gamma>' Rf\n   (\\<lambda>N. Ri N \\<union> (\\<Gamma>' - \\<Gamma>)) (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. redundancy_criterion.saturated_upto \\<Gamma> Rf Ri (Liminf_llist Ns)", "by (rule redundancy_criterion_standard_extension_saturated_upto_iff[THEN iffD2, OF subs red])"], ["proof (state)\nthis:\n  redundancy_criterion.saturated_upto \\<Gamma> Rf Ri (Liminf_llist Ns)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}