{"file_name": "/home/qj213/afp-2021-10-22/thys/Ordered_Resolution_Prover/Ordered_Ground_Resolution.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Ordered_Resolution_Prover", "problem_names": ["lemma \"(S DA = negs (mset As) \\<or> S DA = {#} \\<and> length As = 1 \\<and> maximal_wrt (As ! 0) DA) \\<longleftrightarrow>\n    eligible As DA\"", "lemma ord_resolve_sound:\n  assumes\n    res_e: \"ord_resolve CAs DA AAs As E\" and\n    cc_true: \"I \\<Turnstile>m mset CAs\" and\n    d_true: \"I \\<Turnstile> DA\"\n  shows \"I \\<Turnstile> E\"", "lemma filter_neg_atm_of_S: \"{#Neg (atm_of L). L \\<in># S C#} = S C\"", "lemma ord_resolve_reductive:\n  assumes \"ord_resolve CAs DA AAs As E\"\n  shows \"E < DA\"", "theorem ord_resolve_counterex_reducing:\n  assumes\n    ec_ni_n: \"{#} \\<notin> N\" and\n    d_in_n: \"DA \\<in> N\" and\n    d_cex: \"\\<not> INTERP N \\<Turnstile> DA\" and\n    d_min: \"\\<And>C. C \\<in> N \\<Longrightarrow> \\<not> INTERP N \\<Turnstile> C \\<Longrightarrow> DA \\<le> C\"\n  obtains CAs AAs As E where\n    \"set CAs \\<subseteq> N\"\n    \"INTERP N \\<Turnstile>m mset CAs\"\n    \"\\<And>CA. CA \\<in> set CAs \\<Longrightarrow> productive N CA\"\n    \"ord_resolve CAs DA AAs As E\"\n    \"\\<not> INTERP N \\<Turnstile> E\"\n    \"E < DA\"", "lemma ord_resolve_atms_of_concl_subset:\n  assumes \"ord_resolve CAs DA AAs As E\"\n  shows \"atms_of E \\<subseteq> (\\<Union>C \\<in> set CAs. atms_of C) \\<union> atms_of DA\"", "lemmas clausal_logic_compact = ord_\\<Gamma>_sound_counterex_reducing.clausal_logic_compact", "lemmas clausal_logic_compact = ground_resolution_with_selection.clausal_logic_compact"], "translations": [["", "lemma \"(S DA = negs (mset As) \\<or> S DA = {#} \\<and> length As = 1 \\<and> maximal_wrt (As ! 0) DA) \\<longleftrightarrow>\n    eligible As DA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (S DA = negs (mset As) \\<or>\n     S DA = {#} \\<and> length As = 1 \\<and> maximal_wrt (As ! 0) DA) =\n    eligible As DA", "using eligible.intros ground_resolution_with_selection.eligible.cases ground_resolution_with_selection_axioms"], ["proof (prove)\nusing this:\n  S ?DA = negs (mset ?As) \\<or>\n  S ?DA = {#} \\<and>\n  length ?As = 1 \\<and> maximal_wrt (?As ! 0) ?DA \\<Longrightarrow>\n  eligible ?As ?DA\n  \\<lbrakk>ground_resolution_with_selection ?S;\n   ground_resolution_with_selection.eligible ?S ?a1.0 ?a2.0;\n   \\<And>DA As.\n      \\<lbrakk>?a1.0 = As; ?a2.0 = DA;\n       ?S DA = negs (mset As) \\<or>\n       ?S DA = {#} \\<and>\n       length As = 1 \\<and>\n       ground_resolution_with_selection.maximal_wrt (As ! 0) DA\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  ground_resolution_with_selection S\n\ngoal (1 subgoal):\n 1. (S DA = negs (mset As) \\<or>\n     S DA = {#} \\<and> length As = 1 \\<and> maximal_wrt (As ! 0) DA) =\n    eligible As DA", "by blast"], ["", "inductive\n  ord_resolve :: \"'a clause list \\<Rightarrow> 'a clause \\<Rightarrow> 'a multiset list \\<Rightarrow> 'a list \\<Rightarrow> 'a clause \\<Rightarrow> bool\"\nwhere\n  ord_resolve:\n    \"length CAs = n \\<Longrightarrow>\n     length Cs = n \\<Longrightarrow>\n     length AAs = n \\<Longrightarrow>\n     length As = n \\<Longrightarrow>\n     n \\<noteq> 0 \\<Longrightarrow>\n     (\\<forall>i < n. CAs ! i = Cs ! i + poss (AAs ! i)) \\<Longrightarrow>\n     (\\<forall>i < n. AAs ! i \\<noteq> {#}) \\<Longrightarrow>\n     (\\<forall>i < n. \\<forall>A \\<in># AAs ! i. A = As ! i) \\<Longrightarrow>\n     eligible As (D + negs (mset As)) \\<Longrightarrow>\n     (\\<forall>i < n. strictly_maximal_wrt (As ! i) (Cs ! i)) \\<Longrightarrow>\n     (\\<forall>i < n. S (CAs ! i) = {#}) \\<Longrightarrow>\n     ord_resolve CAs (D + negs (mset As)) AAs As (\\<Sum>\\<^sub># (mset Cs) + D)\""], ["", "lemma ord_resolve_sound:\n  assumes\n    res_e: \"ord_resolve CAs DA AAs As E\" and\n    cc_true: \"I \\<Turnstile>m mset CAs\" and\n    d_true: \"I \\<Turnstile> DA\"\n  shows \"I \\<Turnstile> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<Turnstile> E", "using res_e"], ["proof (prove)\nusing this:\n  ord_resolve CAs DA AAs As E\n\ngoal (1 subgoal):\n 1. I \\<Turnstile> E", "proof (cases rule: ord_resolve.cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> I \\<Turnstile> E", "case (ord_resolve n Cs D)"], ["proof (state)\nthis:\n  DA = D + negs (mset As)\n  E = \\<Sum>\\<^sub># (mset Cs) + D\n  length CAs = n\n  length Cs = n\n  length AAs = n\n  length As = n\n  n \\<noteq> 0\n  \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i)\n  \\<forall>i<n. AAs ! i \\<noteq> {#}\n  \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i\n  eligible As (D + negs (mset As))\n  \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i)\n  \\<forall>i<n. S (CAs ! i) = {#}\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> I \\<Turnstile> E", "note DA = this(1) and e = this(2) and cas_len = this(3) and cs_len = this(4) and\n    as_len = this(6) and cas = this(8) and aas_ne = this(9) and a_eq = this(10)"], ["proof (state)\nthis:\n  DA = D + negs (mset As)\n  E = \\<Sum>\\<^sub># (mset Cs) + D\n  length CAs = n\n  length Cs = n\n  length As = n\n  \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i)\n  \\<forall>i<n. AAs ! i \\<noteq> {#}\n  \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> I \\<Turnstile> E", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<Turnstile> E", "proof (cases \"\\<forall>A \\<in> set As. A \\<in> I\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>A\\<in>set As. A \\<in> I \\<Longrightarrow> I \\<Turnstile> E\n 2. \\<not> (\\<forall>A\\<in>set As. A \\<in> I) \\<Longrightarrow>\n    I \\<Turnstile> E", "case True"], ["proof (state)\nthis:\n  \\<forall>A\\<in>set As. A \\<in> I\n\ngoal (2 subgoals):\n 1. \\<forall>A\\<in>set As. A \\<in> I \\<Longrightarrow> I \\<Turnstile> E\n 2. \\<not> (\\<forall>A\\<in>set As. A \\<in> I) \\<Longrightarrow>\n    I \\<Turnstile> E", "then"], ["proof (chain)\npicking this:\n  \\<forall>A\\<in>set As. A \\<in> I", "have \"\\<not> I \\<Turnstile> negs (mset As)\""], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>set As. A \\<in> I\n\ngoal (1 subgoal):\n 1. \\<not> I \\<Turnstile> negs (mset As)", "unfolding true_cls_def"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>set As. A \\<in> I\n\ngoal (1 subgoal):\n 1. \\<not> Multiset.Bex (negs (mset As)) ((\\<Turnstile>l) I)", "by fastforce"], ["proof (state)\nthis:\n  \\<not> I \\<Turnstile> negs (mset As)\n\ngoal (2 subgoals):\n 1. \\<forall>A\\<in>set As. A \\<in> I \\<Longrightarrow> I \\<Turnstile> E\n 2. \\<not> (\\<forall>A\\<in>set As. A \\<in> I) \\<Longrightarrow>\n    I \\<Turnstile> E", "then"], ["proof (chain)\npicking this:\n  \\<not> I \\<Turnstile> negs (mset As)", "have \"I \\<Turnstile> D\""], ["proof (prove)\nusing this:\n  \\<not> I \\<Turnstile> negs (mset As)\n\ngoal (1 subgoal):\n 1. I \\<Turnstile> D", "using d_true DA"], ["proof (prove)\nusing this:\n  \\<not> I \\<Turnstile> negs (mset As)\n  I \\<Turnstile> DA\n  DA = D + negs (mset As)\n\ngoal (1 subgoal):\n 1. I \\<Turnstile> D", "by fast"], ["proof (state)\nthis:\n  I \\<Turnstile> D\n\ngoal (2 subgoals):\n 1. \\<forall>A\\<in>set As. A \\<in> I \\<Longrightarrow> I \\<Turnstile> E\n 2. \\<not> (\\<forall>A\\<in>set As. A \\<in> I) \\<Longrightarrow>\n    I \\<Turnstile> E", "then"], ["proof (chain)\npicking this:\n  I \\<Turnstile> D", "show ?thesis"], ["proof (prove)\nusing this:\n  I \\<Turnstile> D\n\ngoal (1 subgoal):\n 1. I \\<Turnstile> E", "unfolding e"], ["proof (prove)\nusing this:\n  I \\<Turnstile> D\n\ngoal (1 subgoal):\n 1. I \\<Turnstile> \\<Sum>\\<^sub># (mset Cs) + D", "by blast"], ["proof (state)\nthis:\n  I \\<Turnstile> E\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>A\\<in>set As. A \\<in> I) \\<Longrightarrow>\n    I \\<Turnstile> E", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>A\\<in>set As. A \\<in> I) \\<Longrightarrow>\n    I \\<Turnstile> E", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>A\\<in>set As. A \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>A\\<in>set As. A \\<in> I) \\<Longrightarrow>\n    I \\<Turnstile> E", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>A\\<in>set As. A \\<in> I)", "obtain i where\n      a_in_aa: \"i < n\" and\n      a_false: \"As ! i \\<notin> I\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>A\\<in>set As. A \\<in> I)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < n; As ! i \\<notin> I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cas_len as_len"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>A\\<in>set As. A \\<in> I)\n  length CAs = n\n  length As = n\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < n; As ! i \\<notin> I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth)"], ["proof (state)\nthis:\n  i < n\n  As ! i \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>A\\<in>set As. A \\<in> I) \\<Longrightarrow>\n    I \\<Turnstile> E", "have \"\\<not> I \\<Turnstile> poss (AAs ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> I \\<Turnstile> poss (AAs ! i)", "using a_false a_eq aas_ne a_in_aa"], ["proof (prove)\nusing this:\n  As ! i \\<notin> I\n  \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i\n  \\<forall>i<n. AAs ! i \\<noteq> {#}\n  i < n\n\ngoal (1 subgoal):\n 1. \\<not> I \\<Turnstile> poss (AAs ! i)", "unfolding true_cls_def"], ["proof (prove)\nusing this:\n  As ! i \\<notin> I\n  \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i\n  \\<forall>i<n. AAs ! i \\<noteq> {#}\n  i < n\n\ngoal (1 subgoal):\n 1. \\<not> Multiset.Bex (poss (AAs ! i)) ((\\<Turnstile>l) I)", "by auto"], ["proof (state)\nthis:\n  \\<not> I \\<Turnstile> poss (AAs ! i)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>A\\<in>set As. A \\<in> I) \\<Longrightarrow>\n    I \\<Turnstile> E", "moreover"], ["proof (state)\nthis:\n  \\<not> I \\<Turnstile> poss (AAs ! i)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>A\\<in>set As. A \\<in> I) \\<Longrightarrow>\n    I \\<Turnstile> E", "have \"I \\<Turnstile> CAs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<Turnstile> CAs ! i", "using a_in_aa cc_true"], ["proof (prove)\nusing this:\n  i < n\n  I \\<Turnstile>m mset CAs\n\ngoal (1 subgoal):\n 1. I \\<Turnstile> CAs ! i", "unfolding true_cls_mset_def"], ["proof (prove)\nusing this:\n  i < n\n  Multiset.Ball (mset CAs) ((\\<Turnstile>) I)\n\ngoal (1 subgoal):\n 1. I \\<Turnstile> CAs ! i", "using cas_len"], ["proof (prove)\nusing this:\n  i < n\n  Multiset.Ball (mset CAs) ((\\<Turnstile>) I)\n  length CAs = n\n\ngoal (1 subgoal):\n 1. I \\<Turnstile> CAs ! i", "by auto"], ["proof (state)\nthis:\n  I \\<Turnstile> CAs ! i\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>A\\<in>set As. A \\<in> I) \\<Longrightarrow>\n    I \\<Turnstile> E", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> I \\<Turnstile> poss (AAs ! i)\n  I \\<Turnstile> CAs ! i", "have \"I \\<Turnstile> Cs ! i\""], ["proof (prove)\nusing this:\n  \\<not> I \\<Turnstile> poss (AAs ! i)\n  I \\<Turnstile> CAs ! i\n\ngoal (1 subgoal):\n 1. I \\<Turnstile> Cs ! i", "using cas a_in_aa"], ["proof (prove)\nusing this:\n  \\<not> I \\<Turnstile> poss (AAs ! i)\n  I \\<Turnstile> CAs ! i\n  \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i)\n  i < n\n\ngoal (1 subgoal):\n 1. I \\<Turnstile> Cs ! i", "by auto"], ["proof (state)\nthis:\n  I \\<Turnstile> Cs ! i\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>A\\<in>set As. A \\<in> I) \\<Longrightarrow>\n    I \\<Turnstile> E", "then"], ["proof (chain)\npicking this:\n  I \\<Turnstile> Cs ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  I \\<Turnstile> Cs ! i\n\ngoal (1 subgoal):\n 1. I \\<Turnstile> E", "using a_in_aa cs_len"], ["proof (prove)\nusing this:\n  I \\<Turnstile> Cs ! i\n  i < n\n  length Cs = n\n\ngoal (1 subgoal):\n 1. I \\<Turnstile> E", "unfolding e true_cls_def"], ["proof (prove)\nusing this:\n  Multiset.Bex (Cs ! i) ((\\<Turnstile>l) I)\n  i < n\n  length Cs = n\n\ngoal (1 subgoal):\n 1. Multiset.Bex (\\<Sum>\\<^sub># (mset Cs) + D) ((\\<Turnstile>l) I)", "by (meson in_Union_mset_iff nth_mem_mset union_iff)"], ["proof (state)\nthis:\n  I \\<Turnstile> E\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  I \\<Turnstile> E\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filter_neg_atm_of_S: \"{#Neg (atm_of L). L \\<in># S C#} = S C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {#Neg (atm_of L). L \\<in># S C#} = S C", "by (simp add: S_selects_neg_lits)"], ["", "text \\<open>\nThis corresponds to Lemma 3.13:\n\\<close>"], ["", "lemma ord_resolve_reductive:\n  assumes \"ord_resolve CAs DA AAs As E\"\n  shows \"E < DA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E < DA", "using assms"], ["proof (prove)\nusing this:\n  ord_resolve CAs DA AAs As E\n\ngoal (1 subgoal):\n 1. E < DA", "proof (cases rule: ord_resolve.cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> E < DA", "case (ord_resolve n Cs D)"], ["proof (state)\nthis:\n  DA = D + negs (mset As)\n  E = \\<Sum>\\<^sub># (mset Cs) + D\n  length CAs = n\n  length Cs = n\n  length AAs = n\n  length As = n\n  n \\<noteq> 0\n  \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i)\n  \\<forall>i<n. AAs ! i \\<noteq> {#}\n  \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i\n  eligible As (D + negs (mset As))\n  \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i)\n  \\<forall>i<n. S (CAs ! i) = {#}\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> E < DA", "note DA = this(1) and e = this(2) and cas_len = this(3) and cs_len = this(4) and\n    ai_len = this(6) and nz = this(7) and cas = this(8) and maxim = this(12)"], ["proof (state)\nthis:\n  DA = D + negs (mset As)\n  E = \\<Sum>\\<^sub># (mset Cs) + D\n  length CAs = n\n  length Cs = n\n  length As = n\n  n \\<noteq> 0\n  \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i)\n  \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i)\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> E < DA", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. E < DA", "proof (cases \"\\<Sum>\\<^sub># (mset Cs) = {#}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Sum>\\<^sub># (mset Cs) = {#} \\<Longrightarrow> E < DA\n 2. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "case True"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (mset Cs) = {#}\n\ngoal (2 subgoals):\n 1. \\<Sum>\\<^sub># (mset Cs) = {#} \\<Longrightarrow> E < DA\n 2. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "have \"negs (mset As) \\<noteq> {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. negs (mset As) \\<noteq> {#}", "using nz ai_len"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  length As = n\n\ngoal (1 subgoal):\n 1. negs (mset As) \\<noteq> {#}", "by auto"], ["proof (state)\nthis:\n  negs (mset As) \\<noteq> {#}\n\ngoal (2 subgoals):\n 1. \\<Sum>\\<^sub># (mset Cs) = {#} \\<Longrightarrow> E < DA\n 2. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "then"], ["proof (chain)\npicking this:\n  negs (mset As) \\<noteq> {#}", "show ?thesis"], ["proof (prove)\nusing this:\n  negs (mset As) \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. E < DA", "unfolding True e DA"], ["proof (prove)\nusing this:\n  negs (mset As) \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. {#} + D < D + negs (mset As)", "by auto"], ["proof (state)\nthis:\n  E < DA\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "case False"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "define max_A_of_Cs where\n      \"max_A_of_Cs = Max (atms_of (\\<Sum>\\<^sub># (mset Cs)))\""], ["proof (state)\nthis:\n  max_A_of_Cs = Max (atms_of (\\<Sum>\\<^sub># (mset Cs)))\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "have\n      mc_in: \"max_A_of_Cs \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs))\" and\n      mc_max: \"\\<And>B. B \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs)) \\<Longrightarrow> B \\<le> max_A_of_Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_A_of_Cs \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs)) &&&\n    (\\<And>B.\n        B \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs)) \\<Longrightarrow>\n        B \\<le> max_A_of_Cs)", "using max_A_of_Cs_def False"], ["proof (prove)\nusing this:\n  max_A_of_Cs = Max (atms_of (\\<Sum>\\<^sub># (mset Cs)))\n  \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. max_A_of_Cs \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs)) &&&\n    (\\<And>B.\n        B \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs)) \\<Longrightarrow>\n        B \\<le> max_A_of_Cs)", "by auto"], ["proof (state)\nthis:\n  max_A_of_Cs \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs))\n  ?B \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs)) \\<Longrightarrow>\n  ?B \\<le> max_A_of_Cs\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "then"], ["proof (chain)\npicking this:\n  max_A_of_Cs \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs))\n  ?B \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs)) \\<Longrightarrow>\n  ?B \\<le> max_A_of_Cs", "have \"\\<exists>C_max \\<in> set Cs. max_A_of_Cs \\<in> atms_of (C_max)\""], ["proof (prove)\nusing this:\n  max_A_of_Cs \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs))\n  ?B \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs)) \\<Longrightarrow>\n  ?B \\<le> max_A_of_Cs\n\ngoal (1 subgoal):\n 1. \\<exists>C_max\\<in>set Cs. max_A_of_Cs \\<in> atms_of C_max", "by (metis atm_imp_pos_or_neg_lit in_Union_mset_iff neg_lit_in_atms_of pos_lit_in_atms_of\n          set_mset_mset)"], ["proof (state)\nthis:\n  \\<exists>C_max\\<in>set Cs. max_A_of_Cs \\<in> atms_of C_max\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "then"], ["proof (chain)\npicking this:\n  \\<exists>C_max\\<in>set Cs. max_A_of_Cs \\<in> atms_of C_max", "obtain max_i where\n      cm_in_cas: \"max_i < length CAs\" and\n      mc_in_cm: \"max_A_of_Cs \\<in> atms_of (Cs ! max_i)\""], ["proof (prove)\nusing this:\n  \\<exists>C_max\\<in>set Cs. max_A_of_Cs \\<in> atms_of C_max\n\ngoal (1 subgoal):\n 1. (\\<And>max_i.\n        \\<lbrakk>max_i < length CAs;\n         max_A_of_Cs \\<in> atms_of (Cs ! max_i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using in_set_conv_nth[of _ CAs]"], ["proof (prove)\nusing this:\n  \\<exists>C_max\\<in>set Cs. max_A_of_Cs \\<in> atms_of C_max\n  (?x \\<in> set CAs) = (\\<exists>i<length CAs. CAs ! i = ?x)\n\ngoal (1 subgoal):\n 1. (\\<And>max_i.\n        \\<lbrakk>max_i < length CAs;\n         max_A_of_Cs \\<in> atms_of (Cs ! max_i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis cas_len cs_len in_set_conv_nth)"], ["proof (state)\nthis:\n  max_i < length CAs\n  max_A_of_Cs \\<in> atms_of (Cs ! max_i)\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "define CA_max where \"CA_max = CAs ! max_i\""], ["proof (state)\nthis:\n  CA_max = CAs ! max_i\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "define A_max where \"A_max = As ! max_i\""], ["proof (state)\nthis:\n  A_max = As ! max_i\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "define C_max where \"C_max = Cs ! max_i\""], ["proof (state)\nthis:\n  C_max = Cs ! max_i\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "have mc_lt_ma: \"max_A_of_Cs < A_max\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_A_of_Cs < A_max", "using maxim cm_in_cas mc_in_cm cas_len"], ["proof (prove)\nusing this:\n  \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i)\n  max_i < length CAs\n  max_A_of_Cs \\<in> atms_of (Cs ! max_i)\n  length CAs = n\n\ngoal (1 subgoal):\n 1. max_A_of_Cs < A_max", "unfolding strictly_maximal_wrt_def A_max_def"], ["proof (prove)\nusing this:\n  \\<forall>i<n. \\<forall>B\\<in>atms_of (Cs ! i). B < As ! i\n  max_i < length CAs\n  max_A_of_Cs \\<in> atms_of (Cs ! max_i)\n  length CAs = n\n\ngoal (1 subgoal):\n 1. max_A_of_Cs < As ! max_i", "by auto"], ["proof (state)\nthis:\n  max_A_of_Cs < A_max\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "then"], ["proof (chain)\npicking this:\n  max_A_of_Cs < A_max", "have ucas_ne_neg_aa: \"\\<Sum>\\<^sub># (mset Cs) \\<noteq> negs (mset As)\""], ["proof (prove)\nusing this:\n  max_A_of_Cs < A_max\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> negs (mset As)", "using mc_in mc_max mc_lt_ma cm_in_cas cas_len ai_len"], ["proof (prove)\nusing this:\n  max_A_of_Cs < A_max\n  max_A_of_Cs \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs))\n  ?B \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs)) \\<Longrightarrow>\n  ?B \\<le> max_A_of_Cs\n  max_A_of_Cs < A_max\n  max_i < length CAs\n  length CAs = n\n  length As = n\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> negs (mset As)", "unfolding A_max_def"], ["proof (prove)\nusing this:\n  max_A_of_Cs < As ! max_i\n  max_A_of_Cs \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs))\n  ?B \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs)) \\<Longrightarrow>\n  ?B \\<le> max_A_of_Cs\n  max_A_of_Cs < As ! max_i\n  max_i < length CAs\n  length CAs = n\n  length As = n\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> negs (mset As)", "by (metis atms_of_negs nth_mem set_mset_mset leD)"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (mset Cs) \\<noteq> negs (mset As)\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "moreover"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (mset Cs) \\<noteq> negs (mset As)\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "have ucas_lt_ma: \"\\<forall>B \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs)). B < A_max\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>B\\<in>atms_of (\\<Sum>\\<^sub># (mset Cs)). B < A_max", "using mc_max mc_lt_ma"], ["proof (prove)\nusing this:\n  ?B \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs)) \\<Longrightarrow>\n  ?B \\<le> max_A_of_Cs\n  max_A_of_Cs < A_max\n\ngoal (1 subgoal):\n 1. \\<forall>B\\<in>atms_of (\\<Sum>\\<^sub># (mset Cs)). B < A_max", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>B\\<in>atms_of (\\<Sum>\\<^sub># (mset Cs)). B < A_max\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "moreover"], ["proof (state)\nthis:\n  \\<forall>B\\<in>atms_of (\\<Sum>\\<^sub># (mset Cs)). B < A_max\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "have \"\\<not> Neg A_max \\<in># \\<Sum>\\<^sub># (mset Cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Neg A_max \\<notin># \\<Sum>\\<^sub># (mset Cs)", "using ucas_lt_ma neg_lit_in_atms_of[of A_max \"\\<Sum>\\<^sub># (mset Cs)\"]"], ["proof (prove)\nusing this:\n  \\<forall>B\\<in>atms_of (\\<Sum>\\<^sub># (mset Cs)). B < A_max\n  Neg A_max \\<in># \\<Sum>\\<^sub># (mset Cs) \\<Longrightarrow>\n  A_max \\<in> atms_of (\\<Sum>\\<^sub># (mset Cs))\n\ngoal (1 subgoal):\n 1. Neg A_max \\<notin># \\<Sum>\\<^sub># (mset Cs)", "by auto"], ["proof (state)\nthis:\n  Neg A_max \\<notin># \\<Sum>\\<^sub># (mset Cs)\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "moreover"], ["proof (state)\nthis:\n  Neg A_max \\<notin># \\<Sum>\\<^sub># (mset Cs)\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "have \"Neg A_max \\<in># negs (mset As)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Neg A_max \\<in># negs (mset As)", "using cm_in_cas cas_len ai_len A_max_def"], ["proof (prove)\nusing this:\n  max_i < length CAs\n  length CAs = n\n  length As = n\n  A_max = As ! max_i\n\ngoal (1 subgoal):\n 1. Neg A_max \\<in># negs (mset As)", "by auto"], ["proof (state)\nthis:\n  Neg A_max \\<in># negs (mset As)\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "ultimately"], ["proof (chain)\npicking this:\n  \\<Sum>\\<^sub># (mset Cs) \\<noteq> negs (mset As)\n  \\<forall>B\\<in>atms_of (\\<Sum>\\<^sub># (mset Cs)). B < A_max\n  Neg A_max \\<notin># \\<Sum>\\<^sub># (mset Cs)\n  Neg A_max \\<in># negs (mset As)", "have \"\\<Sum>\\<^sub># (mset Cs) < negs (mset As)\""], ["proof (prove)\nusing this:\n  \\<Sum>\\<^sub># (mset Cs) \\<noteq> negs (mset As)\n  \\<forall>B\\<in>atms_of (\\<Sum>\\<^sub># (mset Cs)). B < A_max\n  Neg A_max \\<notin># \\<Sum>\\<^sub># (mset Cs)\n  Neg A_max \\<in># negs (mset As)\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) < negs (mset As)", "unfolding less_multiset\\<^sub>H\\<^sub>O"], ["proof (prove)\nusing this:\n  \\<Sum>\\<^sub># (mset Cs) \\<noteq> negs (mset As)\n  \\<forall>B\\<in>atms_of (\\<Sum>\\<^sub># (mset Cs)). B < A_max\n  Neg A_max \\<notin># \\<Sum>\\<^sub># (mset Cs)\n  Neg A_max \\<in># negs (mset As)\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> negs (mset As) \\<and>\n    (\\<forall>y.\n        count (negs (mset As)) y\n        < count (\\<Sum>\\<^sub># (mset Cs)) y \\<longrightarrow>\n        (\\<exists>x>y.\n            count (\\<Sum>\\<^sub># (mset Cs)) x < count (negs (mset As)) x))", "by (metis (no_types) atms_less_eq_imp_lit_less_eq_neg count_greater_zero_iff\n          count_inI le_imp_less_or_eq less_imp_not_less not_le)"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (mset Cs) < negs (mset As)\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) \\<noteq> {#} \\<Longrightarrow> E < DA", "then"], ["proof (chain)\npicking this:\n  \\<Sum>\\<^sub># (mset Cs) < negs (mset As)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Sum>\\<^sub># (mset Cs) < negs (mset As)\n\ngoal (1 subgoal):\n 1. E < DA", "unfolding e DA"], ["proof (prove)\nusing this:\n  \\<Sum>\\<^sub># (mset Cs) < negs (mset As)\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) + D < D + negs (mset As)", "by auto"], ["proof (state)\nthis:\n  E < DA\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  E < DA\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nThis corresponds to Theorem 3.15:\n\\<close>"], ["", "theorem ord_resolve_counterex_reducing:\n  assumes\n    ec_ni_n: \"{#} \\<notin> N\" and\n    d_in_n: \"DA \\<in> N\" and\n    d_cex: \"\\<not> INTERP N \\<Turnstile> DA\" and\n    d_min: \"\\<And>C. C \\<in> N \\<Longrightarrow> \\<not> INTERP N \\<Turnstile> C \\<Longrightarrow> DA \\<le> C\"\n  obtains CAs AAs As E where\n    \"set CAs \\<subseteq> N\"\n    \"INTERP N \\<Turnstile>m mset CAs\"\n    \"\\<And>CA. CA \\<in> set CAs \\<Longrightarrow> productive N CA\"\n    \"ord_resolve CAs DA AAs As E\"\n    \"\\<not> INTERP N \\<Turnstile> E\"\n    \"E < DA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have d_ne: \"DA \\<noteq> {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DA \\<noteq> {#}", "using d_in_n ec_ni_n"], ["proof (prove)\nusing this:\n  DA \\<in> N\n  {#} \\<notin> N\n\ngoal (1 subgoal):\n 1. DA \\<noteq> {#}", "by blast"], ["proof (state)\nthis:\n  DA \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<exists>As. As \\<noteq> [] \\<and> negs (mset As) \\<le># DA \\<and> eligible As DA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "proof (cases \"S DA = {#}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. S DA = {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n 2. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "assume s_d_e: \"S DA = {#}\""], ["proof (state)\nthis:\n  S DA = {#}\n\ngoal (2 subgoals):\n 1. S DA = {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n 2. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "define A where \"A = Max (atms_of DA)\""], ["proof (state)\nthis:\n  A = Max (atms_of DA)\n\ngoal (2 subgoals):\n 1. S DA = {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n 2. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "define As where \"As = [A]\""], ["proof (state)\nthis:\n  As = [A]\n\ngoal (2 subgoals):\n 1. S DA = {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n 2. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "define D where \"D = DA-{#Neg A #}\""], ["proof (state)\nthis:\n  D = remove1_mset (Neg A) DA\n\ngoal (2 subgoals):\n 1. S DA = {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n 2. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "have na_in_d: \"Neg A \\<in># DA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Neg A \\<in># DA", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Neg (Max (atms_of DA)) \\<in># DA", "using s_d_e d_ne d_in_n d_cex d_min"], ["proof (prove)\nusing this:\n  S DA = {#}\n  DA \\<noteq> {#}\n  DA \\<in> N\n  \\<not> INTERP N \\<Turnstile> DA\n  \\<lbrakk>?C \\<in> N; \\<not> INTERP N \\<Turnstile> ?C\\<rbrakk>\n  \\<Longrightarrow> DA \\<le> ?C\n\ngoal (1 subgoal):\n 1. Neg (Max (atms_of DA)) \\<in># DA", "by (metis Max_in_lits Max_lit_eq_pos_or_neg_Max_atm max_pos_imp_Interp Interp_imp_INTERP)"], ["proof (state)\nthis:\n  Neg A \\<in># DA\n\ngoal (2 subgoals):\n 1. S DA = {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n 2. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "then"], ["proof (chain)\npicking this:\n  Neg A \\<in># DA", "have das: \"DA = D + negs (mset As)\""], ["proof (prove)\nusing this:\n  Neg A \\<in># DA\n\ngoal (1 subgoal):\n 1. DA = D + negs (mset As)", "unfolding D_def As_def"], ["proof (prove)\nusing this:\n  Neg A \\<in># DA\n\ngoal (1 subgoal):\n 1. DA = remove1_mset (Neg A) DA + negs (mset [A])", "by auto"], ["proof (state)\nthis:\n  DA = D + negs (mset As)\n\ngoal (2 subgoals):\n 1. S DA = {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n 2. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "moreover"], ["proof (state)\nthis:\n  DA = D + negs (mset As)\n\ngoal (2 subgoals):\n 1. S DA = {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n 2. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "from na_in_d"], ["proof (chain)\npicking this:\n  Neg A \\<in># DA", "have \"negs (mset As) \\<subseteq># DA\""], ["proof (prove)\nusing this:\n  Neg A \\<in># DA\n\ngoal (1 subgoal):\n 1. negs (mset As) \\<subseteq># DA", "by (simp add: As_def)"], ["proof (state)\nthis:\n  negs (mset As) \\<subseteq># DA\n\ngoal (2 subgoals):\n 1. S DA = {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n 2. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "moreover"], ["proof (state)\nthis:\n  negs (mset As) \\<subseteq># DA\n\ngoal (2 subgoals):\n 1. S DA = {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n 2. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "have hd: \"As ! 0 = Max (atms_of (D + negs (mset As)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. As ! 0 = Max (atms_of (D + negs (mset As)))", "using A_def As_def das"], ["proof (prove)\nusing this:\n  A = Max (atms_of DA)\n  As = [A]\n  DA = D + negs (mset As)\n\ngoal (1 subgoal):\n 1. As ! 0 = Max (atms_of (D + negs (mset As)))", "by auto"], ["proof (state)\nthis:\n  As ! 0 = Max (atms_of (D + negs (mset As)))\n\ngoal (2 subgoals):\n 1. S DA = {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n 2. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "then"], ["proof (chain)\npicking this:\n  As ! 0 = Max (atms_of (D + negs (mset As)))", "have \"eligible As DA\""], ["proof (prove)\nusing this:\n  As ! 0 = Max (atms_of (D + negs (mset As)))\n\ngoal (1 subgoal):\n 1. eligible As DA", "using eligible s_d_e As_def das maximal_wrt_def"], ["proof (prove)\nusing this:\n  As ! 0 = Max (atms_of (D + negs (mset As)))\n  S ?DA = negs (mset ?As) \\<or>\n  S ?DA = {#} \\<and>\n  length ?As = 1 \\<and> maximal_wrt (?As ! 0) ?DA \\<Longrightarrow>\n  eligible ?As ?DA\n  S DA = {#}\n  As = [A]\n  DA = D + negs (mset As)\n  maximal_wrt ?A ?DA = (?DA = {#} \\<or> ?A = Max (atms_of ?DA))\n\ngoal (1 subgoal):\n 1. eligible As DA", "by auto"], ["proof (state)\nthis:\n  eligible As DA\n\ngoal (2 subgoals):\n 1. S DA = {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n 2. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "ultimately"], ["proof (chain)\npicking this:\n  DA = D + negs (mset As)\n  negs (mset As) \\<subseteq># DA\n  eligible As DA", "show ?thesis"], ["proof (prove)\nusing this:\n  DA = D + negs (mset As)\n  negs (mset As) \\<subseteq># DA\n  eligible As DA\n\ngoal (1 subgoal):\n 1. \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "using As_def"], ["proof (prove)\nusing this:\n  DA = D + negs (mset As)\n  negs (mset As) \\<subseteq># DA\n  eligible As DA\n  As = [A]\n\ngoal (1 subgoal):\n 1. \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "by blast"], ["proof (state)\nthis:\n  \\<exists>As.\n     As \\<noteq> [] \\<and>\n     negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n\ngoal (1 subgoal):\n 1. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "assume s_d_e: \"S DA \\<noteq> {#}\""], ["proof (state)\nthis:\n  S DA \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "define As :: \"'a list\" where\n      \"As = list_of_mset {#atm_of L. L \\<in># S DA#}\""], ["proof (state)\nthis:\n  As = list_of_mset (image_mset atm_of (S DA))\n\ngoal (1 subgoal):\n 1. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "define D :: \"'a clause\" where\n      \"D = DA - negs {#atm_of L. L \\<in># S DA#}\""], ["proof (state)\nthis:\n  D = DA - negs (image_mset atm_of (S DA))\n\ngoal (1 subgoal):\n 1. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "have \"As \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. As \\<noteq> []", "unfolding As_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of_mset (image_mset atm_of (S DA)) \\<noteq> []", "using s_d_e"], ["proof (prove)\nusing this:\n  S DA \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. list_of_mset (image_mset atm_of (S DA)) \\<noteq> []", "by (metis image_mset_is_empty_iff list_of_mset_empty)"], ["proof (state)\nthis:\n  As \\<noteq> []\n\ngoal (1 subgoal):\n 1. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "moreover"], ["proof (state)\nthis:\n  As \\<noteq> []\n\ngoal (1 subgoal):\n 1. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "have da_sub_as: \"negs {#atm_of L. L \\<in># S DA#} \\<subseteq># DA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. negs (image_mset atm_of (S DA)) \\<subseteq># DA", "using S_selects_subseteq"], ["proof (prove)\nusing this:\n  S ?C \\<subseteq># ?C\n\ngoal (1 subgoal):\n 1. negs (image_mset atm_of (S DA)) \\<subseteq># DA", "by (auto simp: filter_neg_atm_of_S)"], ["proof (state)\nthis:\n  negs (image_mset atm_of (S DA)) \\<subseteq># DA\n\ngoal (1 subgoal):\n 1. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "then"], ["proof (chain)\npicking this:\n  negs (image_mset atm_of (S DA)) \\<subseteq># DA", "have \"negs (mset As) \\<subseteq># DA\""], ["proof (prove)\nusing this:\n  negs (image_mset atm_of (S DA)) \\<subseteq># DA\n\ngoal (1 subgoal):\n 1. negs (mset As) \\<subseteq># DA", "unfolding As_def"], ["proof (prove)\nusing this:\n  negs (image_mset atm_of (S DA)) \\<subseteq># DA\n\ngoal (1 subgoal):\n 1. negs (mset (list_of_mset (image_mset atm_of (S DA)))) \\<subseteq># DA", "by auto"], ["proof (state)\nthis:\n  negs (mset As) \\<subseteq># DA\n\ngoal (1 subgoal):\n 1. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "moreover"], ["proof (state)\nthis:\n  negs (mset As) \\<subseteq># DA\n\ngoal (1 subgoal):\n 1. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "have das: \"DA = D + negs (mset As)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DA = D + negs (mset As)", "using da_sub_as"], ["proof (prove)\nusing this:\n  negs (image_mset atm_of (S DA)) \\<subseteq># DA\n\ngoal (1 subgoal):\n 1. DA = D + negs (mset As)", "unfolding D_def As_def"], ["proof (prove)\nusing this:\n  negs (image_mset atm_of (S DA)) \\<subseteq># DA\n\ngoal (1 subgoal):\n 1. DA =\n    DA - negs (image_mset atm_of (S DA)) +\n    negs (mset (list_of_mset (image_mset atm_of (S DA))))", "by auto"], ["proof (state)\nthis:\n  DA = D + negs (mset As)\n\ngoal (1 subgoal):\n 1. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "moreover"], ["proof (state)\nthis:\n  DA = D + negs (mset As)\n\ngoal (1 subgoal):\n 1. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "have \"S DA = negs {#atm_of L. L \\<in># S DA#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S DA = negs (image_mset atm_of (S DA))", "by (auto simp: filter_neg_atm_of_S)"], ["proof (state)\nthis:\n  S DA = negs (image_mset atm_of (S DA))\n\ngoal (1 subgoal):\n 1. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "then"], ["proof (chain)\npicking this:\n  S DA = negs (image_mset atm_of (S DA))", "have \"S DA = negs (mset As)\""], ["proof (prove)\nusing this:\n  S DA = negs (image_mset atm_of (S DA))\n\ngoal (1 subgoal):\n 1. S DA = negs (mset As)", "unfolding As_def"], ["proof (prove)\nusing this:\n  S DA = negs (image_mset atm_of (S DA))\n\ngoal (1 subgoal):\n 1. S DA = negs (mset (list_of_mset (image_mset atm_of (S DA))))", "by auto"], ["proof (state)\nthis:\n  S DA = negs (mset As)\n\ngoal (1 subgoal):\n 1. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "then"], ["proof (chain)\npicking this:\n  S DA = negs (mset As)", "have \"eligible As DA\""], ["proof (prove)\nusing this:\n  S DA = negs (mset As)\n\ngoal (1 subgoal):\n 1. eligible As DA", "unfolding das"], ["proof (prove)\nusing this:\n  S (D + negs (mset As)) = negs (mset As)\n\ngoal (1 subgoal):\n 1. eligible As (D + negs (mset As))", "using eligible"], ["proof (prove)\nusing this:\n  S (D + negs (mset As)) = negs (mset As)\n  S ?DA = negs (mset ?As) \\<or>\n  S ?DA = {#} \\<and>\n  length ?As = 1 \\<and> maximal_wrt (?As ! 0) ?DA \\<Longrightarrow>\n  eligible ?As ?DA\n\ngoal (1 subgoal):\n 1. eligible As (D + negs (mset As))", "by auto"], ["proof (state)\nthis:\n  eligible As DA\n\ngoal (1 subgoal):\n 1. S DA \\<noteq> {#} \\<Longrightarrow>\n    \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "ultimately"], ["proof (chain)\npicking this:\n  As \\<noteq> []\n  negs (mset As) \\<subseteq># DA\n  DA = D + negs (mset As)\n  eligible As DA", "show ?thesis"], ["proof (prove)\nusing this:\n  As \\<noteq> []\n  negs (mset As) \\<subseteq># DA\n  DA = D + negs (mset As)\n  eligible As DA\n\ngoal (1 subgoal):\n 1. \\<exists>As.\n       As \\<noteq> [] \\<and>\n       negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "by blast"], ["proof (state)\nthis:\n  \\<exists>As.\n     As \\<noteq> [] \\<and>\n     negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>As.\n     As \\<noteq> [] \\<and>\n     negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>As.\n     As \\<noteq> [] \\<and>\n     negs (mset As) \\<subseteq># DA \\<and> eligible As DA", "obtain As :: \"'a list\" where\n    as_ne: \"As \\<noteq> []\" and\n    negs_as_le_d: \"negs (mset As) \\<le># DA\" and\n    s_d: \"eligible As DA\""], ["proof (prove)\nusing this:\n  \\<exists>As.\n     As \\<noteq> [] \\<and>\n     negs (mset As) \\<subseteq># DA \\<and> eligible As DA\n\ngoal (1 subgoal):\n 1. (\\<And>As.\n        \\<lbrakk>As \\<noteq> []; negs (mset As) \\<subseteq># DA;\n         eligible As DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  As \\<noteq> []\n  negs (mset As) \\<subseteq># DA\n  eligible As DA\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define D :: \"'a clause\" where\n    \"D = DA - negs (mset As)\""], ["proof (state)\nthis:\n  D = DA - negs (mset As)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"set As \\<subseteq> INTERP N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set As \\<subseteq> INTERP N", "using d_cex negs_as_le_d"], ["proof (prove)\nusing this:\n  \\<not> INTERP N \\<Turnstile> DA\n  negs (mset As) \\<subseteq># DA\n\ngoal (1 subgoal):\n 1. set As \\<subseteq> INTERP N", "by force"], ["proof (state)\nthis:\n  set As \\<subseteq> INTERP N\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  set As \\<subseteq> INTERP N", "have prod_ex: \"\\<forall>A \\<in> set As. \\<exists>D. produces N D A\""], ["proof (prove)\nusing this:\n  set As \\<subseteq> INTERP N\n\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>set As. \\<exists>D. production N D = {A}", "unfolding INTERP_def"], ["proof (prove)\nusing this:\n  set As \\<subseteq> \\<Union> (production N ` N)\n\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>set As. \\<exists>D. production N D = {A}", "by (metis (no_types, lifting) INTERP_def subsetCE UN_E not_produces_imp_notin_production)"], ["proof (state)\nthis:\n  \\<forall>A\\<in>set As. \\<exists>D. production N D = {A}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<forall>A\\<in>set As. \\<exists>D. production N D = {A}", "have \"\\<And>A. \\<exists>D. produces N D A \\<longrightarrow> A \\<in> set As\""], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>set As. \\<exists>D. production N D = {A}\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<exists>D. production N D = {A} \\<longrightarrow> A \\<in> set As", "using ec_ni_n"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>set As. \\<exists>D. production N D = {A}\n  {#} \\<notin> N\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<exists>D. production N D = {A} \\<longrightarrow> A \\<in> set As", "by (auto intro: productive_in_N)"], ["proof (state)\nthis:\n  \\<exists>D. production N D = {?A} \\<longrightarrow> ?A \\<in> set As\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>D. production N D = {?A} \\<longrightarrow> ?A \\<in> set As", "have \"\\<And>A. \\<exists>D. produces N D A \\<longleftrightarrow> A \\<in> set As\""], ["proof (prove)\nusing this:\n  \\<exists>D. production N D = {?A} \\<longrightarrow> ?A \\<in> set As\n\ngoal (1 subgoal):\n 1. \\<And>A. \\<exists>D. (production N D = {A}) = (A \\<in> set As)", "using prod_ex"], ["proof (prove)\nusing this:\n  \\<exists>D. production N D = {?A} \\<longrightarrow> ?A \\<in> set As\n  \\<forall>A\\<in>set As. \\<exists>D. production N D = {A}\n\ngoal (1 subgoal):\n 1. \\<And>A. \\<exists>D. (production N D = {A}) = (A \\<in> set As)", "by blast"], ["proof (state)\nthis:\n  \\<exists>D. (production N D = {?A}) = (?A \\<in> set As)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>D. (production N D = {?A}) = (?A \\<in> set As)", "obtain CA_of where c_of0: \"\\<And>A. produces N (CA_of A) A \\<longleftrightarrow> A \\<in> set As\""], ["proof (prove)\nusing this:\n  \\<exists>D. (production N D = {?A}) = (?A \\<in> set As)\n\ngoal (1 subgoal):\n 1. (\\<And>CA_of.\n        (\\<And>A.\n            (production N (CA_of A) = {A}) =\n            (A \\<in> set As)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (production N (CA_of ?A) = {?A}) = (?A \\<in> set As)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  (production N (CA_of ?A) = {?A}) = (?A \\<in> set As)", "have prod_c0: \"\\<forall>A \\<in> set As. produces N (CA_of A) A\""], ["proof (prove)\nusing this:\n  (production N (CA_of ?A) = {?A}) = (?A \\<in> set As)\n\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>set As. production N (CA_of A) = {A}", "by blast"], ["proof (state)\nthis:\n  \\<forall>A\\<in>set As. production N (CA_of A) = {A}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define C_of where\n    \"\\<And>A. C_of A = {#L \\<in># CA_of A. L \\<noteq> Pos A#}\""], ["proof (state)\nthis:\n  C_of ?A = {#L \\<in># CA_of ?A. L \\<noteq> Pos ?A#}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define Aj_of where\n    \"\\<And>A. Aj_of A = image_mset atm_of {#L \\<in># CA_of A. L = Pos A#}\""], ["proof (state)\nthis:\n  Aj_of ?A = image_mset atm_of {#L \\<in># CA_of ?A. L = Pos ?A#}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have pospos: \"\\<And>LL A. {#Pos (atm_of x). x \\<in># {#L \\<in># LL. L = Pos A#}#} = {#L \\<in># LL. L = Pos A#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>LL A.\n       {#Pos (atm_of x). x \\<in># {#L \\<in># LL. L = Pos A#}#} =\n       {#L \\<in># LL. L = Pos A#}", "by (metis (mono_tags, lifting) image_filter_cong literal.sel(1) multiset.map_ident)"], ["proof (state)\nthis:\n  {#Pos (atm_of x). x \\<in># {#L \\<in># ?LL. L = Pos ?A#}#} =\n  {#L \\<in># ?LL. L = Pos ?A#}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have ca_of_c_of_aj_of: \"\\<And>A. CA_of A = C_of A + poss (Aj_of A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. CA_of A = C_of A + poss (Aj_of A)", "using pospos[of _ \"CA_of _\"]"], ["proof (prove)\nusing this:\n  {#Pos (atm_of x). x \\<in># {#L \\<in># CA_of ?uu4. L = Pos ?A#}#} =\n  {#L \\<in># CA_of ?uu4. L = Pos ?A#}\n\ngoal (1 subgoal):\n 1. \\<And>A. CA_of A = C_of A + poss (Aj_of A)", "by (simp add: C_of_def Aj_of_def)"], ["proof (state)\nthis:\n  CA_of ?A1 = C_of ?A1 + poss (Aj_of ?A1)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define n :: nat where\n    \"n = length As\""], ["proof (state)\nthis:\n  n = length As\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define Cs :: \"'a clause list\" where\n    \"Cs = map C_of As\""], ["proof (state)\nthis:\n  Cs = map C_of As\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define AAs :: \"'a multiset list\" where\n    \"AAs = map Aj_of As\""], ["proof (state)\nthis:\n  AAs = map Aj_of As\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define CAs :: \"'a literal multiset list\" where\n    \"CAs = map CA_of As\""], ["proof (state)\nthis:\n  CAs = map CA_of As\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have m_nz: \"\\<And>A. A \\<in> set As \\<Longrightarrow> Aj_of A \\<noteq> {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. A \\<in> set As \\<Longrightarrow> Aj_of A \\<noteq> {#}", "unfolding Aj_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> set As \\<Longrightarrow>\n       image_mset atm_of {#L \\<in># CA_of A. L = Pos A#} \\<noteq> {#}", "using prod_c0 produces_imp_Pos_in_lits"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>set As. production N (CA_of A) = {A}\n  production ?N ?C = {?A} \\<Longrightarrow> Pos ?A \\<in># ?C\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> set As \\<Longrightarrow>\n       image_mset atm_of {#L \\<in># CA_of A. L = Pos A#} \\<noteq> {#}", "by (metis (full_types) filter_mset_empty_conv image_mset_is_empty_iff)"], ["proof (state)\nthis:\n  ?A1 \\<in> set As \\<Longrightarrow> Aj_of ?A1 \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have prod_c: \"productive N CA\" if ca_in: \"CA \\<in> set CAs\" for CA"], ["proof (prove)\ngoal (1 subgoal):\n 1. production N CA \\<noteq> {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. production N CA \\<noteq> {}", "obtain i where i_p: \"i < length CAs\" \"CAs ! i = CA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length CAs; CAs ! i = CA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ca_in"], ["proof (prove)\nusing this:\n  CA \\<in> set CAs\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length CAs; CAs ! i = CA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson in_set_conv_nth)"], ["proof (state)\nthis:\n  i < length CAs\n  CAs ! i = CA\n\ngoal (1 subgoal):\n 1. production N CA \\<noteq> {}", "have \"production N (CA_of (As ! i)) = {As ! i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. production N (CA_of (As ! i)) = {As ! i}", "using i_p CAs_def prod_c0"], ["proof (prove)\nusing this:\n  i < length CAs\n  CAs ! i = CA\n  CAs = map CA_of As\n  \\<forall>A\\<in>set As. production N (CA_of A) = {A}\n\ngoal (1 subgoal):\n 1. production N (CA_of (As ! i)) = {As ! i}", "by auto"], ["proof (state)\nthis:\n  production N (CA_of (As ! i)) = {As ! i}\n\ngoal (1 subgoal):\n 1. production N CA \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  production N (CA_of (As ! i)) = {As ! i}", "show \"productive N CA\""], ["proof (prove)\nusing this:\n  production N (CA_of (As ! i)) = {As ! i}\n\ngoal (1 subgoal):\n 1. production N CA \\<noteq> {}", "using i_p CAs_def"], ["proof (prove)\nusing this:\n  production N (CA_of (As ! i)) = {As ! i}\n  i < length CAs\n  CAs ! i = CA\n  CAs = map CA_of As\n\ngoal (1 subgoal):\n 1. production N CA \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  production N CA \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?CA1 \\<in> set CAs \\<Longrightarrow> production N ?CA1 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  ?CA1 \\<in> set CAs \\<Longrightarrow> production N ?CA1 \\<noteq> {}", "have cs_subs_n: \"set CAs \\<subseteq> N\""], ["proof (prove)\nusing this:\n  ?CA1 \\<in> set CAs \\<Longrightarrow> production N ?CA1 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. set CAs \\<subseteq> N", "using productive_in_N"], ["proof (prove)\nusing this:\n  ?CA1 \\<in> set CAs \\<Longrightarrow> production N ?CA1 \\<noteq> {}\n  production ?N ?C \\<noteq> {} \\<Longrightarrow> ?C \\<in> ?N\n\ngoal (1 subgoal):\n 1. set CAs \\<subseteq> N", "by auto"], ["proof (state)\nthis:\n  set CAs \\<subseteq> N\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have cs_true: \"INTERP N \\<Turnstile>m mset CAs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. INTERP N \\<Turnstile>m mset CAs", "unfolding true_cls_mset_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Multiset.Ball (mset CAs) ((\\<Turnstile>) (INTERP N))", "using prod_c productive_imp_INTERP"], ["proof (prove)\nusing this:\n  ?CA1 \\<in> set CAs \\<Longrightarrow> production N ?CA1 \\<noteq> {}\n  production ?N ?C \\<noteq> {} \\<Longrightarrow> INTERP ?N \\<Turnstile> ?C\n\ngoal (1 subgoal):\n 1. Multiset.Ball (mset CAs) ((\\<Turnstile>) (INTERP N))", "by auto"], ["proof (state)\nthis:\n  INTERP N \\<Turnstile>m mset CAs\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<And>A. A \\<in> set As \\<Longrightarrow> \\<not> Neg A \\<in># CA_of A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. A \\<in> set As \\<Longrightarrow> Neg A \\<notin># CA_of A", "using prod_c0 produces_imp_neg_notin_lits"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>set As. production N (CA_of A) = {A}\n  production ?N ?C = {?A} \\<Longrightarrow> Neg ?A \\<notin># ?C\n\ngoal (1 subgoal):\n 1. \\<And>A. A \\<in> set As \\<Longrightarrow> Neg A \\<notin># CA_of A", "by auto"], ["proof (state)\nthis:\n  ?A1 \\<in> set As \\<Longrightarrow> Neg ?A1 \\<notin># CA_of ?A1\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  ?A1 \\<in> set As \\<Longrightarrow> Neg ?A1 \\<notin># CA_of ?A1", "have a_ni_c': \"\\<And>A. A \\<in> set As \\<Longrightarrow> A \\<notin> atms_of (C_of A)\""], ["proof (prove)\nusing this:\n  ?A1 \\<in> set As \\<Longrightarrow> Neg ?A1 \\<notin># CA_of ?A1\n\ngoal (1 subgoal):\n 1. \\<And>A. A \\<in> set As \\<Longrightarrow> A \\<notin> atms_of (C_of A)", "unfolding C_of_def"], ["proof (prove)\nusing this:\n  ?A1 \\<in> set As \\<Longrightarrow> Neg ?A1 \\<notin># CA_of ?A1\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> set As \\<Longrightarrow>\n       A \\<notin> atms_of {#L \\<in># CA_of A. L \\<noteq> Pos A#}", "using atm_imp_pos_or_neg_lit"], ["proof (prove)\nusing this:\n  ?A1 \\<in> set As \\<Longrightarrow> Neg ?A1 \\<notin># CA_of ?A1\n  ?A \\<in> atms_of ?C \\<Longrightarrow>\n  Pos ?A \\<in># ?C \\<or> Neg ?A \\<in># ?C\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> set As \\<Longrightarrow>\n       A \\<notin> atms_of {#L \\<in># CA_of A. L \\<noteq> Pos A#}", "by force"], ["proof (state)\nthis:\n  ?A1 \\<in> set As \\<Longrightarrow> ?A1 \\<notin> atms_of (C_of ?A1)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have c'_le_c: \"\\<And>A. C_of A \\<le> CA_of A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. C_of A \\<le> CA_of A", "unfolding C_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. {#L \\<in># CA_of A. L \\<noteq> Pos A#} \\<le> CA_of A", "by (auto intro: subset_eq_imp_le_multiset)"], ["proof (state)\nthis:\n  C_of ?A1 \\<le> CA_of ?A1\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have a_max_c: \"\\<And>A. A \\<in> set As \\<Longrightarrow> A = Max (atms_of (CA_of A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. A \\<in> set As \\<Longrightarrow> A = Max (atms_of (CA_of A))", "using prod_c0 productive_imp_produces_Max_atom[of N]"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>set As. production N (CA_of A) = {A}\n  production N ?C \\<noteq> {} \\<Longrightarrow>\n  production N ?C = {Max (atms_of ?C)}\n\ngoal (1 subgoal):\n 1. \\<And>A. A \\<in> set As \\<Longrightarrow> A = Max (atms_of (CA_of A))", "by auto"], ["proof (state)\nthis:\n  ?A1 \\<in> set As \\<Longrightarrow> ?A1 = Max (atms_of (CA_of ?A1))\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  ?A1 \\<in> set As \\<Longrightarrow> ?A1 = Max (atms_of (CA_of ?A1))", "have \"\\<And>A. A \\<in> set As \\<Longrightarrow> C_of A \\<noteq> {#} \\<Longrightarrow> Max (atms_of (C_of A)) \\<le> A\""], ["proof (prove)\nusing this:\n  ?A1 \\<in> set As \\<Longrightarrow> ?A1 = Max (atms_of (CA_of ?A1))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>A \\<in> set As; C_of A \\<noteq> {#}\\<rbrakk>\n       \\<Longrightarrow> Max (atms_of (C_of A)) \\<le> A", "using c'_le_c"], ["proof (prove)\nusing this:\n  ?A1 \\<in> set As \\<Longrightarrow> ?A1 = Max (atms_of (CA_of ?A1))\n  C_of ?A1 \\<le> CA_of ?A1\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>A \\<in> set As; C_of A \\<noteq> {#}\\<rbrakk>\n       \\<Longrightarrow> Max (atms_of (C_of A)) \\<le> A", "by (metis less_eq_Max_atms_of)"], ["proof (state)\nthis:\n  \\<lbrakk>?A1 \\<in> set As; C_of ?A1 \\<noteq> {#}\\<rbrakk>\n  \\<Longrightarrow> Max (atms_of (C_of ?A1)) \\<le> ?A1\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>?A1 \\<in> set As; C_of ?A1 \\<noteq> {#}\\<rbrakk>\n  \\<Longrightarrow> Max (atms_of (C_of ?A1)) \\<le> ?A1\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<And>A. A \\<in> set As \\<Longrightarrow> C_of A \\<noteq> {#} \\<Longrightarrow> Max (atms_of (C_of A)) \\<noteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>A \\<in> set As; C_of A \\<noteq> {#}\\<rbrakk>\n       \\<Longrightarrow> Max (atms_of (C_of A)) \\<noteq> A", "using a_ni_c' Max_in"], ["proof (prove)\nusing this:\n  ?A1 \\<in> set As \\<Longrightarrow> ?A1 \\<notin> atms_of (C_of ?A1)\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max ?A \\<in> ?A\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>A \\<in> set As; C_of A \\<noteq> {#}\\<rbrakk>\n       \\<Longrightarrow> Max (atms_of (C_of A)) \\<noteq> A", "by (metis (no_types) atms_empty_iff_empty finite_atms_of)"], ["proof (state)\nthis:\n  \\<lbrakk>?A1 \\<in> set As; C_of ?A1 \\<noteq> {#}\\<rbrakk>\n  \\<Longrightarrow> Max (atms_of (C_of ?A1)) \\<noteq> ?A1\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>?A1 \\<in> set As; C_of ?A1 \\<noteq> {#}\\<rbrakk>\n  \\<Longrightarrow> Max (atms_of (C_of ?A1)) \\<le> ?A1\n  \\<lbrakk>?A1 \\<in> set As; C_of ?A1 \\<noteq> {#}\\<rbrakk>\n  \\<Longrightarrow> Max (atms_of (C_of ?A1)) \\<noteq> ?A1", "have max_c'_lt_a: \"\\<And>A. A \\<in> set As \\<Longrightarrow> C_of A \\<noteq> {#} \\<Longrightarrow> Max (atms_of (C_of A)) < A\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?A1 \\<in> set As; C_of ?A1 \\<noteq> {#}\\<rbrakk>\n  \\<Longrightarrow> Max (atms_of (C_of ?A1)) \\<le> ?A1\n  \\<lbrakk>?A1 \\<in> set As; C_of ?A1 \\<noteq> {#}\\<rbrakk>\n  \\<Longrightarrow> Max (atms_of (C_of ?A1)) \\<noteq> ?A1\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>A \\<in> set As; C_of A \\<noteq> {#}\\<rbrakk>\n       \\<Longrightarrow> Max (atms_of (C_of A)) < A", "by (metis order.strict_iff_order)"], ["proof (state)\nthis:\n  \\<lbrakk>?A1 \\<in> set As; C_of ?A1 \\<noteq> {#}\\<rbrakk>\n  \\<Longrightarrow> Max (atms_of (C_of ?A1)) < ?A1\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have le_cs_as: \"length CAs = length As\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length CAs = length As", "unfolding CAs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map CA_of As) = length As", "by simp"], ["proof (state)\nthis:\n  length CAs = length As\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"length CAs = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length CAs = n", "by (simp add: le_cs_as n_def)"], ["proof (state)\nthis:\n  length CAs = n\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  length CAs = n\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"length Cs = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length Cs = n", "by (simp add: Cs_def n_def)"], ["proof (state)\nthis:\n  length Cs = n\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  length Cs = n\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"length AAs = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length AAs = n", "by (simp add: AAs_def n_def)"], ["proof (state)\nthis:\n  length AAs = n\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  length AAs = n\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"length As = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length As = n", "using n_def"], ["proof (prove)\nusing this:\n  n = length As\n\ngoal (1 subgoal):\n 1. length As = n", "by auto"], ["proof (state)\nthis:\n  length As = n\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  length As = n\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"n \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "by (simp add: as_ne n_def)"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \" \\<forall>i. i < length AAs \\<longrightarrow> (\\<forall>A \\<in># AAs ! i. A = As ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length AAs. \\<forall>A\\<in>#AAs ! i. A = As ! i", "using AAs_def Aj_of_def"], ["proof (prove)\nusing this:\n  AAs = map Aj_of As\n  Aj_of ?A = image_mset atm_of {#L \\<in># CA_of ?A. L = Pos ?A#}\n\ngoal (1 subgoal):\n 1. \\<forall>i<length AAs. \\<forall>A\\<in>#AAs ! i. A = As ! i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length AAs. \\<forall>A\\<in>#AAs ! i. A = As ! i\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<And>x B. production N (CA_of x) = {x} \\<Longrightarrow> B \\<in># CA_of x \\<Longrightarrow> B \\<noteq> Pos x \\<Longrightarrow> atm_of B < x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x B.\n       \\<lbrakk>production N (CA_of x) = {x}; B \\<in># CA_of x;\n        B \\<noteq> Pos x\\<rbrakk>\n       \\<Longrightarrow> atm_of B < x", "by (metis atm_of_lit_in_atms_of insert_not_empty le_imp_less_or_eq Pos_atm_of_iff\n        Neg_atm_of_iff pos_neg_in_imp_true produces_imp_Pos_in_lits produces_imp_atms_leq\n        productive_imp_not_interp)"], ["proof (state)\nthis:\n  \\<lbrakk>production N (CA_of ?x1) = {?x1}; ?B1 \\<in># CA_of ?x1;\n   ?B1 \\<noteq> Pos ?x1\\<rbrakk>\n  \\<Longrightarrow> atm_of ?B1 < ?x1\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>production N (CA_of ?x1) = {?x1}; ?B1 \\<in># CA_of ?x1;\n   ?B1 \\<noteq> Pos ?x1\\<rbrakk>\n  \\<Longrightarrow> atm_of ?B1 < ?x1", "have \"\\<And>B A. A\\<in>set As \\<Longrightarrow> B \\<in># CA_of A \\<Longrightarrow> B \\<noteq> Pos A \\<Longrightarrow> atm_of B < A\""], ["proof (prove)\nusing this:\n  \\<lbrakk>production N (CA_of ?x1) = {?x1}; ?B1 \\<in># CA_of ?x1;\n   ?B1 \\<noteq> Pos ?x1\\<rbrakk>\n  \\<Longrightarrow> atm_of ?B1 < ?x1\n\ngoal (1 subgoal):\n 1. \\<And>B A.\n       \\<lbrakk>A \\<in> set As; B \\<in># CA_of A; B \\<noteq> Pos A\\<rbrakk>\n       \\<Longrightarrow> atm_of B < A", "using prod_c0"], ["proof (prove)\nusing this:\n  \\<lbrakk>production N (CA_of ?x1) = {?x1}; ?B1 \\<in># CA_of ?x1;\n   ?B1 \\<noteq> Pos ?x1\\<rbrakk>\n  \\<Longrightarrow> atm_of ?B1 < ?x1\n  \\<forall>A\\<in>set As. production N (CA_of A) = {A}\n\ngoal (1 subgoal):\n 1. \\<And>B A.\n       \\<lbrakk>A \\<in> set As; B \\<in># CA_of A; B \\<noteq> Pos A\\<rbrakk>\n       \\<Longrightarrow> atm_of B < A", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?A1 \\<in> set As; ?B1 \\<in># CA_of ?A1;\n   ?B1 \\<noteq> Pos ?A1\\<rbrakk>\n  \\<Longrightarrow> atm_of ?B1 < ?A1\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<forall>i. i < length AAs \\<longrightarrow> AAs ! i \\<noteq> {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length AAs. AAs ! i \\<noteq> {#}", "unfolding AAs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length (map Aj_of As). map Aj_of As ! i \\<noteq> {#}", "using m_nz"], ["proof (prove)\nusing this:\n  ?A1 \\<in> set As \\<Longrightarrow> Aj_of ?A1 \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. \\<forall>i<length (map Aj_of As). map Aj_of As ! i \\<noteq> {#}", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<length AAs. AAs ! i \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<forall>i < n. CAs ! i = Cs ! i + poss (AAs ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i)", "unfolding CAs_def Cs_def AAs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<n.\n       map CA_of As ! i = map C_of As ! i + poss (map Aj_of As ! i)", "using ca_of_c_of_aj_of"], ["proof (prove)\nusing this:\n  CA_of ?A1 = C_of ?A1 + poss (Aj_of ?A1)\n\ngoal (1 subgoal):\n 1. \\<forall>i<n.\n       map CA_of As ! i = map C_of As ! i + poss (map Aj_of As ! i)", "by (simp add: n_def)"], ["proof (state)\nthis:\n  \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<forall>i < n. AAs ! i \\<noteq> {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<n. AAs ! i \\<noteq> {#}", "using \\<open>\\<forall>i < length AAs. AAs ! i \\<noteq> {#}\\<close> calculation(3)"], ["proof (prove)\nusing this:\n  \\<forall>i<length AAs. AAs ! i \\<noteq> {#}\n  length AAs = n\n\ngoal (1 subgoal):\n 1. \\<forall>i<n. AAs ! i \\<noteq> {#}", "by blast"], ["proof (state)\nthis:\n  \\<forall>i<n. AAs ! i \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  \\<forall>i<n. AAs ! i \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<forall>i < n. \\<forall>A \\<in># AAs ! i. A = As ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i", "by (simp add: \\<open>\\<forall>i < length AAs. \\<forall>A \\<in># AAs ! i. A = As ! i\\<close> calculation(3))"], ["proof (state)\nthis:\n  \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"eligible As DA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eligible As DA", "using s_d"], ["proof (prove)\nusing this:\n  eligible As DA\n\ngoal (1 subgoal):\n 1. eligible As DA", "by auto"], ["proof (state)\nthis:\n  eligible As DA\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  eligible As DA", "have \"eligible As (D + negs (mset As))\""], ["proof (prove)\nusing this:\n  eligible As DA\n\ngoal (1 subgoal):\n 1. eligible As (D + negs (mset As))", "using D_def negs_as_le_d"], ["proof (prove)\nusing this:\n  eligible As DA\n  D = DA - negs (mset As)\n  negs (mset As) \\<subseteq># DA\n\ngoal (1 subgoal):\n 1. eligible As (D + negs (mset As))", "by auto"], ["proof (state)\nthis:\n  eligible As (D + negs (mset As))\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  eligible As (D + negs (mset As))\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<And>i. i < length AAs \\<Longrightarrow> strictly_maximal_wrt (As ! i) ((Cs ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length AAs \\<Longrightarrow>\n       strictly_maximal_wrt (As ! i) (Cs ! i)", "by (simp add: C_of_def Cs_def \\<open>\\<And>x B. \\<lbrakk>production N (CA_of x) = {x}; B \\<in># CA_of x; B \\<noteq> Pos x\\<rbrakk> \\<Longrightarrow> atm_of B < x\\<close> atms_of_def calculation(3) n_def prod_c0 strictly_maximal_wrt_def)"], ["proof (state)\nthis:\n  ?i1 < length AAs \\<Longrightarrow>\n  strictly_maximal_wrt (As ! ?i1) (Cs ! ?i1)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<forall>i < n. strictly_maximal_wrt (As ! i) (Cs ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i)", "by (simp add: \\<open>\\<And>i. i < length AAs \\<Longrightarrow> strictly_maximal_wrt (As ! i) (Cs ! i)\\<close> calculation(3))"], ["proof (state)\nthis:\n  \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<forall>CA \\<in> set CAs. S CA = {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>CA\\<in>set CAs. S CA = {#}", "using prod_c producesD productive_imp_produces_Max_literal"], ["proof (prove)\nusing this:\n  ?CA1 \\<in> set CAs \\<Longrightarrow> production N ?CA1 \\<noteq> {}\n  production ?N ?C = {?A} \\<Longrightarrow>\n  ?C \\<in> ?N \\<and>\n  ?C \\<noteq> {#} \\<and>\n  Pos ?A = Max_mset ?C \\<and>\n  \\<not> interp ?N ?C \\<Turnstile> ?C \\<and> S ?C = {#}\n  production ?N ?C \\<noteq> {} \\<Longrightarrow>\n  production ?N ?C = {atm_of (Max_mset ?C)}\n\ngoal (1 subgoal):\n 1. \\<forall>CA\\<in>set CAs. S CA = {#}", "by blast"], ["proof (state)\nthis:\n  \\<forall>CA\\<in>set CAs. S CA = {#}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<forall>CA\\<in>set CAs. S CA = {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>CA\\<in>set CAs. S CA = {#}", "using \\<open>\\<forall>CA\\<in>set CAs. S CA = {#}\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>CA\\<in>set CAs. S CA = {#}\n\ngoal (1 subgoal):\n 1. \\<forall>CA\\<in>set CAs. S CA = {#}", "by simp"], ["proof (state)\nthis:\n  \\<forall>CA\\<in>set CAs. S CA = {#}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<forall>CA\\<in>set CAs. S CA = {#}", "have \"\\<forall>i < n. S (CAs ! i) = {#}\""], ["proof (prove)\nusing this:\n  \\<forall>CA\\<in>set CAs. S CA = {#}\n\ngoal (1 subgoal):\n 1. \\<forall>i<n. S (CAs ! i) = {#}", "using \\<open>length CAs = n\\<close> nth_mem"], ["proof (prove)\nusing this:\n  \\<forall>CA\\<in>set CAs. S CA = {#}\n  length CAs = n\n  ?n < length ?xs \\<Longrightarrow> ?xs ! ?n \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. \\<forall>i<n. S (CAs ! i) = {#}", "by blast"], ["proof (state)\nthis:\n  \\<forall>i<n. S (CAs ! i) = {#}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  length CAs = n\n  length Cs = n\n  length AAs = n\n  length As = n\n  n \\<noteq> 0\n  \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i)\n  \\<forall>i<n. AAs ! i \\<noteq> {#}\n  \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i\n  eligible As (D + negs (mset As))\n  \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i)\n  \\<forall>i<n. S (CAs ! i) = {#}", "have res_e: \"ord_resolve CAs (D + negs (mset As)) AAs As (\\<Sum>\\<^sub># (mset Cs) + D)\""], ["proof (prove)\nusing this:\n  length CAs = n\n  length Cs = n\n  length AAs = n\n  length As = n\n  n \\<noteq> 0\n  \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i)\n  \\<forall>i<n. AAs ! i \\<noteq> {#}\n  \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i\n  eligible As (D + negs (mset As))\n  \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i)\n  \\<forall>i<n. S (CAs ! i) = {#}\n\ngoal (1 subgoal):\n 1. ord_resolve CAs (D + negs (mset As)) AAs As\n     (\\<Sum>\\<^sub># (mset Cs) + D)", "using ord_resolve"], ["proof (prove)\nusing this:\n  length CAs = n\n  length Cs = n\n  length AAs = n\n  length As = n\n  n \\<noteq> 0\n  \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i)\n  \\<forall>i<n. AAs ! i \\<noteq> {#}\n  \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i\n  eligible As (D + negs (mset As))\n  \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i)\n  \\<forall>i<n. S (CAs ! i) = {#}\n  \\<lbrakk>length ?CAs = ?n; length ?Cs = ?n; length ?AAs = ?n;\n   length ?As = ?n; ?n \\<noteq> 0;\n   \\<forall>i<?n. ?CAs ! i = ?Cs ! i + poss (?AAs ! i);\n   \\<forall>i<?n. ?AAs ! i \\<noteq> {#};\n   \\<forall>i<?n. \\<forall>A\\<in>#?AAs ! i. A = ?As ! i;\n   eligible ?As (?D + negs (mset ?As));\n   \\<forall>i<?n. strictly_maximal_wrt (?As ! i) (?Cs ! i);\n   \\<forall>i<?n. S (?CAs ! i) = {#}\\<rbrakk>\n  \\<Longrightarrow> ord_resolve ?CAs (?D + negs (mset ?As)) ?AAs ?As\n                     (\\<Sum>\\<^sub># (mset ?Cs) + ?D)\n\ngoal (1 subgoal):\n 1. ord_resolve CAs (D + negs (mset As)) AAs As\n     (\\<Sum>\\<^sub># (mset Cs) + D)", "by auto"], ["proof (state)\nthis:\n  ord_resolve CAs (D + negs (mset As)) AAs As (\\<Sum>\\<^sub># (mset Cs) + D)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<And>A. A \\<in> set As \\<Longrightarrow> \\<not> interp N (CA_of A) \\<Turnstile> CA_of A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> set As \\<Longrightarrow>\n       \\<not> interp N (CA_of A) \\<Turnstile> CA_of A", "by (simp add: prod_c0 producesD)"], ["proof (state)\nthis:\n  ?A1 \\<in> set As \\<Longrightarrow>\n  \\<not> interp N (CA_of ?A1) \\<Turnstile> CA_of ?A1\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  ?A1 \\<in> set As \\<Longrightarrow>\n  \\<not> interp N (CA_of ?A1) \\<Turnstile> CA_of ?A1", "have \"\\<And>A. A \\<in> set As \\<Longrightarrow> \\<not> Interp N (CA_of A) \\<Turnstile> C_of A\""], ["proof (prove)\nusing this:\n  ?A1 \\<in> set As \\<Longrightarrow>\n  \\<not> interp N (CA_of ?A1) \\<Turnstile> CA_of ?A1\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> set As \\<Longrightarrow>\n       \\<not> Interp N (CA_of A) \\<Turnstile> C_of A", "unfolding prod_c0 C_of_def Interp_def true_cls_def"], ["proof (prove)\nusing this:\n  ?A1 \\<in> set As \\<Longrightarrow>\n  \\<not> Multiset.Bex (CA_of ?A1) ((\\<Turnstile>l) (interp N (CA_of ?A1)))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> set As \\<Longrightarrow>\n       \\<not> Multiset.Bex {#L \\<in># CA_of A. L \\<noteq> Pos A#}\n               ((\\<Turnstile>l)\n                 (interp N (CA_of A) \\<union> production N (CA_of A)))", "using true_lit_def not_gr_zero prod_c0"], ["proof (prove)\nusing this:\n  ?A1 \\<in> set As \\<Longrightarrow>\n  \\<not> Multiset.Bex (CA_of ?A1) ((\\<Turnstile>l) (interp N (CA_of ?A1)))\n  (?I \\<Turnstile>l ?L) =\n  (if is_pos ?L then \\<lambda>P. P else Not) (atm_of ?L \\<in> ?I)\n  (\\<not> (0::?'a) < ?n) = (?n = (0::?'a))\n  \\<forall>A\\<in>set As. production N (CA_of A) = {A}\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> set As \\<Longrightarrow>\n       \\<not> Multiset.Bex {#L \\<in># CA_of A. L \\<noteq> Pos A#}\n               ((\\<Turnstile>l)\n                 (interp N (CA_of A) \\<union> production N (CA_of A)))", "by auto"], ["proof (state)\nthis:\n  ?A1 \\<in> set As \\<Longrightarrow>\n  \\<not> Interp N (CA_of ?A1) \\<Turnstile> C_of ?A1\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  ?A1 \\<in> set As \\<Longrightarrow>\n  \\<not> Interp N (CA_of ?A1) \\<Turnstile> C_of ?A1", "have c'_at_n: \"\\<And>A. A \\<in> set As \\<Longrightarrow> \\<not> INTERP N \\<Turnstile> C_of A\""], ["proof (prove)\nusing this:\n  ?A1 \\<in> set As \\<Longrightarrow>\n  \\<not> Interp N (CA_of ?A1) \\<Turnstile> C_of ?A1\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> set As \\<Longrightarrow> \\<not> INTERP N \\<Turnstile> C_of A", "using a_max_c c'_le_c max_c'_lt_a not_Interp_imp_not_INTERP"], ["proof (prove)\nusing this:\n  ?A1 \\<in> set As \\<Longrightarrow>\n  \\<not> Interp N (CA_of ?A1) \\<Turnstile> C_of ?A1\n  ?A1 \\<in> set As \\<Longrightarrow> ?A1 = Max (atms_of (CA_of ?A1))\n  C_of ?A1 \\<le> CA_of ?A1\n  \\<lbrakk>?A1 \\<in> set As; C_of ?A1 \\<noteq> {#}\\<rbrakk>\n  \\<Longrightarrow> Max (atms_of (C_of ?A1)) < ?A1\n  \\<lbrakk>?D' \\<le> ?D;\n   ?D' \\<in> ?N \\<and> S ?D' = {#} \\<or>\n   Max (atms_of ?D') < Max (atms_of ?D);\n   \\<not> Interp ?N ?D \\<Turnstile> ?D'\\<rbrakk>\n  \\<Longrightarrow> \\<not> INTERP ?N \\<Turnstile> ?D'\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> set As \\<Longrightarrow> \\<not> INTERP N \\<Turnstile> C_of A", "unfolding true_cls_def"], ["proof (prove)\nusing this:\n  ?A1 \\<in> set As \\<Longrightarrow>\n  \\<not> Multiset.Bex (C_of ?A1) ((\\<Turnstile>l) (Interp N (CA_of ?A1)))\n  ?A1 \\<in> set As \\<Longrightarrow> ?A1 = Max (atms_of (CA_of ?A1))\n  C_of ?A1 \\<le> CA_of ?A1\n  \\<lbrakk>?A1 \\<in> set As; C_of ?A1 \\<noteq> {#}\\<rbrakk>\n  \\<Longrightarrow> Max (atms_of (C_of ?A1)) < ?A1\n  \\<lbrakk>?D' \\<le> ?D;\n   ?D' \\<in> ?N \\<and> S ?D' = {#} \\<or>\n   Max (atms_of ?D') < Max (atms_of ?D);\n   \\<not> Multiset.Bex ?D' ((\\<Turnstile>l) (Interp ?N ?D))\\<rbrakk>\n  \\<Longrightarrow> \\<not> Multiset.Bex ?D' ((\\<Turnstile>l) (INTERP ?N))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> set As \\<Longrightarrow>\n       \\<not> Multiset.Bex (C_of A) ((\\<Turnstile>l) (INTERP N))", "by (metis true_cls_def true_cls_empty)"], ["proof (state)\nthis:\n  ?A1 \\<in> set As \\<Longrightarrow> \\<not> INTERP N \\<Turnstile> C_of ?A1\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs)", "unfolding Cs_def true_cls_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Multiset.Bex (\\<Sum>\\<^sub># (mset (map C_of As)))\n            ((\\<Turnstile>l) (INTERP N))", "using c'_at_n"], ["proof (prove)\nusing this:\n  ?A1 \\<in> set As \\<Longrightarrow> \\<not> INTERP N \\<Turnstile> C_of ?A1\n\ngoal (1 subgoal):\n 1. \\<not> Multiset.Bex (\\<Sum>\\<^sub># (mset (map C_of As)))\n            ((\\<Turnstile>l) (INTERP N))", "by fastforce"], ["proof (state)\nthis:\n  \\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  \\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<not> INTERP N \\<Turnstile> D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> INTERP N \\<Turnstile> D", "using d_cex"], ["proof (prove)\nusing this:\n  \\<not> INTERP N \\<Turnstile> DA\n\ngoal (1 subgoal):\n 1. \\<not> INTERP N \\<Turnstile> D", "by (metis D_def add_diff_cancel_right' negs_as_le_d subset_mset.add_diff_assoc2\n        true_cls_def union_iff)"], ["proof (state)\nthis:\n  \\<not> INTERP N \\<Turnstile> D\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs)\n  \\<not> INTERP N \\<Turnstile> D", "have e_cex: \"\\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs) + D\""], ["proof (prove)\nusing this:\n  \\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs)\n  \\<not> INTERP N \\<Turnstile> D\n\ngoal (1 subgoal):\n 1. \\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs) + D", "by simp"], ["proof (state)\nthis:\n  \\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs) + D\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"set CAs \\<subseteq> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set CAs \\<subseteq> N", "by (simp add: cs_subs_n)"], ["proof (state)\nthis:\n  set CAs \\<subseteq> N\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  set CAs \\<subseteq> N\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"INTERP N \\<Turnstile>m mset CAs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. INTERP N \\<Turnstile>m mset CAs", "by (simp add: cs_true)"], ["proof (state)\nthis:\n  INTERP N \\<Turnstile>m mset CAs\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  INTERP N \\<Turnstile>m mset CAs\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<And>CA. CA \\<in> set CAs \\<Longrightarrow> productive N CA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>CA. CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {}", "by (simp add: prod_c)"], ["proof (state)\nthis:\n  ?CA1 \\<in> set CAs \\<Longrightarrow> production N ?CA1 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  ?CA1 \\<in> set CAs \\<Longrightarrow> production N ?CA1 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"ord_resolve CAs DA AAs As (\\<Sum>\\<^sub># (mset Cs) + D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_resolve CAs DA AAs As (\\<Sum>\\<^sub># (mset Cs) + D)", "using D_def negs_as_le_d res_e"], ["proof (prove)\nusing this:\n  D = DA - negs (mset As)\n  negs (mset As) \\<subseteq># DA\n  ord_resolve CAs (D + negs (mset As)) AAs As (\\<Sum>\\<^sub># (mset Cs) + D)\n\ngoal (1 subgoal):\n 1. ord_resolve CAs DA AAs As (\\<Sum>\\<^sub># (mset Cs) + D)", "by auto"], ["proof (state)\nthis:\n  ord_resolve CAs DA AAs As (\\<Sum>\\<^sub># (mset Cs) + D)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  ord_resolve CAs DA AAs As (\\<Sum>\\<^sub># (mset Cs) + D)\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs) + D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs) + D", "using e_cex"], ["proof (prove)\nusing this:\n  \\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs) + D\n\ngoal (1 subgoal):\n 1. \\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs) + D", "by simp"], ["proof (state)\nthis:\n  \\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs) + D\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  \\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs) + D\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<Sum>\\<^sub># (mset Cs) + D < DA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) + D < DA", "using calculation(4) ord_resolve_reductive"], ["proof (prove)\nusing this:\n  ord_resolve CAs DA AAs As (\\<Sum>\\<^sub># (mset Cs) + D)\n  ord_resolve ?CAs ?DA ?AAs ?As ?E \\<Longrightarrow> ?E < ?DA\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (mset Cs) + D < DA", "by auto"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (mset Cs) + D < DA\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         \\<And>CA.\n            CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  set CAs \\<subseteq> N\n  INTERP N \\<Turnstile>m mset CAs\n  ?CA1 \\<in> set CAs \\<Longrightarrow> production N ?CA1 \\<noteq> {}\n  ord_resolve CAs DA AAs As (\\<Sum>\\<^sub># (mset Cs) + D)\n  \\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs) + D\n  \\<Sum>\\<^sub># (mset Cs) + D < DA", "show thesis"], ["proof (prove)\nusing this:\n  set CAs \\<subseteq> N\n  INTERP N \\<Turnstile>m mset CAs\n  ?CA1 \\<in> set CAs \\<Longrightarrow> production N ?CA1 \\<noteq> {}\n  ord_resolve CAs DA AAs As (\\<Sum>\\<^sub># (mset Cs) + D)\n  \\<not> INTERP N \\<Turnstile> \\<Sum>\\<^sub># (mset Cs) + D\n  \\<Sum>\\<^sub># (mset Cs) + D < DA\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_resolve_atms_of_concl_subset:\n  assumes \"ord_resolve CAs DA AAs As E\"\n  shows \"atms_of E \\<subseteq> (\\<Union>C \\<in> set CAs. atms_of C) \\<union> atms_of DA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atms_of E \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union> atms_of DA", "using assms"], ["proof (prove)\nusing this:\n  ord_resolve CAs DA AAs As E\n\ngoal (1 subgoal):\n 1. atms_of E \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union> atms_of DA", "proof (cases rule: ord_resolve.cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> atms_of E\n                         \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union>\n                                     atms_of DA", "case (ord_resolve n Cs D)"], ["proof (state)\nthis:\n  DA = D + negs (mset As)\n  E = \\<Sum>\\<^sub># (mset Cs) + D\n  length CAs = n\n  length Cs = n\n  length AAs = n\n  length As = n\n  n \\<noteq> 0\n  \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i)\n  \\<forall>i<n. AAs ! i \\<noteq> {#}\n  \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i\n  eligible As (D + negs (mset As))\n  \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i)\n  \\<forall>i<n. S (CAs ! i) = {#}\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> atms_of E\n                         \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union>\n                                     atms_of DA", "note DA = this(1) and e = this(2) and cas_len = this(3) and cs_len = this(4) and cas = this(8)"], ["proof (state)\nthis:\n  DA = D + negs (mset As)\n  E = \\<Sum>\\<^sub># (mset Cs) + D\n  length CAs = n\n  length Cs = n\n  \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i)\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> atms_of E\n                         \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union>\n                                     atms_of DA", "have \"\\<forall>i < n. set_mset (Cs ! i) \\<subseteq> set_mset (CAs ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<n. set_mset (Cs ! i) \\<subseteq> set_mset (CAs ! i)", "using cas"], ["proof (prove)\nusing this:\n  \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i)\n\ngoal (1 subgoal):\n 1. \\<forall>i<n. set_mset (Cs ! i) \\<subseteq> set_mset (CAs ! i)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<n. set_mset (Cs ! i) \\<subseteq> set_mset (CAs ! i)\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> atms_of E\n                         \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union>\n                                     atms_of DA", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<n. set_mset (Cs ! i) \\<subseteq> set_mset (CAs ! i)", "have \"\\<forall>i < n. Cs ! i \\<subseteq># \\<Sum>\\<^sub># (mset CAs)\""], ["proof (prove)\nusing this:\n  \\<forall>i<n. set_mset (Cs ! i) \\<subseteq> set_mset (CAs ! i)\n\ngoal (1 subgoal):\n 1. \\<forall>i<n. Cs ! i \\<subseteq># \\<Sum>\\<^sub># (mset CAs)", "by (metis cas cas_len mset_subset_eq_add_left nth_mem_mset sum_mset.remove union_assoc)"], ["proof (state)\nthis:\n  \\<forall>i<n. Cs ! i \\<subseteq># \\<Sum>\\<^sub># (mset CAs)\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> atms_of E\n                         \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union>\n                                     atms_of DA", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<n. Cs ! i \\<subseteq># \\<Sum>\\<^sub># (mset CAs)", "have \"\\<forall>C \\<in> set Cs. C \\<subseteq># \\<Sum>\\<^sub># (mset CAs)\""], ["proof (prove)\nusing this:\n  \\<forall>i<n. Cs ! i \\<subseteq># \\<Sum>\\<^sub># (mset CAs)\n\ngoal (1 subgoal):\n 1. \\<forall>C\\<in>set Cs. C \\<subseteq># \\<Sum>\\<^sub># (mset CAs)", "using cs_len in_set_conv_nth[of _ Cs]"], ["proof (prove)\nusing this:\n  \\<forall>i<n. Cs ! i \\<subseteq># \\<Sum>\\<^sub># (mset CAs)\n  length Cs = n\n  (?x \\<in> set Cs) = (\\<exists>i<length Cs. Cs ! i = ?x)\n\ngoal (1 subgoal):\n 1. \\<forall>C\\<in>set Cs. C \\<subseteq># \\<Sum>\\<^sub># (mset CAs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>C\\<in>set Cs. C \\<subseteq># \\<Sum>\\<^sub># (mset CAs)\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> atms_of E\n                         \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union>\n                                     atms_of DA", "then"], ["proof (chain)\npicking this:\n  \\<forall>C\\<in>set Cs. C \\<subseteq># \\<Sum>\\<^sub># (mset CAs)", "have \"set_mset (\\<Sum>\\<^sub># (mset Cs)) \\<subseteq> set_mset (\\<Sum>\\<^sub># (mset CAs))\""], ["proof (prove)\nusing this:\n  \\<forall>C\\<in>set Cs. C \\<subseteq># \\<Sum>\\<^sub># (mset CAs)\n\ngoal (1 subgoal):\n 1. set_mset (\\<Sum>\\<^sub># (mset Cs))\n    \\<subseteq> set_mset (\\<Sum>\\<^sub># (mset CAs))", "by auto (meson in_mset_sum_list2 mset_subset_eqD)"], ["proof (state)\nthis:\n  set_mset (\\<Sum>\\<^sub># (mset Cs))\n  \\<subseteq> set_mset (\\<Sum>\\<^sub># (mset CAs))\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> atms_of E\n                         \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union>\n                                     atms_of DA", "then"], ["proof (chain)\npicking this:\n  set_mset (\\<Sum>\\<^sub># (mset Cs))\n  \\<subseteq> set_mset (\\<Sum>\\<^sub># (mset CAs))", "have \"atms_of (\\<Sum>\\<^sub># (mset Cs)) \\<subseteq> atms_of (\\<Sum>\\<^sub># (mset CAs))\""], ["proof (prove)\nusing this:\n  set_mset (\\<Sum>\\<^sub># (mset Cs))\n  \\<subseteq> set_mset (\\<Sum>\\<^sub># (mset CAs))\n\ngoal (1 subgoal):\n 1. atms_of (\\<Sum>\\<^sub># (mset Cs))\n    \\<subseteq> atms_of (\\<Sum>\\<^sub># (mset CAs))", "by (meson lits_subseteq_imp_atms_subseteq mset_subset_eqD subsetI)"], ["proof (state)\nthis:\n  atms_of (\\<Sum>\\<^sub># (mset Cs))\n  \\<subseteq> atms_of (\\<Sum>\\<^sub># (mset CAs))\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> atms_of E\n                         \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union>\n                                     atms_of DA", "moreover"], ["proof (state)\nthis:\n  atms_of (\\<Sum>\\<^sub># (mset Cs))\n  \\<subseteq> atms_of (\\<Sum>\\<^sub># (mset CAs))\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> atms_of E\n                         \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union>\n                                     atms_of DA", "have \"atms_of (\\<Sum>\\<^sub># (mset CAs)) = (\\<Union>CA \\<in> set CAs. atms_of CA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atms_of (\\<Sum>\\<^sub># (mset CAs)) = \\<Union> (atms_of ` set CAs)", "by (intro set_eqI iffI, simp_all,\n      metis in_mset_sum_list2 atm_imp_pos_or_neg_lit neg_lit_in_atms_of pos_lit_in_atms_of,\n      metis in_mset_sum_list atm_imp_pos_or_neg_lit neg_lit_in_atms_of pos_lit_in_atms_of)"], ["proof (state)\nthis:\n  atms_of (\\<Sum>\\<^sub># (mset CAs)) = \\<Union> (atms_of ` set CAs)\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> atms_of E\n                         \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union>\n                                     atms_of DA", "ultimately"], ["proof (chain)\npicking this:\n  atms_of (\\<Sum>\\<^sub># (mset Cs))\n  \\<subseteq> atms_of (\\<Sum>\\<^sub># (mset CAs))\n  atms_of (\\<Sum>\\<^sub># (mset CAs)) = \\<Union> (atms_of ` set CAs)", "have \"atms_of (\\<Sum>\\<^sub># (mset Cs)) \\<subseteq> (\\<Union>CA \\<in> set CAs. atms_of CA)\""], ["proof (prove)\nusing this:\n  atms_of (\\<Sum>\\<^sub># (mset Cs))\n  \\<subseteq> atms_of (\\<Sum>\\<^sub># (mset CAs))\n  atms_of (\\<Sum>\\<^sub># (mset CAs)) = \\<Union> (atms_of ` set CAs)\n\ngoal (1 subgoal):\n 1. atms_of (\\<Sum>\\<^sub># (mset Cs))\n    \\<subseteq> \\<Union> (atms_of ` set CAs)", "by auto"], ["proof (state)\nthis:\n  atms_of (\\<Sum>\\<^sub># (mset Cs))\n  \\<subseteq> \\<Union> (atms_of ` set CAs)\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> atms_of E\n                         \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union>\n                                     atms_of DA", "moreover"], ["proof (state)\nthis:\n  atms_of (\\<Sum>\\<^sub># (mset Cs))\n  \\<subseteq> \\<Union> (atms_of ` set CAs)\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> atms_of E\n                         \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union>\n                                     atms_of DA", "have \"atms_of D \\<subseteq> atms_of DA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atms_of D \\<subseteq> atms_of DA", "using DA"], ["proof (prove)\nusing this:\n  DA = D + negs (mset As)\n\ngoal (1 subgoal):\n 1. atms_of D \\<subseteq> atms_of DA", "by auto"], ["proof (state)\nthis:\n  atms_of D \\<subseteq> atms_of DA\n\ngoal (1 subgoal):\n 1. \\<And>n Cs D.\n       \\<lbrakk>DA = D + negs (mset As); E = \\<Sum>\\<^sub># (mset Cs) + D;\n        length CAs = n; length Cs = n; length AAs = n; length As = n;\n        n \\<noteq> 0; \\<forall>i<n. CAs ! i = Cs ! i + poss (AAs ! i);\n        \\<forall>i<n. AAs ! i \\<noteq> {#};\n        \\<forall>i<n. \\<forall>A\\<in>#AAs ! i. A = As ! i;\n        eligible As (D + negs (mset As));\n        \\<forall>i<n. strictly_maximal_wrt (As ! i) (Cs ! i);\n        \\<forall>i<n. S (CAs ! i) = {#}\\<rbrakk>\n       \\<Longrightarrow> atms_of E\n                         \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union>\n                                     atms_of DA", "ultimately"], ["proof (chain)\npicking this:\n  atms_of (\\<Sum>\\<^sub># (mset Cs))\n  \\<subseteq> \\<Union> (atms_of ` set CAs)\n  atms_of D \\<subseteq> atms_of DA", "show ?thesis"], ["proof (prove)\nusing this:\n  atms_of (\\<Sum>\\<^sub># (mset Cs))\n  \\<subseteq> \\<Union> (atms_of ` set CAs)\n  atms_of D \\<subseteq> atms_of DA\n\ngoal (1 subgoal):\n 1. atms_of E \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union> atms_of DA", "unfolding e"], ["proof (prove)\nusing this:\n  atms_of (\\<Sum>\\<^sub># (mset Cs))\n  \\<subseteq> \\<Union> (atms_of ` set CAs)\n  atms_of D \\<subseteq> atms_of DA\n\ngoal (1 subgoal):\n 1. atms_of (\\<Sum>\\<^sub># (mset Cs) + D)\n    \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union> atms_of DA", "by auto"], ["proof (state)\nthis:\n  atms_of E \\<subseteq> \\<Union> (atms_of ` set CAs) \\<union> atms_of DA\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Inference System\\<close>"], ["", "text \\<open>\nTheorem 3.16 is subsumed in the counterexample-reducing inference system framework, which is\ninstantiated below. Unlike its unordered cousin, ordered resolution is additionally a reductive\ninference system.\n\\<close>"], ["", "definition ord_\\<Gamma> :: \"'a inference set\" where\n  \"ord_\\<Gamma> = {Infer (mset CAs) DA E | CAs DA AAs As E. ord_resolve CAs DA AAs As E}\""], ["", "sublocale ord_\\<Gamma>_sound_counterex_reducing?:\n  sound_counterex_reducing_inference_system \"ground_resolution_with_selection.ord_\\<Gamma> S\"\n    \"ground_resolution_with_selection.INTERP S\" +\n  reductive_inference_system \"ground_resolution_with_selection.ord_\\<Gamma> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sound_counterex_reducing_inference_system ord_\\<Gamma> INTERP &&&\n    reductive_inference_system ord_\\<Gamma>", "proof unfold_locales"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N; \\<not> INTERP N \\<Turnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> INTERP N \\<Turnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>CC E.\n                            set_mset CC \\<subseteq> N \\<and>\n                            INTERP N \\<Turnstile>m CC \\<and>\n                            Infer CC D E \\<in> ord_\\<Gamma> \\<and>\n                            \\<not> INTERP N \\<Turnstile> E \\<and> E < D\n 2. \\<And>CC D E I.\n       \\<lbrakk>Infer CC D E \\<in> ord_\\<Gamma>; I \\<Turnstile>m CC;\n        I \\<Turnstile> D\\<rbrakk>\n       \\<Longrightarrow> I \\<Turnstile> E\n 3. \\<And>\\<gamma>.\n       \\<gamma> \\<in> ord_\\<Gamma> \\<Longrightarrow>\n       concl_of \\<gamma> < main_prem_of \\<gamma>", "fix N :: \"'a clause set\" and DA :: \"'a clause\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N; \\<not> INTERP N \\<Turnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> INTERP N \\<Turnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>CC E.\n                            set_mset CC \\<subseteq> N \\<and>\n                            INTERP N \\<Turnstile>m CC \\<and>\n                            Infer CC D E \\<in> ord_\\<Gamma> \\<and>\n                            \\<not> INTERP N \\<Turnstile> E \\<and> E < D\n 2. \\<And>CC D E I.\n       \\<lbrakk>Infer CC D E \\<in> ord_\\<Gamma>; I \\<Turnstile>m CC;\n        I \\<Turnstile> D\\<rbrakk>\n       \\<Longrightarrow> I \\<Turnstile> E\n 3. \\<And>\\<gamma>.\n       \\<gamma> \\<in> ord_\\<Gamma> \\<Longrightarrow>\n       concl_of \\<gamma> < main_prem_of \\<gamma>", "assume \"{#} \\<notin> N\" and \"DA \\<in> N\" and \"\\<not> INTERP N \\<Turnstile> DA\" and \"\\<And>C. C \\<in> N \\<Longrightarrow> \\<not> INTERP N \\<Turnstile> C \\<Longrightarrow> DA \\<le> C\""], ["proof (state)\nthis:\n  {#} \\<notin> N\n  DA \\<in> N\n  \\<not> INTERP N \\<Turnstile> DA\n  \\<lbrakk>?C \\<in> N; \\<not> INTERP N \\<Turnstile> ?C\\<rbrakk>\n  \\<Longrightarrow> DA \\<le> ?C\n\ngoal (3 subgoals):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N; \\<not> INTERP N \\<Turnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> INTERP N \\<Turnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>CC E.\n                            set_mset CC \\<subseteq> N \\<and>\n                            INTERP N \\<Turnstile>m CC \\<and>\n                            Infer CC D E \\<in> ord_\\<Gamma> \\<and>\n                            \\<not> INTERP N \\<Turnstile> E \\<and> E < D\n 2. \\<And>CC D E I.\n       \\<lbrakk>Infer CC D E \\<in> ord_\\<Gamma>; I \\<Turnstile>m CC;\n        I \\<Turnstile> D\\<rbrakk>\n       \\<Longrightarrow> I \\<Turnstile> E\n 3. \\<And>\\<gamma>.\n       \\<gamma> \\<in> ord_\\<Gamma> \\<Longrightarrow>\n       concl_of \\<gamma> < main_prem_of \\<gamma>", "then"], ["proof (chain)\npicking this:\n  {#} \\<notin> N\n  DA \\<in> N\n  \\<not> INTERP N \\<Turnstile> DA\n  \\<lbrakk>?C \\<in> N; \\<not> INTERP N \\<Turnstile> ?C\\<rbrakk>\n  \\<Longrightarrow> DA \\<le> ?C", "obtain CAs AAs As E where\n    dd_sset_n: \"set CAs \\<subseteq> N\" and\n    dd_true: \"INTERP N \\<Turnstile>m mset CAs\" and\n    res_e: \"ord_resolve CAs DA AAs As E\" and\n    e_cex: \"\\<not> INTERP N \\<Turnstile> E\" and\n    e_lt_c: \"E < DA\""], ["proof (prove)\nusing this:\n  {#} \\<notin> N\n  DA \\<in> N\n  \\<not> INTERP N \\<Turnstile> DA\n  \\<lbrakk>?C \\<in> N; \\<not> INTERP N \\<Turnstile> ?C\\<rbrakk>\n  \\<Longrightarrow> DA \\<le> ?C\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ord_resolve_counterex_reducing[of N DA thesis]"], ["proof (prove)\nusing this:\n  {#} \\<notin> N\n  DA \\<in> N\n  \\<not> INTERP N \\<Turnstile> DA\n  \\<lbrakk>?C \\<in> N; \\<not> INTERP N \\<Turnstile> ?C\\<rbrakk>\n  \\<Longrightarrow> DA \\<le> ?C\n  \\<lbrakk>{#} \\<notin> N; DA \\<in> N; \\<not> INTERP N \\<Turnstile> DA;\n   \\<And>C.\n      \\<lbrakk>C \\<in> N; \\<not> INTERP N \\<Turnstile> C\\<rbrakk>\n      \\<Longrightarrow> DA \\<le> C;\n   \\<And>CAs AAs As E.\n      \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n       \\<And>CA.\n          CA \\<in> set CAs \\<Longrightarrow> production N CA \\<noteq> {};\n       ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n       E < DA\\<rbrakk>\n      \\<Longrightarrow> thesis\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As E.\n        \\<lbrakk>set CAs \\<subseteq> N; INTERP N \\<Turnstile>m mset CAs;\n         ord_resolve CAs DA AAs As E; \\<not> INTERP N \\<Turnstile> E;\n         E < DA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  set CAs \\<subseteq> N\n  INTERP N \\<Turnstile>m mset CAs\n  ord_resolve CAs DA AAs As E\n  \\<not> INTERP N \\<Turnstile> E\n  E < DA\n\ngoal (3 subgoals):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N; \\<not> INTERP N \\<Turnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> INTERP N \\<Turnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>CC E.\n                            set_mset CC \\<subseteq> N \\<and>\n                            INTERP N \\<Turnstile>m CC \\<and>\n                            Infer CC D E \\<in> ord_\\<Gamma> \\<and>\n                            \\<not> INTERP N \\<Turnstile> E \\<and> E < D\n 2. \\<And>CC D E I.\n       \\<lbrakk>Infer CC D E \\<in> ord_\\<Gamma>; I \\<Turnstile>m CC;\n        I \\<Turnstile> D\\<rbrakk>\n       \\<Longrightarrow> I \\<Turnstile> E\n 3. \\<And>\\<gamma>.\n       \\<gamma> \\<in> ord_\\<Gamma> \\<Longrightarrow>\n       concl_of \\<gamma> < main_prem_of \\<gamma>", "have \"Infer (mset CAs) DA E \\<in> ord_\\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Infer (mset CAs) DA E \\<in> ord_\\<Gamma>", "using res_e"], ["proof (prove)\nusing this:\n  ord_resolve CAs DA AAs As E\n\ngoal (1 subgoal):\n 1. Infer (mset CAs) DA E \\<in> ord_\\<Gamma>", "unfolding ord_\\<Gamma>_def"], ["proof (prove)\nusing this:\n  ord_resolve CAs DA AAs As E\n\ngoal (1 subgoal):\n 1. Infer (mset CAs) DA E\n    \\<in> {uu_.\n           \\<exists>CAs DA AAs As E.\n              uu_ = Infer (mset CAs) DA E \\<and>\n              ord_resolve CAs DA AAs As E}", "by (metis (mono_tags, lifting) mem_Collect_eq)"], ["proof (state)\nthis:\n  Infer (mset CAs) DA E \\<in> ord_\\<Gamma>\n\ngoal (3 subgoals):\n 1. \\<And>N D.\n       \\<lbrakk>{#} \\<notin> N; D \\<in> N; \\<not> INTERP N \\<Turnstile> D;\n        \\<And>C.\n           \\<lbrakk>C \\<in> N; \\<not> INTERP N \\<Turnstile> C\\<rbrakk>\n           \\<Longrightarrow> D \\<le> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>CC E.\n                            set_mset CC \\<subseteq> N \\<and>\n                            INTERP N \\<Turnstile>m CC \\<and>\n                            Infer CC D E \\<in> ord_\\<Gamma> \\<and>\n                            \\<not> INTERP N \\<Turnstile> E \\<and> E < D\n 2. \\<And>CC D E I.\n       \\<lbrakk>Infer CC D E \\<in> ord_\\<Gamma>; I \\<Turnstile>m CC;\n        I \\<Turnstile> D\\<rbrakk>\n       \\<Longrightarrow> I \\<Turnstile> E\n 3. \\<And>\\<gamma>.\n       \\<gamma> \\<in> ord_\\<Gamma> \\<Longrightarrow>\n       concl_of \\<gamma> < main_prem_of \\<gamma>", "then"], ["proof (chain)\npicking this:\n  Infer (mset CAs) DA E \\<in> ord_\\<Gamma>", "show \"\\<exists>CC E. set_mset CC \\<subseteq> N \\<and> INTERP N \\<Turnstile>m CC \\<and> Infer CC DA E \\<in> ord_\\<Gamma>\n    \\<and> \\<not> INTERP N \\<Turnstile> E \\<and> E < DA\""], ["proof (prove)\nusing this:\n  Infer (mset CAs) DA E \\<in> ord_\\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<exists>CC E.\n       set_mset CC \\<subseteq> N \\<and>\n       INTERP N \\<Turnstile>m CC \\<and>\n       Infer CC DA E \\<in> ord_\\<Gamma> \\<and>\n       \\<not> INTERP N \\<Turnstile> E \\<and> E < DA", "using dd_sset_n dd_true e_cex e_lt_c"], ["proof (prove)\nusing this:\n  Infer (mset CAs) DA E \\<in> ord_\\<Gamma>\n  set CAs \\<subseteq> N\n  INTERP N \\<Turnstile>m mset CAs\n  \\<not> INTERP N \\<Turnstile> E\n  E < DA\n\ngoal (1 subgoal):\n 1. \\<exists>CC E.\n       set_mset CC \\<subseteq> N \\<and>\n       INTERP N \\<Turnstile>m CC \\<and>\n       Infer CC DA E \\<in> ord_\\<Gamma> \\<and>\n       \\<not> INTERP N \\<Turnstile> E \\<and> E < DA", "by (metis set_mset_mset)"], ["proof (state)\nthis:\n  \\<exists>CC E.\n     set_mset CC \\<subseteq> N \\<and>\n     INTERP N \\<Turnstile>m CC \\<and>\n     Infer CC DA E \\<in> ord_\\<Gamma> \\<and>\n     \\<not> INTERP N \\<Turnstile> E \\<and> E < DA\n\ngoal (2 subgoals):\n 1. \\<And>CC D E I.\n       \\<lbrakk>Infer CC D E \\<in> ord_\\<Gamma>; I \\<Turnstile>m CC;\n        I \\<Turnstile> D\\<rbrakk>\n       \\<Longrightarrow> I \\<Turnstile> E\n 2. \\<And>\\<gamma>.\n       \\<gamma> \\<in> ord_\\<Gamma> \\<Longrightarrow>\n       concl_of \\<gamma> < main_prem_of \\<gamma>", "qed (auto simp: ord_\\<Gamma>_def intro: ord_resolve_sound ord_resolve_reductive)"], ["", "lemmas clausal_logic_compact = ord_\\<Gamma>_sound_counterex_reducing.clausal_logic_compact"], ["", "end"], ["", "text \\<open>\nA second proof of Theorem 3.12, compactness of clausal logic:\n\\<close>"], ["", "lemmas clausal_logic_compact = ground_resolution_with_selection.clausal_logic_compact"], ["", "end"]]}