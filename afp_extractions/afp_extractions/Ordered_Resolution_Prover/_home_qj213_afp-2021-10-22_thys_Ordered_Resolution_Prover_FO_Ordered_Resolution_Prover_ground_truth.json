{"file_name": "/home/qj213/afp-2021-10-22/thys/Ordered_Resolution_Prover/FO_Ordered_Resolution_Prover.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Ordered_Resolution_Prover", "problem_names": ["lemma least_exists: \"P n \\<Longrightarrow> \\<exists>n. is_least P n\"", "lemma final_RP: \"\\<not> ({}, {}, Q) \\<leadsto> St\"", "lemma\n  N_of_Liminf_state_fin: \"N_of_state (Liminf_state Sts') = N_of_state (Liminf_state Sts)\" and\n  P_of_Liminf_state_fin: \"P_of_state (Liminf_state Sts') = P_of_state (Liminf_state Sts)\" and\n  Q_of_Liminf_state_fin: \"Q_of_state (Liminf_state Sts') = Q_of_state (Liminf_state Sts)\"", "lemma Liminf_state_fin: \"Liminf_state Sts' = Liminf_state Sts\"", "lemma\n  N_of_Liminf_state_inf: \"N_of_state (Liminf_state Sts') \\<subseteq> N_of_state (Liminf_state Sts)\" and\n  P_of_Liminf_state_inf: \"P_of_state (Liminf_state Sts') \\<subseteq> P_of_state (Liminf_state Sts)\" and\n  Q_of_Liminf_state_inf: \"Q_of_state (Liminf_state Sts') \\<subseteq> Q_of_state (Liminf_state Sts)\"", "lemma clss_of_Liminf_state_inf:\n  \"clss_of_state (Liminf_state Sts') \\<subseteq> clss_of_state (Liminf_state Sts)\"", "lemma gd_ord_\\<Gamma>_ngd_ord_\\<Gamma>: \"gr.ord_\\<Gamma> \\<subseteq> ground_sound_\\<Gamma>\"", "lemma sound_ground_sound_\\<Gamma>: \"sound_inference_system ground_sound_\\<Gamma>\"", "lemma sat_preserving_ground_sound_\\<Gamma>: \"sat_preserving_inference_system ground_sound_\\<Gamma>\"", "lemma strict_subset_subsumption_redundant_clause:\n  assumes\n    sub: \"D \\<cdot> \\<sigma> \\<subset># C\" and\n    ground_\\<sigma>: \"is_ground_subst \\<sigma>\"\n  shows \"C \\<in> sr.Rf (grounding_of_cls D)\"", "lemma strict_subset_subsumption_redundant_clss:\n  assumes\n    \"D \\<cdot> \\<sigma> \\<subset># C\" and\n    \"is_ground_subst \\<sigma>\" and\n    \"D \\<in> CC\"\n  shows \"C \\<in> sr.Rf (grounding_of_clss CC)\"", "lemma strict_subset_subsumption_grounding_redundant_clss:\n  assumes\n    D\\<sigma>_subset_C: \"D \\<cdot> \\<sigma> \\<subset># C\" and\n    D_in_St: \"D \\<in> CC\"\n  shows \"grounding_of_cls C \\<subseteq> sr.Rf (grounding_of_clss CC)\"", "lemma derive_if_remove_subsumed:\n  assumes\n    \"D \\<in> clss_of_state St\" and\n    \"subsumes D C\"\n  shows \"sr_ext.derive (grounding_of_state St \\<union> grounding_of_cls C) (grounding_of_state St)\"", "lemma reduction_in_concls_of:\n  assumes\n    \"C\\<mu> \\<in> grounding_of_cls C\" and\n    \"D + {#L'#} \\<in> CC\" and\n    \"- L = L' \\<cdot>l \\<sigma>\" and\n    \"D \\<cdot> \\<sigma> \\<subseteq># C\"\n  shows \"C\\<mu> \\<in> concls_of (sr_ext.inferences_from (grounding_of_clss (CC \\<union> {C + {#L#}})))\"", "lemma reduction_derivable:\n  assumes\n    \"D + {#L'#} \\<in> CC\" and\n    \"- L = L' \\<cdot>l \\<sigma>\" and\n    \"D \\<cdot> \\<sigma> \\<subseteq># C\"\n  shows \"sr_ext.derive (grounding_of_clss (CC \\<union> {C + {#L#}})) (grounding_of_clss (CC \\<union> {C}))\"", "lemma RP_ground_derive:\n  \"St \\<leadsto> St' \\<Longrightarrow> sr_ext.derive (grounding_of_state St) (grounding_of_state St')\"", "theorem RP_model: \"St \\<leadsto> St' \\<Longrightarrow> I \\<Turnstile>s grounding_of_state St' \\<longleftrightarrow> I \\<Turnstile>s grounding_of_state St\"", "lemma ground_derive_chain: \"chain (\\<leadsto>) Sts \\<Longrightarrow> chain sr_ext.derive (lmap grounding_of_state Sts)\"", "lemma Sup_llist_grounding_of_state_ground:\n  assumes \"C \\<in> Sup_llist (lmap grounding_of_state Sts)\"\n  shows \"is_ground_cls C\"", "lemma Liminf_grounding_of_state_ground:\n  \"C \\<in> Liminf_llist (lmap grounding_of_state Sts) \\<Longrightarrow> is_ground_cls C\"", "lemma in_Sup_llist_in_Sup_state:\n  assumes \"C \\<in> Sup_llist (lmap grounding_of_state Sts)\"\n  shows \"\\<exists>D \\<sigma>. D \\<in> clss_of_state (Sup_state Sts) \\<and> D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\"", "lemma\n  N_of_state_Liminf: \"N_of_state (Liminf_state Sts) = Liminf_llist (lmap N_of_state Sts)\" and\n  P_of_state_Liminf: \"P_of_state (Liminf_state Sts) = Liminf_llist (lmap P_of_state Sts)\"", "lemma eventually_removed_from_N:\n  assumes\n    d_in: \"D \\<in> N_of_state (lnth Sts i)\" and\n    fair: \"fair_state_seq Sts\" and\n    i_Sts: \"enat i < llength Sts\"\n  shows \"\\<exists>l. D \\<in> N_of_state (lnth Sts l) \\<and> D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and> i \\<le> l\n    \\<and> enat (Suc l) < llength Sts\"", "lemma eventually_removed_from_P:\n  assumes\n    d_in: \"D \\<in> P_of_state (lnth Sts i)\" and\n    fair: \"fair_state_seq Sts\" and\n    i_Sts: \"enat i < llength Sts\"\n  shows \"\\<exists>l. D \\<in> P_of_state (lnth Sts l) \\<and> D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and> i \\<le> l\n    \\<and> enat (Suc l) < llength Sts\"", "lemma instance_if_subsumed_and_in_limit:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    ns: \"Gs = lmap grounding_of_state Sts\" and\n    c: \"C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\" and\n    d: \"D \\<in> clss_of_state (lnth Sts i)\" \"enat i < llength Sts\" \"subsumes D C\"\n  shows \"\\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\"", "lemma from_Q_to_Q_inf:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    ns: \"Gs = lmap grounding_of_state Sts\" and\n    c: \"C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\" and\n    d: \"D \\<in> Q_of_state (lnth Sts i)\" \"enat i < llength Sts\" \"subsumes D C\" and\n    d_least: \"\\<forall>E \\<in> {E. E \\<in> (clss_of_state (Sup_state Sts)) \\<and> subsumes E C}.\n      \\<not> strictly_subsumes E D\"\n  shows \"D \\<in> Q_of_state (Liminf_state Sts)\"", "lemma from_P_to_Q:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    ns: \"Gs = lmap grounding_of_state Sts\" and\n    c: \"C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\" and\n    d: \"D \\<in> P_of_state (lnth Sts i)\" \"enat i < llength Sts\" \"subsumes D C\" and\n    d_least: \"\\<forall>E \\<in> {E. E \\<in> (clss_of_state (Sup_state Sts)) \\<and> subsumes E C}.\n      \\<not> strictly_subsumes E D\"\n  shows \"\\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts\"", "lemma from_N_to_P_or_Q:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    ns: \"Gs = lmap grounding_of_state Sts\" and\n    c: \"C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\" and\n    d: \"D \\<in> N_of_state (lnth Sts i)\" \"enat i < llength Sts\" \"subsumes D C\" and\n    d_least: \"\\<forall>E \\<in> {E. E \\<in> (clss_of_state (Sup_state Sts)) \\<and> subsumes E C}. \\<not> strictly_subsumes E D\"\n  shows \"\\<exists>l D' \\<sigma>'. D' \\<in> P_of_state (lnth Sts l) \\<union> Q_of_state (lnth Sts l) \\<and>\n    enat l < llength Sts \\<and>\n    (\\<forall>E \\<in> {E. E \\<in> (clss_of_state (Sup_state Sts)) \\<and> subsumes E C}. \\<not> strictly_subsumes E D') \\<and>\n    D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>' \\<and> subsumes D' C\"", "lemma eventually_in_Qinf:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    D_p: \"D \\<in> clss_of_state (Sup_state Sts)\"\n      \"subsumes D C\" \"\\<forall>E \\<in> {E. E \\<in> (clss_of_state (Sup_state Sts)) \\<and> subsumes E C}.\n       \\<not> strictly_subsumes E D\" and\n    fair: \"fair_state_seq Sts\" and\n    ns: \"Gs = lmap grounding_of_state Sts\" and\n    c: \"C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\" and\n    ground_C: \"is_ground_cls C\"\n  shows \"\\<exists>D' \\<sigma>'. D' \\<in> Q_of_state (Liminf_state Sts) \\<and> D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\"", "lemma fair_imp_Liminf_minus_Rf_subset_ground_Liminf_state:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    ns: \"Gs = lmap grounding_of_state Sts\"\n  shows \"Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n    \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))\"", "lemma subseteq_Liminf_state_eventually_always:\n  fixes CC\n  assumes\n    \"finite CC\" and\n    \"CC \\<noteq> {}\" and\n    \"CC \\<subseteq> Q_of_state (Liminf_state Sts)\"\n  shows \"\\<exists>j. enat j < llength Sts \\<and> (\\<forall>j' \\<ge> enat j. j' < llength Sts \\<longrightarrow> CC \\<subseteq> Q_of_state (lnth Sts j'))\"", "lemma empty_clause_in_Q_of_Liminf_state:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    empty_in: \"{#} \\<in> Liminf_llist (lmap grounding_of_state Sts)\"\n  shows \"{#} \\<in> Q_of_state (Liminf_state Sts)\"", "lemma grounding_of_state_Liminf_state_subseteq:\n  \"grounding_of_state (Liminf_state Sts) \\<subseteq> Liminf_llist (lmap grounding_of_state Sts)\"", "theorem RP_sound:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    \"{#} \\<in> clss_of_state (Liminf_state Sts)\"\n  shows \"\\<not> satisfiable (grounding_of_state (lhd Sts))\"", "theorem RP_saturated_if_fair:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    empty_Q0: \"Q_of_state (lhd Sts) = {}\"\n  shows \"sr.saturated_upto (Liminf_llist (lmap grounding_of_state Sts))\""], "translations": [["", "lemma least_exists: \"P n \\<Longrightarrow> \\<exists>n. is_least P n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P n \\<Longrightarrow> \\<exists>n. is_least P n", "using exists_least_iff"], ["proof (prove)\nusing this:\n  (\\<exists>n. ?P n) = (\\<exists>n. ?P n \\<and> (\\<forall>m<n. \\<not> ?P m))\n\ngoal (1 subgoal):\n 1. P n \\<Longrightarrow> \\<exists>n. is_least P n", "unfolding is_least_def"], ["proof (prove)\nusing this:\n  (\\<exists>n. ?P n) = (\\<exists>n. ?P n \\<and> (\\<forall>m<n. \\<not> ?P m))\n\ngoal (1 subgoal):\n 1. P n \\<Longrightarrow>\n    \\<exists>n. P n \\<and> (\\<forall>n'<n. \\<not> P n')", "by auto"], ["", "text \\<open>\nThe following corresponds to page 42 and 43 of Section 4.3, from the explanation of RP to\nLemma 4.10.\n\\<close>"], ["", "type_synonym 'a state = \"'a clause set \\<times> 'a clause set \\<times> 'a clause set\""], ["", "locale FO_resolution_prover =\n  FO_resolution subst_atm id_subst comp_subst renamings_apart atm_of_atms mgu less_atm +\n  selection S\n  for\n    S :: \"('a :: wellorder) clause \\<Rightarrow> 'a clause\" and\n    subst_atm :: \"'a \\<Rightarrow> 's \\<Rightarrow> 'a\" and\n    id_subst :: \"'s\" and\n    comp_subst :: \"'s \\<Rightarrow> 's \\<Rightarrow> 's\" and\n    renamings_apart :: \"'a clause list \\<Rightarrow> 's list\" and\n    atm_of_atms :: \"'a list \\<Rightarrow> 'a\" and\n    mgu :: \"'a set set \\<Rightarrow> 's option\" and\n    less_atm :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" +\n  assumes\n    sel_stable: \"\\<And>\\<rho> C. is_renaming \\<rho> \\<Longrightarrow> S (C \\<cdot> \\<rho>) = S C \\<cdot> \\<rho>\"\nbegin"], ["", "fun N_of_state :: \"'a state \\<Rightarrow> 'a clause set\" where\n  \"N_of_state (N, P, Q) = N\""], ["", "fun P_of_state :: \"'a state \\<Rightarrow> 'a clause set\" where\n  \"P_of_state (N, P, Q) = P\""], ["", "text \\<open>\n\\<open>O\\<close> denotes relation composition in Isabelle, so the formalization uses \\<open>Q\\<close> instead.\n\\<close>"], ["", "fun Q_of_state :: \"'a state \\<Rightarrow> 'a clause set\" where\n  \"Q_of_state (N, P, Q) = Q\""], ["", "abbreviation clss_of_state :: \"'a state \\<Rightarrow> 'a clause set\" where\n  \"clss_of_state St \\<equiv> N_of_state St \\<union> P_of_state St \\<union> Q_of_state St\""], ["", "abbreviation grounding_of_state :: \"'a state \\<Rightarrow> 'a clause set\" where\n  \"grounding_of_state St \\<equiv> grounding_of_clss (clss_of_state St)\""], ["", "interpretation ord_FO_resolution: inference_system \"ord_FO_\\<Gamma> S\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "text \\<open>\nThe following inductive predicate formalizes the resolution prover in Figure 5.\n\\<close>"], ["", "inductive RP :: \"'a state \\<Rightarrow> 'a state \\<Rightarrow> bool\" (infix \"\\<leadsto>\" 50) where\n  tautology_deletion: \"Neg A \\<in># C \\<Longrightarrow> Pos A \\<in># C \\<Longrightarrow> (N \\<union> {C}, P, Q) \\<leadsto> (N, P, Q)\"\n| forward_subsumption: \"D \\<in> P \\<union> Q \\<Longrightarrow> subsumes D C \\<Longrightarrow> (N \\<union> {C}, P, Q) \\<leadsto> (N, P, Q)\"\n| backward_subsumption_P: \"D \\<in> N \\<Longrightarrow> strictly_subsumes D C \\<Longrightarrow> (N, P \\<union> {C}, Q) \\<leadsto> (N, P, Q)\"\n| backward_subsumption_Q: \"D \\<in> N \\<Longrightarrow> strictly_subsumes D C \\<Longrightarrow> (N, P, Q \\<union> {C}) \\<leadsto> (N, P, Q)\"\n| forward_reduction: \"D + {#L'#} \\<in> P \\<union> Q \\<Longrightarrow> - L = L' \\<cdot>l \\<sigma> \\<Longrightarrow> D \\<cdot> \\<sigma> \\<subseteq># C \\<Longrightarrow>\n    (N \\<union> {C + {#L#}}, P, Q) \\<leadsto> (N \\<union> {C}, P, Q)\"\n| backward_reduction_P: \"D + {#L'#} \\<in> N \\<Longrightarrow> - L = L' \\<cdot>l \\<sigma> \\<Longrightarrow> D \\<cdot> \\<sigma> \\<subseteq># C \\<Longrightarrow>\n    (N, P \\<union> {C + {#L#}}, Q) \\<leadsto> (N, P \\<union> {C}, Q)\"\n| backward_reduction_Q: \"D + {#L'#} \\<in> N \\<Longrightarrow> - L = L' \\<cdot>l \\<sigma> \\<Longrightarrow> D \\<cdot> \\<sigma> \\<subseteq># C \\<Longrightarrow>\n    (N, P, Q \\<union> {C + {#L#}}) \\<leadsto> (N, P \\<union> {C}, Q)\"\n| clause_processing: \"(N \\<union> {C}, P, Q) \\<leadsto> (N, P \\<union> {C}, Q)\"\n| inference_computation: \"N = concls_of (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n    ({}, P \\<union> {C}, Q) \\<leadsto> (N, P, Q \\<union> {C})\""], ["", "lemma final_RP: \"\\<not> ({}, {}, Q) \\<leadsto> St\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ({}, {}, Q) \\<leadsto> St", "by (auto elim: RP.cases)"], ["", "definition Sup_state :: \"'a state llist \\<Rightarrow> 'a state\" where\n  \"Sup_state Sts =\n   (Sup_llist (lmap N_of_state Sts), Sup_llist (lmap P_of_state Sts),\n    Sup_llist (lmap Q_of_state Sts))\""], ["", "definition Liminf_state :: \"'a state llist \\<Rightarrow> 'a state\" where\n  \"Liminf_state Sts =\n   (Liminf_llist (lmap N_of_state Sts), Liminf_llist (lmap P_of_state Sts),\n    Liminf_llist (lmap Q_of_state Sts))\""], ["", "context\n  fixes Sts Sts' :: \"'a state llist\"\n  assumes Sts: \"lfinite Sts\" \"lfinite Sts'\" \"\\<not> lnull Sts\" \"\\<not> lnull Sts'\" \"llast Sts' = llast Sts\"\nbegin"], ["", "lemma\n  N_of_Liminf_state_fin: \"N_of_state (Liminf_state Sts') = N_of_state (Liminf_state Sts)\" and\n  P_of_Liminf_state_fin: \"P_of_state (Liminf_state Sts') = P_of_state (Liminf_state Sts)\" and\n  Q_of_Liminf_state_fin: \"Q_of_state (Liminf_state Sts') = Q_of_state (Liminf_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N_of_state (Liminf_state Sts') = N_of_state (Liminf_state Sts) &&&\n    P_of_state (Liminf_state Sts') = P_of_state (Liminf_state Sts) &&&\n    Q_of_state (Liminf_state Sts') = Q_of_state (Liminf_state Sts)", "using Sts"], ["proof (prove)\nusing this:\n  lfinite Sts\n  lfinite Sts'\n  \\<not> lnull Sts\n  \\<not> lnull Sts'\n  llast Sts' = llast Sts\n\ngoal (1 subgoal):\n 1. N_of_state (Liminf_state Sts') = N_of_state (Liminf_state Sts) &&&\n    P_of_state (Liminf_state Sts') = P_of_state (Liminf_state Sts) &&&\n    Q_of_state (Liminf_state Sts') = Q_of_state (Liminf_state Sts)", "by (simp_all add: Liminf_state_def lfinite_Liminf_llist llast_lmap)"], ["", "lemma Liminf_state_fin: \"Liminf_state Sts' = Liminf_state Sts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_state Sts' = Liminf_state Sts", "using N_of_Liminf_state_fin P_of_Liminf_state_fin Q_of_Liminf_state_fin"], ["proof (prove)\nusing this:\n  N_of_state (Liminf_state Sts') = N_of_state (Liminf_state Sts)\n  P_of_state (Liminf_state Sts') = P_of_state (Liminf_state Sts)\n  Q_of_state (Liminf_state Sts') = Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. Liminf_state Sts' = Liminf_state Sts", "by (simp add: Liminf_state_def)"], ["", "end"], ["", "context\n  fixes Sts Sts' :: \"'a state llist\"\n  assumes Sts: \"\\<not> lfinite Sts\" \"emb Sts Sts'\"\nbegin"], ["", "lemma\n  N_of_Liminf_state_inf: \"N_of_state (Liminf_state Sts') \\<subseteq> N_of_state (Liminf_state Sts)\" and\n  P_of_Liminf_state_inf: \"P_of_state (Liminf_state Sts') \\<subseteq> P_of_state (Liminf_state Sts)\" and\n  Q_of_Liminf_state_inf: \"Q_of_state (Liminf_state Sts') \\<subseteq> Q_of_state (Liminf_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N_of_state (Liminf_state Sts')\n    \\<subseteq> N_of_state (Liminf_state Sts) &&&\n    P_of_state (Liminf_state Sts')\n    \\<subseteq> P_of_state (Liminf_state Sts) &&&\n    Q_of_state (Liminf_state Sts') \\<subseteq> Q_of_state (Liminf_state Sts)", "using Sts"], ["proof (prove)\nusing this:\n  \\<not> lfinite Sts\n  emb Sts Sts'\n\ngoal (1 subgoal):\n 1. N_of_state (Liminf_state Sts')\n    \\<subseteq> N_of_state (Liminf_state Sts) &&&\n    P_of_state (Liminf_state Sts')\n    \\<subseteq> P_of_state (Liminf_state Sts) &&&\n    Q_of_state (Liminf_state Sts') \\<subseteq> Q_of_state (Liminf_state Sts)", "by (simp_all add: Liminf_state_def emb_Liminf_llist_infinite emb_lmap)"], ["", "lemma clss_of_Liminf_state_inf:\n  \"clss_of_state (Liminf_state Sts') \\<subseteq> clss_of_state (Liminf_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N_of_state (Liminf_state Sts') \\<union>\n    P_of_state (Liminf_state Sts') \\<union>\n    Q_of_state (Liminf_state Sts')\n    \\<subseteq> N_of_state (Liminf_state Sts) \\<union>\n                P_of_state (Liminf_state Sts) \\<union>\n                Q_of_state (Liminf_state Sts)", "using N_of_Liminf_state_inf P_of_Liminf_state_inf Q_of_Liminf_state_inf"], ["proof (prove)\nusing this:\n  N_of_state (Liminf_state Sts') \\<subseteq> N_of_state (Liminf_state Sts)\n  P_of_state (Liminf_state Sts') \\<subseteq> P_of_state (Liminf_state Sts)\n  Q_of_state (Liminf_state Sts') \\<subseteq> Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. N_of_state (Liminf_state Sts') \\<union>\n    P_of_state (Liminf_state Sts') \\<union>\n    Q_of_state (Liminf_state Sts')\n    \\<subseteq> N_of_state (Liminf_state Sts) \\<union>\n                P_of_state (Liminf_state Sts) \\<union>\n                Q_of_state (Liminf_state Sts)", "by blast"], ["", "end"], ["", "definition fair_state_seq :: \"'a state llist \\<Rightarrow> bool\" where\n  \"fair_state_seq Sts \\<longleftrightarrow> N_of_state (Liminf_state Sts) = {} \\<and> P_of_state (Liminf_state Sts) = {}\""], ["", "text \\<open>\nThe following formalizes Lemma 4.10.\n\\<close>"], ["", "context\n  fixes Sts :: \"'a state llist\"\nbegin"], ["", "definition S_Q :: \"'a clause \\<Rightarrow> 'a clause\" where\n  \"S_Q = S_M S (Q_of_state (Liminf_state Sts))\""], ["", "interpretation sq: selection S_Q"], ["proof (prove)\ngoal (1 subgoal):\n 1. selection S_Q", "unfolding S_Q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. selection (S_M S (Q_of_state (Liminf_state Sts)))", "using S_M_selects_subseteq S_M_selects_neg_lits selection_axioms"], ["proof (prove)\nusing this:\n  selection ?S \\<Longrightarrow> S_M ?S ?M ?C \\<subseteq># ?C\n  \\<lbrakk>selection ?S; ?L \\<in># S_M ?S ?M ?C\\<rbrakk>\n  \\<Longrightarrow> is_neg ?L\n  selection S\n\ngoal (1 subgoal):\n 1. selection (S_M S (Q_of_state (Liminf_state Sts)))", "by unfold_locales auto"], ["", "interpretation gr: ground_resolution_with_selection S_Q"], ["proof (prove)\ngoal (1 subgoal):\n 1. ground_resolution_with_selection S_Q", "by unfold_locales"], ["", "interpretation sr: standard_redundancy_criterion_reductive gr.ord_\\<Gamma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. standard_redundancy_criterion_reductive gr.ord_\\<Gamma>", "by unfold_locales"], ["", "interpretation sr: standard_redundancy_criterion_counterex_reducing gr.ord_\\<Gamma>\n  \"ground_resolution_with_selection.INTERP S_Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. standard_redundancy_criterion_counterex_reducing gr.ord_\\<Gamma>\n     gr.INTERP", "by unfold_locales"], ["", "text \\<open>\nThe extension of ordered resolution mentioned in 4.10. We let it consist of all sound rules.\n\\<close>"], ["", "definition ground_sound_\\<Gamma>:: \"'a inference set\" where\n  \"ground_sound_\\<Gamma> = {Infer CC D E | CC D E. (\\<forall>I. I \\<Turnstile>m CC \\<longrightarrow> I \\<Turnstile> D \\<longrightarrow> I \\<Turnstile> E)}\""], ["", "text \\<open>\nWe prove that we indeed defined an extension.\n\\<close>"], ["", "lemma gd_ord_\\<Gamma>_ngd_ord_\\<Gamma>: \"gr.ord_\\<Gamma> \\<subseteq> ground_sound_\\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gr.ord_\\<Gamma> \\<subseteq> ground_sound_\\<Gamma>", "unfolding ground_sound_\\<Gamma>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gr.ord_\\<Gamma>\n    \\<subseteq> {Infer CC D E |CC D E.\n                 \\<forall>I.\n                    I \\<Turnstile>m CC \\<longrightarrow>\n                    I \\<Turnstile> D \\<longrightarrow> I \\<Turnstile> E}", "using gr.ord_\\<Gamma>_def gr.ord_resolve_sound"], ["proof (prove)\nusing this:\n  gr.ord_\\<Gamma> =\n  {uu_.\n   \\<exists>CAs DA AAs As E.\n      uu_ = Infer (mset CAs) DA E \\<and> gr.ord_resolve CAs DA AAs As E}\n  \\<lbrakk>gr.ord_resolve ?CAs ?DA ?AAs ?As ?E; ?I \\<Turnstile>m mset ?CAs;\n   ?I \\<Turnstile> ?DA\\<rbrakk>\n  \\<Longrightarrow> ?I \\<Turnstile> ?E\n\ngoal (1 subgoal):\n 1. gr.ord_\\<Gamma>\n    \\<subseteq> {Infer CC D E |CC D E.\n                 \\<forall>I.\n                    I \\<Turnstile>m CC \\<longrightarrow>\n                    I \\<Turnstile> D \\<longrightarrow> I \\<Turnstile> E}", "by fastforce"], ["", "lemma sound_ground_sound_\\<Gamma>: \"sound_inference_system ground_sound_\\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sound_inference_system ground_sound_\\<Gamma>", "unfolding sound_inference_system_def ground_sound_\\<Gamma>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>CC D E I.\n       Infer CC D E\n       \\<in> {Infer CC D E |CC D E.\n              \\<forall>I.\n                 I \\<Turnstile>m CC \\<longrightarrow>\n                 I \\<Turnstile> D \\<longrightarrow>\n                 I \\<Turnstile> E} \\<longrightarrow>\n       I \\<Turnstile>m CC \\<longrightarrow>\n       I \\<Turnstile> D \\<longrightarrow> I \\<Turnstile> E", "by auto"], ["", "lemma sat_preserving_ground_sound_\\<Gamma>: \"sat_preserving_inference_system ground_sound_\\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_preserving_inference_system ground_sound_\\<Gamma>", "using sound_ground_sound_\\<Gamma> sat_preserving_inference_system.intro\n    sound_inference_system.\\<Gamma>_sat_preserving"], ["proof (prove)\nusing this:\n  sound_inference_system ground_sound_\\<Gamma>\n  (\\<And>N.\n      satisfiable N \\<Longrightarrow>\n      satisfiable\n       (N \\<union>\n        concls_of\n         (inference_system.inferences_from ?\\<Gamma> N))) \\<Longrightarrow>\n  sat_preserving_inference_system ?\\<Gamma>\n  \\<lbrakk>sound_inference_system ?\\<Gamma>; satisfiable ?N\\<rbrakk>\n  \\<Longrightarrow> satisfiable\n                     (?N \\<union>\n                      concls_of\n                       (inference_system.inferences_from ?\\<Gamma> ?N))\n\ngoal (1 subgoal):\n 1. sat_preserving_inference_system ground_sound_\\<Gamma>", "by blast"], ["", "definition sr_ext_Ri :: \"'a clause set \\<Rightarrow> 'a inference set\" where\n  \"sr_ext_Ri N = sr.Ri N \\<union> (ground_sound_\\<Gamma> - gr.ord_\\<Gamma>)\""], ["", "interpretation sr_ext:\n  sat_preserving_redundancy_criterion ground_sound_\\<Gamma> sr.Rf sr_ext_Ri"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_preserving_redundancy_criterion ground_sound_\\<Gamma> sr.Rf\n     sr_ext_Ri", "unfolding sat_preserving_redundancy_criterion_def sr_ext_Ri_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_preserving_inference_system ground_sound_\\<Gamma> \\<and>\n    redundancy_criterion ground_sound_\\<Gamma> sr.Rf\n     (\\<lambda>N.\n         sr.Ri N \\<union> (ground_sound_\\<Gamma> - gr.ord_\\<Gamma>))", "using sat_preserving_ground_sound_\\<Gamma> redundancy_criterion_standard_extension gd_ord_\\<Gamma>_ngd_ord_\\<Gamma>\n    sr.redundancy_criterion_axioms"], ["proof (prove)\nusing this:\n  sat_preserving_inference_system ground_sound_\\<Gamma>\n  \\<lbrakk>?\\<Gamma> \\<subseteq> ?\\<Gamma>';\n   redundancy_criterion ?\\<Gamma> ?Rf ?Ri\\<rbrakk>\n  \\<Longrightarrow> redundancy_criterion ?\\<Gamma>' ?Rf\n                     (\\<lambda>N. ?Ri N \\<union> (?\\<Gamma>' - ?\\<Gamma>))\n  gr.ord_\\<Gamma> \\<subseteq> ground_sound_\\<Gamma>\n  redundancy_criterion gr.ord_\\<Gamma> sr.Rf sr.Ri\n\ngoal (1 subgoal):\n 1. sat_preserving_inference_system ground_sound_\\<Gamma> \\<and>\n    redundancy_criterion ground_sound_\\<Gamma> sr.Rf\n     (\\<lambda>N.\n         sr.Ri N \\<union> (ground_sound_\\<Gamma> - gr.ord_\\<Gamma>))", "by auto"], ["", "lemma strict_subset_subsumption_redundant_clause:\n  assumes\n    sub: \"D \\<cdot> \\<sigma> \\<subset># C\" and\n    ground_\\<sigma>: \"is_ground_subst \\<sigma>\"\n  shows \"C \\<in> sr.Rf (grounding_of_cls D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_cls D)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_cls D)", "from sub"], ["proof (chain)\npicking this:\n  D \\<cdot> \\<sigma> \\<subset># C", "have \"\\<forall>I. I \\<Turnstile> D \\<cdot> \\<sigma> \\<longrightarrow> I \\<Turnstile> C\""], ["proof (prove)\nusing this:\n  D \\<cdot> \\<sigma> \\<subset># C\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       I \\<Turnstile> D \\<cdot> \\<sigma> \\<longrightarrow> I \\<Turnstile> C", "unfolding true_cls_def"], ["proof (prove)\nusing this:\n  D \\<cdot> \\<sigma> \\<subset># C\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       Multiset.Bex (D \\<cdot> \\<sigma>)\n        ((\\<Turnstile>l) I) \\<longrightarrow>\n       Multiset.Bex C ((\\<Turnstile>l) I)", "by blast"], ["proof (state)\nthis:\n  \\<forall>I.\n     I \\<Turnstile> D \\<cdot> \\<sigma> \\<longrightarrow> I \\<Turnstile> C\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_cls D)", "moreover"], ["proof (state)\nthis:\n  \\<forall>I.\n     I \\<Turnstile> D \\<cdot> \\<sigma> \\<longrightarrow> I \\<Turnstile> C\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_cls D)", "have \"C > D \\<cdot> \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<cdot> \\<sigma> < C", "using sub"], ["proof (prove)\nusing this:\n  D \\<cdot> \\<sigma> \\<subset># C\n\ngoal (1 subgoal):\n 1. D \\<cdot> \\<sigma> < C", "by (simp add: subset_imp_less_mset)"], ["proof (state)\nthis:\n  D \\<cdot> \\<sigma> < C\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_cls D)", "moreover"], ["proof (state)\nthis:\n  D \\<cdot> \\<sigma> < C\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_cls D)", "have \"D \\<cdot> \\<sigma> \\<in> grounding_of_cls D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<cdot> \\<sigma> \\<in> grounding_of_cls D", "using ground_\\<sigma>"], ["proof (prove)\nusing this:\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. D \\<cdot> \\<sigma> \\<in> grounding_of_cls D", "by (metis (mono_tags) mem_Collect_eq substitution_ops.grounding_of_cls_def)"], ["proof (state)\nthis:\n  D \\<cdot> \\<sigma> \\<in> grounding_of_cls D\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_cls D)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>I.\n     I \\<Turnstile> D \\<cdot> \\<sigma> \\<longrightarrow> I \\<Turnstile> C\n  D \\<cdot> \\<sigma> < C\n  D \\<cdot> \\<sigma> \\<in> grounding_of_cls D", "have \"set_mset {#D \\<cdot> \\<sigma>#} \\<subseteq> grounding_of_cls D\"\n    \"(\\<forall>I. I \\<Turnstile>m {#D \\<cdot> \\<sigma>#} \\<longrightarrow> I \\<Turnstile> C)\"\n    \"(\\<forall>D'. D' \\<in># {#D \\<cdot> \\<sigma>#} \\<longrightarrow> D' < C)\""], ["proof (prove)\nusing this:\n  \\<forall>I.\n     I \\<Turnstile> D \\<cdot> \\<sigma> \\<longrightarrow> I \\<Turnstile> C\n  D \\<cdot> \\<sigma> < C\n  D \\<cdot> \\<sigma> \\<in> grounding_of_cls D\n\ngoal (1 subgoal):\n 1. set_mset {#D \\<cdot> \\<sigma>#} \\<subseteq> grounding_of_cls D &&&\n    \\<forall>I.\n       I \\<Turnstile>m {#D \\<cdot> \\<sigma>#} \\<longrightarrow>\n       I \\<Turnstile> C &&&\n    \\<forall>D'. D' \\<in># {#D \\<cdot> \\<sigma>#} \\<longrightarrow> D' < C", "by auto"], ["proof (state)\nthis:\n  set_mset {#D \\<cdot> \\<sigma>#} \\<subseteq> grounding_of_cls D\n  \\<forall>I.\n     I \\<Turnstile>m {#D \\<cdot> \\<sigma>#} \\<longrightarrow>\n     I \\<Turnstile> C\n  \\<forall>D'. D' \\<in># {#D \\<cdot> \\<sigma>#} \\<longrightarrow> D' < C\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_cls D)", "then"], ["proof (chain)\npicking this:\n  set_mset {#D \\<cdot> \\<sigma>#} \\<subseteq> grounding_of_cls D\n  \\<forall>I.\n     I \\<Turnstile>m {#D \\<cdot> \\<sigma>#} \\<longrightarrow>\n     I \\<Turnstile> C\n  \\<forall>D'. D' \\<in># {#D \\<cdot> \\<sigma>#} \\<longrightarrow> D' < C", "show ?thesis"], ["proof (prove)\nusing this:\n  set_mset {#D \\<cdot> \\<sigma>#} \\<subseteq> grounding_of_cls D\n  \\<forall>I.\n     I \\<Turnstile>m {#D \\<cdot> \\<sigma>#} \\<longrightarrow>\n     I \\<Turnstile> C\n  \\<forall>D'. D' \\<in># {#D \\<cdot> \\<sigma>#} \\<longrightarrow> D' < C\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_cls D)", "using sr.Rf_def"], ["proof (prove)\nusing this:\n  set_mset {#D \\<cdot> \\<sigma>#} \\<subseteq> grounding_of_cls D\n  \\<forall>I.\n     I \\<Turnstile>m {#D \\<cdot> \\<sigma>#} \\<longrightarrow>\n     I \\<Turnstile> C\n  \\<forall>D'. D' \\<in># {#D \\<cdot> \\<sigma>#} \\<longrightarrow> D' < C\n  sr.Rf ?N =\n  {C. \\<exists>DD.\n         set_mset DD \\<subseteq> ?N \\<and>\n         (\\<forall>I.\n             I \\<Turnstile>m DD \\<longrightarrow> I \\<Turnstile> C) \\<and>\n         (\\<forall>D. D \\<in># DD \\<longrightarrow> D < C)}\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_cls D)", "by blast"], ["proof (state)\nthis:\n  C \\<in> sr.Rf (grounding_of_cls D)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strict_subset_subsumption_redundant_clss:\n  assumes\n    \"D \\<cdot> \\<sigma> \\<subset># C\" and\n    \"is_ground_subst \\<sigma>\" and\n    \"D \\<in> CC\"\n  shows \"C \\<in> sr.Rf (grounding_of_clss CC)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_clss CC)", "using assms"], ["proof (prove)\nusing this:\n  D \\<cdot> \\<sigma> \\<subset># C\n  is_ground_subst \\<sigma>\n  D \\<in> CC\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_clss CC)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<cdot> \\<sigma> \\<subset># C; is_ground_subst \\<sigma>;\n     D \\<in> CC\\<rbrakk>\n    \\<Longrightarrow> C \\<in> sr.Rf (grounding_of_clss CC)", "have \"C \\<in> sr.Rf (grounding_of_cls D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_cls D)", "using strict_subset_subsumption_redundant_clause assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?D \\<cdot> ?\\<sigma> \\<subset># ?C;\n   is_ground_subst ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> ?C \\<in> sr.Rf (grounding_of_cls ?D)\n  D \\<cdot> \\<sigma> \\<subset># C\n  is_ground_subst \\<sigma>\n  D \\<in> CC\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_cls D)", "by auto"], ["proof (state)\nthis:\n  C \\<in> sr.Rf (grounding_of_cls D)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<cdot> \\<sigma> \\<subset># C; is_ground_subst \\<sigma>;\n     D \\<in> CC\\<rbrakk>\n    \\<Longrightarrow> C \\<in> sr.Rf (grounding_of_clss CC)", "then"], ["proof (chain)\npicking this:\n  C \\<in> sr.Rf (grounding_of_cls D)", "show ?thesis"], ["proof (prove)\nusing this:\n  C \\<in> sr.Rf (grounding_of_cls D)\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_clss CC)", "using assms"], ["proof (prove)\nusing this:\n  C \\<in> sr.Rf (grounding_of_cls D)\n  D \\<cdot> \\<sigma> \\<subset># C\n  is_ground_subst \\<sigma>\n  D \\<in> CC\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (grounding_of_clss CC)", "unfolding grounding_of_clss_def"], ["proof (prove)\nusing this:\n  C \\<in> sr.Rf (grounding_of_cls D)\n  D \\<cdot> \\<sigma> \\<subset># C\n  is_ground_subst \\<sigma>\n  D \\<in> CC\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (\\<Union> (grounding_of_cls ` CC))", "by (metis (no_types) sr.Rf_mono sup_ge1 SUP_absorb contra_subsetD)"], ["proof (state)\nthis:\n  C \\<in> sr.Rf (grounding_of_clss CC)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strict_subset_subsumption_grounding_redundant_clss:\n  assumes\n    D\\<sigma>_subset_C: \"D \\<cdot> \\<sigma> \\<subset># C\" and\n    D_in_St: \"D \\<in> CC\"\n  shows \"grounding_of_cls C \\<subseteq> sr.Rf (grounding_of_clss CC)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. grounding_of_cls C \\<subseteq> sr.Rf (grounding_of_clss CC)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> grounding_of_cls C \\<Longrightarrow>\n       x \\<in> sr.Rf (grounding_of_clss CC)", "fix C\\<mu>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> grounding_of_cls C \\<Longrightarrow>\n       x \\<in> sr.Rf (grounding_of_clss CC)", "assume \"C\\<mu> \\<in> grounding_of_cls C\""], ["proof (state)\nthis:\n  C\\<mu> \\<in> grounding_of_cls C\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> grounding_of_cls C \\<Longrightarrow>\n       x \\<in> sr.Rf (grounding_of_clss CC)", "then"], ["proof (chain)\npicking this:\n  C\\<mu> \\<in> grounding_of_cls C", "obtain \\<mu> where\n    \\<mu>_p: \"C\\<mu> = C \\<cdot> \\<mu> \\<and> is_ground_subst \\<mu>\""], ["proof (prove)\nusing this:\n  C\\<mu> \\<in> grounding_of_cls C\n\ngoal (1 subgoal):\n 1. (\\<And>\\<mu>.\n        C\\<mu> = C \\<cdot> \\<mu> \\<and>\n        is_ground_subst \\<mu> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding grounding_of_cls_def"], ["proof (prove)\nusing this:\n  C\\<mu> \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<mu>.\n        C\\<mu> = C \\<cdot> \\<mu> \\<and>\n        is_ground_subst \\<mu> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  C\\<mu> = C \\<cdot> \\<mu> \\<and> is_ground_subst \\<mu>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> grounding_of_cls C \\<Longrightarrow>\n       x \\<in> sr.Rf (grounding_of_clss CC)", "have D\\<sigma>\\<mu>C\\<mu>: \"D \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<subset># C \\<cdot> \\<mu>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<subset># C \\<cdot> \\<mu>", "using D\\<sigma>_subset_C subst_subset_mono"], ["proof (prove)\nusing this:\n  D \\<cdot> \\<sigma> \\<subset># C\n  ?D \\<subset># ?C \\<Longrightarrow>\n  ?D \\<cdot> ?\\<sigma> \\<subset># ?C \\<cdot> ?\\<sigma>\n\ngoal (1 subgoal):\n 1. D \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<subset># C \\<cdot> \\<mu>", "by auto"], ["proof (state)\nthis:\n  D \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<subset># C \\<cdot> \\<mu>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> grounding_of_cls C \\<Longrightarrow>\n       x \\<in> sr.Rf (grounding_of_clss CC)", "then"], ["proof (chain)\npicking this:\n  D \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<subset># C \\<cdot> \\<mu>", "show \"C\\<mu> \\<in> sr.Rf (grounding_of_clss CC)\""], ["proof (prove)\nusing this:\n  D \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<subset># C \\<cdot> \\<mu>\n\ngoal (1 subgoal):\n 1. C\\<mu> \\<in> sr.Rf (grounding_of_clss CC)", "using \\<mu>_p strict_subset_subsumption_redundant_clss[of D \"\\<sigma> \\<odot> \\<mu>\" \"C \\<cdot> \\<mu>\"] D_in_St"], ["proof (prove)\nusing this:\n  D \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<subset># C \\<cdot> \\<mu>\n  C\\<mu> = C \\<cdot> \\<mu> \\<and> is_ground_subst \\<mu>\n  \\<lbrakk>D \\<cdot> (\\<sigma> \\<odot> \\<mu>) \\<subset># C \\<cdot> \\<mu>;\n   is_ground_subst (\\<sigma> \\<odot> \\<mu>); D \\<in> ?CC\\<rbrakk>\n  \\<Longrightarrow> C \\<cdot> \\<mu> \\<in> sr.Rf (grounding_of_clss ?CC)\n  D \\<in> CC\n\ngoal (1 subgoal):\n 1. C\\<mu> \\<in> sr.Rf (grounding_of_clss CC)", "by auto"], ["proof (state)\nthis:\n  C\\<mu> \\<in> sr.Rf (grounding_of_clss CC)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma derive_if_remove_subsumed:\n  assumes\n    \"D \\<in> clss_of_state St\" and\n    \"subsumes D C\"\n  shows \"sr_ext.derive (grounding_of_state St \\<union> grounding_of_cls C) (grounding_of_state St)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "from assms"], ["proof (chain)\npicking this:\n  D \\<in> N_of_state St \\<union> P_of_state St \\<union> Q_of_state St\n  subsumes D C", "obtain \\<sigma> where\n    \"D \\<cdot> \\<sigma> = C \\<or> D \\<cdot> \\<sigma> \\<subset># C\""], ["proof (prove)\nusing this:\n  D \\<in> N_of_state St \\<union> P_of_state St \\<union> Q_of_state St\n  subsumes D C\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        D \\<cdot> \\<sigma> = C \\<or>\n        D \\<cdot> \\<sigma> \\<subset># C \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: subsumes_def subset_mset_def)"], ["proof (state)\nthis:\n  D \\<cdot> \\<sigma> = C \\<or> D \\<cdot> \\<sigma> \\<subset># C\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "then"], ["proof (chain)\npicking this:\n  D \\<cdot> \\<sigma> = C \\<or> D \\<cdot> \\<sigma> \\<subset># C", "have \"D \\<cdot> \\<sigma> = C \\<or> D \\<cdot> \\<sigma> \\<subset># C\""], ["proof (prove)\nusing this:\n  D \\<cdot> \\<sigma> = C \\<or> D \\<cdot> \\<sigma> \\<subset># C\n\ngoal (1 subgoal):\n 1. D \\<cdot> \\<sigma> = C \\<or> D \\<cdot> \\<sigma> \\<subset># C", "by (simp add: subset_mset_def)"], ["proof (state)\nthis:\n  D \\<cdot> \\<sigma> = C \\<or> D \\<cdot> \\<sigma> \\<subset># C\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "then"], ["proof (chain)\npicking this:\n  D \\<cdot> \\<sigma> = C \\<or> D \\<cdot> \\<sigma> \\<subset># C", "show ?thesis"], ["proof (prove)\nusing this:\n  D \\<cdot> \\<sigma> = C \\<or> D \\<cdot> \\<sigma> \\<subset># C\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. D \\<cdot> \\<sigma> = C \\<Longrightarrow>\n    sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n 2. D \\<cdot> \\<sigma> \\<subset># C \\<Longrightarrow>\n    sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "assume \"D \\<cdot> \\<sigma> = C\""], ["proof (state)\nthis:\n  D \\<cdot> \\<sigma> = C\n\ngoal (2 subgoals):\n 1. D \\<cdot> \\<sigma> = C \\<Longrightarrow>\n    sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n 2. D \\<cdot> \\<sigma> \\<subset># C \\<Longrightarrow>\n    sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "then"], ["proof (chain)\npicking this:\n  D \\<cdot> \\<sigma> = C", "have \"grounding_of_cls C \\<subseteq> grounding_of_cls D\""], ["proof (prove)\nusing this:\n  D \\<cdot> \\<sigma> = C\n\ngoal (1 subgoal):\n 1. grounding_of_cls C \\<subseteq> grounding_of_cls D", "using subst_cls_eq_grounding_of_cls_subset_eq"], ["proof (prove)\nusing this:\n  D \\<cdot> \\<sigma> = C\n  ?D \\<cdot> ?\\<sigma> = ?C \\<Longrightarrow>\n  grounding_of_cls ?C \\<subseteq> grounding_of_cls ?D\n\ngoal (1 subgoal):\n 1. grounding_of_cls C \\<subseteq> grounding_of_cls D", "by (auto dest: sym)"], ["proof (state)\nthis:\n  grounding_of_cls C \\<subseteq> grounding_of_cls D\n\ngoal (2 subgoals):\n 1. D \\<cdot> \\<sigma> = C \\<Longrightarrow>\n    sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n 2. D \\<cdot> \\<sigma> \\<subset># C \\<Longrightarrow>\n    sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "then"], ["proof (chain)\npicking this:\n  grounding_of_cls C \\<subseteq> grounding_of_cls D", "have \"(grounding_of_state St \\<union> grounding_of_cls C) = grounding_of_state St\""], ["proof (prove)\nusing this:\n  grounding_of_cls C \\<subseteq> grounding_of_cls D\n\ngoal (1 subgoal):\n 1. grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) \\<union>\n    grounding_of_cls C =\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)", "using assms"], ["proof (prove)\nusing this:\n  grounding_of_cls C \\<subseteq> grounding_of_cls D\n  D \\<in> N_of_state St \\<union> P_of_state St \\<union> Q_of_state St\n  subsumes D C\n\ngoal (1 subgoal):\n 1. grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) \\<union>\n    grounding_of_cls C =\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)", "unfolding grounding_of_clss_def"], ["proof (prove)\nusing this:\n  grounding_of_cls C \\<subseteq> grounding_of_cls D\n  D \\<in> N_of_state St \\<union> P_of_state St \\<union> Q_of_state St\n  subsumes D C\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (grounding_of_cls `\n      (N_of_state St \\<union> P_of_state St \\<union>\n       Q_of_state St)) \\<union>\n    grounding_of_cls C =\n    \\<Union>\n     (grounding_of_cls `\n      (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "by auto"], ["proof (state)\nthis:\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) \\<union>\n  grounding_of_cls C =\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n\ngoal (2 subgoals):\n 1. D \\<cdot> \\<sigma> = C \\<Longrightarrow>\n    sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n 2. D \\<cdot> \\<sigma> \\<subset># C \\<Longrightarrow>\n    sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "then"], ["proof (chain)\npicking this:\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) \\<union>\n  grounding_of_cls C =\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)", "show ?thesis"], ["proof (prove)\nusing this:\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) \\<union>\n  grounding_of_cls C =\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "by (auto intro: sr_ext.derive.intros)"], ["proof (state)\nthis:\n  sr_ext.derive\n   (grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) \\<union>\n    grounding_of_cls C)\n   (grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n\ngoal (1 subgoal):\n 1. D \\<cdot> \\<sigma> \\<subset># C \\<Longrightarrow>\n    sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. D \\<cdot> \\<sigma> \\<subset># C \\<Longrightarrow>\n    sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "assume a: \"D \\<cdot> \\<sigma> \\<subset># C\""], ["proof (state)\nthis:\n  D \\<cdot> \\<sigma> \\<subset># C\n\ngoal (1 subgoal):\n 1. D \\<cdot> \\<sigma> \\<subset># C \\<Longrightarrow>\n    sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "then"], ["proof (chain)\npicking this:\n  D \\<cdot> \\<sigma> \\<subset># C", "have \"grounding_of_cls C \\<subseteq> sr.Rf (grounding_of_state St)\""], ["proof (prove)\nusing this:\n  D \\<cdot> \\<sigma> \\<subset># C\n\ngoal (1 subgoal):\n 1. grounding_of_cls C\n    \\<subseteq> sr.Rf\n                 (grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))", "using strict_subset_subsumption_grounding_redundant_clss assms"], ["proof (prove)\nusing this:\n  D \\<cdot> \\<sigma> \\<subset># C\n  \\<lbrakk>?D \\<cdot> ?\\<sigma> \\<subset># ?C; ?D \\<in> ?CC\\<rbrakk>\n  \\<Longrightarrow> grounding_of_cls ?C\n                    \\<subseteq> sr.Rf (grounding_of_clss ?CC)\n  D \\<in> N_of_state St \\<union> P_of_state St \\<union> Q_of_state St\n  subsumes D C\n\ngoal (1 subgoal):\n 1. grounding_of_cls C\n    \\<subseteq> sr.Rf\n                 (grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))", "by auto"], ["proof (state)\nthis:\n  grounding_of_cls C\n  \\<subseteq> sr.Rf\n               (grounding_of_clss\n                 (N_of_state St \\<union> P_of_state St \\<union>\n                  Q_of_state St))\n\ngoal (1 subgoal):\n 1. D \\<cdot> \\<sigma> \\<subset># C \\<Longrightarrow>\n    sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "then"], ["proof (chain)\npicking this:\n  grounding_of_cls C\n  \\<subseteq> sr.Rf\n               (grounding_of_clss\n                 (N_of_state St \\<union> P_of_state St \\<union>\n                  Q_of_state St))", "show ?thesis"], ["proof (prove)\nusing this:\n  grounding_of_cls C\n  \\<subseteq> sr.Rf\n               (grounding_of_clss\n                 (N_of_state St \\<union> P_of_state St \\<union>\n                  Q_of_state St))\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union>\n        Q_of_state St) \\<union>\n      grounding_of_cls C)\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "unfolding grounding_of_clss_def"], ["proof (prove)\nusing this:\n  grounding_of_cls C\n  \\<subseteq> sr.Rf\n               (\\<Union>\n                 (grounding_of_cls `\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St)))\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (\\<Union>\n       (grounding_of_cls `\n        (N_of_state St \\<union> P_of_state St \\<union>\n         Q_of_state St)) \\<union>\n      grounding_of_cls C)\n     (\\<Union>\n       (grounding_of_cls `\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)))", "by (force intro: sr_ext.derive.intros)"], ["proof (state)\nthis:\n  sr_ext.derive\n   (grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) \\<union>\n    grounding_of_cls C)\n   (grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sr_ext.derive\n   (grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) \\<union>\n    grounding_of_cls C)\n   (grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduction_in_concls_of:\n  assumes\n    \"C\\<mu> \\<in> grounding_of_cls C\" and\n    \"D + {#L'#} \\<in> CC\" and\n    \"- L = L' \\<cdot>l \\<sigma>\" and\n    \"D \\<cdot> \\<sigma> \\<subseteq># C\"\n  shows \"C\\<mu> \\<in> concls_of (sr_ext.inferences_from (grounding_of_clss (CC \\<union> {C + {#L#}})))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "from assms"], ["proof (chain)\npicking this:\n  C\\<mu> \\<in> grounding_of_cls C\n  D + {#L'#} \\<in> CC\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C", "obtain \\<mu> where\n    \\<mu>_p: \"C\\<mu> = C \\<cdot> \\<mu> \\<and> is_ground_subst \\<mu>\""], ["proof (prove)\nusing this:\n  C\\<mu> \\<in> grounding_of_cls C\n  D + {#L'#} \\<in> CC\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n\ngoal (1 subgoal):\n 1. (\\<And>\\<mu>.\n        C\\<mu> = C \\<cdot> \\<mu> \\<and>\n        is_ground_subst \\<mu> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding grounding_of_cls_def"], ["proof (prove)\nusing this:\n  C\\<mu> \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\n  D + {#L'#} \\<in> CC\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n\ngoal (1 subgoal):\n 1. (\\<And>\\<mu>.\n        C\\<mu> = C \\<cdot> \\<mu> \\<and>\n        is_ground_subst \\<mu> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  C\\<mu> = C \\<cdot> \\<mu> \\<and> is_ground_subst \\<mu>\n\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "define \\<gamma> where\n    \"\\<gamma> = Infer {#(C + {#L#}) \\<cdot> \\<mu>#} ((D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>) (C \\<cdot> \\<mu>)\""], ["proof (state)\nthis:\n  \\<gamma> =\n  Infer {#(C + {#L#}) \\<cdot> \\<mu>#}\n   ((D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>) (C \\<cdot> \\<mu>)\n\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "have \"(D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>\n    \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})", "unfolding grounding_of_clss_def grounding_of_cls_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>\n    \\<in> (\\<Union>C\\<in>CC \\<union> {C + {#L#}}.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})", "by (rule UN_I[of \"D + {#L'#}\"], use assms(2) in simp,\n        metis (mono_tags, lifting) \\<mu>_p is_ground_comp_subst mem_Collect_eq subst_cls_comp_subst)"], ["proof (state)\nthis:\n  (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>\n  \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})\n\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "moreover"], ["proof (state)\nthis:\n  (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>\n  \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})\n\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "have \"(C + {#L#}) \\<cdot> \\<mu> \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C + {#L#}) \\<cdot> \\<mu>\n    \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})", "using \\<mu>_p"], ["proof (prove)\nusing this:\n  C\\<mu> = C \\<cdot> \\<mu> \\<and> is_ground_subst \\<mu>\n\ngoal (1 subgoal):\n 1. (C + {#L#}) \\<cdot> \\<mu>\n    \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})", "unfolding  grounding_of_clss_def grounding_of_cls_def"], ["proof (prove)\nusing this:\n  C\\<mu> = C \\<cdot> \\<mu> \\<and> is_ground_subst \\<mu>\n\ngoal (1 subgoal):\n 1. (C + {#L#}) \\<cdot> \\<mu>\n    \\<in> (\\<Union>C\\<in>CC \\<union> {C + {#L#}}.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})", "by auto"], ["proof (state)\nthis:\n  (C + {#L#}) \\<cdot> \\<mu>\n  \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})\n\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "moreover"], ["proof (state)\nthis:\n  (C + {#L#}) \\<cdot> \\<mu>\n  \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})\n\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "have\n    \"\\<forall>I. I \\<Turnstile> D \\<cdot> \\<sigma> \\<cdot> \\<mu> + {#- (L  \\<cdot>l \\<mu>)#} \\<longrightarrow> I \\<Turnstile> C  \\<cdot> \\<mu> + {#L  \\<cdot>l \\<mu>#} \\<longrightarrow> I \\<Turnstile> D \\<cdot> \\<sigma> \\<cdot> \\<mu> + C \\<cdot> \\<mu>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I.\n       I \\<Turnstile>\n       D \\<cdot> \\<sigma> \\<cdot> \\<mu> +\n       {#- (L \\<cdot>l \\<mu>)#} \\<longrightarrow>\n       I \\<Turnstile>\n       C \\<cdot> \\<mu> + {#L \\<cdot>l \\<mu>#} \\<longrightarrow>\n       I \\<Turnstile> D \\<cdot> \\<sigma> \\<cdot> \\<mu> + C \\<cdot> \\<mu>", "by auto"], ["proof (state)\nthis:\n  \\<forall>I.\n     I \\<Turnstile>\n     D \\<cdot> \\<sigma> \\<cdot> \\<mu> +\n     {#- (L \\<cdot>l \\<mu>)#} \\<longrightarrow>\n     I \\<Turnstile> C \\<cdot> \\<mu> + {#L \\<cdot>l \\<mu>#} \\<longrightarrow>\n     I \\<Turnstile> D \\<cdot> \\<sigma> \\<cdot> \\<mu> + C \\<cdot> \\<mu>\n\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "then"], ["proof (chain)\npicking this:\n  \\<forall>I.\n     I \\<Turnstile>\n     D \\<cdot> \\<sigma> \\<cdot> \\<mu> +\n     {#- (L \\<cdot>l \\<mu>)#} \\<longrightarrow>\n     I \\<Turnstile> C \\<cdot> \\<mu> + {#L \\<cdot>l \\<mu>#} \\<longrightarrow>\n     I \\<Turnstile> D \\<cdot> \\<sigma> \\<cdot> \\<mu> + C \\<cdot> \\<mu>", "have \"\\<forall>I. I \\<Turnstile> (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow> I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow> I \\<Turnstile> D \\<cdot> \\<sigma> \\<cdot> \\<mu> + C \\<cdot> \\<mu>\""], ["proof (prove)\nusing this:\n  \\<forall>I.\n     I \\<Turnstile>\n     D \\<cdot> \\<sigma> \\<cdot> \\<mu> +\n     {#- (L \\<cdot>l \\<mu>)#} \\<longrightarrow>\n     I \\<Turnstile> C \\<cdot> \\<mu> + {#L \\<cdot>l \\<mu>#} \\<longrightarrow>\n     I \\<Turnstile> D \\<cdot> \\<sigma> \\<cdot> \\<mu> + C \\<cdot> \\<mu>\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       I \\<Turnstile>\n       (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n       I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n       I \\<Turnstile> D \\<cdot> \\<sigma> \\<cdot> \\<mu> + C \\<cdot> \\<mu>", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>I.\n     I \\<Turnstile>\n     D \\<cdot> \\<sigma> \\<cdot> \\<mu> +\n     {#- (L \\<cdot>l \\<mu>)#} \\<longrightarrow>\n     I \\<Turnstile> C \\<cdot> \\<mu> + {#L \\<cdot>l \\<mu>#} \\<longrightarrow>\n     I \\<Turnstile> D \\<cdot> \\<sigma> \\<cdot> \\<mu> + C \\<cdot> \\<mu>\n  C\\<mu> \\<in> grounding_of_cls C\n  D + {#L'#} \\<in> CC\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       I \\<Turnstile>\n       (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n       I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n       I \\<Turnstile> D \\<cdot> \\<sigma> \\<cdot> \\<mu> + C \\<cdot> \\<mu>", "by (metis add_mset_add_single subst_cls_add_mset subst_cls_union subst_minus)"], ["proof (state)\nthis:\n  \\<forall>I.\n     I \\<Turnstile>\n     (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> D \\<cdot> \\<sigma> \\<cdot> \\<mu> + C \\<cdot> \\<mu>\n\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "then"], ["proof (chain)\npicking this:\n  \\<forall>I.\n     I \\<Turnstile>\n     (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> D \\<cdot> \\<sigma> \\<cdot> \\<mu> + C \\<cdot> \\<mu>", "have \"\\<forall>I. I \\<Turnstile> (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow> I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow> I \\<Turnstile> C \\<cdot> \\<mu>\""], ["proof (prove)\nusing this:\n  \\<forall>I.\n     I \\<Turnstile>\n     (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> D \\<cdot> \\<sigma> \\<cdot> \\<mu> + C \\<cdot> \\<mu>\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       I \\<Turnstile>\n       (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n       I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n       I \\<Turnstile> C \\<cdot> \\<mu>", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>I.\n     I \\<Turnstile>\n     (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> D \\<cdot> \\<sigma> \\<cdot> \\<mu> + C \\<cdot> \\<mu>\n  C\\<mu> \\<in> grounding_of_cls C\n  D + {#L'#} \\<in> CC\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       I \\<Turnstile>\n       (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n       I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n       I \\<Turnstile> C \\<cdot> \\<mu>", "by (metis (no_types, lifting) subset_mset.le_iff_add subst_cls_union true_cls_union)"], ["proof (state)\nthis:\n  \\<forall>I.\n     I \\<Turnstile>\n     (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> C \\<cdot> \\<mu>\n\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "then"], ["proof (chain)\npicking this:\n  \\<forall>I.\n     I \\<Turnstile>\n     (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> C \\<cdot> \\<mu>", "have \"\\<forall>I. I \\<Turnstile>m {#(D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>#} \\<longrightarrow> I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow> I \\<Turnstile> C \\<cdot> \\<mu>\""], ["proof (prove)\nusing this:\n  \\<forall>I.\n     I \\<Turnstile>\n     (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> C \\<cdot> \\<mu>\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       I \\<Turnstile>m\n       {#(D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>#} \\<longrightarrow>\n       I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n       I \\<Turnstile> C \\<cdot> \\<mu>", "by (meson true_cls_mset_singleton)"], ["proof (state)\nthis:\n  \\<forall>I.\n     I \\<Turnstile>m\n     {#(D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>#} \\<longrightarrow>\n     I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> C \\<cdot> \\<mu>\n\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "ultimately"], ["proof (chain)\npicking this:\n  (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>\n  \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})\n  (C + {#L#}) \\<cdot> \\<mu>\n  \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})\n  \\<forall>I.\n     I \\<Turnstile>m\n     {#(D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>#} \\<longrightarrow>\n     I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> C \\<cdot> \\<mu>", "have \"\\<gamma> \\<in> sr_ext.inferences_from (grounding_of_clss (CC \\<union> {C + {#L#}}))\""], ["proof (prove)\nusing this:\n  (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>\n  \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})\n  (C + {#L#}) \\<cdot> \\<mu>\n  \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})\n  \\<forall>I.\n     I \\<Turnstile>m\n     {#(D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>#} \\<longrightarrow>\n     I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> C \\<cdot> \\<mu>\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<in> sr_ext.inferences_from\n           (grounding_of_clss (CC \\<union> {C + {#L#}}))", "unfolding sr_ext.inferences_from_def"], ["proof (prove)\nusing this:\n  (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>\n  \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})\n  (C + {#L#}) \\<cdot> \\<mu>\n  \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})\n  \\<forall>I.\n     I \\<Turnstile>m\n     {#(D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>#} \\<longrightarrow>\n     I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> C \\<cdot> \\<mu>\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<in> {\\<gamma> \\<in> ground_sound_\\<Gamma>.\n           infer_from (grounding_of_clss (CC \\<union> {C + {#L#}}))\n            \\<gamma>}", "unfolding ground_sound_\\<Gamma>_def infer_from_def \\<gamma>_def"], ["proof (prove)\nusing this:\n  (D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>\n  \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})\n  (C + {#L#}) \\<cdot> \\<mu>\n  \\<in> grounding_of_clss (CC \\<union> {C + {#L#}})\n  \\<forall>I.\n     I \\<Turnstile>m\n     {#(D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>#} \\<longrightarrow>\n     I \\<Turnstile> (C + {#L#}) \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> C \\<cdot> \\<mu>\n\ngoal (1 subgoal):\n 1. Infer {#(C + {#L#}) \\<cdot> \\<mu>#}\n     ((D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>) (C \\<cdot> \\<mu>)\n    \\<in> {\\<gamma>\n           \\<in> {Infer CC D E |CC D E.\n                  \\<forall>I.\n                     I \\<Turnstile>m CC \\<longrightarrow>\n                     I \\<Turnstile> D \\<longrightarrow> I \\<Turnstile> E}.\n           set_mset (prems_of \\<gamma>)\n           \\<subseteq> grounding_of_clss (CC \\<union> {C + {#L#}})}", "by auto"], ["proof (state)\nthis:\n  \\<gamma>\n  \\<in> sr_ext.inferences_from (grounding_of_clss (CC \\<union> {C + {#L#}}))\n\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "then"], ["proof (chain)\npicking this:\n  \\<gamma>\n  \\<in> sr_ext.inferences_from (grounding_of_clss (CC \\<union> {C + {#L#}}))", "have \"C \\<cdot> \\<mu> \\<in> concls_of (sr_ext.inferences_from (grounding_of_clss (CC \\<union> {C + {#L#}})))\""], ["proof (prove)\nusing this:\n  \\<gamma>\n  \\<in> sr_ext.inferences_from (grounding_of_clss (CC \\<union> {C + {#L#}}))\n\ngoal (1 subgoal):\n 1. C \\<cdot> \\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "using image_iff"], ["proof (prove)\nusing this:\n  \\<gamma>\n  \\<in> sr_ext.inferences_from (grounding_of_clss (CC \\<union> {C + {#L#}}))\n  (?z \\<in> ?f ` ?A) = (\\<exists>x\\<in>?A. ?z = ?f x)\n\ngoal (1 subgoal):\n 1. C \\<cdot> \\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "unfolding \\<gamma>_def"], ["proof (prove)\nusing this:\n  Infer {#(C + {#L#}) \\<cdot> \\<mu>#}\n   ((D + {#L'#}) \\<cdot> \\<sigma> \\<cdot> \\<mu>) (C \\<cdot> \\<mu>)\n  \\<in> sr_ext.inferences_from (grounding_of_clss (CC \\<union> {C + {#L#}}))\n  (?z \\<in> ?f ` ?A) = (\\<exists>x\\<in>?A. ?z = ?f x)\n\ngoal (1 subgoal):\n 1. C \\<cdot> \\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "by fastforce"], ["proof (state)\nthis:\n  C \\<cdot> \\<mu>\n  \\<in> concls_of\n         (sr_ext.inferences_from\n           (grounding_of_clss (CC \\<union> {C + {#L#}})))\n\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "then"], ["proof (chain)\npicking this:\n  C \\<cdot> \\<mu>\n  \\<in> concls_of\n         (sr_ext.inferences_from\n           (grounding_of_clss (CC \\<union> {C + {#L#}})))", "show \"C\\<mu> \\<in> concls_of (sr_ext.inferences_from (grounding_of_clss (CC \\<union> {C + {#L#}})))\""], ["proof (prove)\nusing this:\n  C \\<cdot> \\<mu>\n  \\<in> concls_of\n         (sr_ext.inferences_from\n           (grounding_of_clss (CC \\<union> {C + {#L#}})))\n\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "using \\<mu>_p"], ["proof (prove)\nusing this:\n  C \\<cdot> \\<mu>\n  \\<in> concls_of\n         (sr_ext.inferences_from\n           (grounding_of_clss (CC \\<union> {C + {#L#}})))\n  C\\<mu> = C \\<cdot> \\<mu> \\<and> is_ground_subst \\<mu>\n\ngoal (1 subgoal):\n 1. C\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss (CC \\<union> {C + {#L#}})))", "by auto"], ["proof (state)\nthis:\n  C\\<mu>\n  \\<in> concls_of\n         (sr_ext.inferences_from\n           (grounding_of_clss (CC \\<union> {C + {#L#}})))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduction_derivable:\n  assumes\n    \"D + {#L'#} \\<in> CC\" and\n    \"- L = L' \\<cdot>l \\<sigma>\" and\n    \"D \\<cdot> \\<sigma> \\<subseteq># C\"\n  shows \"sr_ext.derive (grounding_of_clss (CC \\<union> {C + {#L#}})) (grounding_of_clss (CC \\<union> {C}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sr_ext.derive (grounding_of_clss (CC \\<union> {C + {#L#}}))\n     (grounding_of_clss (CC \\<union> {C}))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sr_ext.derive (grounding_of_clss (CC \\<union> {C + {#L#}}))\n     (grounding_of_clss (CC \\<union> {C}))", "from assms"], ["proof (chain)\npicking this:\n  D + {#L'#} \\<in> CC\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C", "have \"grounding_of_clss (CC \\<union> {C}) - grounding_of_clss (CC \\<union> {C + {#L#}})\n    \\<subseteq> concls_of (sr_ext.inferences_from (grounding_of_clss (CC \\<union> {C + {#L#}})))\""], ["proof (prove)\nusing this:\n  D + {#L'#} \\<in> CC\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n\ngoal (1 subgoal):\n 1. grounding_of_clss (CC \\<union> {C}) -\n    grounding_of_clss (CC \\<union> {C + {#L#}})\n    \\<subseteq> concls_of\n                 (sr_ext.inferences_from\n                   (grounding_of_clss (CC \\<union> {C + {#L#}})))", "using reduction_in_concls_of"], ["proof (prove)\nusing this:\n  D + {#L'#} \\<in> CC\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n  \\<lbrakk>?C\\<mu> \\<in> grounding_of_cls ?C; ?D + {#?L'#} \\<in> ?CC;\n   - ?L = ?L' \\<cdot>l ?\\<sigma>;\n   ?D \\<cdot> ?\\<sigma> \\<subseteq># ?C\\<rbrakk>\n  \\<Longrightarrow> ?C\\<mu>\n                    \\<in> concls_of\n                           (sr_ext.inferences_from\n                             (grounding_of_clss\n                               (?CC \\<union> {?C + {#?L#}})))\n\ngoal (1 subgoal):\n 1. grounding_of_clss (CC \\<union> {C}) -\n    grounding_of_clss (CC \\<union> {C + {#L#}})\n    \\<subseteq> concls_of\n                 (sr_ext.inferences_from\n                   (grounding_of_clss (CC \\<union> {C + {#L#}})))", "unfolding grounding_of_clss_def"], ["proof (prove)\nusing this:\n  D + {#L'#} \\<in> CC\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n  \\<lbrakk>?C\\<mu> \\<in> grounding_of_cls ?C; ?D + {#?L'#} \\<in> ?CC;\n   - ?L = ?L' \\<cdot>l ?\\<sigma>;\n   ?D \\<cdot> ?\\<sigma> \\<subseteq># ?C\\<rbrakk>\n  \\<Longrightarrow> ?C\\<mu>\n                    \\<in> concls_of\n                           (sr_ext.inferences_from\n                             (\\<Union>\n                               (grounding_of_cls `\n                                (?CC \\<union> {?C + {#?L#}}))))\n\ngoal (1 subgoal):\n 1. \\<Union> (grounding_of_cls ` (CC \\<union> {C})) -\n    \\<Union> (grounding_of_cls ` (CC \\<union> {C + {#L#}}))\n    \\<subseteq> concls_of\n                 (sr_ext.inferences_from\n                   (\\<Union>\n                     (grounding_of_cls ` (CC \\<union> {C + {#L#}}))))", "by auto"], ["proof (state)\nthis:\n  grounding_of_clss (CC \\<union> {C}) -\n  grounding_of_clss (CC \\<union> {C + {#L#}})\n  \\<subseteq> concls_of\n               (sr_ext.inferences_from\n                 (grounding_of_clss (CC \\<union> {C + {#L#}})))\n\ngoal (1 subgoal):\n 1. sr_ext.derive (grounding_of_clss (CC \\<union> {C + {#L#}}))\n     (grounding_of_clss (CC \\<union> {C}))", "moreover"], ["proof (state)\nthis:\n  grounding_of_clss (CC \\<union> {C}) -\n  grounding_of_clss (CC \\<union> {C + {#L#}})\n  \\<subseteq> concls_of\n               (sr_ext.inferences_from\n                 (grounding_of_clss (CC \\<union> {C + {#L#}})))\n\ngoal (1 subgoal):\n 1. sr_ext.derive (grounding_of_clss (CC \\<union> {C + {#L#}}))\n     (grounding_of_clss (CC \\<union> {C}))", "have \"grounding_of_cls (C + {#L#}) \\<subseteq> sr.Rf (grounding_of_clss (CC \\<union> {C}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. grounding_of_cls (C + {#L#})\n    \\<subseteq> sr.Rf (grounding_of_clss (CC \\<union> {C}))", "using strict_subset_subsumption_grounding_redundant_clss[of C \"id_subst\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>C \\<cdot> id_subst \\<subset># ?C; C \\<in> ?CC\\<rbrakk>\n  \\<Longrightarrow> grounding_of_cls ?C\n                    \\<subseteq> sr.Rf (grounding_of_clss ?CC)\n\ngoal (1 subgoal):\n 1. grounding_of_cls (C + {#L#})\n    \\<subseteq> sr.Rf (grounding_of_clss (CC \\<union> {C}))", "by auto"], ["proof (state)\nthis:\n  grounding_of_cls (C + {#L#})\n  \\<subseteq> sr.Rf (grounding_of_clss (CC \\<union> {C}))\n\ngoal (1 subgoal):\n 1. sr_ext.derive (grounding_of_clss (CC \\<union> {C + {#L#}}))\n     (grounding_of_clss (CC \\<union> {C}))", "then"], ["proof (chain)\npicking this:\n  grounding_of_cls (C + {#L#})\n  \\<subseteq> sr.Rf (grounding_of_clss (CC \\<union> {C}))", "have \"grounding_of_clss (CC \\<union> {C + {#L#}}) - grounding_of_clss (CC \\<union> {C})\n    \\<subseteq> sr.Rf (grounding_of_clss (CC \\<union> {C}))\""], ["proof (prove)\nusing this:\n  grounding_of_cls (C + {#L#})\n  \\<subseteq> sr.Rf (grounding_of_clss (CC \\<union> {C}))\n\ngoal (1 subgoal):\n 1. grounding_of_clss (CC \\<union> {C + {#L#}}) -\n    grounding_of_clss (CC \\<union> {C})\n    \\<subseteq> sr.Rf (grounding_of_clss (CC \\<union> {C}))", "unfolding grounding_of_clss_def"], ["proof (prove)\nusing this:\n  grounding_of_cls (C + {#L#})\n  \\<subseteq> sr.Rf (\\<Union> (grounding_of_cls ` (CC \\<union> {C})))\n\ngoal (1 subgoal):\n 1. \\<Union> (grounding_of_cls ` (CC \\<union> {C + {#L#}})) -\n    \\<Union> (grounding_of_cls ` (CC \\<union> {C}))\n    \\<subseteq> sr.Rf (\\<Union> (grounding_of_cls ` (CC \\<union> {C})))", "by auto"], ["proof (state)\nthis:\n  grounding_of_clss (CC \\<union> {C + {#L#}}) -\n  grounding_of_clss (CC \\<union> {C})\n  \\<subseteq> sr.Rf (grounding_of_clss (CC \\<union> {C}))\n\ngoal (1 subgoal):\n 1. sr_ext.derive (grounding_of_clss (CC \\<union> {C + {#L#}}))\n     (grounding_of_clss (CC \\<union> {C}))", "ultimately"], ["proof (chain)\npicking this:\n  grounding_of_clss (CC \\<union> {C}) -\n  grounding_of_clss (CC \\<union> {C + {#L#}})\n  \\<subseteq> concls_of\n               (sr_ext.inferences_from\n                 (grounding_of_clss (CC \\<union> {C + {#L#}})))\n  grounding_of_clss (CC \\<union> {C + {#L#}}) -\n  grounding_of_clss (CC \\<union> {C})\n  \\<subseteq> sr.Rf (grounding_of_clss (CC \\<union> {C}))", "show\n    \"sr_ext.derive (grounding_of_clss (CC \\<union> {C + {#L#}})) (grounding_of_clss (CC \\<union> {C}))\""], ["proof (prove)\nusing this:\n  grounding_of_clss (CC \\<union> {C}) -\n  grounding_of_clss (CC \\<union> {C + {#L#}})\n  \\<subseteq> concls_of\n               (sr_ext.inferences_from\n                 (grounding_of_clss (CC \\<union> {C + {#L#}})))\n  grounding_of_clss (CC \\<union> {C + {#L#}}) -\n  grounding_of_clss (CC \\<union> {C})\n  \\<subseteq> sr.Rf (grounding_of_clss (CC \\<union> {C}))\n\ngoal (1 subgoal):\n 1. sr_ext.derive (grounding_of_clss (CC \\<union> {C + {#L#}}))\n     (grounding_of_clss (CC \\<union> {C}))", "using sr_ext.derive.intros[of \"grounding_of_clss (CC \\<union> {C})\"\n        \"grounding_of_clss (CC \\<union> {C + {#L#}})\"]"], ["proof (prove)\nusing this:\n  grounding_of_clss (CC \\<union> {C}) -\n  grounding_of_clss (CC \\<union> {C + {#L#}})\n  \\<subseteq> concls_of\n               (sr_ext.inferences_from\n                 (grounding_of_clss (CC \\<union> {C + {#L#}})))\n  grounding_of_clss (CC \\<union> {C + {#L#}}) -\n  grounding_of_clss (CC \\<union> {C})\n  \\<subseteq> sr.Rf (grounding_of_clss (CC \\<union> {C}))\n  \\<lbrakk>grounding_of_clss (CC \\<union> {C}) -\n           grounding_of_clss (CC \\<union> {C + {#L#}})\n           \\<subseteq> concls_of\n                        (sr_ext.inferences_from\n                          (grounding_of_clss (CC \\<union> {C + {#L#}})));\n   grounding_of_clss (CC \\<union> {C + {#L#}}) -\n   grounding_of_clss (CC \\<union> {C})\n   \\<subseteq> sr.Rf (grounding_of_clss (CC \\<union> {C}))\\<rbrakk>\n  \\<Longrightarrow> sr_ext.derive\n                     (grounding_of_clss (CC \\<union> {C + {#L#}}))\n                     (grounding_of_clss (CC \\<union> {C}))\n\ngoal (1 subgoal):\n 1. sr_ext.derive (grounding_of_clss (CC \\<union> {C + {#L#}}))\n     (grounding_of_clss (CC \\<union> {C}))", "by auto"], ["proof (state)\nthis:\n  sr_ext.derive (grounding_of_clss (CC \\<union> {C + {#L#}}))\n   (grounding_of_clss (CC \\<union> {C}))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nThe following corresponds the part of Lemma 4.10 that states we have a theorem proving process:\n\\<close>"], ["", "lemma RP_ground_derive:\n  \"St \\<leadsto> St' \\<Longrightarrow> sr_ext.derive (grounding_of_state St) (grounding_of_state St')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. St \\<leadsto> St' \\<Longrightarrow>\n    sr_ext.derive\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n     (grounding_of_clss\n       (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St'))", "proof (induction rule: RP.induct)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>Neg A \\<in># C; Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 4. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 5. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 8. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 9. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "case (tautology_deletion A C N P Q)"], ["proof (state)\nthis:\n  Neg A \\<in># C\n  Pos A \\<in># C\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>Neg A \\<in># C; Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 4. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 5. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 8. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 9. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "{"], ["proof (state)\nthis:\n  Neg A \\<in># C\n  Pos A \\<in># C\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>Neg A \\<in># C; Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 4. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 5. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 8. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 9. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "fix C\\<sigma>"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>Neg A \\<in># C; Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 4. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 5. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 8. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 9. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "assume \"C\\<sigma> \\<in> grounding_of_cls C\""], ["proof (state)\nthis:\n  C\\<sigma> \\<in> grounding_of_cls C\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>Neg A \\<in># C; Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 4. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 5. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 8. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 9. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  C\\<sigma> \\<in> grounding_of_cls C", "obtain \\<sigma> where\n      \"C\\<sigma> = C \\<cdot> \\<sigma>\""], ["proof (prove)\nusing this:\n  C\\<sigma> \\<in> grounding_of_cls C\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        C\\<sigma> = C \\<cdot> \\<sigma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding grounding_of_cls_def"], ["proof (prove)\nusing this:\n  C\\<sigma> \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        C\\<sigma> = C \\<cdot> \\<sigma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  C\\<sigma> = C \\<cdot> \\<sigma>\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>Neg A \\<in># C; Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 4. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 5. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 8. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 9. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  C\\<sigma> = C \\<cdot> \\<sigma>", "have \"Neg (A \\<cdot>a \\<sigma>) \\<in># C\\<sigma> \\<and> Pos (A \\<cdot>a \\<sigma>) \\<in># C\\<sigma>\""], ["proof (prove)\nusing this:\n  C\\<sigma> = C \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. Neg (A \\<cdot>a \\<sigma>) \\<in># C\\<sigma> \\<and>\n    Pos (A \\<cdot>a \\<sigma>) \\<in># C\\<sigma>", "using tautology_deletion Neg_Melem_subst_atm_subst_cls Pos_Melem_subst_atm_subst_cls"], ["proof (prove)\nusing this:\n  C\\<sigma> = C \\<cdot> \\<sigma>\n  Neg A \\<in># C\n  Pos A \\<in># C\n  Neg ?A \\<in># ?C \\<Longrightarrow>\n  Neg (?A \\<cdot>a ?\\<sigma>) \\<in># ?C \\<cdot> ?\\<sigma>\n  Pos ?A \\<in># ?C \\<Longrightarrow>\n  Pos (?A \\<cdot>a ?\\<sigma>) \\<in># ?C \\<cdot> ?\\<sigma>\n\ngoal (1 subgoal):\n 1. Neg (A \\<cdot>a \\<sigma>) \\<in># C\\<sigma> \\<and>\n    Pos (A \\<cdot>a \\<sigma>) \\<in># C\\<sigma>", "by auto"], ["proof (state)\nthis:\n  Neg (A \\<cdot>a \\<sigma>) \\<in># C\\<sigma> \\<and>\n  Pos (A \\<cdot>a \\<sigma>) \\<in># C\\<sigma>\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>Neg A \\<in># C; Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 4. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 5. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 8. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 9. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  Neg (A \\<cdot>a \\<sigma>) \\<in># C\\<sigma> \\<and>\n  Pos (A \\<cdot>a \\<sigma>) \\<in># C\\<sigma>", "have \"C\\<sigma> \\<in> sr.Rf (grounding_of_state (N, P, Q))\""], ["proof (prove)\nusing this:\n  Neg (A \\<cdot>a \\<sigma>) \\<in># C\\<sigma> \\<and>\n  Pos (A \\<cdot>a \\<sigma>) \\<in># C\\<sigma>\n\ngoal (1 subgoal):\n 1. C\\<sigma>\n    \\<in> sr.Rf\n           (grounding_of_clss\n             (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n              Q_of_state (N, P, Q)))", "using sr.tautology_Rf"], ["proof (prove)\nusing this:\n  Neg (A \\<cdot>a \\<sigma>) \\<in># C\\<sigma> \\<and>\n  Pos (A \\<cdot>a \\<sigma>) \\<in># C\\<sigma>\n  \\<lbrakk>Pos ?A \\<in># ?C; Neg ?A \\<in># ?C\\<rbrakk>\n  \\<Longrightarrow> ?C \\<in> sr.Rf ?N\n\ngoal (1 subgoal):\n 1. C\\<sigma>\n    \\<in> sr.Rf\n           (grounding_of_clss\n             (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n              Q_of_state (N, P, Q)))", "by auto"], ["proof (state)\nthis:\n  C\\<sigma>\n  \\<in> sr.Rf\n         (grounding_of_clss\n           (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n            Q_of_state (N, P, Q)))\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>Neg A \\<in># C; Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 4. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 5. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 8. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 9. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "}"], ["proof (state)\nthis:\n  ?C\\<sigma>2 \\<in> grounding_of_cls C \\<Longrightarrow>\n  ?C\\<sigma>2\n  \\<in> sr.Rf\n         (grounding_of_clss\n           (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n            Q_of_state (N, P, Q)))\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>Neg A \\<in># C; Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 4. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 5. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 8. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 9. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  ?C\\<sigma>2 \\<in> grounding_of_cls C \\<Longrightarrow>\n  ?C\\<sigma>2\n  \\<in> sr.Rf\n         (grounding_of_clss\n           (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n            Q_of_state (N, P, Q)))", "have \"grounding_of_state (N \\<union> {C}, P, Q) - grounding_of_state (N, P, Q)\n    \\<subseteq> sr.Rf (grounding_of_state (N, P, Q))\""], ["proof (prove)\nusing this:\n  ?C\\<sigma>2 \\<in> grounding_of_cls C \\<Longrightarrow>\n  ?C\\<sigma>2\n  \\<in> sr.Rf\n         (grounding_of_clss\n           (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n            Q_of_state (N, P, Q)))\n\ngoal (1 subgoal):\n 1. grounding_of_clss\n     (N_of_state (N \\<union> {C}, P, Q) \\<union>\n      P_of_state (N \\<union> {C}, P, Q) \\<union>\n      Q_of_state (N \\<union> {C}, P, Q)) -\n    grounding_of_clss\n     (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n      Q_of_state (N, P, Q))\n    \\<subseteq> sr.Rf\n                 (grounding_of_clss\n                   (N_of_state (N, P, Q) \\<union>\n                    P_of_state (N, P, Q) \\<union>\n                    Q_of_state (N, P, Q)))", "unfolding grounding_of_clss_def"], ["proof (prove)\nusing this:\n  ?C\\<sigma>2 \\<in> grounding_of_cls C \\<Longrightarrow>\n  ?C\\<sigma>2\n  \\<in> sr.Rf\n         (\\<Union>\n           (grounding_of_cls `\n            (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n             Q_of_state (N, P, Q))))\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (grounding_of_cls `\n      (N_of_state (N \\<union> {C}, P, Q) \\<union>\n       P_of_state (N \\<union> {C}, P, Q) \\<union>\n       Q_of_state (N \\<union> {C}, P, Q))) -\n    \\<Union>\n     (grounding_of_cls `\n      (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n       Q_of_state (N, P, Q)))\n    \\<subseteq> sr.Rf\n                 (\\<Union>\n                   (grounding_of_cls `\n                    (N_of_state (N, P, Q) \\<union>\n                     P_of_state (N, P, Q) \\<union>\n                     Q_of_state (N, P, Q))))", "by auto"], ["proof (state)\nthis:\n  grounding_of_clss\n   (N_of_state (N \\<union> {C}, P, Q) \\<union>\n    P_of_state (N \\<union> {C}, P, Q) \\<union>\n    Q_of_state (N \\<union> {C}, P, Q)) -\n  grounding_of_clss\n   (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n    Q_of_state (N, P, Q))\n  \\<subseteq> sr.Rf\n               (grounding_of_clss\n                 (N_of_state (N, P, Q) \\<union>\n                  P_of_state (N, P, Q) \\<union>\n                  Q_of_state (N, P, Q)))\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>Neg A \\<in># C; Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 4. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 5. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 8. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 9. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "moreover"], ["proof (state)\nthis:\n  grounding_of_clss\n   (N_of_state (N \\<union> {C}, P, Q) \\<union>\n    P_of_state (N \\<union> {C}, P, Q) \\<union>\n    Q_of_state (N \\<union> {C}, P, Q)) -\n  grounding_of_clss\n   (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n    Q_of_state (N, P, Q))\n  \\<subseteq> sr.Rf\n               (grounding_of_clss\n                 (N_of_state (N, P, Q) \\<union>\n                  P_of_state (N, P, Q) \\<union>\n                  Q_of_state (N, P, Q)))\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>Neg A \\<in># C; Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 4. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 5. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 8. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 9. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "have \"grounding_of_state (N, P, Q) - grounding_of_state (N \\<union> {C}, P, Q) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. grounding_of_clss\n     (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n      Q_of_state (N, P, Q)) -\n    grounding_of_clss\n     (N_of_state (N \\<union> {C}, P, Q) \\<union>\n      P_of_state (N \\<union> {C}, P, Q) \\<union>\n      Q_of_state (N \\<union> {C}, P, Q)) =\n    {}", "unfolding grounding_of_clss_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (grounding_of_cls `\n      (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n       Q_of_state (N, P, Q))) -\n    \\<Union>\n     (grounding_of_cls `\n      (N_of_state (N \\<union> {C}, P, Q) \\<union>\n       P_of_state (N \\<union> {C}, P, Q) \\<union>\n       Q_of_state (N \\<union> {C}, P, Q))) =\n    {}", "by auto"], ["proof (state)\nthis:\n  grounding_of_clss\n   (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n    Q_of_state (N, P, Q)) -\n  grounding_of_clss\n   (N_of_state (N \\<union> {C}, P, Q) \\<union>\n    P_of_state (N \\<union> {C}, P, Q) \\<union>\n    Q_of_state (N \\<union> {C}, P, Q)) =\n  {}\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>Neg A \\<in># C; Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 4. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 5. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 8. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 9. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "ultimately"], ["proof (chain)\npicking this:\n  grounding_of_clss\n   (N_of_state (N \\<union> {C}, P, Q) \\<union>\n    P_of_state (N \\<union> {C}, P, Q) \\<union>\n    Q_of_state (N \\<union> {C}, P, Q)) -\n  grounding_of_clss\n   (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n    Q_of_state (N, P, Q))\n  \\<subseteq> sr.Rf\n               (grounding_of_clss\n                 (N_of_state (N, P, Q) \\<union>\n                  P_of_state (N, P, Q) \\<union>\n                  Q_of_state (N, P, Q)))\n  grounding_of_clss\n   (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n    Q_of_state (N, P, Q)) -\n  grounding_of_clss\n   (N_of_state (N \\<union> {C}, P, Q) \\<union>\n    P_of_state (N \\<union> {C}, P, Q) \\<union>\n    Q_of_state (N \\<union> {C}, P, Q)) =\n  {}", "show ?case"], ["proof (prove)\nusing this:\n  grounding_of_clss\n   (N_of_state (N \\<union> {C}, P, Q) \\<union>\n    P_of_state (N \\<union> {C}, P, Q) \\<union>\n    Q_of_state (N \\<union> {C}, P, Q)) -\n  grounding_of_clss\n   (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n    Q_of_state (N, P, Q))\n  \\<subseteq> sr.Rf\n               (grounding_of_clss\n                 (N_of_state (N, P, Q) \\<union>\n                  P_of_state (N, P, Q) \\<union>\n                  Q_of_state (N, P, Q)))\n  grounding_of_clss\n   (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n    Q_of_state (N, P, Q)) -\n  grounding_of_clss\n   (N_of_state (N \\<union> {C}, P, Q) \\<union>\n    P_of_state (N \\<union> {C}, P, Q) \\<union>\n    Q_of_state (N \\<union> {C}, P, Q)) =\n  {}\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N \\<union> {C}, P, Q) \\<union>\n        P_of_state (N \\<union> {C}, P, Q) \\<union>\n        Q_of_state (N \\<union> {C}, P, Q)))\n     (grounding_of_clss\n       (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n        Q_of_state (N, P, Q)))", "using sr_ext.derive.intros[of \"grounding_of_state (N, P, Q)\"\n      \"grounding_of_state (N \\<union> {C}, P, Q)\"]"], ["proof (prove)\nusing this:\n  grounding_of_clss\n   (N_of_state (N \\<union> {C}, P, Q) \\<union>\n    P_of_state (N \\<union> {C}, P, Q) \\<union>\n    Q_of_state (N \\<union> {C}, P, Q)) -\n  grounding_of_clss\n   (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n    Q_of_state (N, P, Q))\n  \\<subseteq> sr.Rf\n               (grounding_of_clss\n                 (N_of_state (N, P, Q) \\<union>\n                  P_of_state (N, P, Q) \\<union>\n                  Q_of_state (N, P, Q)))\n  grounding_of_clss\n   (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n    Q_of_state (N, P, Q)) -\n  grounding_of_clss\n   (N_of_state (N \\<union> {C}, P, Q) \\<union>\n    P_of_state (N \\<union> {C}, P, Q) \\<union>\n    Q_of_state (N \\<union> {C}, P, Q)) =\n  {}\n  \\<lbrakk>grounding_of_clss\n            (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n             Q_of_state (N, P, Q)) -\n           grounding_of_clss\n            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n             P_of_state (N \\<union> {C}, P, Q) \\<union>\n             Q_of_state (N \\<union> {C}, P, Q))\n           \\<subseteq> concls_of\n                        (sr_ext.inferences_from\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q))));\n   grounding_of_clss\n    (N_of_state (N \\<union> {C}, P, Q) \\<union>\n     P_of_state (N \\<union> {C}, P, Q) \\<union>\n     Q_of_state (N \\<union> {C}, P, Q)) -\n   grounding_of_clss\n    (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n     Q_of_state (N, P, Q))\n   \\<subseteq> sr.Rf\n                (grounding_of_clss\n                  (N_of_state (N, P, Q) \\<union>\n                   P_of_state (N, P, Q) \\<union>\n                   Q_of_state (N, P, Q)))\\<rbrakk>\n  \\<Longrightarrow> sr_ext.derive\n                     (grounding_of_clss\n                       (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                        P_of_state (N \\<union> {C}, P, Q) \\<union>\n                        Q_of_state (N \\<union> {C}, P, Q)))\n                     (grounding_of_clss\n                       (N_of_state (N, P, Q) \\<union>\n                        P_of_state (N, P, Q) \\<union>\n                        Q_of_state (N, P, Q)))\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N \\<union> {C}, P, Q) \\<union>\n        P_of_state (N \\<union> {C}, P, Q) \\<union>\n        Q_of_state (N \\<union> {C}, P, Q)))\n     (grounding_of_clss\n       (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n        Q_of_state (N, P, Q)))", "by auto"], ["proof (state)\nthis:\n  sr_ext.derive\n   (grounding_of_clss\n     (N_of_state (N \\<union> {C}, P, Q) \\<union>\n      P_of_state (N \\<union> {C}, P, Q) \\<union>\n      Q_of_state (N \\<union> {C}, P, Q)))\n   (grounding_of_clss\n     (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n      Q_of_state (N, P, Q)))\n\ngoal (8 subgoals):\n 1. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 4. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 5. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 8. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 4. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 5. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 8. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "case (forward_subsumption D P Q C N)"], ["proof (state)\nthis:\n  D \\<in> P \\<union> Q\n  subsumes D C\n\ngoal (8 subgoals):\n 1. \\<And>D P Q C N.\n       \\<lbrakk>D \\<in> P \\<union> Q; subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 4. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 5. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 6. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 8. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  D \\<in> P \\<union> Q\n  subsumes D C", "show ?case"], ["proof (prove)\nusing this:\n  D \\<in> P \\<union> Q\n  subsumes D C\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N \\<union> {C}, P, Q) \\<union>\n        P_of_state (N \\<union> {C}, P, Q) \\<union>\n        Q_of_state (N \\<union> {C}, P, Q)))\n     (grounding_of_clss\n       (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n        Q_of_state (N, P, Q)))", "using derive_if_remove_subsumed[of D \"(N, P, Q)\" C]"], ["proof (prove)\nusing this:\n  D \\<in> P \\<union> Q\n  subsumes D C\n  \\<lbrakk>D \\<in> N_of_state (N, P, Q) \\<union>\n                   P_of_state (N, P, Q) \\<union>\n                   Q_of_state (N, P, Q);\n   subsumes D C\\<rbrakk>\n  \\<Longrightarrow> sr_ext.derive\n                     (grounding_of_clss\n                       (N_of_state (N, P, Q) \\<union>\n                        P_of_state (N, P, Q) \\<union>\n                        Q_of_state (N, P, Q)) \\<union>\n                      grounding_of_cls C)\n                     (grounding_of_clss\n                       (N_of_state (N, P, Q) \\<union>\n                        P_of_state (N, P, Q) \\<union>\n                        Q_of_state (N, P, Q)))\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N \\<union> {C}, P, Q) \\<union>\n        P_of_state (N \\<union> {C}, P, Q) \\<union>\n        Q_of_state (N \\<union> {C}, P, Q)))\n     (grounding_of_clss\n       (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n        Q_of_state (N, P, Q)))", "unfolding grounding_of_clss_def"], ["proof (prove)\nusing this:\n  D \\<in> P \\<union> Q\n  subsumes D C\n  \\<lbrakk>D \\<in> N_of_state (N, P, Q) \\<union>\n                   P_of_state (N, P, Q) \\<union>\n                   Q_of_state (N, P, Q);\n   subsumes D C\\<rbrakk>\n  \\<Longrightarrow> sr_ext.derive\n                     (\\<Union>\n                       (grounding_of_cls `\n                        (N_of_state (N, P, Q) \\<union>\n                         P_of_state (N, P, Q) \\<union>\n                         Q_of_state (N, P, Q))) \\<union>\n                      grounding_of_cls C)\n                     (\\<Union>\n                       (grounding_of_cls `\n                        (N_of_state (N, P, Q) \\<union>\n                         P_of_state (N, P, Q) \\<union>\n                         Q_of_state (N, P, Q))))\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (\\<Union>\n       (grounding_of_cls `\n        (N_of_state (N \\<union> {C}, P, Q) \\<union>\n         P_of_state (N \\<union> {C}, P, Q) \\<union>\n         Q_of_state (N \\<union> {C}, P, Q))))\n     (\\<Union>\n       (grounding_of_cls `\n        (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n         Q_of_state (N, P, Q))))", "by (simp add: sup_commute sup_left_commute)"], ["proof (state)\nthis:\n  sr_ext.derive\n   (grounding_of_clss\n     (N_of_state (N \\<union> {C}, P, Q) \\<union>\n      P_of_state (N \\<union> {C}, P, Q) \\<union>\n      Q_of_state (N \\<union> {C}, P, Q)))\n   (grounding_of_clss\n     (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n      Q_of_state (N, P, Q)))\n\ngoal (7 subgoals):\n 1. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 4. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 5. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 6. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 4. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 5. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 6. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "case (backward_subsumption_P D N C P Q)"], ["proof (state)\nthis:\n  D \\<in> N\n  strictly_subsumes D C\n\ngoal (7 subgoals):\n 1. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 3. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 4. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 5. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 6. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 7. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  D \\<in> N\n  strictly_subsumes D C", "show ?case"], ["proof (prove)\nusing this:\n  D \\<in> N\n  strictly_subsumes D C\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N, P \\<union> {C}, Q) \\<union>\n        P_of_state (N, P \\<union> {C}, Q) \\<union>\n        Q_of_state (N, P \\<union> {C}, Q)))\n     (grounding_of_clss\n       (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n        Q_of_state (N, P, Q)))", "using derive_if_remove_subsumed[of D \"(N, P, Q)\" C] strictly_subsumes_def"], ["proof (prove)\nusing this:\n  D \\<in> N\n  strictly_subsumes D C\n  \\<lbrakk>D \\<in> N_of_state (N, P, Q) \\<union>\n                   P_of_state (N, P, Q) \\<union>\n                   Q_of_state (N, P, Q);\n   subsumes D C\\<rbrakk>\n  \\<Longrightarrow> sr_ext.derive\n                     (grounding_of_clss\n                       (N_of_state (N, P, Q) \\<union>\n                        P_of_state (N, P, Q) \\<union>\n                        Q_of_state (N, P, Q)) \\<union>\n                      grounding_of_cls C)\n                     (grounding_of_clss\n                       (N_of_state (N, P, Q) \\<union>\n                        P_of_state (N, P, Q) \\<union>\n                        Q_of_state (N, P, Q)))\n  strictly_subsumes ?C ?D = (subsumes ?C ?D \\<and> \\<not> subsumes ?D ?C)\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N, P \\<union> {C}, Q) \\<union>\n        P_of_state (N, P \\<union> {C}, Q) \\<union>\n        Q_of_state (N, P \\<union> {C}, Q)))\n     (grounding_of_clss\n       (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n        Q_of_state (N, P, Q)))", "unfolding grounding_of_clss_def"], ["proof (prove)\nusing this:\n  D \\<in> N\n  strictly_subsumes D C\n  \\<lbrakk>D \\<in> N_of_state (N, P, Q) \\<union>\n                   P_of_state (N, P, Q) \\<union>\n                   Q_of_state (N, P, Q);\n   subsumes D C\\<rbrakk>\n  \\<Longrightarrow> sr_ext.derive\n                     (\\<Union>\n                       (grounding_of_cls `\n                        (N_of_state (N, P, Q) \\<union>\n                         P_of_state (N, P, Q) \\<union>\n                         Q_of_state (N, P, Q))) \\<union>\n                      grounding_of_cls C)\n                     (\\<Union>\n                       (grounding_of_cls `\n                        (N_of_state (N, P, Q) \\<union>\n                         P_of_state (N, P, Q) \\<union>\n                         Q_of_state (N, P, Q))))\n  strictly_subsumes ?C ?D = (subsumes ?C ?D \\<and> \\<not> subsumes ?D ?C)\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (\\<Union>\n       (grounding_of_cls `\n        (N_of_state (N, P \\<union> {C}, Q) \\<union>\n         P_of_state (N, P \\<union> {C}, Q) \\<union>\n         Q_of_state (N, P \\<union> {C}, Q))))\n     (\\<Union>\n       (grounding_of_cls `\n        (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n         Q_of_state (N, P, Q))))", "by (simp add: sup_commute sup_left_commute)"], ["proof (state)\nthis:\n  sr_ext.derive\n   (grounding_of_clss\n     (N_of_state (N, P \\<union> {C}, Q) \\<union>\n      P_of_state (N, P \\<union> {C}, Q) \\<union>\n      Q_of_state (N, P \\<union> {C}, Q)))\n   (grounding_of_clss\n     (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n      Q_of_state (N, P, Q)))\n\ngoal (6 subgoals):\n 1. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 3. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 4. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 5. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 6. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 3. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 4. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 5. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 6. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "case (backward_subsumption_Q D N C P Q)"], ["proof (state)\nthis:\n  D \\<in> N\n  strictly_subsumes D C\n\ngoal (6 subgoals):\n 1. \\<And>D N C P Q.\n       \\<lbrakk>D \\<in> N; strictly_subsumes D C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                             P_of_state (N, P, Q \\<union> {C}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C})))\n                          (grounding_of_clss\n                            (N_of_state (N, P, Q) \\<union>\n                             P_of_state (N, P, Q) \\<union>\n                             Q_of_state (N, P, Q)))\n 2. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 3. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 4. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 5. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 6. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  D \\<in> N\n  strictly_subsumes D C", "show ?case"], ["proof (prove)\nusing this:\n  D \\<in> N\n  strictly_subsumes D C\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N, P, Q \\<union> {C}) \\<union>\n        P_of_state (N, P, Q \\<union> {C}) \\<union>\n        Q_of_state (N, P, Q \\<union> {C})))\n     (grounding_of_clss\n       (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n        Q_of_state (N, P, Q)))", "using derive_if_remove_subsumed[of D \"(N, P, Q)\" C] strictly_subsumes_def"], ["proof (prove)\nusing this:\n  D \\<in> N\n  strictly_subsumes D C\n  \\<lbrakk>D \\<in> N_of_state (N, P, Q) \\<union>\n                   P_of_state (N, P, Q) \\<union>\n                   Q_of_state (N, P, Q);\n   subsumes D C\\<rbrakk>\n  \\<Longrightarrow> sr_ext.derive\n                     (grounding_of_clss\n                       (N_of_state (N, P, Q) \\<union>\n                        P_of_state (N, P, Q) \\<union>\n                        Q_of_state (N, P, Q)) \\<union>\n                      grounding_of_cls C)\n                     (grounding_of_clss\n                       (N_of_state (N, P, Q) \\<union>\n                        P_of_state (N, P, Q) \\<union>\n                        Q_of_state (N, P, Q)))\n  strictly_subsumes ?C ?D = (subsumes ?C ?D \\<and> \\<not> subsumes ?D ?C)\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N, P, Q \\<union> {C}) \\<union>\n        P_of_state (N, P, Q \\<union> {C}) \\<union>\n        Q_of_state (N, P, Q \\<union> {C})))\n     (grounding_of_clss\n       (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n        Q_of_state (N, P, Q)))", "unfolding grounding_of_clss_def"], ["proof (prove)\nusing this:\n  D \\<in> N\n  strictly_subsumes D C\n  \\<lbrakk>D \\<in> N_of_state (N, P, Q) \\<union>\n                   P_of_state (N, P, Q) \\<union>\n                   Q_of_state (N, P, Q);\n   subsumes D C\\<rbrakk>\n  \\<Longrightarrow> sr_ext.derive\n                     (\\<Union>\n                       (grounding_of_cls `\n                        (N_of_state (N, P, Q) \\<union>\n                         P_of_state (N, P, Q) \\<union>\n                         Q_of_state (N, P, Q))) \\<union>\n                      grounding_of_cls C)\n                     (\\<Union>\n                       (grounding_of_cls `\n                        (N_of_state (N, P, Q) \\<union>\n                         P_of_state (N, P, Q) \\<union>\n                         Q_of_state (N, P, Q))))\n  strictly_subsumes ?C ?D = (subsumes ?C ?D \\<and> \\<not> subsumes ?D ?C)\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (\\<Union>\n       (grounding_of_cls `\n        (N_of_state (N, P, Q \\<union> {C}) \\<union>\n         P_of_state (N, P, Q \\<union> {C}) \\<union>\n         Q_of_state (N, P, Q \\<union> {C}))))\n     (\\<Union>\n       (grounding_of_cls `\n        (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n         Q_of_state (N, P, Q))))", "by (simp add: sup_commute sup_left_commute)"], ["proof (state)\nthis:\n  sr_ext.derive\n   (grounding_of_clss\n     (N_of_state (N, P, Q \\<union> {C}) \\<union>\n      P_of_state (N, P, Q \\<union> {C}) \\<union>\n      Q_of_state (N, P, Q \\<union> {C})))\n   (grounding_of_clss\n     (N_of_state (N, P, Q) \\<union> P_of_state (N, P, Q) \\<union>\n      Q_of_state (N, P, Q)))\n\ngoal (5 subgoals):\n 1. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 2. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 3. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 4. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 5. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 2. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 3. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 4. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 5. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "case (forward_reduction D L' P Q L \\<sigma> C N)"], ["proof (state)\nthis:\n  D + {#L'#} \\<in> P \\<union> Q\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n\ngoal (5 subgoals):\n 1. \\<And>D L' P Q L \\<sigma> C N.\n       \\<lbrakk>D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             P_of_state\n                              (N \\<union> {C + {#L#}}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N \\<union> {C}, P, Q) \\<union>\n                             P_of_state (N \\<union> {C}, P, Q) \\<union>\n                             Q_of_state (N \\<union> {C}, P, Q)))\n 2. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 3. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 4. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 5. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  D + {#L'#} \\<in> P \\<union> Q\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C", "show ?case"], ["proof (prove)\nusing this:\n  D + {#L'#} \\<in> P \\<union> Q\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N \\<union> {C + {#L#}}, P, Q) \\<union>\n        P_of_state (N \\<union> {C + {#L#}}, P, Q) \\<union>\n        Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n     (grounding_of_clss\n       (N_of_state (N \\<union> {C}, P, Q) \\<union>\n        P_of_state (N \\<union> {C}, P, Q) \\<union>\n        Q_of_state (N \\<union> {C}, P, Q)))", "using reduction_derivable[of _ _ \"N \\<union> P \\<union> Q\"]"], ["proof (prove)\nusing this:\n  D + {#L'#} \\<in> P \\<union> Q\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n  \\<lbrakk>?D + {#?L'#} \\<in> N \\<union> P \\<union> Q;\n   - ?L = ?L' \\<cdot>l ?\\<sigma>;\n   ?D \\<cdot> ?\\<sigma> \\<subseteq># ?C\\<rbrakk>\n  \\<Longrightarrow> sr_ext.derive\n                     (grounding_of_clss\n                       (N \\<union> P \\<union> Q \\<union> {?C + {#?L#}}))\n                     (grounding_of_clss\n                       (N \\<union> P \\<union> Q \\<union> {?C}))\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N \\<union> {C + {#L#}}, P, Q) \\<union>\n        P_of_state (N \\<union> {C + {#L#}}, P, Q) \\<union>\n        Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n     (grounding_of_clss\n       (N_of_state (N \\<union> {C}, P, Q) \\<union>\n        P_of_state (N \\<union> {C}, P, Q) \\<union>\n        Q_of_state (N \\<union> {C}, P, Q)))", "by force"], ["proof (state)\nthis:\n  sr_ext.derive\n   (grounding_of_clss\n     (N_of_state (N \\<union> {C + {#L#}}, P, Q) \\<union>\n      P_of_state (N \\<union> {C + {#L#}}, P, Q) \\<union>\n      Q_of_state (N \\<union> {C + {#L#}}, P, Q)))\n   (grounding_of_clss\n     (N_of_state (N \\<union> {C}, P, Q) \\<union>\n      P_of_state (N \\<union> {C}, P, Q) \\<union>\n      Q_of_state (N \\<union> {C}, P, Q)))\n\ngoal (4 subgoals):\n 1. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 2. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 3. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 4. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 2. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 3. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 4. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "case (backward_reduction_P D L' N L \\<sigma> C P Q)"], ["proof (state)\nthis:\n  D + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n\ngoal (4 subgoals):\n 1. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             P_of_state\n                              (N, P \\<union> {C + {#L#}}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 2. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 3. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 4. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  D + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C", "show ?case"], ["proof (prove)\nusing this:\n  D + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N, P \\<union> {C + {#L#}}, Q) \\<union>\n        P_of_state (N, P \\<union> {C + {#L#}}, Q) \\<union>\n        Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n     (grounding_of_clss\n       (N_of_state (N, P \\<union> {C}, Q) \\<union>\n        P_of_state (N, P \\<union> {C}, Q) \\<union>\n        Q_of_state (N, P \\<union> {C}, Q)))", "using reduction_derivable[of _ _ \"N \\<union> P \\<union> Q\"]"], ["proof (prove)\nusing this:\n  D + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n  \\<lbrakk>?D + {#?L'#} \\<in> N \\<union> P \\<union> Q;\n   - ?L = ?L' \\<cdot>l ?\\<sigma>;\n   ?D \\<cdot> ?\\<sigma> \\<subseteq># ?C\\<rbrakk>\n  \\<Longrightarrow> sr_ext.derive\n                     (grounding_of_clss\n                       (N \\<union> P \\<union> Q \\<union> {?C + {#?L#}}))\n                     (grounding_of_clss\n                       (N \\<union> P \\<union> Q \\<union> {?C}))\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N, P \\<union> {C + {#L#}}, Q) \\<union>\n        P_of_state (N, P \\<union> {C + {#L#}}, Q) \\<union>\n        Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n     (grounding_of_clss\n       (N_of_state (N, P \\<union> {C}, Q) \\<union>\n        P_of_state (N, P \\<union> {C}, Q) \\<union>\n        Q_of_state (N, P \\<union> {C}, Q)))", "by force"], ["proof (state)\nthis:\n  sr_ext.derive\n   (grounding_of_clss\n     (N_of_state (N, P \\<union> {C + {#L#}}, Q) \\<union>\n      P_of_state (N, P \\<union> {C + {#L#}}, Q) \\<union>\n      Q_of_state (N, P \\<union> {C + {#L#}}, Q)))\n   (grounding_of_clss\n     (N_of_state (N, P \\<union> {C}, Q) \\<union>\n      P_of_state (N, P \\<union> {C}, Q) \\<union>\n      Q_of_state (N, P \\<union> {C}, Q)))\n\ngoal (3 subgoals):\n 1. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 2. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 3. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 2. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 3. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "case (backward_reduction_Q D L' N L \\<sigma> C P Q)"], ["proof (state)\nthis:\n  D + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n\ngoal (3 subgoals):\n 1. \\<And>D L' N L \\<sigma> C P Q.\n       \\<lbrakk>D + {#L'#} \\<in> N; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> sr_ext.derive\n                          (grounding_of_clss\n                            (N_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             P_of_state\n                              (N, P, Q \\<union> {C + {#L#}}) \\<union>\n                             Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n                          (grounding_of_clss\n                            (N_of_state (N, P \\<union> {C}, Q) \\<union>\n                             P_of_state (N, P \\<union> {C}, Q) \\<union>\n                             Q_of_state (N, P \\<union> {C}, Q)))\n 2. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 3. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  D + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C", "show ?case"], ["proof (prove)\nusing this:\n  D + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N, P, Q \\<union> {C + {#L#}}) \\<union>\n        P_of_state (N, P, Q \\<union> {C + {#L#}}) \\<union>\n        Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n     (grounding_of_clss\n       (N_of_state (N, P \\<union> {C}, Q) \\<union>\n        P_of_state (N, P \\<union> {C}, Q) \\<union>\n        Q_of_state (N, P \\<union> {C}, Q)))", "using reduction_derivable[of _ _ \"N \\<union> P \\<union> Q\"]"], ["proof (prove)\nusing this:\n  D + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  D \\<cdot> \\<sigma> \\<subseteq># C\n  \\<lbrakk>?D + {#?L'#} \\<in> N \\<union> P \\<union> Q;\n   - ?L = ?L' \\<cdot>l ?\\<sigma>;\n   ?D \\<cdot> ?\\<sigma> \\<subseteq># ?C\\<rbrakk>\n  \\<Longrightarrow> sr_ext.derive\n                     (grounding_of_clss\n                       (N \\<union> P \\<union> Q \\<union> {?C + {#?L#}}))\n                     (grounding_of_clss\n                       (N \\<union> P \\<union> Q \\<union> {?C}))\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N, P, Q \\<union> {C + {#L#}}) \\<union>\n        P_of_state (N, P, Q \\<union> {C + {#L#}}) \\<union>\n        Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n     (grounding_of_clss\n       (N_of_state (N, P \\<union> {C}, Q) \\<union>\n        P_of_state (N, P \\<union> {C}, Q) \\<union>\n        Q_of_state (N, P \\<union> {C}, Q)))", "by force"], ["proof (state)\nthis:\n  sr_ext.derive\n   (grounding_of_clss\n     (N_of_state (N, P, Q \\<union> {C + {#L#}}) \\<union>\n      P_of_state (N, P, Q \\<union> {C + {#L#}}) \\<union>\n      Q_of_state (N, P, Q \\<union> {C + {#L#}})))\n   (grounding_of_clss\n     (N_of_state (N, P \\<union> {C}, Q) \\<union>\n      P_of_state (N, P \\<union> {C}, Q) \\<union>\n      Q_of_state (N, P \\<union> {C}, Q)))\n\ngoal (2 subgoals):\n 1. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 2. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 2. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "case (clause_processing N C P Q)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>N C P Q.\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state (N \\<union> {C}, P, Q) \\<union>\n           P_of_state (N \\<union> {C}, P, Q) \\<union>\n           Q_of_state (N \\<union> {C}, P, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P \\<union> {C}, Q) \\<union>\n           P_of_state (N, P \\<union> {C}, Q) \\<union>\n           Q_of_state (N, P \\<union> {C}, Q)))\n 2. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N \\<union> {C}, P, Q) \\<union>\n        P_of_state (N \\<union> {C}, P, Q) \\<union>\n        Q_of_state (N \\<union> {C}, P, Q)))\n     (grounding_of_clss\n       (N_of_state (N, P \\<union> {C}, Q) \\<union>\n        P_of_state (N, P \\<union> {C}, Q) \\<union>\n        Q_of_state (N, P \\<union> {C}, Q)))", "using sr_ext.derive.intros"], ["proof (prove)\nusing this:\n  \\<lbrakk>?N - ?M \\<subseteq> concls_of (sr_ext.inferences_from ?M);\n   ?M - ?N \\<subseteq> sr.Rf ?N\\<rbrakk>\n  \\<Longrightarrow> sr_ext.derive ?M ?N\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state (N \\<union> {C}, P, Q) \\<union>\n        P_of_state (N \\<union> {C}, P, Q) \\<union>\n        Q_of_state (N \\<union> {C}, P, Q)))\n     (grounding_of_clss\n       (N_of_state (N, P \\<union> {C}, Q) \\<union>\n        P_of_state (N, P \\<union> {C}, Q) \\<union>\n        Q_of_state (N, P \\<union> {C}, Q)))", "by auto"], ["proof (state)\nthis:\n  sr_ext.derive\n   (grounding_of_clss\n     (N_of_state (N \\<union> {C}, P, Q) \\<union>\n      P_of_state (N \\<union> {C}, P, Q) \\<union>\n      Q_of_state (N \\<union> {C}, P, Q)))\n   (grounding_of_clss\n     (N_of_state (N, P \\<union> {C}, Q) \\<union>\n      P_of_state (N, P \\<union> {C}, Q) \\<union>\n      Q_of_state (N, P \\<union> {C}, Q)))\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "case (inference_computation N Q C P)"], ["proof (state)\nthis:\n  N = concls_of (ord_FO_resolution.inferences_between Q C)\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "{"], ["proof (state)\nthis:\n  N = concls_of (ord_FO_resolution.inferences_between Q C)\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "fix E\\<mu>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "assume \"E\\<mu> \\<in> grounding_of_clss N\""], ["proof (state)\nthis:\n  E\\<mu> \\<in> grounding_of_clss N\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  E\\<mu> \\<in> grounding_of_clss N", "obtain \\<mu> E where\n      E_\\<mu>_p: \"E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>\""], ["proof (prove)\nusing this:\n  E\\<mu> \\<in> grounding_of_clss N\n\ngoal (1 subgoal):\n 1. (\\<And>E \\<mu>.\n        E\\<mu> = E \\<cdot> \\<mu> \\<and>\n        E \\<in> N \\<and> is_ground_subst \\<mu> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding grounding_of_clss_def grounding_of_cls_def"], ["proof (prove)\nusing this:\n  E\\<mu>\n  \\<in> (\\<Union>C\\<in>N.\n            {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n\ngoal (1 subgoal):\n 1. (\\<And>E \\<mu>.\n        E\\<mu> = E \\<cdot> \\<mu> \\<and>\n        E \\<in> N \\<and> is_ground_subst \\<mu> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>", "have E_concl: \"E \\<in> concls_of (ord_FO_resolution.inferences_between Q C)\""], ["proof (prove)\nusing this:\n  E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>\n\ngoal (1 subgoal):\n 1. E \\<in> concls_of (ord_FO_resolution.inferences_between Q C)", "using inference_computation"], ["proof (prove)\nusing this:\n  E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>\n  N = concls_of (ord_FO_resolution.inferences_between Q C)\n\ngoal (1 subgoal):\n 1. E \\<in> concls_of (ord_FO_resolution.inferences_between Q C)", "by auto"], ["proof (state)\nthis:\n  E \\<in> concls_of (ord_FO_resolution.inferences_between Q C)\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  E \\<in> concls_of (ord_FO_resolution.inferences_between Q C)", "obtain \\<gamma> where\n      \\<gamma>_p: \"\\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and> infer_from (Q \\<union> {C}) \\<gamma> \\<and> C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E\""], ["proof (prove)\nusing this:\n  E \\<in> concls_of (ord_FO_resolution.inferences_between Q C)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<gamma>.\n        \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n        infer_from (Q \\<union> {C}) \\<gamma> \\<and>\n        C \\<in># prems_of \\<gamma> \\<and>\n        concl_of \\<gamma> = E \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding ord_FO_resolution.inferences_between_def"], ["proof (prove)\nusing this:\n  E \\<in> concls_of\n           {\\<gamma> \\<in> ord_FO_\\<Gamma> S.\n            infer_from (Q \\<union> {C}) \\<gamma> \\<and>\n            C \\<in># prems_of \\<gamma>}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<gamma>.\n        \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n        infer_from (Q \\<union> {C}) \\<gamma> \\<and>\n        C \\<in># prems_of \\<gamma> \\<and>\n        concl_of \\<gamma> = E \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n  infer_from (Q \\<union> {C}) \\<gamma> \\<and>\n  C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n  infer_from (Q \\<union> {C}) \\<gamma> \\<and>\n  C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E", "obtain CC CAs D AAs As \\<sigma> where\n      \\<gamma>_p2: \"\\<gamma> = Infer CC D E \\<and> ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC\""], ["proof (prove)\nusing this:\n  \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n  infer_from (Q \\<union> {C}) \\<gamma> \\<and>\n  C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E\n\ngoal (1 subgoal):\n 1. (\\<And>CC D CAs AAs As \\<sigma>.\n        \\<gamma> = Infer CC D E \\<and>\n        ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and>\n        mset CAs = CC \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding ord_FO_\\<Gamma>_def"], ["proof (prove)\nusing this:\n  \\<gamma>\n  \\<in> {uu_.\n         \\<exists>CAs DA AAs As \\<sigma> E.\n            uu_ = Infer (mset CAs) DA E \\<and>\n            ord_resolve_rename S CAs DA AAs As \\<sigma> E} \\<and>\n  infer_from (Q \\<union> {C}) \\<gamma> \\<and>\n  C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E\n\ngoal (1 subgoal):\n 1. (\\<And>CC D CAs AAs As \\<sigma>.\n        \\<gamma> = Infer CC D E \\<and>\n        ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and>\n        mset CAs = CC \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<gamma> = Infer CC D E \\<and>\n  ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "define \\<rho> where\n      \"\\<rho> = hd (renamings_apart (D # CAs))\""], ["proof (state)\nthis:\n  \\<rho> = hd (renamings_apart (D # CAs))\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "define \\<rho>s where\n      \"\\<rho>s = tl (renamings_apart (D # CAs))\""], ["proof (state)\nthis:\n  \\<rho>s = tl (renamings_apart (D # CAs))\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "define \\<gamma>_ground where\n      \"\\<gamma>_ground = Infer (mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm \\<mu>) (D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>) (E \\<cdot> \\<mu>)\""], ["proof (state)\nthis:\n  \\<gamma>_ground =\n  Infer\n   (mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm \\<mu>)\n   (D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>) (E \\<cdot> \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "have \"\\<forall>I. I \\<Turnstile>m mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm \\<mu> \\<longrightarrow> I \\<Turnstile> D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow> I \\<Turnstile> E \\<cdot> \\<mu>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I.\n       I \\<Turnstile>m\n       mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm\n       \\<mu> \\<longrightarrow>\n       I \\<Turnstile>\n       D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n       I \\<Turnstile> E \\<cdot> \\<mu>", "using ord_resolve_rename_ground_inst_sound[of _ _ _ _ _ _ _ _ _ _ \\<mu>] \\<rho>_def \\<rho>s_def E_\\<mu>_p \\<gamma>_p2"], ["proof (prove)\nusing this:\n  \\<lbrakk>ord_resolve_rename ?S ?CAs ?DA ?AAs ?As ?\\<sigma> ?E;\n   ?\\<rho>s = tl (renamings_apart (?DA # ?CAs));\n   ?\\<rho> = hd (renamings_apart (?DA # ?CAs));\n   ?I \\<Turnstile>m\n   mset (?CAs \\<cdot>\\<cdot>cl ?\\<rho>s) \\<cdot>cm ?\\<sigma> \\<cdot>cm\n   \\<mu>;\n   ?I \\<Turnstile> ?DA \\<cdot> ?\\<rho> \\<cdot> ?\\<sigma> \\<cdot> \\<mu>;\n   is_ground_subst \\<mu>\\<rbrakk>\n  \\<Longrightarrow> ?I \\<Turnstile> ?E \\<cdot> \\<mu>\n  \\<rho> = hd (renamings_apart (D # CAs))\n  \\<rho>s = tl (renamings_apart (D # CAs))\n  E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>\n  \\<gamma> = Infer CC D E \\<and>\n  ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       I \\<Turnstile>m\n       mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm\n       \\<mu> \\<longrightarrow>\n       I \\<Turnstile>\n       D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n       I \\<Turnstile> E \\<cdot> \\<mu>", "by auto"], ["proof (state)\nthis:\n  \\<forall>I.\n     I \\<Turnstile>m\n     mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm\n     \\<mu> \\<longrightarrow>\n     I \\<Turnstile>\n     D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> E \\<cdot> \\<mu>\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  \\<forall>I.\n     I \\<Turnstile>m\n     mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm\n     \\<mu> \\<longrightarrow>\n     I \\<Turnstile>\n     D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> E \\<cdot> \\<mu>", "have \"\\<gamma>_ground \\<in> {Infer cc d e | cc d e. \\<forall>I. I \\<Turnstile>m cc \\<longrightarrow> I \\<Turnstile> d \\<longrightarrow> I \\<Turnstile> e}\""], ["proof (prove)\nusing this:\n  \\<forall>I.\n     I \\<Turnstile>m\n     mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm\n     \\<mu> \\<longrightarrow>\n     I \\<Turnstile>\n     D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> E \\<cdot> \\<mu>\n\ngoal (1 subgoal):\n 1. \\<gamma>_ground\n    \\<in> {Infer cc d e |cc d e.\n           \\<forall>I.\n              I \\<Turnstile>m cc \\<longrightarrow>\n              I \\<Turnstile> d \\<longrightarrow> I \\<Turnstile> e}", "unfolding \\<gamma>_ground_def"], ["proof (prove)\nusing this:\n  \\<forall>I.\n     I \\<Turnstile>m\n     mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm\n     \\<mu> \\<longrightarrow>\n     I \\<Turnstile>\n     D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<longrightarrow>\n     I \\<Turnstile> E \\<cdot> \\<mu>\n\ngoal (1 subgoal):\n 1. Infer\n     (mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm\n      \\<mu>)\n     (D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>) (E \\<cdot> \\<mu>)\n    \\<in> {Infer cc d e |cc d e.\n           \\<forall>I.\n              I \\<Turnstile>m cc \\<longrightarrow>\n              I \\<Turnstile> d \\<longrightarrow> I \\<Turnstile> e}", "by auto"], ["proof (state)\nthis:\n  \\<gamma>_ground\n  \\<in> {Infer cc d e |cc d e.\n         \\<forall>I.\n            I \\<Turnstile>m cc \\<longrightarrow>\n            I \\<Turnstile> d \\<longrightarrow> I \\<Turnstile> e}\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "moreover"], ["proof (state)\nthis:\n  \\<gamma>_ground\n  \\<in> {Infer cc d e |cc d e.\n         \\<forall>I.\n            I \\<Turnstile>m cc \\<longrightarrow>\n            I \\<Turnstile> d \\<longrightarrow> I \\<Turnstile> e}\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "have \"set_mset (prems_of \\<gamma>_ground) \\<subseteq> grounding_of_state ({}, P \\<union> {C}, Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (prems_of \\<gamma>_ground)\n    \\<subseteq> grounding_of_clss\n                 (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  Q_of_state ({}, P \\<union> {C}, Q))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set_mset (prems_of \\<gamma>_ground)\n    \\<subseteq> grounding_of_clss\n                 (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  Q_of_state ({}, P \\<union> {C}, Q))", "have \"D = C \\<or> D \\<in> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D = C \\<or> D \\<in> Q", "unfolding \\<gamma>_ground_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. D = C \\<or> D \\<in> Q", "using E_\\<mu>_p \\<gamma>_p2 \\<gamma>_p"], ["proof (prove)\nusing this:\n  E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>\n  \\<gamma> = Infer CC D E \\<and>\n  ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC\n  \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n  infer_from (Q \\<union> {C}) \\<gamma> \\<and>\n  C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E\n\ngoal (1 subgoal):\n 1. D = C \\<or> D \\<in> Q", "unfolding infer_from_def"], ["proof (prove)\nusing this:\n  E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>\n  \\<gamma> = Infer CC D E \\<and>\n  ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC\n  \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n  set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n  C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E\n\ngoal (1 subgoal):\n 1. D = C \\<or> D \\<in> Q", "unfolding grounding_of_clss_def grounding_of_cls_def"], ["proof (prove)\nusing this:\n  E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>\n  \\<gamma> = Infer CC D E \\<and>\n  ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC\n  \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n  set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n  C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E\n\ngoal (1 subgoal):\n 1. D = C \\<or> D \\<in> Q", "by simp"], ["proof (state)\nthis:\n  D = C \\<or> D \\<in> Q\n\ngoal (1 subgoal):\n 1. set_mset (prems_of \\<gamma>_ground)\n    \\<subseteq> grounding_of_clss\n                 (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  Q_of_state ({}, P \\<union> {C}, Q))", "then"], ["proof (chain)\npicking this:\n  D = C \\<or> D \\<in> Q", "have \"D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<in> grounding_of_cls C \\<or> (\\<exists>x \\<in> Q. D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<in> grounding_of_cls x)\""], ["proof (prove)\nusing this:\n  D = C \\<or> D \\<in> Q\n\ngoal (1 subgoal):\n 1. D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n    \\<in> grounding_of_cls C \\<or>\n    (\\<exists>x\\<in>Q.\n        D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n        \\<in> grounding_of_cls x)", "using E_\\<mu>_p"], ["proof (prove)\nusing this:\n  D = C \\<or> D \\<in> Q\n  E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>\n\ngoal (1 subgoal):\n 1. D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n    \\<in> grounding_of_cls C \\<or>\n    (\\<exists>x\\<in>Q.\n        D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n        \\<in> grounding_of_cls x)", "unfolding grounding_of_cls_def"], ["proof (prove)\nusing this:\n  D = C \\<or> D \\<in> Q\n  E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>\n\ngoal (1 subgoal):\n 1. D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n    \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<or>\n    (\\<exists>x\\<in>Q.\n        D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n        \\<in> {x \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})", "by (metis (mono_tags, lifting) is_ground_comp_subst mem_Collect_eq subst_cls_comp_subst)"], ["proof (state)\nthis:\n  D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n  \\<in> grounding_of_cls C \\<or>\n  (\\<exists>x\\<in>Q.\n      D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n      \\<in> grounding_of_cls x)\n\ngoal (1 subgoal):\n 1. set_mset (prems_of \\<gamma>_ground)\n    \\<subseteq> grounding_of_clss\n                 (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  Q_of_state ({}, P \\<union> {C}, Q))", "then"], ["proof (chain)\npicking this:\n  D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n  \\<in> grounding_of_cls C \\<or>\n  (\\<exists>x\\<in>Q.\n      D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n      \\<in> grounding_of_cls x)", "have \"(D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<in> grounding_of_cls C \\<or>\n        (\\<exists>x \\<in> P. D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<in> grounding_of_cls x) \\<or>\n        (\\<exists>x \\<in> Q. D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu> \\<in> grounding_of_cls x))\""], ["proof (prove)\nusing this:\n  D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n  \\<in> grounding_of_cls C \\<or>\n  (\\<exists>x\\<in>Q.\n      D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n      \\<in> grounding_of_cls x)\n\ngoal (1 subgoal):\n 1. D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n    \\<in> grounding_of_cls C \\<or>\n    (\\<exists>x\\<in>P.\n        D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n        \\<in> grounding_of_cls x) \\<or>\n    (\\<exists>x\\<in>Q.\n        D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n        \\<in> grounding_of_cls x)", "by metis"], ["proof (state)\nthis:\n  D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n  \\<in> grounding_of_cls C \\<or>\n  (\\<exists>x\\<in>P.\n      D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n      \\<in> grounding_of_cls x) \\<or>\n  (\\<exists>x\\<in>Q.\n      D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n      \\<in> grounding_of_cls x)\n\ngoal (1 subgoal):\n 1. set_mset (prems_of \\<gamma>_ground)\n    \\<subseteq> grounding_of_clss\n                 (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  Q_of_state ({}, P \\<union> {C}, Q))", "moreover"], ["proof (state)\nthis:\n  D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n  \\<in> grounding_of_cls C \\<or>\n  (\\<exists>x\\<in>P.\n      D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n      \\<in> grounding_of_cls x) \\<or>\n  (\\<exists>x\\<in>Q.\n      D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n      \\<in> grounding_of_cls x)\n\ngoal (1 subgoal):\n 1. set_mset (prems_of \\<gamma>_ground)\n    \\<subseteq> grounding_of_clss\n                 (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  Q_of_state ({}, P \\<union> {C}, Q))", "have \"\\<forall>i < length (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>). (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i \\<in>\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<union>\n        ((\\<Union>C \\<in> P. {C \\<cdot> \\<sigma> | \\<sigma>. is_ground_subst \\<sigma>}) \\<union> (\\<Union>C\\<in>Q. {C \\<cdot> \\<sigma> | \\<sigma>. is_ground_subst \\<sigma>}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length\n                (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl\n                 \\<mu>).\n       (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n       \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n              is_ground_subst \\<sigma>} \\<union>\n             ((\\<Union>C\\<in>P.\n                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                   is_ground_subst \\<sigma>}) \\<union>\n              (\\<Union>C\\<in>Q.\n                  {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))", "proof (rule, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length\n            (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl\n             \\<mu>) \\<Longrightarrow>\n       (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n       \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n              is_ground_subst \\<sigma>} \\<union>\n             ((\\<Union>C\\<in>P.\n                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                   is_ground_subst \\<sigma>}) \\<union>\n              (\\<Union>C\\<in>Q.\n                  {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length\n            (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl\n             \\<mu>) \\<Longrightarrow>\n       (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n       \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n              is_ground_subst \\<sigma>} \\<union>\n             ((\\<Union>C\\<in>P.\n                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                   is_ground_subst \\<sigma>}) \\<union>\n              (\\<Union>C\\<in>Q.\n                  {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))", "assume \"i < length (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>)\""], ["proof (state)\nthis:\n  i < length\n       (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length\n            (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl\n             \\<mu>) \\<Longrightarrow>\n       (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n       \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n              is_ground_subst \\<sigma>} \\<union>\n             ((\\<Union>C\\<in>P.\n                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                   is_ground_subst \\<sigma>}) \\<union>\n              (\\<Union>C\\<in>Q.\n                  {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))", "then"], ["proof (chain)\npicking this:\n  i < length\n       (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>)", "have a: \"i < length CAs \\<and> i < length \\<rho>s\""], ["proof (prove)\nusing this:\n  i < length\n       (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>)\n\ngoal (1 subgoal):\n 1. i < length CAs \\<and> i < length \\<rho>s", "by simp"], ["proof (state)\nthis:\n  i < length CAs \\<and> i < length \\<rho>s\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length\n            (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl\n             \\<mu>) \\<Longrightarrow>\n       (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n       \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n              is_ground_subst \\<sigma>} \\<union>\n             ((\\<Union>C\\<in>P.\n                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                   is_ground_subst \\<sigma>}) \\<union>\n              (\\<Union>C\\<in>Q.\n                  {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))", "moreover"], ["proof (state)\nthis:\n  i < length CAs \\<and> i < length \\<rho>s\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length\n            (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl\n             \\<mu>) \\<Longrightarrow>\n       (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n       \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n              is_ground_subst \\<sigma>} \\<union>\n             ((\\<Union>C\\<in>P.\n                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                   is_ground_subst \\<sigma>}) \\<union>\n              (\\<Union>C\\<in>Q.\n                  {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))", "from a"], ["proof (chain)\npicking this:\n  i < length CAs \\<and> i < length \\<rho>s", "have \"CAs ! i \\<in> {C} \\<union> Q\""], ["proof (prove)\nusing this:\n  i < length CAs \\<and> i < length \\<rho>s\n\ngoal (1 subgoal):\n 1. CAs ! i \\<in> {C} \\<union> Q", "using \\<gamma>_p2 \\<gamma>_p"], ["proof (prove)\nusing this:\n  i < length CAs \\<and> i < length \\<rho>s\n  \\<gamma> = Infer CC D E \\<and>\n  ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC\n  \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n  infer_from (Q \\<union> {C}) \\<gamma> \\<and>\n  C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E\n\ngoal (1 subgoal):\n 1. CAs ! i \\<in> {C} \\<union> Q", "unfolding infer_from_def"], ["proof (prove)\nusing this:\n  i < length CAs \\<and> i < length \\<rho>s\n  \\<gamma> = Infer CC D E \\<and>\n  ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC\n  \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n  set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n  C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E\n\ngoal (1 subgoal):\n 1. CAs ! i \\<in> {C} \\<union> Q", "by (metis (no_types, lifting) Un_subset_iff inference.sel(1) set_mset_union\n              sup_commute nth_mem_mset subsetCE)"], ["proof (state)\nthis:\n  CAs ! i \\<in> {C} \\<union> Q\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length\n            (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl\n             \\<mu>) \\<Longrightarrow>\n       (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n       \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n              is_ground_subst \\<sigma>} \\<union>\n             ((\\<Union>C\\<in>P.\n                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                   is_ground_subst \\<sigma>}) \\<union>\n              (\\<Union>C\\<in>Q.\n                  {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))", "ultimately"], ["proof (chain)\npicking this:\n  i < length CAs \\<and> i < length \\<rho>s\n  CAs ! i \\<in> {C} \\<union> Q", "have \"(CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i \\<in>\n          {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<or>\n          ((CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i \\<in> (\\<Union>C\\<in>P. {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}) \\<or>\n          (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i \\<in> (\\<Union>C \\<in> Q. {C \\<cdot> \\<sigma> | \\<sigma>. is_ground_subst \\<sigma>}))\""], ["proof (prove)\nusing this:\n  i < length CAs \\<and> i < length \\<rho>s\n  CAs ! i \\<in> {C} \\<union> Q\n\ngoal (1 subgoal):\n 1. (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n    \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<or>\n    (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n    \\<in> (\\<Union>C\\<in>P.\n              {C \\<cdot> \\<sigma> |\\<sigma>.\n               is_ground_subst \\<sigma>}) \\<or>\n    (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n    \\<in> (\\<Union>C\\<in>Q.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})", "using E_\\<mu>_p \\<gamma>_p2 \\<gamma>_p"], ["proof (prove)\nusing this:\n  i < length CAs \\<and> i < length \\<rho>s\n  CAs ! i \\<in> {C} \\<union> Q\n  E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>\n  \\<gamma> = Infer CC D E \\<and>\n  ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC\n  \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n  infer_from (Q \\<union> {C}) \\<gamma> \\<and>\n  C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E\n\ngoal (1 subgoal):\n 1. (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n    \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<or>\n    (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n    \\<in> (\\<Union>C\\<in>P.\n              {C \\<cdot> \\<sigma> |\\<sigma>.\n               is_ground_subst \\<sigma>}) \\<or>\n    (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n    \\<in> (\\<Union>C\\<in>Q.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})", "unfolding \\<gamma>_ground_def infer_from_def grounding_of_clss_def grounding_of_cls_def"], ["proof (prove)\nusing this:\n  i < length CAs \\<and> i < length \\<rho>s\n  CAs ! i \\<in> {C} \\<union> Q\n  E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>\n  \\<gamma> = Infer CC D E \\<and>\n  ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC\n  \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n  set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n  C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E\n\ngoal (1 subgoal):\n 1. (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n    \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<or>\n    (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n    \\<in> (\\<Union>C\\<in>P.\n              {C \\<cdot> \\<sigma> |\\<sigma>.\n               is_ground_subst \\<sigma>}) \\<or>\n    (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n    \\<in> (\\<Union>C\\<in>Q.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>} \\<or>\n                      (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> (\\<Union>C\\<in>P.\n                                {C \\<cdot> \\<sigma> |\\<sigma>.\n                                 is_ground_subst \\<sigma>}) \\<or>\n                      (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> (\\<Union>C\\<in>Q.\n                                {C \\<cdot> \\<sigma> |\\<sigma>.\n                                 is_ground_subst \\<sigma>})", "apply (cases \"CAs ! i = C\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i = C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>} \\<or>\n                      (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> (\\<Union>C\\<in>P.\n                                {C \\<cdot> \\<sigma> |\\<sigma>.\n                                 is_ground_subst \\<sigma>}) \\<or>\n                      (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> (\\<Union>C\\<in>Q.\n                                {C \\<cdot> \\<sigma> |\\<sigma>.\n                                 is_ground_subst \\<sigma>})\n 2. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i \\<noteq> C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>} \\<or>\n                      (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> (\\<Union>C\\<in>P.\n                                {C \\<cdot> \\<sigma> |\\<sigma>.\n                                 is_ground_subst \\<sigma>}) \\<or>\n                      (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> (\\<Union>C\\<in>Q.\n                                {C \\<cdot> \\<sigma> |\\<sigma>.\n                                 is_ground_subst \\<sigma>})", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i = C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>} \\<or>\n                      (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> (\\<Union>C\\<in>P.\n                                {C \\<cdot> \\<sigma> |\\<sigma>.\n                                 is_ground_subst \\<sigma>}) \\<or>\n                      (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> (\\<Union>C\\<in>Q.\n                                {C \\<cdot> \\<sigma> |\\<sigma>.\n                                 is_ground_subst \\<sigma>})", "apply (rule disjI1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i = C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>}", "apply (rule Set.CollectI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i = C\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>'.\n                         (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                          \\<sigma> \\<cdot>cl\n                          \\<mu>) !\n                         i =\n                         C \\<cdot> \\<sigma>' \\<and>\n                         is_ground_subst \\<sigma>'", "apply (rule_tac x = \"(\\<rho>s ! i) \\<odot> \\<sigma> \\<odot> \\<mu>\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i = C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i =\n                      C \\<cdot>\n                      (\\<rho>s ! i \\<odot> \\<sigma> \\<odot> \\<mu>) \\<and>\n                      is_ground_subst\n                       (\\<rho>s ! i \\<odot> \\<sigma> \\<odot> \\<mu>)", "using \\<rho>s_def"], ["proof (prove)\nusing this:\n  \\<rho>s = tl (renamings_apart (D # CAs))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i = C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i =\n                      C \\<cdot>\n                      (\\<rho>s ! i \\<odot> \\<sigma> \\<odot> \\<mu>) \\<and>\n                      is_ground_subst\n                       (\\<rho>s ! i \\<odot> \\<sigma> \\<odot> \\<mu>)", "using renamings_apart_length"], ["proof (prove)\nusing this:\n  \\<rho>s = tl (renamings_apart (D # CAs))\n  length (renamings_apart ?Cs) = length ?Cs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i = C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i =\n                      C \\<cdot>\n                      (\\<rho>s ! i \\<odot> \\<sigma> \\<odot> \\<mu>) \\<and>\n                      is_ground_subst\n                       (\\<rho>s ! i \\<odot> \\<sigma> \\<odot> \\<mu>)", "by (auto; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i \\<noteq> C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>} \\<or>\n                      (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> (\\<Union>C\\<in>P.\n                                {C \\<cdot> \\<sigma> |\\<sigma>.\n                                 is_ground_subst \\<sigma>}) \\<or>\n                      (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> (\\<Union>C\\<in>Q.\n                                {C \\<cdot> \\<sigma> |\\<sigma>.\n                                 is_ground_subst \\<sigma>})", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i \\<noteq> C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>} \\<or>\n                      (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> (\\<Union>C\\<in>P.\n                                {C \\<cdot> \\<sigma> |\\<sigma>.\n                                 is_ground_subst \\<sigma>}) \\<or>\n                      (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> (\\<Union>C\\<in>Q.\n                                {C \\<cdot> \\<sigma> |\\<sigma>.\n                                 is_ground_subst \\<sigma>})", "apply (rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i \\<noteq> C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> (\\<Union>C\\<in>P.\n                                {C \\<cdot> \\<sigma> |\\<sigma>.\n                                 is_ground_subst \\<sigma>}) \\<or>\n                      (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> (\\<Union>C\\<in>Q.\n                                {C \\<cdot> \\<sigma> |\\<sigma>.\n                                 is_ground_subst \\<sigma>})", "apply (rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i \\<noteq> C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> (\\<Union>C\\<in>Q.\n                                {C \\<cdot> \\<sigma> |\\<sigma>.\n                                 is_ground_subst \\<sigma>})", "apply (rule_tac a = \"CAs ! i\" in UN_I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i \\<noteq> C\\<rbrakk>\n    \\<Longrightarrow> CAs ! i \\<in> Q\n 2. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i \\<noteq> C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> {CAs ! i \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i \\<noteq> C\\<rbrakk>\n    \\<Longrightarrow> CAs ! i \\<in> Q", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i \\<noteq> C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> {CAs ! i \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i \\<noteq> C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i\n                      \\<in> {CAs ! i \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>}", "apply (rule Set.CollectI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i \\<noteq> C\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>'.\n                         (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                          \\<sigma> \\<cdot>cl\n                          \\<mu>) !\n                         i =\n                         CAs ! i \\<cdot> \\<sigma>' \\<and>\n                         is_ground_subst \\<sigma>'", "apply (rule_tac x = \"(\\<rho>s ! i) \\<odot> \\<sigma> \\<odot> \\<mu>\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i \\<noteq> C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i =\n                      CAs ! i \\<cdot>\n                      (\\<rho>s ! i \\<odot> \\<sigma> \\<odot> \\<mu>) \\<and>\n                      is_ground_subst\n                       (\\<rho>s ! i \\<odot> \\<sigma> \\<odot> \\<mu>)", "using \\<rho>s_def"], ["proof (prove)\nusing this:\n  \\<rho>s = tl (renamings_apart (D # CAs))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i \\<noteq> C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i =\n                      CAs ! i \\<cdot>\n                      (\\<rho>s ! i \\<odot> \\<sigma> \\<odot> \\<mu>) \\<and>\n                      is_ground_subst\n                       (\\<rho>s ! i \\<odot> \\<sigma> \\<odot> \\<mu>)", "using renamings_apart_length"], ["proof (prove)\nusing this:\n  \\<rho>s = tl (renamings_apart (D # CAs))\n  length (renamings_apart ?Cs) = length ?Cs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length CAs \\<and> i < length \\<rho>s;\n     CAs ! i \\<in> {C} \\<union> Q;\n     E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>;\n     \\<gamma> = Infer CC D E \\<and>\n     ord_resolve_rename S CAs D AAs As \\<sigma> E \\<and> mset CAs = CC;\n     \\<gamma> \\<in> ord_FO_\\<Gamma> S \\<and>\n     set_mset (prems_of \\<gamma>) \\<subseteq> Q \\<union> {C} \\<and>\n     C \\<in># prems_of \\<gamma> \\<and> concl_of \\<gamma> = E;\n     CAs ! i \\<noteq> C\\<rbrakk>\n    \\<Longrightarrow> (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                       \\<sigma> \\<cdot>cl\n                       \\<mu>) !\n                      i =\n                      CAs ! i \\<cdot>\n                      (\\<rho>s ! i \\<odot> \\<sigma> \\<odot> \\<mu>) \\<and>\n                      is_ground_subst\n                       (\\<rho>s ! i \\<odot> \\<sigma> \\<odot> \\<mu>)", "by (auto; fail)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n  \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<or>\n  (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n  \\<in> (\\<Union>C\\<in>P.\n            {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}) \\<or>\n  (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n  \\<in> (\\<Union>C\\<in>Q.\n            {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length\n            (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl\n             \\<mu>) \\<Longrightarrow>\n       (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n       \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n              is_ground_subst \\<sigma>} \\<union>\n             ((\\<Union>C\\<in>P.\n                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                   is_ground_subst \\<sigma>}) \\<union>\n              (\\<Union>C\\<in>Q.\n                  {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))", "then"], ["proof (chain)\npicking this:\n  (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n  \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<or>\n  (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n  \\<in> (\\<Union>C\\<in>P.\n            {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}) \\<or>\n  (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n  \\<in> (\\<Union>C\\<in>Q.\n            {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})", "show \"(CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<union>\n          ((\\<Union>C \\<in> P. {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}) \\<union> (\\<Union>C \\<in> Q. {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))\""], ["proof (prove)\nusing this:\n  (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n  \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<or>\n  (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n  \\<in> (\\<Union>C\\<in>P.\n            {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}) \\<or>\n  (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n  \\<in> (\\<Union>C\\<in>Q.\n            {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n\ngoal (1 subgoal):\n 1. (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n    \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<union>\n          ((\\<Union>C\\<in>P.\n               {C \\<cdot> \\<sigma> |\\<sigma>.\n                is_ground_subst \\<sigma>}) \\<union>\n           (\\<Union>C\\<in>Q.\n               {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))", "by blast"], ["proof (state)\nthis:\n  (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n  \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<union>\n        ((\\<Union>C\\<in>P.\n             {C \\<cdot> \\<sigma> |\\<sigma>.\n              is_ground_subst \\<sigma>}) \\<union>\n         (\\<Union>C\\<in>Q.\n             {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<length\n              (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl\n               \\<mu>).\n     (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n     \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<union>\n           ((\\<Union>C\\<in>P.\n                {C \\<cdot> \\<sigma> |\\<sigma>.\n                 is_ground_subst \\<sigma>}) \\<union>\n            (\\<Union>C\\<in>Q.\n                {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))\n\ngoal (1 subgoal):\n 1. set_mset (prems_of \\<gamma>_ground)\n    \\<subseteq> grounding_of_clss\n                 (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  Q_of_state ({}, P \\<union> {C}, Q))", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length\n              (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl\n               \\<mu>).\n     (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n     \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<union>\n           ((\\<Union>C\\<in>P.\n                {C \\<cdot> \\<sigma> |\\<sigma>.\n                 is_ground_subst \\<sigma>}) \\<union>\n            (\\<Union>C\\<in>Q.\n                {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))", "have \"\\<forall>x \\<in># mset (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>). x \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<union>\n        ((\\<Union>C \\<in> P. {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}) \\<union> (\\<Union>C \\<in> Q. {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))\""], ["proof (prove)\nusing this:\n  \\<forall>i<length\n              (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl\n               \\<mu>).\n     (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl \\<sigma> \\<cdot>cl \\<mu>) ! i\n     \\<in> {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>} \\<union>\n           ((\\<Union>C\\<in>P.\n                {C \\<cdot> \\<sigma> |\\<sigma>.\n                 is_ground_subst \\<sigma>}) \\<union>\n            (\\<Union>C\\<in>Q.\n                {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>#mset\n                     (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                      \\<sigma> \\<cdot>cl\n                      \\<mu>).\n       x \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n                is_ground_subst \\<sigma>} \\<union>\n               ((\\<Union>C\\<in>P.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>}) \\<union>\n                (\\<Union>C\\<in>Q.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>}))", "by (metis (lifting) in_set_conv_nth set_mset_mset)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>#mset\n                   (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                    \\<sigma> \\<cdot>cl\n                    \\<mu>).\n     x \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n              is_ground_subst \\<sigma>} \\<union>\n             ((\\<Union>C\\<in>P.\n                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                   is_ground_subst \\<sigma>}) \\<union>\n              (\\<Union>C\\<in>Q.\n                  {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))\n\ngoal (1 subgoal):\n 1. set_mset (prems_of \\<gamma>_ground)\n    \\<subseteq> grounding_of_clss\n                 (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  Q_of_state ({}, P \\<union> {C}, Q))", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>#mset\n                   (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                    \\<sigma> \\<cdot>cl\n                    \\<mu>).\n     x \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n              is_ground_subst \\<sigma>} \\<union>\n             ((\\<Union>C\\<in>P.\n                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                   is_ground_subst \\<sigma>}) \\<union>\n              (\\<Union>C\\<in>Q.\n                  {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))", "have \"set_mset (mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm \\<mu>) \\<subseteq>\n        grounding_of_cls C \\<union> grounding_of_clss P \\<union> grounding_of_clss Q\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>#mset\n                   (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                    \\<sigma> \\<cdot>cl\n                    \\<mu>).\n     x \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n              is_ground_subst \\<sigma>} \\<union>\n             ((\\<Union>C\\<in>P.\n                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                   is_ground_subst \\<sigma>}) \\<union>\n              (\\<Union>C\\<in>Q.\n                  {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))\n\ngoal (1 subgoal):\n 1. set_mset\n     (mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm\n      \\<mu>)\n    \\<subseteq> grounding_of_cls C \\<union> grounding_of_clss P \\<union>\n                grounding_of_clss Q", "unfolding grounding_of_cls_def grounding_of_clss_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>#mset\n                   (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                    \\<sigma> \\<cdot>cl\n                    \\<mu>).\n     x \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n              is_ground_subst \\<sigma>} \\<union>\n             ((\\<Union>C\\<in>P.\n                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                   is_ground_subst \\<sigma>}) \\<union>\n              (\\<Union>C\\<in>Q.\n                  {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))\n\ngoal (1 subgoal):\n 1. set_mset\n     (mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm\n      \\<mu>)\n    \\<subseteq> {C \\<cdot> \\<sigma> |\\<sigma>.\n                 is_ground_subst \\<sigma>} \\<union>\n                (\\<Union>C\\<in>P.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>}) \\<union>\n                (\\<Union>C\\<in>Q.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})", "using mset_subst_cls_list_subst_cls_mset"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>#mset\n                   (CAs \\<cdot>\\<cdot>cl \\<rho>s \\<cdot>cl\n                    \\<sigma> \\<cdot>cl\n                    \\<mu>).\n     x \\<in> {C \\<cdot> \\<sigma> |\\<sigma>.\n              is_ground_subst \\<sigma>} \\<union>\n             ((\\<Union>C\\<in>P.\n                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                   is_ground_subst \\<sigma>}) \\<union>\n              (\\<Union>C\\<in>Q.\n                  {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>}))\n  mset (?Cs \\<cdot>cl ?\\<sigma>) = mset ?Cs \\<cdot>cm ?\\<sigma>\n\ngoal (1 subgoal):\n 1. set_mset\n     (mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm\n      \\<mu>)\n    \\<subseteq> {C \\<cdot> \\<sigma> |\\<sigma>.\n                 is_ground_subst \\<sigma>} \\<union>\n                (\\<Union>C\\<in>P.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>}) \\<union>\n                (\\<Union>C\\<in>Q.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})", "by auto"], ["proof (state)\nthis:\n  set_mset\n   (mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm \\<mu>)\n  \\<subseteq> grounding_of_cls C \\<union> grounding_of_clss P \\<union>\n              grounding_of_clss Q\n\ngoal (1 subgoal):\n 1. set_mset (prems_of \\<gamma>_ground)\n    \\<subseteq> grounding_of_clss\n                 (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  Q_of_state ({}, P \\<union> {C}, Q))", "ultimately"], ["proof (chain)\npicking this:\n  D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n  \\<in> grounding_of_cls C \\<or>\n  (\\<exists>x\\<in>P.\n      D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n      \\<in> grounding_of_cls x) \\<or>\n  (\\<exists>x\\<in>Q.\n      D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n      \\<in> grounding_of_cls x)\n  set_mset\n   (mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm \\<mu>)\n  \\<subseteq> grounding_of_cls C \\<union> grounding_of_clss P \\<union>\n              grounding_of_clss Q", "show ?thesis"], ["proof (prove)\nusing this:\n  D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n  \\<in> grounding_of_cls C \\<or>\n  (\\<exists>x\\<in>P.\n      D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n      \\<in> grounding_of_cls x) \\<or>\n  (\\<exists>x\\<in>Q.\n      D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n      \\<in> grounding_of_cls x)\n  set_mset\n   (mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm \\<mu>)\n  \\<subseteq> grounding_of_cls C \\<union> grounding_of_clss P \\<union>\n              grounding_of_clss Q\n\ngoal (1 subgoal):\n 1. set_mset (prems_of \\<gamma>_ground)\n    \\<subseteq> grounding_of_clss\n                 (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                  Q_of_state ({}, P \\<union> {C}, Q))", "unfolding \\<gamma>_ground_def grounding_of_clss_def"], ["proof (prove)\nusing this:\n  D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n  \\<in> grounding_of_cls C \\<or>\n  (\\<exists>x\\<in>P.\n      D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n      \\<in> grounding_of_cls x) \\<or>\n  (\\<exists>x\\<in>Q.\n      D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>\n      \\<in> grounding_of_cls x)\n  set_mset\n   (mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm \\<mu>)\n  \\<subseteq> grounding_of_cls C \\<union>\n              \\<Union> (grounding_of_cls ` P) \\<union>\n              \\<Union> (grounding_of_cls ` Q)\n\ngoal (1 subgoal):\n 1. set_mset\n     (prems_of\n       (Infer\n         (mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm\n          \\<mu>)\n         (D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>)\n         (E \\<cdot> \\<mu>)))\n    \\<subseteq> \\<Union>\n                 (grounding_of_cls `\n                  (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                   P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                   Q_of_state ({}, P \\<union> {C}, Q)))", "by auto"], ["proof (state)\nthis:\n  set_mset (prems_of \\<gamma>_ground)\n  \\<subseteq> grounding_of_clss\n               (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                Q_of_state ({}, P \\<union> {C}, Q))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_mset (prems_of \\<gamma>_ground)\n  \\<subseteq> grounding_of_clss\n               (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                Q_of_state ({}, P \\<union> {C}, Q))\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "ultimately"], ["proof (chain)\npicking this:\n  \\<gamma>_ground\n  \\<in> {Infer cc d e |cc d e.\n         \\<forall>I.\n            I \\<Turnstile>m cc \\<longrightarrow>\n            I \\<Turnstile> d \\<longrightarrow> I \\<Turnstile> e}\n  set_mset (prems_of \\<gamma>_ground)\n  \\<subseteq> grounding_of_clss\n               (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                Q_of_state ({}, P \\<union> {C}, Q))", "have\n      \"E \\<cdot> \\<mu> \\<in> concls_of (sr_ext.inferences_from (grounding_of_state ({}, P \\<union> {C}, Q)))\""], ["proof (prove)\nusing this:\n  \\<gamma>_ground\n  \\<in> {Infer cc d e |cc d e.\n         \\<forall>I.\n            I \\<Turnstile>m cc \\<longrightarrow>\n            I \\<Turnstile> d \\<longrightarrow> I \\<Turnstile> e}\n  set_mset (prems_of \\<gamma>_ground)\n  \\<subseteq> grounding_of_clss\n               (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                Q_of_state ({}, P \\<union> {C}, Q))\n\ngoal (1 subgoal):\n 1. E \\<cdot> \\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss\n               (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                Q_of_state ({}, P \\<union> {C}, Q))))", "unfolding sr_ext.inferences_from_def inference_system.inferences_from_def ground_sound_\\<Gamma>_def\n        infer_from_def"], ["proof (prove)\nusing this:\n  \\<gamma>_ground\n  \\<in> {Infer cc d e |cc d e.\n         \\<forall>I.\n            I \\<Turnstile>m cc \\<longrightarrow>\n            I \\<Turnstile> d \\<longrightarrow> I \\<Turnstile> e}\n  set_mset (prems_of \\<gamma>_ground)\n  \\<subseteq> grounding_of_clss\n               (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                Q_of_state ({}, P \\<union> {C}, Q))\n\ngoal (1 subgoal):\n 1. E \\<cdot> \\<mu>\n    \\<in> concls_of\n           {\\<gamma>\n            \\<in> {Infer CC D E |CC D E.\n                   \\<forall>I.\n                      I \\<Turnstile>m CC \\<longrightarrow>\n                      I \\<Turnstile> D \\<longrightarrow> I \\<Turnstile> E}.\n            set_mset (prems_of \\<gamma>)\n            \\<subseteq> grounding_of_clss\n                         (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                          P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                          Q_of_state ({}, P \\<union> {C}, Q))}", "using \\<gamma>_ground_def"], ["proof (prove)\nusing this:\n  \\<gamma>_ground\n  \\<in> {Infer cc d e |cc d e.\n         \\<forall>I.\n            I \\<Turnstile>m cc \\<longrightarrow>\n            I \\<Turnstile> d \\<longrightarrow> I \\<Turnstile> e}\n  set_mset (prems_of \\<gamma>_ground)\n  \\<subseteq> grounding_of_clss\n               (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                Q_of_state ({}, P \\<union> {C}, Q))\n  \\<gamma>_ground =\n  Infer\n   (mset (CAs \\<cdot>\\<cdot>cl \\<rho>s) \\<cdot>cm \\<sigma> \\<cdot>cm \\<mu>)\n   (D \\<cdot> \\<rho> \\<cdot> \\<sigma> \\<cdot> \\<mu>) (E \\<cdot> \\<mu>)\n\ngoal (1 subgoal):\n 1. E \\<cdot> \\<mu>\n    \\<in> concls_of\n           {\\<gamma>\n            \\<in> {Infer CC D E |CC D E.\n                   \\<forall>I.\n                      I \\<Turnstile>m CC \\<longrightarrow>\n                      I \\<Turnstile> D \\<longrightarrow> I \\<Turnstile> E}.\n            set_mset (prems_of \\<gamma>)\n            \\<subseteq> grounding_of_clss\n                         (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                          P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                          Q_of_state ({}, P \\<union> {C}, Q))}", "by (metis (mono_tags, lifting) image_eqI inference.sel(3) mem_Collect_eq)"], ["proof (state)\nthis:\n  E \\<cdot> \\<mu>\n  \\<in> concls_of\n         (sr_ext.inferences_from\n           (grounding_of_clss\n             (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n              P_of_state ({}, P \\<union> {C}, Q) \\<union>\n              Q_of_state ({}, P \\<union> {C}, Q))))\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  E \\<cdot> \\<mu>\n  \\<in> concls_of\n         (sr_ext.inferences_from\n           (grounding_of_clss\n             (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n              P_of_state ({}, P \\<union> {C}, Q) \\<union>\n              Q_of_state ({}, P \\<union> {C}, Q))))", "have \"E\\<mu> \\<in> concls_of (sr_ext.inferences_from (grounding_of_state ({}, P \\<union> {C}, Q)))\""], ["proof (prove)\nusing this:\n  E \\<cdot> \\<mu>\n  \\<in> concls_of\n         (sr_ext.inferences_from\n           (grounding_of_clss\n             (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n              P_of_state ({}, P \\<union> {C}, Q) \\<union>\n              Q_of_state ({}, P \\<union> {C}, Q))))\n\ngoal (1 subgoal):\n 1. E\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss\n               (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                Q_of_state ({}, P \\<union> {C}, Q))))", "using E_\\<mu>_p"], ["proof (prove)\nusing this:\n  E \\<cdot> \\<mu>\n  \\<in> concls_of\n         (sr_ext.inferences_from\n           (grounding_of_clss\n             (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n              P_of_state ({}, P \\<union> {C}, Q) \\<union>\n              Q_of_state ({}, P \\<union> {C}, Q))))\n  E\\<mu> = E \\<cdot> \\<mu> \\<and> E \\<in> N \\<and> is_ground_subst \\<mu>\n\ngoal (1 subgoal):\n 1. E\\<mu>\n    \\<in> concls_of\n           (sr_ext.inferences_from\n             (grounding_of_clss\n               (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                Q_of_state ({}, P \\<union> {C}, Q))))", "by auto"], ["proof (state)\nthis:\n  E\\<mu>\n  \\<in> concls_of\n         (sr_ext.inferences_from\n           (grounding_of_clss\n             (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n              P_of_state ({}, P \\<union> {C}, Q) \\<union>\n              Q_of_state ({}, P \\<union> {C}, Q))))\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "}"], ["proof (state)\nthis:\n  ?E\\<mu>2 \\<in> grounding_of_clss N \\<Longrightarrow>\n  ?E\\<mu>2\n  \\<in> concls_of\n         (sr_ext.inferences_from\n           (grounding_of_clss\n             (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n              P_of_state ({}, P \\<union> {C}, Q) \\<union>\n              Q_of_state ({}, P \\<union> {C}, Q))))\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "then"], ["proof (chain)\npicking this:\n  ?E\\<mu>2 \\<in> grounding_of_clss N \\<Longrightarrow>\n  ?E\\<mu>2\n  \\<in> concls_of\n         (sr_ext.inferences_from\n           (grounding_of_clss\n             (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n              P_of_state ({}, P \\<union> {C}, Q) \\<union>\n              Q_of_state ({}, P \\<union> {C}, Q))))", "have \"grounding_of_state (N, P, Q \\<union> {C}) - grounding_of_state ({}, P \\<union> {C}, Q)\n    \\<subseteq> concls_of (sr_ext.inferences_from (grounding_of_state ({}, P \\<union> {C}, Q)))\""], ["proof (prove)\nusing this:\n  ?E\\<mu>2 \\<in> grounding_of_clss N \\<Longrightarrow>\n  ?E\\<mu>2\n  \\<in> concls_of\n         (sr_ext.inferences_from\n           (grounding_of_clss\n             (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n              P_of_state ({}, P \\<union> {C}, Q) \\<union>\n              Q_of_state ({}, P \\<union> {C}, Q))))\n\ngoal (1 subgoal):\n 1. grounding_of_clss\n     (N_of_state (N, P, Q \\<union> {C}) \\<union>\n      P_of_state (N, P, Q \\<union> {C}) \\<union>\n      Q_of_state (N, P, Q \\<union> {C})) -\n    grounding_of_clss\n     (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n      P_of_state ({}, P \\<union> {C}, Q) \\<union>\n      Q_of_state ({}, P \\<union> {C}, Q))\n    \\<subseteq> concls_of\n                 (sr_ext.inferences_from\n                   (grounding_of_clss\n                     (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                      P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                      Q_of_state ({}, P \\<union> {C}, Q))))", "unfolding grounding_of_clss_def"], ["proof (prove)\nusing this:\n  ?E\\<mu>2 \\<in> \\<Union> (grounding_of_cls ` N) \\<Longrightarrow>\n  ?E\\<mu>2\n  \\<in> concls_of\n         (sr_ext.inferences_from\n           (\\<Union>\n             (grounding_of_cls `\n              (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n               P_of_state ({}, P \\<union> {C}, Q) \\<union>\n               Q_of_state ({}, P \\<union> {C}, Q)))))\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (grounding_of_cls `\n      (N_of_state (N, P, Q \\<union> {C}) \\<union>\n       P_of_state (N, P, Q \\<union> {C}) \\<union>\n       Q_of_state (N, P, Q \\<union> {C}))) -\n    \\<Union>\n     (grounding_of_cls `\n      (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n       P_of_state ({}, P \\<union> {C}, Q) \\<union>\n       Q_of_state ({}, P \\<union> {C}, Q)))\n    \\<subseteq> concls_of\n                 (sr_ext.inferences_from\n                   (\\<Union>\n                     (grounding_of_cls `\n                      (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                       P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                       Q_of_state ({}, P \\<union> {C}, Q)))))", "by auto"], ["proof (state)\nthis:\n  grounding_of_clss\n   (N_of_state (N, P, Q \\<union> {C}) \\<union>\n    P_of_state (N, P, Q \\<union> {C}) \\<union>\n    Q_of_state (N, P, Q \\<union> {C})) -\n  grounding_of_clss\n   (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n    P_of_state ({}, P \\<union> {C}, Q) \\<union>\n    Q_of_state ({}, P \\<union> {C}, Q))\n  \\<subseteq> concls_of\n               (sr_ext.inferences_from\n                 (grounding_of_clss\n                   (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                    P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                    Q_of_state ({}, P \\<union> {C}, Q))))\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "moreover"], ["proof (state)\nthis:\n  grounding_of_clss\n   (N_of_state (N, P, Q \\<union> {C}) \\<union>\n    P_of_state (N, P, Q \\<union> {C}) \\<union>\n    Q_of_state (N, P, Q \\<union> {C})) -\n  grounding_of_clss\n   (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n    P_of_state ({}, P \\<union> {C}, Q) \\<union>\n    Q_of_state ({}, P \\<union> {C}, Q))\n  \\<subseteq> concls_of\n               (sr_ext.inferences_from\n                 (grounding_of_clss\n                   (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                    P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                    Q_of_state ({}, P \\<union> {C}, Q))))\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "have \"grounding_of_state ({}, P \\<union> {C}, Q) - grounding_of_state (N, P, Q \\<union> {C}) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. grounding_of_clss\n     (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n      P_of_state ({}, P \\<union> {C}, Q) \\<union>\n      Q_of_state ({}, P \\<union> {C}, Q)) -\n    grounding_of_clss\n     (N_of_state (N, P, Q \\<union> {C}) \\<union>\n      P_of_state (N, P, Q \\<union> {C}) \\<union>\n      Q_of_state (N, P, Q \\<union> {C})) =\n    {}", "unfolding grounding_of_clss_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (grounding_of_cls `\n      (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n       P_of_state ({}, P \\<union> {C}, Q) \\<union>\n       Q_of_state ({}, P \\<union> {C}, Q))) -\n    \\<Union>\n     (grounding_of_cls `\n      (N_of_state (N, P, Q \\<union> {C}) \\<union>\n       P_of_state (N, P, Q \\<union> {C}) \\<union>\n       Q_of_state (N, P, Q \\<union> {C}))) =\n    {}", "by auto"], ["proof (state)\nthis:\n  grounding_of_clss\n   (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n    P_of_state ({}, P \\<union> {C}, Q) \\<union>\n    Q_of_state ({}, P \\<union> {C}, Q)) -\n  grounding_of_clss\n   (N_of_state (N, P, Q \\<union> {C}) \\<union>\n    P_of_state (N, P, Q \\<union> {C}) \\<union>\n    Q_of_state (N, P, Q \\<union> {C})) =\n  {}\n\ngoal (1 subgoal):\n 1. \\<And>N Q C P.\n       N =\n       concls_of\n        (ord_FO_resolution.inferences_between Q C) \\<Longrightarrow>\n       sr_ext.derive\n        (grounding_of_clss\n          (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n           P_of_state ({}, P \\<union> {C}, Q) \\<union>\n           Q_of_state ({}, P \\<union> {C}, Q)))\n        (grounding_of_clss\n          (N_of_state (N, P, Q \\<union> {C}) \\<union>\n           P_of_state (N, P, Q \\<union> {C}) \\<union>\n           Q_of_state (N, P, Q \\<union> {C})))", "ultimately"], ["proof (chain)\npicking this:\n  grounding_of_clss\n   (N_of_state (N, P, Q \\<union> {C}) \\<union>\n    P_of_state (N, P, Q \\<union> {C}) \\<union>\n    Q_of_state (N, P, Q \\<union> {C})) -\n  grounding_of_clss\n   (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n    P_of_state ({}, P \\<union> {C}, Q) \\<union>\n    Q_of_state ({}, P \\<union> {C}, Q))\n  \\<subseteq> concls_of\n               (sr_ext.inferences_from\n                 (grounding_of_clss\n                   (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                    P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                    Q_of_state ({}, P \\<union> {C}, Q))))\n  grounding_of_clss\n   (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n    P_of_state ({}, P \\<union> {C}, Q) \\<union>\n    Q_of_state ({}, P \\<union> {C}, Q)) -\n  grounding_of_clss\n   (N_of_state (N, P, Q \\<union> {C}) \\<union>\n    P_of_state (N, P, Q \\<union> {C}) \\<union>\n    Q_of_state (N, P, Q \\<union> {C})) =\n  {}", "show ?case"], ["proof (prove)\nusing this:\n  grounding_of_clss\n   (N_of_state (N, P, Q \\<union> {C}) \\<union>\n    P_of_state (N, P, Q \\<union> {C}) \\<union>\n    Q_of_state (N, P, Q \\<union> {C})) -\n  grounding_of_clss\n   (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n    P_of_state ({}, P \\<union> {C}, Q) \\<union>\n    Q_of_state ({}, P \\<union> {C}, Q))\n  \\<subseteq> concls_of\n               (sr_ext.inferences_from\n                 (grounding_of_clss\n                   (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                    P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                    Q_of_state ({}, P \\<union> {C}, Q))))\n  grounding_of_clss\n   (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n    P_of_state ({}, P \\<union> {C}, Q) \\<union>\n    Q_of_state ({}, P \\<union> {C}, Q)) -\n  grounding_of_clss\n   (N_of_state (N, P, Q \\<union> {C}) \\<union>\n    P_of_state (N, P, Q \\<union> {C}) \\<union>\n    Q_of_state (N, P, Q \\<union> {C})) =\n  {}\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n        P_of_state ({}, P \\<union> {C}, Q) \\<union>\n        Q_of_state ({}, P \\<union> {C}, Q)))\n     (grounding_of_clss\n       (N_of_state (N, P, Q \\<union> {C}) \\<union>\n        P_of_state (N, P, Q \\<union> {C}) \\<union>\n        Q_of_state (N, P, Q \\<union> {C})))", "using sr_ext.derive.intros[of \"(grounding_of_state (N, P, Q \\<union> {C}))\"\n        \"(grounding_of_state ({}, P \\<union> {C}, Q))\"]"], ["proof (prove)\nusing this:\n  grounding_of_clss\n   (N_of_state (N, P, Q \\<union> {C}) \\<union>\n    P_of_state (N, P, Q \\<union> {C}) \\<union>\n    Q_of_state (N, P, Q \\<union> {C})) -\n  grounding_of_clss\n   (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n    P_of_state ({}, P \\<union> {C}, Q) \\<union>\n    Q_of_state ({}, P \\<union> {C}, Q))\n  \\<subseteq> concls_of\n               (sr_ext.inferences_from\n                 (grounding_of_clss\n                   (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                    P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                    Q_of_state ({}, P \\<union> {C}, Q))))\n  grounding_of_clss\n   (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n    P_of_state ({}, P \\<union> {C}, Q) \\<union>\n    Q_of_state ({}, P \\<union> {C}, Q)) -\n  grounding_of_clss\n   (N_of_state (N, P, Q \\<union> {C}) \\<union>\n    P_of_state (N, P, Q \\<union> {C}) \\<union>\n    Q_of_state (N, P, Q \\<union> {C})) =\n  {}\n  \\<lbrakk>grounding_of_clss\n            (N_of_state (N, P, Q \\<union> {C}) \\<union>\n             P_of_state (N, P, Q \\<union> {C}) \\<union>\n             Q_of_state (N, P, Q \\<union> {C})) -\n           grounding_of_clss\n            (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n             P_of_state ({}, P \\<union> {C}, Q) \\<union>\n             Q_of_state ({}, P \\<union> {C}, Q))\n           \\<subseteq> concls_of\n                        (sr_ext.inferences_from\n                          (grounding_of_clss\n                            (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                             P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                             Q_of_state ({}, P \\<union> {C}, Q))));\n   grounding_of_clss\n    (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n     P_of_state ({}, P \\<union> {C}, Q) \\<union>\n     Q_of_state ({}, P \\<union> {C}, Q)) -\n   grounding_of_clss\n    (N_of_state (N, P, Q \\<union> {C}) \\<union>\n     P_of_state (N, P, Q \\<union> {C}) \\<union>\n     Q_of_state (N, P, Q \\<union> {C}))\n   \\<subseteq> sr.Rf\n                (grounding_of_clss\n                  (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                   P_of_state (N, P, Q \\<union> {C}) \\<union>\n                   Q_of_state (N, P, Q \\<union> {C})))\\<rbrakk>\n  \\<Longrightarrow> sr_ext.derive\n                     (grounding_of_clss\n                       (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n                        P_of_state ({}, P \\<union> {C}, Q) \\<union>\n                        Q_of_state ({}, P \\<union> {C}, Q)))\n                     (grounding_of_clss\n                       (N_of_state (N, P, Q \\<union> {C}) \\<union>\n                        P_of_state (N, P, Q \\<union> {C}) \\<union>\n                        Q_of_state (N, P, Q \\<union> {C})))\n\ngoal (1 subgoal):\n 1. sr_ext.derive\n     (grounding_of_clss\n       (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n        P_of_state ({}, P \\<union> {C}, Q) \\<union>\n        Q_of_state ({}, P \\<union> {C}, Q)))\n     (grounding_of_clss\n       (N_of_state (N, P, Q \\<union> {C}) \\<union>\n        P_of_state (N, P, Q \\<union> {C}) \\<union>\n        Q_of_state (N, P, Q \\<union> {C})))", "by auto"], ["proof (state)\nthis:\n  sr_ext.derive\n   (grounding_of_clss\n     (N_of_state ({}, P \\<union> {C}, Q) \\<union>\n      P_of_state ({}, P \\<union> {C}, Q) \\<union>\n      Q_of_state ({}, P \\<union> {C}, Q)))\n   (grounding_of_clss\n     (N_of_state (N, P, Q \\<union> {C}) \\<union>\n      P_of_state (N, P, Q \\<union> {C}) \\<union>\n      Q_of_state (N, P, Q \\<union> {C})))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nA useful consequence:\n\\<close>"], ["", "theorem RP_model: \"St \\<leadsto> St' \\<Longrightarrow> I \\<Turnstile>s grounding_of_state St' \\<longleftrightarrow> I \\<Turnstile>s grounding_of_state St\""], ["proof (prove)\ngoal (1 subgoal):\n 1. St \\<leadsto> St' \\<Longrightarrow>\n    (I \\<Turnstile>s\n     grounding_of_clss\n      (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')) =\n    (I \\<Turnstile>s\n     grounding_of_clss\n      (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "proof (drule RP_ground_derive, erule sr_ext.derive.cases, hypsubst)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>N M.\n       \\<lbrakk>grounding_of_clss\n                 (N_of_state St' \\<union> P_of_state St' \\<union>\n                  Q_of_state St') -\n                grounding_of_clss\n                 (N_of_state St \\<union> P_of_state St \\<union>\n                  Q_of_state St)\n                \\<subseteq> concls_of\n                             (sr_ext.inferences_from\n                               (grounding_of_clss\n                                 (N_of_state St \\<union>\n                                  P_of_state St \\<union>\n                                  Q_of_state St)));\n        grounding_of_clss\n         (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) -\n        grounding_of_clss\n         (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')\n        \\<subseteq> sr.Rf\n                     (grounding_of_clss\n                       (N_of_state St' \\<union> P_of_state St' \\<union>\n                        Q_of_state St'))\\<rbrakk>\n       \\<Longrightarrow> (I \\<Turnstile>s\n                          grounding_of_clss\n                           (N_of_state St' \\<union> P_of_state St' \\<union>\n                            Q_of_state St')) =\n                         (I \\<Turnstile>s\n                          grounding_of_clss\n                           (N_of_state St \\<union> P_of_state St \\<union>\n                            Q_of_state St))", "let\n    ?gSt = \"grounding_of_state St\" and\n    ?gSt' = \"grounding_of_state St'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>N M.\n       \\<lbrakk>grounding_of_clss\n                 (N_of_state St' \\<union> P_of_state St' \\<union>\n                  Q_of_state St') -\n                grounding_of_clss\n                 (N_of_state St \\<union> P_of_state St \\<union>\n                  Q_of_state St)\n                \\<subseteq> concls_of\n                             (sr_ext.inferences_from\n                               (grounding_of_clss\n                                 (N_of_state St \\<union>\n                                  P_of_state St \\<union>\n                                  Q_of_state St)));\n        grounding_of_clss\n         (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) -\n        grounding_of_clss\n         (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')\n        \\<subseteq> sr.Rf\n                     (grounding_of_clss\n                       (N_of_state St' \\<union> P_of_state St' \\<union>\n                        Q_of_state St'))\\<rbrakk>\n       \\<Longrightarrow> (I \\<Turnstile>s\n                          grounding_of_clss\n                           (N_of_state St' \\<union> P_of_state St' \\<union>\n                            Q_of_state St')) =\n                         (I \\<Turnstile>s\n                          grounding_of_clss\n                           (N_of_state St \\<union> P_of_state St \\<union>\n                            Q_of_state St))", "assume\n    deduct: \"?gSt' - ?gSt \\<subseteq> concls_of (sr_ext.inferences_from ?gSt)\" (is \"_ \\<subseteq> ?concls\") and\n    delete: \"?gSt - ?gSt' \\<subseteq> sr.Rf ?gSt'\""], ["proof (state)\nthis:\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St') -\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n  \\<subseteq> concls_of\n               (sr_ext.inferences_from\n                 (grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St)))\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) -\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')\n  \\<subseteq> sr.Rf\n               (grounding_of_clss\n                 (N_of_state St' \\<union> P_of_state St' \\<union>\n                  Q_of_state St'))\n\ngoal (1 subgoal):\n 1. \\<And>N M.\n       \\<lbrakk>grounding_of_clss\n                 (N_of_state St' \\<union> P_of_state St' \\<union>\n                  Q_of_state St') -\n                grounding_of_clss\n                 (N_of_state St \\<union> P_of_state St \\<union>\n                  Q_of_state St)\n                \\<subseteq> concls_of\n                             (sr_ext.inferences_from\n                               (grounding_of_clss\n                                 (N_of_state St \\<union>\n                                  P_of_state St \\<union>\n                                  Q_of_state St)));\n        grounding_of_clss\n         (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) -\n        grounding_of_clss\n         (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')\n        \\<subseteq> sr.Rf\n                     (grounding_of_clss\n                       (N_of_state St' \\<union> P_of_state St' \\<union>\n                        Q_of_state St'))\\<rbrakk>\n       \\<Longrightarrow> (I \\<Turnstile>s\n                          grounding_of_clss\n                           (N_of_state St' \\<union> P_of_state St' \\<union>\n                            Q_of_state St')) =\n                         (I \\<Turnstile>s\n                          grounding_of_clss\n                           (N_of_state St \\<union> P_of_state St \\<union>\n                            Q_of_state St))", "show \"I \\<Turnstile>s ?gSt' \\<longleftrightarrow> I \\<Turnstile>s ?gSt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (I \\<Turnstile>s\n     grounding_of_clss\n      (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')) =\n    (I \\<Turnstile>s\n     grounding_of_clss\n      (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union>\n      Q_of_state St') \\<Longrightarrow>\n    I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n 2. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union>\n      Q_of_state St) \\<Longrightarrow>\n    I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')", "assume bef: \"I \\<Turnstile>s ?gSt\""], ["proof (state)\nthis:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n\ngoal (2 subgoals):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union>\n      Q_of_state St') \\<Longrightarrow>\n    I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n 2. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union>\n      Q_of_state St) \\<Longrightarrow>\n    I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')", "then"], ["proof (chain)\npicking this:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)", "have \"I \\<Turnstile>s ?concls\""], ["proof (prove)\nusing this:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    concls_of\n     (sr_ext.inferences_from\n       (grounding_of_clss\n         (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)))", "unfolding ground_sound_\\<Gamma>_def inference_system.inferences_from_def true_clss_def\n        true_cls_mset_def"], ["proof (prove)\nusing this:\n  Ball\n   (grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   ((\\<Turnstile>) I)\n\ngoal (1 subgoal):\n 1. Ball\n     (concls_of\n       {\\<gamma>\n        \\<in> {Infer CC D E |CC D E.\n               \\<forall>I.\n                  Multiset.Ball CC ((\\<Turnstile>) I) \\<longrightarrow>\n                  I \\<Turnstile> D \\<longrightarrow> I \\<Turnstile> E}.\n        infer_from\n         (grounding_of_clss\n           (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         \\<gamma>})\n     ((\\<Turnstile>) I)", "by (auto simp add: image_def infer_from_def dest!: spec[of _ I])"], ["proof (state)\nthis:\n  I \\<Turnstile>s\n  concls_of\n   (sr_ext.inferences_from\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)))\n\ngoal (2 subgoals):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union>\n      Q_of_state St') \\<Longrightarrow>\n    I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n 2. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union>\n      Q_of_state St) \\<Longrightarrow>\n    I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')", "then"], ["proof (chain)\npicking this:\n  I \\<Turnstile>s\n  concls_of\n   (sr_ext.inferences_from\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)))", "have diff: \"I \\<Turnstile>s ?gSt' - ?gSt\""], ["proof (prove)\nusing this:\n  I \\<Turnstile>s\n  concls_of\n   (sr_ext.inferences_from\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)))\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St') -\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)", "using deduct"], ["proof (prove)\nusing this:\n  I \\<Turnstile>s\n  concls_of\n   (sr_ext.inferences_from\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)))\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St') -\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n  \\<subseteq> concls_of\n               (sr_ext.inferences_from\n                 (grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St)))\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St') -\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)", "by (blast intro: true_clss_mono)"], ["proof (state)\nthis:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St') -\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n\ngoal (2 subgoals):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union>\n      Q_of_state St') \\<Longrightarrow>\n    I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n 2. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union>\n      Q_of_state St) \\<Longrightarrow>\n    I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')", "then"], ["proof (chain)\npicking this:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St') -\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)", "show \"I \\<Turnstile>s ?gSt'\""], ["proof (prove)\nusing this:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St') -\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')", "using bef"], ["proof (prove)\nusing this:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St') -\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')", "unfolding true_clss_def"], ["proof (prove)\nusing this:\n  Ball\n   (grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St') -\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   ((\\<Turnstile>) I)\n  Ball\n   (grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   ((\\<Turnstile>) I)\n\ngoal (1 subgoal):\n 1. Ball\n     (grounding_of_clss\n       (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St'))\n     ((\\<Turnstile>) I)", "by blast"], ["proof (state)\nthis:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union>\n      Q_of_state St') \\<Longrightarrow>\n    I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union>\n      Q_of_state St') \\<Longrightarrow>\n    I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)", "assume aft: \"I \\<Turnstile>s ?gSt'\""], ["proof (state)\nthis:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union>\n      Q_of_state St') \\<Longrightarrow>\n    I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)", "have \"I \\<Turnstile>s ?gSt' \\<union> sr.Rf ?gSt'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union>\n      Q_of_state St') \\<union>\n    sr.Rf\n     (grounding_of_clss\n       (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St'))", "by (rule sr.Rf_model) (smt Diff_eq_empty_iff Diff_subset Un_Diff aft\n          standard_redundancy_criterion.Rf_mono sup_bot.right_neutral sup_ge1 true_clss_mono)"], ["proof (state)\nthis:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St') \\<union>\n  sr.Rf\n   (grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St'))\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union>\n      Q_of_state St') \\<Longrightarrow>\n    I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)", "then"], ["proof (chain)\npicking this:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St') \\<union>\n  sr.Rf\n   (grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St'))", "have \"I \\<Turnstile>s sr.Rf ?gSt'\""], ["proof (prove)\nusing this:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St') \\<union>\n  sr.Rf\n   (grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St'))\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    sr.Rf\n     (grounding_of_clss\n       (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St'))", "using true_clss_union"], ["proof (prove)\nusing this:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St') \\<union>\n  sr.Rf\n   (grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St'))\n  (?I \\<Turnstile>s ?CC \\<union> ?DD) =\n  (?I \\<Turnstile>s ?CC \\<and> ?I \\<Turnstile>s ?DD)\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    sr.Rf\n     (grounding_of_clss\n       (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St'))", "by blast"], ["proof (state)\nthis:\n  I \\<Turnstile>s\n  sr.Rf\n   (grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St'))\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union>\n      Q_of_state St') \\<Longrightarrow>\n    I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)", "then"], ["proof (chain)\npicking this:\n  I \\<Turnstile>s\n  sr.Rf\n   (grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St'))", "have diff: \"I \\<Turnstile>s ?gSt - ?gSt'\""], ["proof (prove)\nusing this:\n  I \\<Turnstile>s\n  sr.Rf\n   (grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St'))\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) -\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')", "using delete"], ["proof (prove)\nusing this:\n  I \\<Turnstile>s\n  sr.Rf\n   (grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St'))\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) -\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')\n  \\<subseteq> sr.Rf\n               (grounding_of_clss\n                 (N_of_state St' \\<union> P_of_state St' \\<union>\n                  Q_of_state St'))\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) -\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')", "by (blast intro: true_clss_mono)"], ["proof (state)\nthis:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) -\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union>\n      Q_of_state St') \\<Longrightarrow>\n    I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)", "then"], ["proof (chain)\npicking this:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) -\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')", "show \"I \\<Turnstile>s ?gSt\""], ["proof (prove)\nusing this:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) -\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)", "using aft"], ["proof (prove)\nusing this:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) -\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')\n\ngoal (1 subgoal):\n 1. I \\<Turnstile>s\n    grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)", "unfolding true_clss_def"], ["proof (prove)\nusing this:\n  Ball\n   (grounding_of_clss\n     (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St) -\n    grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St'))\n   ((\\<Turnstile>) I)\n  Ball\n   (grounding_of_clss\n     (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St'))\n   ((\\<Turnstile>) I)\n\ngoal (1 subgoal):\n 1. Ball\n     (grounding_of_clss\n       (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n     ((\\<Turnstile>) I)", "by blast"], ["proof (state)\nthis:\n  I \\<Turnstile>s\n  grounding_of_clss\n   (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (I \\<Turnstile>s\n   grounding_of_clss\n    (N_of_state St' \\<union> P_of_state St' \\<union> Q_of_state St')) =\n  (I \\<Turnstile>s\n   grounding_of_clss\n    (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nAnother formulation of the part of Lemma 4.10 that states we have a theorem proving process:\n\\<close>"], ["", "lemma ground_derive_chain: \"chain (\\<leadsto>) Sts \\<Longrightarrow> chain sr_ext.derive (lmap grounding_of_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain (\\<leadsto>) Sts \\<Longrightarrow>\n    chain sr_ext.derive\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts)", "using RP_ground_derive"], ["proof (prove)\nusing this:\n  ?St \\<leadsto> ?St' \\<Longrightarrow>\n  sr_ext.derive\n   (grounding_of_clss\n     (N_of_state ?St \\<union> P_of_state ?St \\<union> Q_of_state ?St))\n   (grounding_of_clss\n     (N_of_state ?St' \\<union> P_of_state ?St' \\<union> Q_of_state ?St'))\n\ngoal (1 subgoal):\n 1. chain (\\<leadsto>) Sts \\<Longrightarrow>\n    chain sr_ext.derive\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts)", "by (simp add: chain_lmap[of \"(\\<leadsto>)\"])"], ["", "text \\<open>\nThe following is used prove to Lemma 4.11:\n\\<close>"], ["", "lemma Sup_llist_grounding_of_state_ground:\n  assumes \"C \\<in> Sup_llist (lmap grounding_of_state Sts)\"\n  shows \"is_ground_cls C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ground_cls C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_ground_cls C", "have \"\\<exists>j. enat j < llength (lmap grounding_of_state Sts)\n    \\<and> C \\<in> lnth (lmap grounding_of_state Sts) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j.\n       enat j\n       < llength\n          (lmap\n            (\\<lambda>St.\n                grounding_of_clss\n                 (N_of_state St \\<union> P_of_state St \\<union>\n                  Q_of_state St))\n            Sts) \\<and>\n       C \\<in> lnth\n                (lmap\n                  (\\<lambda>St.\n                      grounding_of_clss\n                       (N_of_state St \\<union> P_of_state St \\<union>\n                        Q_of_state St))\n                  Sts)\n                j", "using assms Sup_llist_imp_exists_index"], ["proof (prove)\nusing this:\n  C \\<in> Sup_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)\n  ?x \\<in> Sup_llist ?Xs \\<Longrightarrow>\n  \\<exists>i. enat i < llength ?Xs \\<and> ?x \\<in> lnth ?Xs i\n\ngoal (1 subgoal):\n 1. \\<exists>j.\n       enat j\n       < llength\n          (lmap\n            (\\<lambda>St.\n                grounding_of_clss\n                 (N_of_state St \\<union> P_of_state St \\<union>\n                  Q_of_state St))\n            Sts) \\<and>\n       C \\<in> lnth\n                (lmap\n                  (\\<lambda>St.\n                      grounding_of_clss\n                       (N_of_state St \\<union> P_of_state St \\<union>\n                        Q_of_state St))\n                  Sts)\n                j", "by fast"], ["proof (state)\nthis:\n  \\<exists>j.\n     enat j\n     < llength\n        (lmap\n          (\\<lambda>St.\n              grounding_of_clss\n               (N_of_state St \\<union> P_of_state St \\<union>\n                Q_of_state St))\n          Sts) \\<and>\n     C \\<in> lnth\n              (lmap\n                (\\<lambda>St.\n                    grounding_of_clss\n                     (N_of_state St \\<union> P_of_state St \\<union>\n                      Q_of_state St))\n                Sts)\n              j\n\ngoal (1 subgoal):\n 1. is_ground_cls C", "then"], ["proof (chain)\npicking this:\n  \\<exists>j.\n     enat j\n     < llength\n        (lmap\n          (\\<lambda>St.\n              grounding_of_clss\n               (N_of_state St \\<union> P_of_state St \\<union>\n                Q_of_state St))\n          Sts) \\<and>\n     C \\<in> lnth\n              (lmap\n                (\\<lambda>St.\n                    grounding_of_clss\n                     (N_of_state St \\<union> P_of_state St \\<union>\n                      Q_of_state St))\n                Sts)\n              j", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>j.\n     enat j\n     < llength\n        (lmap\n          (\\<lambda>St.\n              grounding_of_clss\n               (N_of_state St \\<union> P_of_state St \\<union>\n                Q_of_state St))\n          Sts) \\<and>\n     C \\<in> lnth\n              (lmap\n                (\\<lambda>St.\n                    grounding_of_clss\n                     (N_of_state St \\<union> P_of_state St \\<union>\n                      Q_of_state St))\n                Sts)\n              j\n\ngoal (1 subgoal):\n 1. is_ground_cls C", "unfolding grounding_of_clss_def grounding_of_cls_def"], ["proof (prove)\nusing this:\n  \\<exists>j.\n     enat j\n     < llength\n        (lmap\n          (\\<lambda>St.\n              \\<Union>C\\<in>N_of_state St \\<union> P_of_state St \\<union>\n                            Q_of_state St.\n                 {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n          Sts) \\<and>\n     C \\<in> lnth\n              (lmap\n                (\\<lambda>St.\n                    \\<Union>C\\<in>N_of_state St \\<union>\n                                  P_of_state St \\<union>\n                                  Q_of_state St.\n                       {C \\<cdot> \\<sigma> |\\<sigma>.\n                        is_ground_subst \\<sigma>})\n                Sts)\n              j\n\ngoal (1 subgoal):\n 1. is_ground_cls C", "by auto"], ["proof (state)\nthis:\n  is_ground_cls C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Liminf_grounding_of_state_ground:\n  \"C \\<in> Liminf_llist (lmap grounding_of_state Sts) \\<Longrightarrow> is_ground_cls C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> Liminf_llist\n             (lmap\n               (\\<lambda>St.\n                   grounding_of_clss\n                    (N_of_state St \\<union> P_of_state St \\<union>\n                     Q_of_state St))\n               Sts) \\<Longrightarrow>\n    is_ground_cls C", "using Liminf_llist_subset_Sup_llist[of \"lmap grounding_of_state Sts\"]\n    Sup_llist_grounding_of_state_ground"], ["proof (prove)\nusing this:\n  Liminf_llist\n   (lmap\n     (\\<lambda>St.\n         grounding_of_clss\n          (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n     Sts)\n  \\<subseteq> Sup_llist\n               (lmap\n                 (\\<lambda>St.\n                     grounding_of_clss\n                      (N_of_state St \\<union> P_of_state St \\<union>\n                       Q_of_state St))\n                 Sts)\n  ?C \\<in> Sup_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts) \\<Longrightarrow>\n  is_ground_cls ?C\n\ngoal (1 subgoal):\n 1. C \\<in> Liminf_llist\n             (lmap\n               (\\<lambda>St.\n                   grounding_of_clss\n                    (N_of_state St \\<union> P_of_state St \\<union>\n                     Q_of_state St))\n               Sts) \\<Longrightarrow>\n    is_ground_cls C", "by blast"], ["", "lemma in_Sup_llist_in_Sup_state:\n  assumes \"C \\<in> Sup_llist (lmap grounding_of_state Sts)\"\n  shows \"\\<exists>D \\<sigma>. D \\<in> clss_of_state (Sup_state Sts) \\<and> D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>D \\<sigma>.\n       D \\<in> N_of_state (Sup_state Sts) \\<union>\n               P_of_state (Sup_state Sts) \\<union>\n               Q_of_state (Sup_state Sts) \\<and>\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>D \\<sigma>.\n       D \\<in> N_of_state (Sup_state Sts) \\<union>\n               P_of_state (Sup_state Sts) \\<union>\n               Q_of_state (Sup_state Sts) \\<and>\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "from assms"], ["proof (chain)\npicking this:\n  C \\<in> Sup_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)", "obtain i where\n    i_p: \"enat i < llength Sts \\<and> C \\<in> lnth (lmap grounding_of_state Sts) i\""], ["proof (prove)\nusing this:\n  C \\<in> Sup_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        enat i < llength Sts \\<and>\n        C \\<in> lnth\n                 (lmap\n                   (\\<lambda>St.\n                       grounding_of_clss\n                        (N_of_state St \\<union> P_of_state St \\<union>\n                         Q_of_state St))\n                   Sts)\n                 i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using Sup_llist_imp_exists_index"], ["proof (prove)\nusing this:\n  C \\<in> Sup_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)\n  ?x \\<in> Sup_llist ?Xs \\<Longrightarrow>\n  \\<exists>i. enat i < llength ?Xs \\<and> ?x \\<in> lnth ?Xs i\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        enat i < llength Sts \\<and>\n        C \\<in> lnth\n                 (lmap\n                   (\\<lambda>St.\n                       grounding_of_clss\n                        (N_of_state St \\<union> P_of_state St \\<union>\n                         Q_of_state St))\n                   Sts)\n                 i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  enat i < llength Sts \\<and>\n  C \\<in> lnth\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)\n           i\n\ngoal (1 subgoal):\n 1. \\<exists>D \\<sigma>.\n       D \\<in> N_of_state (Sup_state Sts) \\<union>\n               P_of_state (Sup_state Sts) \\<union>\n               Q_of_state (Sup_state Sts) \\<and>\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "then"], ["proof (chain)\npicking this:\n  enat i < llength Sts \\<and>\n  C \\<in> lnth\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)\n           i", "obtain D \\<sigma> where\n    \"D \\<in> clss_of_state (lnth Sts i) \\<and> D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\""], ["proof (prove)\nusing this:\n  enat i < llength Sts \\<and>\n  C \\<in> lnth\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)\n           i\n\ngoal (1 subgoal):\n 1. (\\<And>D \\<sigma>.\n        D \\<in> N_of_state (lnth Sts i) \\<union>\n                P_of_state (lnth Sts i) \\<union>\n                Q_of_state (lnth Sts i) \\<and>\n        D \\<cdot> \\<sigma> = C \\<and>\n        is_ground_subst \\<sigma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  enat i < llength Sts \\<and>\n  C \\<in> lnth\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)\n           i\n  C \\<in> Sup_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)\n\ngoal (1 subgoal):\n 1. (\\<And>D \\<sigma>.\n        D \\<in> N_of_state (lnth Sts i) \\<union>\n                P_of_state (lnth Sts i) \\<union>\n                Q_of_state (lnth Sts i) \\<and>\n        D \\<cdot> \\<sigma> = C \\<and>\n        is_ground_subst \\<sigma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding grounding_of_clss_def grounding_of_cls_def"], ["proof (prove)\nusing this:\n  enat i < llength Sts \\<and>\n  C \\<in> lnth\n           (lmap\n             (\\<lambda>St.\n                 \\<Union>C\\<in>N_of_state St \\<union> P_of_state St \\<union>\n                               Q_of_state St.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             Sts)\n           i\n  C \\<in> Sup_llist\n           (lmap\n             (\\<lambda>St.\n                 \\<Union>C\\<in>N_of_state St \\<union> P_of_state St \\<union>\n                               Q_of_state St.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             Sts)\n\ngoal (1 subgoal):\n 1. (\\<And>D \\<sigma>.\n        D \\<in> N_of_state (lnth Sts i) \\<union>\n                P_of_state (lnth Sts i) \\<union>\n                Q_of_state (lnth Sts i) \\<and>\n        D \\<cdot> \\<sigma> = C \\<and>\n        is_ground_subst \\<sigma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  D \\<in> N_of_state (lnth Sts i) \\<union> P_of_state (lnth Sts i) \\<union>\n          Q_of_state (lnth Sts i) \\<and>\n  D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>D \\<sigma>.\n       D \\<in> N_of_state (Sup_state Sts) \\<union>\n               P_of_state (Sup_state Sts) \\<union>\n               Q_of_state (Sup_state Sts) \\<and>\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "then"], ["proof (chain)\npicking this:\n  D \\<in> N_of_state (lnth Sts i) \\<union> P_of_state (lnth Sts i) \\<union>\n          Q_of_state (lnth Sts i) \\<and>\n  D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "have \"D \\<in> clss_of_state (Sup_state Sts) \\<and> D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\""], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (lnth Sts i) \\<union> P_of_state (lnth Sts i) \\<union>\n          Q_of_state (lnth Sts i) \\<and>\n  D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. D \\<in> N_of_state (Sup_state Sts) \\<union>\n            P_of_state (Sup_state Sts) \\<union>\n            Q_of_state (Sup_state Sts) \\<and>\n    D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "using i_p"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (lnth Sts i) \\<union> P_of_state (lnth Sts i) \\<union>\n          Q_of_state (lnth Sts i) \\<and>\n  D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n  enat i < llength Sts \\<and>\n  C \\<in> lnth\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)\n           i\n\ngoal (1 subgoal):\n 1. D \\<in> N_of_state (Sup_state Sts) \\<union>\n            P_of_state (Sup_state Sts) \\<union>\n            Q_of_state (Sup_state Sts) \\<and>\n    D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "unfolding Sup_state_def"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (lnth Sts i) \\<union> P_of_state (lnth Sts i) \\<union>\n          Q_of_state (lnth Sts i) \\<and>\n  D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n  enat i < llength Sts \\<and>\n  C \\<in> lnth\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)\n           i\n\ngoal (1 subgoal):\n 1. D \\<in> N_of_state\n             (Sup_llist (lmap N_of_state Sts),\n              Sup_llist (lmap P_of_state Sts),\n              Sup_llist (lmap Q_of_state Sts)) \\<union>\n            P_of_state\n             (Sup_llist (lmap N_of_state Sts),\n              Sup_llist (lmap P_of_state Sts),\n              Sup_llist (lmap Q_of_state Sts)) \\<union>\n            Q_of_state\n             (Sup_llist (lmap N_of_state Sts),\n              Sup_llist (lmap P_of_state Sts),\n              Sup_llist (lmap Q_of_state Sts)) \\<and>\n    D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "by (metis (no_types, lifting) UnCI UnE contra_subsetD N_of_state.simps P_of_state.simps\n        Q_of_state.simps llength_lmap lnth_lmap lnth_subset_Sup_llist)"], ["proof (state)\nthis:\n  D \\<in> N_of_state (Sup_state Sts) \\<union>\n          P_of_state (Sup_state Sts) \\<union>\n          Q_of_state (Sup_state Sts) \\<and>\n  D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>D \\<sigma>.\n       D \\<in> N_of_state (Sup_state Sts) \\<union>\n               P_of_state (Sup_state Sts) \\<union>\n               Q_of_state (Sup_state Sts) \\<and>\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "then"], ["proof (chain)\npicking this:\n  D \\<in> N_of_state (Sup_state Sts) \\<union>\n          P_of_state (Sup_state Sts) \\<union>\n          Q_of_state (Sup_state Sts) \\<and>\n  D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "show ?thesis"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (Sup_state Sts) \\<union>\n          P_of_state (Sup_state Sts) \\<union>\n          Q_of_state (Sup_state Sts) \\<and>\n  D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>D \\<sigma>.\n       D \\<in> N_of_state (Sup_state Sts) \\<union>\n               P_of_state (Sup_state Sts) \\<union>\n               Q_of_state (Sup_state Sts) \\<and>\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "by auto"], ["proof (state)\nthis:\n  \\<exists>D \\<sigma>.\n     D \\<in> N_of_state (Sup_state Sts) \\<union>\n             P_of_state (Sup_state Sts) \\<union>\n             Q_of_state (Sup_state Sts) \\<and>\n     D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\n  N_of_state_Liminf: \"N_of_state (Liminf_state Sts) = Liminf_llist (lmap N_of_state Sts)\" and\n  P_of_state_Liminf: \"P_of_state (Liminf_state Sts) = Liminf_llist (lmap P_of_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N_of_state (Liminf_state Sts) = Liminf_llist (lmap N_of_state Sts) &&&\n    P_of_state (Liminf_state Sts) = Liminf_llist (lmap P_of_state Sts)", "unfolding Liminf_state_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. N_of_state\n     (Liminf_llist (lmap N_of_state Sts),\n      Liminf_llist (lmap P_of_state Sts),\n      Liminf_llist (lmap Q_of_state Sts)) =\n    Liminf_llist (lmap N_of_state Sts) &&&\n    P_of_state\n     (Liminf_llist (lmap N_of_state Sts),\n      Liminf_llist (lmap P_of_state Sts),\n      Liminf_llist (lmap Q_of_state Sts)) =\n    Liminf_llist (lmap P_of_state Sts)", "by auto"], ["", "lemma eventually_removed_from_N:\n  assumes\n    d_in: \"D \\<in> N_of_state (lnth Sts i)\" and\n    fair: \"fair_state_seq Sts\" and\n    i_Sts: \"enat i < llength Sts\"\n  shows \"\\<exists>l. D \\<in> N_of_state (lnth Sts l) \\<and> D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and> i \\<le> l\n    \\<and> enat (Suc l) < llength Sts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l.\n       D \\<in> N_of_state (lnth Sts l) \\<and>\n       D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n       i \\<le> l \\<and> enat (Suc l) < llength Sts", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>l.\n       D \\<in> N_of_state (lnth Sts l) \\<and>\n       D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n       i \\<le> l \\<and> enat (Suc l) < llength Sts \\<Longrightarrow>\n    False", "assume a: \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<nexists>l.\n     D \\<in> N_of_state (lnth Sts l) \\<and>\n     D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n     i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. \\<nexists>l.\n       D \\<in> N_of_state (lnth Sts l) \\<and>\n       D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n       i \\<le> l \\<and> enat (Suc l) < llength Sts \\<Longrightarrow>\n    False", "have \"i \\<le> l \\<Longrightarrow> enat l < llength Sts \\<Longrightarrow> D \\<in> N_of_state (lnth Sts l)\" for l"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> l; enat l < llength Sts\\<rbrakk>\n    \\<Longrightarrow> D \\<in> N_of_state (lnth Sts l)", "using d_in"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (lnth Sts i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> l; enat l < llength Sts\\<rbrakk>\n    \\<Longrightarrow> D \\<in> N_of_state (lnth Sts l)", "by (induction l, blast, metis a Suc_ile_eq le_SucE less_imp_le)"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<le> ?l; enat ?l < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> N_of_state (lnth Sts ?l)\n\ngoal (1 subgoal):\n 1. \\<nexists>l.\n       D \\<in> N_of_state (lnth Sts l) \\<and>\n       D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n       i \\<le> l \\<and> enat (Suc l) < llength Sts \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>i \\<le> ?l; enat ?l < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> N_of_state (lnth Sts ?l)", "have \"D \\<in> Liminf_llist (lmap N_of_state Sts)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<le> ?l; enat ?l < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> N_of_state (lnth Sts ?l)\n\ngoal (1 subgoal):\n 1. D \\<in> Liminf_llist (lmap N_of_state Sts)", "unfolding Liminf_llist_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<le> ?l; enat ?l < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> N_of_state (lnth Sts ?l)\n\ngoal (1 subgoal):\n 1. D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap N_of_state Sts)}.\n                \\<Inter>\n                 (lnth (lmap N_of_state Sts) `\n                  {j. i \\<le> j \\<and>\n                      enat j < llength (lmap N_of_state Sts)}))", "using i_Sts"], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<le> ?l; enat ?l < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> N_of_state (lnth Sts ?l)\n  enat i < llength Sts\n\ngoal (1 subgoal):\n 1. D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap N_of_state Sts)}.\n                \\<Inter>\n                 (lnth (lmap N_of_state Sts) `\n                  {j. i \\<le> j \\<and>\n                      enat j < llength (lmap N_of_state Sts)}))", "by auto"], ["proof (state)\nthis:\n  D \\<in> Liminf_llist (lmap N_of_state Sts)\n\ngoal (1 subgoal):\n 1. \\<nexists>l.\n       D \\<in> N_of_state (lnth Sts l) \\<and>\n       D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n       i \\<le> l \\<and> enat (Suc l) < llength Sts \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  D \\<in> Liminf_llist (lmap N_of_state Sts)", "show False"], ["proof (prove)\nusing this:\n  D \\<in> Liminf_llist (lmap N_of_state Sts)\n\ngoal (1 subgoal):\n 1. False", "using fair"], ["proof (prove)\nusing this:\n  D \\<in> Liminf_llist (lmap N_of_state Sts)\n  fair_state_seq Sts\n\ngoal (1 subgoal):\n 1. False", "unfolding fair_state_seq_def"], ["proof (prove)\nusing this:\n  D \\<in> Liminf_llist (lmap N_of_state Sts)\n  N_of_state (Liminf_state Sts) = {} \\<and>\n  P_of_state (Liminf_state Sts) = {}\n\ngoal (1 subgoal):\n 1. False", "by (simp add: N_of_state_Liminf)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eventually_removed_from_P:\n  assumes\n    d_in: \"D \\<in> P_of_state (lnth Sts i)\" and\n    fair: \"fair_state_seq Sts\" and\n    i_Sts: \"enat i < llength Sts\"\n  shows \"\\<exists>l. D \\<in> P_of_state (lnth Sts l) \\<and> D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and> i \\<le> l\n    \\<and> enat (Suc l) < llength Sts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l.\n       D \\<in> P_of_state (lnth Sts l) \\<and>\n       D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n       i \\<le> l \\<and> enat (Suc l) < llength Sts", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>l.\n       D \\<in> P_of_state (lnth Sts l) \\<and>\n       D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n       i \\<le> l \\<and> enat (Suc l) < llength Sts \\<Longrightarrow>\n    False", "assume a: \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<nexists>l.\n     D \\<in> P_of_state (lnth Sts l) \\<and>\n     D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n     i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. \\<nexists>l.\n       D \\<in> P_of_state (lnth Sts l) \\<and>\n       D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n       i \\<le> l \\<and> enat (Suc l) < llength Sts \\<Longrightarrow>\n    False", "have \"i \\<le> l \\<Longrightarrow> enat l < llength Sts \\<Longrightarrow> D \\<in> P_of_state (lnth Sts l)\" for l"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> l; enat l < llength Sts\\<rbrakk>\n    \\<Longrightarrow> D \\<in> P_of_state (lnth Sts l)", "using d_in"], ["proof (prove)\nusing this:\n  D \\<in> P_of_state (lnth Sts i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> l; enat l < llength Sts\\<rbrakk>\n    \\<Longrightarrow> D \\<in> P_of_state (lnth Sts l)", "by (induction l, blast, metis a Suc_ile_eq le_SucE less_imp_le)"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<le> ?l; enat ?l < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> P_of_state (lnth Sts ?l)\n\ngoal (1 subgoal):\n 1. \\<nexists>l.\n       D \\<in> P_of_state (lnth Sts l) \\<and>\n       D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n       i \\<le> l \\<and> enat (Suc l) < llength Sts \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>i \\<le> ?l; enat ?l < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> P_of_state (lnth Sts ?l)", "have \"D \\<in> Liminf_llist (lmap P_of_state Sts)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<le> ?l; enat ?l < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> P_of_state (lnth Sts ?l)\n\ngoal (1 subgoal):\n 1. D \\<in> Liminf_llist (lmap P_of_state Sts)", "unfolding Liminf_llist_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<le> ?l; enat ?l < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> P_of_state (lnth Sts ?l)\n\ngoal (1 subgoal):\n 1. D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap P_of_state Sts)}.\n                \\<Inter>\n                 (lnth (lmap P_of_state Sts) `\n                  {j. i \\<le> j \\<and>\n                      enat j < llength (lmap P_of_state Sts)}))", "using i_Sts"], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<le> ?l; enat ?l < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> P_of_state (lnth Sts ?l)\n  enat i < llength Sts\n\ngoal (1 subgoal):\n 1. D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap P_of_state Sts)}.\n                \\<Inter>\n                 (lnth (lmap P_of_state Sts) `\n                  {j. i \\<le> j \\<and>\n                      enat j < llength (lmap P_of_state Sts)}))", "by auto"], ["proof (state)\nthis:\n  D \\<in> Liminf_llist (lmap P_of_state Sts)\n\ngoal (1 subgoal):\n 1. \\<nexists>l.\n       D \\<in> P_of_state (lnth Sts l) \\<and>\n       D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n       i \\<le> l \\<and> enat (Suc l) < llength Sts \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  D \\<in> Liminf_llist (lmap P_of_state Sts)", "show False"], ["proof (prove)\nusing this:\n  D \\<in> Liminf_llist (lmap P_of_state Sts)\n\ngoal (1 subgoal):\n 1. False", "using fair"], ["proof (prove)\nusing this:\n  D \\<in> Liminf_llist (lmap P_of_state Sts)\n  fair_state_seq Sts\n\ngoal (1 subgoal):\n 1. False", "unfolding fair_state_seq_def"], ["proof (prove)\nusing this:\n  D \\<in> Liminf_llist (lmap P_of_state Sts)\n  N_of_state (Liminf_state Sts) = {} \\<and>\n  P_of_state (Liminf_state Sts) = {}\n\ngoal (1 subgoal):\n 1. False", "by (simp add: P_of_state_Liminf)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma instance_if_subsumed_and_in_limit:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    ns: \"Gs = lmap grounding_of_state Sts\" and\n    c: \"C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\" and\n    d: \"D \\<in> clss_of_state (lnth Sts i)\" \"enat i < llength Sts\" \"subsumes D C\"\n  shows \"\\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "let ?Ps = \"\\<lambda>i. P_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "let ?Qs = \"\\<lambda>i. Q_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "have ground_C: \"is_ground_cls C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ground_cls C", "using c"], ["proof (prove)\nusing this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n\ngoal (1 subgoal):\n 1. is_ground_cls C", "using Liminf_grounding_of_state_ground ns"], ["proof (prove)\nusing this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n  ?C \\<in> Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts) \\<Longrightarrow>\n  is_ground_cls ?C\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. is_ground_cls C", "by auto"], ["proof (state)\nthis:\n  is_ground_cls C\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "have derivns: \"chain sr_ext.derive Gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain sr_ext.derive Gs", "using ground_derive_chain deriv ns"], ["proof (prove)\nusing this:\n  chain (\\<leadsto>) Sts \\<Longrightarrow>\n  chain sr_ext.derive\n   (lmap\n     (\\<lambda>St.\n         grounding_of_clss\n          (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n     Sts)\n  chain (\\<leadsto>) Sts\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. chain sr_ext.derive Gs", "by auto"], ["proof (state)\nthis:\n  chain sr_ext.derive Gs\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "have \"\\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<Longrightarrow> False", "assume \"\\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C\""], ["proof (state)\nthis:\n  \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<Longrightarrow> False", "from d(3)"], ["proof (chain)\npicking this:\n  subsumes D C", "obtain \\<tau>_proto where\n      \"D \\<cdot> \\<tau>_proto \\<subseteq># C\""], ["proof (prove)\nusing this:\n  subsumes D C\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>_proto.\n        D \\<cdot> \\<tau>_proto \\<subseteq># C \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding subsumes_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> \\<subseteq># C\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>_proto.\n        D \\<cdot> \\<tau>_proto \\<subseteq># C \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  D \\<cdot> \\<tau>_proto \\<subseteq># C\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  D \\<cdot> \\<tau>_proto \\<subseteq># C", "obtain \\<tau> where\n      \\<tau>_p: \"D \\<cdot> \\<tau> \\<subseteq># C \\<and> is_ground_subst \\<tau>\""], ["proof (prove)\nusing this:\n  D \\<cdot> \\<tau>_proto \\<subseteq># C\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        D \\<cdot> \\<tau> \\<subseteq># C \\<and>\n        is_ground_subst \\<tau> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ground_C"], ["proof (prove)\nusing this:\n  D \\<cdot> \\<tau>_proto \\<subseteq># C\n  is_ground_cls C\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        D \\<cdot> \\<tau> \\<subseteq># C \\<and>\n        is_ground_subst \\<tau> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis is_ground_cls_mono make_ground_subst subset_mset.order_refl)"], ["proof (state)\nthis:\n  D \\<cdot> \\<tau> \\<subseteq># C \\<and> is_ground_subst \\<tau>\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C\n  D \\<cdot> \\<tau> \\<subseteq># C \\<and> is_ground_subst \\<tau>", "have subsub: \"D \\<cdot> \\<tau> \\<subset># C\""], ["proof (prove)\nusing this:\n  \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C\n  D \\<cdot> \\<tau> \\<subseteq># C \\<and> is_ground_subst \\<tau>\n\ngoal (1 subgoal):\n 1. D \\<cdot> \\<tau> \\<subset># C", "using subset_mset.le_imp_less_or_eq"], ["proof (prove)\nusing this:\n  \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C\n  D \\<cdot> \\<tau> \\<subseteq># C \\<and> is_ground_subst \\<tau>\n  ?x \\<subseteq># ?y \\<Longrightarrow> ?x \\<subset># ?y \\<or> ?x = ?y\n\ngoal (1 subgoal):\n 1. D \\<cdot> \\<tau> \\<subset># C", "by auto"], ["proof (state)\nthis:\n  D \\<cdot> \\<tau> \\<subset># C\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  D \\<cdot> \\<tau> \\<subset># C\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<Longrightarrow> False", "have \"is_ground_subst \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ground_subst \\<tau>", "using \\<tau>_p"], ["proof (prove)\nusing this:\n  D \\<cdot> \\<tau> \\<subseteq># C \\<and> is_ground_subst \\<tau>\n\ngoal (1 subgoal):\n 1. is_ground_subst \\<tau>", "by auto"], ["proof (state)\nthis:\n  is_ground_subst \\<tau>\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  is_ground_subst \\<tau>\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<Longrightarrow> False", "have \"D \\<in> clss_of_state (lnth Sts i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<in> N_of_state (lnth Sts i) \\<union>\n            P_of_state (lnth Sts i) \\<union>\n            Q_of_state (lnth Sts i)", "using d"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (lnth Sts i) \\<union> P_of_state (lnth Sts i) \\<union>\n          Q_of_state (lnth Sts i)\n  enat i < llength Sts\n  subsumes D C\n\ngoal (1 subgoal):\n 1. D \\<in> N_of_state (lnth Sts i) \\<union>\n            P_of_state (lnth Sts i) \\<union>\n            Q_of_state (lnth Sts i)", "by auto"], ["proof (state)\nthis:\n  D \\<in> N_of_state (lnth Sts i) \\<union> P_of_state (lnth Sts i) \\<union>\n          Q_of_state (lnth Sts i)\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  D \\<cdot> \\<tau> \\<subset># C\n  is_ground_subst \\<tau>\n  D \\<in> N_of_state (lnth Sts i) \\<union> P_of_state (lnth Sts i) \\<union>\n          Q_of_state (lnth Sts i)", "have \"C \\<in> sr.Rf (grounding_of_state (lnth Sts i))\""], ["proof (prove)\nusing this:\n  D \\<cdot> \\<tau> \\<subset># C\n  is_ground_subst \\<tau>\n  D \\<in> N_of_state (lnth Sts i) \\<union> P_of_state (lnth Sts i) \\<union>\n          Q_of_state (lnth Sts i)\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf\n             (grounding_of_clss\n               (N_of_state (lnth Sts i) \\<union>\n                P_of_state (lnth Sts i) \\<union>\n                Q_of_state (lnth Sts i)))", "using strict_subset_subsumption_redundant_clss"], ["proof (prove)\nusing this:\n  D \\<cdot> \\<tau> \\<subset># C\n  is_ground_subst \\<tau>\n  D \\<in> N_of_state (lnth Sts i) \\<union> P_of_state (lnth Sts i) \\<union>\n          Q_of_state (lnth Sts i)\n  \\<lbrakk>?D \\<cdot> ?\\<sigma> \\<subset># ?C; is_ground_subst ?\\<sigma>;\n   ?D \\<in> ?CC\\<rbrakk>\n  \\<Longrightarrow> ?C \\<in> sr.Rf (grounding_of_clss ?CC)\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf\n             (grounding_of_clss\n               (N_of_state (lnth Sts i) \\<union>\n                P_of_state (lnth Sts i) \\<union>\n                Q_of_state (lnth Sts i)))", "by auto"], ["proof (state)\nthis:\n  C \\<in> sr.Rf\n           (grounding_of_clss\n             (N_of_state (lnth Sts i) \\<union>\n              P_of_state (lnth Sts i) \\<union>\n              Q_of_state (lnth Sts i)))\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  C \\<in> sr.Rf\n           (grounding_of_clss\n             (N_of_state (lnth Sts i) \\<union>\n              P_of_state (lnth Sts i) \\<union>\n              Q_of_state (lnth Sts i)))", "have \"C \\<in> sr.Rf (Sup_llist Gs)\""], ["proof (prove)\nusing this:\n  C \\<in> sr.Rf\n           (grounding_of_clss\n             (N_of_state (lnth Sts i) \\<union>\n              P_of_state (lnth Sts i) \\<union>\n              Q_of_state (lnth Sts i)))\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (Sup_llist Gs)", "using d ns"], ["proof (prove)\nusing this:\n  C \\<in> sr.Rf\n           (grounding_of_clss\n             (N_of_state (lnth Sts i) \\<union>\n              P_of_state (lnth Sts i) \\<union>\n              Q_of_state (lnth Sts i)))\n  D \\<in> N_of_state (lnth Sts i) \\<union> P_of_state (lnth Sts i) \\<union>\n          Q_of_state (lnth Sts i)\n  enat i < llength Sts\n  subsumes D C\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (Sup_llist Gs)", "by (smt contra_subsetD llength_lmap lnth_lmap lnth_subset_Sup_llist sr.Rf_mono)"], ["proof (state)\nthis:\n  C \\<in> sr.Rf (Sup_llist Gs)\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  C \\<in> sr.Rf (Sup_llist Gs)", "have \"C \\<in> sr.Rf (Liminf_llist Gs)\""], ["proof (prove)\nusing this:\n  C \\<in> sr.Rf (Sup_llist Gs)\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf (Liminf_llist Gs)", "unfolding ns"], ["proof (prove)\nusing this:\n  C \\<in> sr.Rf\n           (Sup_llist\n             (lmap\n               (\\<lambda>St.\n                   grounding_of_clss\n                    (N_of_state St \\<union> P_of_state St \\<union>\n                     Q_of_state St))\n               Sts))\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf\n             (Liminf_llist\n               (lmap\n                 (\\<lambda>St.\n                     grounding_of_clss\n                      (N_of_state St \\<union> P_of_state St \\<union>\n                       Q_of_state St))\n                 Sts))", "using local.sr_ext.Rf_limit_Sup derivns ns"], ["proof (prove)\nusing this:\n  C \\<in> sr.Rf\n           (Sup_llist\n             (lmap\n               (\\<lambda>St.\n                   grounding_of_clss\n                    (N_of_state St \\<union> P_of_state St \\<union>\n                     Q_of_state St))\n               Sts))\n  chain sr_ext.derive ?Ns \\<Longrightarrow>\n  sr.Rf (Liminf_llist ?Ns) = sr.Rf (Sup_llist ?Ns)\n  chain sr_ext.derive Gs\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. C \\<in> sr.Rf\n             (Liminf_llist\n               (lmap\n                 (\\<lambda>St.\n                     grounding_of_clss\n                      (N_of_state St \\<union> P_of_state St \\<union>\n                       Q_of_state St))\n                 Sts))", "by auto"], ["proof (state)\nthis:\n  C \\<in> sr.Rf (Liminf_llist Gs)\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  C \\<in> sr.Rf (Liminf_llist Gs)", "show False"], ["proof (prove)\nusing this:\n  C \\<in> sr.Rf (Liminf_llist Gs)\n\ngoal (1 subgoal):\n 1. False", "using c"], ["proof (prove)\nusing this:\n  C \\<in> sr.Rf (Liminf_llist Gs)\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C", "obtain \\<sigma> where\n    \"D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        D \\<cdot> \\<sigma> = C \\<and>\n        is_ground_subst \\<sigma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ground_C"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C\n  is_ground_cls C\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        D \\<cdot> \\<sigma> = C \\<and>\n        is_ground_subst \\<sigma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis make_ground_subst)"], ["proof (state)\nthis:\n  D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "then"], ["proof (chain)\npicking this:\n  D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "show ?thesis"], ["proof (prove)\nusing this:\n  D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma from_Q_to_Q_inf:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    ns: \"Gs = lmap grounding_of_state Sts\" and\n    c: \"C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\" and\n    d: \"D \\<in> Q_of_state (lnth Sts i)\" \"enat i < llength Sts\" \"subsumes D C\" and\n    d_least: \"\\<forall>E \\<in> {E. E \\<in> (clss_of_state (Sup_state Sts)) \\<and> subsumes E C}.\n      \\<not> strictly_subsumes E D\"\n  shows \"D \\<in> Q_of_state (Liminf_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "let ?Ps = \"\\<lambda>i. P_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "let ?Qs = \"\\<lambda>i. Q_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "have ground_C: \"is_ground_cls C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ground_cls C", "using c"], ["proof (prove)\nusing this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n\ngoal (1 subgoal):\n 1. is_ground_cls C", "using Liminf_grounding_of_state_ground ns"], ["proof (prove)\nusing this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n  ?C \\<in> Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts) \\<Longrightarrow>\n  is_ground_cls ?C\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. is_ground_cls C", "by auto"], ["proof (state)\nthis:\n  is_ground_cls C\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "have derivns: \"chain sr_ext.derive Gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain sr_ext.derive Gs", "using ground_derive_chain deriv ns"], ["proof (prove)\nusing this:\n  chain (\\<leadsto>) Sts \\<Longrightarrow>\n  chain sr_ext.derive\n   (lmap\n     (\\<lambda>St.\n         grounding_of_clss\n          (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n     Sts)\n  chain (\\<leadsto>) Sts\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. chain sr_ext.derive Gs", "by auto"], ["proof (state)\nthis:\n  chain sr_ext.derive Gs\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "have \"\\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "using instance_if_subsumed_and_in_limit[OF deriv] c d"], ["proof (prove)\nusing this:\n  \\<lbrakk>?Gs =\n           lmap\n            (\\<lambda>St.\n                grounding_of_clss\n                 (N_of_state St \\<union> P_of_state St \\<union>\n                  Q_of_state St))\n            Sts;\n   ?C \\<in> Liminf_llist ?Gs - sr.Rf (Liminf_llist ?Gs);\n   ?D \\<in> N_of_state (lnth Sts ?i) \\<union>\n            P_of_state (lnth Sts ?i) \\<union>\n            Q_of_state (lnth Sts ?i);\n   enat ?i < llength Sts; subsumes ?D ?C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>.\n                       ?D \\<cdot> \\<sigma> = ?C \\<and>\n                       is_ground_subst \\<sigma>\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n  D \\<in> Q_of_state (lnth Sts i)\n  enat i < llength Sts\n  subsumes D C\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "unfolding ns"], ["proof (prove)\nusing this:\n  \\<lbrakk>?Gs =\n           lmap\n            (\\<lambda>St.\n                grounding_of_clss\n                 (N_of_state St \\<union> P_of_state St \\<union>\n                  Q_of_state St))\n            Sts;\n   ?C \\<in> Liminf_llist ?Gs - sr.Rf (Liminf_llist ?Gs);\n   ?D \\<in> N_of_state (lnth Sts ?i) \\<union>\n            P_of_state (lnth Sts ?i) \\<union>\n            Q_of_state (lnth Sts ?i);\n   enat ?i < llength Sts; subsumes ?D ?C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>.\n                       ?D \\<cdot> \\<sigma> = ?C \\<and>\n                       is_ground_subst \\<sigma>\n  C \\<in> Liminf_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts) -\n          sr.Rf\n           (Liminf_llist\n             (lmap\n               (\\<lambda>St.\n                   grounding_of_clss\n                    (N_of_state St \\<union> P_of_state St \\<union>\n                     Q_of_state St))\n               Sts))\n  D \\<in> Q_of_state (lnth Sts i)\n  enat i < llength Sts\n  subsumes D C\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "obtain \\<sigma> where\n    \\<sigma>: \"D \\<cdot> \\<sigma> = C\" \"is_ground_subst \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<lbrakk>D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "have in_Sts_in_Sts_Suc:\n    \"\\<forall>l \\<ge> i. enat (Suc l) < llength Sts \\<longrightarrow> D \\<in> Q_of_state (lnth Sts l) \\<longrightarrow>\n       D \\<in> Q_of_state (lnth Sts (Suc l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<ge>i.\n       enat (Suc l) < llength Sts \\<longrightarrow>\n       D \\<in> Q_of_state (lnth Sts l) \\<longrightarrow>\n       D \\<in> Q_of_state (lnth Sts (Suc l))", "proof (rule, rule, rule, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>i \\<le> l; enat (Suc l) < llength Sts;\n        D \\<in> Q_of_state (lnth Sts l)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>i \\<le> l; enat (Suc l) < llength Sts;\n        D \\<in> Q_of_state (lnth Sts l)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "assume\n      len: \"i \\<le> l\" and\n      llen: \"enat (Suc l) < llength Sts\" and\n      d_in_q: \"D \\<in> Q_of_state (lnth Sts l)\""], ["proof (state)\nthis:\n  i \\<le> l\n  enat (Suc l) < llength Sts\n  D \\<in> Q_of_state (lnth Sts l)\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>i \\<le> l; enat (Suc l) < llength Sts;\n        D \\<in> Q_of_state (lnth Sts l)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "have \"lnth Sts l \\<leadsto> lnth Sts (Suc l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lnth Sts l \\<leadsto> lnth Sts (Suc l)", "using llen deriv chain_lnth_rel"], ["proof (prove)\nusing this:\n  enat (Suc l) < llength Sts\n  chain (\\<leadsto>) Sts\n  \\<lbrakk>chain ?R ?xs; enat (Suc ?j) < llength ?xs\\<rbrakk>\n  \\<Longrightarrow> ?R (lnth ?xs ?j) (lnth ?xs (Suc ?j))\n\ngoal (1 subgoal):\n 1. lnth Sts l \\<leadsto> lnth Sts (Suc l)", "by blast"], ["proof (state)\nthis:\n  lnth Sts l \\<leadsto> lnth Sts (Suc l)\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>i \\<le> l; enat (Suc l) < llength Sts;\n        D \\<in> Q_of_state (lnth Sts l)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "then"], ["proof (chain)\npicking this:\n  lnth Sts l \\<leadsto> lnth Sts (Suc l)", "show \"D \\<in> Q_of_state (lnth Sts (Suc l))\""], ["proof (prove)\nusing this:\n  lnth Sts l \\<leadsto> lnth Sts (Suc l)\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (lnth Sts (Suc l))", "proof (cases rule: RP.cases)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "case (backward_subsumption_Q D' N D_removed P Q)"], ["proof (state)\nthis:\n  lnth Sts l = (N, P, Q \\<union> {D_removed})\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> N\n  strictly_subsumes D' D_removed\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "moreover"], ["proof (state)\nthis:\n  lnth Sts l = (N, P, Q \\<union> {D_removed})\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> N\n  strictly_subsumes D' D_removed\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "{"], ["proof (state)\nthis:\n  lnth Sts l = (N, P, Q \\<union> {D_removed})\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> N\n  strictly_subsumes D' D_removed\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "assume \"D_removed = D\""], ["proof (state)\nthis:\n  D_removed = D\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "then"], ["proof (chain)\npicking this:\n  D_removed = D", "obtain D_subsumes where\n          D_subsumes_p: \"D_subsumes \\<in> N \\<and> strictly_subsumes D_subsumes D\""], ["proof (prove)\nusing this:\n  D_removed = D\n\ngoal (1 subgoal):\n 1. (\\<And>D_subsumes.\n        D_subsumes \\<in> N \\<and>\n        strictly_subsumes D_subsumes D \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using backward_subsumption_Q"], ["proof (prove)\nusing this:\n  D_removed = D\n  lnth Sts l = (N, P, Q \\<union> {D_removed})\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> N\n  strictly_subsumes D' D_removed\n\ngoal (1 subgoal):\n 1. (\\<And>D_subsumes.\n        D_subsumes \\<in> N \\<and>\n        strictly_subsumes D_subsumes D \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  D_subsumes \\<in> N \\<and> strictly_subsumes D_subsumes D\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "moreover"], ["proof (state)\nthis:\n  D_subsumes \\<in> N \\<and> strictly_subsumes D_subsumes D\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "from D_subsumes_p"], ["proof (chain)\npicking this:\n  D_subsumes \\<in> N \\<and> strictly_subsumes D_subsumes D", "have \"subsumes D_subsumes C\""], ["proof (prove)\nusing this:\n  D_subsumes \\<in> N \\<and> strictly_subsumes D_subsumes D\n\ngoal (1 subgoal):\n 1. subsumes D_subsumes C", "using d subsumes_trans"], ["proof (prove)\nusing this:\n  D_subsumes \\<in> N \\<and> strictly_subsumes D_subsumes D\n  D \\<in> Q_of_state (lnth Sts i)\n  enat i < llength Sts\n  subsumes D C\n  \\<lbrakk>subsumes ?C ?D; subsumes ?D ?E\\<rbrakk>\n  \\<Longrightarrow> subsumes ?C ?E\n\ngoal (1 subgoal):\n 1. subsumes D_subsumes C", "unfolding strictly_subsumes_def"], ["proof (prove)\nusing this:\n  D_subsumes \\<in> N \\<and>\n  subsumes D_subsumes D \\<and> \\<not> subsumes D D_subsumes\n  D \\<in> Q_of_state (lnth Sts i)\n  enat i < llength Sts\n  subsumes D C\n  \\<lbrakk>subsumes ?C ?D; subsumes ?D ?E\\<rbrakk>\n  \\<Longrightarrow> subsumes ?C ?E\n\ngoal (1 subgoal):\n 1. subsumes D_subsumes C", "by blast"], ["proof (state)\nthis:\n  subsumes D_subsumes C\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "moreover"], ["proof (state)\nthis:\n  subsumes D_subsumes C\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "from backward_subsumption_Q"], ["proof (chain)\npicking this:\n  lnth Sts l = (N, P, Q \\<union> {D_removed})\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> N\n  strictly_subsumes D' D_removed", "have \"D_subsumes \\<in> clss_of_state (Sup_state Sts)\""], ["proof (prove)\nusing this:\n  lnth Sts l = (N, P, Q \\<union> {D_removed})\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> N\n  strictly_subsumes D' D_removed\n\ngoal (1 subgoal):\n 1. D_subsumes\n    \\<in> N_of_state (Sup_state Sts) \\<union>\n          P_of_state (Sup_state Sts) \\<union>\n          Q_of_state (Sup_state Sts)", "using D_subsumes_p llen"], ["proof (prove)\nusing this:\n  lnth Sts l = (N, P, Q \\<union> {D_removed})\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> N\n  strictly_subsumes D' D_removed\n  D_subsumes \\<in> N \\<and> strictly_subsumes D_subsumes D\n  enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. D_subsumes\n    \\<in> N_of_state (Sup_state Sts) \\<union>\n          P_of_state (Sup_state Sts) \\<union>\n          Q_of_state (Sup_state Sts)", "by (metis (no_types) UnI1 N_of_state.simps llength_lmap lnth_lmap lnth_subset_Sup_llist\n              rev_subsetD Sup_state_def)"], ["proof (state)\nthis:\n  D_subsumes\n  \\<in> N_of_state (Sup_state Sts) \\<union>\n        P_of_state (Sup_state Sts) \\<union>\n        Q_of_state (Sup_state Sts)\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "ultimately"], ["proof (chain)\npicking this:\n  D_subsumes \\<in> N \\<and> strictly_subsumes D_subsumes D\n  subsumes D_subsumes C\n  D_subsumes\n  \\<in> N_of_state (Sup_state Sts) \\<union>\n        P_of_state (Sup_state Sts) \\<union>\n        Q_of_state (Sup_state Sts)", "have False"], ["proof (prove)\nusing this:\n  D_subsumes \\<in> N \\<and> strictly_subsumes D_subsumes D\n  subsumes D_subsumes C\n  D_subsumes\n  \\<in> N_of_state (Sup_state Sts) \\<union>\n        P_of_state (Sup_state Sts) \\<union>\n        Q_of_state (Sup_state Sts)\n\ngoal (1 subgoal):\n 1. False", "using d_least"], ["proof (prove)\nusing this:\n  D_subsumes \\<in> N \\<and> strictly_subsumes D_subsumes D\n  subsumes D_subsumes C\n  D_subsumes\n  \\<in> N_of_state (Sup_state Sts) \\<union>\n        P_of_state (Sup_state Sts) \\<union>\n        Q_of_state (Sup_state Sts)\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n\ngoal (1 subgoal):\n 1. False", "unfolding subsumes_def"], ["proof (prove)\nusing this:\n  D_subsumes \\<in> N \\<and> strictly_subsumes D_subsumes D\n  \\<exists>\\<sigma>. D_subsumes \\<cdot> \\<sigma> \\<subseteq># C\n  D_subsumes\n  \\<in> N_of_state (Sup_state Sts) \\<union>\n        P_of_state (Sup_state Sts) \\<union>\n        Q_of_state (Sup_state Sts)\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  \\<exists>\\<sigma>. E \\<cdot> \\<sigma> \\<subseteq># C}.\n     \\<not> strictly_subsumes E D\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "}"], ["proof (state)\nthis:\n  D_removed = D \\<Longrightarrow> False\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "ultimately"], ["proof (chain)\npicking this:\n  lnth Sts l = (N, P, Q \\<union> {D_removed})\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> N\n  strictly_subsumes D' D_removed\n  D_removed = D \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  lnth Sts l = (N, P, Q \\<union> {D_removed})\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> N\n  strictly_subsumes D' D_removed\n  D_removed = D \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (lnth Sts (Suc l))", "using d_in_q"], ["proof (prove)\nusing this:\n  lnth Sts l = (N, P, Q \\<union> {D_removed})\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> N\n  strictly_subsumes D' D_removed\n  D_removed = D \\<Longrightarrow> False\n  D \\<in> Q_of_state (lnth Sts l)\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (lnth Sts (Suc l))", "by auto"], ["proof (state)\nthis:\n  D \\<in> Q_of_state (lnth Sts (Suc l))\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "case (backward_reduction_Q E L' N L \\<sigma> D' P Q)"], ["proof (state)\nthis:\n  lnth Sts l = (N, P, Q \\<union> {D' + {#L#}})\n  lnth Sts (Suc l) = (N, P \\<union> {D'}, Q)\n  E + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  E \\<cdot> \\<sigma> \\<subseteq># D'\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "{"], ["proof (state)\nthis:\n  lnth Sts l = (N, P, Q \\<union> {D' + {#L#}})\n  lnth Sts (Suc l) = (N, P \\<union> {D'}, Q)\n  E + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  E \\<cdot> \\<sigma> \\<subseteq># D'\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "assume \"D' + {#L#} = D\""], ["proof (state)\nthis:\n  D' + {#L#} = D\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "then"], ["proof (chain)\npicking this:\n  D' + {#L#} = D", "have D'_p: \"strictly_subsumes D' D \\<and> D' \\<in> ?Ps (Suc l)\""], ["proof (prove)\nusing this:\n  D' + {#L#} = D\n\ngoal (1 subgoal):\n 1. strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))", "using subset_strictly_subsumes[of D' D] backward_reduction_Q"], ["proof (prove)\nusing this:\n  D' + {#L#} = D\n  D' \\<subset># D \\<Longrightarrow> strictly_subsumes D' D\n  lnth Sts l = (N, P, Q \\<union> {D' + {#L#}})\n  lnth Sts (Suc l) = (N, P \\<union> {D'}, Q)\n  E + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  E \\<cdot> \\<sigma> \\<subseteq># D'\n\ngoal (1 subgoal):\n 1. strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))", "by auto"], ["proof (state)\nthis:\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "then"], ["proof (chain)\npicking this:\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))", "have subc: \"subsumes D' C\""], ["proof (prove)\nusing this:\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))\n\ngoal (1 subgoal):\n 1. subsumes D' C", "using d(3) subsumes_trans"], ["proof (prove)\nusing this:\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))\n  subsumes D C\n  \\<lbrakk>subsumes ?C ?D; subsumes ?D ?E\\<rbrakk>\n  \\<Longrightarrow> subsumes ?C ?E\n\ngoal (1 subgoal):\n 1. subsumes D' C", "unfolding strictly_subsumes_def"], ["proof (prove)\nusing this:\n  (subsumes D' D \\<and> \\<not> subsumes D D') \\<and>\n  D' \\<in> P_of_state (lnth Sts (Suc l))\n  subsumes D C\n  \\<lbrakk>subsumes ?C ?D; subsumes ?D ?E\\<rbrakk>\n  \\<Longrightarrow> subsumes ?C ?E\n\ngoal (1 subgoal):\n 1. subsumes D' C", "by auto"], ["proof (state)\nthis:\n  subsumes D' C\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "from D'_p"], ["proof (chain)\npicking this:\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))", "have \"D' \\<in> clss_of_state (Sup_state Sts)\""], ["proof (prove)\nusing this:\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))\n\ngoal (1 subgoal):\n 1. D' \\<in> N_of_state (Sup_state Sts) \\<union>\n             P_of_state (Sup_state Sts) \\<union>\n             Q_of_state (Sup_state Sts)", "using llen"], ["proof (prove)\nusing this:\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))\n  enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. D' \\<in> N_of_state (Sup_state Sts) \\<union>\n             P_of_state (Sup_state Sts) \\<union>\n             Q_of_state (Sup_state Sts)", "by (metis (no_types) UnI1 P_of_state.simps llength_lmap lnth_lmap\n              lnth_subset_Sup_llist subsetCE sup_ge2 Sup_state_def)"], ["proof (state)\nthis:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "then"], ["proof (chain)\npicking this:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)", "have False"], ["proof (prove)\nusing this:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)\n\ngoal (1 subgoal):\n 1. False", "using d_least D'_p subc"], ["proof (prove)\nusing this:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))\n  subsumes D' C\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "}"], ["proof (state)\nthis:\n  D' + {#L#} = D \\<Longrightarrow> False\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "then"], ["proof (chain)\npicking this:\n  D' + {#L#} = D \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  D' + {#L#} = D \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (lnth Sts (Suc l))", "using backward_reduction_Q d_in_q"], ["proof (prove)\nusing this:\n  D' + {#L#} = D \\<Longrightarrow> False\n  lnth Sts l = (N, P, Q \\<union> {D' + {#L#}})\n  lnth Sts (Suc l) = (N, P \\<union> {D'}, Q)\n  E + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  E \\<cdot> \\<sigma> \\<subseteq># D'\n  D \\<in> Q_of_state (lnth Sts l)\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (lnth Sts (Suc l))", "by auto"], ["proof (state)\nthis:\n  D \\<in> Q_of_state (lnth Sts (Suc l))\n\ngoal (7 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 6. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))\n 7. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc l))", "qed (use d_in_q in auto)"], ["proof (state)\nthis:\n  D \\<in> Q_of_state (lnth Sts (Suc l))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>l\\<ge>i.\n     enat (Suc l) < llength Sts \\<longrightarrow>\n     D \\<in> Q_of_state (lnth Sts l) \\<longrightarrow>\n     D \\<in> Q_of_state (lnth Sts (Suc l))\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "have D_in_Sts: \"D \\<in> Q_of_state (lnth Sts l)\" and D_in_Sts_Suc: \"D \\<in> Q_of_state (lnth Sts (Suc l))\"\n    if l_i: \"l \\<ge> i\" and enat: \"enat (Suc l) < llength Sts\" for l"], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (lnth Sts l) &&&\n    D \\<in> Q_of_state (lnth Sts (Suc l))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. D \\<in> Q_of_state (lnth Sts l)\n 2. D \\<in> Q_of_state (lnth Sts (Suc l))", "show \"D \\<in> Q_of_state (lnth Sts l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (lnth Sts l)", "using l_i enat"], ["proof (prove)\nusing this:\n  i \\<le> l\n  enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (lnth Sts l)", "apply (induction \"l - i\" arbitrary: l)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>0 = l - i; i \\<le> l; enat (Suc l) < llength Sts\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts l)\n 2. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - i; i \\<le> l;\n                    enat (Suc l) < llength Sts\\<rbrakk>\n                   \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts l);\n        Suc x = l - i; i \\<le> l; enat (Suc l) < llength Sts\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts l)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 = l_ - i; i \\<le> l_; enat (Suc l_) < llength Sts\\<rbrakk>\n    \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts l_)", "using d"], ["proof (prove)\nusing this:\n  D \\<in> Q_of_state (lnth Sts i)\n  enat i < llength Sts\n  subsumes D C\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 = l_ - i; i \\<le> l_; enat (Suc l_) < llength Sts\\<rbrakk>\n    \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts l_)", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - i; i \\<le> l;\n                    enat (Suc l) < llength Sts\\<rbrakk>\n                   \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts l);\n        Suc x = l - i; i \\<le> l; enat (Suc l) < llength Sts\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts l)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>x_ = l - i; i \\<le> l;\n                 enat (Suc l) < llength Sts\\<rbrakk>\n                \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts l);\n     Suc x_ = l_ - i; i \\<le> l_; enat (Suc l_) < llength Sts\\<rbrakk>\n    \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts l_)", "using d(1) in_Sts_in_Sts_Suc"], ["proof (prove)\nusing this:\n  D \\<in> Q_of_state (lnth Sts i)\n  \\<forall>l\\<ge>i.\n     enat (Suc l) < llength Sts \\<longrightarrow>\n     D \\<in> Q_of_state (lnth Sts l) \\<longrightarrow>\n     D \\<in> Q_of_state (lnth Sts (Suc l))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>x_ = l - i; i \\<le> l;\n                 enat (Suc l) < llength Sts\\<rbrakk>\n                \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts l);\n     Suc x_ = l_ - i; i \\<le> l_; enat (Suc l_) < llength Sts\\<rbrakk>\n    \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts l_)", "by (metis (no_types, lifting) Suc_ile_eq add_Suc_right add_diff_cancel_left' le_SucE\n            le_Suc_ex less_imp_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  D \\<in> Q_of_state (lnth Sts l)\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (lnth Sts (Suc l))", "then"], ["proof (chain)\npicking this:\n  D \\<in> Q_of_state (lnth Sts l)", "show \"D \\<in> Q_of_state (lnth Sts (Suc l))\""], ["proof (prove)\nusing this:\n  D \\<in> Q_of_state (lnth Sts l)\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (lnth Sts (Suc l))", "using l_i enat in_Sts_in_Sts_Suc"], ["proof (prove)\nusing this:\n  D \\<in> Q_of_state (lnth Sts l)\n  i \\<le> l\n  enat (Suc l) < llength Sts\n  \\<forall>l\\<ge>i.\n     enat (Suc l) < llength Sts \\<longrightarrow>\n     D \\<in> Q_of_state (lnth Sts l) \\<longrightarrow>\n     D \\<in> Q_of_state (lnth Sts (Suc l))\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (lnth Sts (Suc l))", "by blast"], ["proof (state)\nthis:\n  D \\<in> Q_of_state (lnth Sts (Suc l))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<le> ?l; enat (Suc ?l) < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts ?l)\n  \\<lbrakk>i \\<le> ?l; enat (Suc ?l) < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc ?l))\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "have \"i \\<le> x \\<Longrightarrow> enat x < llength Sts \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts x)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> x; enat x < llength Sts\\<rbrakk>\n    \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts x)", "apply (cases x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> x; enat x < llength Sts; x = 0\\<rbrakk>\n    \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts x)\n 2. \\<And>nat.\n       \\<lbrakk>i \\<le> x; enat x < llength Sts; x = Suc nat\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts x)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> x; enat x < llength Sts; x = 0\\<rbrakk>\n    \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts x)", "using d(1)"], ["proof (prove)\nusing this:\n  D \\<in> Q_of_state (lnth Sts i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> x; enat x < llength Sts; x = 0\\<rbrakk>\n    \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts x)", "by (auto intro!: exI[of _ i] simp: less_Suc_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>i \\<le> x; enat x < llength Sts; x = Suc nat\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts x)", "subgoal for x'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> x; enat x < llength Sts; x = Suc x'\\<rbrakk>\n    \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts x)", "using d(1) D_in_Sts_Suc[of x']"], ["proof (prove)\nusing this:\n  D \\<in> Q_of_state (lnth Sts i)\n  \\<lbrakk>i \\<le> x'; enat (Suc x') < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts (Suc x'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> x; enat x < llength Sts; x = Suc x'\\<rbrakk>\n    \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts x)", "by (cases \\<open>i \\<le> x'\\<close>) (auto simp: not_less_eq_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<le> ?x; enat ?x < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts ?x)\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>i \\<le> ?x; enat ?x < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts ?x)", "have \"D \\<in> Liminf_llist (lmap Q_of_state Sts)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<le> ?x; enat ?x < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts ?x)\n\ngoal (1 subgoal):\n 1. D \\<in> Liminf_llist (lmap Q_of_state Sts)", "unfolding Liminf_llist_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<le> ?x; enat ?x < llength Sts\\<rbrakk>\n  \\<Longrightarrow> D \\<in> Q_of_state (lnth Sts ?x)\n\ngoal (1 subgoal):\n 1. D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap Q_of_state Sts)}.\n                \\<Inter>\n                 (lnth (lmap Q_of_state Sts) `\n                  {j. i \\<le> j \\<and>\n                      enat j < llength (lmap Q_of_state Sts)}))", "by (auto intro!: exI[of _ i] simp: d)"], ["proof (state)\nthis:\n  D \\<in> Liminf_llist (lmap Q_of_state Sts)\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "then"], ["proof (chain)\npicking this:\n  D \\<in> Liminf_llist (lmap Q_of_state Sts)", "show ?thesis"], ["proof (prove)\nusing this:\n  D \\<in> Liminf_llist (lmap Q_of_state Sts)\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "unfolding Liminf_state_def"], ["proof (prove)\nusing this:\n  D \\<in> Liminf_llist (lmap Q_of_state Sts)\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state\n             (Liminf_llist (lmap N_of_state Sts),\n              Liminf_llist (lmap P_of_state Sts),\n              Liminf_llist (lmap Q_of_state Sts))", "by auto"], ["proof (state)\nthis:\n  D \\<in> Q_of_state (Liminf_state Sts)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma from_P_to_Q:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    ns: \"Gs = lmap grounding_of_state Sts\" and\n    c: \"C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\" and\n    d: \"D \\<in> P_of_state (lnth Sts i)\" \"enat i < llength Sts\" \"subsumes D C\" and\n    d_least: \"\\<forall>E \\<in> {E. E \\<in> (clss_of_state (Sup_state Sts)) \\<and> subsumes E C}.\n      \\<not> strictly_subsumes E D\"\n  shows \"\\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "let ?Ns = \"\\<lambda>i. N_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "let ?Ps = \"\\<lambda>i. P_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "let ?Qs = \"\\<lambda>i. Q_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "have ground_C: \"is_ground_cls C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ground_cls C", "using c"], ["proof (prove)\nusing this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n\ngoal (1 subgoal):\n 1. is_ground_cls C", "using Liminf_grounding_of_state_ground ns"], ["proof (prove)\nusing this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n  ?C \\<in> Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts) \\<Longrightarrow>\n  is_ground_cls ?C\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. is_ground_cls C", "by auto"], ["proof (state)\nthis:\n  is_ground_cls C\n\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "have derivns: \"chain sr_ext.derive Gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain sr_ext.derive Gs", "using ground_derive_chain deriv ns"], ["proof (prove)\nusing this:\n  chain (\\<leadsto>) Sts \\<Longrightarrow>\n  chain sr_ext.derive\n   (lmap\n     (\\<lambda>St.\n         grounding_of_clss\n          (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n     Sts)\n  chain (\\<leadsto>) Sts\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. chain sr_ext.derive Gs", "by auto"], ["proof (state)\nthis:\n  chain sr_ext.derive Gs\n\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "have \"\\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "using instance_if_subsumed_and_in_limit[OF deriv] ns c d"], ["proof (prove)\nusing this:\n  \\<lbrakk>?Gs =\n           lmap\n            (\\<lambda>St.\n                grounding_of_clss\n                 (N_of_state St \\<union> P_of_state St \\<union>\n                  Q_of_state St))\n            Sts;\n   ?C \\<in> Liminf_llist ?Gs - sr.Rf (Liminf_llist ?Gs);\n   ?D \\<in> N_of_state (lnth Sts ?i) \\<union>\n            P_of_state (lnth Sts ?i) \\<union>\n            Q_of_state (lnth Sts ?i);\n   enat ?i < llength Sts; subsumes ?D ?C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>.\n                       ?D \\<cdot> \\<sigma> = ?C \\<and>\n                       is_ground_subst \\<sigma>\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n  D \\<in> P_of_state (lnth Sts i)\n  enat i < llength Sts\n  subsumes D C\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "obtain \\<sigma> where\n    \\<sigma>: \"D \\<cdot> \\<sigma> = C\" \"is_ground_subst \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<lbrakk>D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "obtain l where\n    l_p: \"D \\<in> P_of_state (lnth Sts l) \\<and> D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and> i \\<le> l\n      \\<and> enat (Suc l) < llength Sts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        D \\<in> P_of_state (lnth Sts l) \\<and>\n        D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n        i \\<le> l \\<and> enat (Suc l) < llength Sts \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using fair"], ["proof (prove)\nusing this:\n  fair_state_seq Sts\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        D \\<in> P_of_state (lnth Sts l) \\<and>\n        D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n        i \\<le> l \\<and> enat (Suc l) < llength Sts \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using eventually_removed_from_P d"], ["proof (prove)\nusing this:\n  fair_state_seq Sts\n  \\<lbrakk>?D \\<in> P_of_state (lnth Sts ?i); fair_state_seq Sts;\n   enat ?i < llength Sts\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l.\n                       ?D \\<in> P_of_state (lnth Sts l) \\<and>\n                       ?D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n                       ?i \\<le> l \\<and> enat (Suc l) < llength Sts\n  D \\<in> P_of_state (lnth Sts i)\n  enat i < llength Sts\n  subsumes D C\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        D \\<in> P_of_state (lnth Sts l) \\<and>\n        D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n        i \\<le> l \\<and> enat (Suc l) < llength Sts \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding ns"], ["proof (prove)\nusing this:\n  fair_state_seq Sts\n  \\<lbrakk>?D \\<in> P_of_state (lnth Sts ?i); fair_state_seq Sts;\n   enat ?i < llength Sts\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l.\n                       ?D \\<in> P_of_state (lnth Sts l) \\<and>\n                       ?D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n                       ?i \\<le> l \\<and> enat (Suc l) < llength Sts\n  D \\<in> P_of_state (lnth Sts i)\n  enat i < llength Sts\n  subsumes D C\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        D \\<in> P_of_state (lnth Sts l) \\<and>\n        D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n        i \\<le> l \\<and> enat (Suc l) < llength Sts \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  D \\<in> P_of_state (lnth Sts l) \\<and>\n  D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "then"], ["proof (chain)\npicking this:\n  D \\<in> P_of_state (lnth Sts l) \\<and>\n  D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts", "have l_Gs: \"enat (Suc l) < llength Gs\""], ["proof (prove)\nusing this:\n  D \\<in> P_of_state (lnth Sts l) \\<and>\n  D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. enat (Suc l) < llength Gs", "using ns"], ["proof (prove)\nusing this:\n  D \\<in> P_of_state (lnth Sts l) \\<and>\n  D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. enat (Suc l) < llength Gs", "by auto"], ["proof (state)\nthis:\n  enat (Suc l) < llength Gs\n\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "from l_p"], ["proof (chain)\npicking this:\n  D \\<in> P_of_state (lnth Sts l) \\<and>\n  D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts", "have \"lnth Sts l \\<leadsto> lnth Sts (Suc l)\""], ["proof (prove)\nusing this:\n  D \\<in> P_of_state (lnth Sts l) \\<and>\n  D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. lnth Sts l \\<leadsto> lnth Sts (Suc l)", "using deriv"], ["proof (prove)\nusing this:\n  D \\<in> P_of_state (lnth Sts l) \\<and>\n  D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n  chain (\\<leadsto>) Sts\n\ngoal (1 subgoal):\n 1. lnth Sts l \\<leadsto> lnth Sts (Suc l)", "using chain_lnth_rel"], ["proof (prove)\nusing this:\n  D \\<in> P_of_state (lnth Sts l) \\<and>\n  D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n  chain (\\<leadsto>) Sts\n  \\<lbrakk>chain ?R ?xs; enat (Suc ?j) < llength ?xs\\<rbrakk>\n  \\<Longrightarrow> ?R (lnth ?xs ?j) (lnth ?xs (Suc ?j))\n\ngoal (1 subgoal):\n 1. lnth Sts l \\<leadsto> lnth Sts (Suc l)", "by auto"], ["proof (state)\nthis:\n  lnth Sts l \\<leadsto> lnth Sts (Suc l)\n\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "then"], ["proof (chain)\npicking this:\n  lnth Sts l \\<leadsto> lnth Sts (Suc l)", "show ?thesis"], ["proof (prove)\nusing this:\n  lnth Sts l \\<leadsto> lnth Sts (Suc l)\n\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "proof (cases rule: RP.cases)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "case (backward_subsumption_P D' N D_twin P Q)"], ["proof (state)\nthis:\n  lnth Sts l = (N, P \\<union> {D_twin}, Q)\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> N\n  strictly_subsumes D' D_twin\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "note lrhs = this(1,2) and D'_p = this(3,4)"], ["proof (state)\nthis:\n  lnth Sts l = (N, P \\<union> {D_twin}, Q)\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> N\n  strictly_subsumes D' D_twin\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "then"], ["proof (chain)\npicking this:\n  lnth Sts l = (N, P \\<union> {D_twin}, Q)\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> N\n  strictly_subsumes D' D_twin", "have twins: \"D_twin = D\" \"?Ns (Suc l) = N\" \"?Ns l = N\"  \"?Ps (Suc l) = P\"\n      \"?Ps l = P \\<union> {D_twin}\" \"?Qs (Suc l) = Q\" \"?Qs l = Q\""], ["proof (prove)\nusing this:\n  lnth Sts l = (N, P \\<union> {D_twin}, Q)\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> N\n  strictly_subsumes D' D_twin\n\ngoal (1 subgoal):\n 1. (D_twin = D &&&\n     N_of_state (lnth Sts (Suc l)) = N &&& N_of_state (lnth Sts l) = N) &&&\n    (P_of_state (lnth Sts (Suc l)) = P &&&\n     P_of_state (lnth Sts l) = P \\<union> {D_twin}) &&&\n    Q_of_state (lnth Sts (Suc l)) = Q &&& Q_of_state (lnth Sts l) = Q", "using l_p"], ["proof (prove)\nusing this:\n  lnth Sts l = (N, P \\<union> {D_twin}, Q)\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> N\n  strictly_subsumes D' D_twin\n  D \\<in> P_of_state (lnth Sts l) \\<and>\n  D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. (D_twin = D &&&\n     N_of_state (lnth Sts (Suc l)) = N &&& N_of_state (lnth Sts l) = N) &&&\n    (P_of_state (lnth Sts (Suc l)) = P &&&\n     P_of_state (lnth Sts l) = P \\<union> {D_twin}) &&&\n    Q_of_state (lnth Sts (Suc l)) = Q &&& Q_of_state (lnth Sts l) = Q", "by auto"], ["proof (state)\nthis:\n  D_twin = D\n  N_of_state (lnth Sts (Suc l)) = N\n  N_of_state (lnth Sts l) = N\n  P_of_state (lnth Sts (Suc l)) = P\n  P_of_state (lnth Sts l) = P \\<union> {D_twin}\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "note D'_p = D'_p[unfolded twins(1)]"], ["proof (state)\nthis:\n  D' \\<in> N\n  strictly_subsumes D' D\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "then"], ["proof (chain)\npicking this:\n  D' \\<in> N\n  strictly_subsumes D' D", "have subc: \"subsumes D' C\""], ["proof (prove)\nusing this:\n  D' \\<in> N\n  strictly_subsumes D' D\n\ngoal (1 subgoal):\n 1. subsumes D' C", "unfolding strictly_subsumes_def subsumes_def"], ["proof (prove)\nusing this:\n  D' \\<in> N\n  (\\<exists>\\<sigma>. D' \\<cdot> \\<sigma> \\<subseteq># D) \\<and>\n  (\\<nexists>\\<sigma>. D \\<cdot> \\<sigma> \\<subseteq># D')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>. D' \\<cdot> \\<sigma> \\<subseteq># C", "using \\<sigma>"], ["proof (prove)\nusing this:\n  D' \\<in> N\n  (\\<exists>\\<sigma>. D' \\<cdot> \\<sigma> \\<subseteq># D) \\<and>\n  (\\<nexists>\\<sigma>. D \\<cdot> \\<sigma> \\<subseteq># D')\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>. D' \\<cdot> \\<sigma> \\<subseteq># C", "by (metis subst_cls_comp_subst subst_cls_mono_mset)"], ["proof (state)\nthis:\n  subsumes D' C\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "from D'_p"], ["proof (chain)\npicking this:\n  D' \\<in> N\n  strictly_subsumes D' D", "have \"D' \\<in> clss_of_state (Sup_state Sts)\""], ["proof (prove)\nusing this:\n  D' \\<in> N\n  strictly_subsumes D' D\n\ngoal (1 subgoal):\n 1. D' \\<in> N_of_state (Sup_state Sts) \\<union>\n             P_of_state (Sup_state Sts) \\<union>\n             Q_of_state (Sup_state Sts)", "unfolding twins(2)[symmetric]"], ["proof (prove)\nusing this:\n  D' \\<in> N_of_state (lnth Sts (Suc l))\n  strictly_subsumes D' D\n\ngoal (1 subgoal):\n 1. D' \\<in> N_of_state (Sup_state Sts) \\<union>\n             P_of_state (Sup_state Sts) \\<union>\n             Q_of_state (Sup_state Sts)", "using l_p"], ["proof (prove)\nusing this:\n  D' \\<in> N_of_state (lnth Sts (Suc l))\n  strictly_subsumes D' D\n  D \\<in> P_of_state (lnth Sts l) \\<and>\n  D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. D' \\<in> N_of_state (Sup_state Sts) \\<union>\n             P_of_state (Sup_state Sts) \\<union>\n             Q_of_state (Sup_state Sts)", "by (metis (no_types) UnI1 N_of_state.simps llength_lmap lnth_lmap lnth_subset_Sup_llist\n          subsetCE Sup_state_def)"], ["proof (state)\nthis:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "then"], ["proof (chain)\npicking this:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)", "have False"], ["proof (prove)\nusing this:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)\n\ngoal (1 subgoal):\n 1. False", "using d_least D'_p subc"], ["proof (prove)\nusing this:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n  D' \\<in> N\n  strictly_subsumes D' D\n  subsumes D' C\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (9 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 9. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "then"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "by auto"], ["proof (state)\nthis:\n  \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "case (backward_reduction_P E L' N L \\<sigma> D' P Q)"], ["proof (state)\nthis:\n  lnth Sts l = (N, P \\<union> {D' + {#L#}}, Q)\n  lnth Sts (Suc l) = (N, P \\<union> {D'}, Q)\n  E + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  E \\<cdot> \\<sigma> \\<subseteq># D'\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "then"], ["proof (chain)\npicking this:\n  lnth Sts l = (N, P \\<union> {D' + {#L#}}, Q)\n  lnth Sts (Suc l) = (N, P \\<union> {D'}, Q)\n  E + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  E \\<cdot> \\<sigma> \\<subseteq># D'", "have twins: \"D' + {#L#} = D\" \"?Ns (Suc l) = N\" \"?Ns l = N\"  \"?Ps (Suc l) = P \\<union> {D'}\"\n      \"?Ps l = P \\<union> {D' + {#L#}}\" \"?Qs (Suc l) = Q\" \"?Qs l = Q\""], ["proof (prove)\nusing this:\n  lnth Sts l = (N, P \\<union> {D' + {#L#}}, Q)\n  lnth Sts (Suc l) = (N, P \\<union> {D'}, Q)\n  E + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  E \\<cdot> \\<sigma> \\<subseteq># D'\n\ngoal (1 subgoal):\n 1. (D' + {#L#} = D &&&\n     N_of_state (lnth Sts (Suc l)) = N &&& N_of_state (lnth Sts l) = N) &&&\n    (P_of_state (lnth Sts (Suc l)) = P \\<union> {D'} &&&\n     P_of_state (lnth Sts l) = P \\<union> {D' + {#L#}}) &&&\n    Q_of_state (lnth Sts (Suc l)) = Q &&& Q_of_state (lnth Sts l) = Q", "using l_p"], ["proof (prove)\nusing this:\n  lnth Sts l = (N, P \\<union> {D' + {#L#}}, Q)\n  lnth Sts (Suc l) = (N, P \\<union> {D'}, Q)\n  E + {#L'#} \\<in> N\n  - L = L' \\<cdot>l \\<sigma>\n  E \\<cdot> \\<sigma> \\<subseteq># D'\n  D \\<in> P_of_state (lnth Sts l) \\<and>\n  D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. (D' + {#L#} = D &&&\n     N_of_state (lnth Sts (Suc l)) = N &&& N_of_state (lnth Sts l) = N) &&&\n    (P_of_state (lnth Sts (Suc l)) = P \\<union> {D'} &&&\n     P_of_state (lnth Sts l) = P \\<union> {D' + {#L#}}) &&&\n    Q_of_state (lnth Sts (Suc l)) = Q &&& Q_of_state (lnth Sts l) = Q", "by auto"], ["proof (state)\nthis:\n  D' + {#L#} = D\n  N_of_state (lnth Sts (Suc l)) = N\n  N_of_state (lnth Sts l) = N\n  P_of_state (lnth Sts (Suc l)) = P \\<union> {D'}\n  P_of_state (lnth Sts l) = P \\<union> {D' + {#L#}}\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "then"], ["proof (chain)\npicking this:\n  D' + {#L#} = D\n  N_of_state (lnth Sts (Suc l)) = N\n  N_of_state (lnth Sts l) = N\n  P_of_state (lnth Sts (Suc l)) = P \\<union> {D'}\n  P_of_state (lnth Sts l) = P \\<union> {D' + {#L#}}\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q", "have D'_p: \"strictly_subsumes D' D \\<and> D' \\<in> ?Ps (Suc l)\""], ["proof (prove)\nusing this:\n  D' + {#L#} = D\n  N_of_state (lnth Sts (Suc l)) = N\n  N_of_state (lnth Sts l) = N\n  P_of_state (lnth Sts (Suc l)) = P \\<union> {D'}\n  P_of_state (lnth Sts l) = P \\<union> {D' + {#L#}}\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q\n\ngoal (1 subgoal):\n 1. strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))", "using subset_strictly_subsumes[of D' D]"], ["proof (prove)\nusing this:\n  D' + {#L#} = D\n  N_of_state (lnth Sts (Suc l)) = N\n  N_of_state (lnth Sts l) = N\n  P_of_state (lnth Sts (Suc l)) = P \\<union> {D'}\n  P_of_state (lnth Sts l) = P \\<union> {D' + {#L#}}\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q\n  D' \\<subset># D \\<Longrightarrow> strictly_subsumes D' D\n\ngoal (1 subgoal):\n 1. strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))", "by auto"], ["proof (state)\nthis:\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "then"], ["proof (chain)\npicking this:\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))", "have subc: \"subsumes D' C\""], ["proof (prove)\nusing this:\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))\n\ngoal (1 subgoal):\n 1. subsumes D' C", "using d(3) subsumes_trans"], ["proof (prove)\nusing this:\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))\n  subsumes D C\n  \\<lbrakk>subsumes ?C ?D; subsumes ?D ?E\\<rbrakk>\n  \\<Longrightarrow> subsumes ?C ?E\n\ngoal (1 subgoal):\n 1. subsumes D' C", "unfolding strictly_subsumes_def"], ["proof (prove)\nusing this:\n  (subsumes D' D \\<and> \\<not> subsumes D D') \\<and>\n  D' \\<in> P_of_state (lnth Sts (Suc l))\n  subsumes D C\n  \\<lbrakk>subsumes ?C ?D; subsumes ?D ?E\\<rbrakk>\n  \\<Longrightarrow> subsumes ?C ?E\n\ngoal (1 subgoal):\n 1. subsumes D' C", "by auto"], ["proof (state)\nthis:\n  subsumes D' C\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "from D'_p"], ["proof (chain)\npicking this:\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))", "have \"D' \\<in> clss_of_state (Sup_state Sts)\""], ["proof (prove)\nusing this:\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))\n\ngoal (1 subgoal):\n 1. D' \\<in> N_of_state (Sup_state Sts) \\<union>\n             P_of_state (Sup_state Sts) \\<union>\n             Q_of_state (Sup_state Sts)", "using l_p"], ["proof (prove)\nusing this:\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))\n  D \\<in> P_of_state (lnth Sts l) \\<and>\n  D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. D' \\<in> N_of_state (Sup_state Sts) \\<union>\n             P_of_state (Sup_state Sts) \\<union>\n             Q_of_state (Sup_state Sts)", "by (metis (no_types) UnI1 P_of_state.simps llength_lmap lnth_lmap\n          lnth_subset_Sup_llist subsetCE sup_ge2 Sup_state_def)"], ["proof (state)\nthis:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "then"], ["proof (chain)\npicking this:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)", "have False"], ["proof (prove)\nusing this:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)\n\ngoal (1 subgoal):\n 1. False", "using d_least D'_p subc"], ["proof (prove)\nusing this:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n  strictly_subsumes D' D \\<and> D' \\<in> P_of_state (lnth Sts (Suc l))\n  subsumes D' C\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (8 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {C + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 8. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "then"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "by auto"], ["proof (state)\nthis:\n  \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts\n\ngoal (7 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "case (inference_computation N Q D_twin P)"], ["proof (state)\nthis:\n  lnth Sts l = ({}, P \\<union> {D_twin}, Q)\n  lnth Sts (Suc l) = (N, P, Q \\<union> {D_twin})\n  N = concls_of (ord_FO_resolution.inferences_between Q D_twin)\n\ngoal (7 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "then"], ["proof (chain)\npicking this:\n  lnth Sts l = ({}, P \\<union> {D_twin}, Q)\n  lnth Sts (Suc l) = (N, P, Q \\<union> {D_twin})\n  N = concls_of (ord_FO_resolution.inferences_between Q D_twin)", "have twins: \"D_twin = D\" \"?Ps (Suc l) = P\" \"?Ps l = P \\<union> {D_twin}\"\n      \"?Qs (Suc l) = Q \\<union> {D_twin}\" \"?Qs l = Q\""], ["proof (prove)\nusing this:\n  lnth Sts l = ({}, P \\<union> {D_twin}, Q)\n  lnth Sts (Suc l) = (N, P, Q \\<union> {D_twin})\n  N = concls_of (ord_FO_resolution.inferences_between Q D_twin)\n\ngoal (1 subgoal):\n 1. (D_twin = D &&& P_of_state (lnth Sts (Suc l)) = P) &&&\n    P_of_state (lnth Sts l) = P \\<union> {D_twin} &&&\n    Q_of_state (lnth Sts (Suc l)) = Q \\<union> {D_twin} &&&\n    Q_of_state (lnth Sts l) = Q", "using l_p"], ["proof (prove)\nusing this:\n  lnth Sts l = ({}, P \\<union> {D_twin}, Q)\n  lnth Sts (Suc l) = (N, P, Q \\<union> {D_twin})\n  N = concls_of (ord_FO_resolution.inferences_between Q D_twin)\n  D \\<in> P_of_state (lnth Sts l) \\<and>\n  D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. (D_twin = D &&& P_of_state (lnth Sts (Suc l)) = P) &&&\n    P_of_state (lnth Sts l) = P \\<union> {D_twin} &&&\n    Q_of_state (lnth Sts (Suc l)) = Q \\<union> {D_twin} &&&\n    Q_of_state (lnth Sts l) = Q", "by auto"], ["proof (state)\nthis:\n  D_twin = D\n  P_of_state (lnth Sts (Suc l)) = P\n  P_of_state (lnth Sts l) = P \\<union> {D_twin}\n  Q_of_state (lnth Sts (Suc l)) = Q \\<union> {D_twin}\n  Q_of_state (lnth Sts l) = Q\n\ngoal (7 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 7. \\<And>N Q C P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {C}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {C});\n        N = concls_of (ord_FO_resolution.inferences_between Q C)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "then"], ["proof (chain)\npicking this:\n  D_twin = D\n  P_of_state (lnth Sts (Suc l)) = P\n  P_of_state (lnth Sts l) = P \\<union> {D_twin}\n  Q_of_state (lnth Sts (Suc l)) = Q \\<union> {D_twin}\n  Q_of_state (lnth Sts l) = Q", "show ?thesis"], ["proof (prove)\nusing this:\n  D_twin = D\n  P_of_state (lnth Sts (Suc l)) = P\n  P_of_state (lnth Sts l) = P \\<union> {D_twin}\n  Q_of_state (lnth Sts (Suc l)) = Q \\<union> {D_twin}\n  Q_of_state (lnth Sts l) = Q\n\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "using d \\<sigma> l_p"], ["proof (prove)\nusing this:\n  D_twin = D\n  P_of_state (lnth Sts (Suc l)) = P\n  P_of_state (lnth Sts l) = P \\<union> {D_twin}\n  Q_of_state (lnth Sts (Suc l)) = Q \\<union> {D_twin}\n  Q_of_state (lnth Sts l) = Q\n  D \\<in> P_of_state (lnth Sts i)\n  enat i < llength Sts\n  subsumes D C\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n  D \\<in> P_of_state (lnth Sts l) \\<and>\n  D \\<notin> P_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts", "by auto"], ["proof (state)\nthis:\n  \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts\n\ngoal (6 subgoals):\n 1. \\<And>A C N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># C;\n        Pos A \\<in># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 2. \\<And>Da P Q C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> P \\<union> Q;\n        subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 3. \\<And>Da N C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C});\n        lnth Sts (Suc l) = (N, P, Q); Da \\<in> N;\n        strictly_subsumes Da C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 4. \\<And>Da L' P Q L \\<sigma> C N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {C}, P, Q);\n        Da + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 5. \\<And>Da L' N L \\<sigma> C P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {C + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q); Da + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        Da \\<cdot> \\<sigma> \\<subseteq># C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts\n 6. \\<And>N C P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {C}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {C}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            D \\<in> Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts", "qed (use l_p in auto)"], ["proof (state)\nthis:\n  \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma from_N_to_P_or_Q:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    ns: \"Gs = lmap grounding_of_state Sts\" and\n    c: \"C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\" and\n    d: \"D \\<in> N_of_state (lnth Sts i)\" \"enat i < llength Sts\" \"subsumes D C\" and\n    d_least: \"\\<forall>E \\<in> {E. E \\<in> (clss_of_state (Sup_state Sts)) \\<and> subsumes E C}. \\<not> strictly_subsumes E D\"\n  shows \"\\<exists>l D' \\<sigma>'. D' \\<in> P_of_state (lnth Sts l) \\<union> Q_of_state (lnth Sts l) \\<and>\n    enat l < llength Sts \\<and>\n    (\\<forall>E \\<in> {E. E \\<in> (clss_of_state (Sup_state Sts)) \\<and> subsumes E C}. \\<not> strictly_subsumes E D') \\<and>\n    D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>' \\<and> subsumes D' C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "let ?Ns = \"\\<lambda>i. N_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "let ?Ps = \"\\<lambda>i. P_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "let ?Qs = \"\\<lambda>i. Q_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "have ground_C: \"is_ground_cls C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ground_cls C", "using c"], ["proof (prove)\nusing this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n\ngoal (1 subgoal):\n 1. is_ground_cls C", "using Liminf_grounding_of_state_ground ns"], ["proof (prove)\nusing this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n  ?C \\<in> Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts) \\<Longrightarrow>\n  is_ground_cls ?C\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. is_ground_cls C", "by auto"], ["proof (state)\nthis:\n  is_ground_cls C\n\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "have derivns: \"chain sr_ext.derive Gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain sr_ext.derive Gs", "using ground_derive_chain deriv ns"], ["proof (prove)\nusing this:\n  chain (\\<leadsto>) Sts \\<Longrightarrow>\n  chain sr_ext.derive\n   (lmap\n     (\\<lambda>St.\n         grounding_of_clss\n          (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n     Sts)\n  chain (\\<leadsto>) Sts\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. chain sr_ext.derive Gs", "by auto"], ["proof (state)\nthis:\n  chain sr_ext.derive Gs\n\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "have \"\\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "using instance_if_subsumed_and_in_limit[OF deriv] ns c d"], ["proof (prove)\nusing this:\n  \\<lbrakk>?Gs =\n           lmap\n            (\\<lambda>St.\n                grounding_of_clss\n                 (N_of_state St \\<union> P_of_state St \\<union>\n                  Q_of_state St))\n            Sts;\n   ?C \\<in> Liminf_llist ?Gs - sr.Rf (Liminf_llist ?Gs);\n   ?D \\<in> N_of_state (lnth Sts ?i) \\<union>\n            P_of_state (lnth Sts ?i) \\<union>\n            Q_of_state (lnth Sts ?i);\n   enat ?i < llength Sts; subsumes ?D ?C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>.\n                       ?D \\<cdot> \\<sigma> = ?C \\<and>\n                       is_ground_subst \\<sigma>\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n  D \\<in> N_of_state (lnth Sts i)\n  enat i < llength Sts\n  subsumes D C\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "obtain \\<sigma> where\n    \\<sigma>: \"D \\<cdot> \\<sigma> = C\" \"is_ground_subst \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<lbrakk>D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "from c"], ["proof (chain)\npicking this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)", "have no_taut: \"\\<not> (\\<exists>A. Pos A \\<in># C \\<and> Neg A \\<in># C)\""], ["proof (prove)\nusing this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n\ngoal (1 subgoal):\n 1. \\<nexists>A. Pos A \\<in># C \\<and> Neg A \\<in># C", "using sr.tautology_Rf"], ["proof (prove)\nusing this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n  \\<lbrakk>Pos ?A \\<in># ?C; Neg ?A \\<in># ?C\\<rbrakk>\n  \\<Longrightarrow> ?C \\<in> sr.Rf ?N\n\ngoal (1 subgoal):\n 1. \\<nexists>A. Pos A \\<in># C \\<and> Neg A \\<in># C", "by auto"], ["proof (state)\nthis:\n  \\<nexists>A. Pos A \\<in># C \\<and> Neg A \\<in># C\n\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "have \"\\<exists>l. D \\<in> N_of_state (lnth Sts l)\n    \\<and> D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and> i \\<le> l \\<and> enat (Suc l) < llength Sts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l.\n       D \\<in> N_of_state (lnth Sts l) \\<and>\n       D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n       i \\<le> l \\<and> enat (Suc l) < llength Sts", "using fair"], ["proof (prove)\nusing this:\n  fair_state_seq Sts\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       D \\<in> N_of_state (lnth Sts l) \\<and>\n       D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n       i \\<le> l \\<and> enat (Suc l) < llength Sts", "using eventually_removed_from_N d"], ["proof (prove)\nusing this:\n  fair_state_seq Sts\n  \\<lbrakk>?D \\<in> N_of_state (lnth Sts ?i); fair_state_seq Sts;\n   enat ?i < llength Sts\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l.\n                       ?D \\<in> N_of_state (lnth Sts l) \\<and>\n                       ?D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n                       ?i \\<le> l \\<and> enat (Suc l) < llength Sts\n  D \\<in> N_of_state (lnth Sts i)\n  enat i < llength Sts\n  subsumes D C\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       D \\<in> N_of_state (lnth Sts l) \\<and>\n       D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n       i \\<le> l \\<and> enat (Suc l) < llength Sts", "unfolding ns"], ["proof (prove)\nusing this:\n  fair_state_seq Sts\n  \\<lbrakk>?D \\<in> N_of_state (lnth Sts ?i); fair_state_seq Sts;\n   enat ?i < llength Sts\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l.\n                       ?D \\<in> N_of_state (lnth Sts l) \\<and>\n                       ?D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n                       ?i \\<le> l \\<and> enat (Suc l) < llength Sts\n  D \\<in> N_of_state (lnth Sts i)\n  enat i < llength Sts\n  subsumes D C\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       D \\<in> N_of_state (lnth Sts l) \\<and>\n       D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n       i \\<le> l \\<and> enat (Suc l) < llength Sts", "by auto"], ["proof (state)\nthis:\n  \\<exists>l.\n     D \\<in> N_of_state (lnth Sts l) \\<and>\n     D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n     i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  \\<exists>l.\n     D \\<in> N_of_state (lnth Sts l) \\<and>\n     D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n     i \\<le> l \\<and> enat (Suc l) < llength Sts", "obtain l where\n    l_p: \"D \\<in> N_of_state (lnth Sts l) \\<and> D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and> i \\<le> l\n      \\<and> enat (Suc l) < llength Sts\""], ["proof (prove)\nusing this:\n  \\<exists>l.\n     D \\<in> N_of_state (lnth Sts l) \\<and>\n     D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n     i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        D \\<in> N_of_state (lnth Sts l) \\<and>\n        D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n        i \\<le> l \\<and> enat (Suc l) < llength Sts \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts", "have l_Gs: \"enat (Suc l) < llength Gs\""], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. enat (Suc l) < llength Gs", "using ns"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. enat (Suc l) < llength Gs", "by auto"], ["proof (state)\nthis:\n  enat (Suc l) < llength Gs\n\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "from l_p"], ["proof (chain)\npicking this:\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts", "have \"lnth Sts l \\<leadsto> lnth Sts (Suc l)\""], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. lnth Sts l \\<leadsto> lnth Sts (Suc l)", "using deriv"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n  chain (\\<leadsto>) Sts\n\ngoal (1 subgoal):\n 1. lnth Sts l \\<leadsto> lnth Sts (Suc l)", "using chain_lnth_rel"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n  chain (\\<leadsto>) Sts\n  \\<lbrakk>chain ?R ?xs; enat (Suc ?j) < llength ?xs\\<rbrakk>\n  \\<Longrightarrow> ?R (lnth ?xs ?j) (lnth ?xs (Suc ?j))\n\ngoal (1 subgoal):\n 1. lnth Sts l \\<leadsto> lnth Sts (Suc l)", "by auto"], ["proof (state)\nthis:\n  lnth Sts l \\<leadsto> lnth Sts (Suc l)\n\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  lnth Sts l \\<leadsto> lnth Sts (Suc l)", "show ?thesis"], ["proof (prove)\nusing this:\n  lnth Sts l \\<leadsto> lnth Sts (Suc l)\n\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "proof (cases rule: RP.cases)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>A Ca N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># Ca;\n        Pos A \\<in># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 9. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "case (tautology_deletion A D_twin N P Q)"], ["proof (state)\nthis:\n  lnth Sts l = (N \\<union> {D_twin}, P, Q)\n  lnth Sts (Suc l) = (N, P, Q)\n  Neg A \\<in># D_twin\n  Pos A \\<in># D_twin\n\ngoal (9 subgoals):\n 1. \\<And>A Ca N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># Ca;\n        Pos A \\<in># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 9. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  lnth Sts l = (N \\<union> {D_twin}, P, Q)\n  lnth Sts (Suc l) = (N, P, Q)\n  Neg A \\<in># D_twin\n  Pos A \\<in># D_twin", "have \"D_twin = D\""], ["proof (prove)\nusing this:\n  lnth Sts l = (N \\<union> {D_twin}, P, Q)\n  lnth Sts (Suc l) = (N, P, Q)\n  Neg A \\<in># D_twin\n  Pos A \\<in># D_twin\n\ngoal (1 subgoal):\n 1. D_twin = D", "using l_p"], ["proof (prove)\nusing this:\n  lnth Sts l = (N \\<union> {D_twin}, P, Q)\n  lnth Sts (Suc l) = (N, P, Q)\n  Neg A \\<in># D_twin\n  Pos A \\<in># D_twin\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. D_twin = D", "by auto"], ["proof (state)\nthis:\n  D_twin = D\n\ngoal (9 subgoals):\n 1. \\<And>A Ca N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># Ca;\n        Pos A \\<in># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 9. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  D_twin = D", "have \"Pos (A \\<cdot>a \\<sigma>) \\<in># C \\<and> Neg (A \\<cdot>a \\<sigma>) \\<in># C\""], ["proof (prove)\nusing this:\n  D_twin = D\n\ngoal (1 subgoal):\n 1. Pos (A \\<cdot>a \\<sigma>) \\<in># C \\<and>\n    Neg (A \\<cdot>a \\<sigma>) \\<in># C", "using tautology_deletion(3,4) \\<sigma>"], ["proof (prove)\nusing this:\n  D_twin = D\n  Neg A \\<in># D_twin\n  Pos A \\<in># D_twin\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. Pos (A \\<cdot>a \\<sigma>) \\<in># C \\<and>\n    Neg (A \\<cdot>a \\<sigma>) \\<in># C", "by (metis Melem_subst_cls eql_neg_lit_eql_atm eql_pos_lit_eql_atm)"], ["proof (state)\nthis:\n  Pos (A \\<cdot>a \\<sigma>) \\<in># C \\<and>\n  Neg (A \\<cdot>a \\<sigma>) \\<in># C\n\ngoal (9 subgoals):\n 1. \\<And>A Ca N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># Ca;\n        Pos A \\<in># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 9. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  Pos (A \\<cdot>a \\<sigma>) \\<in># C \\<and>\n  Neg (A \\<cdot>a \\<sigma>) \\<in># C", "have False"], ["proof (prove)\nusing this:\n  Pos (A \\<cdot>a \\<sigma>) \\<in># C \\<and>\n  Neg (A \\<cdot>a \\<sigma>) \\<in># C\n\ngoal (1 subgoal):\n 1. False", "using no_taut"], ["proof (prove)\nusing this:\n  Pos (A \\<cdot>a \\<sigma>) \\<in># C \\<and>\n  Neg (A \\<cdot>a \\<sigma>) \\<in># C\n  \\<nexists>A. Pos A \\<in># C \\<and> Neg A \\<in># C\n\ngoal (1 subgoal):\n 1. False", "by metis"], ["proof (state)\nthis:\n  False\n\ngoal (9 subgoals):\n 1. \\<And>A Ca N P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); Neg A \\<in># Ca;\n        Pos A \\<in># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 9. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "by blast"], ["proof (state)\nthis:\n  \\<exists>l D' \\<sigma>'.\n     D' \\<in> P_of_state (lnth Sts l) \\<union>\n              Q_of_state (lnth Sts l) \\<and>\n     enat l < llength Sts \\<and>\n     (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                              P_of_state (Sup_state Sts) \\<union>\n                              Q_of_state (Sup_state Sts).\n                      subsumes E C}.\n         \\<not> strictly_subsumes E D') \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and>\n     is_ground_subst \\<sigma>' \\<and> subsumes D' C\n\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "case (forward_subsumption D' P Q D_twin N)"], ["proof (state)\nthis:\n  lnth Sts l = (N \\<union> {D_twin}, P, Q)\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> P \\<union> Q\n  subsumes D' D_twin\n\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "note lrhs = this(1,2) and D'_p = this(3,4)"], ["proof (state)\nthis:\n  lnth Sts l = (N \\<union> {D_twin}, P, Q)\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> P \\<union> Q\n  subsumes D' D_twin\n\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  lnth Sts l = (N \\<union> {D_twin}, P, Q)\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> P \\<union> Q\n  subsumes D' D_twin", "have twins: \"D_twin = D\" \"?Ns (Suc l) = N\" \"?Ns l = N \\<union> {D_twin}\"  \"?Ps (Suc l) = P \"\n      \"?Ps l = P\" \"?Qs (Suc l) = Q\" \"?Qs l = Q\""], ["proof (prove)\nusing this:\n  lnth Sts l = (N \\<union> {D_twin}, P, Q)\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> P \\<union> Q\n  subsumes D' D_twin\n\ngoal (1 subgoal):\n 1. (D_twin = D &&&\n     N_of_state (lnth Sts (Suc l)) = N &&&\n     N_of_state (lnth Sts l) = N \\<union> {D_twin}) &&&\n    (P_of_state (lnth Sts (Suc l)) = P &&& P_of_state (lnth Sts l) = P) &&&\n    Q_of_state (lnth Sts (Suc l)) = Q &&& Q_of_state (lnth Sts l) = Q", "using l_p"], ["proof (prove)\nusing this:\n  lnth Sts l = (N \\<union> {D_twin}, P, Q)\n  lnth Sts (Suc l) = (N, P, Q)\n  D' \\<in> P \\<union> Q\n  subsumes D' D_twin\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. (D_twin = D &&&\n     N_of_state (lnth Sts (Suc l)) = N &&&\n     N_of_state (lnth Sts l) = N \\<union> {D_twin}) &&&\n    (P_of_state (lnth Sts (Suc l)) = P &&& P_of_state (lnth Sts l) = P) &&&\n    Q_of_state (lnth Sts (Suc l)) = Q &&& Q_of_state (lnth Sts l) = Q", "by auto"], ["proof (state)\nthis:\n  D_twin = D\n  N_of_state (lnth Sts (Suc l)) = N\n  N_of_state (lnth Sts l) = N \\<union> {D_twin}\n  P_of_state (lnth Sts (Suc l)) = P\n  P_of_state (lnth Sts l) = P\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q\n\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "note D'_p = D'_p[unfolded twins(1)]"], ["proof (state)\nthis:\n  D' \\<in> P \\<union> Q\n  subsumes D' D\n\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "from D'_p(2)"], ["proof (chain)\npicking this:\n  subsumes D' D", "have subs: \"subsumes D' C\""], ["proof (prove)\nusing this:\n  subsumes D' D\n\ngoal (1 subgoal):\n 1. subsumes D' C", "using d(3)"], ["proof (prove)\nusing this:\n  subsumes D' D\n  subsumes D C\n\ngoal (1 subgoal):\n 1. subsumes D' C", "by (blast intro: subsumes_trans)"], ["proof (state)\nthis:\n  subsumes D' C\n\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "moreover"], ["proof (state)\nthis:\n  subsumes D' C\n\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "have \"D' \\<in> clss_of_state (Sup_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D' \\<in> N_of_state (Sup_state Sts) \\<union>\n             P_of_state (Sup_state Sts) \\<union>\n             Q_of_state (Sup_state Sts)", "using twins D'_p l_p"], ["proof (prove)\nusing this:\n  D_twin = D\n  N_of_state (lnth Sts (Suc l)) = N\n  N_of_state (lnth Sts l) = N \\<union> {D_twin}\n  P_of_state (lnth Sts (Suc l)) = P\n  P_of_state (lnth Sts l) = P\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q\n  D' \\<in> P \\<union> Q\n  subsumes D' D\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. D' \\<in> N_of_state (Sup_state Sts) \\<union>\n             P_of_state (Sup_state Sts) \\<union>\n             Q_of_state (Sup_state Sts)", "unfolding Sup_state_def"], ["proof (prove)\nusing this:\n  D_twin = D\n  N_of_state (lnth Sts (Suc l)) = N\n  N_of_state (lnth Sts l) = N \\<union> {D_twin}\n  P_of_state (lnth Sts (Suc l)) = P\n  P_of_state (lnth Sts l) = P\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q\n  D' \\<in> P \\<union> Q\n  subsumes D' D\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. D' \\<in> N_of_state\n              (Sup_llist (lmap N_of_state Sts),\n               Sup_llist (lmap P_of_state Sts),\n               Sup_llist (lmap Q_of_state Sts)) \\<union>\n             P_of_state\n              (Sup_llist (lmap N_of_state Sts),\n               Sup_llist (lmap P_of_state Sts),\n               Sup_llist (lmap Q_of_state Sts)) \\<union>\n             Q_of_state\n              (Sup_llist (lmap N_of_state Sts),\n               Sup_llist (lmap P_of_state Sts),\n               Sup_llist (lmap Q_of_state Sts))", "by simp (metis (no_types) contra_subsetD llength_lmap lnth_lmap lnth_subset_Sup_llist)"], ["proof (state)\nthis:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)\n\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "ultimately"], ["proof (chain)\npicking this:\n  subsumes D' C\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)", "have \"\\<not> strictly_subsumes D' D\""], ["proof (prove)\nusing this:\n  subsumes D' C\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)\n\ngoal (1 subgoal):\n 1. \\<not> strictly_subsumes D' D", "using d_least"], ["proof (prove)\nusing this:\n  subsumes D' C\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n\ngoal (1 subgoal):\n 1. \\<not> strictly_subsumes D' D", "by auto"], ["proof (state)\nthis:\n  \\<not> strictly_subsumes D' D\n\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  \\<not> strictly_subsumes D' D", "have \"subsumes D D'\""], ["proof (prove)\nusing this:\n  \\<not> strictly_subsumes D' D\n\ngoal (1 subgoal):\n 1. subsumes D D'", "unfolding strictly_subsumes_def"], ["proof (prove)\nusing this:\n  \\<not> (subsumes D' D \\<and> \\<not> subsumes D D')\n\ngoal (1 subgoal):\n 1. subsumes D D'", "using D'_p"], ["proof (prove)\nusing this:\n  \\<not> (subsumes D' D \\<and> \\<not> subsumes D D')\n  D' \\<in> P \\<union> Q\n  subsumes D' D\n\ngoal (1 subgoal):\n 1. subsumes D D'", "by auto"], ["proof (state)\nthis:\n  subsumes D D'\n\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  subsumes D D'", "have v: \"variants D D'\""], ["proof (prove)\nusing this:\n  subsumes D D'\n\ngoal (1 subgoal):\n 1. variants D D'", "using D'_p"], ["proof (prove)\nusing this:\n  subsumes D D'\n  D' \\<in> P \\<union> Q\n  subsumes D' D\n\ngoal (1 subgoal):\n 1. variants D D'", "unfolding variants_iff_subsumes"], ["proof (prove)\nusing this:\n  subsumes D D'\n  D' \\<in> P \\<union> Q\n  subsumes D' D\n\ngoal (1 subgoal):\n 1. subsumes D D' \\<and> subsumes D' D", "by auto"], ["proof (state)\nthis:\n  variants D D'\n\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  variants D D'", "have mini: \"\\<forall>E \\<in> {E \\<in> clss_of_state (Sup_state Sts). subsumes E C}.\n      \\<not> strictly_subsumes E D'\""], ["proof (prove)\nusing this:\n  variants D D'\n\ngoal (1 subgoal):\n 1. \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                            P_of_state (Sup_state Sts) \\<union>\n                            Q_of_state (Sup_state Sts).\n                    subsumes E C}.\n       \\<not> strictly_subsumes E D'", "using d_least D'_p neg_strictly_subsumes_variants[of _ D D']"], ["proof (prove)\nusing this:\n  variants D D'\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n  D' \\<in> P \\<union> Q\n  subsumes D' D\n  \\<lbrakk>\\<not> strictly_subsumes ?E D; variants D D'\\<rbrakk>\n  \\<Longrightarrow> \\<not> strictly_subsumes ?E D'\n\ngoal (1 subgoal):\n 1. \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                            P_of_state (Sup_state Sts) \\<union>\n                            Q_of_state (Sup_state Sts).\n                    subsumes E C}.\n       \\<not> strictly_subsumes E D'", "by auto"], ["proof (state)\nthis:\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D'\n\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "from v"], ["proof (chain)\npicking this:\n  variants D D'", "have \"\\<exists>\\<sigma>'. D' \\<cdot> \\<sigma>' = C\""], ["proof (prove)\nusing this:\n  variants D D'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>'. D' \\<cdot> \\<sigma>' = C", "using \\<sigma> variants_imp_exists_substitution variants_sym"], ["proof (prove)\nusing this:\n  variants D D'\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n  variants ?D ?D' \\<Longrightarrow>\n  \\<exists>\\<sigma>. ?D \\<cdot> \\<sigma> = ?D'\n  variants ?D ?D' = variants ?D' ?D\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>'. D' \\<cdot> \\<sigma>' = C", "by (metis subst_cls_comp_subst)"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>'. D' \\<cdot> \\<sigma>' = C\n\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<sigma>'. D' \\<cdot> \\<sigma>' = C", "have \"\\<exists>\\<sigma>'. D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>'. D' \\<cdot> \\<sigma>' = C\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>'.\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "using ground_C"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>'. D' \\<cdot> \\<sigma>' = C\n  is_ground_cls C\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>'.\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "by (meson make_ground_subst refl)"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>'.\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<sigma>'.\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "obtain \\<sigma>' where\n      \\<sigma>'_p: \"D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>'.\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>'.\n        D' \\<cdot> \\<sigma>' = C \\<and>\n        is_ground_subst \\<sigma>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (8 subgoals):\n 1. \\<And>D P Q Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> P \\<union> Q;\n        subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 8. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "using D'_p twins l_p subs mini \\<sigma>'_p"], ["proof (prove)\nusing this:\n  D' \\<in> P \\<union> Q\n  subsumes D' D\n  D_twin = D\n  N_of_state (lnth Sts (Suc l)) = N\n  N_of_state (lnth Sts l) = N \\<union> {D_twin}\n  P_of_state (lnth Sts (Suc l)) = P\n  P_of_state (lnth Sts l) = P\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n  subsumes D' C\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D'\n  D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "by auto"], ["proof (state)\nthis:\n  \\<exists>l D' \\<sigma>'.\n     D' \\<in> P_of_state (lnth Sts l) \\<union>\n              Q_of_state (lnth Sts l) \\<and>\n     enat l < llength Sts \\<and>\n     (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                              P_of_state (Sup_state Sts) \\<union>\n                              Q_of_state (Sup_state Sts).\n                      subsumes E C}.\n         \\<not> strictly_subsumes E D') \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and>\n     is_ground_subst \\<sigma>' \\<and> subsumes D' C\n\ngoal (7 subgoals):\n 1. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "case (forward_reduction E L' P Q L \\<sigma> D' N)"], ["proof (state)\nthis:\n  lnth Sts l = (N \\<union> {D' + {#L#}}, P, Q)\n  lnth Sts (Suc l) = (N \\<union> {D'}, P, Q)\n  E + {#L'#} \\<in> P \\<union> Q\n  - L = L' \\<cdot>l \\<sigma>\n  E \\<cdot> \\<sigma> \\<subseteq># D'\n\ngoal (7 subgoals):\n 1. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  lnth Sts l = (N \\<union> {D' + {#L#}}, P, Q)\n  lnth Sts (Suc l) = (N \\<union> {D'}, P, Q)\n  E + {#L'#} \\<in> P \\<union> Q\n  - L = L' \\<cdot>l \\<sigma>\n  E \\<cdot> \\<sigma> \\<subseteq># D'", "have twins: \"D' + {#L#} = D\" \"?Ns (Suc l) = N \\<union> {D'}\" \"?Ns l = N \\<union> {D' + {#L#}}\"\n      \"?Ps (Suc l) = P \" \"?Ps l = P\" \"?Qs (Suc l) = Q\" \"?Qs l = Q\""], ["proof (prove)\nusing this:\n  lnth Sts l = (N \\<union> {D' + {#L#}}, P, Q)\n  lnth Sts (Suc l) = (N \\<union> {D'}, P, Q)\n  E + {#L'#} \\<in> P \\<union> Q\n  - L = L' \\<cdot>l \\<sigma>\n  E \\<cdot> \\<sigma> \\<subseteq># D'\n\ngoal (1 subgoal):\n 1. (D' + {#L#} = D &&&\n     N_of_state (lnth Sts (Suc l)) = N \\<union> {D'} &&&\n     N_of_state (lnth Sts l) = N \\<union> {D' + {#L#}}) &&&\n    (P_of_state (lnth Sts (Suc l)) = P &&& P_of_state (lnth Sts l) = P) &&&\n    Q_of_state (lnth Sts (Suc l)) = Q &&& Q_of_state (lnth Sts l) = Q", "using l_p"], ["proof (prove)\nusing this:\n  lnth Sts l = (N \\<union> {D' + {#L#}}, P, Q)\n  lnth Sts (Suc l) = (N \\<union> {D'}, P, Q)\n  E + {#L'#} \\<in> P \\<union> Q\n  - L = L' \\<cdot>l \\<sigma>\n  E \\<cdot> \\<sigma> \\<subseteq># D'\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. (D' + {#L#} = D &&&\n     N_of_state (lnth Sts (Suc l)) = N \\<union> {D'} &&&\n     N_of_state (lnth Sts l) = N \\<union> {D' + {#L#}}) &&&\n    (P_of_state (lnth Sts (Suc l)) = P &&& P_of_state (lnth Sts l) = P) &&&\n    Q_of_state (lnth Sts (Suc l)) = Q &&& Q_of_state (lnth Sts l) = Q", "by auto"], ["proof (state)\nthis:\n  D' + {#L#} = D\n  N_of_state (lnth Sts (Suc l)) = N \\<union> {D'}\n  N_of_state (lnth Sts l) = N \\<union> {D' + {#L#}}\n  P_of_state (lnth Sts (Suc l)) = P\n  P_of_state (lnth Sts l) = P\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q\n\ngoal (7 subgoals):\n 1. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  D' + {#L#} = D\n  N_of_state (lnth Sts (Suc l)) = N \\<union> {D'}\n  N_of_state (lnth Sts l) = N \\<union> {D' + {#L#}}\n  P_of_state (lnth Sts (Suc l)) = P\n  P_of_state (lnth Sts l) = P\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q", "have D'_p: \"strictly_subsumes D' D \\<and> D' \\<in> ?Ns (Suc l)\""], ["proof (prove)\nusing this:\n  D' + {#L#} = D\n  N_of_state (lnth Sts (Suc l)) = N \\<union> {D'}\n  N_of_state (lnth Sts l) = N \\<union> {D' + {#L#}}\n  P_of_state (lnth Sts (Suc l)) = P\n  P_of_state (lnth Sts l) = P\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q\n\ngoal (1 subgoal):\n 1. strictly_subsumes D' D \\<and> D' \\<in> N_of_state (lnth Sts (Suc l))", "using subset_strictly_subsumes[of D' D]"], ["proof (prove)\nusing this:\n  D' + {#L#} = D\n  N_of_state (lnth Sts (Suc l)) = N \\<union> {D'}\n  N_of_state (lnth Sts l) = N \\<union> {D' + {#L#}}\n  P_of_state (lnth Sts (Suc l)) = P\n  P_of_state (lnth Sts l) = P\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q\n  D' \\<subset># D \\<Longrightarrow> strictly_subsumes D' D\n\ngoal (1 subgoal):\n 1. strictly_subsumes D' D \\<and> D' \\<in> N_of_state (lnth Sts (Suc l))", "by auto"], ["proof (state)\nthis:\n  strictly_subsumes D' D \\<and> D' \\<in> N_of_state (lnth Sts (Suc l))\n\ngoal (7 subgoals):\n 1. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  strictly_subsumes D' D \\<and> D' \\<in> N_of_state (lnth Sts (Suc l))", "have subc: \"subsumes D' C\""], ["proof (prove)\nusing this:\n  strictly_subsumes D' D \\<and> D' \\<in> N_of_state (lnth Sts (Suc l))\n\ngoal (1 subgoal):\n 1. subsumes D' C", "using d(3) subsumes_trans"], ["proof (prove)\nusing this:\n  strictly_subsumes D' D \\<and> D' \\<in> N_of_state (lnth Sts (Suc l))\n  subsumes D C\n  \\<lbrakk>subsumes ?C ?D; subsumes ?D ?E\\<rbrakk>\n  \\<Longrightarrow> subsumes ?C ?E\n\ngoal (1 subgoal):\n 1. subsumes D' C", "unfolding strictly_subsumes_def"], ["proof (prove)\nusing this:\n  (subsumes D' D \\<and> \\<not> subsumes D D') \\<and>\n  D' \\<in> N_of_state (lnth Sts (Suc l))\n  subsumes D C\n  \\<lbrakk>subsumes ?C ?D; subsumes ?D ?E\\<rbrakk>\n  \\<Longrightarrow> subsumes ?C ?E\n\ngoal (1 subgoal):\n 1. subsumes D' C", "by blast"], ["proof (state)\nthis:\n  subsumes D' C\n\ngoal (7 subgoals):\n 1. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "from D'_p"], ["proof (chain)\npicking this:\n  strictly_subsumes D' D \\<and> D' \\<in> N_of_state (lnth Sts (Suc l))", "have \"D' \\<in> clss_of_state (Sup_state Sts)\""], ["proof (prove)\nusing this:\n  strictly_subsumes D' D \\<and> D' \\<in> N_of_state (lnth Sts (Suc l))\n\ngoal (1 subgoal):\n 1. D' \\<in> N_of_state (Sup_state Sts) \\<union>\n             P_of_state (Sup_state Sts) \\<union>\n             Q_of_state (Sup_state Sts)", "using l_p"], ["proof (prove)\nusing this:\n  strictly_subsumes D' D \\<and> D' \\<in> N_of_state (lnth Sts (Suc l))\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. D' \\<in> N_of_state (Sup_state Sts) \\<union>\n             P_of_state (Sup_state Sts) \\<union>\n             Q_of_state (Sup_state Sts)", "by (metis (no_types) UnI1 N_of_state.simps llength_lmap lnth_lmap\n          lnth_subset_Sup_llist subsetCE Sup_state_def)"], ["proof (state)\nthis:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)\n\ngoal (7 subgoals):\n 1. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)", "have False"], ["proof (prove)\nusing this:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)\n\ngoal (1 subgoal):\n 1. False", "using d_least D'_p subc"], ["proof (prove)\nusing this:\n  D' \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts)\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n  strictly_subsumes D' D \\<and> D' \\<in> N_of_state (lnth Sts (Suc l))\n  subsumes D' C\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (7 subgoals):\n 1. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D L' P Q L \\<sigma> Ca N.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca + {#L#}}, P, Q);\n        lnth Sts (Suc l) = (N \\<union> {Ca}, P, Q);\n        D + {#L'#} \\<in> P \\<union> Q; - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 7. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "by auto"], ["proof (state)\nthis:\n  \\<exists>l D' \\<sigma>'.\n     D' \\<in> P_of_state (lnth Sts l) \\<union>\n              Q_of_state (lnth Sts l) \\<and>\n     enat l < llength Sts \\<and>\n     (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                              P_of_state (Sup_state Sts) \\<union>\n                              Q_of_state (Sup_state Sts).\n                      subsumes E C}.\n         \\<not> strictly_subsumes E D') \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and>\n     is_ground_subst \\<sigma>' \\<and> subsumes D' C\n\ngoal (6 subgoals):\n 1. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "case (clause_processing N D_twin P Q)"], ["proof (state)\nthis:\n  lnth Sts l = (N \\<union> {D_twin}, P, Q)\n  lnth Sts (Suc l) = (N, P \\<union> {D_twin}, Q)\n\ngoal (6 subgoals):\n 1. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  lnth Sts l = (N \\<union> {D_twin}, P, Q)\n  lnth Sts (Suc l) = (N, P \\<union> {D_twin}, Q)", "have twins:  \"D_twin = D\" \"?Ns (Suc l) = N\" \"?Ns l = N \\<union> {D}\"  \"?Ps (Suc l) = P \\<union> {D}\"\n      \"?Ps l = P\" \"?Qs (Suc l) = Q\" \"?Qs l = Q\""], ["proof (prove)\nusing this:\n  lnth Sts l = (N \\<union> {D_twin}, P, Q)\n  lnth Sts (Suc l) = (N, P \\<union> {D_twin}, Q)\n\ngoal (1 subgoal):\n 1. (D_twin = D &&&\n     N_of_state (lnth Sts (Suc l)) = N &&&\n     N_of_state (lnth Sts l) = N \\<union> {D}) &&&\n    (P_of_state (lnth Sts (Suc l)) = P \\<union> {D} &&&\n     P_of_state (lnth Sts l) = P) &&&\n    Q_of_state (lnth Sts (Suc l)) = Q &&& Q_of_state (lnth Sts l) = Q", "using l_p"], ["proof (prove)\nusing this:\n  lnth Sts l = (N \\<union> {D_twin}, P, Q)\n  lnth Sts (Suc l) = (N, P \\<union> {D_twin}, Q)\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n\ngoal (1 subgoal):\n 1. (D_twin = D &&&\n     N_of_state (lnth Sts (Suc l)) = N &&&\n     N_of_state (lnth Sts l) = N \\<union> {D}) &&&\n    (P_of_state (lnth Sts (Suc l)) = P \\<union> {D} &&&\n     P_of_state (lnth Sts l) = P) &&&\n    Q_of_state (lnth Sts (Suc l)) = Q &&& Q_of_state (lnth Sts l) = Q", "by auto"], ["proof (state)\nthis:\n  D_twin = D\n  N_of_state (lnth Sts (Suc l)) = N\n  N_of_state (lnth Sts l) = N \\<union> {D}\n  P_of_state (lnth Sts (Suc l)) = P \\<union> {D}\n  P_of_state (lnth Sts l) = P\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q\n\ngoal (6 subgoals):\n 1. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N \\<union> {Ca}, P, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 6. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "then"], ["proof (chain)\npicking this:\n  D_twin = D\n  N_of_state (lnth Sts (Suc l)) = N\n  N_of_state (lnth Sts l) = N \\<union> {D}\n  P_of_state (lnth Sts (Suc l)) = P \\<union> {D}\n  P_of_state (lnth Sts l) = P\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q", "show ?thesis"], ["proof (prove)\nusing this:\n  D_twin = D\n  N_of_state (lnth Sts (Suc l)) = N\n  N_of_state (lnth Sts l) = N \\<union> {D}\n  P_of_state (lnth Sts (Suc l)) = P \\<union> {D}\n  P_of_state (lnth Sts l) = P\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q\n\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "using d \\<sigma> l_p d_least"], ["proof (prove)\nusing this:\n  D_twin = D\n  N_of_state (lnth Sts (Suc l)) = N\n  N_of_state (lnth Sts l) = N \\<union> {D}\n  P_of_state (lnth Sts (Suc l)) = P \\<union> {D}\n  P_of_state (lnth Sts l) = P\n  Q_of_state (lnth Sts (Suc l)) = Q\n  Q_of_state (lnth Sts l) = Q\n  D \\<in> N_of_state (lnth Sts i)\n  enat i < llength Sts\n  subsumes D C\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n  D \\<in> N_of_state (lnth Sts l) \\<and>\n  D \\<notin> N_of_state (lnth Sts (Suc l)) \\<and>\n  i \\<le> l \\<and> enat (Suc l) < llength Sts\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n\ngoal (1 subgoal):\n 1. \\<exists>l D' \\<sigma>'.\n       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                Q_of_state (lnth Sts l) \\<and>\n       enat l < llength Sts \\<and>\n       (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                P_of_state (Sup_state Sts) \\<union>\n                                Q_of_state (Sup_state Sts).\n                        subsumes E C}.\n           \\<not> strictly_subsumes E D') \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and>\n       is_ground_subst \\<sigma>' \\<and> subsumes D' C", "by blast"], ["proof (state)\nthis:\n  \\<exists>l D' \\<sigma>'.\n     D' \\<in> P_of_state (lnth Sts l) \\<union>\n              Q_of_state (lnth Sts l) \\<and>\n     enat l < llength Sts \\<and>\n     (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                              P_of_state (Sup_state Sts) \\<union>\n                              Q_of_state (Sup_state Sts).\n                      subsumes E C}.\n         \\<not> strictly_subsumes E D') \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and>\n     is_ground_subst \\<sigma>' \\<and> subsumes D' C\n\ngoal (5 subgoals):\n 1. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 2. \\<And>D N Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca});\n        lnth Sts (Suc l) = (N, P, Q); D \\<in> N;\n        strictly_subsumes D Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 3. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P \\<union> {Ca + {#L#}}, Q);\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 4. \\<And>D L' N L \\<sigma> Ca P Q.\n       \\<lbrakk>lnth Sts l = (N, P, Q \\<union> {Ca + {#L#}});\n        lnth Sts (Suc l) = (N, P \\<union> {Ca}, Q); D + {#L'#} \\<in> N;\n        - L = L' \\<cdot>l \\<sigma>;\n        D \\<cdot> \\<sigma> \\<subseteq># Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C\n 5. \\<And>N Q Ca P.\n       \\<lbrakk>lnth Sts l = ({}, P \\<union> {Ca}, Q);\n        lnth Sts (Suc l) = (N, P, Q \\<union> {Ca});\n        N = concls_of (ord_FO_resolution.inferences_between Q Ca)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                            D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                     Q_of_state (lnth Sts l) \\<and>\n                            enat l < llength Sts \\<and>\n                            (\\<forall>E\n\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts).\n      subsumes E C}.\n                                \\<not> strictly_subsumes E D') \\<and>\n                            D' \\<cdot> \\<sigma>' = C \\<and>\n                            is_ground_subst \\<sigma>' \\<and> subsumes D' C", "qed (use l_p in auto)"], ["proof (state)\nthis:\n  \\<exists>l D' \\<sigma>'.\n     D' \\<in> P_of_state (lnth Sts l) \\<union>\n              Q_of_state (lnth Sts l) \\<and>\n     enat l < llength Sts \\<and>\n     (\\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                              P_of_state (Sup_state Sts) \\<union>\n                              Q_of_state (Sup_state Sts).\n                      subsumes E C}.\n         \\<not> strictly_subsumes E D') \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and>\n     is_ground_subst \\<sigma>' \\<and> subsumes D' C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eventually_in_Qinf:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    D_p: \"D \\<in> clss_of_state (Sup_state Sts)\"\n      \"subsumes D C\" \"\\<forall>E \\<in> {E. E \\<in> (clss_of_state (Sup_state Sts)) \\<and> subsumes E C}.\n       \\<not> strictly_subsumes E D\" and\n    fair: \"fair_state_seq Sts\" and\n    ns: \"Gs = lmap grounding_of_state Sts\" and\n    c: \"C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\" and\n    ground_C: \"is_ground_cls C\"\n  shows \"\\<exists>D' \\<sigma>'. D' \\<in> Q_of_state (Liminf_state Sts) \\<and> D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "let ?Ns = \"\\<lambda>i. N_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "let ?Ps = \"\\<lambda>i. P_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "let ?Qs = \"\\<lambda>i. Q_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "from D_p"], ["proof (chain)\npicking this:\n  D \\<in> N_of_state (Sup_state Sts) \\<union>\n          P_of_state (Sup_state Sts) \\<union>\n          Q_of_state (Sup_state Sts)\n  subsumes D C\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D", "obtain i where\n    i_p: \"i < llength Sts\" \"D \\<in> ?Ns i \\<or> D \\<in> ?Ps i \\<or> D \\<in> ?Qs i\""], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (Sup_state Sts) \\<union>\n          P_of_state (Sup_state Sts) \\<union>\n          Q_of_state (Sup_state Sts)\n  subsumes D C\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>enat i < llength Sts;\n         D \\<in> N_of_state (lnth Sts i) \\<or>\n         D \\<in> P_of_state (lnth Sts i) \\<or>\n         D \\<in> Q_of_state (lnth Sts i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding Sup_state_def"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state\n           (Sup_llist (lmap N_of_state Sts),\n            Sup_llist (lmap P_of_state Sts),\n            Sup_llist (lmap Q_of_state Sts)) \\<union>\n          P_of_state\n           (Sup_llist (lmap N_of_state Sts),\n            Sup_llist (lmap P_of_state Sts),\n            Sup_llist (lmap Q_of_state Sts)) \\<union>\n          Q_of_state\n           (Sup_llist (lmap N_of_state Sts),\n            Sup_llist (lmap P_of_state Sts),\n            Sup_llist (lmap Q_of_state Sts))\n  subsumes D C\n  \\<forall>E\\<in>{E \\<in> N_of_state\n                           (Sup_llist (lmap N_of_state Sts),\n                            Sup_llist (lmap P_of_state Sts),\n                            Sup_llist (lmap Q_of_state Sts)) \\<union>\n                          P_of_state\n                           (Sup_llist (lmap N_of_state Sts),\n                            Sup_llist (lmap P_of_state Sts),\n                            Sup_llist (lmap Q_of_state Sts)) \\<union>\n                          Q_of_state\n                           (Sup_llist (lmap N_of_state Sts),\n                            Sup_llist (lmap P_of_state Sts),\n                            Sup_llist (lmap Q_of_state Sts)).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>enat i < llength Sts;\n         D \\<in> N_of_state (lnth Sts i) \\<or>\n         D \\<in> P_of_state (lnth Sts i) \\<or>\n         D \\<in> Q_of_state (lnth Sts i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp_all (metis (no_types) Sup_llist_imp_exists_index llength_lmap lnth_lmap)"], ["proof (state)\nthis:\n  enat i < llength Sts\n  D \\<in> N_of_state (lnth Sts i) \\<or>\n  D \\<in> P_of_state (lnth Sts i) \\<or> D \\<in> Q_of_state (lnth Sts i)\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "have derivns: \"chain sr_ext.derive Gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain sr_ext.derive Gs", "using ground_derive_chain deriv ns"], ["proof (prove)\nusing this:\n  chain (\\<leadsto>) Sts \\<Longrightarrow>\n  chain sr_ext.derive\n   (lmap\n     (\\<lambda>St.\n         grounding_of_clss\n          (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n     Sts)\n  chain (\\<leadsto>) Sts\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. chain sr_ext.derive Gs", "by auto"], ["proof (state)\nthis:\n  chain sr_ext.derive Gs\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "have \"\\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "using instance_if_subsumed_and_in_limit[OF deriv ns c] D_p i_p"], ["proof (prove)\nusing this:\n  \\<lbrakk>?D \\<in> N_of_state (lnth Sts ?i) \\<union>\n                    P_of_state (lnth Sts ?i) \\<union>\n                    Q_of_state (lnth Sts ?i);\n   enat ?i < llength Sts; subsumes ?D C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>.\n                       ?D \\<cdot> \\<sigma> = C \\<and>\n                       is_ground_subst \\<sigma>\n  D \\<in> N_of_state (Sup_state Sts) \\<union>\n          P_of_state (Sup_state Sts) \\<union>\n          Q_of_state (Sup_state Sts)\n  subsumes D C\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n  enat i < llength Sts\n  D \\<in> N_of_state (lnth Sts i) \\<or>\n  D \\<in> P_of_state (lnth Sts i) \\<or> D \\<in> Q_of_state (lnth Sts i)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>", "obtain \\<sigma> where\n    \\<sigma>: \"D \\<cdot> \\<sigma> = C\" \"is_ground_subst \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. D \\<cdot> \\<sigma> = C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<lbrakk>D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "{"], ["proof (state)\nthis:\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "assume a: \"D \\<in> ?Ns i\""], ["proof (state)\nthis:\n  D \\<in> N_of_state (lnth Sts i)\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "then"], ["proof (chain)\npicking this:\n  D \\<in> N_of_state (lnth Sts i)", "obtain D' \\<sigma>' l where D'_p:\n      \"D' \\<in> ?Ps l \\<union> ?Qs l\"\n      \"D' \\<cdot> \\<sigma>' = C\"\n      \"enat l < llength Sts\"\n      \"is_ground_subst \\<sigma>'\"\n      \"\\<forall>E \\<in> {E. E \\<in> (clss_of_state (Sup_state Sts)) \\<and> subsumes E C}. \\<not> strictly_subsumes E D'\"\n      \"subsumes D' C\""], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (lnth Sts i)\n\ngoal (1 subgoal):\n 1. (\\<And>D' l \\<sigma>'.\n        \\<lbrakk>D' \\<in> P_of_state (lnth Sts l) \\<union>\n                          Q_of_state (lnth Sts l);\n         D' \\<cdot> \\<sigma>' = C; enat l < llength Sts;\n         is_ground_subst \\<sigma>';\n         \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                 P_of_state (Sup_state Sts) \\<union>\n                                 Q_of_state (Sup_state Sts).\n                         subsumes E C}.\n            \\<not> strictly_subsumes E D';\n         subsumes D' C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using from_N_to_P_or_Q deriv fair ns c i_p(1) D_p(2) D_p(3)"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (lnth Sts i)\n  \\<lbrakk>chain (\\<leadsto>) Sts; fair_state_seq Sts;\n   ?Gs =\n   lmap\n    (\\<lambda>St.\n        grounding_of_clss\n         (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n    Sts;\n   ?C \\<in> Liminf_llist ?Gs - sr.Rf (Liminf_llist ?Gs);\n   ?D \\<in> N_of_state (lnth Sts ?i); enat ?i < llength Sts; subsumes ?D ?C;\n   \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                           P_of_state (Sup_state Sts) \\<union>\n                           Q_of_state (Sup_state Sts).\n                   subsumes E ?C}.\n      \\<not> strictly_subsumes E ?D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l D' \\<sigma>'.\n                       D' \\<in> P_of_state (lnth Sts l) \\<union>\n                                Q_of_state (lnth Sts l) \\<and>\n                       enat l < llength Sts \\<and>\n                       (\\<forall>E\\<in>{E\n  \\<in> N_of_state (Sup_state Sts) \\<union>\n        P_of_state (Sup_state Sts) \\<union>\n        Q_of_state (Sup_state Sts).\n  subsumes E ?C}.\n                           \\<not> strictly_subsumes E D') \\<and>\n                       D' \\<cdot> \\<sigma>' = ?C \\<and>\n                       is_ground_subst \\<sigma>' \\<and> subsumes D' ?C\n  chain (\\<leadsto>) Sts\n  fair_state_seq Sts\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n  enat i < llength Sts\n  subsumes D C\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n\ngoal (1 subgoal):\n 1. (\\<And>D' l \\<sigma>'.\n        \\<lbrakk>D' \\<in> P_of_state (lnth Sts l) \\<union>\n                          Q_of_state (lnth Sts l);\n         D' \\<cdot> \\<sigma>' = C; enat l < llength Sts;\n         is_ground_subst \\<sigma>';\n         \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                 P_of_state (Sup_state Sts) \\<union>\n                                 Q_of_state (Sup_state Sts).\n                         subsumes E C}.\n            \\<not> strictly_subsumes E D';\n         subsumes D' C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  D' \\<in> P_of_state (lnth Sts l) \\<union> Q_of_state (lnth Sts l)\n  D' \\<cdot> \\<sigma>' = C\n  enat l < llength Sts\n  is_ground_subst \\<sigma>'\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D'\n  subsumes D' C\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "then"], ["proof (chain)\npicking this:\n  D' \\<in> P_of_state (lnth Sts l) \\<union> Q_of_state (lnth Sts l)\n  D' \\<cdot> \\<sigma>' = C\n  enat l < llength Sts\n  is_ground_subst \\<sigma>'\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D'\n  subsumes D' C", "obtain l' where\n      l'_p: \"D' \\<in> ?Qs l'\" \"l' < llength Sts\""], ["proof (prove)\nusing this:\n  D' \\<in> P_of_state (lnth Sts l) \\<union> Q_of_state (lnth Sts l)\n  D' \\<cdot> \\<sigma>' = C\n  enat l < llength Sts\n  is_ground_subst \\<sigma>'\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D'\n  subsumes D' C\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>D' \\<in> Q_of_state (lnth Sts l');\n         enat l' < llength Sts\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using from_P_to_Q[OF deriv fair ns c _ D'_p(3) D'_p(6) D'_p(5)]"], ["proof (prove)\nusing this:\n  D' \\<in> P_of_state (lnth Sts l) \\<union> Q_of_state (lnth Sts l)\n  D' \\<cdot> \\<sigma>' = C\n  enat l < llength Sts\n  is_ground_subst \\<sigma>'\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D'\n  subsumes D' C\n  D' \\<in> P_of_state (lnth Sts l) \\<Longrightarrow>\n  \\<exists>l. D' \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>D' \\<in> Q_of_state (lnth Sts l');\n         enat l' < llength Sts\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  D' \\<in> Q_of_state (lnth Sts l')\n  enat l' < llength Sts\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "then"], ["proof (chain)\npicking this:\n  D' \\<in> Q_of_state (lnth Sts l')\n  enat l' < llength Sts", "have \"D' \\<in> Q_of_state (Liminf_state Sts)\""], ["proof (prove)\nusing this:\n  D' \\<in> Q_of_state (lnth Sts l')\n  enat l' < llength Sts\n\ngoal (1 subgoal):\n 1. D' \\<in> Q_of_state (Liminf_state Sts)", "using from_Q_to_Q_inf[OF deriv fair ns c _ l'_p(2)] D'_p"], ["proof (prove)\nusing this:\n  D' \\<in> Q_of_state (lnth Sts l')\n  enat l' < llength Sts\n  \\<lbrakk>?D \\<in> Q_of_state (lnth Sts l'); subsumes ?D C;\n   \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                           P_of_state (Sup_state Sts) \\<union>\n                           Q_of_state (Sup_state Sts).\n                   subsumes E C}.\n      \\<not> strictly_subsumes E ?D\\<rbrakk>\n  \\<Longrightarrow> ?D \\<in> Q_of_state (Liminf_state Sts)\n  D' \\<in> P_of_state (lnth Sts l) \\<union> Q_of_state (lnth Sts l)\n  D' \\<cdot> \\<sigma>' = C\n  enat l < llength Sts\n  is_ground_subst \\<sigma>'\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D'\n  subsumes D' C\n\ngoal (1 subgoal):\n 1. D' \\<in> Q_of_state (Liminf_state Sts)", "by auto"], ["proof (state)\nthis:\n  D' \\<in> Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "then"], ["proof (chain)\npicking this:\n  D' \\<in> Q_of_state (Liminf_state Sts)", "have ?thesis"], ["proof (prove)\nusing this:\n  D' \\<in> Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "using D'_p"], ["proof (prove)\nusing this:\n  D' \\<in> Q_of_state (Liminf_state Sts)\n  D' \\<in> P_of_state (lnth Sts l) \\<union> Q_of_state (lnth Sts l)\n  D' \\<cdot> \\<sigma>' = C\n  enat l < llength Sts\n  is_ground_subst \\<sigma>'\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D'\n  subsumes D' C\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "by auto"], ["proof (state)\nthis:\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "}"], ["proof (state)\nthis:\n  D \\<in> N_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "moreover"], ["proof (state)\nthis:\n  D \\<in> N_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "{"], ["proof (state)\nthis:\n  D \\<in> N_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "assume a: \"D \\<in> ?Ps i\""], ["proof (state)\nthis:\n  D \\<in> P_of_state (lnth Sts i)\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "then"], ["proof (chain)\npicking this:\n  D \\<in> P_of_state (lnth Sts i)", "obtain l' where\n      l'_p: \"D \\<in> ?Qs l'\" \"l' < llength Sts\""], ["proof (prove)\nusing this:\n  D \\<in> P_of_state (lnth Sts i)\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>D \\<in> Q_of_state (lnth Sts l');\n         enat l' < llength Sts\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using from_P_to_Q[OF deriv fair ns c a i_p(1) D_p(2) D_p(3)]"], ["proof (prove)\nusing this:\n  D \\<in> P_of_state (lnth Sts i)\n  \\<exists>l. D \\<in> Q_of_state (lnth Sts l) \\<and> enat l < llength Sts\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>D \\<in> Q_of_state (lnth Sts l');\n         enat l' < llength Sts\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  D \\<in> Q_of_state (lnth Sts l')\n  enat l' < llength Sts\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "then"], ["proof (chain)\npicking this:\n  D \\<in> Q_of_state (lnth Sts l')\n  enat l' < llength Sts", "have \"D \\<in> Q_of_state (Liminf_state Sts)\""], ["proof (prove)\nusing this:\n  D \\<in> Q_of_state (lnth Sts l')\n  enat l' < llength Sts\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "using from_Q_to_Q_inf[OF deriv fair ns c l'_p(1) l'_p(2)] D_p(3) \\<sigma>(1) \\<sigma>(2) D_p(2)"], ["proof (prove)\nusing this:\n  D \\<in> Q_of_state (lnth Sts l')\n  enat l' < llength Sts\n  \\<lbrakk>subsumes D C;\n   \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                           P_of_state (Sup_state Sts) \\<union>\n                           Q_of_state (Sup_state Sts).\n                   subsumes E C}.\n      \\<not> strictly_subsumes E D\\<rbrakk>\n  \\<Longrightarrow> D \\<in> Q_of_state (Liminf_state Sts)\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n  subsumes D C\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "by auto"], ["proof (state)\nthis:\n  D \\<in> Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "then"], ["proof (chain)\npicking this:\n  D \\<in> Q_of_state (Liminf_state Sts)", "have ?thesis"], ["proof (prove)\nusing this:\n  D \\<in> Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "using D_p \\<sigma>"], ["proof (prove)\nusing this:\n  D \\<in> Q_of_state (Liminf_state Sts)\n  D \\<in> N_of_state (Sup_state Sts) \\<union>\n          P_of_state (Sup_state Sts) \\<union>\n          Q_of_state (Sup_state Sts)\n  subsumes D C\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "by auto"], ["proof (state)\nthis:\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "}"], ["proof (state)\nthis:\n  D \\<in> P_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "moreover"], ["proof (state)\nthis:\n  D \\<in> P_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "{"], ["proof (state)\nthis:\n  D \\<in> P_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "assume a: \"D \\<in> ?Qs i\""], ["proof (state)\nthis:\n  D \\<in> Q_of_state (lnth Sts i)\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "then"], ["proof (chain)\npicking this:\n  D \\<in> Q_of_state (lnth Sts i)", "have \"D \\<in> Q_of_state (Liminf_state Sts)\""], ["proof (prove)\nusing this:\n  D \\<in> Q_of_state (lnth Sts i)\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "using from_Q_to_Q_inf[OF deriv fair ns c a i_p(1)] \\<sigma> D_p(2,3)"], ["proof (prove)\nusing this:\n  D \\<in> Q_of_state (lnth Sts i)\n  \\<lbrakk>subsumes D C;\n   \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                           P_of_state (Sup_state Sts) \\<union>\n                           Q_of_state (Sup_state Sts).\n                   subsumes E C}.\n      \\<not> strictly_subsumes E D\\<rbrakk>\n  \\<Longrightarrow> D \\<in> Q_of_state (Liminf_state Sts)\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n  subsumes D C\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n\ngoal (1 subgoal):\n 1. D \\<in> Q_of_state (Liminf_state Sts)", "by auto"], ["proof (state)\nthis:\n  D \\<in> Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "then"], ["proof (chain)\npicking this:\n  D \\<in> Q_of_state (Liminf_state Sts)", "have ?thesis"], ["proof (prove)\nusing this:\n  D \\<in> Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "using D_p \\<sigma>"], ["proof (prove)\nusing this:\n  D \\<in> Q_of_state (Liminf_state Sts)\n  D \\<in> N_of_state (Sup_state Sts) \\<union>\n          P_of_state (Sup_state Sts) \\<union>\n          Q_of_state (Sup_state Sts)\n  subsumes D C\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "by auto"], ["proof (state)\nthis:\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "}"], ["proof (state)\nthis:\n  D \\<in> Q_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "ultimately"], ["proof (chain)\npicking this:\n  D \\<in> N_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n  D \\<in> P_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n  D \\<in> Q_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "show ?thesis"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n  D \\<in> P_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n  D \\<in> Q_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "using i_p"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n  D \\<in> P_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n  D \\<in> Q_of_state (lnth Sts i) \\<Longrightarrow>\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n  enat i < llength Sts\n  D \\<in> N_of_state (lnth Sts i) \\<or>\n  D \\<in> P_of_state (lnth Sts i) \\<or> D \\<in> Q_of_state (lnth Sts i)\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "by auto"], ["proof (state)\nthis:\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nThe following corresponds to Lemma 4.11:\n\\<close>"], ["", "lemma fair_imp_Liminf_minus_Rf_subset_ground_Liminf_state:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    ns: \"Gs = lmap grounding_of_state Sts\"\n  shows \"Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n    \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n    \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<Longrightarrow>\n       x \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "let ?Ns = \"\\<lambda>i. N_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<Longrightarrow>\n       x \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "let ?Ps = \"\\<lambda>i. P_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<Longrightarrow>\n       x \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "let ?Qs = \"\\<lambda>i. Q_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<Longrightarrow>\n       x \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "have SQinf: \"clss_of_state (Liminf_state Sts) = Liminf_llist (lmap Q_of_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N_of_state (Liminf_state Sts) \\<union>\n    P_of_state (Liminf_state Sts) \\<union>\n    Q_of_state (Liminf_state Sts) =\n    Liminf_llist (lmap Q_of_state Sts)", "using fair"], ["proof (prove)\nusing this:\n  fair_state_seq Sts\n\ngoal (1 subgoal):\n 1. N_of_state (Liminf_state Sts) \\<union>\n    P_of_state (Liminf_state Sts) \\<union>\n    Q_of_state (Liminf_state Sts) =\n    Liminf_llist (lmap Q_of_state Sts)", "unfolding fair_state_seq_def Liminf_state_def"], ["proof (prove)\nusing this:\n  N_of_state\n   (Liminf_llist (lmap N_of_state Sts), Liminf_llist (lmap P_of_state Sts),\n    Liminf_llist (lmap Q_of_state Sts)) =\n  {} \\<and>\n  P_of_state\n   (Liminf_llist (lmap N_of_state Sts), Liminf_llist (lmap P_of_state Sts),\n    Liminf_llist (lmap Q_of_state Sts)) =\n  {}\n\ngoal (1 subgoal):\n 1. N_of_state\n     (Liminf_llist (lmap N_of_state Sts),\n      Liminf_llist (lmap P_of_state Sts),\n      Liminf_llist (lmap Q_of_state Sts)) \\<union>\n    P_of_state\n     (Liminf_llist (lmap N_of_state Sts),\n      Liminf_llist (lmap P_of_state Sts),\n      Liminf_llist (lmap Q_of_state Sts)) \\<union>\n    Q_of_state\n     (Liminf_llist (lmap N_of_state Sts),\n      Liminf_llist (lmap P_of_state Sts),\n      Liminf_llist (lmap Q_of_state Sts)) =\n    Liminf_llist (lmap Q_of_state Sts)", "by auto"], ["proof (state)\nthis:\n  N_of_state (Liminf_state Sts) \\<union>\n  P_of_state (Liminf_state Sts) \\<union>\n  Q_of_state (Liminf_state Sts) =\n  Liminf_llist (lmap Q_of_state Sts)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<Longrightarrow>\n       x \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "fix C"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<Longrightarrow>\n       x \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "assume C_p: \"C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\""], ["proof (state)\nthis:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<Longrightarrow>\n       x \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "then"], ["proof (chain)\npicking this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)", "have \"C \\<in> Sup_llist Gs\""], ["proof (prove)\nusing this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n\ngoal (1 subgoal):\n 1. C \\<in> Sup_llist Gs", "using Liminf_llist_subset_Sup_llist[of Gs]"], ["proof (prove)\nusing this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n  Liminf_llist Gs \\<subseteq> Sup_llist Gs\n\ngoal (1 subgoal):\n 1. C \\<in> Sup_llist Gs", "by blast"], ["proof (state)\nthis:\n  C \\<in> Sup_llist Gs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<Longrightarrow>\n       x \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "then"], ["proof (chain)\npicking this:\n  C \\<in> Sup_llist Gs", "obtain D_proto where\n    \"D_proto \\<in> clss_of_state (Sup_state Sts) \\<and> subsumes D_proto C\""], ["proof (prove)\nusing this:\n  C \\<in> Sup_llist Gs\n\ngoal (1 subgoal):\n 1. (\\<And>D_proto.\n        D_proto\n        \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts) \\<and>\n        subsumes D_proto C \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using in_Sup_llist_in_Sup_state"], ["proof (prove)\nusing this:\n  C \\<in> Sup_llist Gs\n  ?C \\<in> Sup_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts) \\<Longrightarrow>\n  \\<exists>D \\<sigma>.\n     D \\<in> N_of_state (Sup_state Sts) \\<union>\n             P_of_state (Sup_state Sts) \\<union>\n             Q_of_state (Sup_state Sts) \\<and>\n     D \\<cdot> \\<sigma> = ?C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>D_proto.\n        D_proto\n        \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts) \\<and>\n        subsumes D_proto C \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding ns subsumes_def"], ["proof (prove)\nusing this:\n  C \\<in> Sup_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)\n  ?C \\<in> Sup_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts) \\<Longrightarrow>\n  \\<exists>D \\<sigma>.\n     D \\<in> N_of_state (Sup_state Sts) \\<union>\n             P_of_state (Sup_state Sts) \\<union>\n             Q_of_state (Sup_state Sts) \\<and>\n     D \\<cdot> \\<sigma> = ?C \\<and> is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>D_proto.\n        D_proto\n        \\<in> N_of_state (Sup_state Sts) \\<union>\n              P_of_state (Sup_state Sts) \\<union>\n              Q_of_state (Sup_state Sts) \\<and>\n        (\\<exists>\\<sigma>.\n            D_proto \\<cdot> \\<sigma> \\<subseteq># C) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  D_proto\n  \\<in> N_of_state (Sup_state Sts) \\<union>\n        P_of_state (Sup_state Sts) \\<union>\n        Q_of_state (Sup_state Sts) \\<and>\n  subsumes D_proto C\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<Longrightarrow>\n       x \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "then"], ["proof (chain)\npicking this:\n  D_proto\n  \\<in> N_of_state (Sup_state Sts) \\<union>\n        P_of_state (Sup_state Sts) \\<union>\n        Q_of_state (Sup_state Sts) \\<and>\n  subsumes D_proto C", "obtain D where\n    D_p: \"D \\<in> clss_of_state (Sup_state Sts)\"\n    \"subsumes D C\"\n    \"\\<forall>E \\<in> {E. E \\<in> clss_of_state (Sup_state Sts) \\<and> subsumes E C}. \\<not> strictly_subsumes E D\""], ["proof (prove)\nusing this:\n  D_proto\n  \\<in> N_of_state (Sup_state Sts) \\<union>\n        P_of_state (Sup_state Sts) \\<union>\n        Q_of_state (Sup_state Sts) \\<and>\n  subsumes D_proto C\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        \\<lbrakk>D \\<in> N_of_state (Sup_state Sts) \\<union>\n                         P_of_state (Sup_state Sts) \\<union>\n                         Q_of_state (Sup_state Sts);\n         subsumes D C;\n         \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                 P_of_state (Sup_state Sts) \\<union>\n                                 Q_of_state (Sup_state Sts).\n                         subsumes E C}.\n            \\<not> strictly_subsumes E D\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using strictly_subsumes_has_minimum[of \"{E. E \\<in> clss_of_state (Sup_state Sts) \\<and> subsumes E C}\"]"], ["proof (prove)\nusing this:\n  D_proto\n  \\<in> N_of_state (Sup_state Sts) \\<union>\n        P_of_state (Sup_state Sts) \\<union>\n        Q_of_state (Sup_state Sts) \\<and>\n  subsumes D_proto C\n  {E \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts).\n   subsumes E C} \\<noteq>\n  {} \\<Longrightarrow>\n  \\<exists>Ca\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                           P_of_state (Sup_state Sts) \\<union>\n                           Q_of_state (Sup_state Sts).\n                   subsumes E C}.\n     \\<forall>D\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                             P_of_state (Sup_state Sts) \\<union>\n                             Q_of_state (Sup_state Sts).\n                     subsumes E C}.\n        \\<not> strictly_subsumes D Ca\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        \\<lbrakk>D \\<in> N_of_state (Sup_state Sts) \\<union>\n                         P_of_state (Sup_state Sts) \\<union>\n                         Q_of_state (Sup_state Sts);\n         subsumes D C;\n         \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                                 P_of_state (Sup_state Sts) \\<union>\n                                 Q_of_state (Sup_state Sts).\n                         subsumes E C}.\n            \\<not> strictly_subsumes E D\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  D \\<in> N_of_state (Sup_state Sts) \\<union>\n          P_of_state (Sup_state Sts) \\<union>\n          Q_of_state (Sup_state Sts)\n  subsumes D C\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<Longrightarrow>\n       x \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "have ground_C: \"is_ground_cls C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ground_cls C", "using C_p"], ["proof (prove)\nusing this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n\ngoal (1 subgoal):\n 1. is_ground_cls C", "using Liminf_grounding_of_state_ground ns"], ["proof (prove)\nusing this:\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n  ?C \\<in> Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts) \\<Longrightarrow>\n  is_ground_cls ?C\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. is_ground_cls C", "by auto"], ["proof (state)\nthis:\n  is_ground_cls C\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<Longrightarrow>\n       x \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "have \"\\<exists>D' \\<sigma>'. D' \\<in> Q_of_state (Liminf_state Sts) \\<and> D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "using eventually_in_Qinf[of D C Gs]"], ["proof (prove)\nusing this:\n  \\<lbrakk>chain (\\<leadsto>) Sts;\n   D \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts);\n   subsumes D C;\n   \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                           P_of_state (Sup_state Sts) \\<union>\n                           Q_of_state (Sup_state Sts).\n                   subsumes E C}.\n      \\<not> strictly_subsumes E D;\n   fair_state_seq Sts;\n   Gs =\n   lmap\n    (\\<lambda>St.\n        grounding_of_clss\n         (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n    Sts;\n   C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs);\n   is_ground_cls C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>D' \\<sigma>'.\n                       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n                       D' \\<cdot> \\<sigma>' = C \\<and>\n                       is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "using D_p(1-3) deriv fair ns C_p ground_C"], ["proof (prove)\nusing this:\n  \\<lbrakk>chain (\\<leadsto>) Sts;\n   D \\<in> N_of_state (Sup_state Sts) \\<union>\n           P_of_state (Sup_state Sts) \\<union>\n           Q_of_state (Sup_state Sts);\n   subsumes D C;\n   \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                           P_of_state (Sup_state Sts) \\<union>\n                           Q_of_state (Sup_state Sts).\n                   subsumes E C}.\n      \\<not> strictly_subsumes E D;\n   fair_state_seq Sts;\n   Gs =\n   lmap\n    (\\<lambda>St.\n        grounding_of_clss\n         (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n    Sts;\n   C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs);\n   is_ground_cls C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>D' \\<sigma>'.\n                       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n                       D' \\<cdot> \\<sigma>' = C \\<and>\n                       is_ground_subst \\<sigma>'\n  D \\<in> N_of_state (Sup_state Sts) \\<union>\n          P_of_state (Sup_state Sts) \\<union>\n          Q_of_state (Sup_state Sts)\n  subsumes D C\n  \\<forall>E\\<in>{E \\<in> N_of_state (Sup_state Sts) \\<union>\n                          P_of_state (Sup_state Sts) \\<union>\n                          Q_of_state (Sup_state Sts).\n                  subsumes E C}.\n     \\<not> strictly_subsumes E D\n  chain (\\<leadsto>) Sts\n  fair_state_seq Sts\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n  C \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n  is_ground_cls C\n\ngoal (1 subgoal):\n 1. \\<exists>D' \\<sigma>'.\n       D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n       D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "by auto"], ["proof (state)\nthis:\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<Longrightarrow>\n       x \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "then"], ["proof (chain)\npicking this:\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "obtain D' \\<sigma>' where\n    D'_p: \"D' \\<in> Q_of_state (Liminf_state Sts) \\<and> D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<exists>D' \\<sigma>'.\n     D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n     D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<And>D' \\<sigma>'.\n        D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n        D' \\<cdot> \\<sigma>' = C \\<and>\n        is_ground_subst \\<sigma>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n  D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<Longrightarrow>\n       x \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "then"], ["proof (chain)\npicking this:\n  D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n  D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'", "have \"D' \\<in> clss_of_state (Liminf_state Sts)\""], ["proof (prove)\nusing this:\n  D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n  D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. D' \\<in> N_of_state (Liminf_state Sts) \\<union>\n             P_of_state (Liminf_state Sts) \\<union>\n             Q_of_state (Liminf_state Sts)", "by simp"], ["proof (state)\nthis:\n  D' \\<in> N_of_state (Liminf_state Sts) \\<union>\n           P_of_state (Liminf_state Sts) \\<union>\n           Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<Longrightarrow>\n       x \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "then"], ["proof (chain)\npicking this:\n  D' \\<in> N_of_state (Liminf_state Sts) \\<union>\n           P_of_state (Liminf_state Sts) \\<union>\n           Q_of_state (Liminf_state Sts)", "have \"C \\<in> grounding_of_state (Liminf_state Sts)\""], ["proof (prove)\nusing this:\n  D' \\<in> N_of_state (Liminf_state Sts) \\<union>\n           P_of_state (Liminf_state Sts) \\<union>\n           Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. C \\<in> grounding_of_clss\n             (N_of_state (Liminf_state Sts) \\<union>\n              P_of_state (Liminf_state Sts) \\<union>\n              Q_of_state (Liminf_state Sts))", "unfolding grounding_of_clss_def grounding_of_cls_def"], ["proof (prove)\nusing this:\n  D' \\<in> N_of_state (Liminf_state Sts) \\<union>\n           P_of_state (Liminf_state Sts) \\<union>\n           Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. C \\<in> (\\<Union>C\\<in>N_of_state (Liminf_state Sts) \\<union>\n                           P_of_state (Liminf_state Sts) \\<union>\n                           Q_of_state (Liminf_state Sts).\n                {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})", "using D'_p"], ["proof (prove)\nusing this:\n  D' \\<in> N_of_state (Liminf_state Sts) \\<union>\n           P_of_state (Liminf_state Sts) \\<union>\n           Q_of_state (Liminf_state Sts)\n  D' \\<in> Q_of_state (Liminf_state Sts) \\<and>\n  D' \\<cdot> \\<sigma>' = C \\<and> is_ground_subst \\<sigma>'\n\ngoal (1 subgoal):\n 1. C \\<in> (\\<Union>C\\<in>N_of_state (Liminf_state Sts) \\<union>\n                           P_of_state (Liminf_state Sts) \\<union>\n                           Q_of_state (Liminf_state Sts).\n                {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})", "by auto"], ["proof (state)\nthis:\n  C \\<in> grounding_of_clss\n           (N_of_state (Liminf_state Sts) \\<union>\n            P_of_state (Liminf_state Sts) \\<union>\n            Q_of_state (Liminf_state Sts))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<Longrightarrow>\n       x \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "then"], ["proof (chain)\npicking this:\n  C \\<in> grounding_of_clss\n           (N_of_state (Liminf_state Sts) \\<union>\n            P_of_state (Liminf_state Sts) \\<union>\n            Q_of_state (Liminf_state Sts))", "show \"C \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))\""], ["proof (prove)\nusing this:\n  C \\<in> grounding_of_clss\n           (N_of_state (Liminf_state Sts) \\<union>\n            P_of_state (Liminf_state Sts) \\<union>\n            Q_of_state (Liminf_state Sts))\n\ngoal (1 subgoal):\n 1. C \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "using SQinf fair fair_state_seq_def"], ["proof (prove)\nusing this:\n  C \\<in> grounding_of_clss\n           (N_of_state (Liminf_state Sts) \\<union>\n            P_of_state (Liminf_state Sts) \\<union>\n            Q_of_state (Liminf_state Sts))\n  N_of_state (Liminf_state Sts) \\<union>\n  P_of_state (Liminf_state Sts) \\<union>\n  Q_of_state (Liminf_state Sts) =\n  Liminf_llist (lmap Q_of_state Sts)\n  fair_state_seq Sts\n  fair_state_seq ?Sts =\n  (N_of_state (Liminf_state ?Sts) = {} \\<and>\n   P_of_state (Liminf_state ?Sts) = {})\n\ngoal (1 subgoal):\n 1. C \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "by auto"], ["proof (state)\nthis:\n  C \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nThe following corresponds to (one direction of) Theorem 4.13:\n\\<close>"], ["", "lemma subseteq_Liminf_state_eventually_always:\n  fixes CC\n  assumes\n    \"finite CC\" and\n    \"CC \\<noteq> {}\" and\n    \"CC \\<subseteq> Q_of_state (Liminf_state Sts)\"\n  shows \"\\<exists>j. enat j < llength Sts \\<and> (\\<forall>j' \\<ge> enat j. j' < llength Sts \\<longrightarrow> CC \\<subseteq> Q_of_state (lnth Sts j'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j.\n       enat j < llength Sts \\<and>\n       (\\<forall>j'.\n           enat j \\<le> enat j' \\<longrightarrow>\n           enat j' < llength Sts \\<longrightarrow>\n           CC \\<subseteq> Q_of_state (lnth Sts j'))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>j.\n       enat j < llength Sts \\<and>\n       (\\<forall>j'.\n           enat j \\<le> enat j' \\<longrightarrow>\n           enat j' < llength Sts \\<longrightarrow>\n           CC \\<subseteq> Q_of_state (lnth Sts j'))", "from assms(3)"], ["proof (chain)\npicking this:\n  CC \\<subseteq> Q_of_state (Liminf_state Sts)", "have \"\\<forall>C \\<in> CC. \\<exists>j. enat j < llength Sts \\<and>\n    (\\<forall>j' \\<ge> enat j. j' < llength Sts \\<longrightarrow> C \\<in> Q_of_state (lnth Sts j'))\""], ["proof (prove)\nusing this:\n  CC \\<subseteq> Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. \\<forall>C\\<in>CC.\n       \\<exists>j.\n          enat j < llength Sts \\<and>\n          (\\<forall>j'.\n              enat j \\<le> enat j' \\<longrightarrow>\n              enat j' < llength Sts \\<longrightarrow>\n              C \\<in> Q_of_state (lnth Sts j'))", "unfolding Liminf_state_def Liminf_llist_def"], ["proof (prove)\nusing this:\n  CC \\<subseteq> Q_of_state\n                  (\\<Union>i\\<in>{i. enat i\n                                     < llength (lmap N_of_state Sts)}.\n                      \\<Inter>\n                       (lnth (lmap N_of_state Sts) `\n                        {j. i \\<le> j \\<and>\n                            enat j < llength (lmap N_of_state Sts)}),\n                   \\<Union>i\\<in>{i. enat i\n                                     < llength (lmap P_of_state Sts)}.\n                      \\<Inter>\n                       (lnth (lmap P_of_state Sts) `\n                        {j. i \\<le> j \\<and>\n                            enat j < llength (lmap P_of_state Sts)}),\n                   \\<Union>i\\<in>{i. enat i\n                                     < llength (lmap Q_of_state Sts)}.\n                      \\<Inter>\n                       (lnth (lmap Q_of_state Sts) `\n                        {j. i \\<le> j \\<and>\n                            enat j < llength (lmap Q_of_state Sts)}))\n\ngoal (1 subgoal):\n 1. \\<forall>C\\<in>CC.\n       \\<exists>j.\n          enat j < llength Sts \\<and>\n          (\\<forall>j'.\n              enat j \\<le> enat j' \\<longrightarrow>\n              enat j' < llength Sts \\<longrightarrow>\n              C \\<in> Q_of_state (lnth Sts j'))", "by force"], ["proof (state)\nthis:\n  \\<forall>C\\<in>CC.\n     \\<exists>j.\n        enat j < llength Sts \\<and>\n        (\\<forall>j'.\n            enat j \\<le> enat j' \\<longrightarrow>\n            enat j' < llength Sts \\<longrightarrow>\n            C \\<in> Q_of_state (lnth Sts j'))\n\ngoal (1 subgoal):\n 1. \\<exists>j.\n       enat j < llength Sts \\<and>\n       (\\<forall>j'.\n           enat j \\<le> enat j' \\<longrightarrow>\n           enat j' < llength Sts \\<longrightarrow>\n           CC \\<subseteq> Q_of_state (lnth Sts j'))", "then"], ["proof (chain)\npicking this:\n  \\<forall>C\\<in>CC.\n     \\<exists>j.\n        enat j < llength Sts \\<and>\n        (\\<forall>j'.\n            enat j \\<le> enat j' \\<longrightarrow>\n            enat j' < llength Sts \\<longrightarrow>\n            C \\<in> Q_of_state (lnth Sts j'))", "obtain f where\n    f_p: \"\\<forall>C \\<in> CC. f C < llength Sts \\<and> (\\<forall>j' \\<ge> enat (f C). j' < llength Sts \\<longrightarrow> C \\<in> Q_of_state (lnth Sts j'))\""], ["proof (prove)\nusing this:\n  \\<forall>C\\<in>CC.\n     \\<exists>j.\n        enat j < llength Sts \\<and>\n        (\\<forall>j'.\n            enat j \\<le> enat j' \\<longrightarrow>\n            enat j' < llength Sts \\<longrightarrow>\n            C \\<in> Q_of_state (lnth Sts j'))\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<forall>C\\<in>CC.\n           enat (f C) < llength Sts \\<and>\n           (\\<forall>j'.\n               enat (f C) \\<le> enat j' \\<longrightarrow>\n               enat j' < llength Sts \\<longrightarrow>\n               C \\<in> Q_of_state (lnth Sts j')) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  \\<forall>C\\<in>CC.\n     enat (f C) < llength Sts \\<and>\n     (\\<forall>j'.\n         enat (f C) \\<le> enat j' \\<longrightarrow>\n         enat j' < llength Sts \\<longrightarrow>\n         C \\<in> Q_of_state (lnth Sts j'))\n\ngoal (1 subgoal):\n 1. \\<exists>j.\n       enat j < llength Sts \\<and>\n       (\\<forall>j'.\n           enat j \\<le> enat j' \\<longrightarrow>\n           enat j' < llength Sts \\<longrightarrow>\n           CC \\<subseteq> Q_of_state (lnth Sts j'))", "define j :: nat where\n    \"j = Max (f ` CC)\""], ["proof (state)\nthis:\n  j = Max (f ` CC)\n\ngoal (1 subgoal):\n 1. \\<exists>j.\n       enat j < llength Sts \\<and>\n       (\\<forall>j'.\n           enat j \\<le> enat j' \\<longrightarrow>\n           enat j' < llength Sts \\<longrightarrow>\n           CC \\<subseteq> Q_of_state (lnth Sts j'))", "have \"enat j < llength Sts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat j < llength Sts", "unfolding j_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Max (f ` CC)) < llength Sts", "using f_p assms(1)"], ["proof (prove)\nusing this:\n  \\<forall>C\\<in>CC.\n     enat (f C) < llength Sts \\<and>\n     (\\<forall>j'.\n         enat (f C) \\<le> enat j' \\<longrightarrow>\n         enat j' < llength Sts \\<longrightarrow>\n         C \\<in> Q_of_state (lnth Sts j'))\n  finite CC\n\ngoal (1 subgoal):\n 1. enat (Max (f ` CC)) < llength Sts", "by (metis (mono_tags) Max_in assms(2) finite_imageI imageE image_is_empty)"], ["proof (state)\nthis:\n  enat j < llength Sts\n\ngoal (1 subgoal):\n 1. \\<exists>j.\n       enat j < llength Sts \\<and>\n       (\\<forall>j'.\n           enat j \\<le> enat j' \\<longrightarrow>\n           enat j' < llength Sts \\<longrightarrow>\n           CC \\<subseteq> Q_of_state (lnth Sts j'))", "moreover"], ["proof (state)\nthis:\n  enat j < llength Sts\n\ngoal (1 subgoal):\n 1. \\<exists>j.\n       enat j < llength Sts \\<and>\n       (\\<forall>j'.\n           enat j \\<le> enat j' \\<longrightarrow>\n           enat j' < llength Sts \\<longrightarrow>\n           CC \\<subseteq> Q_of_state (lnth Sts j'))", "have \"\\<forall>C j'. C \\<in> CC \\<longrightarrow> enat j \\<le> j' \\<longrightarrow> j' < llength Sts \\<longrightarrow> C \\<in> Q_of_state (lnth Sts j')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>C j'.\n       C \\<in> CC \\<longrightarrow>\n       enat j \\<le> enat j' \\<longrightarrow>\n       enat j' < llength Sts \\<longrightarrow>\n       C \\<in> Q_of_state (lnth Sts j')", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C j'.\n       \\<lbrakk>C \\<in> CC; enat j \\<le> enat j';\n        enat j' < llength Sts\\<rbrakk>\n       \\<Longrightarrow> C \\<in> Q_of_state (lnth Sts j')", "fix C :: \"'a clause\" and j' :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C j'.\n       \\<lbrakk>C \\<in> CC; enat j \\<le> enat j';\n        enat j' < llength Sts\\<rbrakk>\n       \\<Longrightarrow> C \\<in> Q_of_state (lnth Sts j')", "assume a: \"C \\<in> CC\" \"enat j \\<le> enat j'\" \"enat j' < llength Sts\""], ["proof (state)\nthis:\n  C \\<in> CC\n  enat j \\<le> enat j'\n  enat j' < llength Sts\n\ngoal (1 subgoal):\n 1. \\<And>C j'.\n       \\<lbrakk>C \\<in> CC; enat j \\<le> enat j';\n        enat j' < llength Sts\\<rbrakk>\n       \\<Longrightarrow> C \\<in> Q_of_state (lnth Sts j')", "then"], ["proof (chain)\npicking this:\n  C \\<in> CC\n  enat j \\<le> enat j'\n  enat j' < llength Sts", "have \"f C \\<le> j'\""], ["proof (prove)\nusing this:\n  C \\<in> CC\n  enat j \\<le> enat j'\n  enat j' < llength Sts\n\ngoal (1 subgoal):\n 1. f C \\<le> j'", "unfolding j_def"], ["proof (prove)\nusing this:\n  C \\<in> CC\n  enat (Max (f ` CC)) \\<le> enat j'\n  enat j' < llength Sts\n\ngoal (1 subgoal):\n 1. f C \\<le> j'", "using assms(1) Max.bounded_iff"], ["proof (prove)\nusing this:\n  C \\<in> CC\n  enat (Max (f ` CC)) \\<le> enat j'\n  enat j' < llength Sts\n  finite CC\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> (Max ?A \\<le> ?x) = (\\<forall>a\\<in>?A. a \\<le> ?x)\n\ngoal (1 subgoal):\n 1. f C \\<le> j'", "by auto"], ["proof (state)\nthis:\n  f C \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<And>C j'.\n       \\<lbrakk>C \\<in> CC; enat j \\<le> enat j';\n        enat j' < llength Sts\\<rbrakk>\n       \\<Longrightarrow> C \\<in> Q_of_state (lnth Sts j')", "then"], ["proof (chain)\npicking this:\n  f C \\<le> j'", "show \"C \\<in> Q_of_state (lnth Sts j')\""], ["proof (prove)\nusing this:\n  f C \\<le> j'\n\ngoal (1 subgoal):\n 1. C \\<in> Q_of_state (lnth Sts j')", "using f_p a"], ["proof (prove)\nusing this:\n  f C \\<le> j'\n  \\<forall>C\\<in>CC.\n     enat (f C) < llength Sts \\<and>\n     (\\<forall>j'.\n         enat (f C) \\<le> enat j' \\<longrightarrow>\n         enat j' < llength Sts \\<longrightarrow>\n         C \\<in> Q_of_state (lnth Sts j'))\n  C \\<in> CC\n  enat j \\<le> enat j'\n  enat j' < llength Sts\n\ngoal (1 subgoal):\n 1. C \\<in> Q_of_state (lnth Sts j')", "by auto"], ["proof (state)\nthis:\n  C \\<in> Q_of_state (lnth Sts j')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>C j'.\n     C \\<in> CC \\<longrightarrow>\n     enat j \\<le> enat j' \\<longrightarrow>\n     enat j' < llength Sts \\<longrightarrow>\n     C \\<in> Q_of_state (lnth Sts j')\n\ngoal (1 subgoal):\n 1. \\<exists>j.\n       enat j < llength Sts \\<and>\n       (\\<forall>j'.\n           enat j \\<le> enat j' \\<longrightarrow>\n           enat j' < llength Sts \\<longrightarrow>\n           CC \\<subseteq> Q_of_state (lnth Sts j'))", "ultimately"], ["proof (chain)\npicking this:\n  enat j < llength Sts\n  \\<forall>C j'.\n     C \\<in> CC \\<longrightarrow>\n     enat j \\<le> enat j' \\<longrightarrow>\n     enat j' < llength Sts \\<longrightarrow>\n     C \\<in> Q_of_state (lnth Sts j')", "show ?thesis"], ["proof (prove)\nusing this:\n  enat j < llength Sts\n  \\<forall>C j'.\n     C \\<in> CC \\<longrightarrow>\n     enat j \\<le> enat j' \\<longrightarrow>\n     enat j' < llength Sts \\<longrightarrow>\n     C \\<in> Q_of_state (lnth Sts j')\n\ngoal (1 subgoal):\n 1. \\<exists>j.\n       enat j < llength Sts \\<and>\n       (\\<forall>j'.\n           enat j \\<le> enat j' \\<longrightarrow>\n           enat j' < llength Sts \\<longrightarrow>\n           CC \\<subseteq> Q_of_state (lnth Sts j'))", "by auto"], ["proof (state)\nthis:\n  \\<exists>j.\n     enat j < llength Sts \\<and>\n     (\\<forall>j'.\n         enat j \\<le> enat j' \\<longrightarrow>\n         enat j' < llength Sts \\<longrightarrow>\n         CC \\<subseteq> Q_of_state (lnth Sts j'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma empty_clause_in_Q_of_Liminf_state:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    empty_in: \"{#} \\<in> Liminf_llist (lmap grounding_of_state Sts)\"\n  shows \"{#} \\<in> Q_of_state (Liminf_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "define Gs :: \"'a clause set llist\" where\n    ns: \"Gs = lmap grounding_of_state Sts\""], ["proof (state)\nthis:\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "from empty_in"], ["proof (chain)\npicking this:\n  {#}\n  \\<in> Liminf_llist\n         (lmap\n           (\\<lambda>St.\n               grounding_of_clss\n                (N_of_state St \\<union> P_of_state St \\<union>\n                 Q_of_state St))\n           Sts)", "have in_Liminf_not_Rf: \"{#} \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\""], ["proof (prove)\nusing this:\n  {#}\n  \\<in> Liminf_llist\n         (lmap\n           (\\<lambda>St.\n               grounding_of_clss\n                (N_of_state St \\<union> P_of_state St \\<union>\n                 Q_of_state St))\n           Sts)\n\ngoal (1 subgoal):\n 1. {#} \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)", "unfolding ns sr.Rf_def"], ["proof (prove)\nusing this:\n  {#}\n  \\<in> Liminf_llist\n         (lmap\n           (\\<lambda>St.\n               grounding_of_clss\n                (N_of_state St \\<union> P_of_state St \\<union>\n                 Q_of_state St))\n           Sts)\n\ngoal (1 subgoal):\n 1. {#}\n    \\<in> Liminf_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts) -\n          {C. \\<exists>DD.\n                 set_mset DD\n                 \\<subseteq> Liminf_llist\n                              (lmap\n                                (\\<lambda>St.\n                                    grounding_of_clss\n                                     (N_of_state St \\<union>\nP_of_state St \\<union>\nQ_of_state St))\n                                Sts) \\<and>\n                 (\\<forall>I.\n                     I \\<Turnstile>m DD \\<longrightarrow>\n                     I \\<Turnstile> C) \\<and>\n                 (\\<forall>D. D \\<in># DD \\<longrightarrow> D < C)}", "by auto"], ["proof (state)\nthis:\n  {#} \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "then"], ["proof (chain)\npicking this:\n  {#} \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)", "have \"{#} \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))\""], ["proof (prove)\nusing this:\n  {#} \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n\ngoal (1 subgoal):\n 1. {#} \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "using fair_imp_Liminf_minus_Rf_subset_ground_Liminf_state[OF deriv fair ns]"], ["proof (prove)\nusing this:\n  {#} \\<in> Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n  Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n  \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))\n\ngoal (1 subgoal):\n 1. {#} \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "by auto"], ["proof (state)\nthis:\n  {#} \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "then"], ["proof (chain)\npicking this:\n  {#} \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))", "show ?thesis"], ["proof (prove)\nusing this:\n  {#} \\<in> grounding_of_clss (Q_of_state (Liminf_state Sts))\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "unfolding grounding_of_clss_def grounding_of_cls_def"], ["proof (prove)\nusing this:\n  {#}\n  \\<in> (\\<Union>C\\<in>Q_of_state (Liminf_state Sts).\n            {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "by auto"], ["proof (state)\nthis:\n  {#} \\<in> Q_of_state (Liminf_state Sts)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma grounding_of_state_Liminf_state_subseteq:\n  \"grounding_of_state (Liminf_state Sts) \\<subseteq> Liminf_llist (lmap grounding_of_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. grounding_of_clss\n     (N_of_state (Liminf_state Sts) \\<union>\n      P_of_state (Liminf_state Sts) \\<union>\n      Q_of_state (Liminf_state Sts))\n    \\<subseteq> Liminf_llist\n                 (lmap\n                   (\\<lambda>St.\n                       grounding_of_clss\n                        (N_of_state St \\<union> P_of_state St \\<union>\n                         Q_of_state St))\n                   Sts)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> grounding_of_clss\n                (N_of_state (Liminf_state Sts) \\<union>\n                 P_of_state (Liminf_state Sts) \\<union>\n                 Q_of_state (Liminf_state Sts)) \\<Longrightarrow>\n       x \\<in> Liminf_llist\n                (lmap\n                  (\\<lambda>St.\n                      grounding_of_clss\n                       (N_of_state St \\<union> P_of_state St \\<union>\n                        Q_of_state St))\n                  Sts)", "fix C :: \"'a clause\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> grounding_of_clss\n                (N_of_state (Liminf_state Sts) \\<union>\n                 P_of_state (Liminf_state Sts) \\<union>\n                 Q_of_state (Liminf_state Sts)) \\<Longrightarrow>\n       x \\<in> Liminf_llist\n                (lmap\n                  (\\<lambda>St.\n                      grounding_of_clss\n                       (N_of_state St \\<union> P_of_state St \\<union>\n                        Q_of_state St))\n                  Sts)", "assume \"C \\<in> grounding_of_state (Liminf_state Sts)\""], ["proof (state)\nthis:\n  C \\<in> grounding_of_clss\n           (N_of_state (Liminf_state Sts) \\<union>\n            P_of_state (Liminf_state Sts) \\<union>\n            Q_of_state (Liminf_state Sts))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> grounding_of_clss\n                (N_of_state (Liminf_state Sts) \\<union>\n                 P_of_state (Liminf_state Sts) \\<union>\n                 Q_of_state (Liminf_state Sts)) \\<Longrightarrow>\n       x \\<in> Liminf_llist\n                (lmap\n                  (\\<lambda>St.\n                      grounding_of_clss\n                       (N_of_state St \\<union> P_of_state St \\<union>\n                        Q_of_state St))\n                  Sts)", "then"], ["proof (chain)\npicking this:\n  C \\<in> grounding_of_clss\n           (N_of_state (Liminf_state Sts) \\<union>\n            P_of_state (Liminf_state Sts) \\<union>\n            Q_of_state (Liminf_state Sts))", "obtain D \\<sigma> where\n    D_\\<sigma>_p: \"D \\<in> clss_of_state (Liminf_state Sts)\" \"D \\<cdot> \\<sigma> = C\" \"is_ground_subst \\<sigma>\""], ["proof (prove)\nusing this:\n  C \\<in> grounding_of_clss\n           (N_of_state (Liminf_state Sts) \\<union>\n            P_of_state (Liminf_state Sts) \\<union>\n            Q_of_state (Liminf_state Sts))\n\ngoal (1 subgoal):\n 1. (\\<And>D \\<sigma>.\n        \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                         P_of_state (Liminf_state Sts) \\<union>\n                         Q_of_state (Liminf_state Sts);\n         D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding grounding_of_clss_def grounding_of_cls_def"], ["proof (prove)\nusing this:\n  C \\<in> (\\<Union>C\\<in>N_of_state (Liminf_state Sts) \\<union>\n                         P_of_state (Liminf_state Sts) \\<union>\n                         Q_of_state (Liminf_state Sts).\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n\ngoal (1 subgoal):\n 1. (\\<And>D \\<sigma>.\n        \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                         P_of_state (Liminf_state Sts) \\<union>\n                         Q_of_state (Liminf_state Sts);\n         D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  D \\<in> N_of_state (Liminf_state Sts) \\<union>\n          P_of_state (Liminf_state Sts) \\<union>\n          Q_of_state (Liminf_state Sts)\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> grounding_of_clss\n                (N_of_state (Liminf_state Sts) \\<union>\n                 P_of_state (Liminf_state Sts) \\<union>\n                 Q_of_state (Liminf_state Sts)) \\<Longrightarrow>\n       x \\<in> Liminf_llist\n                (lmap\n                  (\\<lambda>St.\n                      grounding_of_clss\n                       (N_of_state St \\<union> P_of_state St \\<union>\n                        Q_of_state St))\n                  Sts)", "then"], ["proof (chain)\npicking this:\n  D \\<in> N_of_state (Liminf_state Sts) \\<union>\n          P_of_state (Liminf_state Sts) \\<union>\n          Q_of_state (Liminf_state Sts)\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>", "have ii: \"D \\<in> Liminf_llist (lmap N_of_state Sts)\n    \\<or> D \\<in> Liminf_llist (lmap P_of_state Sts) \\<or> D \\<in> Liminf_llist (lmap Q_of_state Sts)\""], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (Liminf_state Sts) \\<union>\n          P_of_state (Liminf_state Sts) \\<union>\n          Q_of_state (Liminf_state Sts)\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. D \\<in> Liminf_llist (lmap N_of_state Sts) \\<or>\n    D \\<in> Liminf_llist (lmap P_of_state Sts) \\<or>\n    D \\<in> Liminf_llist (lmap Q_of_state Sts)", "unfolding Liminf_state_def"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state\n           (Liminf_llist (lmap N_of_state Sts),\n            Liminf_llist (lmap P_of_state Sts),\n            Liminf_llist (lmap Q_of_state Sts)) \\<union>\n          P_of_state\n           (Liminf_llist (lmap N_of_state Sts),\n            Liminf_llist (lmap P_of_state Sts),\n            Liminf_llist (lmap Q_of_state Sts)) \\<union>\n          Q_of_state\n           (Liminf_llist (lmap N_of_state Sts),\n            Liminf_llist (lmap P_of_state Sts),\n            Liminf_llist (lmap Q_of_state Sts))\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. D \\<in> Liminf_llist (lmap N_of_state Sts) \\<or>\n    D \\<in> Liminf_llist (lmap P_of_state Sts) \\<or>\n    D \\<in> Liminf_llist (lmap Q_of_state Sts)", "by simp"], ["proof (state)\nthis:\n  D \\<in> Liminf_llist (lmap N_of_state Sts) \\<or>\n  D \\<in> Liminf_llist (lmap P_of_state Sts) \\<or>\n  D \\<in> Liminf_llist (lmap Q_of_state Sts)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> grounding_of_clss\n                (N_of_state (Liminf_state Sts) \\<union>\n                 P_of_state (Liminf_state Sts) \\<union>\n                 Q_of_state (Liminf_state Sts)) \\<Longrightarrow>\n       x \\<in> Liminf_llist\n                (lmap\n                  (\\<lambda>St.\n                      grounding_of_clss\n                       (N_of_state St \\<union> P_of_state St \\<union>\n                        Q_of_state St))\n                  Sts)", "then"], ["proof (chain)\npicking this:\n  D \\<in> Liminf_llist (lmap N_of_state Sts) \\<or>\n  D \\<in> Liminf_llist (lmap P_of_state Sts) \\<or>\n  D \\<in> Liminf_llist (lmap Q_of_state Sts)", "have \"C \\<in> Liminf_llist (lmap grounding_of_clss (lmap N_of_state Sts))\n    \\<or> C \\<in> Liminf_llist (lmap grounding_of_clss (lmap P_of_state Sts))\n    \\<or> C \\<in> Liminf_llist (lmap grounding_of_clss (lmap Q_of_state Sts))\""], ["proof (prove)\nusing this:\n  D \\<in> Liminf_llist (lmap N_of_state Sts) \\<or>\n  D \\<in> Liminf_llist (lmap P_of_state Sts) \\<or>\n  D \\<in> Liminf_llist (lmap Q_of_state Sts)\n\ngoal (1 subgoal):\n 1. C \\<in> Liminf_llist\n             (lmap grounding_of_clss (lmap N_of_state Sts)) \\<or>\n    C \\<in> Liminf_llist\n             (lmap grounding_of_clss (lmap P_of_state Sts)) \\<or>\n    C \\<in> Liminf_llist (lmap grounding_of_clss (lmap Q_of_state Sts))", "unfolding Liminf_llist_def grounding_of_clss_def grounding_of_cls_def"], ["proof (prove)\nusing this:\n  D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap N_of_state Sts)}.\n              \\<Inter>\n               (lnth (lmap N_of_state Sts) `\n                {j. i \\<le> j \\<and>\n                    enat j < llength (lmap N_of_state Sts)})) \\<or>\n  D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap P_of_state Sts)}.\n              \\<Inter>\n               (lnth (lmap P_of_state Sts) `\n                {j. i \\<le> j \\<and>\n                    enat j < llength (lmap P_of_state Sts)})) \\<or>\n  D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap Q_of_state Sts)}.\n              \\<Inter>\n               (lnth (lmap Q_of_state Sts) `\n                {j. i \\<le> j \\<and>\n                    enat j < llength (lmap Q_of_state Sts)}))\n\ngoal (1 subgoal):\n 1. C \\<in> (\\<Union>i\\<in>{i. enat i\n                               < llength\n                                  (lmap\n                                    (\\<lambda>CC.\n  \\<Union>C\\<in>CC.\n     {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n                                    (lmap N_of_state Sts))}.\n                \\<Inter>\n                 (lnth\n                   (lmap\n                     (\\<lambda>CC.\n                         \\<Union>C\\<in>CC.\n                            {C \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>})\n                     (lmap N_of_state Sts)) `\n                  {j. i \\<le> j \\<and>\n                      enat j\n                      < llength\n                         (lmap\n                           (\\<lambda>CC.\n                               \\<Union>C\\<in>CC.\n                                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                                   is_ground_subst \\<sigma>})\n                           (lmap N_of_state Sts))})) \\<or>\n    C \\<in> (\\<Union>i\\<in>{i. enat i\n                               < llength\n                                  (lmap\n                                    (\\<lambda>CC.\n  \\<Union>C\\<in>CC.\n     {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n                                    (lmap P_of_state Sts))}.\n                \\<Inter>\n                 (lnth\n                   (lmap\n                     (\\<lambda>CC.\n                         \\<Union>C\\<in>CC.\n                            {C \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>})\n                     (lmap P_of_state Sts)) `\n                  {j. i \\<le> j \\<and>\n                      enat j\n                      < llength\n                         (lmap\n                           (\\<lambda>CC.\n                               \\<Union>C\\<in>CC.\n                                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                                   is_ground_subst \\<sigma>})\n                           (lmap P_of_state Sts))})) \\<or>\n    C \\<in> (\\<Union>i\\<in>{i. enat i\n                               < llength\n                                  (lmap\n                                    (\\<lambda>CC.\n  \\<Union>C\\<in>CC.\n     {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n                                    (lmap Q_of_state Sts))}.\n                \\<Inter>\n                 (lnth\n                   (lmap\n                     (\\<lambda>CC.\n                         \\<Union>C\\<in>CC.\n                            {C \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>})\n                     (lmap Q_of_state Sts)) `\n                  {j. i \\<le> j \\<and>\n                      enat j\n                      < llength\n                         (lmap\n                           (\\<lambda>CC.\n                               \\<Union>C\\<in>CC.\n                                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                                   is_ground_subst \\<sigma>})\n                           (lmap Q_of_state Sts))}))", "using D_\\<sigma>_p"], ["proof (prove)\nusing this:\n  D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap N_of_state Sts)}.\n              \\<Inter>\n               (lnth (lmap N_of_state Sts) `\n                {j. i \\<le> j \\<and>\n                    enat j < llength (lmap N_of_state Sts)})) \\<or>\n  D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap P_of_state Sts)}.\n              \\<Inter>\n               (lnth (lmap P_of_state Sts) `\n                {j. i \\<le> j \\<and>\n                    enat j < llength (lmap P_of_state Sts)})) \\<or>\n  D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap Q_of_state Sts)}.\n              \\<Inter>\n               (lnth (lmap Q_of_state Sts) `\n                {j. i \\<le> j \\<and>\n                    enat j < llength (lmap Q_of_state Sts)}))\n  D \\<in> N_of_state (Liminf_state Sts) \\<union>\n          P_of_state (Liminf_state Sts) \\<union>\n          Q_of_state (Liminf_state Sts)\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. C \\<in> (\\<Union>i\\<in>{i. enat i\n                               < llength\n                                  (lmap\n                                    (\\<lambda>CC.\n  \\<Union>C\\<in>CC.\n     {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n                                    (lmap N_of_state Sts))}.\n                \\<Inter>\n                 (lnth\n                   (lmap\n                     (\\<lambda>CC.\n                         \\<Union>C\\<in>CC.\n                            {C \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>})\n                     (lmap N_of_state Sts)) `\n                  {j. i \\<le> j \\<and>\n                      enat j\n                      < llength\n                         (lmap\n                           (\\<lambda>CC.\n                               \\<Union>C\\<in>CC.\n                                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                                   is_ground_subst \\<sigma>})\n                           (lmap N_of_state Sts))})) \\<or>\n    C \\<in> (\\<Union>i\\<in>{i. enat i\n                               < llength\n                                  (lmap\n                                    (\\<lambda>CC.\n  \\<Union>C\\<in>CC.\n     {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n                                    (lmap P_of_state Sts))}.\n                \\<Inter>\n                 (lnth\n                   (lmap\n                     (\\<lambda>CC.\n                         \\<Union>C\\<in>CC.\n                            {C \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>})\n                     (lmap P_of_state Sts)) `\n                  {j. i \\<le> j \\<and>\n                      enat j\n                      < llength\n                         (lmap\n                           (\\<lambda>CC.\n                               \\<Union>C\\<in>CC.\n                                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                                   is_ground_subst \\<sigma>})\n                           (lmap P_of_state Sts))})) \\<or>\n    C \\<in> (\\<Union>i\\<in>{i. enat i\n                               < llength\n                                  (lmap\n                                    (\\<lambda>CC.\n  \\<Union>C\\<in>CC.\n     {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n                                    (lmap Q_of_state Sts))}.\n                \\<Inter>\n                 (lnth\n                   (lmap\n                     (\\<lambda>CC.\n                         \\<Union>C\\<in>CC.\n                            {C \\<cdot> \\<sigma> |\\<sigma>.\n                             is_ground_subst \\<sigma>})\n                     (lmap Q_of_state Sts)) `\n                  {j. i \\<le> j \\<and>\n                      enat j\n                      < llength\n                         (lmap\n                           (\\<lambda>CC.\n                               \\<Union>C\\<in>CC.\n                                  {C \\<cdot> \\<sigma> |\\<sigma>.\n                                   is_ground_subst \\<sigma>})\n                           (lmap Q_of_state Sts))}))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<in> (\\<Union>i\\<in>{i. enat i\n  < llength (lmap N_of_state Sts)}.\n                         \\<Inter>\n                          (lnth (lmap N_of_state Sts) `\n                           {j. i \\<le> j \\<and>\n                               enat j\n                               < llength (lmap N_of_state Sts)})) \\<or>\n             D \\<in> (\\<Union>i\\<in>{i. enat i\n  < llength (lmap P_of_state Sts)}.\n                         \\<Inter>\n                          (lnth (lmap P_of_state Sts) `\n                           {j. i \\<le> j \\<and>\n                               enat j\n                               < llength (lmap P_of_state Sts)})) \\<or>\n             D \\<in> (\\<Union>i\\<in>{i. enat i\n  < llength (lmap Q_of_state Sts)}.\n                         \\<Inter>\n                          (lnth (lmap Q_of_state Sts) `\n                           {j. i \\<le> j \\<and>\n                               enat j < llength (lmap Q_of_state Sts)}));\n     D \\<in> N_of_state (Liminf_state Sts) \\<union>\n             P_of_state (Liminf_state Sts) \\<union>\n             Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap N_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap N_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap N_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap P_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap P_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap P_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap Q_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap Q_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap Q_of_state Sts))}))", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap N_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap N_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap N_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap N_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap N_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap N_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap P_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap P_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap P_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap Q_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap Q_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap Q_of_state Sts))}))\n 2. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap P_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap P_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap P_of_state Sts)})) \\<or>\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap Q_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap Q_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap Q_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap N_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap N_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap N_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap P_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap P_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap P_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap Q_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap Q_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap Q_of_state Sts))}))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap N_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap N_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap N_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap N_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap N_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap N_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap P_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap P_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap P_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap Q_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap Q_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap Q_of_state Sts))}))", "apply (rule disjI1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap N_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap N_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap N_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap N_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap N_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap N_of_state Sts))}))", "using D_\\<sigma>_p"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (Liminf_state Sts) \\<union>\n          P_of_state (Liminf_state Sts) \\<union>\n          Q_of_state (Liminf_state Sts)\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap N_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap N_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap N_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap N_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap N_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap N_of_state Sts))}))", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap P_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap P_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap P_of_state Sts)})) \\<or>\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap Q_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap Q_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap Q_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap N_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap N_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap N_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap P_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap P_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap P_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap Q_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap Q_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap Q_of_state Sts))}))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap P_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap P_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap P_of_state Sts)})) \\<or>\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap Q_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap Q_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap Q_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap N_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap N_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap N_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap P_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap P_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap P_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap Q_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap Q_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap Q_of_state Sts))}))", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap P_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap P_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap P_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap N_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap N_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap N_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap P_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap P_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap P_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap Q_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap Q_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap Q_of_state Sts))}))\n 2. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap Q_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap Q_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap Q_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap N_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap N_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap N_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap P_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap P_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap P_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap Q_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap Q_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap Q_of_state Sts))}))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap P_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap P_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap P_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap N_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap N_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap N_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap P_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap P_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap P_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap Q_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap Q_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap Q_of_state Sts))}))", "apply (rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap P_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap P_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap P_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap P_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap P_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap P_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap Q_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap Q_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap Q_of_state Sts))}))", "apply (rule disjI1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap P_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap P_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap P_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap P_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap P_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap P_of_state Sts))}))", "using D_\\<sigma>_p"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (Liminf_state Sts) \\<union>\n          P_of_state (Liminf_state Sts) \\<union>\n          Q_of_state (Liminf_state Sts)\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap P_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap P_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap P_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap P_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap P_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap P_of_state Sts))}))", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap Q_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap Q_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap Q_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap N_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap N_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap N_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap P_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap P_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap P_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap Q_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap Q_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap Q_of_state Sts))}))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap Q_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap Q_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap Q_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap N_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap N_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap N_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap P_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap P_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap P_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap Q_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap Q_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap Q_of_state Sts))}))", "apply (rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap Q_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap Q_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap Q_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap P_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap P_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap P_of_state Sts))})) \\<or>\n                      C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap Q_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap Q_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap Q_of_state Sts))}))", "apply (rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap Q_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap Q_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap Q_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap Q_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap Q_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap Q_of_state Sts))}))", "using D_\\<sigma>_p"], ["proof (prove)\nusing this:\n  D \\<in> N_of_state (Liminf_state Sts) \\<union>\n          P_of_state (Liminf_state Sts) \\<union>\n          Q_of_state (Liminf_state Sts)\n  D \\<cdot> \\<sigma> = C\n  is_ground_subst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<in> N_of_state (Liminf_state Sts) \\<union>\n                     P_of_state (Liminf_state Sts) \\<union>\n                     Q_of_state (Liminf_state Sts);\n     D \\<cdot> \\<sigma> = C; is_ground_subst \\<sigma>;\n     D \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap Q_of_state Sts)}.\n                 \\<Inter>\n                  (lnth (lmap Q_of_state Sts) `\n                   {j. i \\<le> j \\<and>\n                       enat j < llength (lmap Q_of_state Sts)}))\\<rbrakk>\n    \\<Longrightarrow> C \\<in> (\\<Union>i\\<in>{i.\n        enat i\n        < llength\n           (lmap\n             (\\<lambda>CC.\n                 \\<Union>C\\<in>CC.\n                    {C \\<cdot> \\<sigma> |\\<sigma>.\n                     is_ground_subst \\<sigma>})\n             (lmap Q_of_state Sts))}.\n                                  \\<Inter>\n                                   (lnth\n                                     (lmap\n (\\<lambda>CC.\n     \\<Union>C\\<in>CC.\n        {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n (lmap Q_of_state Sts)) `\n                                    {j. i \\<le> j \\<and>\n  enat j\n  < llength\n     (lmap\n       (\\<lambda>CC.\n           \\<Union>C\\<in>CC.\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})\n       (lmap Q_of_state Sts))}))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  C \\<in> Liminf_llist (lmap grounding_of_clss (lmap N_of_state Sts)) \\<or>\n  C \\<in> Liminf_llist (lmap grounding_of_clss (lmap P_of_state Sts)) \\<or>\n  C \\<in> Liminf_llist (lmap grounding_of_clss (lmap Q_of_state Sts))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> grounding_of_clss\n                (N_of_state (Liminf_state Sts) \\<union>\n                 P_of_state (Liminf_state Sts) \\<union>\n                 Q_of_state (Liminf_state Sts)) \\<Longrightarrow>\n       x \\<in> Liminf_llist\n                (lmap\n                  (\\<lambda>St.\n                      grounding_of_clss\n                       (N_of_state St \\<union> P_of_state St \\<union>\n                        Q_of_state St))\n                  Sts)", "then"], ["proof (chain)\npicking this:\n  C \\<in> Liminf_llist (lmap grounding_of_clss (lmap N_of_state Sts)) \\<or>\n  C \\<in> Liminf_llist (lmap grounding_of_clss (lmap P_of_state Sts)) \\<or>\n  C \\<in> Liminf_llist (lmap grounding_of_clss (lmap Q_of_state Sts))", "show \"C \\<in> Liminf_llist (lmap grounding_of_state Sts)\""], ["proof (prove)\nusing this:\n  C \\<in> Liminf_llist (lmap grounding_of_clss (lmap N_of_state Sts)) \\<or>\n  C \\<in> Liminf_llist (lmap grounding_of_clss (lmap P_of_state Sts)) \\<or>\n  C \\<in> Liminf_llist (lmap grounding_of_clss (lmap Q_of_state Sts))\n\ngoal (1 subgoal):\n 1. C \\<in> Liminf_llist\n             (lmap\n               (\\<lambda>St.\n                   grounding_of_clss\n                    (N_of_state St \\<union> P_of_state St \\<union>\n                     Q_of_state St))\n               Sts)", "unfolding Liminf_llist_def grounding_of_clss_def"], ["proof (prove)\nusing this:\n  C \\<in> (\\<Union>i\\<in>{i. enat i\n                             < llength\n                                (lmap\n                                  (\\<lambda>CC.\n\\<Union> (grounding_of_cls ` CC))\n                                  (lmap N_of_state Sts))}.\n              \\<Inter>\n               (lnth\n                 (lmap (\\<lambda>CC. \\<Union> (grounding_of_cls ` CC))\n                   (lmap N_of_state Sts)) `\n                {j. i \\<le> j \\<and>\n                    enat j\n                    < llength\n                       (lmap (\\<lambda>CC. \\<Union> (grounding_of_cls ` CC))\n                         (lmap N_of_state Sts))})) \\<or>\n  C \\<in> (\\<Union>i\\<in>{i. enat i\n                             < llength\n                                (lmap\n                                  (\\<lambda>CC.\n\\<Union> (grounding_of_cls ` CC))\n                                  (lmap P_of_state Sts))}.\n              \\<Inter>\n               (lnth\n                 (lmap (\\<lambda>CC. \\<Union> (grounding_of_cls ` CC))\n                   (lmap P_of_state Sts)) `\n                {j. i \\<le> j \\<and>\n                    enat j\n                    < llength\n                       (lmap (\\<lambda>CC. \\<Union> (grounding_of_cls ` CC))\n                         (lmap P_of_state Sts))})) \\<or>\n  C \\<in> (\\<Union>i\\<in>{i. enat i\n                             < llength\n                                (lmap\n                                  (\\<lambda>CC.\n\\<Union> (grounding_of_cls ` CC))\n                                  (lmap Q_of_state Sts))}.\n              \\<Inter>\n               (lnth\n                 (lmap (\\<lambda>CC. \\<Union> (grounding_of_cls ` CC))\n                   (lmap Q_of_state Sts)) `\n                {j. i \\<le> j \\<and>\n                    enat j\n                    < llength\n                       (lmap (\\<lambda>CC. \\<Union> (grounding_of_cls ` CC))\n                         (lmap Q_of_state Sts))}))\n\ngoal (1 subgoal):\n 1. C \\<in> (\\<Union>i\\<in>{i. enat i\n                               < llength\n                                  (lmap\n                                    (\\<lambda>St.\n  \\<Union>\n   (grounding_of_cls `\n    (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St)))\n                                    Sts)}.\n                \\<Inter>\n                 (lnth\n                   (lmap\n                     (\\<lambda>St.\n                         \\<Union>\n                          (grounding_of_cls `\n                           (N_of_state St \\<union> P_of_state St \\<union>\n                            Q_of_state St)))\n                     Sts) `\n                  {j. i \\<le> j \\<and>\n                      enat j\n                      < llength\n                         (lmap\n                           (\\<lambda>St.\n                               \\<Union>\n                                (grounding_of_cls `\n                                 (N_of_state St \\<union>\n                                  P_of_state St \\<union>\n                                  Q_of_state St)))\n                           Sts)}))", "by auto"], ["proof (state)\nthis:\n  C \\<in> Liminf_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem RP_sound:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    \"{#} \\<in> clss_of_state (Liminf_state Sts)\"\n  shows \"\\<not> satisfiable (grounding_of_state (lhd Sts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (grounding_of_clss\n              (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n               Q_of_state (lhd Sts)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (grounding_of_clss\n              (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n               Q_of_state (lhd Sts)))", "from assms"], ["proof (chain)\npicking this:\n  chain (\\<leadsto>) Sts\n  {#}\n  \\<in> N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)", "have \"{#} \\<in> grounding_of_state (Liminf_state Sts)\""], ["proof (prove)\nusing this:\n  chain (\\<leadsto>) Sts\n  {#}\n  \\<in> N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. {#}\n    \\<in> grounding_of_clss\n           (N_of_state (Liminf_state Sts) \\<union>\n            P_of_state (Liminf_state Sts) \\<union>\n            Q_of_state (Liminf_state Sts))", "unfolding grounding_of_clss_def"], ["proof (prove)\nusing this:\n  chain (\\<leadsto>) Sts\n  {#}\n  \\<in> N_of_state (Liminf_state Sts) \\<union>\n        P_of_state (Liminf_state Sts) \\<union>\n        Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. {#}\n    \\<in> \\<Union>\n           (grounding_of_cls `\n            (N_of_state (Liminf_state Sts) \\<union>\n             P_of_state (Liminf_state Sts) \\<union>\n             Q_of_state (Liminf_state Sts)))", "by (force intro: ex_ground_subst)"], ["proof (state)\nthis:\n  {#}\n  \\<in> grounding_of_clss\n         (N_of_state (Liminf_state Sts) \\<union>\n          P_of_state (Liminf_state Sts) \\<union>\n          Q_of_state (Liminf_state Sts))\n\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (grounding_of_clss\n              (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n               Q_of_state (lhd Sts)))", "then"], ["proof (chain)\npicking this:\n  {#}\n  \\<in> grounding_of_clss\n         (N_of_state (Liminf_state Sts) \\<union>\n          P_of_state (Liminf_state Sts) \\<union>\n          Q_of_state (Liminf_state Sts))", "have \"{#} \\<in> Liminf_llist (lmap grounding_of_state Sts)\""], ["proof (prove)\nusing this:\n  {#}\n  \\<in> grounding_of_clss\n         (N_of_state (Liminf_state Sts) \\<union>\n          P_of_state (Liminf_state Sts) \\<union>\n          Q_of_state (Liminf_state Sts))\n\ngoal (1 subgoal):\n 1. {#}\n    \\<in> Liminf_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)", "using grounding_of_state_Liminf_state_subseteq"], ["proof (prove)\nusing this:\n  {#}\n  \\<in> grounding_of_clss\n         (N_of_state (Liminf_state Sts) \\<union>\n          P_of_state (Liminf_state Sts) \\<union>\n          Q_of_state (Liminf_state Sts))\n  grounding_of_clss\n   (N_of_state (Liminf_state Sts) \\<union>\n    P_of_state (Liminf_state Sts) \\<union>\n    Q_of_state (Liminf_state Sts))\n  \\<subseteq> Liminf_llist\n               (lmap\n                 (\\<lambda>St.\n                     grounding_of_clss\n                      (N_of_state St \\<union> P_of_state St \\<union>\n                       Q_of_state St))\n                 Sts)\n\ngoal (1 subgoal):\n 1. {#}\n    \\<in> Liminf_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)", "by auto"], ["proof (state)\nthis:\n  {#}\n  \\<in> Liminf_llist\n         (lmap\n           (\\<lambda>St.\n               grounding_of_clss\n                (N_of_state St \\<union> P_of_state St \\<union>\n                 Q_of_state St))\n           Sts)\n\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (grounding_of_clss\n              (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n               Q_of_state (lhd Sts)))", "then"], ["proof (chain)\npicking this:\n  {#}\n  \\<in> Liminf_llist\n         (lmap\n           (\\<lambda>St.\n               grounding_of_clss\n                (N_of_state St \\<union> P_of_state St \\<union>\n                 Q_of_state St))\n           Sts)", "have \"\\<not> satisfiable (Liminf_llist (lmap grounding_of_state Sts))\""], ["proof (prove)\nusing this:\n  {#}\n  \\<in> Liminf_llist\n         (lmap\n           (\\<lambda>St.\n               grounding_of_clss\n                (N_of_state St \\<union> P_of_state St \\<union>\n                 Q_of_state St))\n           Sts)\n\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (Liminf_llist\n              (lmap\n                (\\<lambda>St.\n                    grounding_of_clss\n                     (N_of_state St \\<union> P_of_state St \\<union>\n                      Q_of_state St))\n                Sts))", "using true_clss_def"], ["proof (prove)\nusing this:\n  {#}\n  \\<in> Liminf_llist\n         (lmap\n           (\\<lambda>St.\n               grounding_of_clss\n                (N_of_state St \\<union> P_of_state St \\<union>\n                 Q_of_state St))\n           Sts)\n  (?I \\<Turnstile>s ?CC) = (\\<forall>C\\<in>?CC. ?I \\<Turnstile> C)\n\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (Liminf_llist\n              (lmap\n                (\\<lambda>St.\n                    grounding_of_clss\n                     (N_of_state St \\<union> P_of_state St \\<union>\n                      Q_of_state St))\n                Sts))", "by auto"], ["proof (state)\nthis:\n  \\<not> satisfiable\n          (Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts))\n\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (grounding_of_clss\n              (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n               Q_of_state (lhd Sts)))", "then"], ["proof (chain)\npicking this:\n  \\<not> satisfiable\n          (Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts))", "have \"\\<not> satisfiable (lhd (lmap grounding_of_state Sts))\""], ["proof (prove)\nusing this:\n  \\<not> satisfiable\n          (Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts))\n\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (lhd (lmap\n                   (\\<lambda>St.\n                       grounding_of_clss\n                        (N_of_state St \\<union> P_of_state St \\<union>\n                         Q_of_state St))\n                   Sts))", "using sr_ext.sat_limit_iff ground_derive_chain deriv"], ["proof (prove)\nusing this:\n  \\<not> satisfiable\n          (Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts))\n  chain sr_ext.derive ?Ns \\<Longrightarrow>\n  satisfiable (Liminf_llist ?Ns) = satisfiable (lhd ?Ns)\n  chain (\\<leadsto>) Sts \\<Longrightarrow>\n  chain sr_ext.derive\n   (lmap\n     (\\<lambda>St.\n         grounding_of_clss\n          (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n     Sts)\n  chain (\\<leadsto>) Sts\n\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (lhd (lmap\n                   (\\<lambda>St.\n                       grounding_of_clss\n                        (N_of_state St \\<union> P_of_state St \\<union>\n                         Q_of_state St))\n                   Sts))", "by blast"], ["proof (state)\nthis:\n  \\<not> satisfiable\n          (lhd (lmap\n                 (\\<lambda>St.\n                     grounding_of_clss\n                      (N_of_state St \\<union> P_of_state St \\<union>\n                       Q_of_state St))\n                 Sts))\n\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (grounding_of_clss\n              (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n               Q_of_state (lhd Sts)))", "then"], ["proof (chain)\npicking this:\n  \\<not> satisfiable\n          (lhd (lmap\n                 (\\<lambda>St.\n                     grounding_of_clss\n                      (N_of_state St \\<union> P_of_state St \\<union>\n                       Q_of_state St))\n                 Sts))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> satisfiable\n          (lhd (lmap\n                 (\\<lambda>St.\n                     grounding_of_clss\n                      (N_of_state St \\<union> P_of_state St \\<union>\n                       Q_of_state St))\n                 Sts))\n\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (grounding_of_clss\n              (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n               Q_of_state (lhd Sts)))", "using chain_not_lnull deriv"], ["proof (prove)\nusing this:\n  \\<not> satisfiable\n          (lhd (lmap\n                 (\\<lambda>St.\n                     grounding_of_clss\n                      (N_of_state St \\<union> P_of_state St \\<union>\n                       Q_of_state St))\n                 Sts))\n  chain ?R ?xs \\<Longrightarrow> \\<not> lnull ?xs\n  chain (\\<leadsto>) Sts\n\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (grounding_of_clss\n              (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n               Q_of_state (lhd Sts)))", "by fastforce"], ["proof (state)\nthis:\n  \\<not> satisfiable\n          (grounding_of_clss\n            (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n             Q_of_state (lhd Sts)))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem RP_saturated_if_fair:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    empty_Q0: \"Q_of_state (lhd Sts) = {}\"\n  shows \"sr.saturated_upto (Liminf_llist (lmap grounding_of_state Sts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "define Gs :: \"'a clause set llist\" where\n    ns: \"Gs = lmap grounding_of_state Sts\""], ["proof (state)\nthis:\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "let ?N = \"\\<lambda>i. grounding_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "let ?Ns = \"\\<lambda>i. N_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "let ?Ps = \"\\<lambda>i. P_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "let ?Qs = \"\\<lambda>i. Q_of_state (lnth Sts i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "have ground_ns_in_ground_limit_st:\n    \"Liminf_llist Gs - sr.Rf (Liminf_llist Gs) \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n    \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))", "using fair deriv fair_imp_Liminf_minus_Rf_subset_ground_Liminf_state ns"], ["proof (prove)\nusing this:\n  fair_state_seq Sts\n  chain (\\<leadsto>) Sts\n  \\<lbrakk>chain (\\<leadsto>) Sts; fair_state_seq Sts;\n   ?Gs =\n   lmap\n    (\\<lambda>St.\n        grounding_of_clss\n         (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n    Sts\\<rbrakk>\n  \\<Longrightarrow> Liminf_llist ?Gs - sr.Rf (Liminf_llist ?Gs)\n                    \\<subseteq> grounding_of_clss\n                                 (Q_of_state (Liminf_state Sts))\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n    \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))", "by blast"], ["proof (state)\nthis:\n  Liminf_llist Gs - sr.Rf (Liminf_llist Gs)\n  \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "have derivns: \"chain sr_ext.derive Gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain sr_ext.derive Gs", "using ground_derive_chain deriv ns"], ["proof (prove)\nusing this:\n  chain (\\<leadsto>) Sts \\<Longrightarrow>\n  chain sr_ext.derive\n   (lmap\n     (\\<lambda>St.\n         grounding_of_clss\n          (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n     Sts)\n  chain (\\<leadsto>) Sts\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. chain sr_ext.derive Gs", "by auto"], ["proof (state)\nthis:\n  chain sr_ext.derive Gs\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "{"], ["proof (state)\nthis:\n  chain sr_ext.derive Gs\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "fix \\<gamma> :: \"'a inference\""], ["proof (state)\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "assume \\<gamma>_p: \"\\<gamma> \\<in> gr.ord_\\<Gamma>\""], ["proof (state)\nthis:\n  \\<gamma> \\<in> gr.ord_\\<Gamma>\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "let ?CC = \"side_prems_of \\<gamma>\""], ["proof (state)\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "let ?DA = \"main_prem_of \\<gamma>\""], ["proof (state)\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "let ?E = \"concl_of \\<gamma>\""], ["proof (state)\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "assume a: \"set_mset ?CC \\<union> {?DA}\n      \\<subseteq> Liminf_llist (lmap grounding_of_state Sts)\n        - sr.Rf (Liminf_llist (lmap grounding_of_state Sts))\""], ["proof (state)\nthis:\n  set_mset (side_prems_of \\<gamma>) \\<union> {main_prem_of \\<gamma>}\n  \\<subseteq> Liminf_llist\n               (lmap\n                 (\\<lambda>St.\n                     grounding_of_clss\n                      (N_of_state St \\<union> P_of_state St \\<union>\n                       Q_of_state St))\n                 Sts) -\n              sr.Rf\n               (Liminf_llist\n                 (lmap\n                   (\\<lambda>St.\n                       grounding_of_clss\n                        (N_of_state St \\<union> P_of_state St \\<union>\n                         Q_of_state St))\n                   Sts))\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "have ground_ground_Liminf: \"is_ground_clss (Liminf_llist (lmap grounding_of_state Sts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ground_clss\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "using Liminf_grounding_of_state_ground"], ["proof (prove)\nusing this:\n  ?C \\<in> Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts) \\<Longrightarrow>\n  is_ground_cls ?C\n\ngoal (1 subgoal):\n 1. is_ground_clss\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "unfolding is_ground_clss_def"], ["proof (prove)\nusing this:\n  ?C \\<in> Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts) \\<Longrightarrow>\n  is_ground_cls ?C\n\ngoal (1 subgoal):\n 1. Ball\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))\n     is_ground_cls", "by auto"], ["proof (state)\nthis:\n  is_ground_clss\n   (Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts))\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "have ground_cc: \"is_ground_clss (set_mset ?CC)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ground_clss (set_mset (side_prems_of \\<gamma>))", "using a ground_ground_Liminf is_ground_clss_def"], ["proof (prove)\nusing this:\n  set_mset (side_prems_of \\<gamma>) \\<union> {main_prem_of \\<gamma>}\n  \\<subseteq> Liminf_llist\n               (lmap\n                 (\\<lambda>St.\n                     grounding_of_clss\n                      (N_of_state St \\<union> P_of_state St \\<union>\n                       Q_of_state St))\n                 Sts) -\n              sr.Rf\n               (Liminf_llist\n                 (lmap\n                   (\\<lambda>St.\n                       grounding_of_clss\n                        (N_of_state St \\<union> P_of_state St \\<union>\n                         Q_of_state St))\n                   Sts))\n  is_ground_clss\n   (Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts))\n  is_ground_clss ?CC = Ball ?CC is_ground_cls\n\ngoal (1 subgoal):\n 1. is_ground_clss (set_mset (side_prems_of \\<gamma>))", "by auto"], ["proof (state)\nthis:\n  is_ground_clss (set_mset (side_prems_of \\<gamma>))\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "have ground_da: \"is_ground_cls ?DA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ground_cls (main_prem_of \\<gamma>)", "using a grounding_ground singletonI ground_ground_Liminf"], ["proof (prove)\nusing this:\n  set_mset (side_prems_of \\<gamma>) \\<union> {main_prem_of \\<gamma>}\n  \\<subseteq> Liminf_llist\n               (lmap\n                 (\\<lambda>St.\n                     grounding_of_clss\n                      (N_of_state St \\<union> P_of_state St \\<union>\n                       Q_of_state St))\n                 Sts) -\n              sr.Rf\n               (Liminf_llist\n                 (lmap\n                   (\\<lambda>St.\n                       grounding_of_clss\n                        (N_of_state St \\<union> P_of_state St \\<union>\n                         Q_of_state St))\n                   Sts))\n  ?C \\<in> grounding_of_clss ?M \\<Longrightarrow> is_ground_cls ?C\n  ?a \\<in> {?a}\n  is_ground_clss\n   (Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts))\n\ngoal (1 subgoal):\n 1. is_ground_cls (main_prem_of \\<gamma>)", "by (simp add: Liminf_grounding_of_state_ground)"], ["proof (state)\nthis:\n  is_ground_cls (main_prem_of \\<gamma>)\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "from \\<gamma>_p"], ["proof (chain)\npicking this:\n  \\<gamma> \\<in> gr.ord_\\<Gamma>", "obtain CAs AAs As where\n      CAs_p: \"gr.ord_resolve CAs ?DA AAs As ?E \\<and> mset CAs = ?CC\""], ["proof (prove)\nusing this:\n  \\<gamma> \\<in> gr.ord_\\<Gamma>\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As.\n        gr.ord_resolve CAs (main_prem_of \\<gamma>) AAs As\n         (concl_of \\<gamma>) \\<and>\n        mset CAs = side_prems_of \\<gamma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding gr.ord_\\<Gamma>_def"], ["proof (prove)\nusing this:\n  \\<gamma>\n  \\<in> {uu_.\n         \\<exists>CAs DA AAs As E.\n            uu_ = Infer (mset CAs) DA E \\<and>\n            gr.ord_resolve CAs DA AAs As E}\n\ngoal (1 subgoal):\n 1. (\\<And>CAs AAs As.\n        gr.ord_resolve CAs (main_prem_of \\<gamma>) AAs As\n         (concl_of \\<gamma>) \\<and>\n        mset CAs = side_prems_of \\<gamma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  gr.ord_resolve CAs (main_prem_of \\<gamma>) AAs As\n   (concl_of \\<gamma>) \\<and>\n  mset CAs = side_prems_of \\<gamma>\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "have DA_CAs_in_ground_Liminf:\n      \"{?DA} \\<union> set CAs \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {main_prem_of \\<gamma>} \\<union> set CAs\n    \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))", "using a CAs_p fair"], ["proof (prove)\nusing this:\n  set_mset (side_prems_of \\<gamma>) \\<union> {main_prem_of \\<gamma>}\n  \\<subseteq> Liminf_llist\n               (lmap\n                 (\\<lambda>St.\n                     grounding_of_clss\n                      (N_of_state St \\<union> P_of_state St \\<union>\n                       Q_of_state St))\n                 Sts) -\n              sr.Rf\n               (Liminf_llist\n                 (lmap\n                   (\\<lambda>St.\n                       grounding_of_clss\n                        (N_of_state St \\<union> P_of_state St \\<union>\n                         Q_of_state St))\n                   Sts))\n  gr.ord_resolve CAs (main_prem_of \\<gamma>) AAs As\n   (concl_of \\<gamma>) \\<and>\n  mset CAs = side_prems_of \\<gamma>\n  fair_state_seq Sts\n\ngoal (1 subgoal):\n 1. {main_prem_of \\<gamma>} \\<union> set CAs\n    \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))", "unfolding fair_state_seq_def"], ["proof (prove)\nusing this:\n  set_mset (side_prems_of \\<gamma>) \\<union> {main_prem_of \\<gamma>}\n  \\<subseteq> Liminf_llist\n               (lmap\n                 (\\<lambda>St.\n                     grounding_of_clss\n                      (N_of_state St \\<union> P_of_state St \\<union>\n                       Q_of_state St))\n                 Sts) -\n              sr.Rf\n               (Liminf_llist\n                 (lmap\n                   (\\<lambda>St.\n                       grounding_of_clss\n                        (N_of_state St \\<union> P_of_state St \\<union>\n                         Q_of_state St))\n                   Sts))\n  gr.ord_resolve CAs (main_prem_of \\<gamma>) AAs As\n   (concl_of \\<gamma>) \\<and>\n  mset CAs = side_prems_of \\<gamma>\n  N_of_state (Liminf_state Sts) = {} \\<and>\n  P_of_state (Liminf_state Sts) = {}\n\ngoal (1 subgoal):\n 1. {main_prem_of \\<gamma>} \\<union> set CAs\n    \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))", "by (metis (no_types, lifting) Un_empty_left ground_ns_in_ground_limit_st a ns set_mset_mset\n          subset_trans sup_commute)"], ["proof (state)\nthis:\n  {main_prem_of \\<gamma>} \\<union> set CAs\n  \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  {main_prem_of \\<gamma>} \\<union> set CAs\n  \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))", "have ground_cas: \"is_ground_cls_list CAs\""], ["proof (prove)\nusing this:\n  {main_prem_of \\<gamma>} \\<union> set CAs\n  \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))\n\ngoal (1 subgoal):\n 1. is_ground_cls_list CAs", "using CAs_p"], ["proof (prove)\nusing this:\n  {main_prem_of \\<gamma>} \\<union> set CAs\n  \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))\n  gr.ord_resolve CAs (main_prem_of \\<gamma>) AAs As\n   (concl_of \\<gamma>) \\<and>\n  mset CAs = side_prems_of \\<gamma>\n\ngoal (1 subgoal):\n 1. is_ground_cls_list CAs", "unfolding is_ground_cls_list_def"], ["proof (prove)\nusing this:\n  {main_prem_of \\<gamma>} \\<union> set CAs\n  \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))\n  gr.ord_resolve CAs (main_prem_of \\<gamma>) AAs As\n   (concl_of \\<gamma>) \\<and>\n  mset CAs = side_prems_of \\<gamma>\n\ngoal (1 subgoal):\n 1. Ball (set CAs) is_ground_cls", "by auto"], ["proof (state)\nthis:\n  is_ground_cls_list CAs\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "have \"\\<exists>\\<sigma>. ord_resolve S_Q CAs ?DA AAs As \\<sigma> ?E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       ord_resolve S_Q CAs (main_prem_of \\<gamma>) AAs As \\<sigma>\n        (concl_of \\<gamma>)", "by (rule ground_ord_resolve_imp_ord_resolve[OF ground_da ground_cas\n            gr.ground_resolution_with_selection_axioms CAs_p[THEN conjunct1]])"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>.\n     ord_resolve S_Q CAs (main_prem_of \\<gamma>) AAs As \\<sigma>\n      (concl_of \\<gamma>)\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<sigma>.\n     ord_resolve S_Q CAs (main_prem_of \\<gamma>) AAs As \\<sigma>\n      (concl_of \\<gamma>)", "obtain \\<sigma> where\n      \\<sigma>_p: \"ord_resolve S_Q CAs ?DA AAs As \\<sigma> ?E\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>.\n     ord_resolve S_Q CAs (main_prem_of \\<gamma>) AAs As \\<sigma>\n      (concl_of \\<gamma>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        ord_resolve S_Q CAs (main_prem_of \\<gamma>) AAs As \\<sigma>\n         (concl_of \\<gamma>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ord_resolve S_Q CAs (main_prem_of \\<gamma>) AAs As \\<sigma>\n   (concl_of \\<gamma>)\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  ord_resolve S_Q CAs (main_prem_of \\<gamma>) AAs As \\<sigma>\n   (concl_of \\<gamma>)", "obtain \\<eta>s' \\<eta>' \\<eta>2' CAs' DA' AAs' As' \\<tau>' E' where s_p:\n      \"is_ground_subst \\<eta>'\"\n      \"is_ground_subst_list \\<eta>s'\"\n      \"is_ground_subst \\<eta>2'\"\n      \"ord_resolve_rename S CAs' DA' AAs' As' \\<tau>' E'\"\n      \"CAs' \\<cdot>\\<cdot>cl \\<eta>s' = CAs\"\n      \"DA' \\<cdot> \\<eta>' = ?DA\"\n      \"E' \\<cdot> \\<eta>2' = ?E\"\n      \"{DA'} \\<union> set CAs' \\<subseteq> Q_of_state (Liminf_state Sts)\""], ["proof (prove)\nusing this:\n  ord_resolve S_Q CAs (main_prem_of \\<gamma>) AAs As \\<sigma>\n   (concl_of \\<gamma>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<eta>' \\<eta>s' \\<eta>2' CAs' DA' AAs' As' \\<tau>' E'.\n        \\<lbrakk>is_ground_subst \\<eta>'; is_ground_subst_list \\<eta>s';\n         is_ground_subst \\<eta>2';\n         ord_resolve_rename S CAs' DA' AAs' As' \\<tau>' E';\n         CAs' \\<cdot>\\<cdot>cl \\<eta>s' = CAs;\n         DA' \\<cdot> \\<eta>' = main_prem_of \\<gamma>;\n         E' \\<cdot> \\<eta>2' = concl_of \\<gamma>;\n         {DA'} \\<union> set CAs'\n         \\<subseteq> Q_of_state (Liminf_state Sts)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ord_resolve_rename_lifting[OF sel_stable, of \"Q_of_state (Liminf_state Sts)\" CAs ?DA]\n        \\<sigma>_p[unfolded S_Q_def] selection_axioms DA_CAs_in_ground_Liminf"], ["proof (prove)\nusing this:\n  ord_resolve S_Q CAs (main_prem_of \\<gamma>) AAs As \\<sigma>\n   (concl_of \\<gamma>)\n  \\<lbrakk>\\<And>\\<rho> C.\n              is_renaming \\<rho> \\<Longrightarrow> is_renaming \\<rho>;\n   ord_resolve (S_M S (Q_of_state (Liminf_state Sts))) CAs\n    (main_prem_of \\<gamma>) ?AAs ?As ?\\<sigma> ?E;\n   selection S;\n   {main_prem_of \\<gamma>} \\<union> set CAs\n   \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts));\n   \\<And>\\<eta>s \\<eta> \\<eta>2 CAs0 DA0 AAs0 As0 E0 \\<tau>.\n      \\<lbrakk>is_ground_subst \\<eta>; is_ground_subst_list \\<eta>s;\n       is_ground_subst \\<eta>2;\n       ord_resolve_rename S CAs0 DA0 AAs0 As0 \\<tau> E0;\n       CAs0 \\<cdot>\\<cdot>cl \\<eta>s = CAs;\n       DA0 \\<cdot> \\<eta> = main_prem_of \\<gamma>; E0 \\<cdot> \\<eta>2 = ?E;\n       {DA0} \\<union> set CAs0 \\<subseteq> Q_of_state (Liminf_state Sts);\n       length CAs0 = length CAs; length \\<eta>s = length CAs\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  ord_resolve (S_M S (Q_of_state (Liminf_state Sts))) CAs\n   (main_prem_of \\<gamma>) AAs As \\<sigma> (concl_of \\<gamma>)\n  selection S\n  {main_prem_of \\<gamma>} \\<union> set CAs\n  \\<subseteq> grounding_of_clss (Q_of_state (Liminf_state Sts))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<eta>' \\<eta>s' \\<eta>2' CAs' DA' AAs' As' \\<tau>' E'.\n        \\<lbrakk>is_ground_subst \\<eta>'; is_ground_subst_list \\<eta>s';\n         is_ground_subst \\<eta>2';\n         ord_resolve_rename S CAs' DA' AAs' As' \\<tau>' E';\n         CAs' \\<cdot>\\<cdot>cl \\<eta>s' = CAs;\n         DA' \\<cdot> \\<eta>' = main_prem_of \\<gamma>;\n         E' \\<cdot> \\<eta>2' = concl_of \\<gamma>;\n         {DA'} \\<union> set CAs'\n         \\<subseteq> Q_of_state (Liminf_state Sts)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  is_ground_subst \\<eta>'\n  is_ground_subst_list \\<eta>s'\n  is_ground_subst \\<eta>2'\n  ord_resolve_rename S CAs' DA' AAs' As' \\<tau>' E'\n  CAs' \\<cdot>\\<cdot>cl \\<eta>s' = CAs\n  DA' \\<cdot> \\<eta>' = main_prem_of \\<gamma>\n  E' \\<cdot> \\<eta>2' = concl_of \\<gamma>\n  {DA'} \\<union> set CAs' \\<subseteq> Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "from this(8)"], ["proof (chain)\npicking this:\n  {DA'} \\<union> set CAs' \\<subseteq> Q_of_state (Liminf_state Sts)", "have \"\\<exists>j. enat j < llength Sts \\<and> (set CAs' \\<union> {DA'} \\<subseteq> ?Qs j)\""], ["proof (prove)\nusing this:\n  {DA'} \\<union> set CAs' \\<subseteq> Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. \\<exists>j.\n       enat j < llength Sts \\<and>\n       set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)", "unfolding Liminf_llist_def"], ["proof (prove)\nusing this:\n  {DA'} \\<union> set CAs' \\<subseteq> Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. \\<exists>j.\n       enat j < llength Sts \\<and>\n       set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)", "using subseteq_Liminf_state_eventually_always[of \"{DA'} \\<union> set CAs'\"]"], ["proof (prove)\nusing this:\n  {DA'} \\<union> set CAs' \\<subseteq> Q_of_state (Liminf_state Sts)\n  \\<lbrakk>finite ({DA'} \\<union> set CAs');\n   {DA'} \\<union> set CAs' \\<noteq> {};\n   {DA'} \\<union> set CAs'\n   \\<subseteq> Q_of_state (Liminf_state Sts)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j.\n                       enat j < llength Sts \\<and>\n                       (\\<forall>j'.\n                           enat j \\<le> enat j' \\<longrightarrow>\n                           enat j' < llength Sts \\<longrightarrow>\n                           {DA'} \\<union> set CAs'\n                           \\<subseteq> Q_of_state (lnth Sts j'))\n\ngoal (1 subgoal):\n 1. \\<exists>j.\n       enat j < llength Sts \\<and>\n       set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)", "by auto"], ["proof (state)\nthis:\n  \\<exists>j.\n     enat j < llength Sts \\<and>\n     set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  \\<exists>j.\n     enat j < llength Sts \\<and>\n     set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)", "obtain j where\n      j_p: \"is_least (\\<lambda>j. enat j < llength Sts \\<and> set CAs' \\<union> {DA'} \\<subseteq> ?Qs j) j\""], ["proof (prove)\nusing this:\n  \\<exists>j.\n     enat j < llength Sts \\<and>\n     set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        is_least\n         (\\<lambda>j.\n             enat j < llength Sts \\<and>\n             set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j))\n         j \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using least_exists[of \"\\<lambda>j. enat j < llength Sts \\<and> set CAs' \\<union> {DA'} \\<subseteq> ?Qs j\"]"], ["proof (prove)\nusing this:\n  \\<exists>j.\n     enat j < llength Sts \\<and>\n     set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)\n  enat ?n < llength Sts \\<and>\n  set CAs' \\<union> {DA'}\n  \\<subseteq> Q_of_state (lnth Sts ?n) \\<Longrightarrow>\n  \\<exists>n.\n     is_least\n      (\\<lambda>j.\n          enat j < llength Sts \\<and>\n          set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j))\n      n\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        is_least\n         (\\<lambda>j.\n             enat j < llength Sts \\<and>\n             set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j))\n         j \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  is_least\n   (\\<lambda>j.\n       enat j < llength Sts \\<and>\n       set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j))\n   j\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  is_least\n   (\\<lambda>j.\n       enat j < llength Sts \\<and>\n       set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j))\n   j", "have j_p': \"enat j < llength Sts\" \"set CAs' \\<union> {DA'} \\<subseteq> ?Qs j\""], ["proof (prove)\nusing this:\n  is_least\n   (\\<lambda>j.\n       enat j < llength Sts \\<and>\n       set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j))\n   j\n\ngoal (1 subgoal):\n 1. enat j < llength Sts &&&\n    set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)", "unfolding is_least_def"], ["proof (prove)\nusing this:\n  (enat j < llength Sts \\<and>\n   set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)) \\<and>\n  (\\<forall>n'<j.\n      \\<not> (enat n' < llength Sts \\<and>\n              set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts n')))\n\ngoal (1 subgoal):\n 1. enat j < llength Sts &&&\n    set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)", "by auto"], ["proof (state)\nthis:\n  enat j < llength Sts\n  set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  enat j < llength Sts\n  set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)", "have jn0: \"j \\<noteq> 0\""], ["proof (prove)\nusing this:\n  enat j < llength Sts\n  set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0", "using empty_Q0"], ["proof (prove)\nusing this:\n  enat j < llength Sts\n  set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)\n  Q_of_state (lhd Sts) = {}\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0", "by (metis bot_eq_sup_iff gr_implies_not_zero insert_not_empty llength_lnull\n          lnth_0_conv_lhd sup.orderE)"], ["proof (state)\nthis:\n  j \\<noteq> 0\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  j \\<noteq> 0", "have j_adds_CAs': \"\\<not> set CAs' \\<union> {DA'} \\<subseteq> ?Qs (j - 1)\" \"set CAs' \\<union> {DA'} \\<subseteq> ?Qs j\""], ["proof (prove)\nusing this:\n  j \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> set CAs' \\<union> {DA'}\n           \\<subseteq> Q_of_state (lnth Sts (j - 1)) &&&\n    set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)", "using j_p"], ["proof (prove)\nusing this:\n  j \\<noteq> 0\n  is_least\n   (\\<lambda>j.\n       enat j < llength Sts \\<and>\n       set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j))\n   j\n\ngoal (1 subgoal):\n 1. \\<not> set CAs' \\<union> {DA'}\n           \\<subseteq> Q_of_state (lnth Sts (j - 1)) &&&\n    set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)", "unfolding is_least_def"], ["proof (prove)\nusing this:\n  j \\<noteq> 0\n  (enat j < llength Sts \\<and>\n   set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)) \\<and>\n  (\\<forall>n'<j.\n      \\<not> (enat n' < llength Sts \\<and>\n              set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts n')))\n\ngoal (1 subgoal):\n 1. \\<not> set CAs' \\<union> {DA'}\n           \\<subseteq> Q_of_state (lnth Sts (j - 1)) &&&\n    set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)", "apply (metis (no_types) One_nat_def Suc_diff_Suc Suc_ile_eq diff_diff_cancel diff_zero\n          less_imp_le less_one neq0_conv zero_less_diff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)", "using j_p'(2)"], ["proof (prove)\nusing this:\n  set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)\n\ngoal (1 subgoal):\n 1. set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)", "by blast"], ["proof (state)\nthis:\n  \\<not> set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts (j - 1))\n  set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "have \"lnth Sts (j - 1) \\<leadsto> lnth Sts j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lnth Sts (j - 1) \\<leadsto> lnth Sts j", "using j_p'(1) jn0 deriv chain_lnth_rel[of _ _ \"j - 1\"]"], ["proof (prove)\nusing this:\n  enat j < llength Sts\n  j \\<noteq> 0\n  chain (\\<leadsto>) Sts\n  \\<lbrakk>chain ?R ?xs; enat (Suc (j - 1)) < llength ?xs\\<rbrakk>\n  \\<Longrightarrow> ?R (lnth ?xs (j - 1)) (lnth ?xs (Suc (j - 1)))\n\ngoal (1 subgoal):\n 1. lnth Sts (j - 1) \\<leadsto> lnth Sts j", "by force"], ["proof (state)\nthis:\n  lnth Sts (j - 1) \\<leadsto> lnth Sts j\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  lnth Sts (j - 1) \\<leadsto> lnth Sts j", "obtain C' where C'_p:\n      \"?Ns (j - 1) = {}\"\n      \"?Ps (j - 1) = ?Ps j \\<union> {C'}\"\n      \"?Qs j = ?Qs (j - 1) \\<union> {C'}\"\n      \"?Ns j = concls_of (ord_FO_resolution.inferences_between (?Qs (j - 1)) C')\"\n      \"C' \\<in> set CAs' \\<union> {DA'}\"\n      \"C' \\<notin> ?Qs (j - 1)\""], ["proof (prove)\nusing this:\n  lnth Sts (j - 1) \\<leadsto> lnth Sts j\n\ngoal (1 subgoal):\n 1. (\\<And>C'.\n        \\<lbrakk>N_of_state (lnth Sts (j - 1)) = {};\n         P_of_state (lnth Sts (j - 1)) =\n         P_of_state (lnth Sts j) \\<union> {C'};\n         Q_of_state (lnth Sts j) =\n         Q_of_state (lnth Sts (j - 1)) \\<union> {C'};\n         N_of_state (lnth Sts j) =\n         concls_of\n          (ord_FO_resolution.inferences_between\n            (Q_of_state (lnth Sts (j - 1))) C');\n         C' \\<in> set CAs' \\<union> {DA'};\n         C' \\<notin> Q_of_state (lnth Sts (j - 1))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using j_adds_CAs'"], ["proof (prove)\nusing this:\n  lnth Sts (j - 1) \\<leadsto> lnth Sts j\n  \\<not> set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts (j - 1))\n  set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)\n\ngoal (1 subgoal):\n 1. (\\<And>C'.\n        \\<lbrakk>N_of_state (lnth Sts (j - 1)) = {};\n         P_of_state (lnth Sts (j - 1)) =\n         P_of_state (lnth Sts j) \\<union> {C'};\n         Q_of_state (lnth Sts j) =\n         Q_of_state (lnth Sts (j - 1)) \\<union> {C'};\n         N_of_state (lnth Sts j) =\n         concls_of\n          (ord_FO_resolution.inferences_between\n            (Q_of_state (lnth Sts (j - 1))) C');\n         C' \\<in> set CAs' \\<union> {DA'};\n         C' \\<notin> Q_of_state (lnth Sts (j - 1))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (induction rule: RP.cases) auto"], ["proof (state)\nthis:\n  N_of_state (lnth Sts (j - 1)) = {}\n  P_of_state (lnth Sts (j - 1)) = P_of_state (lnth Sts j) \\<union> {C'}\n  Q_of_state (lnth Sts j) = Q_of_state (lnth Sts (j - 1)) \\<union> {C'}\n  N_of_state (lnth Sts j) =\n  concls_of\n   (ord_FO_resolution.inferences_between (Q_of_state (lnth Sts (j - 1))) C')\n  C' \\<in> set CAs' \\<union> {DA'}\n  C' \\<notin> Q_of_state (lnth Sts (j - 1))\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "have \"E' \\<in> ?Ns j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E' \\<in> N_of_state (lnth Sts j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. E' \\<in> N_of_state (lnth Sts j)", "have \"E' \\<in> concls_of (ord_FO_resolution.inferences_between (Q_of_state (lnth Sts (j - 1))) C')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E' \\<in> concls_of\n              (ord_FO_resolution.inferences_between\n                (Q_of_state (lnth Sts (j - 1))) C')", "unfolding infer_from_def ord_FO_\\<Gamma>_def inference_system.inferences_between_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. E' \\<in> concls_of\n              {\\<gamma>\n               \\<in> {uu_.\n                      \\<exists>CAs DA AAs As \\<sigma> E.\n                         uu_ = Infer (mset CAs) DA E \\<and>\n                         ord_resolve_rename S CAs DA AAs As \\<sigma> E}.\n               set_mset (prems_of \\<gamma>)\n               \\<subseteq> Q_of_state (lnth Sts (j - 1)) \\<union>\n                           {C'} \\<and>\n               C' \\<in># prems_of \\<gamma>}", "apply (rule_tac x = \"Infer (mset CAs') DA' E'\" in image_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. E' = concl_of (Infer (mset CAs') DA' E')\n 2. Infer (mset CAs') DA' E'\n    \\<in> {\\<gamma>\n           \\<in> {uu_.\n                  \\<exists>CAs DA AAs As \\<sigma> E.\n                     uu_ = Infer (mset CAs) DA E \\<and>\n                     ord_resolve_rename S CAs DA AAs As \\<sigma> E}.\n           set_mset (prems_of \\<gamma>)\n           \\<subseteq> Q_of_state (lnth Sts (j - 1)) \\<union> {C'} \\<and>\n           C' \\<in># prems_of \\<gamma>}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. E' = concl_of (Infer (mset CAs') DA' E')", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. Infer (mset CAs') DA' E'\n    \\<in> {\\<gamma>\n           \\<in> {uu_.\n                  \\<exists>CAs DA AAs As \\<sigma> E.\n                     uu_ = Infer (mset CAs) DA E \\<and>\n                     ord_resolve_rename S CAs DA AAs As \\<sigma> E}.\n           set_mset (prems_of \\<gamma>)\n           \\<subseteq> Q_of_state (lnth Sts (j - 1)) \\<union> {C'} \\<and>\n           C' \\<in># prems_of \\<gamma>}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. Infer (mset CAs') DA' E'\n    \\<in> {\\<gamma>\n           \\<in> {uu_.\n                  \\<exists>CAs DA AAs As \\<sigma> E.\n                     uu_ = Infer (mset CAs) DA E \\<and>\n                     ord_resolve_rename S CAs DA AAs As \\<sigma> E}.\n           set_mset (prems_of \\<gamma>)\n           \\<subseteq> Q_of_state (lnth Sts (j - 1)) \\<union> {C'} \\<and>\n           C' \\<in># prems_of \\<gamma>}", "unfolding infer_from_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Infer (mset CAs') DA' E'\n    \\<in> {\\<gamma>\n           \\<in> {uu_.\n                  \\<exists>CAs DA AAs As \\<sigma> E.\n                     uu_ = Infer (mset CAs) DA E \\<and>\n                     ord_resolve_rename S CAs DA AAs As \\<sigma> E}.\n           set_mset (prems_of \\<gamma>)\n           \\<subseteq> Q_of_state (lnth Sts (j - 1)) \\<union> {C'} \\<and>\n           C' \\<in># prems_of \\<gamma>}", "by (rule ord_resolve_rename.cases[OF s_p(4)]) (use s_p(4) C'_p(3,5) j_p'(2) in force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  E' \\<in> concls_of\n            (ord_FO_resolution.inferences_between\n              (Q_of_state (lnth Sts (j - 1))) C')\n\ngoal (1 subgoal):\n 1. E' \\<in> N_of_state (lnth Sts j)", "then"], ["proof (chain)\npicking this:\n  E' \\<in> concls_of\n            (ord_FO_resolution.inferences_between\n              (Q_of_state (lnth Sts (j - 1))) C')", "show ?thesis"], ["proof (prove)\nusing this:\n  E' \\<in> concls_of\n            (ord_FO_resolution.inferences_between\n              (Q_of_state (lnth Sts (j - 1))) C')\n\ngoal (1 subgoal):\n 1. E' \\<in> N_of_state (lnth Sts j)", "using C'_p(4)"], ["proof (prove)\nusing this:\n  E' \\<in> concls_of\n            (ord_FO_resolution.inferences_between\n              (Q_of_state (lnth Sts (j - 1))) C')\n  N_of_state (lnth Sts j) =\n  concls_of\n   (ord_FO_resolution.inferences_between (Q_of_state (lnth Sts (j - 1))) C')\n\ngoal (1 subgoal):\n 1. E' \\<in> N_of_state (lnth Sts j)", "by auto"], ["proof (state)\nthis:\n  E' \\<in> N_of_state (lnth Sts j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  E' \\<in> N_of_state (lnth Sts j)\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  E' \\<in> N_of_state (lnth Sts j)", "have \"E' \\<in> clss_of_state (lnth Sts j)\""], ["proof (prove)\nusing this:\n  E' \\<in> N_of_state (lnth Sts j)\n\ngoal (1 subgoal):\n 1. E' \\<in> N_of_state (lnth Sts j) \\<union>\n             P_of_state (lnth Sts j) \\<union>\n             Q_of_state (lnth Sts j)", "using j_p'"], ["proof (prove)\nusing this:\n  E' \\<in> N_of_state (lnth Sts j)\n  enat j < llength Sts\n  set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)\n\ngoal (1 subgoal):\n 1. E' \\<in> N_of_state (lnth Sts j) \\<union>\n             P_of_state (lnth Sts j) \\<union>\n             Q_of_state (lnth Sts j)", "by auto"], ["proof (state)\nthis:\n  E' \\<in> N_of_state (lnth Sts j) \\<union> P_of_state (lnth Sts j) \\<union>\n           Q_of_state (lnth Sts j)\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  E' \\<in> N_of_state (lnth Sts j) \\<union> P_of_state (lnth Sts j) \\<union>\n           Q_of_state (lnth Sts j)", "have \"?E \\<in> grounding_of_state (lnth Sts j)\""], ["proof (prove)\nusing this:\n  E' \\<in> N_of_state (lnth Sts j) \\<union> P_of_state (lnth Sts j) \\<union>\n           Q_of_state (lnth Sts j)\n\ngoal (1 subgoal):\n 1. concl_of \\<gamma>\n    \\<in> grounding_of_clss\n           (N_of_state (lnth Sts j) \\<union>\n            P_of_state (lnth Sts j) \\<union>\n            Q_of_state (lnth Sts j))", "using s_p(7) s_p(3)"], ["proof (prove)\nusing this:\n  E' \\<in> N_of_state (lnth Sts j) \\<union> P_of_state (lnth Sts j) \\<union>\n           Q_of_state (lnth Sts j)\n  E' \\<cdot> \\<eta>2' = concl_of \\<gamma>\n  is_ground_subst \\<eta>2'\n\ngoal (1 subgoal):\n 1. concl_of \\<gamma>\n    \\<in> grounding_of_clss\n           (N_of_state (lnth Sts j) \\<union>\n            P_of_state (lnth Sts j) \\<union>\n            Q_of_state (lnth Sts j))", "unfolding grounding_of_clss_def grounding_of_cls_def"], ["proof (prove)\nusing this:\n  E' \\<in> N_of_state (lnth Sts j) \\<union> P_of_state (lnth Sts j) \\<union>\n           Q_of_state (lnth Sts j)\n  E' \\<cdot> \\<eta>2' = concl_of \\<gamma>\n  is_ground_subst \\<eta>2'\n\ngoal (1 subgoal):\n 1. concl_of \\<gamma>\n    \\<in> (\\<Union>C\\<in>N_of_state (lnth Sts j) \\<union>\n                         P_of_state (lnth Sts j) \\<union>\n                         Q_of_state (lnth Sts j).\n              {C \\<cdot> \\<sigma> |\\<sigma>. is_ground_subst \\<sigma>})", "by force"], ["proof (state)\nthis:\n  concl_of \\<gamma>\n  \\<in> grounding_of_clss\n         (N_of_state (lnth Sts j) \\<union> P_of_state (lnth Sts j) \\<union>\n          Q_of_state (lnth Sts j))\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  concl_of \\<gamma>\n  \\<in> grounding_of_clss\n         (N_of_state (lnth Sts j) \\<union> P_of_state (lnth Sts j) \\<union>\n          Q_of_state (lnth Sts j))", "have \"\\<gamma> \\<in> sr.Ri (grounding_of_state (lnth Sts j))\""], ["proof (prove)\nusing this:\n  concl_of \\<gamma>\n  \\<in> grounding_of_clss\n         (N_of_state (lnth Sts j) \\<union> P_of_state (lnth Sts j) \\<union>\n          Q_of_state (lnth Sts j))\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<in> sr.Ri\n           (grounding_of_clss\n             (N_of_state (lnth Sts j) \\<union>\n              P_of_state (lnth Sts j) \\<union>\n              Q_of_state (lnth Sts j)))", "using sr.Ri_effective \\<gamma>_p"], ["proof (prove)\nusing this:\n  concl_of \\<gamma>\n  \\<in> grounding_of_clss\n         (N_of_state (lnth Sts j) \\<union> P_of_state (lnth Sts j) \\<union>\n          Q_of_state (lnth Sts j))\n  \\<lbrakk>?\\<gamma> \\<in> gr.ord_\\<Gamma>;\n   concl_of ?\\<gamma> \\<in> ?N \\<union> sr.Rf ?N\\<rbrakk>\n  \\<Longrightarrow> ?\\<gamma> \\<in> sr.Ri ?N\n  \\<gamma> \\<in> gr.ord_\\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<in> sr.Ri\n           (grounding_of_clss\n             (N_of_state (lnth Sts j) \\<union>\n              P_of_state (lnth Sts j) \\<union>\n              Q_of_state (lnth Sts j)))", "by auto"], ["proof (state)\nthis:\n  \\<gamma>\n  \\<in> sr.Ri\n         (grounding_of_clss\n           (N_of_state (lnth Sts j) \\<union>\n            P_of_state (lnth Sts j) \\<union>\n            Q_of_state (lnth Sts j)))\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  \\<gamma>\n  \\<in> sr.Ri\n         (grounding_of_clss\n           (N_of_state (lnth Sts j) \\<union>\n            P_of_state (lnth Sts j) \\<union>\n            Q_of_state (lnth Sts j)))", "have \"\\<gamma> \\<in> sr_ext_Ri (?N j)\""], ["proof (prove)\nusing this:\n  \\<gamma>\n  \\<in> sr.Ri\n         (grounding_of_clss\n           (N_of_state (lnth Sts j) \\<union>\n            P_of_state (lnth Sts j) \\<union>\n            Q_of_state (lnth Sts j)))\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<in> sr_ext_Ri\n           (grounding_of_clss\n             (N_of_state (lnth Sts j) \\<union>\n              P_of_state (lnth Sts j) \\<union>\n              Q_of_state (lnth Sts j)))", "unfolding sr_ext_Ri_def"], ["proof (prove)\nusing this:\n  \\<gamma>\n  \\<in> sr.Ri\n         (grounding_of_clss\n           (N_of_state (lnth Sts j) \\<union>\n            P_of_state (lnth Sts j) \\<union>\n            Q_of_state (lnth Sts j)))\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<in> sr.Ri\n           (grounding_of_clss\n             (N_of_state (lnth Sts j) \\<union>\n              P_of_state (lnth Sts j) \\<union>\n              Q_of_state (lnth Sts j))) \\<union>\n          (ground_sound_\\<Gamma> - gr.ord_\\<Gamma>)", "by auto"], ["proof (state)\nthis:\n  \\<gamma>\n  \\<in> sr_ext_Ri\n         (grounding_of_clss\n           (N_of_state (lnth Sts j) \\<union>\n            P_of_state (lnth Sts j) \\<union>\n            Q_of_state (lnth Sts j)))\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  \\<gamma>\n  \\<in> sr_ext_Ri\n         (grounding_of_clss\n           (N_of_state (lnth Sts j) \\<union>\n            P_of_state (lnth Sts j) \\<union>\n            Q_of_state (lnth Sts j)))", "have \"\\<gamma> \\<in> sr_ext_Ri (Sup_llist (lmap grounding_of_state Sts))\""], ["proof (prove)\nusing this:\n  \\<gamma>\n  \\<in> sr_ext_Ri\n         (grounding_of_clss\n           (N_of_state (lnth Sts j) \\<union>\n            P_of_state (lnth Sts j) \\<union>\n            Q_of_state (lnth Sts j)))\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<in> sr_ext_Ri\n           (Sup_llist\n             (lmap\n               (\\<lambda>St.\n                   grounding_of_clss\n                    (N_of_state St \\<union> P_of_state St \\<union>\n                     Q_of_state St))\n               Sts))", "using j_p' contra_subsetD llength_lmap lnth_lmap lnth_subset_Sup_llist sr_ext.Ri_mono"], ["proof (prove)\nusing this:\n  \\<gamma>\n  \\<in> sr_ext_Ri\n         (grounding_of_clss\n           (N_of_state (lnth Sts j) \\<union>\n            P_of_state (lnth Sts j) \\<union>\n            Q_of_state (lnth Sts j)))\n  enat j < llength Sts\n  set CAs' \\<union> {DA'} \\<subseteq> Q_of_state (lnth Sts j)\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<notin> ?A\n  llength (lmap ?f ?xs) = llength ?xs\n  enat ?n < llength ?xs \\<Longrightarrow>\n  lnth (lmap ?f ?xs) ?n = ?f (lnth ?xs ?n)\n  enat ?i < llength ?Xs \\<Longrightarrow>\n  lnth ?Xs ?i \\<subseteq> Sup_llist ?Xs\n  ?N \\<subseteq> ?N' \\<Longrightarrow>\n  sr_ext_Ri ?N \\<subseteq> sr_ext_Ri ?N'\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<in> sr_ext_Ri\n           (Sup_llist\n             (lmap\n               (\\<lambda>St.\n                   grounding_of_clss\n                    (N_of_state St \\<union> P_of_state St \\<union>\n                     Q_of_state St))\n               Sts))", "by smt"], ["proof (state)\nthis:\n  \\<gamma>\n  \\<in> sr_ext_Ri\n         (Sup_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts))\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  \\<gamma>\n  \\<in> sr_ext_Ri\n         (Sup_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts))", "have \"\\<gamma> \\<in> sr_ext_Ri (Liminf_llist (lmap grounding_of_state Sts))\""], ["proof (prove)\nusing this:\n  \\<gamma>\n  \\<in> sr_ext_Ri\n         (Sup_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts))\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<in> sr_ext_Ri\n           (Liminf_llist\n             (lmap\n               (\\<lambda>St.\n                   grounding_of_clss\n                    (N_of_state St \\<union> P_of_state St \\<union>\n                     Q_of_state St))\n               Sts))", "using sr_ext.Ri_limit_Sup[of Gs] derivns ns"], ["proof (prove)\nusing this:\n  \\<gamma>\n  \\<in> sr_ext_Ri\n         (Sup_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts))\n  chain sr_ext.derive Gs \\<Longrightarrow>\n  sr_ext_Ri (Liminf_llist Gs) = sr_ext_Ri (Sup_llist Gs)\n  chain sr_ext.derive Gs\n  Gs =\n  lmap\n   (\\<lambda>St.\n       grounding_of_clss\n        (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n   Sts\n\ngoal (1 subgoal):\n 1. \\<gamma>\n    \\<in> sr_ext_Ri\n           (Liminf_llist\n             (lmap\n               (\\<lambda>St.\n                   grounding_of_clss\n                    (N_of_state St \\<union> P_of_state St \\<union>\n                     Q_of_state St))\n               Sts))", "by blast"], ["proof (state)\nthis:\n  \\<gamma>\n  \\<in> sr_ext_Ri\n         (Liminf_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts))\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<gamma>2 \\<in> gr.ord_\\<Gamma>;\n   set_mset (side_prems_of ?\\<gamma>2) \\<union> {main_prem_of ?\\<gamma>2}\n   \\<subseteq> Liminf_llist\n                (lmap\n                  (\\<lambda>St.\n                      grounding_of_clss\n                       (N_of_state St \\<union> P_of_state St \\<union>\n                        Q_of_state St))\n                  Sts) -\n               sr.Rf\n                (Liminf_llist\n                  (lmap\n                    (\\<lambda>St.\n                        grounding_of_clss\n                         (N_of_state St \\<union> P_of_state St \\<union>\n                          Q_of_state St))\n                    Sts))\\<rbrakk>\n  \\<Longrightarrow> ?\\<gamma>2\n                    \\<in> sr_ext_Ri\n                           (Liminf_llist\n                             (lmap\n                               (\\<lambda>St.\n                                   grounding_of_clss\n                                    (N_of_state St \\<union>\n                                     P_of_state St \\<union>\n                                     Q_of_state St))\n                               Sts))\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?\\<gamma>2 \\<in> gr.ord_\\<Gamma>;\n   set_mset (side_prems_of ?\\<gamma>2) \\<union> {main_prem_of ?\\<gamma>2}\n   \\<subseteq> Liminf_llist\n                (lmap\n                  (\\<lambda>St.\n                      grounding_of_clss\n                       (N_of_state St \\<union> P_of_state St \\<union>\n                        Q_of_state St))\n                  Sts) -\n               sr.Rf\n                (Liminf_llist\n                  (lmap\n                    (\\<lambda>St.\n                        grounding_of_clss\n                         (N_of_state St \\<union> P_of_state St \\<union>\n                          Q_of_state St))\n                    Sts))\\<rbrakk>\n  \\<Longrightarrow> ?\\<gamma>2\n                    \\<in> sr_ext_Ri\n                           (Liminf_llist\n                             (lmap\n                               (\\<lambda>St.\n                                   grounding_of_clss\n                                    (N_of_state St \\<union>\n                                     P_of_state St \\<union>\n                                     Q_of_state St))\n                               Sts))", "have \"sr_ext.saturated_upto (Liminf_llist (lmap grounding_of_state Sts))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<gamma>2 \\<in> gr.ord_\\<Gamma>;\n   set_mset (side_prems_of ?\\<gamma>2) \\<union> {main_prem_of ?\\<gamma>2}\n   \\<subseteq> Liminf_llist\n                (lmap\n                  (\\<lambda>St.\n                      grounding_of_clss\n                       (N_of_state St \\<union> P_of_state St \\<union>\n                        Q_of_state St))\n                  Sts) -\n               sr.Rf\n                (Liminf_llist\n                  (lmap\n                    (\\<lambda>St.\n                        grounding_of_clss\n                         (N_of_state St \\<union> P_of_state St \\<union>\n                          Q_of_state St))\n                    Sts))\\<rbrakk>\n  \\<Longrightarrow> ?\\<gamma>2\n                    \\<in> sr_ext_Ri\n                           (Liminf_llist\n                             (lmap\n                               (\\<lambda>St.\n                                   grounding_of_clss\n                                    (N_of_state St \\<union>\n                                     P_of_state St \\<union>\n                                     Q_of_state St))\n                               Sts))\n\ngoal (1 subgoal):\n 1. sr_ext.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "unfolding sr_ext.saturated_upto_def sr_ext.inferences_from_def infer_from_def sr_ext_Ri_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<gamma>2 \\<in> gr.ord_\\<Gamma>;\n   set_mset (side_prems_of ?\\<gamma>2) \\<union> {main_prem_of ?\\<gamma>2}\n   \\<subseteq> Liminf_llist\n                (lmap\n                  (\\<lambda>St.\n                      grounding_of_clss\n                       (N_of_state St \\<union> P_of_state St \\<union>\n                        Q_of_state St))\n                  Sts) -\n               sr.Rf\n                (Liminf_llist\n                  (lmap\n                    (\\<lambda>St.\n                        grounding_of_clss\n                         (N_of_state St \\<union> P_of_state St \\<union>\n                          Q_of_state St))\n                    Sts))\\<rbrakk>\n  \\<Longrightarrow> ?\\<gamma>2\n                    \\<in> sr.Ri\n                           (Liminf_llist\n                             (lmap\n                               (\\<lambda>St.\n                                   grounding_of_clss\n                                    (N_of_state St \\<union>\n                                     P_of_state St \\<union>\n                                     Q_of_state St))\n                               Sts)) \\<union>\n                          (ground_sound_\\<Gamma> - gr.ord_\\<Gamma>)\n\ngoal (1 subgoal):\n 1. {\\<gamma> \\<in> ground_sound_\\<Gamma>.\n     set_mset (prems_of \\<gamma>)\n     \\<subseteq> Liminf_llist\n                  (lmap\n                    (\\<lambda>St.\n                        grounding_of_clss\n                         (N_of_state St \\<union> P_of_state St \\<union>\n                          Q_of_state St))\n                    Sts) -\n                 sr.Rf\n                  (Liminf_llist\n                    (lmap\n                      (\\<lambda>St.\n                          grounding_of_clss\n                           (N_of_state St \\<union> P_of_state St \\<union>\n                            Q_of_state St))\n                      Sts))}\n    \\<subseteq> sr.Ri\n                 (Liminf_llist\n                   (lmap\n                     (\\<lambda>St.\n                         grounding_of_clss\n                          (N_of_state St \\<union> P_of_state St \\<union>\n                           Q_of_state St))\n                     Sts)) \\<union>\n                (ground_sound_\\<Gamma> - gr.ord_\\<Gamma>)", "by auto"], ["proof (state)\nthis:\n  sr_ext.saturated_upto\n   (Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts))\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "then"], ["proof (chain)\npicking this:\n  sr_ext.saturated_upto\n   (Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts))", "show ?thesis"], ["proof (prove)\nusing this:\n  sr_ext.saturated_upto\n   (Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts))\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "using gd_ord_\\<Gamma>_ngd_ord_\\<Gamma> sr.redundancy_criterion_axioms\n      redundancy_criterion_standard_extension_saturated_upto_iff[of gr.ord_\\<Gamma>]"], ["proof (prove)\nusing this:\n  sr_ext.saturated_upto\n   (Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts))\n  gr.ord_\\<Gamma> \\<subseteq> ground_sound_\\<Gamma>\n  redundancy_criterion gr.ord_\\<Gamma> sr.Rf sr.Ri\n  \\<lbrakk>gr.ord_\\<Gamma> \\<subseteq> ?\\<Gamma>';\n   redundancy_criterion gr.ord_\\<Gamma> ?Rf ?Ri\\<rbrakk>\n  \\<Longrightarrow> redundancy_criterion.saturated_upto gr.ord_\\<Gamma> ?Rf\n                     ?Ri ?M =\n                    redundancy_criterion.saturated_upto ?\\<Gamma>' ?Rf\n                     (\\<lambda>N.\n                         ?Ri N \\<union> (?\\<Gamma>' - gr.ord_\\<Gamma>))\n                     ?M\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "unfolding sr_ext_Ri_def"], ["proof (prove)\nusing this:\n  redundancy_criterion.saturated_upto ground_sound_\\<Gamma> sr.Rf\n   (\\<lambda>N. sr.Ri N \\<union> (ground_sound_\\<Gamma> - gr.ord_\\<Gamma>))\n   (Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts))\n  gr.ord_\\<Gamma> \\<subseteq> ground_sound_\\<Gamma>\n  redundancy_criterion gr.ord_\\<Gamma> sr.Rf sr.Ri\n  \\<lbrakk>gr.ord_\\<Gamma> \\<subseteq> ?\\<Gamma>';\n   redundancy_criterion gr.ord_\\<Gamma> ?Rf ?Ri\\<rbrakk>\n  \\<Longrightarrow> redundancy_criterion.saturated_upto gr.ord_\\<Gamma> ?Rf\n                     ?Ri ?M =\n                    redundancy_criterion.saturated_upto ?\\<Gamma>' ?Rf\n                     (\\<lambda>N.\n                         ?Ri N \\<union> (?\\<Gamma>' - gr.ord_\\<Gamma>))\n                     ?M\n\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "by auto"], ["proof (state)\nthis:\n  sr.saturated_upto\n   (Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary RP_complete_if_fair:\n  assumes\n    deriv: \"chain (\\<leadsto>) Sts\" and\n    fair: \"fair_state_seq Sts\" and\n    empty_Q0: \"Q_of_state (lhd Sts) = {}\" and\n    unsat: \"\\<not> satisfiable (grounding_of_state (lhd Sts))\"\n  shows \"{#} \\<in> Q_of_state (Liminf_state Sts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "have \"\\<not> satisfiable (Liminf_llist (lmap grounding_of_state Sts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (Liminf_llist\n              (lmap\n                (\\<lambda>St.\n                    grounding_of_clss\n                     (N_of_state St \\<union> P_of_state St \\<union>\n                      Q_of_state St))\n                Sts))", "using unsat sr_ext.sat_limit_iff[OF ground_derive_chain] chain_not_lnull deriv"], ["proof (prove)\nusing this:\n  \\<not> satisfiable\n          (grounding_of_clss\n            (N_of_state (lhd Sts) \\<union> P_of_state (lhd Sts) \\<union>\n             Q_of_state (lhd Sts)))\n  chain (\\<leadsto>) Sts \\<Longrightarrow>\n  satisfiable\n   (Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts)) =\n  satisfiable\n   (lhd (lmap\n          (\\<lambda>St.\n              grounding_of_clss\n               (N_of_state St \\<union> P_of_state St \\<union>\n                Q_of_state St))\n          Sts))\n  chain ?R ?xs \\<Longrightarrow> \\<not> lnull ?xs\n  chain (\\<leadsto>) Sts\n\ngoal (1 subgoal):\n 1. \\<not> satisfiable\n            (Liminf_llist\n              (lmap\n                (\\<lambda>St.\n                    grounding_of_clss\n                     (N_of_state St \\<union> P_of_state St \\<union>\n                      Q_of_state St))\n                Sts))", "by fastforce"], ["proof (state)\nthis:\n  \\<not> satisfiable\n          (Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts))\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "moreover"], ["proof (state)\nthis:\n  \\<not> satisfiable\n          (Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts))\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "have \"sr.saturated_upto (Liminf_llist (lmap grounding_of_state Sts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sr.saturated_upto\n     (Liminf_llist\n       (lmap\n         (\\<lambda>St.\n             grounding_of_clss\n              (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n         Sts))", "by (rule RP_saturated_if_fair[OF deriv fair empty_Q0, simplified])"], ["proof (state)\nthis:\n  sr.saturated_upto\n   (Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts))\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> satisfiable\n          (Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts))\n  sr.saturated_upto\n   (Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts))", "have \"{#} \\<in> Liminf_llist (lmap grounding_of_state Sts)\""], ["proof (prove)\nusing this:\n  \\<not> satisfiable\n          (Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts))\n  sr.saturated_upto\n   (Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts))\n\ngoal (1 subgoal):\n 1. {#}\n    \\<in> Liminf_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)", "using sr.saturated_upto_complete_if"], ["proof (prove)\nusing this:\n  \\<not> satisfiable\n          (Liminf_llist\n            (lmap\n              (\\<lambda>St.\n                  grounding_of_clss\n                   (N_of_state St \\<union> P_of_state St \\<union>\n                    Q_of_state St))\n              Sts))\n  sr.saturated_upto\n   (Liminf_llist\n     (lmap\n       (\\<lambda>St.\n           grounding_of_clss\n            (N_of_state St \\<union> P_of_state St \\<union> Q_of_state St))\n       Sts))\n  \\<lbrakk>sr.saturated_upto ?N; \\<not> satisfiable ?N\\<rbrakk>\n  \\<Longrightarrow> {#} \\<in> ?N\n\ngoal (1 subgoal):\n 1. {#}\n    \\<in> Liminf_llist\n           (lmap\n             (\\<lambda>St.\n                 grounding_of_clss\n                  (N_of_state St \\<union> P_of_state St \\<union>\n                   Q_of_state St))\n             Sts)", "by auto"], ["proof (state)\nthis:\n  {#}\n  \\<in> Liminf_llist\n         (lmap\n           (\\<lambda>St.\n               grounding_of_clss\n                (N_of_state St \\<union> P_of_state St \\<union>\n                 Q_of_state St))\n           Sts)\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "then"], ["proof (chain)\npicking this:\n  {#}\n  \\<in> Liminf_llist\n         (lmap\n           (\\<lambda>St.\n               grounding_of_clss\n                (N_of_state St \\<union> P_of_state St \\<union>\n                 Q_of_state St))\n           Sts)", "show ?thesis"], ["proof (prove)\nusing this:\n  {#}\n  \\<in> Liminf_llist\n         (lmap\n           (\\<lambda>St.\n               grounding_of_clss\n                (N_of_state St \\<union> P_of_state St \\<union>\n                 Q_of_state St))\n           Sts)\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "using empty_clause_in_Q_of_Liminf_state[OF deriv fair]"], ["proof (prove)\nusing this:\n  {#}\n  \\<in> Liminf_llist\n         (lmap\n           (\\<lambda>St.\n               grounding_of_clss\n                (N_of_state St \\<union> P_of_state St \\<union>\n                 Q_of_state St))\n           Sts)\n  {#}\n  \\<in> Liminf_llist\n         (lmap\n           (\\<lambda>St.\n               grounding_of_clss\n                (N_of_state St \\<union> P_of_state St \\<union>\n                 Q_of_state St))\n           Sts) \\<Longrightarrow>\n  {#} \\<in> Q_of_state (Liminf_state Sts)\n\ngoal (1 subgoal):\n 1. {#} \\<in> Q_of_state (Liminf_state Sts)", "by auto"], ["proof (state)\nthis:\n  {#} \\<in> Q_of_state (Liminf_state Sts)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"], ["", "end"]]}