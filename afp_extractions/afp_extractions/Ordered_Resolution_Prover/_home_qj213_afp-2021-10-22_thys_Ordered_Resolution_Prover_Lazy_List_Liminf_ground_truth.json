{"file_name": "/home/qj213/afp-2021-10-22/thys/Ordered_Resolution_Prover/Lazy_List_Liminf.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Ordered_Resolution_Prover", "problem_names": ["lemma less_llength_ltake: \"i < llength (ltake k Xs) \\<longleftrightarrow> i < k \\<and> i < llength Xs\"", "lemma lnth_subset_Sup_llist: \"enat i < llength Xs \\<Longrightarrow> lnth Xs i \\<subseteq> Sup_llist Xs\"", "lemma Sup_llist_imp_exists_index: \"x \\<in> Sup_llist Xs \\<Longrightarrow> \\<exists>i. enat i < llength Xs \\<and> x \\<in> lnth Xs i\"", "lemma exists_index_imp_Sup_llist: \"enat i < llength Xs \\<Longrightarrow> x \\<in> lnth Xs i \\<Longrightarrow> x \\<in> Sup_llist Xs\"", "lemma Sup_llist_LNil[simp]: \"Sup_llist LNil = {}\"", "lemma Sup_llist_LCons[simp]: \"Sup_llist (LCons X Xs) = X \\<union> Sup_llist Xs\"", "lemma lhd_subset_Sup_llist: \"\\<not> lnull Xs \\<Longrightarrow> lhd Xs \\<subseteq> Sup_llist Xs\"", "lemma Sup_upto_llist_eq_Sup_llist_ltake: \"Sup_upto_llist Xs j = Sup_llist (ltake (eSuc j) Xs)\"", "lemma Sup_upto_llist_enat_0[simp]:\n  \"Sup_upto_llist Xs (enat 0) = (if lnull Xs then {} else lhd Xs)\"", "lemma Sup_upto_llist_Suc[simp]:\n  \"Sup_upto_llist Xs (enat (Suc j)) =\n   Sup_upto_llist Xs (enat j) \\<union> (if enat (Suc j) < llength Xs then lnth Xs (Suc j) else {})\"", "lemma Sup_upto_llist_infinity[simp]: \"Sup_upto_llist Xs \\<infinity> = Sup_llist Xs\"", "lemma Sup_upto_llist_0[simp]: \"Sup_upto_llist Xs 0 = (if lnull Xs then {} else lhd Xs)\"", "lemma Sup_upto_llist_eSuc[simp]:\n  \"Sup_upto_llist Xs (eSuc j) =\n   (case j of\n      enat k \\<Rightarrow> Sup_upto_llist Xs (enat (Suc k))\n    | \\<infinity> \\<Rightarrow> Sup_llist Xs)\"", "lemma Sup_upto_llist_mono[simp]: \"j \\<le> k \\<Longrightarrow> Sup_upto_llist Xs j \\<subseteq> Sup_upto_llist Xs k\"", "lemma Sup_upto_llist_subset_Sup_llist: \"Sup_upto_llist Xs j \\<subseteq> Sup_llist Xs\"", "lemma elem_Sup_llist_imp_Sup_upto_llist:\n  \"x \\<in> Sup_llist Xs \\<Longrightarrow> \\<exists>j < llength Xs. x \\<in> Sup_upto_llist Xs (enat j)\"", "lemma lnth_subset_Sup_upto_llist: \"j < llength Xs \\<Longrightarrow> lnth Xs j \\<subseteq> Sup_upto_llist Xs j\"", "lemma finite_Sup_llist_imp_Sup_upto_llist:\n  assumes \"finite X\" and \"X \\<subseteq> Sup_llist Xs\"\n  shows \"\\<exists>k. X \\<subseteq> Sup_upto_llist Xs (enat k)\"", "lemma Liminf_llist_LNil[simp]: \"Liminf_llist LNil = {}\"", "lemma Liminf_llist_LCons:\n  \"Liminf_llist (LCons X Xs) = (if lnull Xs then X else Liminf_llist Xs)\" (is \"?lhs = ?rhs\")", "lemma lfinite_Liminf_llist: \"lfinite Xs \\<Longrightarrow> Liminf_llist Xs = (if lnull Xs then {} else llast Xs)\"", "lemma Liminf_llist_ltl: \"\\<not> lnull (ltl Xs) \\<Longrightarrow> Liminf_llist Xs = Liminf_llist (ltl Xs)\"", "lemma Liminf_llist_subset_Sup_llist: \"Liminf_llist Xs \\<subseteq> Sup_llist Xs\"", "lemma image_Liminf_llist_subset: \"f ` Liminf_llist Ns \\<subseteq> Liminf_llist (lmap ((`) f) Ns)\"", "lemma Liminf_llist_imp_exists_index:\n  \"x \\<in> Liminf_llist Xs \\<Longrightarrow> \\<exists>i. enat i < llength Xs \\<and> x \\<in> lnth Xs i\"", "lemma not_Liminf_llist_imp_exists_index:\n  \"\\<not> lnull Xs \\<Longrightarrow> x \\<notin> Liminf_llist Xs \\<Longrightarrow> enat i < llength Xs \\<Longrightarrow>\n   (\\<exists>j. i \\<le> j \\<and> enat j < llength Xs \\<and> x \\<notin> lnth Xs j)\"", "lemma finite_subset_Liminf_llist_imp_exists_index:\n  assumes\n    nnil: \"\\<not> lnull Xs\" and\n    fin: \"finite X\" and\n    in_lim: \"X \\<subseteq> Liminf_llist Xs\"\n  shows \"\\<exists>i. enat i < llength Xs \\<and> X \\<subseteq> (\\<Inter>j \\<in> {j. i \\<le> j \\<and> enat j < llength Xs}. lnth Xs j)\"", "lemma Liminf_llist_lmap_image:\n  assumes f_inj: \"inj_on f (Sup_llist (lmap g xs))\"\n  shows \"Liminf_llist (lmap (\\<lambda>x. f ` g x) xs) = f ` Liminf_llist (lmap g xs)\" (is \"?lhs = ?rhs\")", "lemma Liminf_llist_lmap_union:\n  assumes \"\\<forall>x \\<in> lset xs. \\<forall>Y \\<in> lset xs. g x \\<inter> h Y = {}\"\n  shows \"Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs) =\n    Liminf_llist (lmap g xs) \\<union> Liminf_llist (lmap h xs)\" (is \"?lhs = ?rhs\")", "lemma Liminf_set_filter_commute:\n  \"Liminf_llist (lmap (\\<lambda>X. {x \\<in> X. p x}) Xs) = {x \\<in> Liminf_llist Xs. p x}\"", "lemma Liminf_upto_llist_eq_Liminf_llist_ltake:\n  \"Liminf_upto_llist Xs j = Liminf_llist (ltake (eSuc j) Xs)\"", "lemma Liminf_upto_llist_enat[simp]:\n  \"Liminf_upto_llist Xs (enat k) =\n   (if enat k < llength Xs then lnth Xs k else if lnull Xs then {} else llast Xs)\"", "lemma Liminf_upto_llist_infinity[simp]: \"Liminf_upto_llist Xs \\<infinity> = Liminf_llist Xs\"", "lemma Liminf_upto_llist_0[simp]:\n  \"Liminf_upto_llist Xs 0 = (if lnull Xs then {} else lhd Xs)\"", "lemma Liminf_upto_llist_eSuc[simp]:\n  \"Liminf_upto_llist Xs (eSuc j) =\n   (case j of\n      enat k \\<Rightarrow> Liminf_upto_llist Xs (enat (Suc k))\n    | \\<infinity> \\<Rightarrow> Liminf_llist Xs)\"", "lemma elem_Liminf_llist_imp_Liminf_upto_llist:\n  \"x \\<in> Liminf_llist Xs \\<Longrightarrow>\n   \\<exists>i < llength Xs. \\<forall>j. i \\<le> j \\<and> j < llength Xs \\<longrightarrow> x \\<in> Liminf_upto_llist Xs (enat j)\""], "translations": [["", "lemma less_llength_ltake: \"i < llength (ltake k Xs) \\<longleftrightarrow> i < k \\<and> i < llength Xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < llength (ltake k Xs)) = (i < k \\<and> i < llength Xs)", "by simp"], ["", "subsection \\<open>Supremum\\<close>"], ["", "definition Sup_llist :: \"'a set llist \\<Rightarrow> 'a set\" where\n  \"Sup_llist Xs = (\\<Union>i \\<in> {i. enat i < llength Xs}. lnth Xs i)\""], ["", "lemma lnth_subset_Sup_llist: \"enat i < llength Xs \\<Longrightarrow> lnth Xs i \\<subseteq> Sup_llist Xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat i < llength Xs \\<Longrightarrow> lnth Xs i \\<subseteq> Sup_llist Xs", "unfolding Sup_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat i < llength Xs \\<Longrightarrow>\n    lnth Xs i \\<subseteq> \\<Union> (lnth Xs ` {i. enat i < llength Xs})", "by auto"], ["", "lemma Sup_llist_imp_exists_index: \"x \\<in> Sup_llist Xs \\<Longrightarrow> \\<exists>i. enat i < llength Xs \\<and> x \\<in> lnth Xs i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Sup_llist Xs \\<Longrightarrow>\n    \\<exists>i. enat i < llength Xs \\<and> x \\<in> lnth Xs i", "unfolding Sup_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> (lnth Xs ` {i. enat i < llength Xs}) \\<Longrightarrow>\n    \\<exists>i. enat i < llength Xs \\<and> x \\<in> lnth Xs i", "by auto"], ["", "lemma exists_index_imp_Sup_llist: \"enat i < llength Xs \\<Longrightarrow> x \\<in> lnth Xs i \\<Longrightarrow> x \\<in> Sup_llist Xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>enat i < llength Xs; x \\<in> lnth Xs i\\<rbrakk>\n    \\<Longrightarrow> x \\<in> Sup_llist Xs", "unfolding Sup_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>enat i < llength Xs; x \\<in> lnth Xs i\\<rbrakk>\n    \\<Longrightarrow> x \\<in> \\<Union> (lnth Xs ` {i. enat i < llength Xs})", "by auto"], ["", "lemma Sup_llist_LNil[simp]: \"Sup_llist LNil = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_llist LNil = {}", "unfolding Sup_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (lnth LNil ` {i. enat i < llength LNil}) = {}", "by auto"], ["", "lemma Sup_llist_LCons[simp]: \"Sup_llist (LCons X Xs) = X \\<union> Sup_llist Xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_llist (LCons X Xs) = X \\<union> Sup_llist Xs", "unfolding Sup_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (lnth (LCons X Xs) ` {i. enat i < llength (LCons X Xs)}) =\n    X \\<union> \\<Union> (lnth Xs ` {i. enat i < llength Xs})", "proof (intro subset_antisym subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                (lnth (LCons X Xs) `\n                 {i. enat i < llength (LCons X Xs)}) \\<Longrightarrow>\n       x \\<in> X \\<union> \\<Union> (lnth Xs ` {i. enat i < llength Xs})\n 2. \\<And>x.\n       x \\<in> X \\<union>\n               \\<Union>\n                (lnth Xs ` {i. enat i < llength Xs}) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                (lnth (LCons X Xs) ` {i. enat i < llength (LCons X Xs)})", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                (lnth (LCons X Xs) `\n                 {i. enat i < llength (LCons X Xs)}) \\<Longrightarrow>\n       x \\<in> X \\<union> \\<Union> (lnth Xs ` {i. enat i < llength Xs})\n 2. \\<And>x.\n       x \\<in> X \\<union>\n               \\<Union>\n                (lnth Xs ` {i. enat i < llength Xs}) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                (lnth (LCons X Xs) ` {i. enat i < llength (LCons X Xs)})", "assume \"x \\<in> (\\<Union>i \\<in> {i. enat i < llength (LCons X Xs)}. lnth (LCons X Xs) i)\""], ["proof (state)\nthis:\n  x \\<in> \\<Union> (lnth (LCons X Xs) ` {i. enat i < llength (LCons X Xs)})\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                (lnth (LCons X Xs) `\n                 {i. enat i < llength (LCons X Xs)}) \\<Longrightarrow>\n       x \\<in> X \\<union> \\<Union> (lnth Xs ` {i. enat i < llength Xs})\n 2. \\<And>x.\n       x \\<in> X \\<union>\n               \\<Union>\n                (lnth Xs ` {i. enat i < llength Xs}) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                (lnth (LCons X Xs) ` {i. enat i < llength (LCons X Xs)})", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<Union> (lnth (LCons X Xs) ` {i. enat i < llength (LCons X Xs)})", "obtain i where len: \"enat i < llength (LCons X Xs)\" and nth: \"x \\<in> lnth (LCons X Xs) i\""], ["proof (prove)\nusing this:\n  x \\<in> \\<Union> (lnth (LCons X Xs) ` {i. enat i < llength (LCons X Xs)})\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>enat i < llength (LCons X Xs);\n         x \\<in> lnth (LCons X Xs) i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  enat i < llength (LCons X Xs)\n  x \\<in> lnth (LCons X Xs) i\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                (lnth (LCons X Xs) `\n                 {i. enat i < llength (LCons X Xs)}) \\<Longrightarrow>\n       x \\<in> X \\<union> \\<Union> (lnth Xs ` {i. enat i < llength Xs})\n 2. \\<And>x.\n       x \\<in> X \\<union>\n               \\<Union>\n                (lnth Xs ` {i. enat i < llength Xs}) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                (lnth (LCons X Xs) ` {i. enat i < llength (LCons X Xs)})", "from nth"], ["proof (chain)\npicking this:\n  x \\<in> lnth (LCons X Xs) i", "have \"x \\<in> X \\<or> i > 0 \\<and> x \\<in> lnth Xs (i - 1)\""], ["proof (prove)\nusing this:\n  x \\<in> lnth (LCons X Xs) i\n\ngoal (1 subgoal):\n 1. x \\<in> X \\<or> 0 < i \\<and> x \\<in> lnth Xs (i - 1)", "by (metis lnth_LCons' neq0_conv)"], ["proof (state)\nthis:\n  x \\<in> X \\<or> 0 < i \\<and> x \\<in> lnth Xs (i - 1)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                (lnth (LCons X Xs) `\n                 {i. enat i < llength (LCons X Xs)}) \\<Longrightarrow>\n       x \\<in> X \\<union> \\<Union> (lnth Xs ` {i. enat i < llength Xs})\n 2. \\<And>x.\n       x \\<in> X \\<union>\n               \\<Union>\n                (lnth Xs ` {i. enat i < llength Xs}) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                (lnth (LCons X Xs) ` {i. enat i < llength (LCons X Xs)})", "then"], ["proof (chain)\npicking this:\n  x \\<in> X \\<or> 0 < i \\<and> x \\<in> lnth Xs (i - 1)", "have \"x \\<in> X \\<or> (\\<exists>i. enat i < llength Xs \\<and> x \\<in> lnth Xs i)\""], ["proof (prove)\nusing this:\n  x \\<in> X \\<or> 0 < i \\<and> x \\<in> lnth Xs (i - 1)\n\ngoal (1 subgoal):\n 1. x \\<in> X \\<or>\n    (\\<exists>i. enat i < llength Xs \\<and> x \\<in> lnth Xs i)", "by (metis len Suc_pred' eSuc_enat iless_Suc_eq less_irrefl llength_LCons not_less order_trans)"], ["proof (state)\nthis:\n  x \\<in> X \\<or> (\\<exists>i. enat i < llength Xs \\<and> x \\<in> lnth Xs i)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                (lnth (LCons X Xs) `\n                 {i. enat i < llength (LCons X Xs)}) \\<Longrightarrow>\n       x \\<in> X \\<union> \\<Union> (lnth Xs ` {i. enat i < llength Xs})\n 2. \\<And>x.\n       x \\<in> X \\<union>\n               \\<Union>\n                (lnth Xs ` {i. enat i < llength Xs}) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                (lnth (LCons X Xs) ` {i. enat i < llength (LCons X Xs)})", "then"], ["proof (chain)\npicking this:\n  x \\<in> X \\<or> (\\<exists>i. enat i < llength Xs \\<and> x \\<in> lnth Xs i)", "show \"x \\<in> X \\<union> (\\<Union>i \\<in> {i. enat i < llength Xs}. lnth Xs i)\""], ["proof (prove)\nusing this:\n  x \\<in> X \\<or> (\\<exists>i. enat i < llength Xs \\<and> x \\<in> lnth Xs i)\n\ngoal (1 subgoal):\n 1. x \\<in> X \\<union> \\<Union> (lnth Xs ` {i. enat i < llength Xs})", "by blast"], ["proof (state)\nthis:\n  x \\<in> X \\<union> \\<Union> (lnth Xs ` {i. enat i < llength Xs})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<union>\n               \\<Union>\n                (lnth Xs ` {i. enat i < llength Xs}) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                (lnth (LCons X Xs) ` {i. enat i < llength (LCons X Xs)})", "qed ((auto)[], metis i0_lb lnth_0 zero_enat_def, metis Suc_ile_eq lnth_Suc_LCons)"], ["", "lemma lhd_subset_Sup_llist: \"\\<not> lnull Xs \\<Longrightarrow> lhd Xs \\<subseteq> Sup_llist Xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lnull Xs \\<Longrightarrow> lhd Xs \\<subseteq> Sup_llist Xs", "by (cases Xs) simp_all"], ["", "subsection \\<open>Supremum up-to\\<close>"], ["", "definition Sup_upto_llist :: \"'a set llist \\<Rightarrow> enat \\<Rightarrow> 'a set\" where\n  \"Sup_upto_llist Xs j = (\\<Union>i \\<in> {i. enat i < llength Xs \\<and> enat i \\<le> j}. lnth Xs i)\""], ["", "lemma Sup_upto_llist_eq_Sup_llist_ltake: \"Sup_upto_llist Xs j = Sup_llist (ltake (eSuc j) Xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_upto_llist Xs j = Sup_llist (ltake (eSuc j) Xs)", "unfolding Sup_upto_llist_def Sup_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (lnth Xs ` {i. enat i < llength Xs \\<and> enat i \\<le> j}) =\n    \\<Union>\n     (lnth (ltake (eSuc j) Xs) ` {i. enat i < llength (ltake (eSuc j) Xs)})", "by (smt Collect_cong Sup.SUP_cong iless_Suc_eq lnth_ltake less_llength_ltake mem_Collect_eq)"], ["", "lemma Sup_upto_llist_enat_0[simp]:\n  \"Sup_upto_llist Xs (enat 0) = (if lnull Xs then {} else lhd Xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_upto_llist Xs (enat 0) = (if lnull Xs then {} else lhd Xs)", "proof (cases \"lnull Xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lnull Xs \\<Longrightarrow>\n    Sup_upto_llist Xs (enat 0) = (if lnull Xs then {} else lhd Xs)\n 2. \\<not> lnull Xs \\<Longrightarrow>\n    Sup_upto_llist Xs (enat 0) = (if lnull Xs then {} else lhd Xs)", "case True"], ["proof (state)\nthis:\n  lnull Xs\n\ngoal (2 subgoals):\n 1. lnull Xs \\<Longrightarrow>\n    Sup_upto_llist Xs (enat 0) = (if lnull Xs then {} else lhd Xs)\n 2. \\<not> lnull Xs \\<Longrightarrow>\n    Sup_upto_llist Xs (enat 0) = (if lnull Xs then {} else lhd Xs)", "then"], ["proof (chain)\npicking this:\n  lnull Xs", "show ?thesis"], ["proof (prove)\nusing this:\n  lnull Xs\n\ngoal (1 subgoal):\n 1. Sup_upto_llist Xs (enat 0) = (if lnull Xs then {} else lhd Xs)", "unfolding Sup_upto_llist_def"], ["proof (prove)\nusing this:\n  lnull Xs\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (lnth Xs ` {i. enat i < llength Xs \\<and> enat i \\<le> enat 0}) =\n    (if lnull Xs then {} else lhd Xs)", "by auto"], ["proof (state)\nthis:\n  Sup_upto_llist Xs (enat 0) = (if lnull Xs then {} else lhd Xs)\n\ngoal (1 subgoal):\n 1. \\<not> lnull Xs \\<Longrightarrow>\n    Sup_upto_llist Xs (enat 0) = (if lnull Xs then {} else lhd Xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lnull Xs \\<Longrightarrow>\n    Sup_upto_llist Xs (enat 0) = (if lnull Xs then {} else lhd Xs)", "case False"], ["proof (state)\nthis:\n  \\<not> lnull Xs\n\ngoal (1 subgoal):\n 1. \\<not> lnull Xs \\<Longrightarrow>\n    Sup_upto_llist Xs (enat 0) = (if lnull Xs then {} else lhd Xs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_upto_llist Xs (enat 0) = (if lnull Xs then {} else lhd Xs)", "unfolding Sup_upto_llist_def image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     {y. \\<exists>x\\<in>{i. enat i < llength Xs \\<and> enat i \\<le> enat 0}.\n            y = lnth Xs x} =\n    (if lnull Xs then {} else lhd Xs)", "by (simp add: lhd_conv_lnth enat_0 enat_0_iff)"], ["proof (state)\nthis:\n  Sup_upto_llist Xs (enat 0) = (if lnull Xs then {} else lhd Xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Sup_upto_llist_Suc[simp]:\n  \"Sup_upto_llist Xs (enat (Suc j)) =\n   Sup_upto_llist Xs (enat j) \\<union> (if enat (Suc j) < llength Xs then lnth Xs (Suc j) else {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_upto_llist Xs (enat (Suc j)) =\n    Sup_upto_llist Xs (enat j) \\<union>\n    (if enat (Suc j) < llength Xs then lnth Xs (Suc j) else {})", "unfolding Sup_upto_llist_def image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     {y. \\<exists>x\\<in>{i. enat i < llength Xs \\<and>\n                            enat i \\<le> enat (Suc j)}.\n            y = lnth Xs x} =\n    \\<Union>\n     {y. \\<exists>x\\<in>{i. enat i < llength Xs \\<and> enat i \\<le> enat j}.\n            y = lnth Xs x} \\<union>\n    (if enat (Suc j) < llength Xs then lnth Xs (Suc j) else {})", "by (auto intro: le_SucI elim: le_SucE)"], ["", "lemma Sup_upto_llist_infinity[simp]: \"Sup_upto_llist Xs \\<infinity> = Sup_llist Xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_upto_llist Xs \\<infinity> = Sup_llist Xs", "unfolding Sup_upto_llist_def Sup_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (lnth Xs ` {i. enat i < llength Xs \\<and> enat i \\<le> \\<infinity>}) =\n    \\<Union> (lnth Xs ` {i. enat i < llength Xs})", "by simp"], ["", "lemma Sup_upto_llist_0[simp]: \"Sup_upto_llist Xs 0 = (if lnull Xs then {} else lhd Xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_upto_llist Xs 0 = (if lnull Xs then {} else lhd Xs)", "unfolding zero_enat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_upto_llist Xs (enat 0) = (if lnull Xs then {} else lhd Xs)", "by (rule Sup_upto_llist_enat_0)"], ["", "lemma Sup_upto_llist_eSuc[simp]:\n  \"Sup_upto_llist Xs (eSuc j) =\n   (case j of\n      enat k \\<Rightarrow> Sup_upto_llist Xs (enat (Suc k))\n    | \\<infinity> \\<Rightarrow> Sup_llist Xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_upto_llist Xs (eSuc j) =\n    (case j of enat k \\<Rightarrow> Sup_upto_llist Xs (enat (Suc k))\n     | \\<infinity> \\<Rightarrow> Sup_llist Xs)", "by (auto simp: eSuc_enat split: enat.split)"], ["", "lemma Sup_upto_llist_mono[simp]: \"j \\<le> k \\<Longrightarrow> Sup_upto_llist Xs j \\<subseteq> Sup_upto_llist Xs k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<le> k \\<Longrightarrow>\n    Sup_upto_llist Xs j \\<subseteq> Sup_upto_llist Xs k", "unfolding Sup_upto_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<le> k \\<Longrightarrow>\n    \\<Union> (lnth Xs ` {i. enat i < llength Xs \\<and> enat i \\<le> j})\n    \\<subseteq> \\<Union>\n                 (lnth Xs ` {i. enat i < llength Xs \\<and> enat i \\<le> k})", "by auto"], ["", "lemma Sup_upto_llist_subset_Sup_llist: \"Sup_upto_llist Xs j \\<subseteq> Sup_llist Xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_upto_llist Xs j \\<subseteq> Sup_llist Xs", "unfolding Sup_llist_def Sup_upto_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (lnth Xs ` {i. enat i < llength Xs \\<and> enat i \\<le> j})\n    \\<subseteq> \\<Union> (lnth Xs ` {i. enat i < llength Xs})", "by auto"], ["", "lemma elem_Sup_llist_imp_Sup_upto_llist:\n  \"x \\<in> Sup_llist Xs \\<Longrightarrow> \\<exists>j < llength Xs. x \\<in> Sup_upto_llist Xs (enat j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Sup_llist Xs \\<Longrightarrow>\n    \\<exists>j.\n       enat j < llength Xs \\<and> x \\<in> Sup_upto_llist Xs (enat j)", "unfolding Sup_llist_def Sup_upto_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> (lnth Xs ` {i. enat i < llength Xs}) \\<Longrightarrow>\n    \\<exists>j.\n       enat j < llength Xs \\<and>\n       x \\<in> \\<Union>\n                (lnth Xs `\n                 {i. enat i < llength Xs \\<and> enat i \\<le> enat j})", "by blast"], ["", "lemma lnth_subset_Sup_upto_llist: \"j < llength Xs \\<Longrightarrow> lnth Xs j \\<subseteq> Sup_upto_llist Xs j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat j < llength Xs \\<Longrightarrow>\n    lnth Xs j \\<subseteq> Sup_upto_llist Xs (enat j)", "unfolding Sup_upto_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat j < llength Xs \\<Longrightarrow>\n    lnth Xs j\n    \\<subseteq> \\<Union>\n                 (lnth Xs `\n                  {i. enat i < llength Xs \\<and> enat i \\<le> enat j})", "by auto"], ["", "lemma finite_Sup_llist_imp_Sup_upto_llist:\n  assumes \"finite X\" and \"X \\<subseteq> Sup_llist Xs\"\n  shows \"\\<exists>k. X \\<subseteq> Sup_upto_llist Xs (enat k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. X \\<subseteq> Sup_upto_llist Xs (enat k)", "using assms"], ["proof (prove)\nusing this:\n  finite X\n  X \\<subseteq> Sup_llist Xs\n\ngoal (1 subgoal):\n 1. \\<exists>k. X \\<subseteq> Sup_upto_llist Xs (enat k)", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. {} \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n    \\<exists>k. {} \\<subseteq> Sup_upto_llist Xs (enat k)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n        \\<exists>k. F \\<subseteq> Sup_upto_llist Xs (enat k);\n        insert x F \\<subseteq> Sup_llist Xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k.\n                            insert x F\n                            \\<subseteq> Sup_upto_llist Xs (enat k)", "case (insert x X)"], ["proof (state)\nthis:\n  finite X\n  x \\<notin> X\n  X \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n  \\<exists>k. X \\<subseteq> Sup_upto_llist Xs (enat k)\n  insert x X \\<subseteq> Sup_llist Xs\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n    \\<exists>k. {} \\<subseteq> Sup_upto_llist Xs (enat k)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n        \\<exists>k. F \\<subseteq> Sup_upto_llist Xs (enat k);\n        insert x F \\<subseteq> Sup_llist Xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k.\n                            insert x F\n                            \\<subseteq> Sup_upto_llist Xs (enat k)", "then"], ["proof (chain)\npicking this:\n  finite X\n  x \\<notin> X\n  X \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n  \\<exists>k. X \\<subseteq> Sup_upto_llist Xs (enat k)\n  insert x X \\<subseteq> Sup_llist Xs", "have x: \"x \\<in> Sup_llist Xs\" and X: \"X \\<subseteq> Sup_llist Xs\""], ["proof (prove)\nusing this:\n  finite X\n  x \\<notin> X\n  X \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n  \\<exists>k. X \\<subseteq> Sup_upto_llist Xs (enat k)\n  insert x X \\<subseteq> Sup_llist Xs\n\ngoal (1 subgoal):\n 1. x \\<in> Sup_llist Xs &&& X \\<subseteq> Sup_llist Xs", "by simp+"], ["proof (state)\nthis:\n  x \\<in> Sup_llist Xs\n  X \\<subseteq> Sup_llist Xs\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n    \\<exists>k. {} \\<subseteq> Sup_upto_llist Xs (enat k)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n        \\<exists>k. F \\<subseteq> Sup_upto_llist Xs (enat k);\n        insert x F \\<subseteq> Sup_llist Xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k.\n                            insert x F\n                            \\<subseteq> Sup_upto_llist Xs (enat k)", "from x"], ["proof (chain)\npicking this:\n  x \\<in> Sup_llist Xs", "obtain k where k: \"x \\<in> Sup_upto_llist Xs (enat k)\""], ["proof (prove)\nusing this:\n  x \\<in> Sup_llist Xs\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        x \\<in> Sup_upto_llist Xs (enat k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using elem_Sup_llist_imp_Sup_upto_llist"], ["proof (prove)\nusing this:\n  x \\<in> Sup_llist Xs\n  ?x \\<in> Sup_llist ?Xs \\<Longrightarrow>\n  \\<exists>j.\n     enat j < llength ?Xs \\<and> ?x \\<in> Sup_upto_llist ?Xs (enat j)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        x \\<in> Sup_upto_llist Xs (enat k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  x \\<in> Sup_upto_llist Xs (enat k)\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n    \\<exists>k. {} \\<subseteq> Sup_upto_llist Xs (enat k)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n        \\<exists>k. F \\<subseteq> Sup_upto_llist Xs (enat k);\n        insert x F \\<subseteq> Sup_llist Xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k.\n                            insert x F\n                            \\<subseteq> Sup_upto_llist Xs (enat k)", "from X"], ["proof (chain)\npicking this:\n  X \\<subseteq> Sup_llist Xs", "obtain k' where k': \"X \\<subseteq> Sup_upto_llist Xs (enat k')\""], ["proof (prove)\nusing this:\n  X \\<subseteq> Sup_llist Xs\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        X \\<subseteq> Sup_upto_llist Xs (enat k') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using insert.hyps(3)"], ["proof (prove)\nusing this:\n  X \\<subseteq> Sup_llist Xs\n  X \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n  \\<exists>k. X \\<subseteq> Sup_upto_llist Xs (enat k)\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        X \\<subseteq> Sup_upto_llist Xs (enat k') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  X \\<subseteq> Sup_upto_llist Xs (enat k')\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n    \\<exists>k. {} \\<subseteq> Sup_upto_llist Xs (enat k)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n        \\<exists>k. F \\<subseteq> Sup_upto_llist Xs (enat k);\n        insert x F \\<subseteq> Sup_llist Xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k.\n                            insert x F\n                            \\<subseteq> Sup_upto_llist Xs (enat k)", "have \"insert x X \\<subseteq> Sup_upto_llist Xs (max k k')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert x X \\<subseteq> Sup_upto_llist Xs (enat (max k k'))", "using k k'"], ["proof (prove)\nusing this:\n  x \\<in> Sup_upto_llist Xs (enat k)\n  X \\<subseteq> Sup_upto_llist Xs (enat k')\n\ngoal (1 subgoal):\n 1. insert x X \\<subseteq> Sup_upto_llist Xs (enat (max k k'))", "by (metis (mono_tags) Sup_upto_llist_mono enat_ord_simps(1) insert_subset\n      max.cobounded1 max.cobounded2 subset_iff)"], ["proof (state)\nthis:\n  insert x X \\<subseteq> Sup_upto_llist Xs (enat (max k k'))\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n    \\<exists>k. {} \\<subseteq> Sup_upto_llist Xs (enat k)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n        \\<exists>k. F \\<subseteq> Sup_upto_llist Xs (enat k);\n        insert x F \\<subseteq> Sup_llist Xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k.\n                            insert x F\n                            \\<subseteq> Sup_upto_llist Xs (enat k)", "then"], ["proof (chain)\npicking this:\n  insert x X \\<subseteq> Sup_upto_llist Xs (enat (max k k'))", "show ?case"], ["proof (prove)\nusing this:\n  insert x X \\<subseteq> Sup_upto_llist Xs (enat (max k k'))\n\ngoal (1 subgoal):\n 1. \\<exists>k. insert x X \\<subseteq> Sup_upto_llist Xs (enat k)", "by fast"], ["proof (state)\nthis:\n  \\<exists>k. insert x X \\<subseteq> Sup_upto_llist Xs (enat k)\n\ngoal (1 subgoal):\n 1. {} \\<subseteq> Sup_llist Xs \\<Longrightarrow>\n    \\<exists>k. {} \\<subseteq> Sup_upto_llist Xs (enat k)", "qed simp"], ["", "subsection \\<open>Liminf\\<close>"], ["", "definition Liminf_llist :: \"'a set llist \\<Rightarrow> 'a set\" where\n  \"Liminf_llist Xs =\n   (\\<Union>i \\<in> {i. enat i < llength Xs}. \\<Inter>j \\<in> {j. i \\<le> j \\<and> enat j < llength Xs}. lnth Xs j)\""], ["", "lemma Liminf_llist_LNil[simp]: \"Liminf_llist LNil = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist LNil = {}", "unfolding Liminf_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>i\\<in>{i. enat i < llength LNil}.\n        \\<Inter>\n         (lnth LNil ` {j. i \\<le> j \\<and> enat j < llength LNil})) =\n    {}", "by simp"], ["", "lemma Liminf_llist_LCons:\n  \"Liminf_llist (LCons X Xs) = (if lnull Xs then X else Liminf_llist Xs)\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist (LCons X Xs) = (if lnull Xs then X else Liminf_llist Xs)", "proof (cases \"lnull Xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lnull Xs \\<Longrightarrow>\n    Liminf_llist (LCons X Xs) = (if lnull Xs then X else Liminf_llist Xs)\n 2. \\<not> lnull Xs \\<Longrightarrow>\n    Liminf_llist (LCons X Xs) = (if lnull Xs then X else Liminf_llist Xs)", "case nnull: False"], ["proof (state)\nthis:\n  \\<not> lnull Xs\n\ngoal (2 subgoals):\n 1. lnull Xs \\<Longrightarrow>\n    Liminf_llist (LCons X Xs) = (if lnull Xs then X else Liminf_llist Xs)\n 2. \\<not> lnull Xs \\<Longrightarrow>\n    Liminf_llist (LCons X Xs) = (if lnull Xs then X else Liminf_llist Xs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist (LCons X Xs) = (if lnull Xs then X else Liminf_llist Xs)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Liminf_llist (LCons X Xs)\n    \\<subseteq> (if lnull Xs then X else Liminf_llist Xs)\n 2. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. Liminf_llist (LCons X Xs)\n    \\<subseteq> (if lnull Xs then X else Liminf_llist Xs)\n 2. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. Liminf_llist (LCons X Xs)\n    \\<subseteq> (if lnull Xs then X else Liminf_llist Xs)\n 2. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "assume \"\\<exists>i. enat i \\<le> llength Xs\n        \\<and> (\\<forall>j. i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow> x \\<in> lnth (LCons X Xs) j)\""], ["proof (state)\nthis:\n  \\<exists>i.\n     enat i \\<le> llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n         x \\<in> lnth (LCons X Xs) j)\n\ngoal (2 subgoals):\n 1. Liminf_llist (LCons X Xs)\n    \\<subseteq> (if lnull Xs then X else Liminf_llist Xs)\n 2. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i.\n     enat i \\<le> llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n         x \\<in> lnth (LCons X Xs) j)", "have \"\\<exists>i. enat (Suc i) \\<le> llength Xs\n        \\<and> (\\<forall>j. Suc i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow> x \\<in> lnth (LCons X Xs) j)\""], ["proof (prove)\nusing this:\n  \\<exists>i.\n     enat i \\<le> llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n         x \\<in> lnth (LCons X Xs) j)\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       enat (Suc i) \\<le> llength Xs \\<and>\n       (\\<forall>j.\n           Suc i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n           x \\<in> lnth (LCons X Xs) j)", "by (cases \"llength Xs\",\n            metis not_lnull_conv[THEN iffD1, OF nnull] Suc_le_D eSuc_enat eSuc_ile_mono\n              llength_LCons not_less_eq_eq zero_enat_def zero_le,\n            metis Suc_leD enat_ord_code(3))"], ["proof (state)\nthis:\n  \\<exists>i.\n     enat (Suc i) \\<le> llength Xs \\<and>\n     (\\<forall>j.\n         Suc i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n         x \\<in> lnth (LCons X Xs) j)\n\ngoal (2 subgoals):\n 1. Liminf_llist (LCons X Xs)\n    \\<subseteq> (if lnull Xs then X else Liminf_llist Xs)\n 2. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i.\n     enat (Suc i) \\<le> llength Xs \\<and>\n     (\\<forall>j.\n         Suc i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n         x \\<in> lnth (LCons X Xs) j)", "have \"\\<exists>i. enat i < llength Xs \\<and> (\\<forall>j. i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow> x \\<in> lnth Xs j)\""], ["proof (prove)\nusing this:\n  \\<exists>i.\n     enat (Suc i) \\<le> llength Xs \\<and>\n     (\\<forall>j.\n         Suc i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n         x \\<in> lnth (LCons X Xs) j)\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       enat i < llength Xs \\<and>\n       (\\<forall>j.\n           i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow>\n           x \\<in> lnth Xs j)", "by (metis Suc_ile_eq Suc_n_not_le_n lift_Suc_mono_le lnth_Suc_LCons nat_le_linear)"], ["proof (state)\nthis:\n  \\<exists>i.\n     enat i < llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow>\n         x \\<in> lnth Xs j)\n\ngoal (2 subgoals):\n 1. Liminf_llist (LCons X Xs)\n    \\<subseteq> (if lnull Xs then X else Liminf_llist Xs)\n 2. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "}"], ["proof (state)\nthis:\n  \\<exists>i.\n     enat i \\<le> llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n         ?x2 \\<in> lnth (LCons X Xs) j) \\<Longrightarrow>\n  \\<exists>i.\n     enat i < llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow>\n         ?x2 \\<in> lnth Xs j)\n\ngoal (2 subgoals):\n 1. Liminf_llist (LCons X Xs)\n    \\<subseteq> (if lnull Xs then X else Liminf_llist Xs)\n 2. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i.\n     enat i \\<le> llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n         ?x2 \\<in> lnth (LCons X Xs) j) \\<Longrightarrow>\n  \\<exists>i.\n     enat i < llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow>\n         ?x2 \\<in> lnth Xs j)", "show \"?lhs \\<subseteq> ?rhs\""], ["proof (prove)\nusing this:\n  \\<exists>i.\n     enat i \\<le> llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n         ?x2 \\<in> lnth (LCons X Xs) j) \\<Longrightarrow>\n  \\<exists>i.\n     enat i < llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow>\n         ?x2 \\<in> lnth Xs j)\n\ngoal (1 subgoal):\n 1. Liminf_llist (LCons X Xs)\n    \\<subseteq> (if lnull Xs then X else Liminf_llist Xs)", "by (simp add: Liminf_llist_def nnull) (rule subsetI, simp)"], ["proof (state)\nthis:\n  Liminf_llist (LCons X Xs)\n  \\<subseteq> (if lnull Xs then X else Liminf_llist Xs)\n\ngoal (1 subgoal):\n 1. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "{"], ["proof (state)\nthis:\n  Liminf_llist (LCons X Xs)\n  \\<subseteq> (if lnull Xs then X else Liminf_llist Xs)\n\ngoal (1 subgoal):\n 1. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "assume \"\\<exists>i. enat i < llength Xs \\<and> (\\<forall>j. i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow> x \\<in> lnth Xs j)\""], ["proof (state)\nthis:\n  \\<exists>i.\n     enat i < llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow>\n         x \\<in> lnth Xs j)\n\ngoal (1 subgoal):\n 1. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i.\n     enat i < llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow>\n         x \\<in> lnth Xs j)", "obtain i where\n        i: \"enat i < llength Xs\" and\n        j: \"\\<forall>j. i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow> x \\<in> lnth Xs j\""], ["proof (prove)\nusing this:\n  \\<exists>i.\n     enat i < llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow>\n         x \\<in> lnth Xs j)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>enat i < llength Xs;\n         \\<forall>j.\n            i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow>\n            x \\<in> lnth Xs j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  enat i < llength Xs\n  \\<forall>j.\n     i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow>\n     x \\<in> lnth Xs j\n\ngoal (1 subgoal):\n 1. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "have \"enat (Suc i) \\<le> llength Xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc i) \\<le> llength Xs", "using i"], ["proof (prove)\nusing this:\n  enat i < llength Xs\n\ngoal (1 subgoal):\n 1. enat (Suc i) \\<le> llength Xs", "by (simp add: Suc_ile_eq)"], ["proof (state)\nthis:\n  enat (Suc i) \\<le> llength Xs\n\ngoal (1 subgoal):\n 1. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "moreover"], ["proof (state)\nthis:\n  enat (Suc i) \\<le> llength Xs\n\ngoal (1 subgoal):\n 1. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "have \"\\<forall>j. Suc i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow> x \\<in> lnth (LCons X Xs) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       Suc i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n       x \\<in> lnth (LCons X Xs) j", "using Suc_ile_eq Suc_le_D j"], ["proof (prove)\nusing this:\n  (enat (Suc ?m) \\<le> ?n) = (enat ?m < ?n)\n  Suc ?n \\<le> ?m' \\<Longrightarrow> \\<exists>m. ?m' = Suc m\n  \\<forall>j.\n     i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow>\n     x \\<in> lnth Xs j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       Suc i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n       x \\<in> lnth (LCons X Xs) j", "by force"], ["proof (state)\nthis:\n  \\<forall>j.\n     Suc i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n     x \\<in> lnth (LCons X Xs) j\n\ngoal (1 subgoal):\n 1. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "ultimately"], ["proof (chain)\npicking this:\n  enat (Suc i) \\<le> llength Xs\n  \\<forall>j.\n     Suc i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n     x \\<in> lnth (LCons X Xs) j", "have \"\\<exists>i. enat i \\<le> llength Xs \\<and> (\\<forall>j. i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n        x \\<in> lnth (LCons X Xs) j)\""], ["proof (prove)\nusing this:\n  enat (Suc i) \\<le> llength Xs\n  \\<forall>j.\n     Suc i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n     x \\<in> lnth (LCons X Xs) j\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       enat i \\<le> llength Xs \\<and>\n       (\\<forall>j.\n           i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n           x \\<in> lnth (LCons X Xs) j)", "by blast"], ["proof (state)\nthis:\n  \\<exists>i.\n     enat i \\<le> llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n         x \\<in> lnth (LCons X Xs) j)\n\ngoal (1 subgoal):\n 1. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "}"], ["proof (state)\nthis:\n  \\<exists>i.\n     enat i < llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow>\n         ?x2 \\<in> lnth Xs j) \\<Longrightarrow>\n  \\<exists>i.\n     enat i \\<le> llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n         ?x2 \\<in> lnth (LCons X Xs) j)\n\ngoal (1 subgoal):\n 1. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i.\n     enat i < llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow>\n         ?x2 \\<in> lnth Xs j) \\<Longrightarrow>\n  \\<exists>i.\n     enat i \\<le> llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n         ?x2 \\<in> lnth (LCons X Xs) j)", "show \"?rhs \\<subseteq> ?lhs\""], ["proof (prove)\nusing this:\n  \\<exists>i.\n     enat i < llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j < llength Xs \\<longrightarrow>\n         ?x2 \\<in> lnth Xs j) \\<Longrightarrow>\n  \\<exists>i.\n     enat i \\<le> llength Xs \\<and>\n     (\\<forall>j.\n         i \\<le> j \\<and> enat j \\<le> llength Xs \\<longrightarrow>\n         ?x2 \\<in> lnth (LCons X Xs) j)\n\ngoal (1 subgoal):\n 1. (if lnull Xs then X else Liminf_llist Xs)\n    \\<subseteq> Liminf_llist (LCons X Xs)", "by (simp add: Liminf_llist_def nnull) (rule subsetI, simp)"], ["proof (state)\nthis:\n  (if lnull Xs then X else Liminf_llist Xs)\n  \\<subseteq> Liminf_llist (LCons X Xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Liminf_llist (LCons X Xs) = (if lnull Xs then X else Liminf_llist Xs)\n\ngoal (1 subgoal):\n 1. lnull Xs \\<Longrightarrow>\n    Liminf_llist (LCons X Xs) = (if lnull Xs then X else Liminf_llist Xs)", "qed (simp add: Liminf_llist_def enat_0_iff(1))"], ["", "lemma lfinite_Liminf_llist: \"lfinite Xs \\<Longrightarrow> Liminf_llist Xs = (if lnull Xs then {} else llast Xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfinite Xs \\<Longrightarrow>\n    Liminf_llist Xs = (if lnull Xs then {} else llast Xs)", "proof (induction rule: lfinite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       lnull xs \\<Longrightarrow>\n       Liminf_llist xs = (if lnull xs then {} else llast xs)\n 2. \\<And>xs.\n       \\<lbrakk>lfinite xs; \\<not> lnull xs;\n        Liminf_llist (ltl xs) =\n        (if lnull (ltl xs) then {} else llast (ltl xs))\\<rbrakk>\n       \\<Longrightarrow> Liminf_llist xs =\n                         (if lnull xs then {} else llast xs)", "case (LCons xs)"], ["proof (state)\nthis:\n  lfinite xs\n  \\<not> lnull xs\n  Liminf_llist (ltl xs) = (if lnull (ltl xs) then {} else llast (ltl xs))\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       lnull xs \\<Longrightarrow>\n       Liminf_llist xs = (if lnull xs then {} else llast xs)\n 2. \\<And>xs.\n       \\<lbrakk>lfinite xs; \\<not> lnull xs;\n        Liminf_llist (ltl xs) =\n        (if lnull (ltl xs) then {} else llast (ltl xs))\\<rbrakk>\n       \\<Longrightarrow> Liminf_llist xs =\n                         (if lnull xs then {} else llast xs)", "then"], ["proof (chain)\npicking this:\n  lfinite xs\n  \\<not> lnull xs\n  Liminf_llist (ltl xs) = (if lnull (ltl xs) then {} else llast (ltl xs))", "obtain y ys where\n    xs: \"xs = LCons y ys\""], ["proof (prove)\nusing this:\n  lfinite xs\n  \\<not> lnull xs\n  Liminf_llist (ltl xs) = (if lnull (ltl xs) then {} else llast (ltl xs))\n\ngoal (1 subgoal):\n 1. (\\<And>y ys. xs = LCons y ys \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson not_lnull_conv)"], ["proof (state)\nthis:\n  xs = LCons y ys\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       lnull xs \\<Longrightarrow>\n       Liminf_llist xs = (if lnull xs then {} else llast xs)\n 2. \\<And>xs.\n       \\<lbrakk>lfinite xs; \\<not> lnull xs;\n        Liminf_llist (ltl xs) =\n        (if lnull (ltl xs) then {} else llast (ltl xs))\\<rbrakk>\n       \\<Longrightarrow> Liminf_llist xs =\n                         (if lnull xs then {} else llast xs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist xs = (if lnull xs then {} else llast xs)", "unfolding xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist (LCons y ys) =\n    (if lnull (LCons y ys) then {} else llast (LCons y ys))", "by (simp add: Liminf_llist_LCons LCons.IH[unfolded xs, simplified] llast_LCons)"], ["proof (state)\nthis:\n  Liminf_llist xs = (if lnull xs then {} else llast xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       lnull xs \\<Longrightarrow>\n       Liminf_llist xs = (if lnull xs then {} else llast xs)", "qed (simp add: Liminf_llist_def)"], ["", "lemma Liminf_llist_ltl: \"\\<not> lnull (ltl Xs) \\<Longrightarrow> Liminf_llist Xs = Liminf_llist (ltl Xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl Xs) \\<Longrightarrow>\n    Liminf_llist Xs = Liminf_llist (ltl Xs)", "by (metis Liminf_llist_LCons lhd_LCons_ltl lnull_ltlI)"], ["", "lemma Liminf_llist_subset_Sup_llist: \"Liminf_llist Xs \\<subseteq> Sup_llist Xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist Xs \\<subseteq> Sup_llist Xs", "unfolding Liminf_llist_def Sup_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>i\\<in>{i. enat i < llength Xs}.\n        \\<Inter> (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs}))\n    \\<subseteq> \\<Union> (lnth Xs ` {i. enat i < llength Xs})", "by fast"], ["", "lemma image_Liminf_llist_subset: \"f ` Liminf_llist Ns \\<subseteq> Liminf_llist (lmap ((`) f) Ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` Liminf_llist Ns \\<subseteq> Liminf_llist (lmap ((`) f) Ns)", "unfolding Liminf_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f `\n    (\\<Union>i\\<in>{i. enat i < llength Ns}.\n        \\<Inter> (lnth Ns ` {j. i \\<le> j \\<and> enat j < llength Ns}))\n    \\<subseteq> (\\<Union>i\\<in>{i. enat i < llength (lmap ((`) f) Ns)}.\n                    \\<Inter>\n                     (lnth (lmap ((`) f) Ns) `\n                      {j. i \\<le> j \\<and>\n                          enat j < llength (lmap ((`) f) Ns)}))", "by auto"], ["", "lemma Liminf_llist_imp_exists_index:\n  \"x \\<in> Liminf_llist Xs \\<Longrightarrow> \\<exists>i. enat i < llength Xs \\<and> x \\<in> lnth Xs i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Liminf_llist Xs \\<Longrightarrow>\n    \\<exists>i. enat i < llength Xs \\<and> x \\<in> lnth Xs i", "unfolding Liminf_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>i\\<in>{i. enat i < llength Xs}.\n                \\<Inter>\n                 (lnth Xs `\n                  {j. i \\<le> j \\<and>\n                      enat j < llength Xs})) \\<Longrightarrow>\n    \\<exists>i. enat i < llength Xs \\<and> x \\<in> lnth Xs i", "by auto"], ["", "lemma not_Liminf_llist_imp_exists_index:\n  \"\\<not> lnull Xs \\<Longrightarrow> x \\<notin> Liminf_llist Xs \\<Longrightarrow> enat i < llength Xs \\<Longrightarrow>\n   (\\<exists>j. i \\<le> j \\<and> enat j < llength Xs \\<and> x \\<notin> lnth Xs j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> lnull Xs; x \\<notin> Liminf_llist Xs;\n     enat i < llength Xs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>j\\<ge>i.\n                         enat j < llength Xs \\<and> x \\<notin> lnth Xs j", "unfolding Liminf_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> lnull Xs;\n     x \\<notin> (\\<Union>i\\<in>{i. enat i < llength Xs}.\n                    \\<Inter>\n                     (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs}));\n     enat i < llength Xs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>j\\<ge>i.\n                         enat j < llength Xs \\<and> x \\<notin> lnth Xs j", "by auto"], ["", "lemma finite_subset_Liminf_llist_imp_exists_index:\n  assumes\n    nnil: \"\\<not> lnull Xs\" and\n    fin: \"finite X\" and\n    in_lim: \"X \\<subseteq> Liminf_llist Xs\"\n  shows \"\\<exists>i. enat i < llength Xs \\<and> X \\<subseteq> (\\<Inter>j \\<in> {j. i \\<le> j \\<and> enat j < llength Xs}. lnth Xs j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "proof (cases \"X = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. X = {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})\n 2. X \\<noteq> {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "case True"], ["proof (state)\nthis:\n  X = {}\n\ngoal (2 subgoals):\n 1. X = {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})\n 2. X \\<noteq> {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "then"], ["proof (chain)\npicking this:\n  X = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  X = {}\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "using nnil"], ["proof (prove)\nusing this:\n  X = {}\n  \\<not> lnull Xs\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "by (auto intro: exI[of _ 0] simp: zero_enat_def[symmetric])"], ["proof (state)\nthis:\n  \\<exists>i.\n     enat i < llength Xs \\<and>\n     X \\<subseteq> \\<Inter>\n                    (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "case nemp: False"], ["proof (state)\nthis:\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "have in_lim':\n      \"\\<forall>x \\<in> X. \\<exists>i. enat i < llength Xs \\<and> x \\<in> (\\<Inter>j \\<in> {j. i \\<le> j \\<and> enat j < llength Xs}. lnth Xs j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X.\n       \\<exists>i.\n          enat i < llength Xs \\<and>\n          x \\<in> \\<Inter>\n                   (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "using in_lim[unfolded Liminf_llist_def] in_mono"], ["proof (prove)\nusing this:\n  X \\<subseteq> (\\<Union>i\\<in>{i. enat i < llength Xs}.\n                    \\<Inter>\n                     (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs}))\n  ?A \\<subseteq> ?B \\<Longrightarrow>\n  ?x \\<in> ?A \\<longrightarrow> ?x \\<in> ?B\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X.\n       \\<exists>i.\n          enat i < llength Xs \\<and>\n          x \\<in> \\<Inter>\n                   (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X.\n     \\<exists>i.\n        enat i < llength Xs \\<and>\n        x \\<in> \\<Inter>\n                 (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "obtain i_of where\n      i_of_lt: \"\\<forall>x \\<in> X. enat (i_of x) < llength Xs\" and\n      in_inter: \"\\<forall>x \\<in> X. x \\<in> (\\<Inter>j \\<in> {j. i_of x \\<le> j \\<and> enat j < llength Xs}. lnth Xs j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i_of.\n        \\<lbrakk>\\<forall>x\\<in>X. enat (i_of x) < llength Xs;\n         \\<forall>x\\<in>X.\n            x \\<in> \\<Inter>\n                     (lnth Xs `\n                      {j. i_of x \\<le> j \\<and>\n                          enat j < llength Xs})\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using bchoice[OF in_lim']"], ["proof (prove)\nusing this:\n  \\<exists>f.\n     \\<forall>x\\<in>X.\n        enat (f x) < llength Xs \\<and>\n        x \\<in> \\<Inter>\n                 (lnth Xs ` {j. f x \\<le> j \\<and> enat j < llength Xs})\n\ngoal (1 subgoal):\n 1. (\\<And>i_of.\n        \\<lbrakk>\\<forall>x\\<in>X. enat (i_of x) < llength Xs;\n         \\<forall>x\\<in>X.\n            x \\<in> \\<Inter>\n                     (lnth Xs `\n                      {j. i_of x \\<le> j \\<and>\n                          enat j < llength Xs})\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X. enat (i_of x) < llength Xs\n  \\<forall>x\\<in>X.\n     x \\<in> \\<Inter>\n              (lnth Xs ` {j. i_of x \\<le> j \\<and> enat j < llength Xs})\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "define i_max where\n      \"i_max = Max (i_of ` X)\""], ["proof (state)\nthis:\n  i_max = Max (i_of ` X)\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "have \"i_max \\<in> i_of ` X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_max \\<in> i_of ` X", "by (simp add: fin i_max_def nemp)"], ["proof (state)\nthis:\n  i_max \\<in> i_of ` X\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "then"], ["proof (chain)\npicking this:\n  i_max \\<in> i_of ` X", "obtain x_max where\n      x_max_in: \"x_max \\<in> X\" and\n      i_max_is: \"i_max = i_of x_max\""], ["proof (prove)\nusing this:\n  i_max \\<in> i_of ` X\n\ngoal (1 subgoal):\n 1. (\\<And>x_max.\n        \\<lbrakk>x_max \\<in> X; i_max = i_of x_max\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding i_max_def"], ["proof (prove)\nusing this:\n  Max (i_of ` X) \\<in> i_of ` X\n\ngoal (1 subgoal):\n 1. (\\<And>x_max.\n        \\<lbrakk>x_max \\<in> X; Max (i_of ` X) = i_of x_max\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x_max \\<in> X\n  i_max = i_of x_max\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "have le_i_max: \"\\<forall>x \\<in> X. i_of x \\<le> i_max\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. i_of x \\<le> i_max", "unfolding i_max_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. i_of x \\<le> Max (i_of ` X)", "by (simp add: fin)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X. i_of x \\<le> i_max\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "have \"enat i_max < llength Xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat i_max < llength Xs", "using i_of_lt x_max_in i_max_is"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>X. enat (i_of x) < llength Xs\n  x_max \\<in> X\n  i_max = i_of x_max\n\ngoal (1 subgoal):\n 1. enat i_max < llength Xs", "by auto"], ["proof (state)\nthis:\n  enat i_max < llength Xs\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "moreover"], ["proof (state)\nthis:\n  enat i_max < llength Xs\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "have \"X \\<subseteq> (\\<Inter>j \\<in> {j. i_max \\<le> j \\<and> enat j < llength Xs}. lnth Xs j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> \\<Inter>\n                   (lnth Xs ` {j. i_max \\<le> j \\<and> enat j < llength Xs})", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       x \\<in> \\<Inter>\n                (lnth Xs ` {j. i_max \\<le> j \\<and> enat j < llength Xs})", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       x \\<in> \\<Inter>\n                (lnth Xs ` {j. i_max \\<le> j \\<and> enat j < llength Xs})", "assume x_in: \"x \\<in> X\""], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       x \\<in> \\<Inter>\n                (lnth Xs ` {j. i_max \\<le> j \\<and> enat j < llength Xs})", "then"], ["proof (chain)\npicking this:\n  x \\<in> X", "have x_in_inter: \"x \\<in> (\\<Inter>j \\<in> {j. i_of x \\<le> j \\<and> enat j < llength Xs}. lnth Xs j)\""], ["proof (prove)\nusing this:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Inter>\n             (lnth Xs ` {j. i_of x \\<le> j \\<and> enat j < llength Xs})", "using in_inter"], ["proof (prove)\nusing this:\n  x \\<in> X\n  \\<forall>x\\<in>X.\n     x \\<in> \\<Inter>\n              (lnth Xs ` {j. i_of x \\<le> j \\<and> enat j < llength Xs})\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Inter>\n             (lnth Xs ` {j. i_of x \\<le> j \\<and> enat j < llength Xs})", "by auto"], ["proof (state)\nthis:\n  x \\<in> \\<Inter>\n           (lnth Xs ` {j. i_of x \\<le> j \\<and> enat j < llength Xs})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       x \\<in> \\<Inter>\n                (lnth Xs ` {j. i_max \\<le> j \\<and> enat j < llength Xs})", "moreover"], ["proof (state)\nthis:\n  x \\<in> \\<Inter>\n           (lnth Xs ` {j. i_of x \\<le> j \\<and> enat j < llength Xs})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       x \\<in> \\<Inter>\n                (lnth Xs ` {j. i_max \\<le> j \\<and> enat j < llength Xs})", "have \"{j. i_max \\<le> j \\<and> enat j < llength Xs}\n        \\<subseteq> {j. i_of x \\<le> j \\<and> enat j < llength Xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {j. i_max \\<le> j \\<and> enat j < llength Xs}\n    \\<subseteq> {j. i_of x \\<le> j \\<and> enat j < llength Xs}", "using x_in le_i_max"], ["proof (prove)\nusing this:\n  x \\<in> X\n  \\<forall>x\\<in>X. i_of x \\<le> i_max\n\ngoal (1 subgoal):\n 1. {j. i_max \\<le> j \\<and> enat j < llength Xs}\n    \\<subseteq> {j. i_of x \\<le> j \\<and> enat j < llength Xs}", "by auto"], ["proof (state)\nthis:\n  {j. i_max \\<le> j \\<and> enat j < llength Xs}\n  \\<subseteq> {j. i_of x \\<le> j \\<and> enat j < llength Xs}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       x \\<in> \\<Inter>\n                (lnth Xs ` {j. i_max \\<le> j \\<and> enat j < llength Xs})", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> \\<Inter>\n           (lnth Xs ` {j. i_of x \\<le> j \\<and> enat j < llength Xs})\n  {j. i_max \\<le> j \\<and> enat j < llength Xs}\n  \\<subseteq> {j. i_of x \\<le> j \\<and> enat j < llength Xs}", "show \"x \\<in> (\\<Inter>j \\<in> {j. i_max \\<le> j \\<and> enat j < llength Xs}. lnth Xs j)\""], ["proof (prove)\nusing this:\n  x \\<in> \\<Inter>\n           (lnth Xs ` {j. i_of x \\<le> j \\<and> enat j < llength Xs})\n  {j. i_max \\<le> j \\<and> enat j < llength Xs}\n  \\<subseteq> {j. i_of x \\<le> j \\<and> enat j < llength Xs}\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Inter>\n             (lnth Xs ` {j. i_max \\<le> j \\<and> enat j < llength Xs})", "by auto"], ["proof (state)\nthis:\n  x \\<in> \\<Inter> (lnth Xs ` {j. i_max \\<le> j \\<and> enat j < llength Xs})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  X \\<subseteq> \\<Inter>\n                 (lnth Xs ` {j. i_max \\<le> j \\<and> enat j < llength Xs})\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "ultimately"], ["proof (chain)\npicking this:\n  enat i_max < llength Xs\n  X \\<subseteq> \\<Inter>\n                 (lnth Xs ` {j. i_max \\<le> j \\<and> enat j < llength Xs})", "show ?thesis"], ["proof (prove)\nusing this:\n  enat i_max < llength Xs\n  X \\<subseteq> \\<Inter>\n                 (lnth Xs ` {j. i_max \\<le> j \\<and> enat j < llength Xs})\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       enat i < llength Xs \\<and>\n       X \\<subseteq> \\<Inter>\n                      (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})", "by auto"], ["proof (state)\nthis:\n  \\<exists>i.\n     enat i < llength Xs \\<and>\n     X \\<subseteq> \\<Inter>\n                    (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>i.\n     enat i < llength Xs \\<and>\n     X \\<subseteq> \\<Inter>\n                    (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Liminf_llist_lmap_image:\n  assumes f_inj: \"inj_on f (Sup_llist (lmap g xs))\"\n  shows \"Liminf_llist (lmap (\\<lambda>x. f ` g x) xs) = f ` Liminf_llist (lmap g xs)\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist (lmap (\\<lambda>x. f ` g x) xs) =\n    f ` Liminf_llist (lmap g xs)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Liminf_llist (lmap (\\<lambda>x. f ` g x) xs)\n    \\<subseteq> f ` Liminf_llist (lmap g xs)\n 2. f ` Liminf_llist (lmap g xs)\n    \\<subseteq> Liminf_llist (lmap (\\<lambda>x. f ` g x) xs)", "show \"?lhs \\<subseteq> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist (lmap (\\<lambda>x. f ` g x) xs)\n    \\<subseteq> f ` Liminf_llist (lmap g xs)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist\n                (lmap (\\<lambda>x. f ` g x) xs) \\<Longrightarrow>\n       x \\<in> f ` Liminf_llist (lmap g xs)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist\n                (lmap (\\<lambda>x. f ` g x) xs) \\<Longrightarrow>\n       x \\<in> f ` Liminf_llist (lmap g xs)", "assume \"x \\<in> Liminf_llist (lmap (\\<lambda>x. f ` g x) xs)\""], ["proof (state)\nthis:\n  x \\<in> Liminf_llist (lmap (\\<lambda>x. f ` g x) xs)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist\n                (lmap (\\<lambda>x. f ` g x) xs) \\<Longrightarrow>\n       x \\<in> f ` Liminf_llist (lmap g xs)", "then"], ["proof (chain)\npicking this:\n  x \\<in> Liminf_llist (lmap (\\<lambda>x. f ` g x) xs)", "obtain i where\n      i_lt: \"enat i < llength xs\" and\n      x_in_fgj: \"\\<forall>j. i \\<le> j \\<longrightarrow> enat j < llength xs \\<longrightarrow> x \\<in> f ` g (lnth xs j)\""], ["proof (prove)\nusing this:\n  x \\<in> Liminf_llist (lmap (\\<lambda>x. f ` g x) xs)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>enat i < llength xs;\n         \\<forall>j\\<ge>i.\n            enat j < llength xs \\<longrightarrow>\n            x \\<in> f ` g (lnth xs j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding Liminf_llist_def"], ["proof (prove)\nusing this:\n  x \\<in> (\\<Union>i\\<in>{i. enat i\n                             < llength (lmap (\\<lambda>x. f ` g x) xs)}.\n              \\<Inter>\n               (lnth (lmap (\\<lambda>x. f ` g x) xs) `\n                {j. i \\<le> j \\<and>\n                    enat j < llength (lmap (\\<lambda>x. f ` g x) xs)}))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>enat i < llength xs;\n         \\<forall>j\\<ge>i.\n            enat j < llength xs \\<longrightarrow>\n            x \\<in> f ` g (lnth xs j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  enat i < llength xs\n  \\<forall>j\\<ge>i.\n     enat j < llength xs \\<longrightarrow> x \\<in> f ` g (lnth xs j)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist\n                (lmap (\\<lambda>x. f ` g x) xs) \\<Longrightarrow>\n       x \\<in> f ` Liminf_llist (lmap g xs)", "have ex_in_gi: \"\\<exists>y. y \\<in> g (lnth xs i) \\<and> x = f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. y \\<in> g (lnth xs i) \\<and> x = f y", "using f_inj i_lt x_in_fgj"], ["proof (prove)\nusing this:\n  inj_on f (Sup_llist (lmap g xs))\n  enat i < llength xs\n  \\<forall>j\\<ge>i.\n     enat j < llength xs \\<longrightarrow> x \\<in> f ` g (lnth xs j)\n\ngoal (1 subgoal):\n 1. \\<exists>y. y \\<in> g (lnth xs i) \\<and> x = f y", "unfolding inj_on_def Sup_llist_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>\\<Union>\n                  (lnth (lmap g xs) ` {i. enat i < llength (lmap g xs)}).\n     \\<forall>y\\<in>\\<Union>\n                     (lnth (lmap g xs) ` {i. enat i < llength (lmap g xs)}).\n        f x = f y \\<longrightarrow> x = y\n  enat i < llength xs\n  \\<forall>j\\<ge>i.\n     enat j < llength xs \\<longrightarrow> x \\<in> f ` g (lnth xs j)\n\ngoal (1 subgoal):\n 1. \\<exists>y. y \\<in> g (lnth xs i) \\<and> x = f y", "by auto"], ["proof (state)\nthis:\n  \\<exists>y. y \\<in> g (lnth xs i) \\<and> x = f y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist\n                (lmap (\\<lambda>x. f ` g x) xs) \\<Longrightarrow>\n       x \\<in> f ` Liminf_llist (lmap g xs)", "have \"\\<exists>y. \\<forall>j. i \\<le> j \\<longrightarrow> enat j < llength xs \\<longrightarrow> y \\<in> g (lnth xs j) \\<and> x = f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       \\<forall>j\\<ge>i.\n          enat j < llength xs \\<longrightarrow>\n          y \\<in> g (lnth xs j) \\<and> x = f y", "apply (rule exI[of _ \"SOME y. y \\<in> g (lnth xs i) \\<and> x = f y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<ge>i.\n       enat j < llength xs \\<longrightarrow>\n       (SOME y. y \\<in> g (lnth xs i) \\<and> x = f y)\n       \\<in> g (lnth xs j) \\<and>\n       x = f (SOME y. y \\<in> g (lnth xs i) \\<and> x = f y)", "using someI_ex[OF ex_in_gi] x_in_fgj f_inj i_lt x_in_fgj"], ["proof (prove)\nusing this:\n  (SOME xa. xa \\<in> g (lnth xs i) \\<and> x = f xa)\n  \\<in> g (lnth xs i) \\<and>\n  x = f (SOME xa. xa \\<in> g (lnth xs i) \\<and> x = f xa)\n  \\<forall>j\\<ge>i.\n     enat j < llength xs \\<longrightarrow> x \\<in> f ` g (lnth xs j)\n  inj_on f (Sup_llist (lmap g xs))\n  enat i < llength xs\n  \\<forall>j\\<ge>i.\n     enat j < llength xs \\<longrightarrow> x \\<in> f ` g (lnth xs j)\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<ge>i.\n       enat j < llength xs \\<longrightarrow>\n       (SOME y. y \\<in> g (lnth xs i) \\<and> x = f y)\n       \\<in> g (lnth xs j) \\<and>\n       x = f (SOME y. y \\<in> g (lnth xs i) \\<and> x = f y)", "unfolding inj_on_def Sup_llist_def"], ["proof (prove)\nusing this:\n  (SOME xa. xa \\<in> g (lnth xs i) \\<and> x = f xa)\n  \\<in> g (lnth xs i) \\<and>\n  x = f (SOME xa. xa \\<in> g (lnth xs i) \\<and> x = f xa)\n  \\<forall>j\\<ge>i.\n     enat j < llength xs \\<longrightarrow> x \\<in> f ` g (lnth xs j)\n  \\<forall>x\\<in>\\<Union>\n                  (lnth (lmap g xs) ` {i. enat i < llength (lmap g xs)}).\n     \\<forall>y\\<in>\\<Union>\n                     (lnth (lmap g xs) ` {i. enat i < llength (lmap g xs)}).\n        f x = f y \\<longrightarrow> x = y\n  enat i < llength xs\n  \\<forall>j\\<ge>i.\n     enat j < llength xs \\<longrightarrow> x \\<in> f ` g (lnth xs j)\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<ge>i.\n       enat j < llength xs \\<longrightarrow>\n       (SOME y. y \\<in> g (lnth xs i) \\<and> x = f y)\n       \\<in> g (lnth xs j) \\<and>\n       x = f (SOME y. y \\<in> g (lnth xs i) \\<and> x = f y)", "by simp (metis (no_types, lifting) imageE)"], ["proof (state)\nthis:\n  \\<exists>y.\n     \\<forall>j\\<ge>i.\n        enat j < llength xs \\<longrightarrow>\n        y \\<in> g (lnth xs j) \\<and> x = f y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist\n                (lmap (\\<lambda>x. f ` g x) xs) \\<Longrightarrow>\n       x \\<in> f ` Liminf_llist (lmap g xs)", "then"], ["proof (chain)\npicking this:\n  \\<exists>y.\n     \\<forall>j\\<ge>i.\n        enat j < llength xs \\<longrightarrow>\n        y \\<in> g (lnth xs j) \\<and> x = f y", "show \"x \\<in> f ` Liminf_llist (lmap g xs)\""], ["proof (prove)\nusing this:\n  \\<exists>y.\n     \\<forall>j\\<ge>i.\n        enat j < llength xs \\<longrightarrow>\n        y \\<in> g (lnth xs j) \\<and> x = f y\n\ngoal (1 subgoal):\n 1. x \\<in> f ` Liminf_llist (lmap g xs)", "using i_lt"], ["proof (prove)\nusing this:\n  \\<exists>y.\n     \\<forall>j\\<ge>i.\n        enat j < llength xs \\<longrightarrow>\n        y \\<in> g (lnth xs j) \\<and> x = f y\n  enat i < llength xs\n\ngoal (1 subgoal):\n 1. x \\<in> f ` Liminf_llist (lmap g xs)", "unfolding Liminf_llist_def"], ["proof (prove)\nusing this:\n  \\<exists>y.\n     \\<forall>j\\<ge>i.\n        enat j < llength xs \\<longrightarrow>\n        y \\<in> g (lnth xs j) \\<and> x = f y\n  enat i < llength xs\n\ngoal (1 subgoal):\n 1. x \\<in> f `\n            (\\<Union>i\\<in>{i. enat i < llength (lmap g xs)}.\n                \\<Inter>\n                 (lnth (lmap g xs) `\n                  {j. i \\<le> j \\<and> enat j < llength (lmap g xs)}))", "by auto"], ["proof (state)\nthis:\n  x \\<in> f ` Liminf_llist (lmap g xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Liminf_llist (lmap (\\<lambda>x. f ` g x) xs)\n  \\<subseteq> f ` Liminf_llist (lmap g xs)\n\ngoal (1 subgoal):\n 1. f ` Liminf_llist (lmap g xs)\n    \\<subseteq> Liminf_llist (lmap (\\<lambda>x. f ` g x) xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` Liminf_llist (lmap g xs)\n    \\<subseteq> Liminf_llist (lmap (\\<lambda>x. f ` g x) xs)", "show \"?rhs \\<subseteq> ?lhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` Liminf_llist (lmap g xs)\n    \\<subseteq> Liminf_llist (lmap (\\<lambda>x. f ` g x) xs)", "using image_Liminf_llist_subset[of f \"lmap g xs\", unfolded llist.map_comp]"], ["proof (prove)\nusing this:\n  f ` Liminf_llist (lmap g xs)\n  \\<subseteq> Liminf_llist (lmap ((`) f \\<circ> g) xs)\n\ngoal (1 subgoal):\n 1. f ` Liminf_llist (lmap g xs)\n    \\<subseteq> Liminf_llist (lmap (\\<lambda>x. f ` g x) xs)", "by auto"], ["proof (state)\nthis:\n  f ` Liminf_llist (lmap g xs)\n  \\<subseteq> Liminf_llist (lmap (\\<lambda>x. f ` g x) xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Liminf_llist_lmap_union:\n  assumes \"\\<forall>x \\<in> lset xs. \\<forall>Y \\<in> lset xs. g x \\<inter> h Y = {}\"\n  shows \"Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs) =\n    Liminf_llist (lmap g xs) \\<union> Liminf_llist (lmap h xs)\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs) =\n    Liminf_llist (lmap g xs) \\<union> Liminf_llist (lmap h xs)", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Liminf_llist\n                (lmap (\\<lambda>x. g x \\<union> h x) xs) \\<Longrightarrow>\n       x \\<in> Liminf_llist (lmap g xs) \\<union> Liminf_llist (lmap h xs)\n 2. \\<And>x.\n       x \\<in> Liminf_llist (lmap g xs) \\<union>\n               Liminf_llist (lmap h xs) \\<Longrightarrow>\n       x \\<in> Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Liminf_llist\n                (lmap (\\<lambda>x. g x \\<union> h x) xs) \\<Longrightarrow>\n       x \\<in> Liminf_llist (lmap g xs) \\<union> Liminf_llist (lmap h xs)\n 2. \\<And>x.\n       x \\<in> Liminf_llist (lmap g xs) \\<union>\n               Liminf_llist (lmap h xs) \\<Longrightarrow>\n       x \\<in> Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs)", "assume x_in: \"x \\<in> ?lhs\""], ["proof (state)\nthis:\n  x \\<in> Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Liminf_llist\n                (lmap (\\<lambda>x. g x \\<union> h x) xs) \\<Longrightarrow>\n       x \\<in> Liminf_llist (lmap g xs) \\<union> Liminf_llist (lmap h xs)\n 2. \\<And>x.\n       x \\<in> Liminf_llist (lmap g xs) \\<union>\n               Liminf_llist (lmap h xs) \\<Longrightarrow>\n       x \\<in> Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs)", "then"], ["proof (chain)\npicking this:\n  x \\<in> Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs)", "obtain i where\n    i_lt: \"enat i < llength xs\" and\n    j: \"\\<forall>j. i \\<le> j \\<and> enat j < llength xs \\<longrightarrow> x \\<in> g (lnth xs j) \\<or> x \\<in> h (lnth xs j)\""], ["proof (prove)\nusing this:\n  x \\<in> Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>enat i < llength xs;\n         \\<forall>j.\n            i \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n            x \\<in> g (lnth xs j) \\<or> x \\<in> h (lnth xs j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using x_in[unfolded Liminf_llist_def, simplified]"], ["proof (prove)\nusing this:\n  x \\<in> Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs)\n  \\<exists>xa.\n     enat xa < llength xs \\<and>\n     (\\<forall>xb.\n         xa \\<le> xb \\<and> enat xb < llength xs \\<longrightarrow>\n         x \\<in> g (lnth xs xb) \\<or> x \\<in> h (lnth xs xb))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>enat i < llength xs;\n         \\<forall>j.\n            i \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n            x \\<in> g (lnth xs j) \\<or> x \\<in> h (lnth xs j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  enat i < llength xs\n  \\<forall>j.\n     i \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n     x \\<in> g (lnth xs j) \\<or> x \\<in> h (lnth xs j)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Liminf_llist\n                (lmap (\\<lambda>x. g x \\<union> h x) xs) \\<Longrightarrow>\n       x \\<in> Liminf_llist (lmap g xs) \\<union> Liminf_llist (lmap h xs)\n 2. \\<And>x.\n       x \\<in> Liminf_llist (lmap g xs) \\<union>\n               Liminf_llist (lmap h xs) \\<Longrightarrow>\n       x \\<in> Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs)", "then"], ["proof (chain)\npicking this:\n  enat i < llength xs\n  \\<forall>j.\n     i \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n     x \\<in> g (lnth xs j) \\<or> x \\<in> h (lnth xs j)", "have \"(\\<exists>i'. enat i' < llength xs \\<and> (\\<forall>j. i' \\<le> j \\<and> enat j < llength xs \\<longrightarrow> x \\<in> g (lnth xs j)))\n     \\<or> (\\<exists>i'. enat i' < llength xs \\<and> (\\<forall>j. i' \\<le> j \\<and> enat j < llength xs \\<longrightarrow> x \\<in> h (lnth xs j)))\""], ["proof (prove)\nusing this:\n  enat i < llength xs\n  \\<forall>j.\n     i \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n     x \\<in> g (lnth xs j) \\<or> x \\<in> h (lnth xs j)\n\ngoal (1 subgoal):\n 1. (\\<exists>i'.\n        enat i' < llength xs \\<and>\n        (\\<forall>j.\n            i' \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n            x \\<in> g (lnth xs j))) \\<or>\n    (\\<exists>i'.\n        enat i' < llength xs \\<and>\n        (\\<forall>j.\n            i' \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n            x \\<in> h (lnth xs j)))", "using assms[unfolded disjoint_iff_not_equal]"], ["proof (prove)\nusing this:\n  enat i < llength xs\n  \\<forall>j.\n     i \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n     x \\<in> g (lnth xs j) \\<or> x \\<in> h (lnth xs j)\n  \\<forall>x\\<in>lset xs.\n     \\<forall>Y\\<in>lset xs.\n        \\<forall>x\\<in>g x. \\<forall>y\\<in>h Y. x \\<noteq> y\n\ngoal (1 subgoal):\n 1. (\\<exists>i'.\n        enat i' < llength xs \\<and>\n        (\\<forall>j.\n            i' \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n            x \\<in> g (lnth xs j))) \\<or>\n    (\\<exists>i'.\n        enat i' < llength xs \\<and>\n        (\\<forall>j.\n            i' \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n            x \\<in> h (lnth xs j)))", "by (metis in_lset_conv_lnth)"], ["proof (state)\nthis:\n  (\\<exists>i'.\n      enat i' < llength xs \\<and>\n      (\\<forall>j.\n          i' \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n          x \\<in> g (lnth xs j))) \\<or>\n  (\\<exists>i'.\n      enat i' < llength xs \\<and>\n      (\\<forall>j.\n          i' \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n          x \\<in> h (lnth xs j)))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Liminf_llist\n                (lmap (\\<lambda>x. g x \\<union> h x) xs) \\<Longrightarrow>\n       x \\<in> Liminf_llist (lmap g xs) \\<union> Liminf_llist (lmap h xs)\n 2. \\<And>x.\n       x \\<in> Liminf_llist (lmap g xs) \\<union>\n               Liminf_llist (lmap h xs) \\<Longrightarrow>\n       x \\<in> Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs)", "then"], ["proof (chain)\npicking this:\n  (\\<exists>i'.\n      enat i' < llength xs \\<and>\n      (\\<forall>j.\n          i' \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n          x \\<in> g (lnth xs j))) \\<or>\n  (\\<exists>i'.\n      enat i' < llength xs \\<and>\n      (\\<forall>j.\n          i' \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n          x \\<in> h (lnth xs j)))", "show \"x \\<in> ?rhs\""], ["proof (prove)\nusing this:\n  (\\<exists>i'.\n      enat i' < llength xs \\<and>\n      (\\<forall>j.\n          i' \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n          x \\<in> g (lnth xs j))) \\<or>\n  (\\<exists>i'.\n      enat i' < llength xs \\<and>\n      (\\<forall>j.\n          i' \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n          x \\<in> h (lnth xs j)))\n\ngoal (1 subgoal):\n 1. x \\<in> Liminf_llist (lmap g xs) \\<union> Liminf_llist (lmap h xs)", "unfolding Liminf_llist_def"], ["proof (prove)\nusing this:\n  (\\<exists>i'.\n      enat i' < llength xs \\<and>\n      (\\<forall>j.\n          i' \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n          x \\<in> g (lnth xs j))) \\<or>\n  (\\<exists>i'.\n      enat i' < llength xs \\<and>\n      (\\<forall>j.\n          i' \\<le> j \\<and> enat j < llength xs \\<longrightarrow>\n          x \\<in> h (lnth xs j)))\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap g xs)}.\n                \\<Inter>\n                 (lnth (lmap g xs) `\n                  {j. i \\<le> j \\<and>\n                      enat j < llength (lmap g xs)})) \\<union>\n            (\\<Union>i\\<in>{i. enat i < llength (lmap h xs)}.\n                \\<Inter>\n                 (lnth (lmap h xs) `\n                  {j. i \\<le> j \\<and> enat j < llength (lmap h xs)}))", "by simp"], ["proof (state)\nthis:\n  x \\<in> Liminf_llist (lmap g xs) \\<union> Liminf_llist (lmap h xs)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist (lmap g xs) \\<union>\n               Liminf_llist (lmap h xs) \\<Longrightarrow>\n       x \\<in> Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist (lmap g xs) \\<union>\n               Liminf_llist (lmap h xs) \\<Longrightarrow>\n       x \\<in> Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Liminf_llist (lmap g xs) \\<union>\n               Liminf_llist (lmap h xs) \\<Longrightarrow>\n       x \\<in> Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs)", "show \"x \\<in> ?rhs \\<Longrightarrow> x \\<in> ?lhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Liminf_llist (lmap g xs) \\<union>\n            Liminf_llist (lmap h xs) \\<Longrightarrow>\n    x \\<in> Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>lset xs. \\<forall>Y\\<in>lset xs. g x \\<inter> h Y = {}\n\ngoal (1 subgoal):\n 1. x \\<in> Liminf_llist (lmap g xs) \\<union>\n            Liminf_llist (lmap h xs) \\<Longrightarrow>\n    x \\<in> Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs)", "unfolding Liminf_llist_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>lset xs. \\<forall>Y\\<in>lset xs. g x \\<inter> h Y = {}\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>i\\<in>{i. enat i < llength (lmap g xs)}.\n                \\<Inter>\n                 (lnth (lmap g xs) `\n                  {j. i \\<le> j \\<and>\n                      enat j < llength (lmap g xs)})) \\<union>\n            (\\<Union>i\\<in>{i. enat i < llength (lmap h xs)}.\n                \\<Inter>\n                 (lnth (lmap h xs) `\n                  {j. i \\<le> j \\<and>\n                      enat j < llength (lmap h xs)})) \\<Longrightarrow>\n    x \\<in> (\\<Union>i\\<in>{i. enat i\n                               < llength\n                                  (lmap (\\<lambda>x. g x \\<union> h x) xs)}.\n                \\<Inter>\n                 (lnth (lmap (\\<lambda>x. g x \\<union> h x) xs) `\n                  {j. i \\<le> j \\<and>\n                      enat j\n                      < llength (lmap (\\<lambda>x. g x \\<union> h x) xs)}))", "by auto"], ["proof (state)\nthis:\n  x \\<in> Liminf_llist (lmap g xs) \\<union>\n          Liminf_llist (lmap h xs) \\<Longrightarrow>\n  x \\<in> Liminf_llist (lmap (\\<lambda>x. g x \\<union> h x) xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Liminf_set_filter_commute:\n  \"Liminf_llist (lmap (\\<lambda>X. {x \\<in> X. p x}) Xs) = {x \\<in> Liminf_llist Xs. p x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist (lmap (\\<lambda>X. {x \\<in> X. p x}) Xs) =\n    {x \\<in> Liminf_llist Xs. p x}", "unfolding Liminf_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>i\\<in>{i. enat i\n                       < llength (lmap (\\<lambda>X. {x \\<in> X. p x}) Xs)}.\n        \\<Inter>\n         (lnth (lmap (\\<lambda>X. {x \\<in> X. p x}) Xs) `\n          {j. i \\<le> j \\<and>\n              enat j < llength (lmap (\\<lambda>X. {x \\<in> X. p x}) Xs)})) =\n    {x \\<in> \\<Union>i\\<in>{i. enat i < llength Xs}.\n                \\<Inter>\n                 (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs}).\n     p x}", "by force"], ["", "subsection \\<open>Liminf up-to\\<close>"], ["", "definition Liminf_upto_llist :: \"'a set llist \\<Rightarrow> enat \\<Rightarrow> 'a set\" where\n  \"Liminf_upto_llist Xs k =\n   (\\<Union>i \\<in> {i. enat i < llength Xs \\<and> enat i \\<le> k}.\n      \\<Inter>j \\<in> {j. i \\<le> j \\<and> enat j < llength Xs \\<and> enat j \\<le> k}. lnth Xs j)\""], ["", "lemma Liminf_upto_llist_eq_Liminf_llist_ltake:\n  \"Liminf_upto_llist Xs j = Liminf_llist (ltake (eSuc j) Xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_upto_llist Xs j = Liminf_llist (ltake (eSuc j) Xs)", "unfolding Liminf_upto_llist_def Liminf_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>i\\<in>{i. enat i < llength Xs \\<and> enat i \\<le> j}.\n        \\<Inter>\n         (lnth Xs `\n          {ja.\n           i \\<le> ja \\<and>\n           enat ja < llength Xs \\<and> enat ja \\<le> j})) =\n    (\\<Union>i\\<in>{i. enat i < llength (ltake (eSuc j) Xs)}.\n        \\<Inter>\n         (lnth (ltake (eSuc j) Xs) `\n          {ja. i \\<le> ja \\<and> enat ja < llength (ltake (eSuc j) Xs)}))", "by (smt Collect_cong Sup.SUP_cong iless_Suc_eq lnth_ltake less_llength_ltake mem_Collect_eq)"], ["", "lemma Liminf_upto_llist_enat[simp]:\n  \"Liminf_upto_llist Xs (enat k) =\n   (if enat k < llength Xs then lnth Xs k else if lnull Xs then {} else llast Xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "proof (cases \"enat k < llength Xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. enat k < llength Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)\n 2. \\<not> enat k < llength Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "case True"], ["proof (state)\nthis:\n  enat k < llength Xs\n\ngoal (2 subgoals):\n 1. enat k < llength Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)\n 2. \\<not> enat k < llength Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "then"], ["proof (chain)\npicking this:\n  enat k < llength Xs", "show ?thesis"], ["proof (prove)\nusing this:\n  enat k < llength Xs\n\ngoal (1 subgoal):\n 1. Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "unfolding Liminf_upto_llist_def"], ["proof (prove)\nusing this:\n  enat k < llength Xs\n\ngoal (1 subgoal):\n 1. (\\<Union>i\\<in>{i. enat i < llength Xs \\<and> enat i \\<le> enat k}.\n        \\<Inter>\n         (lnth Xs `\n          {j. i \\<le> j \\<and>\n              enat j < llength Xs \\<and> enat j \\<le> enat k})) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "by force"], ["proof (state)\nthis:\n  Liminf_upto_llist Xs (enat k) =\n  (if enat k < llength Xs then lnth Xs k\n   else if lnull Xs then {} else llast Xs)\n\ngoal (1 subgoal):\n 1. \\<not> enat k < llength Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> enat k < llength Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "case k_ge: False"], ["proof (state)\nthis:\n  \\<not> enat k < llength Xs\n\ngoal (1 subgoal):\n 1. \\<not> enat k < llength Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "proof (cases \"lnull Xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lnull Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)\n 2. \\<not> lnull Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "case nil: True"], ["proof (state)\nthis:\n  lnull Xs\n\ngoal (2 subgoals):\n 1. lnull Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)\n 2. \\<not> lnull Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "then"], ["proof (chain)\npicking this:\n  lnull Xs", "show ?thesis"], ["proof (prove)\nusing this:\n  lnull Xs\n\ngoal (1 subgoal):\n 1. Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "unfolding Liminf_upto_llist_def"], ["proof (prove)\nusing this:\n  lnull Xs\n\ngoal (1 subgoal):\n 1. (\\<Union>i\\<in>{i. enat i < llength Xs \\<and> enat i \\<le> enat k}.\n        \\<Inter>\n         (lnth Xs `\n          {j. i \\<le> j \\<and>\n              enat j < llength Xs \\<and> enat j \\<le> enat k})) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "by simp"], ["proof (state)\nthis:\n  Liminf_upto_llist Xs (enat k) =\n  (if enat k < llength Xs then lnth Xs k\n   else if lnull Xs then {} else llast Xs)\n\ngoal (1 subgoal):\n 1. \\<not> lnull Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lnull Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "case nnil: False"], ["proof (state)\nthis:\n  \\<not> lnull Xs\n\ngoal (1 subgoal):\n 1. \\<not> lnull Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "then"], ["proof (chain)\npicking this:\n  \\<not> lnull Xs", "obtain j where\n    j: \"eSuc (enat j) = llength Xs\""], ["proof (prove)\nusing this:\n  \\<not> lnull Xs\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        eSuc (enat j) = llength Xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using k_ge"], ["proof (prove)\nusing this:\n  \\<not> lnull Xs\n  \\<not> enat k < llength Xs\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        eSuc (enat j) = llength Xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis eSuc_enat_iff enat_ile le_less_linear lhd_LCons_ltl llength_LCons)"], ["proof (state)\nthis:\n  eSuc (enat j) = llength Xs\n\ngoal (1 subgoal):\n 1. \\<not> lnull Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "have fin: \"lfinite Xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfinite Xs", "using k_ge not_lfinite_llength"], ["proof (prove)\nusing this:\n  \\<not> enat k < llength Xs\n  \\<not> lfinite ?xs \\<Longrightarrow> llength ?xs = \\<infinity>\n\ngoal (1 subgoal):\n 1. lfinite Xs", "by fastforce"], ["proof (state)\nthis:\n  lfinite Xs\n\ngoal (1 subgoal):\n 1. \\<not> lnull Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "have le_k: \"enat i < llength Xs \\<and> i \\<le> k \\<longleftrightarrow> enat i < llength Xs\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (enat i < llength Xs \\<and> i \\<le> k) = (enat i < llength Xs)", "using k_ge linear order_le_less_subst2"], ["proof (prove)\nusing this:\n  \\<not> enat k < llength Xs\n  ?x \\<le> ?y \\<or> ?y \\<le> ?x\n  \\<lbrakk>?a \\<le> ?b; ?f ?b < ?c;\n   \\<And>x y. x \\<le> y \\<Longrightarrow> ?f x \\<le> ?f y\\<rbrakk>\n  \\<Longrightarrow> ?f ?a < ?c\n\ngoal (1 subgoal):\n 1. (enat i < llength Xs \\<and> i \\<le> k) = (enat i < llength Xs)", "by fastforce"], ["proof (state)\nthis:\n  (enat ?i < llength Xs \\<and> ?i \\<le> k) = (enat ?i < llength Xs)\n\ngoal (1 subgoal):\n 1. \\<not> lnull Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "have \"Liminf_upto_llist Xs (enat k) = llast Xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_upto_llist Xs (enat k) = llast Xs", "using j nnil lfinite_Liminf_llist[OF fin] nnil"], ["proof (prove)\nusing this:\n  eSuc (enat j) = llength Xs\n  \\<not> lnull Xs\n  Liminf_llist Xs = (if lnull Xs then {} else llast Xs)\n  \\<not> lnull Xs\n\ngoal (1 subgoal):\n 1. Liminf_upto_llist Xs (enat k) = llast Xs", "unfolding Liminf_upto_llist_def Liminf_llist_def"], ["proof (prove)\nusing this:\n  eSuc (enat j) = llength Xs\n  \\<not> lnull Xs\n  (\\<Union>i\\<in>{i. enat i < llength Xs}.\n      \\<Inter> (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})) =\n  (if lnull Xs then {} else llast Xs)\n  \\<not> lnull Xs\n\ngoal (1 subgoal):\n 1. (\\<Union>i\\<in>{i. enat i < llength Xs \\<and> enat i \\<le> enat k}.\n        \\<Inter>\n         (lnth Xs `\n          {j. i \\<le> j \\<and>\n              enat j < llength Xs \\<and> enat j \\<le> enat k})) =\n    llast Xs", "using llast_conv_lnth[OF j[symmetric]]"], ["proof (prove)\nusing this:\n  eSuc (enat j) = llength Xs\n  \\<not> lnull Xs\n  (\\<Union>i\\<in>{i. enat i < llength Xs}.\n      \\<Inter> (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs})) =\n  (if lnull Xs then {} else llast Xs)\n  \\<not> lnull Xs\n  llast Xs = lnth Xs j\n\ngoal (1 subgoal):\n 1. (\\<Union>i\\<in>{i. enat i < llength Xs \\<and> enat i \\<le> enat k}.\n        \\<Inter>\n         (lnth Xs `\n          {j. i \\<le> j \\<and>\n              enat j < llength Xs \\<and> enat j \\<le> enat k})) =\n    llast Xs", "by (simp add: le_k)"], ["proof (state)\nthis:\n  Liminf_upto_llist Xs (enat k) = llast Xs\n\ngoal (1 subgoal):\n 1. \\<not> lnull Xs \\<Longrightarrow>\n    Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "then"], ["proof (chain)\npicking this:\n  Liminf_upto_llist Xs (enat k) = llast Xs", "show ?thesis"], ["proof (prove)\nusing this:\n  Liminf_upto_llist Xs (enat k) = llast Xs\n\ngoal (1 subgoal):\n 1. Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "using k_ge nnil"], ["proof (prove)\nusing this:\n  Liminf_upto_llist Xs (enat k) = llast Xs\n  \\<not> enat k < llength Xs\n  \\<not> lnull Xs\n\ngoal (1 subgoal):\n 1. Liminf_upto_llist Xs (enat k) =\n    (if enat k < llength Xs then lnth Xs k\n     else if lnull Xs then {} else llast Xs)", "by simp"], ["proof (state)\nthis:\n  Liminf_upto_llist Xs (enat k) =\n  (if enat k < llength Xs then lnth Xs k\n   else if lnull Xs then {} else llast Xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Liminf_upto_llist Xs (enat k) =\n  (if enat k < llength Xs then lnth Xs k\n   else if lnull Xs then {} else llast Xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Liminf_upto_llist_infinity[simp]: \"Liminf_upto_llist Xs \\<infinity> = Liminf_llist Xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_upto_llist Xs \\<infinity> = Liminf_llist Xs", "unfolding Liminf_upto_llist_def Liminf_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>i\\<in>{i. enat i < llength Xs \\<and> enat i \\<le> \\<infinity>}.\n        \\<Inter>\n         (lnth Xs `\n          {j. i \\<le> j \\<and>\n              enat j < llength Xs \\<and> enat j \\<le> \\<infinity>})) =\n    (\\<Union>i\\<in>{i. enat i < llength Xs}.\n        \\<Inter> (lnth Xs ` {j. i \\<le> j \\<and> enat j < llength Xs}))", "by simp"], ["", "lemma Liminf_upto_llist_0[simp]:\n  \"Liminf_upto_llist Xs 0 = (if lnull Xs then {} else lhd Xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_upto_llist Xs 0 = (if lnull Xs then {} else lhd Xs)", "unfolding Liminf_upto_llist_def image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     {y. \\<exists>x\\<in>{i. enat i < llength Xs \\<and> enat i \\<le> 0}.\n            y =\n            \\<Inter>\n             {y. \\<exists>x\\<in>{j. x \\<le> j \\<and>\n                                    enat j < llength Xs \\<and>\n                                    enat j \\<le> 0}.\n                    y = lnth Xs x}} =\n    (if lnull Xs then {} else lhd Xs)", "by (simp add: enat_0[symmetric]) (simp add: enat_0 lnth_0_conv_lhd)"], ["", "lemma Liminf_upto_llist_eSuc[simp]:\n  \"Liminf_upto_llist Xs (eSuc j) =\n   (case j of\n      enat k \\<Rightarrow> Liminf_upto_llist Xs (enat (Suc k))\n    | \\<infinity> \\<Rightarrow> Liminf_llist Xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_upto_llist Xs (eSuc j) =\n    (case j of enat k \\<Rightarrow> Liminf_upto_llist Xs (enat (Suc k))\n     | \\<infinity> \\<Rightarrow> Liminf_llist Xs)", "by (auto simp: eSuc_enat split: enat.split)"], ["", "lemma elem_Liminf_llist_imp_Liminf_upto_llist:\n  \"x \\<in> Liminf_llist Xs \\<Longrightarrow>\n   \\<exists>i < llength Xs. \\<forall>j. i \\<le> j \\<and> j < llength Xs \\<longrightarrow> x \\<in> Liminf_upto_llist Xs (enat j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Liminf_llist Xs \\<Longrightarrow>\n    \\<exists>i<llength Xs.\n       \\<forall>j.\n          i \\<le> enat j \\<and> enat j < llength Xs \\<longrightarrow>\n          x \\<in> Liminf_upto_llist Xs (enat j)", "unfolding Liminf_llist_def Liminf_upto_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>i\\<in>{i. enat i < llength Xs}.\n                \\<Inter>\n                 (lnth Xs `\n                  {j. i \\<le> j \\<and>\n                      enat j < llength Xs})) \\<Longrightarrow>\n    \\<exists>i<llength Xs.\n       \\<forall>j.\n          i \\<le> enat j \\<and> enat j < llength Xs \\<longrightarrow>\n          x \\<in> (\\<Union>i\\<in>{i. enat i < llength Xs \\<and>\n                                     enat i \\<le> enat j}.\n                      \\<Inter>\n                       (lnth Xs `\n                        {ja.\n                         i \\<le> ja \\<and>\n                         enat ja < llength Xs \\<and> enat ja \\<le> enat j}))", "using enat_ord_simps(1)"], ["proof (prove)\nusing this:\n  (enat ?m \\<le> enat ?n) = (?m \\<le> ?n)\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>i\\<in>{i. enat i < llength Xs}.\n                \\<Inter>\n                 (lnth Xs `\n                  {j. i \\<le> j \\<and>\n                      enat j < llength Xs})) \\<Longrightarrow>\n    \\<exists>i<llength Xs.\n       \\<forall>j.\n          i \\<le> enat j \\<and> enat j < llength Xs \\<longrightarrow>\n          x \\<in> (\\<Union>i\\<in>{i. enat i < llength Xs \\<and>\n                                     enat i \\<le> enat j}.\n                      \\<Inter>\n                       (lnth Xs `\n                        {ja.\n                         i \\<le> ja \\<and>\n                         enat ja < llength Xs \\<and> enat ja \\<le> enat j}))", "by force"], ["", "end"]]}