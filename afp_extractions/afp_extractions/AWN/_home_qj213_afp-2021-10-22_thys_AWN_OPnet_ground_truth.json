{"file_name": "/home/qj213/afp-2021-10-22/thys/AWN/OPnet.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AWN", "problem_names": ["lemma opnet_maintains_dom:\n  assumes \"((\\<sigma>, ns), a, (\\<sigma>', ns')) \\<in> trans (opnet np p)\"\n    shows \"net_ips ns = net_ips ns'\"", "lemma opnet_net_ips_net_tree_ips:\n  assumes \"(\\<sigma>, ns) \\<in> oreachable (opnet np p) S U\"\n    shows \"net_ips ns = net_tree_ips p\"", "lemma opnet_net_ips_net_tree_ips_init:\n  assumes \"(\\<sigma>, ns) \\<in> init (opnet np p)\"\n    shows \"net_ips ns = net_tree_ips p\"", "lemma opartial_net_preserves_subnets:\n  assumes \"((\\<sigma>, SubnetS s t), a, (\\<sigma>', st')) \\<in> opnet_sos (trans (opnet np p1)) (trans (opnet np p2))\"\n    shows \"\\<exists>s' t'. st' = SubnetS s' t'\"", "lemma net_par_oreachable_is_subnet:\n  assumes \"(\\<sigma>, st) \\<in> oreachable (opnet np (p1 \\<parallel> p2)) S U\"\n    shows \"\\<exists>s t. st = SubnetS s t\""], "translations": [["", "lemma opnet_maintains_dom:\n  assumes \"((\\<sigma>, ns), a, (\\<sigma>', ns')) \\<in> trans (opnet np p)\"\n    shows \"net_ips ns = net_ips ns'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. net_ips ns = net_ips ns'", "using assms"], ["proof (prove)\nusing this:\n  ((\\<sigma>, ns), a, \\<sigma>', ns') \\<in> automaton.trans (opnet np p)\n\ngoal (1 subgoal):\n 1. net_ips ns = net_ips ns'", "proof (induction p arbitrary: \\<sigma> ns a \\<sigma>' ns')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R \\<sigma> ns a \\<sigma>' ns'.\n       ((\\<sigma>, ns), a, \\<sigma>', ns')\n       \\<in> automaton.trans\n              (opnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips ns = net_ips ns'\n 2. \\<And>p1 p2 \\<sigma> ns a \\<sigma>' ns'.\n       \\<lbrakk>\\<And>\\<sigma> ns a \\<sigma>' ns'.\n                   ((\\<sigma>, ns), a, \\<sigma>', ns')\n                   \\<in> automaton.trans (opnet np p1) \\<Longrightarrow>\n                   net_ips ns = net_ips ns';\n        \\<And>\\<sigma> ns a \\<sigma>' ns'.\n           ((\\<sigma>, ns), a, \\<sigma>', ns')\n           \\<in> automaton.trans (opnet np p2) \\<Longrightarrow>\n           net_ips ns = net_ips ns';\n        ((\\<sigma>, ns), a, \\<sigma>', ns')\n        \\<in> automaton.trans (opnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips ns = net_ips ns'", "fix i R \\<sigma> ns a \\<sigma>' ns'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R \\<sigma> ns a \\<sigma>' ns'.\n       ((\\<sigma>, ns), a, \\<sigma>', ns')\n       \\<in> automaton.trans\n              (opnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips ns = net_ips ns'\n 2. \\<And>p1 p2 \\<sigma> ns a \\<sigma>' ns'.\n       \\<lbrakk>\\<And>\\<sigma> ns a \\<sigma>' ns'.\n                   ((\\<sigma>, ns), a, \\<sigma>', ns')\n                   \\<in> automaton.trans (opnet np p1) \\<Longrightarrow>\n                   net_ips ns = net_ips ns';\n        \\<And>\\<sigma> ns a \\<sigma>' ns'.\n           ((\\<sigma>, ns), a, \\<sigma>', ns')\n           \\<in> automaton.trans (opnet np p2) \\<Longrightarrow>\n           net_ips ns = net_ips ns';\n        ((\\<sigma>, ns), a, \\<sigma>', ns')\n        \\<in> automaton.trans (opnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips ns = net_ips ns'", "assume \"((\\<sigma>, ns), a, (\\<sigma>', ns')) \\<in> trans (opnet np \\<langle>i; R\\<rangle>)\""], ["proof (state)\nthis:\n  ((\\<sigma>, ns), a, \\<sigma>', ns')\n  \\<in> automaton.trans (opnet np \\<langle>i; R\\<rangle>)\n\ngoal (2 subgoals):\n 1. \\<And>i R \\<sigma> ns a \\<sigma>' ns'.\n       ((\\<sigma>, ns), a, \\<sigma>', ns')\n       \\<in> automaton.trans\n              (opnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips ns = net_ips ns'\n 2. \\<And>p1 p2 \\<sigma> ns a \\<sigma>' ns'.\n       \\<lbrakk>\\<And>\\<sigma> ns a \\<sigma>' ns'.\n                   ((\\<sigma>, ns), a, \\<sigma>', ns')\n                   \\<in> automaton.trans (opnet np p1) \\<Longrightarrow>\n                   net_ips ns = net_ips ns';\n        \\<And>\\<sigma> ns a \\<sigma>' ns'.\n           ((\\<sigma>, ns), a, \\<sigma>', ns')\n           \\<in> automaton.trans (opnet np p2) \\<Longrightarrow>\n           net_ips ns = net_ips ns';\n        ((\\<sigma>, ns), a, \\<sigma>', ns')\n        \\<in> automaton.trans (opnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips ns = net_ips ns'", "hence \"((\\<sigma>, ns), a, (\\<sigma>', ns')) \\<in> onode_sos (trans (np i))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, ns), a, \\<sigma>', ns')\n  \\<in> automaton.trans (opnet np \\<langle>i; R\\<rangle>)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, ns), a, \\<sigma>', ns')\n    \\<in> onode_sos (automaton.trans (np i))", ".."], ["proof (state)\nthis:\n  ((\\<sigma>, ns), a, \\<sigma>', ns')\n  \\<in> onode_sos (automaton.trans (np i))\n\ngoal (2 subgoals):\n 1. \\<And>i R \\<sigma> ns a \\<sigma>' ns'.\n       ((\\<sigma>, ns), a, \\<sigma>', ns')\n       \\<in> automaton.trans\n              (opnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips ns = net_ips ns'\n 2. \\<And>p1 p2 \\<sigma> ns a \\<sigma>' ns'.\n       \\<lbrakk>\\<And>\\<sigma> ns a \\<sigma>' ns'.\n                   ((\\<sigma>, ns), a, \\<sigma>', ns')\n                   \\<in> automaton.trans (opnet np p1) \\<Longrightarrow>\n                   net_ips ns = net_ips ns';\n        \\<And>\\<sigma> ns a \\<sigma>' ns'.\n           ((\\<sigma>, ns), a, \\<sigma>', ns')\n           \\<in> automaton.trans (opnet np p2) \\<Longrightarrow>\n           net_ips ns = net_ips ns';\n        ((\\<sigma>, ns), a, \\<sigma>', ns')\n        \\<in> automaton.trans (opnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips ns = net_ips ns'", "thus \"net_ips ns = net_ips ns'\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, ns), a, \\<sigma>', ns')\n  \\<in> onode_sos (automaton.trans (np i))\n\ngoal (1 subgoal):\n 1. net_ips ns = net_ips ns'", "by (simp add: net_ips_is_dom_netmap)\n         (erule onode_sos.cases, simp_all)"], ["proof (state)\nthis:\n  net_ips ns = net_ips ns'\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 \\<sigma> ns a \\<sigma>' ns'.\n       \\<lbrakk>\\<And>\\<sigma> ns a \\<sigma>' ns'.\n                   ((\\<sigma>, ns), a, \\<sigma>', ns')\n                   \\<in> automaton.trans (opnet np p1) \\<Longrightarrow>\n                   net_ips ns = net_ips ns';\n        \\<And>\\<sigma> ns a \\<sigma>' ns'.\n           ((\\<sigma>, ns), a, \\<sigma>', ns')\n           \\<in> automaton.trans (opnet np p2) \\<Longrightarrow>\n           net_ips ns = net_ips ns';\n        ((\\<sigma>, ns), a, \\<sigma>', ns')\n        \\<in> automaton.trans (opnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips ns = net_ips ns'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2 \\<sigma> ns a \\<sigma>' ns'.\n       \\<lbrakk>\\<And>\\<sigma> ns a \\<sigma>' ns'.\n                   ((\\<sigma>, ns), a, \\<sigma>', ns')\n                   \\<in> automaton.trans (opnet np p1) \\<Longrightarrow>\n                   net_ips ns = net_ips ns';\n        \\<And>\\<sigma> ns a \\<sigma>' ns'.\n           ((\\<sigma>, ns), a, \\<sigma>', ns')\n           \\<in> automaton.trans (opnet np p2) \\<Longrightarrow>\n           net_ips ns = net_ips ns';\n        ((\\<sigma>, ns), a, \\<sigma>', ns')\n        \\<in> automaton.trans (opnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips ns = net_ips ns'", "fix p1 p2 \\<sigma> ns a \\<sigma>' ns'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2 \\<sigma> ns a \\<sigma>' ns'.\n       \\<lbrakk>\\<And>\\<sigma> ns a \\<sigma>' ns'.\n                   ((\\<sigma>, ns), a, \\<sigma>', ns')\n                   \\<in> automaton.trans (opnet np p1) \\<Longrightarrow>\n                   net_ips ns = net_ips ns';\n        \\<And>\\<sigma> ns a \\<sigma>' ns'.\n           ((\\<sigma>, ns), a, \\<sigma>', ns')\n           \\<in> automaton.trans (opnet np p2) \\<Longrightarrow>\n           net_ips ns = net_ips ns';\n        ((\\<sigma>, ns), a, \\<sigma>', ns')\n        \\<in> automaton.trans (opnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips ns = net_ips ns'", "assume \"\\<And>\\<sigma> ns a \\<sigma>' ns'. ((\\<sigma>, ns), a, (\\<sigma>', ns')) \\<in> trans (opnet np p1) \\<Longrightarrow> net_ips ns = net_ips ns'\"\n       and \"\\<And>\\<sigma> ns a \\<sigma>' ns'. ((\\<sigma>, ns), a, (\\<sigma>', ns')) \\<in> trans (opnet np p2) \\<Longrightarrow> net_ips ns = net_ips ns'\"\n       and \"((\\<sigma>, ns), a, (\\<sigma>', ns')) \\<in> trans (opnet np (p1 \\<parallel> p2))\""], ["proof (state)\nthis:\n  ((?\\<sigma>, ?ns), ?a, ?\\<sigma>', ?ns')\n  \\<in> automaton.trans (opnet np p1) \\<Longrightarrow>\n  net_ips ?ns = net_ips ?ns'\n  ((?\\<sigma>, ?ns), ?a, ?\\<sigma>', ?ns')\n  \\<in> automaton.trans (opnet np p2) \\<Longrightarrow>\n  net_ips ?ns = net_ips ?ns'\n  ((\\<sigma>, ns), a, \\<sigma>', ns')\n  \\<in> automaton.trans (opnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 \\<sigma> ns a \\<sigma>' ns'.\n       \\<lbrakk>\\<And>\\<sigma> ns a \\<sigma>' ns'.\n                   ((\\<sigma>, ns), a, \\<sigma>', ns')\n                   \\<in> automaton.trans (opnet np p1) \\<Longrightarrow>\n                   net_ips ns = net_ips ns';\n        \\<And>\\<sigma> ns a \\<sigma>' ns'.\n           ((\\<sigma>, ns), a, \\<sigma>', ns')\n           \\<in> automaton.trans (opnet np p2) \\<Longrightarrow>\n           net_ips ns = net_ips ns';\n        ((\\<sigma>, ns), a, \\<sigma>', ns')\n        \\<in> automaton.trans (opnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips ns = net_ips ns'", "thus \"net_ips ns = net_ips ns'\""], ["proof (prove)\nusing this:\n  ((?\\<sigma>, ?ns), ?a, ?\\<sigma>', ?ns')\n  \\<in> automaton.trans (opnet np p1) \\<Longrightarrow>\n  net_ips ?ns = net_ips ?ns'\n  ((?\\<sigma>, ?ns), ?a, ?\\<sigma>', ?ns')\n  \\<in> automaton.trans (opnet np p2) \\<Longrightarrow>\n  net_ips ?ns = net_ips ?ns'\n  ((\\<sigma>, ns), a, \\<sigma>', ns')\n  \\<in> automaton.trans (opnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. net_ips ns = net_ips ns'", "by simp (erule opnet_sos.cases, simp_all)"], ["proof (state)\nthis:\n  net_ips ns = net_ips ns'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma opnet_net_ips_net_tree_ips:\n  assumes \"(\\<sigma>, ns) \\<in> oreachable (opnet np p) S U\"\n    shows \"net_ips ns = net_tree_ips p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. net_ips ns = net_tree_ips p", "using assms"], ["proof (prove)\nusing this:\n  (\\<sigma>, ns) \\<in> oreachable (opnet np p) S U\n\ngoal (1 subgoal):\n 1. net_ips ns = net_tree_ips p", "proof (induction rule: oreachable_pair_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> pa.\n       (\\<sigma>, pa) \\<in> init (opnet np p) \\<Longrightarrow>\n       net_ips pa = net_tree_ips p\n 2. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa) \\<in> oreachable (opnet np p) S U;\n        net_ips pa = net_tree_ips p; U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> net_ips pa = net_tree_ips p\n 3. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa) \\<in> oreachable (opnet np p) S U;\n        net_ips pa = net_tree_ips p;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (opnet np p);\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> net_ips p' = net_tree_ips p", "fix \\<sigma> s"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> pa.\n       (\\<sigma>, pa) \\<in> init (opnet np p) \\<Longrightarrow>\n       net_ips pa = net_tree_ips p\n 2. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa) \\<in> oreachable (opnet np p) S U;\n        net_ips pa = net_tree_ips p; U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> net_ips pa = net_tree_ips p\n 3. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa) \\<in> oreachable (opnet np p) S U;\n        net_ips pa = net_tree_ips p;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (opnet np p);\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> net_ips p' = net_tree_ips p", "assume \"(\\<sigma>, s) \\<in> init (opnet np p)\""], ["proof (state)\nthis:\n  (\\<sigma>, s) \\<in> init (opnet np p)\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> pa.\n       (\\<sigma>, pa) \\<in> init (opnet np p) \\<Longrightarrow>\n       net_ips pa = net_tree_ips p\n 2. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa) \\<in> oreachable (opnet np p) S U;\n        net_ips pa = net_tree_ips p; U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> net_ips pa = net_tree_ips p\n 3. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa) \\<in> oreachable (opnet np p) S U;\n        net_ips pa = net_tree_ips p;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (opnet np p);\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> net_ips p' = net_tree_ips p", "thus \"net_ips s = net_tree_ips p\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s) \\<in> init (opnet np p)\n\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips p", "proof (induction p arbitrary: \\<sigma> s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R \\<sigma> s.\n       (\\<sigma>, s)\n       \\<in> init (opnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips s = net_tree_ips \\<langle>i; R\\<rangle>\n 2. \\<And>p1 p2 \\<sigma> s.\n       \\<lbrakk>\\<And>\\<sigma> s.\n                   (\\<sigma>, s) \\<in> init (opnet np p1) \\<Longrightarrow>\n                   net_ips s = net_tree_ips p1;\n        \\<And>\\<sigma> s.\n           (\\<sigma>, s) \\<in> init (opnet np p2) \\<Longrightarrow>\n           net_ips s = net_tree_ips p2;\n        (\\<sigma>, s) \\<in> init (opnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_tree_ips (p1 \\<parallel> p2)", "fix p1 p2 \\<sigma> s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R \\<sigma> s.\n       (\\<sigma>, s)\n       \\<in> init (opnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips s = net_tree_ips \\<langle>i; R\\<rangle>\n 2. \\<And>p1 p2 \\<sigma> s.\n       \\<lbrakk>\\<And>\\<sigma> s.\n                   (\\<sigma>, s) \\<in> init (opnet np p1) \\<Longrightarrow>\n                   net_ips s = net_tree_ips p1;\n        \\<And>\\<sigma> s.\n           (\\<sigma>, s) \\<in> init (opnet np p2) \\<Longrightarrow>\n           net_ips s = net_tree_ips p2;\n        (\\<sigma>, s) \\<in> init (opnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_tree_ips (p1 \\<parallel> p2)", "assume IH1: \"(\\<And>\\<sigma> s. (\\<sigma>, s) \\<in> init (opnet np p1) \\<Longrightarrow> net_ips s = net_tree_ips p1)\"\n         and IH2: \"(\\<And>\\<sigma> s. (\\<sigma>, s) \\<in> init (opnet np p2) \\<Longrightarrow> net_ips s = net_tree_ips p2)\"\n         and \"(\\<sigma>, s) \\<in> init (opnet np (p1 \\<parallel> p2))\""], ["proof (state)\nthis:\n  (?\\<sigma>, ?s) \\<in> init (opnet np p1) \\<Longrightarrow>\n  net_ips ?s = net_tree_ips p1\n  (?\\<sigma>, ?s) \\<in> init (opnet np p2) \\<Longrightarrow>\n  net_ips ?s = net_tree_ips p2\n  (\\<sigma>, s) \\<in> init (opnet np (p1 \\<parallel> p2))\n\ngoal (2 subgoals):\n 1. \\<And>i R \\<sigma> s.\n       (\\<sigma>, s)\n       \\<in> init (opnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips s = net_tree_ips \\<langle>i; R\\<rangle>\n 2. \\<And>p1 p2 \\<sigma> s.\n       \\<lbrakk>\\<And>\\<sigma> s.\n                   (\\<sigma>, s) \\<in> init (opnet np p1) \\<Longrightarrow>\n                   net_ips s = net_tree_ips p1;\n        \\<And>\\<sigma> s.\n           (\\<sigma>, s) \\<in> init (opnet np p2) \\<Longrightarrow>\n           net_ips s = net_tree_ips p2;\n        (\\<sigma>, s) \\<in> init (opnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_tree_ips (p1 \\<parallel> p2)", "thus \"net_ips s = net_tree_ips (p1 \\<parallel> p2)\""], ["proof (prove)\nusing this:\n  (?\\<sigma>, ?s) \\<in> init (opnet np p1) \\<Longrightarrow>\n  net_ips ?s = net_tree_ips p1\n  (?\\<sigma>, ?s) \\<in> init (opnet np p2) \\<Longrightarrow>\n  net_ips ?s = net_tree_ips p2\n  (\\<sigma>, s) \\<in> init (opnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips (p1 \\<parallel> p2)", "by (clarsimp simp add: net_ips_is_dom_netmap)\n           (metis Un_commute)"], ["proof (state)\nthis:\n  net_ips s = net_tree_ips (p1 \\<parallel> p2)\n\ngoal (1 subgoal):\n 1. \\<And>i R \\<sigma> s.\n       (\\<sigma>, s)\n       \\<in> init (opnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips s = net_tree_ips \\<langle>i; R\\<rangle>", "qed (clarsimp simp add: onode_comps)"], ["proof (state)\nthis:\n  net_ips s = net_tree_ips p\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa) \\<in> oreachable (opnet np p) S U;\n        net_ips pa = net_tree_ips p; U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> net_ips pa = net_tree_ips p\n 2. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa) \\<in> oreachable (opnet np p) S U;\n        net_ips pa = net_tree_ips p;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (opnet np p);\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> net_ips p' = net_tree_ips p", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa) \\<in> oreachable (opnet np p) S U;\n        net_ips pa = net_tree_ips p; U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> net_ips pa = net_tree_ips p\n 2. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa) \\<in> oreachable (opnet np p) S U;\n        net_ips pa = net_tree_ips p;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (opnet np p);\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> net_ips p' = net_tree_ips p", "fix \\<sigma> s \\<sigma>' s' a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa) \\<in> oreachable (opnet np p) S U;\n        net_ips pa = net_tree_ips p; U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> net_ips pa = net_tree_ips p\n 2. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa) \\<in> oreachable (opnet np p) S U;\n        net_ips pa = net_tree_ips p;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (opnet np p);\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> net_ips p' = net_tree_ips p", "assume \"(\\<sigma>, s) \\<in> oreachable (opnet np p) S U\"\n       and \"net_ips s = net_tree_ips p\"\n       and \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans (opnet np p)\"\n       and \"S \\<sigma> \\<sigma>' a\""], ["proof (state)\nthis:\n  (\\<sigma>, s) \\<in> oreachable (opnet np p) S U\n  net_ips s = net_tree_ips p\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans (opnet np p)\n  S \\<sigma> \\<sigma>' a\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa) \\<in> oreachable (opnet np p) S U;\n        net_ips pa = net_tree_ips p; U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> net_ips pa = net_tree_ips p\n 2. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa) \\<in> oreachable (opnet np p) S U;\n        net_ips pa = net_tree_ips p;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (opnet np p);\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> net_ips p' = net_tree_ips p", "thus \"net_ips s' = net_tree_ips p\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s) \\<in> oreachable (opnet np p) S U\n  net_ips s = net_tree_ips p\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans (opnet np p)\n  S \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. net_ips s' = net_tree_ips p", "by (simp add: net_ips_is_dom_netmap)\n         (metis net_ips_is_dom_netmap opnet_maintains_dom)"], ["proof (state)\nthis:\n  net_ips s' = net_tree_ips p\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa) \\<in> oreachable (opnet np p) S U;\n        net_ips pa = net_tree_ips p; U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> net_ips pa = net_tree_ips p", "qed simp"], ["", "lemma opnet_net_ips_net_tree_ips_init:\n  assumes \"(\\<sigma>, ns) \\<in> init (opnet np p)\"\n    shows \"net_ips ns = net_tree_ips p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. net_ips ns = net_tree_ips p", "using assms(1)"], ["proof (prove)\nusing this:\n  (\\<sigma>, ns) \\<in> init (opnet np p)\n\ngoal (1 subgoal):\n 1. net_ips ns = net_tree_ips p", "by (rule oreachable_init [THEN opnet_net_ips_net_tree_ips])"], ["", "lemma opartial_net_preserves_subnets:\n  assumes \"((\\<sigma>, SubnetS s t), a, (\\<sigma>', st')) \\<in> opnet_sos (trans (opnet np p1)) (trans (opnet np p2))\"\n    shows \"\\<exists>s' t'. st' = SubnetS s' t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' t'. st' = SubnetS s' t'", "using assms"], ["proof (prove)\nusing this:\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', st')\n  \\<in> opnet_sos (automaton.trans (opnet np p1))\n         (automaton.trans (opnet np p2))\n\ngoal (1 subgoal):\n 1. \\<exists>s' t'. st' = SubnetS s' t'", "by cases simp_all"], ["", "lemma net_par_oreachable_is_subnet:\n  assumes \"(\\<sigma>, st) \\<in> oreachable (opnet np (p1 \\<parallel> p2)) S U\"\n    shows \"\\<exists>s t. st = SubnetS s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s t. st = SubnetS s t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s t. st = SubnetS s t", "define p where \"p = (\\<sigma>, st)\""], ["proof (state)\nthis:\n  p = (\\<sigma>, st)\n\ngoal (1 subgoal):\n 1. \\<exists>s t. st = SubnetS s t", "with assms"], ["proof (chain)\npicking this:\n  (\\<sigma>, st) \\<in> oreachable (opnet np (p1 \\<parallel> p2)) S U\n  p = (\\<sigma>, st)", "have \"p \\<in> oreachable (opnet np (p1 \\<parallel> p2)) S U\""], ["proof (prove)\nusing this:\n  (\\<sigma>, st) \\<in> oreachable (opnet np (p1 \\<parallel> p2)) S U\n  p = (\\<sigma>, st)\n\ngoal (1 subgoal):\n 1. p \\<in> oreachable (opnet np (p1 \\<parallel> p2)) S U", "by simp"], ["proof (state)\nthis:\n  p \\<in> oreachable (opnet np (p1 \\<parallel> p2)) S U\n\ngoal (1 subgoal):\n 1. \\<exists>s t. st = SubnetS s t", "hence \"\\<exists>\\<sigma> s t. p = (\\<sigma>, SubnetS s t)\""], ["proof (prove)\nusing this:\n  p \\<in> oreachable (opnet np (p1 \\<parallel> p2)) S U\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> s t. p = (\\<sigma>, SubnetS s t)", "by induct (auto dest!: opartial_net_preserves_subnets)"], ["proof (state)\nthis:\n  \\<exists>\\<sigma> s t. p = (\\<sigma>, SubnetS s t)\n\ngoal (1 subgoal):\n 1. \\<exists>s t. st = SubnetS s t", "with p_def"], ["proof (chain)\npicking this:\n  p = (\\<sigma>, st)\n  \\<exists>\\<sigma> s t. p = (\\<sigma>, SubnetS s t)", "show ?thesis"], ["proof (prove)\nusing this:\n  p = (\\<sigma>, st)\n  \\<exists>\\<sigma> s t. p = (\\<sigma>, SubnetS s t)\n\ngoal (1 subgoal):\n 1. \\<exists>s t. st = SubnetS s t", "by simp"], ["proof (state)\nthis:\n  \\<exists>s t. st = SubnetS s t\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}