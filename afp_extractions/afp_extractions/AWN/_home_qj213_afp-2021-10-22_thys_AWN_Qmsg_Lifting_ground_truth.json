{"file_name": "/home/qj213/afp-2021-10-22/thys/AWN/Qmsg_Lifting.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AWN", "problem_names": ["lemma oseq_no_change_on_send:\n  fixes \\<sigma> s a \\<sigma>' s'\n  assumes \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> oseqp_sos \\<Gamma> i\"\n  shows \"case a of\n           broadcast m     \\<Rightarrow> \\<sigma>' i = \\<sigma> i\n         | groupcast ips m \\<Rightarrow> \\<sigma>' i = \\<sigma> i\n         | unicast ips m   \\<Rightarrow> \\<sigma>' i = \\<sigma> i\n         | \\<not>unicast ips    \\<Rightarrow> \\<sigma>' i = \\<sigma> i\n         | send m          \\<Rightarrow> \\<sigma>' i = \\<sigma> i\n         | deliver m       \\<Rightarrow> \\<sigma>' i = \\<sigma> i\n         | _ \\<Rightarrow> True\"", "lemma qmsg_no_change_on_send_or_receive:\n    fixes \\<sigma> s a \\<sigma>' s'\n  assumes \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> oparp_sos i (oseqp_sos \\<Gamma> i) (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\"\n      and \"a \\<noteq> \\<tau>\"\n    shows \"\\<sigma>' i = \\<sigma> i\"", "lemma qmsg_msgs_not_empty:\n  \"qmsg \\<TTurnstile> onl \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G (\\<lambda>(msgs, l). l = ()-:1 \\<longrightarrow> msgs \\<noteq> [])\"", "lemma qmsg_send_from_queue:\n  \"qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>((msgs, q), a, _). sendmsg (\\<lambda>m. m\\<in>set msgs) a)\"", "lemma qmsg_queue_contents:\n  \"qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>((msgs, q), a, (msgs', q')). case a of\n                                             receive m \\<Rightarrow> set msgs' \\<subseteq> set (msgs @ [m])\n                                           | _ \\<Rightarrow> set msgs' \\<subseteq> set msgs)\"", "lemma qmsg_send_receive_or_tau:\n  \"qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>(_, a, _). \\<exists>m. a = send m \\<or> a = receive m \\<or> a = \\<tau>)\"", "lemma par_qmsg_oreachable:\n  assumes \"(\\<sigma>, \\<zeta>) \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) (otherwith S {i} (orecvmsg R)) (other U {i})\"\n           (is \"_ \\<in> oreachable _ ?owS _\")\n      and pinv: \"A \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>)\n                       globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). U (\\<sigma> i) (\\<sigma>' i))\"\n      and ustutter: \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n      and sgivesu: \"\\<And>\\<xi> \\<xi>'. S \\<xi> \\<xi>' \\<Longrightarrow> U \\<xi> \\<xi>'\"\n      and upreservesq: \"\\<And>\\<sigma> \\<sigma>' m. \\<lbrakk> \\<forall>j. U (\\<sigma> j) (\\<sigma>' j); R \\<sigma> m \\<rbrakk> \\<Longrightarrow> R \\<sigma>' m\"\n  shows \"(\\<sigma>, fst \\<zeta>) \\<in> oreachable A ?owS (other U {i})\n         \\<and> snd \\<zeta> \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n         \\<and> (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R \\<sigma> m)\"", "lemma par_qmsg_oreachable_statelessassm:\n  assumes \"(\\<sigma>, \\<zeta>) \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                               (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>) (other (\\<lambda>_ _. True) {i})\"\n      and ustutter: \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n  shows \"(\\<sigma>, fst \\<zeta>) \\<in> oreachable A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>) (other (\\<lambda>_ _. True) {i})\n         \\<and> snd \\<zeta> \\<in> reachable qmsg (recvmsg R)\n         \\<and> (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R m)\"", "lemma lift_into_qmsg:\n  assumes \"A \\<Turnstile> (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>) global P\"\n      and \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n      and \"\\<And>\\<xi> \\<xi>'. S \\<xi> \\<xi>' \\<Longrightarrow> U \\<xi> \\<xi>'\"\n      and \"\\<And>\\<sigma> \\<sigma>' m. \\<lbrakk> \\<forall>j. U (\\<sigma> j) (\\<sigma>' j); R \\<sigma> m \\<rbrakk> \\<Longrightarrow> R \\<sigma>' m\"\n      and \"A \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>)\n                 globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). U (\\<sigma> i) (\\<sigma>' i))\"\n    shows \"A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile> (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>) global P\"", "lemma lift_step_into_qmsg:\n  assumes inv: \"A \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>) globala P\"\n      and ustutter: \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n      and sgivesu: \"\\<And>\\<xi> \\<xi>'. S \\<xi> \\<xi>' \\<Longrightarrow> U \\<xi> \\<xi>'\"\n      and upreservesq: \"\\<And>\\<sigma> \\<sigma>' m. \\<lbrakk> \\<forall>j. U (\\<sigma> j) (\\<sigma>' j); R \\<sigma> m \\<rbrakk> \\<Longrightarrow> R \\<sigma>' m\"\n      and self_sync: \"A \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>)\n                            globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). U (\\<sigma> i) (\\<sigma>' i))\"\n\n      and recv_stutter:  \"\\<And>\\<sigma> \\<sigma>' m. \\<lbrakk> \\<forall>j. U (\\<sigma> j) (\\<sigma>' j); \\<sigma>' i = \\<sigma> i \\<rbrakk> \\<Longrightarrow> P (\\<sigma>, receive m, \\<sigma>')\"\n      and receive_right: \"\\<And>\\<sigma> \\<sigma>' m.  P (\\<sigma>, receive m, \\<sigma>') \\<Longrightarrow> P (\\<sigma>, \\<tau>, \\<sigma>')\"\n    shows \"A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>) globala P\"\n      (is \"_ \\<Turnstile>\\<^sub>A (?owS, ?U \\<rightarrow>) _\")", "lemma lift_step_into_qmsg_statelessassm:\n  assumes \"A \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>) globala P\"\n      and \"\\<And>\\<sigma> \\<sigma>' m. \\<sigma>' i = \\<sigma> i \\<Longrightarrow> P (\\<sigma>, receive m, \\<sigma>')\"\n      and \"\\<And>\\<sigma> \\<sigma>' m. P (\\<sigma>, receive m, \\<sigma>') \\<Longrightarrow> P (\\<sigma>, \\<tau>, \\<sigma>')\"\n    shows \"A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>) globala P\""], "translations": [["", "lemma oseq_no_change_on_send:\n  fixes \\<sigma> s a \\<sigma>' s'\n  assumes \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> oseqp_sos \\<Gamma> i\"\n  shows \"case a of\n           broadcast m     \\<Rightarrow> \\<sigma>' i = \\<sigma> i\n         | groupcast ips m \\<Rightarrow> \\<sigma>' i = \\<sigma> i\n         | unicast ips m   \\<Rightarrow> \\<sigma>' i = \\<sigma> i\n         | \\<not>unicast ips    \\<Rightarrow> \\<sigma>' i = \\<sigma> i\n         | send m          \\<Rightarrow> \\<sigma>' i = \\<sigma> i\n         | deliver m       \\<Rightarrow> \\<sigma>' i = \\<sigma> i\n         | _ \\<Rightarrow> True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case a of receive ma \\<Rightarrow> True\n    | \\<tau>\\<^sub>s \\<Rightarrow> True\n    | _ \\<Rightarrow> \\<sigma>' i = \\<sigma> i", "using assms"], ["proof (prove)\nusing this:\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> oseqp_sos \\<Gamma> i\n\ngoal (1 subgoal):\n 1. case a of receive ma \\<Rightarrow> True\n    | \\<tau>\\<^sub>s \\<Rightarrow> True\n    | _ \\<Rightarrow> \\<sigma>' i = \\<sigma> i", "by induction simp_all"], ["", "lemma qmsg_no_change_on_send_or_receive:\n    fixes \\<sigma> s a \\<sigma>' s'\n  assumes \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> oparp_sos i (oseqp_sos \\<Gamma> i) (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\"\n      and \"a \\<noteq> \\<tau>\"\n    shows \"\\<sigma>' i = \\<sigma> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", "from assms(1)"], ["proof (chain)\npicking this:\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> oparp_sos i (oseqp_sos \\<Gamma> i)\n         (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)", "obtain p q p' q'\n      where \"((\\<sigma>, (p, q)), a, (\\<sigma>', (p', q'))) \\<in> oparp_sos i (oseqp_sos \\<Gamma> i) (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> oparp_sos i (oseqp_sos \\<Gamma> i)\n         (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\n\ngoal (1 subgoal):\n 1. (\\<And>p q p' q'.\n        ((\\<sigma>, p, q), a, \\<sigma>', p', q')\n        \\<in> oparp_sos i (oseqp_sos \\<Gamma> i)\n               (seqp_sos\n                 \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases s, cases s', simp)"], ["proof (state)\nthis:\n  ((\\<sigma>, p, q), a, \\<sigma>', p', q')\n  \\<in> oparp_sos i (oseqp_sos \\<Gamma> i)\n         (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\n\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", "thus ?thesis"], ["proof (prove)\nusing this:\n  ((\\<sigma>, p, q), a, \\<sigma>', p', q')\n  \\<in> oparp_sos i (oseqp_sos \\<Gamma> i)\n         (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\n\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>((\\<sigma>, p), a, \\<sigma>', p') \\<in> oseqp_sos \\<Gamma> i;\n     \\<And>m. a \\<noteq> receive m; q' = q\\<rbrakk>\n    \\<Longrightarrow> \\<sigma>' i = \\<sigma> i\n 2. \\<lbrakk>(q, a, q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> \\<sigma>' i = \\<sigma> i\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma> i;\n        (q, send m, q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' i = \\<sigma> i", "assume \"((\\<sigma>, p), a, (\\<sigma>', p')) \\<in> oseqp_sos \\<Gamma> i\"\n         and \"\\<And>m. a \\<noteq> receive m\""], ["proof (state)\nthis:\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> oseqp_sos \\<Gamma> i\n  a \\<noteq> receive ?m\n\ngoal (3 subgoals):\n 1. \\<lbrakk>((\\<sigma>, p), a, \\<sigma>', p') \\<in> oseqp_sos \\<Gamma> i;\n     \\<And>m. a \\<noteq> receive m; q' = q\\<rbrakk>\n    \\<Longrightarrow> \\<sigma>' i = \\<sigma> i\n 2. \\<lbrakk>(q, a, q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> \\<sigma>' i = \\<sigma> i\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma> i;\n        (q, send m, q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' i = \\<sigma> i", "with \\<open>a \\<noteq> \\<tau>\\<close>"], ["proof (chain)\npicking this:\n  a \\<noteq> \\<tau>\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> oseqp_sos \\<Gamma> i\n  a \\<noteq> receive ?m", "show \"\\<sigma>' i = \\<sigma> i\""], ["proof (prove)\nusing this:\n  a \\<noteq> \\<tau>\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> oseqp_sos \\<Gamma> i\n  a \\<noteq> receive ?m\n\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", "by - (drule oseq_no_change_on_send, cases a, auto)"], ["proof (state)\nthis:\n  \\<sigma>' i = \\<sigma> i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(q, a, q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> \\<sigma>' i = \\<sigma> i\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma> i;\n        (q, send m, q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' i = \\<sigma> i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(q, a, q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> \\<sigma>' i = \\<sigma> i\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma> i;\n        (q, send m, q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' i = \\<sigma> i", "assume \"(q, a, q') \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\"\n         and \"\\<sigma>' i = \\<sigma> i\""], ["proof (state)\nthis:\n  (q, a, q') \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n  \\<sigma>' i = \\<sigma> i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(q, a, q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> \\<sigma>' i = \\<sigma> i\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma> i;\n        (q, send m, q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' i = \\<sigma> i", "thus \"\\<sigma>' i = \\<sigma> i\""], ["proof (prove)\nusing this:\n  (q, a, q') \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", "by simp"], ["proof (state)\nthis:\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma> i;\n        (q, send m, q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' i = \\<sigma> i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma> i;\n        (q, send m, q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' i = \\<sigma> i", "assume \"a = \\<tau>\""], ["proof (state)\nthis:\n  a = \\<tau>\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma> i;\n        (q, send m, q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' i = \\<sigma> i", "with \\<open>a \\<noteq> \\<tau>\\<close>"], ["proof (chain)\npicking this:\n  a \\<noteq> \\<tau>\n  a = \\<tau>", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> \\<tau>\n  a = \\<tau>\n\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", "by auto"], ["proof (state)\nthis:\n  \\<sigma>' i = \\<sigma> i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<sigma>' i = \\<sigma> i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qmsg_msgs_not_empty:\n  \"qmsg \\<TTurnstile> onl \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G (\\<lambda>(msgs, l). l = ()-:1 \\<longrightarrow> msgs \\<noteq> [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile> onl \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n                        (\\<lambda>(msgs, l).\n                            l = ()-:1 \\<longrightarrow> msgs \\<noteq> [])", "by inv_cterms"], ["", "lemma qmsg_send_from_queue:\n  \"qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>((msgs, q), a, _). sendmsg (\\<lambda>m. m\\<in>set msgs) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>((msgs, q), a, uu_).\n                                   sendmsg (\\<lambda>m. m \\<in> set msgs) a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>((msgs, q), a, uu_).\n                                   sendmsg (\\<lambda>m. m \\<in> set msgs) a)", "have \"qmsg \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G (\\<lambda>((msgs, _), a, _). sendmsg (\\<lambda>m. m\\<in>set msgs) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n                                (\\<lambda>((msgs, uu_), a, uu_).\n                                    sendmsg (\\<lambda>m. m \\<in> set msgs)\n                                     a)", "by (inv_cterms inv add: onl_invariant_sterms [OF qmsg_wf qmsg_msgs_not_empty])"], ["proof (state)\nthis:\n  qmsg \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n                              (\\<lambda>((msgs, uu_), a, uu_).\n                                  sendmsg (\\<lambda>m. m \\<in> set msgs) a)\n\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>((msgs, q), a, uu_).\n                                   sendmsg (\\<lambda>m. m \\<in> set msgs) a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  qmsg \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n                              (\\<lambda>((msgs, uu_), a, uu_).\n                                  sendmsg (\\<lambda>m. m \\<in> set msgs) a)\n\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>((msgs, q), a, uu_).\n                                   sendmsg (\\<lambda>m. m \\<in> set msgs) a)", "by (rule step_invariant_weakenE) (auto dest!: onllD)"], ["proof (state)\nthis:\n  qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>((msgs, q), a, uu_).\n                                 sendmsg (\\<lambda>m. m \\<in> set msgs) a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qmsg_queue_contents:\n  \"qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>((msgs, q), a, (msgs', q')). case a of\n                                             receive m \\<Rightarrow> set msgs' \\<subseteq> set (msgs @ [m])\n                                           | _ \\<Rightarrow> set msgs' \\<subseteq> set msgs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>((msgs, q), a, msgs', q').\n                                   case a of\n                                   receive m \\<Rightarrow>\n                                     set msgs' \\<subseteq> set (msgs @ [m])\n                                   | _ \\<Rightarrow>\n set msgs' \\<subseteq> set msgs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>((msgs, q), a, msgs', q').\n                                   case a of\n                                   receive m \\<Rightarrow>\n                                     set msgs' \\<subseteq> set (msgs @ [m])\n                                   | _ \\<Rightarrow>\n set msgs' \\<subseteq> set msgs)", "have \"qmsg \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G (\\<lambda>((msgs, q), a, (msgs', q')).\n                                     case a of\n                                       receive m \\<Rightarrow> set msgs' \\<subseteq> set (msgs @ [m])\n                                     | _ \\<Rightarrow> set msgs' \\<subseteq> set msgs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n                                (\\<lambda>((msgs, q), a, msgs', q').\n                                    case a of\n                                    receive m \\<Rightarrow>\nset msgs' \\<subseteq> set (msgs @ [m])\n                                    | _ \\<Rightarrow>\n  set msgs' \\<subseteq> set msgs)", "by (inv_cterms) (clarsimp simp add: in_set_tl)+"], ["proof (state)\nthis:\n  qmsg \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n                              (\\<lambda>((msgs, q), a, msgs', q').\n                                  case a of\n                                  receive m \\<Rightarrow>\n                                    set msgs' \\<subseteq> set (msgs @ [m])\n                                  | _ \\<Rightarrow>\nset msgs' \\<subseteq> set msgs)\n\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>((msgs, q), a, msgs', q').\n                                   case a of\n                                   receive m \\<Rightarrow>\n                                     set msgs' \\<subseteq> set (msgs @ [m])\n                                   | _ \\<Rightarrow>\n set msgs' \\<subseteq> set msgs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  qmsg \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n                              (\\<lambda>((msgs, q), a, msgs', q').\n                                  case a of\n                                  receive m \\<Rightarrow>\n                                    set msgs' \\<subseteq> set (msgs @ [m])\n                                  | _ \\<Rightarrow>\nset msgs' \\<subseteq> set msgs)\n\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>((msgs, q), a, msgs', q').\n                                   case a of\n                                   receive m \\<Rightarrow>\n                                     set msgs' \\<subseteq> set (msgs @ [m])\n                                   | _ \\<Rightarrow>\n set msgs' \\<subseteq> set msgs)", "by (rule step_invariant_weakenE) (auto dest!: onllD)"], ["proof (state)\nthis:\n  qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>((msgs, q), a, msgs', q').\n                                 case a of\n                                 receive m \\<Rightarrow>\n                                   set msgs' \\<subseteq> set (msgs @ [m])\n                                 | _ \\<Rightarrow>\n                                     set msgs' \\<subseteq> set msgs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qmsg_send_receive_or_tau:\n  \"qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>(_, a, _). \\<exists>m. a = send m \\<or> a = receive m \\<or> a = \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>(uu_, a, uu_).\n                                   \\<exists>m.\na = send m \\<or> a = receive m \\<or> a = \\<tau>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>(uu_, a, uu_).\n                                   \\<exists>m.\na = send m \\<or> a = receive m \\<or> a = \\<tau>)", "have \"qmsg \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G (\\<lambda>(_, a, _). \\<exists>m. a = send m \\<or> a = receive m \\<or> a = \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n                                (\\<lambda>(uu_, a, uu_).\n                                    \\<exists>m.\n a = send m \\<or> a = receive m \\<or> a = \\<tau>)", "by inv_cterms"], ["proof (state)\nthis:\n  qmsg \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n                              (\\<lambda>(uu_, a, uu_).\n                                  \\<exists>m.\n                                     a = send m \\<or>\n                                     a = receive m \\<or> a = \\<tau>)\n\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>(uu_, a, uu_).\n                                   \\<exists>m.\na = send m \\<or> a = receive m \\<or> a = \\<tau>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  qmsg \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n                              (\\<lambda>(uu_, a, uu_).\n                                  \\<exists>m.\n                                     a = send m \\<or>\n                                     a = receive m \\<or> a = \\<tau>)\n\ngoal (1 subgoal):\n 1. qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>(uu_, a, uu_).\n                                   \\<exists>m.\na = send m \\<or> a = receive m \\<or> a = \\<tau>)", "by rule (auto dest!: onllD)"], ["proof (state)\nthis:\n  qmsg \\<TTurnstile>\\<^sub>A (\\<lambda>(uu_, a, uu_).\n                                 \\<exists>m.\n                                    a = send m \\<or>\n                                    a = receive m \\<or> a = \\<tau>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma par_qmsg_oreachable:\n  assumes \"(\\<sigma>, \\<zeta>) \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) (otherwith S {i} (orecvmsg R)) (other U {i})\"\n           (is \"_ \\<in> oreachable _ ?owS _\")\n      and pinv: \"A \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>)\n                       globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). U (\\<sigma> i) (\\<sigma>' i))\"\n      and ustutter: \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n      and sgivesu: \"\\<And>\\<xi> \\<xi>'. S \\<xi> \\<xi>' \\<Longrightarrow> U \\<xi> \\<xi>'\"\n      and upreservesq: \"\\<And>\\<sigma> \\<sigma>' m. \\<lbrakk> \\<forall>j. U (\\<sigma> j) (\\<sigma>' j); R \\<sigma> m \\<rbrakk> \\<Longrightarrow> R \\<sigma>' m\"\n  shows \"(\\<sigma>, fst \\<zeta>) \\<in> oreachable A ?owS (other U {i})\n         \\<and> snd \\<zeta> \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n         \\<and> (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R \\<sigma> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, fst \\<zeta>)\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n    snd \\<zeta> \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n    (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R \\<sigma> m)", "using assms(1)"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (1 subgoal):\n 1. (\\<sigma>, fst \\<zeta>)\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n    snd \\<zeta> \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n    (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R \\<sigma> m)", "proof (induction rule: oreachable_pair_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p)\n       \\<in> init\n              (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) \\<Longrightarrow>\n       (\\<sigma>, fst p)\n       \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n              (other U {i}) \\<and>\n       snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n       (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m)\n 2. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 3. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "fix \\<sigma> pq"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p)\n       \\<in> init\n              (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) \\<Longrightarrow>\n       (\\<sigma>, fst p)\n       \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n              (other U {i}) \\<and>\n       snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n       (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m)\n 2. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 3. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "assume \"(\\<sigma>, pq) \\<in> init (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\""], ["proof (state)\nthis:\n  (\\<sigma>, pq) \\<in> init (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p)\n       \\<in> init\n              (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) \\<Longrightarrow>\n       (\\<sigma>, fst p)\n       \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n              (other U {i}) \\<and>\n       snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n       (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m)\n 2. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 3. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "then"], ["proof (chain)\npicking this:\n  (\\<sigma>, pq) \\<in> init (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)", "obtain p ms q where \"pq = (p, (ms, q))\"\n                         and \"(\\<sigma>, p) \\<in> init A\"\n                         and \"(ms, q) \\<in> init qmsg\""], ["proof (prove)\nusing this:\n  (\\<sigma>, pq) \\<in> init (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n\ngoal (1 subgoal):\n 1. (\\<And>p ms q.\n        \\<lbrakk>pq = (p, ms, q); (\\<sigma>, p) \\<in> init A;\n         (ms, q) \\<in> init qmsg\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (clarsimp simp del: \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G_simps)"], ["proof (state)\nthis:\n  pq = (p, ms, q)\n  (\\<sigma>, p) \\<in> init A\n  (ms, q) \\<in> init qmsg\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p)\n       \\<in> init\n              (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) \\<Longrightarrow>\n       (\\<sigma>, fst p)\n       \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n              (other U {i}) \\<and>\n       snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n       (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m)\n 2. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 3. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "from this(2)"], ["proof (chain)\npicking this:\n  (\\<sigma>, p) \\<in> init A", "have \"(\\<sigma>, p) \\<in> oreachable A ?owS (other U {i})\""], ["proof (prove)\nusing this:\n  (\\<sigma>, p) \\<in> init A\n\ngoal (1 subgoal):\n 1. (\\<sigma>, p)\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})", ".."], ["proof (state)\nthis:\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p)\n       \\<in> init\n              (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) \\<Longrightarrow>\n       (\\<sigma>, fst p)\n       \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n              (other U {i}) \\<and>\n       snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n       (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m)\n 2. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 3. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p)\n       \\<in> init\n              (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) \\<Longrightarrow>\n       (\\<sigma>, fst p)\n       \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n              (other U {i}) \\<and>\n       snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n       (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m)\n 2. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 3. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "from \\<open>(ms, q) \\<in> init qmsg\\<close>"], ["proof (chain)\npicking this:\n  (ms, q) \\<in> init qmsg", "have \"(ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\""], ["proof (prove)\nusing this:\n  (ms, q) \\<in> init qmsg\n\ngoal (1 subgoal):\n 1. (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))", ".."], ["proof (state)\nthis:\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p)\n       \\<in> init\n              (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) \\<Longrightarrow>\n       (\\<sigma>, fst p)\n       \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n              (other U {i}) \\<and>\n       snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n       (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m)\n 2. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 3. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "moreover"], ["proof (state)\nthis:\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p)\n       \\<in> init\n              (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) \\<Longrightarrow>\n       (\\<sigma>, fst p)\n       \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n              (other U {i}) \\<and>\n       snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n       (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m)\n 2. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 3. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "from \\<open>(ms, q) \\<in> init qmsg\\<close>"], ["proof (chain)\npicking this:\n  (ms, q) \\<in> init qmsg", "have \"ms = []\""], ["proof (prove)\nusing this:\n  (ms, q) \\<in> init qmsg\n\ngoal (1 subgoal):\n 1. ms = []", "unfolding \\<sigma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G_def"], ["proof (prove)\nusing this:\n  (ms, q)\n  \\<in> init\n         \\<lparr>init = {([], \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G ())},\n            trans =\n              seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rparr>\n\ngoal (1 subgoal):\n 1. ms = []", "by simp"], ["proof (state)\nthis:\n  ms = []\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p)\n       \\<in> init\n              (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) \\<Longrightarrow>\n       (\\<sigma>, fst p)\n       \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n              (other U {i}) \\<and>\n       snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n       (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m)\n 2. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 3. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n  ms = []", "show \"(\\<sigma>, fst pq) \\<in> oreachable A ?owS (other U {i})\n                     \\<and> snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n                     \\<and> (\\<forall>m\\<in>set (fst (snd pq)). R \\<sigma> m)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n  ms = []\n\ngoal (1 subgoal):\n 1. (\\<sigma>, fst pq)\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n    snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n    (\\<forall>m\\<in>set (fst (snd pq)). R \\<sigma> m)", "using \\<open>pq = (p, (ms, q))\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n  ms = []\n  pq = (p, ms, q)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, fst pq)\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n    snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n    (\\<forall>m\\<in>set (fst (snd pq)). R \\<sigma> m)", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>, fst pq)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n  snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n  (\\<forall>m\\<in>set (fst (snd pq)). R \\<sigma> m)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "note \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G_simps [simp del]"], ["proof (state)\nthis:\n  \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G () =\n  {()-:0}receive(\\<lambda>msg msgs. msgs @ [msg]) .\n  call(())\n  \\<oplus>\n  {()-:0}\\<langle>\\<lambda>msgs. if msgs \\<noteq> [] then {msgs} else {}\\<rangle>\n  ({()-:1}send(hd) .\n   ({()-:2}\\<lbrakk>tl\\<rbrakk>\n    call(())\n    \\<oplus>\n    {()-:2}receive(\\<lambda>msg msgs. tl msgs @ [msg]) .\n    call(()))\n   \\<oplus>\n   {()-:1}receive(\\<lambda>msg msgs. msgs @ [msg]) .\n   call(()))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "case (other \\<sigma> pq \\<sigma>')"], ["proof (state)\nthis:\n  (\\<sigma>, pq)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith S {i} (orecvmsg R)) (other U {i})\n  other U {i} \\<sigma> \\<sigma>'\n  (\\<sigma>, fst pq)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n  snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n  (\\<forall>m\\<in>set (fst (snd pq)). R \\<sigma> m)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "hence \"(\\<sigma>, fst pq) \\<in> oreachable A ?owS (other U {i})\"\n      and \"other U {i} \\<sigma> \\<sigma>'\"\n      and qr: \"snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>))\"\n      and \"\\<forall>m\\<in>set (fst (snd pq)). R \\<sigma> m\""], ["proof (prove)\nusing this:\n  (\\<sigma>, pq)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith S {i} (orecvmsg R)) (other U {i})\n  other U {i} \\<sigma> \\<sigma>'\n  (\\<sigma>, fst pq)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n  snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n  (\\<forall>m\\<in>set (fst (snd pq)). R \\<sigma> m)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, fst pq)\n     \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) &&&\n     other U {i} \\<sigma> \\<sigma>') &&&\n    snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>)) &&&\n    \\<forall>m\\<in>set (fst (snd pq)). R \\<sigma> m", "by simp_all"], ["proof (state)\nthis:\n  (\\<sigma>, fst pq)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  other U {i} \\<sigma> \\<sigma>'\n  snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n  \\<forall>m\\<in>set (fst (snd pq)). R \\<sigma> m\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "from \\<open>other U {i} \\<sigma> \\<sigma>'\\<close> and ustutter"], ["proof (chain)\npicking this:\n  other U {i} \\<sigma> \\<sigma>'\n  U ?\\<xi> ?\\<xi>", "have \"\\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  other U {i} \\<sigma> \\<sigma>'\n  U ?\\<xi> ?\\<xi>\n\ngoal (1 subgoal):\n 1. \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)", "by (clarsimp elim!: otherE) metis"], ["proof (state)\nthis:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "from \\<open>other U {i} \\<sigma> \\<sigma>'\\<close>\n     and \\<open>(\\<sigma>, fst pq) \\<in> oreachable A ?owS (other U {i})\\<close>"], ["proof (chain)\npicking this:\n  other U {i} \\<sigma> \\<sigma>'\n  (\\<sigma>, fst pq)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})", "have \"(\\<sigma>', fst pq) \\<in> oreachable A ?owS (other U {i})\""], ["proof (prove)\nusing this:\n  other U {i} \\<sigma> \\<sigma>'\n  (\\<sigma>, fst pq)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (1 subgoal):\n 1. (\\<sigma>', fst pq)\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})", "by - (rule oreachable_other')"], ["proof (state)\nthis:\n  (\\<sigma>', fst pq)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', fst pq)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "have \"\\<forall>m\\<in>set (fst (snd pq)). R \\<sigma>' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m\\<in>set (fst (snd pq)). R \\<sigma>' m", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set (fst (snd pq)) \\<Longrightarrow> R \\<sigma>' m", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set (fst (snd pq)) \\<Longrightarrow> R \\<sigma>' m", "assume \"m \\<in> set (fst (snd pq))\""], ["proof (state)\nthis:\n  m \\<in> set (fst (snd pq))\n\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set (fst (snd pq)) \\<Longrightarrow> R \\<sigma>' m", "with \\<open>\\<forall>m\\<in>set (fst (snd pq)). R \\<sigma> m\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>m\\<in>set (fst (snd pq)). R \\<sigma> m\n  m \\<in> set (fst (snd pq))", "have \"R \\<sigma> m\""], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>set (fst (snd pq)). R \\<sigma> m\n  m \\<in> set (fst (snd pq))\n\ngoal (1 subgoal):\n 1. R \\<sigma> m", ".."], ["proof (state)\nthis:\n  R \\<sigma> m\n\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set (fst (snd pq)) \\<Longrightarrow> R \\<sigma>' m", "with \\<open>\\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n  R \\<sigma> m", "show \"R \\<sigma>' m\""], ["proof (prove)\nusing this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n  R \\<sigma> m\n\ngoal (1 subgoal):\n 1. R \\<sigma>' m", "by (rule upreservesq)"], ["proof (state)\nthis:\n  R \\<sigma>' m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>m\\<in>set (fst (snd pq)). R \\<sigma>' m\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "moreover"], ["proof (state)\nthis:\n  \\<forall>m\\<in>set (fst (snd pq)). R \\<sigma>' m\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "from qr"], ["proof (chain)\npicking this:\n  snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>))", "have \"snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\""], ["proof (prove)\nusing this:\n  snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n\ngoal (1 subgoal):\n 1. snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>'))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       recvmsg (R \\<sigma>) a \\<Longrightarrow> recvmsg (R \\<sigma>') a", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       recvmsg (R \\<sigma>) a \\<Longrightarrow> recvmsg (R \\<sigma>') a", "assume \"recvmsg (R \\<sigma>) a\""], ["proof (state)\nthis:\n  recvmsg (R \\<sigma>) a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       recvmsg (R \\<sigma>) a \\<Longrightarrow> recvmsg (R \\<sigma>') a", "thus \"recvmsg (R \\<sigma>') a\""], ["proof (prove)\nusing this:\n  recvmsg (R \\<sigma>) a\n\ngoal (1 subgoal):\n 1. recvmsg (R \\<sigma>') a", "proof (rule recvmsgE [where R=R])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. R \\<sigma> m \\<Longrightarrow> R \\<sigma>' m", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. R \\<sigma> m \\<Longrightarrow> R \\<sigma>' m", "assume \"R \\<sigma> m\""], ["proof (state)\nthis:\n  R \\<sigma> m\n\ngoal (1 subgoal):\n 1. \\<And>m. R \\<sigma> m \\<Longrightarrow> R \\<sigma>' m", "with \\<open>\\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n  R \\<sigma> m", "show \"R \\<sigma>' m\""], ["proof (prove)\nusing this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n  R \\<sigma> m\n\ngoal (1 subgoal):\n 1. R \\<sigma>' m", "by (rule upreservesq)"], ["proof (state)\nthis:\n  R \\<sigma>' m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  recvmsg (R \\<sigma>') a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        other U {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p)\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma>' m)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', fst pq)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  \\<forall>m\\<in>set (fst (snd pq)). R \\<sigma>' m\n  snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>'))", "show ?case"], ["proof (prove)\nusing this:\n  (\\<sigma>', fst pq)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  \\<forall>m\\<in>set (fst (snd pq)). R \\<sigma>' m\n  snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', fst pq)\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n    snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n    (\\<forall>m\\<in>set (fst (snd pq)). R \\<sigma>' m)", "using qr"], ["proof (prove)\nusing this:\n  (\\<sigma>', fst pq)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  \\<forall>m\\<in>set (fst (snd pq)). R \\<sigma>' m\n  snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n  snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', fst pq)\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n    snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n    (\\<forall>m\\<in>set (fst (snd pq)). R \\<sigma>' m)", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>', fst pq)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n  snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n  (\\<forall>m\\<in>set (fst (snd pq)). R \\<sigma>' m)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "case (local \\<sigma> pq \\<sigma>' pq' a)"], ["proof (state)\nthis:\n  (\\<sigma>, pq)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith S {i} (orecvmsg R)) (other U {i})\n  ((\\<sigma>, pq), a, \\<sigma>', pq')\n  \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\n  (\\<sigma>, fst pq)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n  snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n  (\\<forall>m\\<in>set (fst (snd pq)). R \\<sigma> m)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "obtain p ms q p' ms' q' where \"pq = (p, (ms, q))\"\n                              and \"pq' = (p', (ms', q'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p ms q p' ms' q'.\n        \\<lbrakk>pq = (p, ms, q); pq' = (p', ms', q')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases pq, cases pq') metis"], ["proof (state)\nthis:\n  pq = (p, ms, q)\n  pq' = (p', ms', q')\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "with local.hyps local.IH"], ["proof (chain)\npicking this:\n  (\\<sigma>, pq)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith S {i} (orecvmsg R)) (other U {i})\n  ((\\<sigma>, pq), a, \\<sigma>', pq')\n  \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\n  (\\<sigma>, fst pq)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n  snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n  (\\<forall>m\\<in>set (fst (snd pq)). R \\<sigma> m)\n  pq = (p, ms, q)\n  pq' = (p', ms', q')", "have pqtr: \"((\\<sigma>, (p, (ms, q))), a, (\\<sigma>', (p', (ms', q'))))\n                    \\<in> oparp_sos i (trans A) (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\"\n        and por: \"(\\<sigma>, p) \\<in> oreachable A ?owS (other U {i})\"\n        and qr: \"(ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\"\n        and \"\\<forall>m\\<in>set ms. R \\<sigma> m\"\n        and \"?owS \\<sigma> \\<sigma>' a\""], ["proof (prove)\nusing this:\n  (\\<sigma>, pq)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith S {i} (orecvmsg R)) (other U {i})\n  ((\\<sigma>, pq), a, \\<sigma>', pq')\n  \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\n  (\\<sigma>, fst pq)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n  snd pq \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n  (\\<forall>m\\<in>set (fst (snd pq)). R \\<sigma> m)\n  pq = (p, ms, q)\n  pq' = (p', ms', q')\n\ngoal (1 subgoal):\n 1. (((\\<sigma>, p, ms, q), a, \\<sigma>', p', ms', q')\n     \\<in> oparp_sos i (automaton.trans A)\n            (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G) &&&\n     (\\<sigma>, p)\n     \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})) &&&\n    (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>)) &&&\n    \\<forall>m\\<in>set ms. R \\<sigma> m &&&\n    otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a", "by (simp_all del: \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G_simps)"], ["proof (state)\nthis:\n  ((\\<sigma>, p, ms, q), a, \\<sigma>', p', ms', q')\n  \\<in> oparp_sos i (automaton.trans A)\n         (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n  \\<forall>m\\<in>set ms. R \\<sigma> m\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "from \\<open>?owS \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a", "have \"\\<forall>j. j\\<noteq>i \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<forall>j. j \\<noteq> i \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)", "by (clarsimp dest!: otherwith_syncD)"], ["proof (state)\nthis:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "with sgivesu"], ["proof (chain)\npicking this:\n  S ?\\<xi> ?\\<xi>' \\<Longrightarrow> U ?\\<xi> ?\\<xi>'\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)", "have \"\\<forall>j. j\\<noteq>i \\<longrightarrow> U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  S ?\\<xi> ?\\<xi>' \\<Longrightarrow> U ?\\<xi> ?\\<xi>'\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<forall>j. j \\<noteq> i \\<longrightarrow> U (\\<sigma> j) (\\<sigma>' j)", "by simp"], ["proof (state)\nthis:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "from \\<open>?owS \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a", "have \"orecvmsg R \\<sigma> a\""], ["proof (prove)\nusing this:\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. orecvmsg R \\<sigma> a", "by (rule otherwithE)"], ["proof (state)\nthis:\n  orecvmsg R \\<sigma> a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "hence \"recvmsg (R \\<sigma>) a\""], ["proof (prove)\nusing this:\n  orecvmsg R \\<sigma> a\n\ngoal (1 subgoal):\n 1. recvmsg (R \\<sigma>) a", ".."], ["proof (state)\nthis:\n  recvmsg (R \\<sigma>) a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "from pqtr"], ["proof (chain)\npicking this:\n  ((\\<sigma>, p, ms, q), a, \\<sigma>', p', ms', q')\n  \\<in> oparp_sos i (automaton.trans A)\n         (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)", "have \"(\\<sigma>', p') \\<in> oreachable A ?owS (other U {i})\n                  \\<and> (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n                  \\<and> (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, p, ms, q), a, \\<sigma>', p', ms', q')\n  \\<in> oparp_sos i (automaton.trans A)\n         (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p')\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n    (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n    (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n     \\<And>m. a \\<noteq> receive m; (ms', q') = (ms, q)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "assume \"((\\<sigma>, p), a, (\\<sigma>', p')) \\<in> trans A\"\n         and \"\\<And>m. a \\<noteq> receive m\"\n         and \"(ms', q') = (ms, q)\""], ["proof (state)\nthis:\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A\n  a \\<noteq> receive ?m1\n  (ms', q') = (ms, q)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n     \\<And>m. a \\<noteq> receive m; (ms', q') = (ms, q)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "from this(1)"], ["proof (chain)\npicking this:\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A", "have ptr: \"((\\<sigma>, p), a, (\\<sigma>', p')) \\<in> trans A\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A\n\ngoal (3 subgoals):\n 1. \\<lbrakk>((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n     \\<And>m. a \\<noteq> receive m; (ms', q') = (ms, q)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "with pinv por and \\<open>?owS \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  A \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg R),\n                          other U {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                               U (\\<sigma> i) (\\<sigma>' i))\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A", "have \"U (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  A \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg R),\n                          other U {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                               U (\\<sigma> i) (\\<sigma>' i))\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A\n\ngoal (1 subgoal):\n 1. U (\\<sigma> i) (\\<sigma>' i)", "by (auto dest!: ostep_invariantD)"], ["proof (state)\nthis:\n  U (\\<sigma> i) (\\<sigma>' i)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n     \\<And>m. a \\<noteq> receive m; (ms', q') = (ms, q)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "with \\<open>\\<forall>j. j\\<noteq>i \\<longrightarrow> U (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> U (\\<sigma> j) (\\<sigma>' j)\n  U (\\<sigma> i) (\\<sigma>' i)", "have \"\\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> U (\\<sigma> j) (\\<sigma>' j)\n  U (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)", "by auto"], ["proof (state)\nthis:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n     \\<And>m. a \\<noteq> receive m; (ms', q') = (ms, q)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "hence recvmsg': \"\\<And>a. recvmsg (R \\<sigma>) a \\<Longrightarrow> recvmsg (R \\<sigma>') a\""], ["proof (prove)\nusing this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       recvmsg (R \\<sigma>) a \\<Longrightarrow> recvmsg (R \\<sigma>') a", "by (auto elim!: recvmsgE [where R=R] upreservesq)"], ["proof (state)\nthis:\n  recvmsg (R \\<sigma>) ?a1 \\<Longrightarrow> recvmsg (R \\<sigma>') ?a1\n\ngoal (3 subgoals):\n 1. \\<lbrakk>((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n     \\<And>m. a \\<noteq> receive m; (ms', q') = (ms, q)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "from por ptr \\<open>?owS \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a", "have \"(\\<sigma>', p') \\<in> oreachable A ?owS (other U {i})\""], ["proof (prove)\nusing this:\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p')\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})", "by - (rule oreachable_local')"], ["proof (state)\nthis:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (3 subgoals):\n 1. \\<lbrakk>((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n     \\<And>m. a \\<noteq> receive m; (ms', q') = (ms, q)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (3 subgoals):\n 1. \\<lbrakk>((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n     \\<And>m. a \\<noteq> receive m; (ms', q') = (ms, q)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "have \"(ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))", "from qr and \\<open>(ms', q') = (ms, q)\\<close>"], ["proof (chain)\npicking this:\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n  (ms', q') = (ms, q)", "have \"(ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>))\""], ["proof (prove)\nusing this:\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n  (ms', q') = (ms, q)\n\ngoal (1 subgoal):\n 1. (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>))", "by simp"], ["proof (state)\nthis:\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n\ngoal (1 subgoal):\n 1. (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n\ngoal (1 subgoal):\n 1. (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))", "by (rule reachable_weakenE) (erule recvmsg')"], ["proof (state)\nthis:\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n\ngoal (3 subgoals):\n 1. \\<lbrakk>((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n     \\<And>m. a \\<noteq> receive m; (ms', q') = (ms, q)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "moreover"], ["proof (state)\nthis:\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n\ngoal (3 subgoals):\n 1. \\<lbrakk>((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n     \\<And>m. a \\<noteq> receive m; (ms', q') = (ms, q)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "have \"\\<forall>m\\<in>set ms'. R \\<sigma>' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m\\<in>set ms'. R \\<sigma>' m", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "assume \"m\\<in>set ms'\""], ["proof (state)\nthis:\n  m \\<in> set ms'\n\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "with \\<open>(ms', q') = (ms, q)\\<close>"], ["proof (chain)\npicking this:\n  (ms', q') = (ms, q)\n  m \\<in> set ms'", "have \"m\\<in>set ms\""], ["proof (prove)\nusing this:\n  (ms', q') = (ms, q)\n  m \\<in> set ms'\n\ngoal (1 subgoal):\n 1. m \\<in> set ms", "by simp"], ["proof (state)\nthis:\n  m \\<in> set ms\n\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "with \\<open>\\<forall>m\\<in>set ms. R \\<sigma> m\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>m\\<in>set ms. R \\<sigma> m\n  m \\<in> set ms", "have \"R \\<sigma> m\""], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>set ms. R \\<sigma> m\n  m \\<in> set ms\n\ngoal (1 subgoal):\n 1. R \\<sigma> m", ".."], ["proof (state)\nthis:\n  R \\<sigma> m\n\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "with \\<open>\\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n  R \\<sigma> m", "show \"R \\<sigma>' m\""], ["proof (prove)\nusing this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n  R \\<sigma> m\n\ngoal (1 subgoal):\n 1. R \\<sigma>' m", "by (rule upreservesq)"], ["proof (state)\nthis:\n  R \\<sigma>' m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>m\\<in>set ms'. R \\<sigma>' m\n\ngoal (3 subgoals):\n 1. \\<lbrakk>((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n     \\<And>m. a \\<noteq> receive m; (ms', q') = (ms, q)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n  \\<forall>m\\<in>set ms'. R \\<sigma>' m", "show\n        \"(\\<sigma>', p') \\<in> oreachable A ?owS (other U {i})\n          \\<and> (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n          \\<and> (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\""], ["proof (prove)\nusing this:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n  \\<forall>m\\<in>set ms'. R \\<sigma>' m\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p')\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n    (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n    (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "by simp_all"], ["proof (state)\nthis:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n  (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "assume qtr: \"((ms, q), a, (ms', q')) \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\"\n         and \"\\<And>m. a \\<noteq> send m\"\n         and \"p' = p\"\n         and \"\\<sigma>' i = \\<sigma> i\""], ["proof (state)\nthis:\n  ((ms, q), a, ms', q')\n  \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n  a \\<noteq> send ?m1\n  p' = p\n  \\<sigma>' i = \\<sigma> i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "from this(4) and \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>"], ["proof (chain)\npicking this:\n  \\<sigma>' i = \\<sigma> i\n  U ?\\<xi> ?\\<xi>", "have \"U (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  \\<sigma>' i = \\<sigma> i\n  U ?\\<xi> ?\\<xi>\n\ngoal (1 subgoal):\n 1. U (\\<sigma> i) (\\<sigma>' i)", "by simp"], ["proof (state)\nthis:\n  U (\\<sigma> i) (\\<sigma>' i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "with \\<open>\\<forall>j. j\\<noteq>i \\<longrightarrow> U (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> U (\\<sigma> j) (\\<sigma>' j)\n  U (\\<sigma> i) (\\<sigma>' i)", "have \"\\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> U (\\<sigma> j) (\\<sigma>' j)\n  U (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)", "by auto"], ["proof (state)\nthis:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "hence recvmsg': \"\\<And>a. recvmsg (R \\<sigma>) a \\<Longrightarrow> recvmsg (R \\<sigma>') a\""], ["proof (prove)\nusing this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       recvmsg (R \\<sigma>) a \\<Longrightarrow> recvmsg (R \\<sigma>') a", "by (auto elim!: recvmsgE [where R=R] upreservesq)"], ["proof (state)\nthis:\n  recvmsg (R \\<sigma>) ?a1 \\<Longrightarrow> recvmsg (R \\<sigma>') ?a1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "from qtr"], ["proof (chain)\npicking this:\n  ((ms, q), a, ms', q')\n  \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G", "have tqtr: \"((ms, q), a, (ms', q')) \\<in> trans qmsg\""], ["proof (prove)\nusing this:\n  ((ms, q), a, ms', q')\n  \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n\ngoal (1 subgoal):\n 1. ((ms, q), a, ms', q') \\<in> automaton.trans qmsg", "by simp"], ["proof (state)\nthis:\n  ((ms, q), a, ms', q') \\<in> automaton.trans qmsg\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "from \\<open>\\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\\<close> and  \\<open>\\<sigma>' i = \\<sigma> i\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n  \\<sigma>' i = \\<sigma> i", "have \"other U {i} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. other U {i} \\<sigma> \\<sigma>'", "by auto"], ["proof (state)\nthis:\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "with por and \\<open>p' = p\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  p' = p\n  other U {i} \\<sigma> \\<sigma>'", "have \"(\\<sigma>', p') \\<in> oreachable A ?owS (other U {i})\""], ["proof (prove)\nusing this:\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  p' = p\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p')\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})", "by (auto dest: oreachable_other)"], ["proof (state)\nthis:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "have \"(ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))", "proof (rule reachable_weakenE [where P=\"recvmsg (R \\<sigma>)\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n 2. \\<And>a.\n       recvmsg (R \\<sigma>) a \\<Longrightarrow> recvmsg (R \\<sigma>') a", "from qr tqtr \\<open>recvmsg (R \\<sigma>) a\\<close>"], ["proof (chain)\npicking this:\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n  ((ms, q), a, ms', q') \\<in> automaton.trans qmsg\n  recvmsg (R \\<sigma>) a", "show \"(ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>))\""], ["proof (prove)\nusing this:\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n  ((ms, q), a, ms', q') \\<in> automaton.trans qmsg\n  recvmsg (R \\<sigma>) a\n\ngoal (1 subgoal):\n 1. (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>))", ".."], ["proof (state)\nthis:\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       recvmsg (R \\<sigma>) a \\<Longrightarrow> recvmsg (R \\<sigma>') a", "qed (rule recvmsg')"], ["proof (state)\nthis:\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "moreover"], ["proof (state)\nthis:\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "have \"\\<forall>m\\<in>set ms'. R \\<sigma>' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m\\<in>set ms'. R \\<sigma>' m", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "assume \"m \\<in> set ms'\""], ["proof (state)\nthis:\n  m \\<in> set ms'\n\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "moreover"], ["proof (state)\nthis:\n  m \\<in> set ms'\n\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "have \"case a of receive m \\<Rightarrow> set ms' \\<subseteq> set (ms @ [m]) | _ \\<Rightarrow> set ms' \\<subseteq> set ms\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case a of receive m \\<Rightarrow> set ms' \\<subseteq> set (ms @ [m])\n    | _ \\<Rightarrow> set ms' \\<subseteq> set ms", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. case a of receive m \\<Rightarrow> set ms' \\<subseteq> set (ms @ [m])\n    | _ \\<Rightarrow> set ms' \\<subseteq> set ms", "from qr"], ["proof (chain)\npicking this:\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))", "have \"(ms, q) \\<in> reachable qmsg TT\""], ["proof (prove)\nusing this:\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n\ngoal (1 subgoal):\n 1. (ms, q) \\<in> reachable qmsg TT", ".."], ["proof (state)\nthis:\n  (ms, q) \\<in> reachable qmsg TT\n\ngoal (1 subgoal):\n 1. case a of receive m \\<Rightarrow> set ms' \\<subseteq> set (ms @ [m])\n    | _ \\<Rightarrow> set ms' \\<subseteq> set ms", "thus ?thesis"], ["proof (prove)\nusing this:\n  (ms, q) \\<in> reachable qmsg TT\n\ngoal (1 subgoal):\n 1. case a of receive m \\<Rightarrow> set ms' \\<subseteq> set (ms @ [m])\n    | _ \\<Rightarrow> set ms' \\<subseteq> set ms", "using tqtr"], ["proof (prove)\nusing this:\n  (ms, q) \\<in> reachable qmsg TT\n  ((ms, q), a, ms', q') \\<in> automaton.trans qmsg\n\ngoal (1 subgoal):\n 1. case a of receive m \\<Rightarrow> set ms' \\<subseteq> set (ms @ [m])\n    | _ \\<Rightarrow> set ms' \\<subseteq> set ms", "by (auto dest!: step_invariantD [OF qmsg_queue_contents])"], ["proof (state)\nthis:\n  case a of receive m \\<Rightarrow> set ms' \\<subseteq> set (ms @ [m])\n  | _ \\<Rightarrow> set ms' \\<subseteq> set ms\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case a of receive m \\<Rightarrow> set ms' \\<subseteq> set (ms @ [m])\n  | _ \\<Rightarrow> set ms' \\<subseteq> set ms\n\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "ultimately"], ["proof (chain)\npicking this:\n  m \\<in> set ms'\n  case a of receive m \\<Rightarrow> set ms' \\<subseteq> set (ms @ [m])\n  | _ \\<Rightarrow> set ms' \\<subseteq> set ms", "have \"R \\<sigma> m\""], ["proof (prove)\nusing this:\n  m \\<in> set ms'\n  case a of receive m \\<Rightarrow> set ms' \\<subseteq> set (ms @ [m])\n  | _ \\<Rightarrow> set ms' \\<subseteq> set ms\n\ngoal (1 subgoal):\n 1. R \\<sigma> m", "using \\<open>\\<forall>m\\<in>set ms. R \\<sigma> m\\<close> and \\<open>orecvmsg R \\<sigma> a\\<close>"], ["proof (prove)\nusing this:\n  m \\<in> set ms'\n  case a of receive m \\<Rightarrow> set ms' \\<subseteq> set (ms @ [m])\n  | _ \\<Rightarrow> set ms' \\<subseteq> set ms\n  \\<forall>m\\<in>set ms. R \\<sigma> m\n  orecvmsg R \\<sigma> a\n\ngoal (1 subgoal):\n 1. R \\<sigma> m", "by (cases a) auto"], ["proof (state)\nthis:\n  R \\<sigma> m\n\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "with \\<open>\\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n  R \\<sigma> m", "show \"R \\<sigma>' m\""], ["proof (prove)\nusing this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n  R \\<sigma> m\n\ngoal (1 subgoal):\n 1. R \\<sigma>' m", "by (rule upreservesq)"], ["proof (state)\nthis:\n  R \\<sigma>' m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>m\\<in>set ms'. R \\<sigma>' m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((ms, q), a, ms', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; p' = p; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', p')\n                      \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                             (other U {i}) \\<and>\n                      (ms', q')\n                      \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                      (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n  \\<forall>m\\<in>set ms'. R \\<sigma>' m", "show \"(\\<sigma>', p') \\<in> oreachable A ?owS (other U {i})\n                     \\<and> (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n                     \\<and> (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\""], ["proof (prove)\nusing this:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n  \\<forall>m\\<in>set ms'. R \\<sigma>' m\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p')\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n    (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n    (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n  (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "assume \"a = \\<tau>\"\n         and \"((\\<sigma>, p), receive m, (\\<sigma>', p')) \\<in> trans A\"\n         and \"((ms, q), send m, (ms', q')) \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\""], ["proof (state)\nthis:\n  a = \\<tau>\n  ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A\n  ((ms, q), send m, ms', q')\n  \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "from this(2-3)"], ["proof (chain)\npicking this:\n  ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A\n  ((ms, q), send m, ms', q')\n  \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G", "have ptr: \"((\\<sigma>, p), receive m, (\\<sigma>', p')) \\<in> trans A\"\n         and qtr: \"((ms, q), send m, (ms', q')) \\<in> trans qmsg\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A\n  ((ms, q), send m, ms', q')\n  \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A &&&\n    ((ms, q), send m, ms', q') \\<in> automaton.trans qmsg", "by simp_all"], ["proof (state)\nthis:\n  ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A\n  ((ms, q), send m, ms', q') \\<in> automaton.trans qmsg\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "from qr"], ["proof (chain)\npicking this:\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))", "have \"(ms, q) \\<in> reachable qmsg TT\""], ["proof (prove)\nusing this:\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n\ngoal (1 subgoal):\n 1. (ms, q) \\<in> reachable qmsg TT", ".."], ["proof (state)\nthis:\n  (ms, q) \\<in> reachable qmsg TT\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "with qtr"], ["proof (chain)\npicking this:\n  ((ms, q), send m, ms', q') \\<in> automaton.trans qmsg\n  (ms, q) \\<in> reachable qmsg TT", "have \"m \\<in> set ms\""], ["proof (prove)\nusing this:\n  ((ms, q), send m, ms', q') \\<in> automaton.trans qmsg\n  (ms, q) \\<in> reachable qmsg TT\n\ngoal (1 subgoal):\n 1. m \\<in> set ms", "by (auto dest!: step_invariantD [OF qmsg_send_from_queue])"], ["proof (state)\nthis:\n  m \\<in> set ms\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "with \\<open>\\<forall>m\\<in>set ms. R \\<sigma> m\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>m\\<in>set ms. R \\<sigma> m\n  m \\<in> set ms", "have \"R \\<sigma> m\""], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>set ms. R \\<sigma> m\n  m \\<in> set ms\n\ngoal (1 subgoal):\n 1. R \\<sigma> m", ".."], ["proof (state)\nthis:\n  R \\<sigma> m\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "hence \"orecvmsg R \\<sigma> (receive m)\""], ["proof (prove)\nusing this:\n  R \\<sigma> m\n\ngoal (1 subgoal):\n 1. orecvmsg R \\<sigma> (receive m)", "by simp"], ["proof (state)\nthis:\n  orecvmsg R \\<sigma> (receive m)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "with \\<open>\\<forall>j. j\\<noteq>i \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\n  orecvmsg R \\<sigma> (receive m)", "have \"?owS \\<sigma> \\<sigma>' (receive m)\""], ["proof (prove)\nusing this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\n  orecvmsg R \\<sigma> (receive m)\n\ngoal (1 subgoal):\n 1. otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' (receive m)", "by (auto intro!: otherwithI)"], ["proof (state)\nthis:\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' (receive m)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "with pinv por ptr"], ["proof (chain)\npicking this:\n  A \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg R),\n                          other U {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                               U (\\<sigma> i) (\\<sigma>' i))\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' (receive m)", "have \"U (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  A \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg R),\n                          other U {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                               U (\\<sigma> i) (\\<sigma>' i))\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' (receive m)\n\ngoal (1 subgoal):\n 1. U (\\<sigma> i) (\\<sigma>' i)", "by (auto dest!: ostep_invariantD)"], ["proof (state)\nthis:\n  U (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "with \\<open>\\<forall>j. j\\<noteq>i \\<longrightarrow> U (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> U (\\<sigma> j) (\\<sigma>' j)\n  U (\\<sigma> i) (\\<sigma>' i)", "have \"\\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> U (\\<sigma> j) (\\<sigma>' j)\n  U (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)", "by auto"], ["proof (state)\nthis:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "hence recvmsg': \"\\<And>a. recvmsg (R \\<sigma>) a \\<Longrightarrow> recvmsg (R \\<sigma>') a\""], ["proof (prove)\nusing this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       recvmsg (R \\<sigma>) a \\<Longrightarrow> recvmsg (R \\<sigma>') a", "by (auto elim!: recvmsgE [where R=R] upreservesq)"], ["proof (state)\nthis:\n  recvmsg (R \\<sigma>) ?a1 \\<Longrightarrow> recvmsg (R \\<sigma>') ?a1\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "from por ptr"], ["proof (chain)\npicking this:\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A", "have \"(\\<sigma>', p') \\<in> oreachable A ?owS (other U {i})\""], ["proof (prove)\nusing this:\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p')\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})", "using \\<open>?owS \\<sigma> \\<sigma>' (receive m)\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, p)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' (receive m)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p')\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})", "by - (erule(1) oreachable_local, simp)"], ["proof (state)\nthis:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "have \"(ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))", "proof (rule reachable_weakenE [where P=\"recvmsg (R \\<sigma>)\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n 2. \\<And>a.\n       recvmsg (R \\<sigma>) a \\<Longrightarrow> recvmsg (R \\<sigma>') a", "have \"recvmsg (R \\<sigma>) (send m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recvmsg (R \\<sigma>) (send m)", "by simp"], ["proof (state)\nthis:\n  recvmsg (R \\<sigma>) (send m)\n\ngoal (2 subgoals):\n 1. (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n 2. \\<And>a.\n       recvmsg (R \\<sigma>) a \\<Longrightarrow> recvmsg (R \\<sigma>') a", "with qr qtr"], ["proof (chain)\npicking this:\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n  ((ms, q), send m, ms', q') \\<in> automaton.trans qmsg\n  recvmsg (R \\<sigma>) (send m)", "show \"(ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>))\""], ["proof (prove)\nusing this:\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n  ((ms, q), send m, ms', q') \\<in> automaton.trans qmsg\n  recvmsg (R \\<sigma>) (send m)\n\ngoal (1 subgoal):\n 1. (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>))", ".."], ["proof (state)\nthis:\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       recvmsg (R \\<sigma>) a \\<Longrightarrow> recvmsg (R \\<sigma>') a", "qed (rule recvmsg')"], ["proof (state)\nthis:\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "moreover"], ["proof (state)\nthis:\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "have \"\\<forall>m\\<in>set ms'. R \\<sigma>' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m\\<in>set ms'. R \\<sigma>' m", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "assume \"m \\<in> set ms'\""], ["proof (state)\nthis:\n  m \\<in> set ms'\n\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "moreover"], ["proof (state)\nthis:\n  m \\<in> set ms'\n\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "have \"set ms' \\<subseteq> set ms\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ms' \\<subseteq> set ms", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set ms' \\<subseteq> set ms", "from qr"], ["proof (chain)\npicking this:\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))", "have \"(ms, q) \\<in> reachable qmsg TT\""], ["proof (prove)\nusing this:\n  (ms, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n\ngoal (1 subgoal):\n 1. (ms, q) \\<in> reachable qmsg TT", ".."], ["proof (state)\nthis:\n  (ms, q) \\<in> reachable qmsg TT\n\ngoal (1 subgoal):\n 1. set ms' \\<subseteq> set ms", "thus ?thesis"], ["proof (prove)\nusing this:\n  (ms, q) \\<in> reachable qmsg TT\n\ngoal (1 subgoal):\n 1. set ms' \\<subseteq> set ms", "using qtr"], ["proof (prove)\nusing this:\n  (ms, q) \\<in> reachable qmsg TT\n  ((ms, q), send m__, ms', q') \\<in> automaton.trans qmsg\n\ngoal (1 subgoal):\n 1. set ms' \\<subseteq> set ms", "by (auto dest!: step_invariantD [OF qmsg_queue_contents])"], ["proof (state)\nthis:\n  set ms' \\<subseteq> set ms\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set ms' \\<subseteq> set ms\n\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "ultimately"], ["proof (chain)\npicking this:\n  m \\<in> set ms'\n  set ms' \\<subseteq> set ms", "have \"R \\<sigma> m\""], ["proof (prove)\nusing this:\n  m \\<in> set ms'\n  set ms' \\<subseteq> set ms\n\ngoal (1 subgoal):\n 1. R \\<sigma> m", "using \\<open>\\<forall>m\\<in>set ms. R \\<sigma> m\\<close>"], ["proof (prove)\nusing this:\n  m \\<in> set ms'\n  set ms' \\<subseteq> set ms\n  \\<forall>m\\<in>set ms. R \\<sigma> m\n\ngoal (1 subgoal):\n 1. R \\<sigma> m", "by auto"], ["proof (state)\nthis:\n  R \\<sigma> m\n\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> set ms' \\<Longrightarrow> R \\<sigma>' m", "with \\<open>\\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n  R \\<sigma> m", "show \"R \\<sigma>' m\""], ["proof (prove)\nusing this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n  R \\<sigma> m\n\ngoal (1 subgoal):\n 1. R \\<sigma>' m", "by (rule upreservesq)"], ["proof (state)\nthis:\n  R \\<sigma>' m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>m\\<in>set ms'. R \\<sigma>' m\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, p), receive m, \\<sigma>', p') \\<in> automaton.trans A;\n        ((ms, q), send m, ms', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         (ms', q')\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n  \\<forall>m\\<in>set ms'. R \\<sigma>' m", "show \"(\\<sigma>', p') \\<in> oreachable A ?owS (other U {i})\n                     \\<and> (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n                     \\<and> (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\""], ["proof (prove)\nusing this:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>'))\n  \\<forall>m\\<in>set ms'. R \\<sigma>' m\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p')\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n    (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n    (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n  (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n  (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        (\\<sigma>, fst p)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<and>\n        snd p \\<in> reachable qmsg (recvmsg (R \\<sigma>)) \\<and>\n        (\\<forall>m\\<in>set (fst (snd p)). R \\<sigma> m);\n        ((\\<sigma>, p), a, \\<sigma>', p')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', fst p')\n                         \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                                (other U {i}) \\<and>\n                         snd p'\n                         \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n                         (\\<forall>m\\<in>set (fst (snd p')). R \\<sigma>' m)", "with \\<open>pq = (p, (ms, q))\\<close> and \\<open>pq' = (p', (ms', q'))\\<close>"], ["proof (chain)\npicking this:\n  pq = (p, ms, q)\n  pq' = (p', ms', q')\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n  (\\<forall>m\\<in>set ms'. R \\<sigma>' m)", "show ?case"], ["proof (prove)\nusing this:\n  pq = (p, ms, q)\n  pq' = (p', ms', q')\n  (\\<sigma>', p')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n  (ms', q') \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n  (\\<forall>m\\<in>set ms'. R \\<sigma>' m)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', fst pq')\n    \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n    snd pq' \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n    (\\<forall>m\\<in>set (fst (snd pq')). R \\<sigma>' m)", "by (simp_all del: \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G_simps)"], ["proof (state)\nthis:\n  (\\<sigma>', fst pq')\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i}) \\<and>\n  snd pq' \\<in> reachable qmsg (recvmsg (R \\<sigma>')) \\<and>\n  (\\<forall>m\\<in>set (fst (snd pq')). R \\<sigma>' m)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma par_qmsg_oreachable_statelessassm:\n  assumes \"(\\<sigma>, \\<zeta>) \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                               (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>) (other (\\<lambda>_ _. True) {i})\"\n      and ustutter: \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n  shows \"(\\<sigma>, fst \\<zeta>) \\<in> oreachable A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>) (other (\\<lambda>_ _. True) {i})\n         \\<and> snd \\<zeta> \\<in> reachable qmsg (recvmsg R)\n         \\<and> (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, fst \\<zeta>)\n    \\<in> oreachable A\n           (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n           (other (\\<lambda>_ _. True) {i}) \\<and>\n    snd \\<zeta> \\<in> reachable qmsg (recvmsg R) \\<and>\n    (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R m)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>, fst \\<zeta>)\n    \\<in> oreachable A\n           (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n           (other (\\<lambda>_ _. True) {i}) \\<and>\n    snd \\<zeta> \\<in> reachable qmsg (recvmsg R) \\<and>\n    (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R m)", "from assms(1)"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n         (other (\\<lambda>_ _. True) {i})", "have \"(\\<sigma>, \\<zeta>) \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                                (otherwith (\\<lambda>_ _. True) {i} (orecvmsg (\\<lambda>_. R)))\n                                (other (\\<lambda>_ _. True) {i})\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n         (other (\\<lambda>_ _. True) {i})\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n           (otherwith (\\<lambda>_ _. True) {i} (orecvmsg (\\<lambda>_. R)))\n           (other (\\<lambda>_ _. True) {i})", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith (\\<lambda>_ _. True) {i} (orecvmsg (\\<lambda>_. R)))\n         (other (\\<lambda>_ _. True) {i})\n\ngoal (1 subgoal):\n 1. (\\<sigma>, fst \\<zeta>)\n    \\<in> oreachable A\n           (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n           (other (\\<lambda>_ _. True) {i}) \\<and>\n    snd \\<zeta> \\<in> reachable qmsg (recvmsg R) \\<and>\n    (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R m)", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith (\\<lambda>_ _. True) {i} (orecvmsg (\\<lambda>_. R)))\n         (other (\\<lambda>_ _. True) {i})\n\ngoal (1 subgoal):\n 1. (\\<sigma>, fst \\<zeta>)\n    \\<in> oreachable A\n           (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n           (other (\\<lambda>_ _. True) {i}) \\<and>\n    snd \\<zeta> \\<in> reachable qmsg (recvmsg R) \\<and>\n    (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R m)", "have \"A \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i} (orecvmsg (\\<lambda>_. R)),\n                  other (\\<lambda>_ _. True) {i} \\<rightarrow>) globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i}\n                             (orecvmsg (\\<lambda>_. R)),\n                            other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala\n                             (\\<lambda>(\\<sigma>, uu_, \\<sigma>'). True)", "by auto"], ["proof (state)\nthis:\n  A \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i}\n                           (orecvmsg (\\<lambda>_. R)),\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, uu_, \\<sigma>'). True)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, fst \\<zeta>)\n    \\<in> oreachable A\n           (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n           (other (\\<lambda>_ _. True) {i}) \\<and>\n    snd \\<zeta> \\<in> reachable qmsg (recvmsg R) \\<and>\n    (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R m)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith (\\<lambda>_ _. True) {i} (orecvmsg (\\<lambda>_. R)))\n         (other (\\<lambda>_ _. True) {i})\n  A \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i}\n                           (orecvmsg (\\<lambda>_. R)),\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, uu_, \\<sigma>'). True)", "obtain \"(\\<sigma>, fst \\<zeta>) \\<in> oreachable A\n                           (otherwith (\\<lambda>_ _. True) {i} (orecvmsg (\\<lambda>_. R))) (other (\\<lambda>_ _. True) {i})\"\n         and  *: \"snd \\<zeta> \\<in> reachable qmsg (recvmsg R)\"\n         and **: \"(\\<forall>m\\<in>set (fst (snd \\<zeta>)). R m)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith (\\<lambda>_ _. True) {i} (orecvmsg (\\<lambda>_. R)))\n         (other (\\<lambda>_ _. True) {i})\n  A \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i}\n                           (orecvmsg (\\<lambda>_. R)),\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, uu_, \\<sigma>'). True)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>(\\<sigma>, fst \\<zeta>)\n              \\<in> oreachable A\n                     (otherwith (\\<lambda>_ _. True) {i}\n                       (orecvmsg (\\<lambda>_. R)))\n                     (other (\\<lambda>_ _. True) {i});\n      snd \\<zeta> \\<in> reachable qmsg (recvmsg R);\n      \\<forall>m\\<in>set (fst (snd \\<zeta>)). R m\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto dest!: par_qmsg_oreachable)"], ["proof (state)\nthis:\n  (\\<sigma>, fst \\<zeta>)\n  \\<in> oreachable A\n         (otherwith (\\<lambda>_ _. True) {i} (orecvmsg (\\<lambda>_. R)))\n         (other (\\<lambda>_ _. True) {i})\n  snd \\<zeta> \\<in> reachable qmsg (recvmsg R)\n  \\<forall>m\\<in>set (fst (snd \\<zeta>)). R m\n\ngoal (1 subgoal):\n 1. (\\<sigma>, fst \\<zeta>)\n    \\<in> oreachable A\n           (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n           (other (\\<lambda>_ _. True) {i}) \\<and>\n    snd \\<zeta> \\<in> reachable qmsg (recvmsg R) \\<and>\n    (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R m)", "from this(1)"], ["proof (chain)\npicking this:\n  (\\<sigma>, fst \\<zeta>)\n  \\<in> oreachable A\n         (otherwith (\\<lambda>_ _. True) {i} (orecvmsg (\\<lambda>_. R)))\n         (other (\\<lambda>_ _. True) {i})", "have \"(\\<sigma>, fst \\<zeta>) \\<in> oreachable A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>) (other (\\<lambda>_ _. True) {i})\""], ["proof (prove)\nusing this:\n  (\\<sigma>, fst \\<zeta>)\n  \\<in> oreachable A\n         (otherwith (\\<lambda>_ _. True) {i} (orecvmsg (\\<lambda>_. R)))\n         (other (\\<lambda>_ _. True) {i})\n\ngoal (1 subgoal):\n 1. (\\<sigma>, fst \\<zeta>)\n    \\<in> oreachable A\n           (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n           (other (\\<lambda>_ _. True) {i})", "by rule auto"], ["proof (state)\nthis:\n  (\\<sigma>, fst \\<zeta>)\n  \\<in> oreachable A\n         (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n         (other (\\<lambda>_ _. True) {i})\n\ngoal (1 subgoal):\n 1. (\\<sigma>, fst \\<zeta>)\n    \\<in> oreachable A\n           (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n           (other (\\<lambda>_ _. True) {i}) \\<and>\n    snd \\<zeta> \\<in> reachable qmsg (recvmsg R) \\<and>\n    (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R m)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, fst \\<zeta>)\n  \\<in> oreachable A\n         (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n         (other (\\<lambda>_ _. True) {i})\n\ngoal (1 subgoal):\n 1. (\\<sigma>, fst \\<zeta>)\n    \\<in> oreachable A\n           (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n           (other (\\<lambda>_ _. True) {i}) \\<and>\n    snd \\<zeta> \\<in> reachable qmsg (recvmsg R) \\<and>\n    (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R m)", "using * **"], ["proof (prove)\nusing this:\n  (\\<sigma>, fst \\<zeta>)\n  \\<in> oreachable A\n         (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n         (other (\\<lambda>_ _. True) {i})\n  snd \\<zeta> \\<in> reachable qmsg (recvmsg R)\n  \\<forall>m\\<in>set (fst (snd \\<zeta>)). R m\n\ngoal (1 subgoal):\n 1. (\\<sigma>, fst \\<zeta>)\n    \\<in> oreachable A\n           (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n           (other (\\<lambda>_ _. True) {i}) \\<and>\n    snd \\<zeta> \\<in> reachable qmsg (recvmsg R) \\<and>\n    (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R m)", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>, fst \\<zeta>)\n  \\<in> oreachable A\n         (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>)\n         (other (\\<lambda>_ _. True) {i}) \\<and>\n  snd \\<zeta> \\<in> reachable qmsg (recvmsg R) \\<and>\n  (\\<forall>m\\<in>set (fst (snd \\<zeta>)). R m)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lift_into_qmsg:\n  assumes \"A \\<Turnstile> (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>) global P\"\n      and \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n      and \"\\<And>\\<xi> \\<xi>'. S \\<xi> \\<xi>' \\<Longrightarrow> U \\<xi> \\<xi>'\"\n      and \"\\<And>\\<sigma> \\<sigma>' m. \\<lbrakk> \\<forall>j. U (\\<sigma> j) (\\<sigma>' j); R \\<sigma> m \\<rbrakk> \\<Longrightarrow> R \\<sigma>' m\"\n      and \"A \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>)\n                 globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). U (\\<sigma> i) (\\<sigma>' i))\"\n    shows \"A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile> (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>) global P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile> (otherwith S {i}\n                        (orecvmsg R),\n                       other U {i} \\<rightarrow>) global P", "proof (rule oinvariant_oreachableI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s.\n       (\\<sigma>, s)\n       \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n              (otherwith S {i} (orecvmsg R)) (other U {i}) \\<Longrightarrow>\n       global P (\\<sigma>, s)", "fix \\<sigma> \\<zeta>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s.\n       (\\<sigma>, s)\n       \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n              (otherwith S {i} (orecvmsg R)) (other U {i}) \\<Longrightarrow>\n       global P (\\<sigma>, s)", "assume \"(\\<sigma>, \\<zeta>) \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) (otherwith S {i} (orecvmsg R)) (other U {i})\""], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s.\n       (\\<sigma>, s)\n       \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n              (otherwith S {i} (orecvmsg R)) (other U {i}) \\<Longrightarrow>\n       global P (\\<sigma>, s)", "then"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith S {i} (orecvmsg R)) (other U {i})", "obtain s where \"(\\<sigma>, s) \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        (\\<sigma>, s)\n        \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n               (other U {i}) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto dest!: par_qmsg_oreachable [OF _ assms(5,2-4)])"], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s.\n       (\\<sigma>, s)\n       \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n              (otherwith S {i} (orecvmsg R)) (other U {i}) \\<Longrightarrow>\n       global P (\\<sigma>, s)", "with assms(1)"], ["proof (chain)\npicking this:\n  A \\<Turnstile> (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>)\n                  global P\n  (\\<sigma>, s)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})", "show \"global P (\\<sigma>, \\<zeta>)\""], ["proof (prove)\nusing this:\n  A \\<Turnstile> (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>)\n                  global P\n  (\\<sigma>, s)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (1 subgoal):\n 1. global P (\\<sigma>, \\<zeta>)", "by (auto dest: oinvariant_weakenD [OF assms(1)])"], ["proof (state)\nthis:\n  global P (\\<sigma>, \\<zeta>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lift_step_into_qmsg:\n  assumes inv: \"A \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>) globala P\"\n      and ustutter: \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n      and sgivesu: \"\\<And>\\<xi> \\<xi>'. S \\<xi> \\<xi>' \\<Longrightarrow> U \\<xi> \\<xi>'\"\n      and upreservesq: \"\\<And>\\<sigma> \\<sigma>' m. \\<lbrakk> \\<forall>j. U (\\<sigma> j) (\\<sigma>' j); R \\<sigma> m \\<rbrakk> \\<Longrightarrow> R \\<sigma>' m\"\n      and self_sync: \"A \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>)\n                            globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). U (\\<sigma> i) (\\<sigma>' i))\"\n\n      and recv_stutter:  \"\\<And>\\<sigma> \\<sigma>' m. \\<lbrakk> \\<forall>j. U (\\<sigma> j) (\\<sigma>' j); \\<sigma>' i = \\<sigma> i \\<rbrakk> \\<Longrightarrow> P (\\<sigma>, receive m, \\<sigma>')\"\n      and receive_right: \"\\<And>\\<sigma> \\<sigma>' m.  P (\\<sigma>, receive m, \\<sigma>') \\<Longrightarrow> P (\\<sigma>, \\<tau>, \\<sigma>')\"\n    shows \"A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg R), other U {i} \\<rightarrow>) globala P\"\n      (is \"_ \\<Turnstile>\\<^sub>A (?owS, ?U \\<rightarrow>) _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (otherwith\n                                S {i} (orecvmsg R),\n                               other U {i} \\<rightarrow>) globala P", "proof (rule ostep_invariantI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "fix \\<sigma> \\<zeta> a \\<sigma>' \\<zeta>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "assume or: \"(\\<sigma>, \\<zeta>) \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) ?owS ?U\"\n       and otr: \"((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\"\n       and \"?owS \\<sigma> \\<sigma>' a\""], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith S {i} (orecvmsg R)) (other U {i})\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "from this(2)"], ["proof (chain)\npicking this:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)", "have \"((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> oparp_sos i (trans A) (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n    \\<in> oparp_sos i (automaton.trans A)\n           (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> oparp_sos i (automaton.trans A)\n         (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "then"], ["proof (chain)\npicking this:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> oparp_sos i (automaton.trans A)\n         (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)", "obtain s msgs q s' msgs' q'\n      where \"\\<zeta> = (s, (msgs, q))\" \"\\<zeta>' = (s', (msgs', q'))\"\n        and \"((\\<sigma>, (s, (msgs, q))), a, (\\<sigma>', (s', (msgs', q'))))\n               \\<in> oparp_sos i (trans A) (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> oparp_sos i (automaton.trans A)\n         (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\n\ngoal (1 subgoal):\n 1. (\\<And>s msgs q s' msgs' q'.\n        \\<lbrakk>\\<zeta> = (s, msgs, q); \\<zeta>' = (s', msgs', q');\n         ((\\<sigma>, s, msgs, q), a, \\<sigma>', s', msgs', q')\n         \\<in> oparp_sos i (automaton.trans A)\n                (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis prod_cases3)"], ["proof (state)\nthis:\n  \\<zeta> = (s, msgs, q)\n  \\<zeta>' = (s', msgs', q')\n  ((\\<sigma>, s, msgs, q), a, \\<sigma>', s', msgs', q')\n  \\<in> oparp_sos i (automaton.trans A)\n         (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "from this(1-2) and or"], ["proof (chain)\npicking this:\n  \\<zeta> = (s, msgs, q)\n  \\<zeta>' = (s', msgs', q')\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith S {i} (orecvmsg R)) (other U {i})", "obtain \"(\\<sigma>, s) \\<in> oreachable A ?owS ?U\"\n             \"(msgs, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\"\n             \"(\\<forall>m\\<in>set msgs. R \\<sigma> m)\""], ["proof (prove)\nusing this:\n  \\<zeta> = (s, msgs, q)\n  \\<zeta>' = (s', msgs', q')\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n         (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>(\\<sigma>, s)\n              \\<in> oreachable A (otherwith S {i} (orecvmsg R))\n                     (other U {i});\n      (msgs, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>));\n      \\<forall>m\\<in>set msgs. R \\<sigma> m\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto dest: par_qmsg_oreachable [OF _ self_sync ustutter sgivesu]\n                elim!: upreservesq)"], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  (msgs, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n  \\<forall>m\\<in>set msgs. R \\<sigma> m\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "from otr \\<open>\\<zeta> = (s, (msgs, q))\\<close> \\<open>\\<zeta>' = (s', (msgs', q'))\\<close>"], ["proof (chain)\npicking this:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n  \\<zeta> = (s, msgs, q)\n  \\<zeta>' = (s', msgs', q')", "have \"((\\<sigma>, (s, (msgs, q))), a, (\\<sigma>', (s', (msgs', q'))))\n              \\<in> oparp_sos i (trans A) (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n  \\<zeta> = (s, msgs, q)\n  \\<zeta>' = (s', msgs', q')\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, s, msgs, q), a, \\<sigma>', s', msgs', q')\n    \\<in> oparp_sos i (automaton.trans A)\n           (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, s, msgs, q), a, \\<sigma>', s', msgs', q')\n  \\<in> oparp_sos i (automaton.trans A)\n         (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "hence \"globala P ((\\<sigma>, s), a, (\\<sigma>', s'))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, s, msgs, q), a, \\<sigma>', s', msgs', q')\n  \\<in> oparp_sos i (automaton.trans A)\n         (seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G)\n\ngoal (1 subgoal):\n 1. globala P ((\\<sigma>, s), a, \\<sigma>', s')", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n     \\<And>m. a \\<noteq> receive m; (msgs', q') = (msgs, q)\\<rbrakk>\n    \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')\n 2. \\<lbrakk>((msgs, q), a, msgs', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; s' = s; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "assume \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans A\""], ["proof (state)\nthis:\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n\ngoal (3 subgoals):\n 1. \\<lbrakk>((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n     \\<And>m. a \\<noteq> receive m; (msgs', q') = (msgs, q)\\<rbrakk>\n    \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')\n 2. \\<lbrakk>((msgs, q), a, msgs', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; s' = s; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "with \\<open>(\\<sigma>, s) \\<in> oreachable A ?owS ?U\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A", "show \"globala P ((\\<sigma>, s), a, (\\<sigma>', s'))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n\ngoal (1 subgoal):\n 1. globala P ((\\<sigma>, s), a, \\<sigma>', s')", "using \\<open>?owS \\<sigma> \\<sigma>' a\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. globala P ((\\<sigma>, s), a, \\<sigma>', s')", "by (rule ostep_invariantD [OF inv])"], ["proof (state)\nthis:\n  globala P ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((msgs, q), a, msgs', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; s' = s; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>((msgs, q), a, msgs', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; s' = s; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "assume \"((msgs, q), a, (msgs', q')) \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\"\n         and \"\\<And>m. a \\<noteq> send m\"\n         and \"\\<sigma>' i = \\<sigma> i\""], ["proof (state)\nthis:\n  ((msgs, q), a, msgs', q')\n  \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n  a \\<noteq> send ?m\n  \\<sigma>' i = \\<sigma> i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((msgs, q), a, msgs', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; s' = s; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "from this(3) and ustutter"], ["proof (chain)\npicking this:\n  \\<sigma>' i = \\<sigma> i\n  U ?\\<xi> ?\\<xi>", "have \"U (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  \\<sigma>' i = \\<sigma> i\n  U ?\\<xi> ?\\<xi>\n\ngoal (1 subgoal):\n 1. U (\\<sigma> i) (\\<sigma>' i)", "by simp"], ["proof (state)\nthis:\n  U (\\<sigma> i) (\\<sigma>' i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((msgs, q), a, msgs', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; s' = s; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "with \\<open>?owS \\<sigma> \\<sigma>' a\\<close> and sgivesu"], ["proof (chain)\npicking this:\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\n  S ?\\<xi> ?\\<xi>' \\<Longrightarrow> U ?\\<xi> ?\\<xi>'\n  U (\\<sigma> i) (\\<sigma>' i)", "have \"\\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\n  S ?\\<xi> ?\\<xi>' \\<Longrightarrow> U ?\\<xi> ?\\<xi>'\n  U (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)", "by (clarsimp dest!: otherwith_syncD) metis"], ["proof (state)\nthis:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((msgs, q), a, msgs', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; s' = s; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "moreover"], ["proof (state)\nthis:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((msgs, q), a, msgs', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; s' = s; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "have \"(\\<exists>m. a = receive m) \\<or> (a = \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m. a = receive m) \\<or> a = \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>m. a = receive m) \\<or> a = \\<tau>", "from \\<open>(msgs, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\\<close>"], ["proof (chain)\npicking this:\n  (msgs, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))", "have \"(msgs, q) \\<in> reachable qmsg TT\""], ["proof (prove)\nusing this:\n  (msgs, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n\ngoal (1 subgoal):\n 1. (msgs, q) \\<in> reachable qmsg TT", ".."], ["proof (state)\nthis:\n  (msgs, q) \\<in> reachable qmsg TT\n\ngoal (1 subgoal):\n 1. (\\<exists>m. a = receive m) \\<or> a = \\<tau>", "moreover"], ["proof (state)\nthis:\n  (msgs, q) \\<in> reachable qmsg TT\n\ngoal (1 subgoal):\n 1. (\\<exists>m. a = receive m) \\<or> a = \\<tau>", "from \\<open>((msgs, q), a, (msgs', q')) \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<close>"], ["proof (chain)\npicking this:\n  ((msgs, q), a, msgs', q')\n  \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G", "have \"((msgs, q), a, (msgs', q')) \\<in> trans qmsg\""], ["proof (prove)\nusing this:\n  ((msgs, q), a, msgs', q')\n  \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n\ngoal (1 subgoal):\n 1. ((msgs, q), a, msgs', q') \\<in> automaton.trans qmsg", "by simp"], ["proof (state)\nthis:\n  ((msgs, q), a, msgs', q') \\<in> automaton.trans qmsg\n\ngoal (1 subgoal):\n 1. (\\<exists>m. a = receive m) \\<or> a = \\<tau>", "ultimately"], ["proof (chain)\npicking this:\n  (msgs, q) \\<in> reachable qmsg TT\n  ((msgs, q), a, msgs', q') \\<in> automaton.trans qmsg", "show ?thesis"], ["proof (prove)\nusing this:\n  (msgs, q) \\<in> reachable qmsg TT\n  ((msgs, q), a, msgs', q') \\<in> automaton.trans qmsg\n\ngoal (1 subgoal):\n 1. (\\<exists>m. a = receive m) \\<or> a = \\<tau>", "using \\<open>\\<And>m. a \\<noteq> send m\\<close>"], ["proof (prove)\nusing this:\n  (msgs, q) \\<in> reachable qmsg TT\n  ((msgs, q), a, msgs', q') \\<in> automaton.trans qmsg\n  a \\<noteq> send ?m\n\ngoal (1 subgoal):\n 1. (\\<exists>m. a = receive m) \\<or> a = \\<tau>", "by (auto dest!: step_invariantD [OF qmsg_send_receive_or_tau])"], ["proof (state)\nthis:\n  (\\<exists>m. a = receive m) \\<or> a = \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>m. a = receive m) \\<or> a = \\<tau>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((msgs, q), a, msgs', q')\n             \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G;\n     \\<And>m. a \\<noteq> send m; s' = s; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n    \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n  (\\<exists>m. a = receive m) \\<or> a = \\<tau>", "show \"globala P ((\\<sigma>, s), a, (\\<sigma>', s'))\""], ["proof (prove)\nusing this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n  (\\<exists>m. a = receive m) \\<or> a = \\<tau>\n\ngoal (1 subgoal):\n 1. globala P ((\\<sigma>, s), a, \\<sigma>', s')", "using \\<open>\\<sigma>' i = \\<sigma> i\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j. U (\\<sigma> j) (\\<sigma>' j)\n  (\\<exists>m. a = receive m) \\<or> a = \\<tau>\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. globala P ((\\<sigma>, s), a, \\<sigma>', s')", "by simp (metis receive_right recv_stutter step_seq_tau)"], ["proof (state)\nthis:\n  globala P ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "assume \"a = \\<tau>\"\n         and \"((\\<sigma>, s), receive m, (\\<sigma>', s')) \\<in> trans A\"\n         and \"((msgs, q), send m, (msgs', q')) \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\""], ["proof (state)\nthis:\n  a = \\<tau>\n  ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A\n  ((msgs, q), send m, msgs', q')\n  \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "from \\<open>(msgs, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\\<close>"], ["proof (chain)\npicking this:\n  (msgs, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))", "have \"(msgs, q) \\<in> reachable qmsg TT\""], ["proof (prove)\nusing this:\n  (msgs, q) \\<in> reachable qmsg (recvmsg (R \\<sigma>))\n\ngoal (1 subgoal):\n 1. (msgs, q) \\<in> reachable qmsg TT", ".."], ["proof (state)\nthis:\n  (msgs, q) \\<in> reachable qmsg TT\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "moreover"], ["proof (state)\nthis:\n  (msgs, q) \\<in> reachable qmsg TT\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "from \\<open>((msgs, q), send m, (msgs', q')) \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<close>"], ["proof (chain)\npicking this:\n  ((msgs, q), send m, msgs', q')\n  \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G", "have \"((msgs, q), send m, (msgs', q')) \\<in> trans qmsg\""], ["proof (prove)\nusing this:\n  ((msgs, q), send m, msgs', q')\n  \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n\ngoal (1 subgoal):\n 1. ((msgs, q), send m, msgs', q') \\<in> automaton.trans qmsg", "by simp"], ["proof (state)\nthis:\n  ((msgs, q), send m, msgs', q') \\<in> automaton.trans qmsg\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "ultimately"], ["proof (chain)\npicking this:\n  (msgs, q) \\<in> reachable qmsg TT\n  ((msgs, q), send m, msgs', q') \\<in> automaton.trans qmsg", "have \"m\\<in>set msgs\""], ["proof (prove)\nusing this:\n  (msgs, q) \\<in> reachable qmsg TT\n  ((msgs, q), send m, msgs', q') \\<in> automaton.trans qmsg\n\ngoal (1 subgoal):\n 1. m \\<in> set msgs", "by (auto dest!: step_invariantD [OF qmsg_send_from_queue])"], ["proof (state)\nthis:\n  m \\<in> set msgs\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "with \\<open>\\<forall>m\\<in>set msgs. R \\<sigma> m\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>m\\<in>set msgs. R \\<sigma> m\n  m \\<in> set msgs", "have \"R \\<sigma> m\""], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>set msgs. R \\<sigma> m\n  m \\<in> set msgs\n\ngoal (1 subgoal):\n 1. R \\<sigma> m", ".."], ["proof (state)\nthis:\n  R \\<sigma> m\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "with \\<open>?owS \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\n  R \\<sigma> m", "have \"?owS \\<sigma> \\<sigma>' (receive m)\""], ["proof (prove)\nusing this:\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\n  R \\<sigma> m\n\ngoal (1 subgoal):\n 1. otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' (receive m)", "by (auto dest!: otherwith_syncD)"], ["proof (state)\nthis:\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' (receive m)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "with \\<open>((\\<sigma>, s), receive m, (\\<sigma>', s')) \\<in> trans A\\<close>"], ["proof (chain)\npicking this:\n  ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' (receive m)", "have \"globala P ((\\<sigma>, s), receive m, (\\<sigma>', s'))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' (receive m)\n\ngoal (1 subgoal):\n 1. globala P ((\\<sigma>, s), receive m, \\<sigma>', s')", "using \\<open>(\\<sigma>, s) \\<in> oreachable A ?owS ?U\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A\n  otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' (receive m)\n  (\\<sigma>, s)\n  \\<in> oreachable A (otherwith S {i} (orecvmsg R)) (other U {i})\n\ngoal (1 subgoal):\n 1. globala P ((\\<sigma>, s), receive m, \\<sigma>', s')", "by - (rule ostep_invariantD [OF inv])"], ["proof (state)\nthis:\n  globala P ((\\<sigma>, s), receive m, \\<sigma>', s')\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "hence \"P (\\<sigma>, receive m, \\<sigma>')\""], ["proof (prove)\nusing this:\n  globala P ((\\<sigma>, s), receive m, \\<sigma>', s')\n\ngoal (1 subgoal):\n 1. P (\\<sigma>, receive m, \\<sigma>')", "by simp"], ["proof (state)\nthis:\n  P (\\<sigma>, receive m, \\<sigma>')\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "hence \"P (\\<sigma>, \\<tau>, \\<sigma>')\""], ["proof (prove)\nusing this:\n  P (\\<sigma>, receive m, \\<sigma>')\n\ngoal (1 subgoal):\n 1. P (\\<sigma>, \\<tau>, \\<sigma>')", "by (rule receive_right)"], ["proof (state)\nthis:\n  P (\\<sigma>, \\<tau>, \\<sigma>')\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, s), receive m, \\<sigma>', s') \\<in> automaton.trans A;\n        ((msgs, q), send m, msgs', q')\n        \\<in> seqp_sos \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "with \\<open>a = \\<tau>\\<close>"], ["proof (chain)\npicking this:\n  a = \\<tau>\n  P (\\<sigma>, \\<tau>, \\<sigma>')", "show \"globala P ((\\<sigma>, s), a, (\\<sigma>', s'))\""], ["proof (prove)\nusing this:\n  a = \\<tau>\n  P (\\<sigma>, \\<tau>, \\<sigma>')\n\ngoal (1 subgoal):\n 1. globala P ((\\<sigma>, s), a, \\<sigma>', s')", "by simp"], ["proof (state)\nthis:\n  globala P ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  globala P ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n                       (otherwith S {i} (orecvmsg R)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg);\n        otherwith S {i} (orecvmsg R) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> globala P ((\\<sigma>, s), a, \\<sigma>', s')", "with \\<open>\\<zeta> = (s, (msgs, q))\\<close> and \\<open>\\<zeta>' = (s', (msgs', q'))\\<close>"], ["proof (chain)\npicking this:\n  \\<zeta> = (s, msgs, q)\n  \\<zeta>' = (s', msgs', q')\n  globala P ((\\<sigma>, s), a, \\<sigma>', s')", "show \"globala P ((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>'))\""], ["proof (prove)\nusing this:\n  \\<zeta> = (s, msgs, q)\n  \\<zeta>' = (s', msgs', q')\n  globala P ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal (1 subgoal):\n 1. globala P ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')", "by simp"], ["proof (state)\nthis:\n  globala P ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lift_step_into_qmsg_statelessassm:\n  assumes \"A \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>) globala P\"\n      and \"\\<And>\\<sigma> \\<sigma>' m. \\<sigma>' i = \\<sigma> i \\<Longrightarrow> P (\\<sigma>, receive m, \\<sigma>')\"\n      and \"\\<And>\\<sigma> \\<sigma>' m. P (\\<sigma>, receive m, \\<sigma>') \\<Longrightarrow> P (\\<sigma>, \\<tau>, \\<sigma>')\"\n    shows \"A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_. R) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>) globala P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. orecvmsg (\\<lambda>_. R) \\<sigma>,\n                               other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                               globala P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. orecvmsg (\\<lambda>_. R) \\<sigma>,\n                               other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                               globala P", "from assms(1)"], ["proof (chain)\npicking this:\n  A \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                             orecvmsg (\\<lambda>_. R) \\<sigma>,\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala P", "have *: \"A \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i} (orecvmsg (\\<lambda>_. R)),\n                                 other (\\<lambda>_ _. True) {i} \\<rightarrow>) globala P\""], ["proof (prove)\nusing this:\n  A \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                             orecvmsg (\\<lambda>_. R) \\<sigma>,\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala P\n\ngoal (1 subgoal):\n 1. A \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i}\n                             (orecvmsg (\\<lambda>_. R)),\n                            other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala P", "by rule auto"], ["proof (state)\nthis:\n  A \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i}\n                           (orecvmsg (\\<lambda>_. R)),\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala P\n\ngoal (1 subgoal):\n 1. A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. orecvmsg (\\<lambda>_. R) \\<sigma>,\n                               other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                               globala P", "hence \"A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A\n              (otherwith (\\<lambda>_ _. True) {i} (orecvmsg (\\<lambda>_. R)), other (\\<lambda>_ _. True) {i} \\<rightarrow>) globala P\""], ["proof (prove)\nusing this:\n  A \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i}\n                           (orecvmsg (\\<lambda>_. R)),\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala P\n\ngoal (1 subgoal):\n 1. A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (otherwith\n                                (\\<lambda>_ _. True) {i}\n                                (orecvmsg (\\<lambda>_. R)),\n                               other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                               globala P", "by (rule lift_step_into_qmsg)\n         (auto elim!: assms(2-3) simp del: step_seq_tau)"], ["proof (state)\nthis:\n  A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (otherwith\n                              (\\<lambda>_ _. True) {i}\n                              (orecvmsg (\\<lambda>_. R)),\n                             other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                             globala P\n\ngoal (1 subgoal):\n 1. A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. orecvmsg (\\<lambda>_. R) \\<sigma>,\n                               other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                               globala P", "thus ?thesis"], ["proof (prove)\nusing this:\n  A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (otherwith\n                              (\\<lambda>_ _. True) {i}\n                              (orecvmsg (\\<lambda>_. R)),\n                             other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                             globala P\n\ngoal (1 subgoal):\n 1. A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. orecvmsg (\\<lambda>_. R) \\<sigma>,\n                               other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                               globala P", "by rule auto"], ["proof (state)\nthis:\n  A \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                _. orecvmsg (\\<lambda>_. R) \\<sigma>,\n                             other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                             globala P\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}