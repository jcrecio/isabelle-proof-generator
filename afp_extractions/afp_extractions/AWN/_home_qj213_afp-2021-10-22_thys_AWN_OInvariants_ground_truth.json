{"file_name": "/home/qj213/afp-2021-10-22/thys/AWN/OInvariants.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AWN", "problem_names": ["lemma oreachable_local' [elim]:\n  assumes \"(\\<sigma>, p) \\<in> oreachable A S U\"\n      and \"((\\<sigma>, p), a, (\\<sigma>', p')) \\<in> trans A\"\n      and \"S \\<sigma> \\<sigma>' a\"\n    shows \"(\\<sigma>', p') \\<in> oreachable A S U\"", "lemma oreachable_other' [elim]:\n  assumes \"(\\<sigma>, p) \\<in> oreachable A S U\"\n      and \"U \\<sigma> \\<sigma>'\"\n    shows \"(\\<sigma>', p) \\<in> oreachable A S U\"", "lemma oreachable_pair_induct [consumes, case_names init other local]:\n  assumes \"(\\<sigma>, p) \\<in> oreachable A S U\"\n      and \"\\<And>\\<sigma> p. (\\<sigma>, p) \\<in> init A \\<Longrightarrow> P \\<sigma> p\"\n      and \"(\\<And>\\<sigma> p \\<sigma>'. \\<lbrakk> (\\<sigma>, p) \\<in> oreachable A S U; P \\<sigma> p; U \\<sigma> \\<sigma>' \\<rbrakk> \\<Longrightarrow> P \\<sigma>' p)\"\n      and \"(\\<And>\\<sigma> p \\<sigma>' p' a. \\<lbrakk> (\\<sigma>, p) \\<in> oreachable A S U; P \\<sigma> p;\n                            ((\\<sigma>, p), a, (\\<sigma>', p')) \\<in> trans A; S \\<sigma> \\<sigma>' a \\<rbrakk> \\<Longrightarrow> P \\<sigma>' p')\"\n    shows \"P \\<sigma> p\"", "lemma oreachable_weakenE [elim]:\n  assumes \"s \\<in> oreachable A PS PU\"\n      and PSQS: \"\\<And>s s' a. PS s s' a \\<Longrightarrow> QS s s' a\"\n      and PUQU: \"\\<And>s s'.   PU s s'   \\<Longrightarrow> QU s s'\"\n    shows \"s \\<in> oreachable A QS QU\"", "lemma act_simp [iff]: \"act I s s' a = I a\"", "lemma reachable_in_oreachable [elim]:\n    fixes s\n  assumes \"s \\<in> reachable A I\"\n    shows \"s \\<in> oreachable A (act I) U\"", "lemma oinvariantI [intro]:\n    fixes T TI S U P\n  assumes init: \"\\<And>s. s \\<in> init A \\<Longrightarrow> P s\"\n      and other: \"\\<And>g g' l.\n                  \\<lbrakk> (g, l) \\<in> oreachable A S U; P (g, l); U g g' \\<rbrakk> \\<Longrightarrow> P (g', l)\"\n      and local: \"\\<And>s a s'.\n                  \\<lbrakk> s \\<in> oreachable A S U; P s; (s, a, s') \\<in> trans A; S (fst s) (fst s') a \\<rbrakk> \\<Longrightarrow> P s'\"\n    shows \"A \\<Turnstile> (S, U \\<rightarrow>) P\"", "lemma oinvariant_oreachableI:\n  assumes \"\\<And>\\<sigma> s. (\\<sigma>, s)\\<in>oreachable A S U \\<Longrightarrow> P (\\<sigma>, s)\"\n  shows \"A \\<Turnstile> (S, U \\<rightarrow>) P\"", "lemma oinvariant_pairI [intro]:\n  assumes init: \"\\<And>\\<sigma> p. (\\<sigma>, p) \\<in> init A \\<Longrightarrow> P (\\<sigma>, p)\"\n      and local: \"\\<And>\\<sigma> p \\<sigma>' p' a.\n                   \\<lbrakk> (\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p); ((\\<sigma>, p), a, (\\<sigma>', p')) \\<in> trans A;\n                     S \\<sigma> \\<sigma>' a \\<rbrakk> \\<Longrightarrow> P (\\<sigma>', p')\"\n      and other: \"\\<And>\\<sigma> \\<sigma>' p.\n                  \\<lbrakk> (\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p); U \\<sigma> \\<sigma>' \\<rbrakk> \\<Longrightarrow> P (\\<sigma>', p)\"\n    shows \"A \\<Turnstile> (S, U \\<rightarrow>) P\"", "lemma oinvariantD [dest]:\n  assumes \"A \\<Turnstile> (S, U \\<rightarrow>) P\"\n      and \"s \\<in> oreachable A S U\"\n    shows \"P s\"", "lemma oinvariant_initD [dest, elim]:\n  assumes invP: \"A \\<Turnstile> (S, U \\<rightarrow>) P\"\n      and init: \"s \\<in> init A\"\n    shows \"P s\"", "lemma oinvariant_weakenE [elim!]:\n  assumes invP: \"A \\<Turnstile> (PS, PU \\<rightarrow>) P\"\n      and PQ:   \"\\<And>s. P s \\<Longrightarrow> Q s\"\n      and QSPS: \"\\<And>s s' a. QS s s' a \\<Longrightarrow> PS s s' a\"\n      and QUPU: \"\\<And>s s'.   QU s s'   \\<Longrightarrow> PU s s'\"\n    shows       \"A \\<Turnstile> (QS, QU \\<rightarrow>) Q\"", "lemma oinvariant_weakenD [dest]:\n  assumes \"A \\<Turnstile> (S', U' \\<rightarrow>) P\"\n      and \"(\\<sigma>, p) \\<in> oreachable A S U\"\n      and weakenS: \"\\<And>s s' a. S s s' a \\<Longrightarrow> S' s s' a\"\n      and weakenU: \"\\<And>s s'. U s s' \\<Longrightarrow> U' s s'\"\n    shows \"P (\\<sigma>, p)\"", "lemma close_open_invariant:\n  assumes oinv: \"A \\<Turnstile> (act I, U \\<rightarrow>) P\"\n    shows \"A \\<TTurnstile> (I \\<rightarrow>) P\"", "lemma local_stepsI [intro!]:\n  assumes \"\\<And>\\<sigma> \\<zeta> s a \\<sigma>' \\<zeta>' s'. \\<lbrakk> ((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> T; \\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j \\<rbrakk>\n                               \\<Longrightarrow> (\\<exists>\\<zeta>'. (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and> ((\\<zeta>, s), a, (\\<zeta>', s')) \\<in> T)\"\n    shows \"local_steps T J\"", "lemma local_stepsE [elim, dest]:\n  assumes \"local_steps T J\"\n      and \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> T\"\n      and \"\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j\"\n    shows \"\\<exists>\\<zeta>'. (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and> ((\\<zeta>, s), a, (\\<zeta>', s')) \\<in> T\"", "lemma other_stepsI [intro!]:\n  assumes \"\\<And>\\<sigma> \\<sigma>' j. \\<lbrakk> U \\<sigma> \\<sigma>'; j \\<in> J \\<rbrakk> \\<Longrightarrow> \\<sigma>' j = \\<sigma> j\"\n    shows \"other_steps U J\"", "lemma other_stepsE [elim]:\n  assumes \"other_steps U J\"\n      and \"U \\<sigma> \\<sigma>'\"\n    shows \"\\<forall>j\\<in>J. \\<sigma>' j = \\<sigma> j\"", "lemma subreachableI [intro]:\n  assumes \"local_steps (trans A) J\"\n      and \"other_steps U J\"\n    shows \"subreachable A U J\"", "lemma subreachableE [elim]:\n  assumes \"subreachable A U J\"\n      and \"s \\<in> oreachable A (\\<lambda>s s'. I) U\"\n    shows \"\\<exists>\\<sigma>. (\\<forall>j\\<in>J. \\<sigma> j = (fst s) j) \\<and> (\\<sigma>, snd s) \\<in> reachable A I\"", "lemma subreachableE_pair [elim]:\n  assumes \"subreachable A U J\"\n      and \"(\\<sigma>, s) \\<in> oreachable A (\\<lambda>s s'. I) U\"\n    shows \"\\<exists>\\<zeta>. (\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j) \\<and> (\\<zeta>, s) \\<in> reachable A I\"", "lemma subreachable_otherE [elim]:\n  assumes \"subreachable A U J\"\n      and \"(\\<sigma>, l) \\<in> oreachable A (\\<lambda>s s'. I) U\"\n      and \"U \\<sigma> \\<sigma>'\"\n    shows \"\\<exists>\\<zeta>'. (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and> (\\<zeta>', l) \\<in> reachable A I\"", "lemma open_closed_invariant:\n    fixes J\n  assumes \"A \\<TTurnstile> (I \\<rightarrow>) P\"\n      and \"subreachable A U J\"\n      and localp: \"\\<And>\\<sigma> \\<sigma>' s. \\<lbrakk> \\<forall>j\\<in>J. \\<sigma>' j = \\<sigma> j; P (\\<sigma>', s) \\<rbrakk> \\<Longrightarrow> P (\\<sigma>, s)\"\n    shows \"A \\<Turnstile> (act I, U \\<rightarrow>) P\"", "lemma oinvariant_anyact:\n  assumes \"A \\<Turnstile> (act TT, U \\<rightarrow>) P\"\n    shows \"A \\<Turnstile> (S, U \\<rightarrow>) P\"", "lemma ostep_invariant_def':\n  \"(A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P) = (\\<forall>s\\<in>oreachable A S U.\n                           (\\<forall>a s'. (s, a, s') \\<in> trans A \\<and> S (fst s) (fst s') a \\<longrightarrow> P (s, a, s')))\"", "lemma ostep_invariantI [intro]:\n  assumes *: \"\\<And>\\<sigma> s a \\<sigma>' s'. \\<lbrakk> (\\<sigma>, s)\\<in>oreachable A S U; ((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans A; S \\<sigma> \\<sigma>' a \\<rbrakk>\n                             \\<Longrightarrow> P ((\\<sigma>, s), a, (\\<sigma>', s'))\"\n    shows \"A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P\"", "lemma ostep_invariantD [dest]:\n  assumes \"A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P\"\n      and \"(\\<sigma>, s)\\<in>oreachable A S U\"\n      and \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans A\"\n      and \"S \\<sigma> \\<sigma>' a\"\n    shows \"P ((\\<sigma>, s), a, (\\<sigma>', s'))\"", "lemma ostep_invariantE [elim]:\n  assumes \"A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P\"\n      and \"(\\<sigma>, s)\\<in>oreachable A S U\"\n      and \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans A\"\n      and \"S \\<sigma> \\<sigma>' a\"\n      and \"P ((\\<sigma>, s), a, (\\<sigma>', s')) \\<Longrightarrow> Q\"\n    shows \"Q\"", "lemma ostep_invariant_weakenE [elim!]:\n  assumes invP: \"A \\<Turnstile>\\<^sub>A (PS, PU \\<rightarrow>) P\"\n      and PQ:   \"\\<And>t. P t \\<Longrightarrow> Q t\"\n      and QSPS: \"\\<And>\\<sigma> \\<sigma>' a. QS \\<sigma> \\<sigma>' a \\<Longrightarrow> PS \\<sigma> \\<sigma>' a\"\n      and QUPU: \"\\<And>\\<sigma> \\<sigma>'.   QU \\<sigma> \\<sigma>'   \\<Longrightarrow> PU \\<sigma> \\<sigma>'\"\n    shows       \"A \\<Turnstile>\\<^sub>A (QS, QU \\<rightarrow>) Q\"", "lemma ostep_invariant_weaken_with_invariantE [elim]:\n  assumes pinv: \"A \\<Turnstile> (S, U \\<rightarrow>) P\"\n      and qinv: \"A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) Q\"\n      and wr: \"\\<And>\\<sigma> s a \\<sigma>' s'. \\<lbrakk> P (\\<sigma>, s); P (\\<sigma>', s'); Q ((\\<sigma>, s), a, (\\<sigma>', s')); S \\<sigma> \\<sigma>' a \\<rbrakk>\n                              \\<Longrightarrow> R ((\\<sigma>, s), a, (\\<sigma>', s'))\"\n    shows \"A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) R\"", "lemma ostep_to_invariantI:\n  assumes sinv: \"A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) Q\"\n      and init: \"\\<And>\\<sigma> s. (\\<sigma>, s) \\<in> init A \\<Longrightarrow> P (\\<sigma>, s)\"\n      and local: \"\\<And>\\<sigma> s \\<sigma>' s' a.\n                    \\<lbrakk> (\\<sigma>, s) \\<in> oreachable A S U;\n                      P (\\<sigma>, s);\n                      Q ((\\<sigma>, s), a, (\\<sigma>', s'));\n                      S \\<sigma> \\<sigma>' a \\<rbrakk> \\<Longrightarrow> P (\\<sigma>', s')\"\n      and other: \"\\<And>\\<sigma> \\<sigma>' s. \\<lbrakk> (\\<sigma>, s) \\<in> oreachable A S U; U \\<sigma> \\<sigma>'; P (\\<sigma>, s) \\<rbrakk> \\<Longrightarrow> P (\\<sigma>', s)\"\n    shows \"A \\<Turnstile> (S, U \\<rightarrow>) P\"", "lemma open_closed_step_invariant:\n  assumes \"A \\<TTurnstile>\\<^sub>A (I \\<rightarrow>) P\"\n      and \"local_steps (trans A) J\"\n      and \"other_steps U J\"\n      and localp: \"\\<And>\\<sigma> \\<zeta> a \\<sigma>' \\<zeta>' s s'.\n                   \\<lbrakk> \\<forall>j\\<in>J. \\<sigma> j = \\<zeta> j; \\<forall>j\\<in>J. \\<sigma>' j = \\<zeta>' j; P ((\\<sigma>, s), a, (\\<sigma>', s')) \\<rbrakk>\n                   \\<Longrightarrow> P ((\\<zeta>, s), a, (\\<zeta>', s'))\"\n    shows \"A \\<Turnstile>\\<^sub>A (act I, U \\<rightarrow>) P\"", "lemma oinvariant_step_anyact:\n  assumes \"p \\<Turnstile>\\<^sub>A (act TT, U \\<rightarrow>) P\"\n    shows \"p \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P\"", "lemma otherwithI [intro]:\n  assumes other: \"\\<And>j. j\\<notin>I \\<Longrightarrow> Q (\\<sigma> j) (\\<sigma>' j)\"\n      and sync:  \"P \\<sigma> a\"\n    shows \"otherwith Q I P \\<sigma> \\<sigma>' a\"", "lemma otherwithE [elim]:\n  assumes \"otherwith Q I P \\<sigma> \\<sigma>' a\"\n      and \"\\<lbrakk> P \\<sigma> a; \\<forall>j. j\\<notin>I \\<longrightarrow> Q (\\<sigma> j) (\\<sigma>' j) \\<rbrakk> \\<Longrightarrow> R \\<sigma> \\<sigma>' a\"\n    shows \"R \\<sigma> \\<sigma>' a\"", "lemma otherwith_actionD [dest]:\n  assumes \"otherwith Q I P \\<sigma> \\<sigma>' a\"\n    shows \"P \\<sigma> a\"", "lemma otherwith_syncD [dest]:\n  assumes \"otherwith Q I P \\<sigma> \\<sigma>' a\"\n    shows \"\\<forall>j. j\\<notin>I \\<longrightarrow> Q (\\<sigma> j) (\\<sigma>' j)\"", "lemma otherwithEI [elim]:\n  assumes \"otherwith P I PO \\<sigma> \\<sigma>' a\"\n      and \"\\<And>\\<sigma> a. PO \\<sigma> a \\<Longrightarrow> QO \\<sigma> a\"\n    shows \"otherwith P I QO \\<sigma> \\<sigma>' a\"", "lemma all_but:\n  assumes \"\\<And>\\<xi>. S \\<xi> \\<xi>\"\n      and \"\\<sigma>' i = \\<sigma> i\"\n      and \"\\<forall>j. j \\<noteq> i \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\"\n    shows \"\\<forall>j. S (\\<sigma> j) (\\<sigma>' j)\"", "lemma all_but_eq [dest]:\n  assumes \"\\<sigma>' i = \\<sigma> i\"\n      and \"\\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma> j = \\<sigma>' j\"\n    shows \"\\<sigma> = \\<sigma>'\"", "lemma otherI [intro]:\n  assumes local: \"\\<And>i. i\\<in>I \\<Longrightarrow> \\<sigma>' i = \\<sigma> i\"\n      and other: \"\\<And>j. j\\<notin>I \\<Longrightarrow> P (\\<sigma> j) (\\<sigma>' j)\"\n    shows \"other P I \\<sigma> \\<sigma>'\"", "lemma otherE [elim]:\n  assumes \"other P I \\<sigma> \\<sigma>'\"\n      and \"\\<lbrakk> \\<forall>i\\<in>I. \\<sigma>' i = \\<sigma> i; \\<forall>j. j\\<notin>I \\<longrightarrow> P (\\<sigma> j) (\\<sigma>' j) \\<rbrakk> \\<Longrightarrow> R \\<sigma> \\<sigma>'\"\n    shows \"R \\<sigma> \\<sigma>'\"", "lemma other_localD [dest]:\n  \"other P {i} \\<sigma> \\<sigma>' \\<Longrightarrow> \\<sigma>' i = \\<sigma> i\"", "lemma other_otherD [dest]:\n  \"other P {i} \\<sigma> \\<sigma>' \\<Longrightarrow> \\<forall>j. j\\<noteq>i \\<longrightarrow> P (\\<sigma> j) (\\<sigma>' j)\"", "lemma other_bothE [elim]:\n  assumes \"other P {i} \\<sigma> \\<sigma>'\"\n  obtains \"\\<sigma>' i = \\<sigma> i\" and \"\\<forall>j. j\\<noteq>i \\<longrightarrow> P (\\<sigma> j) (\\<sigma>' j)\"", "lemma weaken_local [elim]:\n  assumes \"other P I \\<sigma> \\<sigma>'\"\n      and PQ: \"\\<And>\\<xi> \\<xi>'. P \\<xi> \\<xi>' \\<Longrightarrow> Q \\<xi> \\<xi>'\"\n    shows \"other Q I \\<sigma> \\<sigma>'\"", "lemma globalsimp [simp]: \"global P s = P (fst s)\"", "lemma globalasimp [simp]: \"globala P s = P (fst (fst s), fst (snd s), fst (snd (snd s)))\""], "translations": [["", "lemma oreachable_local' [elim]:\n  assumes \"(\\<sigma>, p) \\<in> oreachable A S U\"\n      and \"((\\<sigma>, p), a, (\\<sigma>', p')) \\<in> trans A\"\n      and \"S \\<sigma> \\<sigma>' a\"\n    shows \"(\\<sigma>', p') \\<in> oreachable A S U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', p') \\<in> oreachable A S U", "using assms"], ["proof (prove)\nusing this:\n  (\\<sigma>, p) \\<in> oreachable A S U\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A\n  S \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p') \\<in> oreachable A S U", "by (metis fst_conv oreachable.oreachable_local)"], ["", "lemma oreachable_other' [elim]:\n  assumes \"(\\<sigma>, p) \\<in> oreachable A S U\"\n      and \"U \\<sigma> \\<sigma>'\"\n    shows \"(\\<sigma>', p) \\<in> oreachable A S U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', p) \\<in> oreachable A S U", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>', p) \\<in> oreachable A S U", "from \\<open>U \\<sigma> \\<sigma>'\\<close>"], ["proof (chain)\npicking this:\n  U \\<sigma> \\<sigma>'", "have \"U (fst (\\<sigma>, p)) \\<sigma>'\""], ["proof (prove)\nusing this:\n  U \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. U (fst (\\<sigma>, p)) \\<sigma>'", "by simp"], ["proof (state)\nthis:\n  U (fst (\\<sigma>, p)) \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p) \\<in> oreachable A S U", "with \\<open>(\\<sigma>, p) \\<in> oreachable A S U\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, p) \\<in> oreachable A S U\n  U (fst (\\<sigma>, p)) \\<sigma>'", "have \"(\\<sigma>', snd (\\<sigma>, p)) \\<in> oreachable A S U\""], ["proof (prove)\nusing this:\n  (\\<sigma>, p) \\<in> oreachable A S U\n  U (fst (\\<sigma>, p)) \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', snd (\\<sigma>, p)) \\<in> oreachable A S U", "by (rule oreachable_other)"], ["proof (state)\nthis:\n  (\\<sigma>', snd (\\<sigma>, p)) \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p) \\<in> oreachable A S U", "thus \"(\\<sigma>', p) \\<in> oreachable A S U\""], ["proof (prove)\nusing this:\n  (\\<sigma>', snd (\\<sigma>, p)) \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p) \\<in> oreachable A S U", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>', p) \\<in> oreachable A S U\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oreachable_pair_induct [consumes, case_names init other local]:\n  assumes \"(\\<sigma>, p) \\<in> oreachable A S U\"\n      and \"\\<And>\\<sigma> p. (\\<sigma>, p) \\<in> init A \\<Longrightarrow> P \\<sigma> p\"\n      and \"(\\<And>\\<sigma> p \\<sigma>'. \\<lbrakk> (\\<sigma>, p) \\<in> oreachable A S U; P \\<sigma> p; U \\<sigma> \\<sigma>' \\<rbrakk> \\<Longrightarrow> P \\<sigma>' p)\"\n      and \"(\\<And>\\<sigma> p \\<sigma>' p' a. \\<lbrakk> (\\<sigma>, p) \\<in> oreachable A S U; P \\<sigma> p;\n                            ((\\<sigma>, p), a, (\\<sigma>', p')) \\<in> trans A; S \\<sigma> \\<sigma>' a \\<rbrakk> \\<Longrightarrow> P \\<sigma>' p')\"\n    shows \"P \\<sigma> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sigma> p", "using assms (1)"], ["proof (prove)\nusing this:\n  (\\<sigma>, p) \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. P \\<sigma> p", "proof (induction \"(\\<sigma>, p)\" arbitrary: \\<sigma> p)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p) \\<in> init A \\<Longrightarrow> P \\<sigma> p\n 2. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (snd s)", "fix \\<sigma> p"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p) \\<in> init A \\<Longrightarrow> P \\<sigma> p\n 2. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (snd s)", "assume \"(\\<sigma>, p) \\<in> init A\""], ["proof (state)\nthis:\n  (\\<sigma>, p) \\<in> init A\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p) \\<in> init A \\<Longrightarrow> P \\<sigma> p\n 2. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (snd s)", "with assms(2)"], ["proof (chain)\npicking this:\n  (?\\<sigma>, ?p) \\<in> init A \\<Longrightarrow> P ?\\<sigma> ?p\n  (\\<sigma>, p) \\<in> init A", "show \"P \\<sigma> p\""], ["proof (prove)\nusing this:\n  (?\\<sigma>, ?p) \\<in> init A \\<Longrightarrow> P ?\\<sigma> ?p\n  (\\<sigma>, p) \\<in> init A\n\ngoal (1 subgoal):\n 1. P \\<sigma> p", "."], ["proof (state)\nthis:\n  P \\<sigma> p\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (snd s)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (snd s)", "fix s \\<sigma>'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (snd s)", "assume \"s \\<in> oreachable A S U\"\n       and \"U (fst s) \\<sigma>'\"\n       and IH: \"\\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p\""], ["proof (state)\nthis:\n  s \\<in> oreachable A S U\n  U (fst s) \\<sigma>'\n  s = (?\\<sigma>, ?p) \\<Longrightarrow> P ?\\<sigma> ?p\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (snd s)", "from this(1)"], ["proof (chain)\npicking this:\n  s \\<in> oreachable A S U", "obtain \\<sigma> p where \"s = (\\<sigma>, p)\"\n                              and \"(\\<sigma>, p) \\<in> oreachable A S U\""], ["proof (prove)\nusing this:\n  s \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> p.\n        \\<lbrakk>s = (\\<sigma>, p);\n         (\\<sigma>, p) \\<in> oreachable A S U\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surjective_pairing)"], ["proof (state)\nthis:\n  s = (\\<sigma>, p)\n  (\\<sigma>, p) \\<in> oreachable A S U\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (snd s)", "note this(2)"], ["proof (state)\nthis:\n  (\\<sigma>, p) \\<in> oreachable A S U\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (snd s)", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, p) \\<in> oreachable A S U\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (snd s)", "from IH and \\<open>s = (\\<sigma>, p)\\<close>"], ["proof (chain)\npicking this:\n  s = (?\\<sigma>, ?p) \\<Longrightarrow> P ?\\<sigma> ?p\n  s = (\\<sigma>, p)", "have \"P \\<sigma> p\""], ["proof (prove)\nusing this:\n  s = (?\\<sigma>, ?p) \\<Longrightarrow> P ?\\<sigma> ?p\n  s = (\\<sigma>, p)\n\ngoal (1 subgoal):\n 1. P \\<sigma> p", "."], ["proof (state)\nthis:\n  P \\<sigma> p\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (snd s)", "moreover"], ["proof (state)\nthis:\n  P \\<sigma> p\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (snd s)", "from \\<open>U (fst s) \\<sigma>'\\<close> and \\<open>s = (\\<sigma>, p)\\<close>"], ["proof (chain)\npicking this:\n  U (fst s) \\<sigma>'\n  s = (\\<sigma>, p)", "have \"U \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  U (fst s) \\<sigma>'\n  s = (\\<sigma>, p)\n\ngoal (1 subgoal):\n 1. U \\<sigma> \\<sigma>'", "by simp"], ["proof (state)\nthis:\n  U \\<sigma> \\<sigma>'\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (snd s)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, p) \\<in> oreachable A S U\n  P \\<sigma> p\n  U \\<sigma> \\<sigma>'", "have \"P \\<sigma>' p\""], ["proof (prove)\nusing this:\n  (\\<sigma>, p) \\<in> oreachable A S U\n  P \\<sigma> p\n  U \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. P \\<sigma>' p", "by (rule assms(3))"], ["proof (state)\nthis:\n  P \\<sigma>' p\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (snd s)", "with \\<open>s = (\\<sigma>, p)\\<close>"], ["proof (chain)\npicking this:\n  s = (\\<sigma>, p)\n  P \\<sigma>' p", "show \"P \\<sigma>' (snd s)\""], ["proof (prove)\nusing this:\n  s = (\\<sigma>, p)\n  P \\<sigma>' p\n\ngoal (1 subgoal):\n 1. P \\<sigma>' (snd s)", "by simp"], ["proof (state)\nthis:\n  P \\<sigma>' (snd s)\n\ngoal (1 subgoal):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p", "fix s a \\<sigma>' p'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p", "assume \"s \\<in> oreachable A S U\"\n       and tr: \"(s, a, (\\<sigma>', p')) \\<in> trans A\"\n       and \"S (fst s) (fst (\\<sigma>', p')) a\"\n       and IH: \"\\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p\""], ["proof (state)\nthis:\n  s \\<in> oreachable A S U\n  (s, a, \\<sigma>', p') \\<in> automaton.trans A\n  S (fst s) (fst (\\<sigma>', p')) a\n  s = (?\\<sigma>, ?p) \\<Longrightarrow> P ?\\<sigma> ?p\n\ngoal (1 subgoal):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p", "from this(1)"], ["proof (chain)\npicking this:\n  s \\<in> oreachable A S U", "obtain \\<sigma> p where \"s = (\\<sigma>, p)\"\n                              and \"(\\<sigma>, p) \\<in> oreachable A S U\""], ["proof (prove)\nusing this:\n  s \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> p.\n        \\<lbrakk>s = (\\<sigma>, p);\n         (\\<sigma>, p) \\<in> oreachable A S U\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surjective_pairing)"], ["proof (state)\nthis:\n  s = (\\<sigma>, p)\n  (\\<sigma>, p) \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p", "note this(2)"], ["proof (state)\nthis:\n  (\\<sigma>, p) \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, p) \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p", "from IH \\<open>s = (\\<sigma>, p)\\<close>"], ["proof (chain)\npicking this:\n  s = (?\\<sigma>, ?p) \\<Longrightarrow> P ?\\<sigma> ?p\n  s = (\\<sigma>, p)", "have \"P \\<sigma> p\""], ["proof (prove)\nusing this:\n  s = (?\\<sigma>, ?p) \\<Longrightarrow> P ?\\<sigma> ?p\n  s = (\\<sigma>, p)\n\ngoal (1 subgoal):\n 1. P \\<sigma> p", "."], ["proof (state)\nthis:\n  P \\<sigma> p\n\ngoal (1 subgoal):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p", "moreover"], ["proof (state)\nthis:\n  P \\<sigma> p\n\ngoal (1 subgoal):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p", "from tr and \\<open>s = (\\<sigma>, p)\\<close>"], ["proof (chain)\npicking this:\n  (s, a, \\<sigma>', p') \\<in> automaton.trans A\n  s = (\\<sigma>, p)", "have \"((\\<sigma>, p), a, (\\<sigma>', p')) \\<in> trans A\""], ["proof (prove)\nusing this:\n  (s, a, \\<sigma>', p') \\<in> automaton.trans A\n  s = (\\<sigma>, p)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A\n\ngoal (1 subgoal):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p", "moreover"], ["proof (state)\nthis:\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A\n\ngoal (1 subgoal):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p", "from \\<open>S (fst s) (fst (\\<sigma>', p')) a\\<close> and \\<open>s = (\\<sigma>, p)\\<close>"], ["proof (chain)\npicking this:\n  S (fst s) (fst (\\<sigma>', p')) a\n  s = (\\<sigma>, p)", "have \"S \\<sigma> \\<sigma>' a\""], ["proof (prove)\nusing this:\n  S (fst s) (fst (\\<sigma>', p')) a\n  s = (\\<sigma>, p)\n\ngoal (1 subgoal):\n 1. S \\<sigma> \\<sigma>' a", "by simp"], ["proof (state)\nthis:\n  S \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<And>s a \\<sigma> p.\n       \\<lbrakk>s \\<in> oreachable A S U;\n        \\<And>\\<sigma> p. s = (\\<sigma>, p) \\<Longrightarrow> P \\<sigma> p;\n        (s, a, \\<sigma>, p) \\<in> automaton.trans A;\n        S (fst s) (fst (\\<sigma>, p)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> p", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, p) \\<in> oreachable A S U\n  P \\<sigma> p\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A\n  S \\<sigma> \\<sigma>' a", "show \"P \\<sigma>' p'\""], ["proof (prove)\nusing this:\n  (\\<sigma>, p) \\<in> oreachable A S U\n  P \\<sigma> p\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A\n  S \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. P \\<sigma>' p'", "by (rule assms(4))"], ["proof (state)\nthis:\n  P \\<sigma>' p'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oreachable_weakenE [elim]:\n  assumes \"s \\<in> oreachable A PS PU\"\n      and PSQS: \"\\<And>s s' a. PS s s' a \\<Longrightarrow> QS s s' a\"\n      and PUQU: \"\\<And>s s'.   PU s s'   \\<Longrightarrow> QU s s'\"\n    shows \"s \\<in> oreachable A QS QU\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> oreachable A QS QU", "using assms(1)"], ["proof (prove)\nusing this:\n  s \\<in> oreachable A PS PU\n\ngoal (1 subgoal):\n 1. s \\<in> oreachable A QS QU", "proof (induction)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s. s \\<in> init A \\<Longrightarrow> s \\<in> oreachable A QS QU\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        (s, a, s') \\<in> automaton.trans A; PS (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> oreachable A QS QU\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        PU (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', snd s) \\<in> oreachable A QS QU", "fix s"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s. s \\<in> init A \\<Longrightarrow> s \\<in> oreachable A QS QU\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        (s, a, s') \\<in> automaton.trans A; PS (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> oreachable A QS QU\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        PU (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', snd s) \\<in> oreachable A QS QU", "assume \"s \\<in> init A\""], ["proof (state)\nthis:\n  s \\<in> init A\n\ngoal (3 subgoals):\n 1. \\<And>s. s \\<in> init A \\<Longrightarrow> s \\<in> oreachable A QS QU\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        (s, a, s') \\<in> automaton.trans A; PS (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> oreachable A QS QU\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        PU (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', snd s) \\<in> oreachable A QS QU", "thus \"s \\<in> oreachable A QS QU\""], ["proof (prove)\nusing this:\n  s \\<in> init A\n\ngoal (1 subgoal):\n 1. s \\<in> oreachable A QS QU", ".."], ["proof (state)\nthis:\n  s \\<in> oreachable A QS QU\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        (s, a, s') \\<in> automaton.trans A; PS (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> oreachable A QS QU\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        PU (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', snd s) \\<in> oreachable A QS QU", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        (s, a, s') \\<in> automaton.trans A; PS (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> oreachable A QS QU\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        PU (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', snd s) \\<in> oreachable A QS QU", "fix s a s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        (s, a, s') \\<in> automaton.trans A; PS (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> oreachable A QS QU\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        PU (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', snd s) \\<in> oreachable A QS QU", "assume \"s \\<in> oreachable A QS QU\"\n       and \"(s, a, s') \\<in> trans A\"\n       and \"PS (fst s) (fst s') a\""], ["proof (state)\nthis:\n  s \\<in> oreachable A QS QU\n  (s, a, s') \\<in> automaton.trans A\n  PS (fst s) (fst s') a\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        (s, a, s') \\<in> automaton.trans A; PS (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> oreachable A QS QU\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        PU (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', snd s) \\<in> oreachable A QS QU", "from \\<open>PS (fst s) (fst s') a\\<close>"], ["proof (chain)\npicking this:\n  PS (fst s) (fst s') a", "have \"QS (fst s) (fst s') a\""], ["proof (prove)\nusing this:\n  PS (fst s) (fst s') a\n\ngoal (1 subgoal):\n 1. QS (fst s) (fst s') a", "by (rule PSQS)"], ["proof (state)\nthis:\n  QS (fst s) (fst s') a\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        (s, a, s') \\<in> automaton.trans A; PS (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> oreachable A QS QU\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        PU (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', snd s) \\<in> oreachable A QS QU", "with \\<open>s \\<in> oreachable A QS QU\\<close> and \\<open>(s, a, s') \\<in> trans A\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> oreachable A QS QU\n  (s, a, s') \\<in> automaton.trans A\n  QS (fst s) (fst s') a", "show \"s' \\<in> oreachable A QS QU\""], ["proof (prove)\nusing this:\n  s \\<in> oreachable A QS QU\n  (s, a, s') \\<in> automaton.trans A\n  QS (fst s) (fst s') a\n\ngoal (1 subgoal):\n 1. s' \\<in> oreachable A QS QU", ".."], ["proof (state)\nthis:\n  s' \\<in> oreachable A QS QU\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        PU (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', snd s) \\<in> oreachable A QS QU", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        PU (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', snd s) \\<in> oreachable A QS QU", "fix s g'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        PU (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', snd s) \\<in> oreachable A QS QU", "assume \"s \\<in> oreachable A QS QU\"\n       and \"PU (fst s) g'\""], ["proof (state)\nthis:\n  s \\<in> oreachable A QS QU\n  PU (fst s) g'\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        PU (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', snd s) \\<in> oreachable A QS QU", "from \\<open>PU (fst s) g'\\<close>"], ["proof (chain)\npicking this:\n  PU (fst s) g'", "have \"QU (fst s) g'\""], ["proof (prove)\nusing this:\n  PU (fst s) g'\n\ngoal (1 subgoal):\n 1. QU (fst s) g'", "by (rule PUQU)"], ["proof (state)\nthis:\n  QU (fst s) g'\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A PS PU; s \\<in> oreachable A QS QU;\n        PU (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', snd s) \\<in> oreachable A QS QU", "with \\<open>s \\<in> oreachable A QS QU\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> oreachable A QS QU\n  QU (fst s) g'", "show \"(g', snd s) \\<in> oreachable A QS QU\""], ["proof (prove)\nusing this:\n  s \\<in> oreachable A QS QU\n  QU (fst s) g'\n\ngoal (1 subgoal):\n 1. (g', snd s) \\<in> oreachable A QS QU", ".."], ["proof (state)\nthis:\n  (g', snd s) \\<in> oreachable A QS QU\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n  act :: \"('a \\<Rightarrow> bool) \\<Rightarrow> 's \\<Rightarrow> 's \\<Rightarrow> 'a \\<Rightarrow> bool\"\nwhere\n  \"act I \\<equiv> (\\<lambda>_ _. I)\""], ["", "lemma act_simp [iff]: \"act I s s' a = I a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. act I s s' a = I a", "unfolding act_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. I a = I a", ".."], ["", "lemma reachable_in_oreachable [elim]:\n    fixes s\n  assumes \"s \\<in> reachable A I\"\n    shows \"s \\<in> oreachable A (act I) U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> oreachable A (act I) U", "unfolding act_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> oreachable A (\\<lambda>_ _. I) U", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> reachable A I\n\ngoal (1 subgoal):\n 1. s \\<in> oreachable A (\\<lambda>_ _. I) U", "proof induction"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init A \\<Longrightarrow>\n       s \\<in> oreachable A (\\<lambda>_ _. I) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable A I;\n        s \\<in> oreachable A (\\<lambda>_ _. I) U;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> oreachable A (\\<lambda>_ _. I) U", "fix s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init A \\<Longrightarrow>\n       s \\<in> oreachable A (\\<lambda>_ _. I) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable A I;\n        s \\<in> oreachable A (\\<lambda>_ _. I) U;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> oreachable A (\\<lambda>_ _. I) U", "assume \"s \\<in> init A\""], ["proof (state)\nthis:\n  s \\<in> init A\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init A \\<Longrightarrow>\n       s \\<in> oreachable A (\\<lambda>_ _. I) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable A I;\n        s \\<in> oreachable A (\\<lambda>_ _. I) U;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> oreachable A (\\<lambda>_ _. I) U", "thus \"s \\<in> oreachable A (\\<lambda>_ _. I) U\""], ["proof (prove)\nusing this:\n  s \\<in> init A\n\ngoal (1 subgoal):\n 1. s \\<in> oreachable A (\\<lambda>_ _. I) U", ".."], ["proof (state)\nthis:\n  s \\<in> oreachable A (\\<lambda>_ _. I) U\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable A I;\n        s \\<in> oreachable A (\\<lambda>_ _. I) U;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> oreachable A (\\<lambda>_ _. I) U", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable A I;\n        s \\<in> oreachable A (\\<lambda>_ _. I) U;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> oreachable A (\\<lambda>_ _. I) U", "fix s a s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable A I;\n        s \\<in> oreachable A (\\<lambda>_ _. I) U;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> oreachable A (\\<lambda>_ _. I) U", "assume \"s \\<in> oreachable A (\\<lambda>_ _. I) U\"\n       and \"(s, a, s') \\<in> trans A\"\n       and \"I a\""], ["proof (state)\nthis:\n  s \\<in> oreachable A (\\<lambda>_ _. I) U\n  (s, a, s') \\<in> automaton.trans A\n  I a\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable A I;\n        s \\<in> oreachable A (\\<lambda>_ _. I) U;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> oreachable A (\\<lambda>_ _. I) U", "thus \"s' \\<in> oreachable A (\\<lambda>_ _. I) U\""], ["proof (prove)\nusing this:\n  s \\<in> oreachable A (\\<lambda>_ _. I) U\n  (s, a, s') \\<in> automaton.trans A\n  I a\n\ngoal (1 subgoal):\n 1. s' \\<in> oreachable A (\\<lambda>_ _. I) U", "by (rule oreachable_local)"], ["proof (state)\nthis:\n  s' \\<in> oreachable A (\\<lambda>_ _. I) U\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Open Invariance\""], ["", "definition oinvariant\n  :: \"('g \\<times> 'l, 'a) automaton\n      \\<Rightarrow> ('g \\<Rightarrow> 'g \\<Rightarrow> 'a \\<Rightarrow> bool) \\<Rightarrow> ('g \\<Rightarrow> 'g \\<Rightarrow> bool)\n      \\<Rightarrow> (('g \\<times> 'l) \\<Rightarrow> bool) \\<Rightarrow> bool\"\n  (\"_ \\<Turnstile> (1'((1_),/ (1_) \\<rightarrow>')/ _)\" [100, 0, 0, 9] 8)\nwhere\n  \"(A \\<Turnstile> (S, U \\<rightarrow>) P) = (\\<forall>s\\<in>oreachable A S U. P s)\""], ["", "lemma oinvariantI [intro]:\n    fixes T TI S U P\n  assumes init: \"\\<And>s. s \\<in> init A \\<Longrightarrow> P s\"\n      and other: \"\\<And>g g' l.\n                  \\<lbrakk> (g, l) \\<in> oreachable A S U; P (g, l); U g g' \\<rbrakk> \\<Longrightarrow> P (g', l)\"\n      and local: \"\\<And>s a s'.\n                  \\<lbrakk> s \\<in> oreachable A S U; P s; (s, a, s') \\<in> trans A; S (fst s) (fst s') a \\<rbrakk> \\<Longrightarrow> P s'\"\n    shows \"A \\<Turnstile> (S, U \\<rightarrow>) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile> (S, U \\<rightarrow>) P", "unfolding oinvariant_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball (oreachable A S U) P", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> oreachable A S U \\<Longrightarrow> P x", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> oreachable A S U \\<Longrightarrow> P x", "assume \"s \\<in> oreachable A S U\""], ["proof (state)\nthis:\n  s \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> oreachable A S U \\<Longrightarrow> P x", "thus \"P s\""], ["proof (prove)\nusing this:\n  s \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. P s", "proof induction"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s. s \\<in> init A \\<Longrightarrow> P s\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s;\n        (s, a, s') \\<in> automaton.trans A; S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "fix s"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s. s \\<in> init A \\<Longrightarrow> P s\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s;\n        (s, a, s') \\<in> automaton.trans A; S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "assume \"s \\<in> init A\""], ["proof (state)\nthis:\n  s \\<in> init A\n\ngoal (3 subgoals):\n 1. \\<And>s. s \\<in> init A \\<Longrightarrow> P s\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s;\n        (s, a, s') \\<in> automaton.trans A; S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "thus \"P s\""], ["proof (prove)\nusing this:\n  s \\<in> init A\n\ngoal (1 subgoal):\n 1. P s", "by (rule init)"], ["proof (state)\nthis:\n  P s\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s;\n        (s, a, s') \\<in> automaton.trans A; S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s;\n        (s, a, s') \\<in> automaton.trans A; S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "fix s a s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s;\n        (s, a, s') \\<in> automaton.trans A; S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "assume \"s \\<in> oreachable A S U\"\n         and \"P s\"\n         and \"(s, a, s') \\<in> trans A\"\n         and \"S (fst s) (fst s') a\""], ["proof (state)\nthis:\n  s \\<in> oreachable A S U\n  P s\n  (s, a, s') \\<in> automaton.trans A\n  S (fst s) (fst s') a\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s;\n        (s, a, s') \\<in> automaton.trans A; S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "thus \"P s'\""], ["proof (prove)\nusing this:\n  s \\<in> oreachable A S U\n  P s\n  (s, a, s') \\<in> automaton.trans A\n  S (fst s) (fst s') a\n\ngoal (1 subgoal):\n 1. P s'", "by (rule local)"], ["proof (state)\nthis:\n  P s'\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "fix s g'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "assume \"s \\<in> oreachable A S U\"\n          and \"P s\"\n          and \"U (fst s) g'\""], ["proof (state)\nthis:\n  s \\<in> oreachable A S U\n  P s\n  U (fst s) g'\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A S U; P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "thus \"P (g', snd s)\""], ["proof (prove)\nusing this:\n  s \\<in> oreachable A S U\n  P s\n  U (fst s) g'\n\ngoal (1 subgoal):\n 1. P (g', snd s)", "by - (rule other [where g=\"fst s\"], simp_all)"], ["proof (state)\nthis:\n  P (g', snd s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oinvariant_oreachableI:\n  assumes \"\\<And>\\<sigma> s. (\\<sigma>, s)\\<in>oreachable A S U \\<Longrightarrow> P (\\<sigma>, s)\"\n  shows \"A \\<Turnstile> (S, U \\<rightarrow>) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile> (S, U \\<rightarrow>) P", "using assms"], ["proof (prove)\nusing this:\n  (?\\<sigma>, ?s) \\<in> oreachable A S U \\<Longrightarrow> P (?\\<sigma>, ?s)\n\ngoal (1 subgoal):\n 1. A \\<Turnstile> (S, U \\<rightarrow>) P", "unfolding oinvariant_def"], ["proof (prove)\nusing this:\n  (?\\<sigma>, ?s) \\<in> oreachable A S U \\<Longrightarrow> P (?\\<sigma>, ?s)\n\ngoal (1 subgoal):\n 1. Ball (oreachable A S U) P", "by auto"], ["", "lemma oinvariant_pairI [intro]:\n  assumes init: \"\\<And>\\<sigma> p. (\\<sigma>, p) \\<in> init A \\<Longrightarrow> P (\\<sigma>, p)\"\n      and local: \"\\<And>\\<sigma> p \\<sigma>' p' a.\n                   \\<lbrakk> (\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p); ((\\<sigma>, p), a, (\\<sigma>', p')) \\<in> trans A;\n                     S \\<sigma> \\<sigma>' a \\<rbrakk> \\<Longrightarrow> P (\\<sigma>', p')\"\n      and other: \"\\<And>\\<sigma> \\<sigma>' p.\n                  \\<lbrakk> (\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p); U \\<sigma> \\<sigma>' \\<rbrakk> \\<Longrightarrow> P (\\<sigma>', p)\"\n    shows \"A \\<Turnstile> (S, U \\<rightarrow>) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile> (S, U \\<rightarrow>) P", "by (rule oinvariantI)\n     (clarsimp | erule init | erule(3) local | erule(2) other)+"], ["", "lemma oinvariantD [dest]:\n  assumes \"A \\<Turnstile> (S, U \\<rightarrow>) P\"\n      and \"s \\<in> oreachable A S U\"\n    shows \"P s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P s", "using assms"], ["proof (prove)\nusing this:\n  A \\<Turnstile> (S, U \\<rightarrow>) P\n  s \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. P s", "unfolding oinvariant_def"], ["proof (prove)\nusing this:\n  Ball (oreachable A S U) P\n  s \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. P s", "by clarsimp"], ["", "lemma oinvariant_initD [dest, elim]:\n  assumes invP: \"A \\<Turnstile> (S, U \\<rightarrow>) P\"\n      and init: \"s \\<in> init A\"\n    shows \"P s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P s", "from init"], ["proof (chain)\npicking this:\n  s \\<in> init A", "have \"s \\<in> oreachable A S U\""], ["proof (prove)\nusing this:\n  s \\<in> init A\n\ngoal (1 subgoal):\n 1. s \\<in> oreachable A S U", ".."], ["proof (state)\nthis:\n  s \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. P s", "with invP"], ["proof (chain)\npicking this:\n  A \\<Turnstile> (S, U \\<rightarrow>) P\n  s \\<in> oreachable A S U", "show ?thesis"], ["proof (prove)\nusing this:\n  A \\<Turnstile> (S, U \\<rightarrow>) P\n  s \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. P s", ".."], ["proof (state)\nthis:\n  P s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oinvariant_weakenE [elim!]:\n  assumes invP: \"A \\<Turnstile> (PS, PU \\<rightarrow>) P\"\n      and PQ:   \"\\<And>s. P s \\<Longrightarrow> Q s\"\n      and QSPS: \"\\<And>s s' a. QS s s' a \\<Longrightarrow> PS s s' a\"\n      and QUPU: \"\\<And>s s'.   QU s s'   \\<Longrightarrow> PU s s'\"\n    shows       \"A \\<Turnstile> (QS, QU \\<rightarrow>) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile> (QS, QU \\<rightarrow>) Q", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p) \\<in> init A \\<Longrightarrow> Q (\\<sigma>, p)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p')\n 3. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "fix s"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p) \\<in> init A \\<Longrightarrow> Q (\\<sigma>, p)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p')\n 3. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "assume \"s \\<in> init A\""], ["proof (state)\nthis:\n  s \\<in> init A\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p) \\<in> init A \\<Longrightarrow> Q (\\<sigma>, p)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p')\n 3. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "with invP"], ["proof (chain)\npicking this:\n  A \\<Turnstile> (PS, PU \\<rightarrow>) P\n  s \\<in> init A", "have \"P s\""], ["proof (prove)\nusing this:\n  A \\<Turnstile> (PS, PU \\<rightarrow>) P\n  s \\<in> init A\n\ngoal (1 subgoal):\n 1. P s", ".."], ["proof (state)\nthis:\n  P s\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p) \\<in> init A \\<Longrightarrow> Q (\\<sigma>, p)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p')\n 3. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "thus \"Q s\""], ["proof (prove)\nusing this:\n  P s\n\ngoal (1 subgoal):\n 1. Q s", "by (rule PQ)"], ["proof (state)\nthis:\n  Q s\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "fix \\<sigma> p \\<sigma>' p' a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "assume \"(\\<sigma>, p) \\<in> oreachable A QS QU\"\n       and \"((\\<sigma>, p), a, (\\<sigma>', p')) \\<in> trans A\"\n       and \"QS \\<sigma> \\<sigma>' a\""], ["proof (state)\nthis:\n  (\\<sigma>, p) \\<in> oreachable A QS QU\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A\n  QS \\<sigma> \\<sigma>' a\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "from this(3)"], ["proof (chain)\npicking this:\n  QS \\<sigma> \\<sigma>' a", "have \"PS \\<sigma> \\<sigma>' a\""], ["proof (prove)\nusing this:\n  QS \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. PS \\<sigma> \\<sigma>' a", "by (rule QSPS)"], ["proof (state)\nthis:\n  PS \\<sigma> \\<sigma>' a\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "from \\<open>(\\<sigma>, p) \\<in> oreachable A QS QU\\<close> and QSPS QUPU"], ["proof (chain)\npicking this:\n  (\\<sigma>, p) \\<in> oreachable A QS QU\n  QS ?s ?s' ?a \\<Longrightarrow> PS ?s ?s' ?a\n  QU ?s ?s' \\<Longrightarrow> PU ?s ?s'", "have \"(\\<sigma>, p) \\<in> oreachable A PS PU\""], ["proof (prove)\nusing this:\n  (\\<sigma>, p) \\<in> oreachable A QS QU\n  QS ?s ?s' ?a \\<Longrightarrow> PS ?s ?s' ?a\n  QU ?s ?s' \\<Longrightarrow> PU ?s ?s'\n\ngoal (1 subgoal):\n 1. (\\<sigma>, p) \\<in> oreachable A PS PU", ".."], ["proof (state)\nthis:\n  (\\<sigma>, p) \\<in> oreachable A PS PU\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "hence \"(\\<sigma>', p') \\<in> oreachable A PS PU\""], ["proof (prove)\nusing this:\n  (\\<sigma>, p) \\<in> oreachable A PS PU\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p') \\<in> oreachable A PS PU", "using \\<open>((\\<sigma>, p), a, (\\<sigma>', p')) \\<in> trans A\\<close> and \\<open>PS \\<sigma> \\<sigma>' a\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, p) \\<in> oreachable A PS PU\n  ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A\n  PS \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p') \\<in> oreachable A PS PU", ".."], ["proof (state)\nthis:\n  (\\<sigma>', p') \\<in> oreachable A PS PU\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "with invP"], ["proof (chain)\npicking this:\n  A \\<Turnstile> (PS, PU \\<rightarrow>) P\n  (\\<sigma>', p') \\<in> oreachable A PS PU", "have \"P (\\<sigma>', p')\""], ["proof (prove)\nusing this:\n  A \\<Turnstile> (PS, PU \\<rightarrow>) P\n  (\\<sigma>', p') \\<in> oreachable A PS PU\n\ngoal (1 subgoal):\n 1. P (\\<sigma>', p')", ".."], ["proof (state)\nthis:\n  P (\\<sigma>', p')\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "thus \"Q (\\<sigma>', p')\""], ["proof (prove)\nusing this:\n  P (\\<sigma>', p')\n\ngoal (1 subgoal):\n 1. Q (\\<sigma>', p')", "by (rule PQ)"], ["proof (state)\nthis:\n  Q (\\<sigma>', p')\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "fix \\<sigma> \\<sigma>' p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "assume \"(\\<sigma>, p) \\<in> oreachable A QS QU\"\n       and \"Q (\\<sigma>, p)\"\n       and \"QU \\<sigma> \\<sigma>'\""], ["proof (state)\nthis:\n  (\\<sigma>, p) \\<in> oreachable A QS QU\n  Q (\\<sigma>, p)\n  QU \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "from \\<open>QU \\<sigma> \\<sigma>'\\<close>"], ["proof (chain)\npicking this:\n  QU \\<sigma> \\<sigma>'", "have \"PU \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  QU \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. PU \\<sigma> \\<sigma>'", "by (rule QUPU)"], ["proof (state)\nthis:\n  PU \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "from \\<open>(\\<sigma>, p) \\<in> oreachable A QS QU\\<close> and QSPS QUPU"], ["proof (chain)\npicking this:\n  (\\<sigma>, p) \\<in> oreachable A QS QU\n  QS ?s ?s' ?a \\<Longrightarrow> PS ?s ?s' ?a\n  QU ?s ?s' \\<Longrightarrow> PU ?s ?s'", "have \"(\\<sigma>, p) \\<in> oreachable A PS PU\""], ["proof (prove)\nusing this:\n  (\\<sigma>, p) \\<in> oreachable A QS QU\n  QS ?s ?s' ?a \\<Longrightarrow> PS ?s ?s' ?a\n  QU ?s ?s' \\<Longrightarrow> PU ?s ?s'\n\ngoal (1 subgoal):\n 1. (\\<sigma>, p) \\<in> oreachable A PS PU", ".."], ["proof (state)\nthis:\n  (\\<sigma>, p) \\<in> oreachable A PS PU\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "hence \"(\\<sigma>', p) \\<in> oreachable A PS PU\""], ["proof (prove)\nusing this:\n  (\\<sigma>, p) \\<in> oreachable A PS PU\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p) \\<in> oreachable A PS PU", "using \\<open>PU \\<sigma> \\<sigma>'\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, p) \\<in> oreachable A PS PU\n  PU \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', p) \\<in> oreachable A PS PU", ".."], ["proof (state)\nthis:\n  (\\<sigma>', p) \\<in> oreachable A PS PU\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "with invP"], ["proof (chain)\npicking this:\n  A \\<Turnstile> (PS, PU \\<rightarrow>) P\n  (\\<sigma>', p) \\<in> oreachable A PS PU", "have \"P (\\<sigma>', p)\""], ["proof (prove)\nusing this:\n  A \\<Turnstile> (PS, PU \\<rightarrow>) P\n  (\\<sigma>', p) \\<in> oreachable A PS PU\n\ngoal (1 subgoal):\n 1. P (\\<sigma>', p)", ".."], ["proof (state)\nthis:\n  P (\\<sigma>', p)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A QS QU; Q (\\<sigma>, p);\n        QU \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> Q (\\<sigma>', p)", "thus \"Q (\\<sigma>', p)\""], ["proof (prove)\nusing this:\n  P (\\<sigma>', p)\n\ngoal (1 subgoal):\n 1. Q (\\<sigma>', p)", "by (rule PQ)"], ["proof (state)\nthis:\n  Q (\\<sigma>', p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oinvariant_weakenD [dest]:\n  assumes \"A \\<Turnstile> (S', U' \\<rightarrow>) P\"\n      and \"(\\<sigma>, p) \\<in> oreachable A S U\"\n      and weakenS: \"\\<And>s s' a. S s s' a \\<Longrightarrow> S' s s' a\"\n      and weakenU: \"\\<And>s s'. U s s' \\<Longrightarrow> U' s s'\"\n    shows \"P (\\<sigma>, p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (\\<sigma>, p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P (\\<sigma>, p)", "from \\<open>(\\<sigma>, p) \\<in> oreachable A S U\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, p) \\<in> oreachable A S U", "have \"(\\<sigma>, p) \\<in> oreachable A S' U'\""], ["proof (prove)\nusing this:\n  (\\<sigma>, p) \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. (\\<sigma>, p) \\<in> oreachable A S' U'", "by (rule oreachable_weakenE)\n         (erule weakenS, erule weakenU)"], ["proof (state)\nthis:\n  (\\<sigma>, p) \\<in> oreachable A S' U'\n\ngoal (1 subgoal):\n 1. P (\\<sigma>, p)", "with \\<open>A \\<Turnstile> (S', U' \\<rightarrow>) P\\<close>"], ["proof (chain)\npicking this:\n  A \\<Turnstile> (S', U' \\<rightarrow>) P\n  (\\<sigma>, p) \\<in> oreachable A S' U'", "show \"P (\\<sigma>, p)\""], ["proof (prove)\nusing this:\n  A \\<Turnstile> (S', U' \\<rightarrow>) P\n  (\\<sigma>, p) \\<in> oreachable A S' U'\n\ngoal (1 subgoal):\n 1. P (\\<sigma>, p)", ".."], ["proof (state)\nthis:\n  P (\\<sigma>, p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma close_open_invariant:\n  assumes oinv: \"A \\<Turnstile> (act I, U \\<rightarrow>) P\"\n    shows \"A \\<TTurnstile> (I \\<rightarrow>) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<TTurnstile> (I \\<rightarrow>) P", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<xi> p. (\\<xi>, p) \\<in> init A \\<Longrightarrow> P (\\<xi>, p)\n 2. \\<And>\\<xi> p \\<xi>' p' a.\n       \\<lbrakk>(\\<xi>, p) \\<in> reachable A I; P (\\<xi>, p);\n        ((\\<xi>, p), a, \\<xi>', p') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<xi>', p')", "fix s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<xi> p. (\\<xi>, p) \\<in> init A \\<Longrightarrow> P (\\<xi>, p)\n 2. \\<And>\\<xi> p \\<xi>' p' a.\n       \\<lbrakk>(\\<xi>, p) \\<in> reachable A I; P (\\<xi>, p);\n        ((\\<xi>, p), a, \\<xi>', p') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<xi>', p')", "assume \"s \\<in> init A\""], ["proof (state)\nthis:\n  s \\<in> init A\n\ngoal (2 subgoals):\n 1. \\<And>\\<xi> p. (\\<xi>, p) \\<in> init A \\<Longrightarrow> P (\\<xi>, p)\n 2. \\<And>\\<xi> p \\<xi>' p' a.\n       \\<lbrakk>(\\<xi>, p) \\<in> reachable A I; P (\\<xi>, p);\n        ((\\<xi>, p), a, \\<xi>', p') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<xi>', p')", "with oinv"], ["proof (chain)\npicking this:\n  A \\<Turnstile> (act I, U \\<rightarrow>) P\n  s \\<in> init A", "show \"P s\""], ["proof (prove)\nusing this:\n  A \\<Turnstile> (act I, U \\<rightarrow>) P\n  s \\<in> init A\n\ngoal (1 subgoal):\n 1. P s", ".."], ["proof (state)\nthis:\n  P s\n\ngoal (1 subgoal):\n 1. \\<And>\\<xi> p \\<xi>' p' a.\n       \\<lbrakk>(\\<xi>, p) \\<in> reachable A I; P (\\<xi>, p);\n        ((\\<xi>, p), a, \\<xi>', p') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<xi>', p')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<xi> p \\<xi>' p' a.\n       \\<lbrakk>(\\<xi>, p) \\<in> reachable A I; P (\\<xi>, p);\n        ((\\<xi>, p), a, \\<xi>', p') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<xi>', p')", "fix \\<xi> p \\<xi>' p' a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<xi> p \\<xi>' p' a.\n       \\<lbrakk>(\\<xi>, p) \\<in> reachable A I; P (\\<xi>, p);\n        ((\\<xi>, p), a, \\<xi>', p') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<xi>', p')", "assume sr: \"(\\<xi>, p) \\<in> reachable A I\"\n       and step: \"((\\<xi>, p), a, (\\<xi>', p')) \\<in> trans A\"\n       and \"I a\""], ["proof (state)\nthis:\n  (\\<xi>, p) \\<in> reachable A I\n  ((\\<xi>, p), a, \\<xi>', p') \\<in> automaton.trans A\n  I a\n\ngoal (1 subgoal):\n 1. \\<And>\\<xi> p \\<xi>' p' a.\n       \\<lbrakk>(\\<xi>, p) \\<in> reachable A I; P (\\<xi>, p);\n        ((\\<xi>, p), a, \\<xi>', p') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<xi>', p')", "hence \"(\\<xi>', p') \\<in> reachable A I\""], ["proof (prove)\nusing this:\n  (\\<xi>, p) \\<in> reachable A I\n  ((\\<xi>, p), a, \\<xi>', p') \\<in> automaton.trans A\n  I a\n\ngoal (1 subgoal):\n 1. (\\<xi>', p') \\<in> reachable A I", ".."], ["proof (state)\nthis:\n  (\\<xi>', p') \\<in> reachable A I\n\ngoal (1 subgoal):\n 1. \\<And>\\<xi> p \\<xi>' p' a.\n       \\<lbrakk>(\\<xi>, p) \\<in> reachable A I; P (\\<xi>, p);\n        ((\\<xi>, p), a, \\<xi>', p') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<xi>', p')", "hence \"(\\<xi>', p') \\<in> oreachable A (act I) U\""], ["proof (prove)\nusing this:\n  (\\<xi>', p') \\<in> reachable A I\n\ngoal (1 subgoal):\n 1. (\\<xi>', p') \\<in> oreachable A (act I) U", ".."], ["proof (state)\nthis:\n  (\\<xi>', p') \\<in> oreachable A (act I) U\n\ngoal (1 subgoal):\n 1. \\<And>\\<xi> p \\<xi>' p' a.\n       \\<lbrakk>(\\<xi>, p) \\<in> reachable A I; P (\\<xi>, p);\n        ((\\<xi>, p), a, \\<xi>', p') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<xi>', p')", "with oinv"], ["proof (chain)\npicking this:\n  A \\<Turnstile> (act I, U \\<rightarrow>) P\n  (\\<xi>', p') \\<in> oreachable A (act I) U", "show \"P (\\<xi>', p')\""], ["proof (prove)\nusing this:\n  A \\<Turnstile> (act I, U \\<rightarrow>) P\n  (\\<xi>', p') \\<in> oreachable A (act I) U\n\ngoal (1 subgoal):\n 1. P (\\<xi>', p')", ".."], ["proof (state)\nthis:\n  P (\\<xi>', p')\n\ngoal:\nNo subgoals!", "qed"], ["", "definition local_steps :: \"((('i \\<Rightarrow> 's1) \\<times> 'l1) \\<times> 'a \\<times> ('i \\<Rightarrow> 's2) \\<times> 'l2) set \\<Rightarrow> 'i set \\<Rightarrow> bool\"\nwhere \"local_steps T J \\<equiv>\n   (\\<forall>\\<sigma> \\<zeta> s a \\<sigma>' s'. ((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> T \\<and> (\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j)\n   \\<longrightarrow> (\\<exists>\\<zeta>'. (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and> ((\\<zeta>, s), a, (\\<zeta>', s')) \\<in> T))\""], ["", "lemma local_stepsI [intro!]:\n  assumes \"\\<And>\\<sigma> \\<zeta> s a \\<sigma>' \\<zeta>' s'. \\<lbrakk> ((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> T; \\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j \\<rbrakk>\n                               \\<Longrightarrow> (\\<exists>\\<zeta>'. (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and> ((\\<zeta>, s), a, (\\<zeta>', s')) \\<in> T)\"\n    shows \"local_steps T J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_steps T J", "unfolding local_steps_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma> \\<zeta> s a \\<sigma>' s'.\n       ((\\<sigma>, s), a, \\<sigma>', s') \\<in> T \\<and>\n       (\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j) \\<longrightarrow>\n       (\\<exists>\\<zeta>'.\n           (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and>\n           ((\\<zeta>, s), a, \\<zeta>', s') \\<in> T)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>((?\\<sigma>, ?s), ?a, ?\\<sigma>', ?s') \\<in> T;\n   \\<forall>j\\<in>J. ?\\<zeta> j = ?\\<sigma> j\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<zeta>'.\n                       (\\<forall>j\\<in>J. \\<zeta>' j = ?\\<sigma>' j) \\<and>\n                       ((?\\<zeta>, ?s), ?a, \\<zeta>', ?s') \\<in> T\n\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma> \\<zeta> s a \\<sigma>' s'.\n       ((\\<sigma>, s), a, \\<sigma>', s') \\<in> T \\<and>\n       (\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j) \\<longrightarrow>\n       (\\<exists>\\<zeta>'.\n           (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and>\n           ((\\<zeta>, s), a, \\<zeta>', s') \\<in> T)", "by clarsimp"], ["", "lemma local_stepsE [elim, dest]:\n  assumes \"local_steps T J\"\n      and \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> T\"\n      and \"\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j\"\n    shows \"\\<exists>\\<zeta>'. (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and> ((\\<zeta>, s), a, (\\<zeta>', s')) \\<in> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<zeta>'.\n       (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and>\n       ((\\<zeta>, s), a, \\<zeta>', s') \\<in> T", "using assms"], ["proof (prove)\nusing this:\n  local_steps T J\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> T\n  \\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<zeta>'.\n       (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and>\n       ((\\<zeta>, s), a, \\<zeta>', s') \\<in> T", "unfolding local_steps_def"], ["proof (prove)\nusing this:\n  \\<forall>\\<sigma> \\<zeta> s a \\<sigma>' s'.\n     ((\\<sigma>, s), a, \\<sigma>', s') \\<in> T \\<and>\n     (\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j) \\<longrightarrow>\n     (\\<exists>\\<zeta>'.\n         (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and>\n         ((\\<zeta>, s), a, \\<zeta>', s') \\<in> T)\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> T\n  \\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<zeta>'.\n       (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and>\n       ((\\<zeta>, s), a, \\<zeta>', s') \\<in> T", "by blast"], ["", "definition other_steps :: \"(('i \\<Rightarrow> 's) \\<Rightarrow> ('i \\<Rightarrow> 's) \\<Rightarrow> bool) \\<Rightarrow> 'i set \\<Rightarrow> bool\"\nwhere \"other_steps U J \\<equiv> \\<forall>\\<sigma> \\<sigma>'. U \\<sigma> \\<sigma>' \\<longrightarrow> (\\<forall>j\\<in>J. \\<sigma>' j = \\<sigma> j)\""], ["", "lemma other_stepsI [intro!]:\n  assumes \"\\<And>\\<sigma> \\<sigma>' j. \\<lbrakk> U \\<sigma> \\<sigma>'; j \\<in> J \\<rbrakk> \\<Longrightarrow> \\<sigma>' j = \\<sigma> j\"\n    shows \"other_steps U J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. other_steps U J", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>U ?\\<sigma> ?\\<sigma>'; ?j \\<in> J\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma>' ?j = ?\\<sigma> ?j\n\ngoal (1 subgoal):\n 1. other_steps U J", "unfolding other_steps_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>U ?\\<sigma> ?\\<sigma>'; ?j \\<in> J\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma>' ?j = ?\\<sigma> ?j\n\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma> \\<sigma>'.\n       U \\<sigma> \\<sigma>' \\<longrightarrow>\n       (\\<forall>j\\<in>J. \\<sigma>' j = \\<sigma> j)", "by simp"], ["", "lemma other_stepsE [elim]:\n  assumes \"other_steps U J\"\n      and \"U \\<sigma> \\<sigma>'\"\n    shows \"\\<forall>j\\<in>J. \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>J. \\<sigma>' j = \\<sigma> j", "using assms"], ["proof (prove)\nusing this:\n  other_steps U J\n  U \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>J. \\<sigma>' j = \\<sigma> j", "unfolding other_steps_def"], ["proof (prove)\nusing this:\n  \\<forall>\\<sigma> \\<sigma>'.\n     U \\<sigma> \\<sigma>' \\<longrightarrow>\n     (\\<forall>j\\<in>J. \\<sigma>' j = \\<sigma> j)\n  U \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>J. \\<sigma>' j = \\<sigma> j", "by simp"], ["", "definition subreachable\nwhere \"subreachable A U J \\<equiv> \\<forall>I. \\<forall>s \\<in> oreachable A (\\<lambda>s s'. I) U.\n                                  (\\<exists>\\<sigma>. (\\<forall>j\\<in>J. \\<sigma> j = (fst s) j) \\<and> (\\<sigma>, snd s) \\<in> reachable A I)\""], ["", "lemma subreachableI [intro]:\n  assumes \"local_steps (trans A) J\"\n      and \"other_steps U J\"\n    shows \"subreachable A U J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subreachable A U J", "unfolding subreachable_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I.\n       \\<forall>s\\<in>oreachable A (\\<lambda>s s'. I) U.\n          \\<exists>\\<sigma>.\n             (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n             (\\<sigma>, snd s) \\<in> reachable A I", "proof (rule, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I s.\n       s \\<in> oreachable A (\\<lambda>s s'. I) U \\<Longrightarrow>\n       \\<exists>\\<sigma>.\n          (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n          (\\<sigma>, snd s) \\<in> reachable A I", "fix I s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I s.\n       s \\<in> oreachable A (\\<lambda>s s'. I) U \\<Longrightarrow>\n       \\<exists>\\<sigma>.\n          (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n          (\\<sigma>, snd s) \\<in> reachable A I", "assume \"s \\<in> oreachable A (\\<lambda>s s'. I) U\""], ["proof (state)\nthis:\n  s \\<in> oreachable A (\\<lambda>s s'. I) U\n\ngoal (1 subgoal):\n 1. \\<And>I s.\n       s \\<in> oreachable A (\\<lambda>s s'. I) U \\<Longrightarrow>\n       \\<exists>\\<sigma>.\n          (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n          (\\<sigma>, snd s) \\<in> reachable A I", "thus \"(\\<exists>\\<sigma>. (\\<forall>j\\<in>J. \\<sigma> j = (fst s) j) \\<and> (\\<sigma>, snd s) \\<in> reachable A I)\""], ["proof (prove)\nusing this:\n  s \\<in> oreachable A (\\<lambda>s s'. I) U\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n       (\\<sigma>, snd s) \\<in> reachable A I", "proof induction"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       s \\<in> init A \\<Longrightarrow>\n       \\<exists>\\<sigma>.\n          (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n          (\\<sigma>, snd s) \\<in> reachable A I\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n                            (\\<sigma>, snd s') \\<in> reachable A I\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "fix s"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       s \\<in> init A \\<Longrightarrow>\n       \\<exists>\\<sigma>.\n          (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n          (\\<sigma>, snd s) \\<in> reachable A I\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n                            (\\<sigma>, snd s') \\<in> reachable A I\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "assume \"s \\<in> init A\""], ["proof (state)\nthis:\n  s \\<in> init A\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       s \\<in> init A \\<Longrightarrow>\n       \\<exists>\\<sigma>.\n          (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n          (\\<sigma>, snd s) \\<in> reachable A I\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n                            (\\<sigma>, snd s') \\<in> reachable A I\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "hence \"(fst s, snd s) \\<in> reachable A I\""], ["proof (prove)\nusing this:\n  s \\<in> init A\n\ngoal (1 subgoal):\n 1. (fst s, snd s) \\<in> reachable A I", "by simp (rule reachable_init)"], ["proof (state)\nthis:\n  (fst s, snd s) \\<in> reachable A I\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       s \\<in> init A \\<Longrightarrow>\n       \\<exists>\\<sigma>.\n          (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n          (\\<sigma>, snd s) \\<in> reachable A I\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n                            (\\<sigma>, snd s') \\<in> reachable A I\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "moreover"], ["proof (state)\nthis:\n  (fst s, snd s) \\<in> reachable A I\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       s \\<in> init A \\<Longrightarrow>\n       \\<exists>\\<sigma>.\n          (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n          (\\<sigma>, snd s) \\<in> reachable A I\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n                            (\\<sigma>, snd s') \\<in> reachable A I\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "have \"\\<forall>j\\<in>J. (fst s) j = (fst s) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>J. fst s j = fst s j", "by simp"], ["proof (state)\nthis:\n  \\<forall>j\\<in>J. fst s j = fst s j\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       s \\<in> init A \\<Longrightarrow>\n       \\<exists>\\<sigma>.\n          (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n          (\\<sigma>, snd s) \\<in> reachable A I\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n                            (\\<sigma>, snd s') \\<in> reachable A I\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "ultimately"], ["proof (chain)\npicking this:\n  (fst s, snd s) \\<in> reachable A I\n  \\<forall>j\\<in>J. fst s j = fst s j", "show \"\\<exists>\\<sigma>. (\\<forall>j\\<in>J. \\<sigma> j = (fst s) j) \\<and> (\\<sigma>, snd s) \\<in> reachable A I\""], ["proof (prove)\nusing this:\n  (fst s, snd s) \\<in> reachable A I\n  \\<forall>j\\<in>J. fst s j = fst s j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n       (\\<sigma>, snd s) \\<in> reachable A I", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>.\n     (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n     (\\<sigma>, snd s) \\<in> reachable A I\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n                            (\\<sigma>, snd s') \\<in> reachable A I\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n                            (\\<sigma>, snd s') \\<in> reachable A I\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "fix s a s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n                            (\\<sigma>, snd s') \\<in> reachable A I\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "assume \"\\<exists>\\<sigma>. (\\<forall>j\\<in>J. \\<sigma> j = (fst s) j) \\<and> (\\<sigma>, snd s) \\<in> reachable A I\"\n         and \"(s, a, s') \\<in> trans A\"\n         and \"I a\""], ["proof (state)\nthis:\n  \\<exists>\\<sigma>.\n     (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n     (\\<sigma>, snd s) \\<in> reachable A I\n  (s, a, s') \\<in> automaton.trans A\n  I a\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n                            (\\<sigma>, snd s') \\<in> reachable A I\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<sigma>.\n     (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n     (\\<sigma>, snd s) \\<in> reachable A I\n  (s, a, s') \\<in> automaton.trans A\n  I a", "obtain \\<zeta> where \"\\<forall>j\\<in>J. \\<zeta> j = (fst s) j\"\n                      and \"(\\<zeta>, snd s) \\<in> reachable A I\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>.\n     (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n     (\\<sigma>, snd s) \\<in> reachable A I\n  (s, a, s') \\<in> automaton.trans A\n  I a\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta>.\n        \\<lbrakk>\\<forall>j\\<in>J. \\<zeta> j = fst s j;\n         (\\<zeta>, snd s) \\<in> reachable A I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>j\\<in>J. \\<zeta> j = fst s j\n  (\\<zeta>, snd s) \\<in> reachable A I\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n                            (\\<sigma>, snd s') \\<in> reachable A I\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "from \\<open>(s, a, s') \\<in> trans A\\<close>"], ["proof (chain)\npicking this:\n  (s, a, s') \\<in> automaton.trans A", "have \"((fst s, snd s), a, (fst s', snd s')) \\<in> trans A\""], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans A\n\ngoal (1 subgoal):\n 1. ((fst s, snd s), a, fst s', snd s') \\<in> automaton.trans A", "by simp"], ["proof (state)\nthis:\n  ((fst s, snd s), a, fst s', snd s') \\<in> automaton.trans A\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n                            (\\<sigma>, snd s') \\<in> reachable A I\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "with \\<open>local_steps (trans A) J\\<close>"], ["proof (chain)\npicking this:\n  local_steps (automaton.trans A) J\n  ((fst s, snd s), a, fst s', snd s') \\<in> automaton.trans A", "obtain \\<zeta>' where \"\\<forall>j\\<in>J. \\<zeta>' j = (fst s') j\"\n                                                 and \"((\\<zeta>, snd s), a, (\\<zeta>', snd s')) \\<in> trans A\""], ["proof (prove)\nusing this:\n  local_steps (automaton.trans A) J\n  ((fst s, snd s), a, fst s', snd s') \\<in> automaton.trans A\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta>'.\n        \\<lbrakk>\\<forall>j\\<in>J. \\<zeta>' j = fst s' j;\n         ((\\<zeta>, snd s), a, \\<zeta>', snd s')\n         \\<in> automaton.trans A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>\\<forall>j\\<in>J. \\<zeta> j = (fst s) j\\<close>"], ["proof (prove)\nusing this:\n  local_steps (automaton.trans A) J\n  ((fst s, snd s), a, fst s', snd s') \\<in> automaton.trans A\n  \\<forall>j\\<in>J. \\<zeta> j = fst s j\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta>'.\n        \\<lbrakk>\\<forall>j\\<in>J. \\<zeta>' j = fst s' j;\n         ((\\<zeta>, snd s), a, \\<zeta>', snd s')\n         \\<in> automaton.trans A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (drule(2) local_stepsE, clarsimp)"], ["proof (state)\nthis:\n  \\<forall>j\\<in>J. \\<zeta>' j = fst s' j\n  ((\\<zeta>, snd s), a, \\<zeta>', snd s') \\<in> automaton.trans A\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n                            (\\<sigma>, snd s') \\<in> reachable A I\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "from \\<open>(\\<zeta>, snd s) \\<in> reachable A I\\<close>\n       and \\<open>((\\<zeta>, snd s), a, (\\<zeta>', snd s')) \\<in> trans A\\<close>\n       and \\<open>I a\\<close>"], ["proof (chain)\npicking this:\n  (\\<zeta>, snd s) \\<in> reachable A I\n  ((\\<zeta>, snd s), a, \\<zeta>', snd s') \\<in> automaton.trans A\n  I a", "have \"(\\<zeta>', snd s') \\<in> reachable A I\""], ["proof (prove)\nusing this:\n  (\\<zeta>, snd s) \\<in> reachable A I\n  ((\\<zeta>, snd s), a, \\<zeta>', snd s') \\<in> automaton.trans A\n  I a\n\ngoal (1 subgoal):\n 1. (\\<zeta>', snd s') \\<in> reachable A I", ".."], ["proof (state)\nthis:\n  (\\<zeta>', snd s') \\<in> reachable A I\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        (s, a, s') \\<in> automaton.trans A; I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n                            (\\<sigma>, snd s') \\<in> reachable A I\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "with \\<open>\\<forall>j\\<in>J. \\<zeta>' j = (fst s') j\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j\\<in>J. \\<zeta>' j = fst s' j\n  (\\<zeta>', snd s') \\<in> reachable A I", "show \"\\<exists>\\<sigma>. (\\<forall>j\\<in>J. \\<sigma> j = (fst s') j) \\<and> (\\<sigma>, snd s') \\<in> reachable A I\""], ["proof (prove)\nusing this:\n  \\<forall>j\\<in>J. \\<zeta>' j = fst s' j\n  (\\<zeta>', snd s') \\<in> reachable A I\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n       (\\<sigma>, snd s') \\<in> reachable A I", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>.\n     (\\<forall>j\\<in>J. \\<sigma> j = fst s' j) \\<and>\n     (\\<sigma>, snd s') \\<in> reachable A I\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "fix s \\<sigma>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "assume \"\\<exists>\\<sigma>. (\\<forall>j\\<in>J. \\<sigma> j = (fst s) j) \\<and> (\\<sigma>, snd s) \\<in> reachable A I\"\n         and \"U (fst s) \\<sigma>'\""], ["proof (state)\nthis:\n  \\<exists>\\<sigma>.\n     (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n     (\\<sigma>, snd s) \\<in> reachable A I\n  U (fst s) \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<sigma>.\n     (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n     (\\<sigma>, snd s) \\<in> reachable A I\n  U (fst s) \\<sigma>'", "obtain \\<sigma> where \"\\<forall>j\\<in>J. \\<sigma> j = (fst s) j\"\n                      and \"(\\<sigma>, snd s) \\<in> reachable A I\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>.\n     (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n     (\\<sigma>, snd s) \\<in> reachable A I\n  U (fst s) \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<lbrakk>\\<forall>j\\<in>J. \\<sigma> j = fst s j;\n         (\\<sigma>, snd s) \\<in> reachable A I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>j\\<in>J. \\<sigma> j = fst s j\n  (\\<sigma>, snd s) \\<in> reachable A I\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "from \\<open>other_steps U J\\<close> and \\<open>U (fst s) \\<sigma>'\\<close>"], ["proof (chain)\npicking this:\n  other_steps U J\n  U (fst s) \\<sigma>'", "have \"\\<forall>j\\<in>J. \\<sigma>' j = (fst s) j\""], ["proof (prove)\nusing this:\n  other_steps U J\n  U (fst s) \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>J. \\<sigma>' j = fst s j", "by - (erule(1) other_stepsE)"], ["proof (state)\nthis:\n  \\<forall>j\\<in>J. \\<sigma>' j = fst s j\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "with \\<open>\\<forall>j\\<in>J. \\<sigma> j = (fst s) j\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j\\<in>J. \\<sigma> j = fst s j\n  \\<forall>j\\<in>J. \\<sigma>' j = fst s j", "have \"\\<forall>j\\<in>J. \\<sigma> j = \\<sigma>' j\""], ["proof (prove)\nusing this:\n  \\<forall>j\\<in>J. \\<sigma> j = fst s j\n  \\<forall>j\\<in>J. \\<sigma>' j = fst s j\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>J. \\<sigma> j = \\<sigma>' j", "by clarsimp"], ["proof (state)\nthis:\n  \\<forall>j\\<in>J. \\<sigma> j = \\<sigma>' j\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable A (\\<lambda>s s'. I) U;\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I;\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            (\\<forall>j\\<in>J.\n                                \\<sigma> j =\n                                fst (\\<sigma>', snd s) j) \\<and>\n                            (\\<sigma>, snd (\\<sigma>', snd s))\n                            \\<in> reachable A I", "with \\<open>(\\<sigma>, snd s) \\<in> reachable A I\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, snd s) \\<in> reachable A I\n  \\<forall>j\\<in>J. \\<sigma> j = \\<sigma>' j", "show \"\\<exists>\\<sigma>. (\\<forall>j\\<in>J. \\<sigma> j = fst (\\<sigma>', snd s) j) \\<and> (\\<sigma>, snd (\\<sigma>', snd s)) \\<in> reachable A I\""], ["proof (prove)\nusing this:\n  (\\<sigma>, snd s) \\<in> reachable A I\n  \\<forall>j\\<in>J. \\<sigma> j = \\<sigma>' j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       (\\<forall>j\\<in>J. \\<sigma> j = fst (\\<sigma>', snd s) j) \\<and>\n       (\\<sigma>, snd (\\<sigma>', snd s)) \\<in> reachable A I", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>.\n     (\\<forall>j\\<in>J. \\<sigma> j = fst (\\<sigma>', snd s) j) \\<and>\n     (\\<sigma>, snd (\\<sigma>', snd s)) \\<in> reachable A I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>.\n     (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n     (\\<sigma>, snd s) \\<in> reachable A I\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subreachableE [elim]:\n  assumes \"subreachable A U J\"\n      and \"s \\<in> oreachable A (\\<lambda>s s'. I) U\"\n    shows \"\\<exists>\\<sigma>. (\\<forall>j\\<in>J. \\<sigma> j = (fst s) j) \\<and> (\\<sigma>, snd s) \\<in> reachable A I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n       (\\<sigma>, snd s) \\<in> reachable A I", "using assms"], ["proof (prove)\nusing this:\n  subreachable A U J\n  s \\<in> oreachable A (\\<lambda>s s'. I) U\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n       (\\<sigma>, snd s) \\<in> reachable A I", "unfolding subreachable_def"], ["proof (prove)\nusing this:\n  \\<forall>I.\n     \\<forall>s\\<in>oreachable A (\\<lambda>s s'. I) U.\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I\n  s \\<in> oreachable A (\\<lambda>s s'. I) U\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n       (\\<sigma>, snd s) \\<in> reachable A I", "by simp"], ["", "lemma subreachableE_pair [elim]:\n  assumes \"subreachable A U J\"\n      and \"(\\<sigma>, s) \\<in> oreachable A (\\<lambda>s s'. I) U\"\n    shows \"\\<exists>\\<zeta>. (\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j) \\<and> (\\<zeta>, s) \\<in> reachable A I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<zeta>.\n       (\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j) \\<and>\n       (\\<zeta>, s) \\<in> reachable A I", "using assms"], ["proof (prove)\nusing this:\n  subreachable A U J\n  (\\<sigma>, s) \\<in> oreachable A (\\<lambda>s s'. I) U\n\ngoal (1 subgoal):\n 1. \\<exists>\\<zeta>.\n       (\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j) \\<and>\n       (\\<zeta>, s) \\<in> reachable A I", "unfolding subreachable_def"], ["proof (prove)\nusing this:\n  \\<forall>I.\n     \\<forall>s\\<in>oreachable A (\\<lambda>s s'. I) U.\n        \\<exists>\\<sigma>.\n           (\\<forall>j\\<in>J. \\<sigma> j = fst s j) \\<and>\n           (\\<sigma>, snd s) \\<in> reachable A I\n  (\\<sigma>, s) \\<in> oreachable A (\\<lambda>s s'. I) U\n\ngoal (1 subgoal):\n 1. \\<exists>\\<zeta>.\n       (\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j) \\<and>\n       (\\<zeta>, s) \\<in> reachable A I", "by (metis fst_conv snd_conv)"], ["", "lemma subreachable_otherE [elim]:\n  assumes \"subreachable A U J\"\n      and \"(\\<sigma>, l) \\<in> oreachable A (\\<lambda>s s'. I) U\"\n      and \"U \\<sigma> \\<sigma>'\"\n    shows \"\\<exists>\\<zeta>'. (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and> (\\<zeta>', l) \\<in> reachable A I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<zeta>'.\n       (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and>\n       (\\<zeta>', l) \\<in> reachable A I", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<zeta>'.\n       (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and>\n       (\\<zeta>', l) \\<in> reachable A I", "from \\<open>(\\<sigma>, l) \\<in> oreachable A (\\<lambda>s s'. I) U\\<close> and \\<open>U \\<sigma> \\<sigma>'\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, l) \\<in> oreachable A (\\<lambda>s s'. I) U\n  U \\<sigma> \\<sigma>'", "have \"(\\<sigma>', l) \\<in> oreachable A (\\<lambda>s s'. I) U\""], ["proof (prove)\nusing this:\n  (\\<sigma>, l) \\<in> oreachable A (\\<lambda>s s'. I) U\n  U \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', l) \\<in> oreachable A (\\<lambda>s s'. I) U", "by - (rule oreachable_other')"], ["proof (state)\nthis:\n  (\\<sigma>', l) \\<in> oreachable A (\\<lambda>s s'. I) U\n\ngoal (1 subgoal):\n 1. \\<exists>\\<zeta>'.\n       (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and>\n       (\\<zeta>', l) \\<in> reachable A I", "with \\<open>subreachable A U J\\<close>"], ["proof (chain)\npicking this:\n  subreachable A U J\n  (\\<sigma>', l) \\<in> oreachable A (\\<lambda>s s'. I) U", "show ?thesis"], ["proof (prove)\nusing this:\n  subreachable A U J\n  (\\<sigma>', l) \\<in> oreachable A (\\<lambda>s s'. I) U\n\ngoal (1 subgoal):\n 1. \\<exists>\\<zeta>'.\n       (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and>\n       (\\<zeta>', l) \\<in> reachable A I", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<zeta>'.\n     (\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j) \\<and>\n     (\\<zeta>', l) \\<in> reachable A I\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma open_closed_invariant:\n    fixes J\n  assumes \"A \\<TTurnstile> (I \\<rightarrow>) P\"\n      and \"subreachable A U J\"\n      and localp: \"\\<And>\\<sigma> \\<sigma>' s. \\<lbrakk> \\<forall>j\\<in>J. \\<sigma>' j = \\<sigma> j; P (\\<sigma>', s) \\<rbrakk> \\<Longrightarrow> P (\\<sigma>, s)\"\n    shows \"A \\<Turnstile> (act I, U \\<rightarrow>) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile> (act I, U \\<rightarrow>) P", "proof (rule, simp_all only: act_def)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p) \\<in> init A \\<Longrightarrow> P (\\<sigma>, p)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 3. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "fix s"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p) \\<in> init A \\<Longrightarrow> P (\\<sigma>, p)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 3. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "assume \"s \\<in> init A\""], ["proof (state)\nthis:\n  s \\<in> init A\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p) \\<in> init A \\<Longrightarrow> P (\\<sigma>, p)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 3. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "with \\<open>A \\<TTurnstile> (I \\<rightarrow>) P\\<close>"], ["proof (chain)\npicking this:\n  A \\<TTurnstile> (I \\<rightarrow>) P\n  s \\<in> init A", "show \"P s\""], ["proof (prove)\nusing this:\n  A \\<TTurnstile> (I \\<rightarrow>) P\n  s \\<in> init A\n\ngoal (1 subgoal):\n 1. P s", ".."], ["proof (state)\nthis:\n  P s\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "fix s a s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "assume \"s \\<in> oreachable A (\\<lambda>_ _. I) U\"\n       and \"P s\"\n       and \"(s, a, s') \\<in> trans A\"\n       and \"I a\""], ["proof (state)\nthis:\n  s \\<in> oreachable A (\\<lambda>_ _. I) U\n  P s\n  (s, a, s') \\<in> automaton.trans A\n  I a\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "hence \"s' \\<in> oreachable A (\\<lambda>_ _. I) U\""], ["proof (prove)\nusing this:\n  s \\<in> oreachable A (\\<lambda>_ _. I) U\n  P s\n  (s, a, s') \\<in> automaton.trans A\n  I a\n\ngoal (1 subgoal):\n 1. s' \\<in> oreachable A (\\<lambda>_ _. I) U", "by (metis oreachable_local)"], ["proof (state)\nthis:\n  s' \\<in> oreachable A (\\<lambda>_ _. I) U\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "with \\<open>subreachable A U J\\<close>"], ["proof (chain)\npicking this:\n  subreachable A U J\n  s' \\<in> oreachable A (\\<lambda>_ _. I) U", "obtain \\<sigma>'\n      where \"\\<forall>j\\<in>J. \\<sigma>' j = (fst s') j\"\n        and \"(\\<sigma>', snd s') \\<in> reachable A I\""], ["proof (prove)\nusing this:\n  subreachable A U J\n  s' \\<in> oreachable A (\\<lambda>_ _. I) U\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>'.\n        \\<lbrakk>\\<forall>j\\<in>J. \\<sigma>' j = fst s' j;\n         (\\<sigma>', snd s') \\<in> reachable A I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis subreachableE)"], ["proof (state)\nthis:\n  \\<forall>j\\<in>J. \\<sigma>' j = fst s' j\n  (\\<sigma>', snd s') \\<in> reachable A I\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "from \\<open>A \\<TTurnstile> (I \\<rightarrow>) P\\<close> and \\<open>(\\<sigma>', snd s') \\<in> reachable A I\\<close>"], ["proof (chain)\npicking this:\n  A \\<TTurnstile> (I \\<rightarrow>) P\n  (\\<sigma>', snd s') \\<in> reachable A I", "have \"P (\\<sigma>', snd s')\""], ["proof (prove)\nusing this:\n  A \\<TTurnstile> (I \\<rightarrow>) P\n  (\\<sigma>', snd s') \\<in> reachable A I\n\ngoal (1 subgoal):\n 1. P (\\<sigma>', snd s')", ".."], ["proof (state)\nthis:\n  P (\\<sigma>', snd s')\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        I a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "with \\<open>\\<forall>j\\<in>J. \\<sigma>' j = (fst s') j\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j\\<in>J. \\<sigma>' j = fst s' j\n  P (\\<sigma>', snd s')", "show \"P s'\""], ["proof (prove)\nusing this:\n  \\<forall>j\\<in>J. \\<sigma>' j = fst s' j\n  P (\\<sigma>', snd s')\n\ngoal (1 subgoal):\n 1. P s'", "by (metis localp prod.collapse)"], ["proof (state)\nthis:\n  P s'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "fix g g' l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "assume or: \"(g, l) \\<in> oreachable A (\\<lambda>s s'. I) U\"\n       and \"U g g'\"\n       and \"P (g, l)\""], ["proof (state)\nthis:\n  (g, l) \\<in> oreachable A (\\<lambda>s s'. I) U\n  U g g'\n  P (g, l)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "from \\<open>subreachable A U J\\<close> and or and \\<open>U g g'\\<close>"], ["proof (chain)\npicking this:\n  subreachable A U J\n  (g, l) \\<in> oreachable A (\\<lambda>s s'. I) U\n  U g g'", "obtain gg' where \"\\<forall>j\\<in>J. gg' j = g' j\"\n                   and \"(gg', l) \\<in> reachable A I\""], ["proof (prove)\nusing this:\n  subreachable A U J\n  (g, l) \\<in> oreachable A (\\<lambda>s s'. I) U\n  U g g'\n\ngoal (1 subgoal):\n 1. (\\<And>gg'.\n        \\<lbrakk>\\<forall>j\\<in>J. gg' j = g' j;\n         (gg', l) \\<in> reachable A I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto dest!: subreachable_otherE)"], ["proof (state)\nthis:\n  \\<forall>j\\<in>J. gg' j = g' j\n  (gg', l) \\<in> reachable A I\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "from \\<open>A \\<TTurnstile> (I \\<rightarrow>) P\\<close> and \\<open>(gg', l) \\<in> reachable A I\\<close>"], ["proof (chain)\npicking this:\n  A \\<TTurnstile> (I \\<rightarrow>) P\n  (gg', l) \\<in> reachable A I", "have \"P (gg', l)\""], ["proof (prove)\nusing this:\n  A \\<TTurnstile> (I \\<rightarrow>) P\n  (gg', l) \\<in> reachable A I\n\ngoal (1 subgoal):\n 1. P (gg', l)", ".."], ["proof (state)\nthis:\n  P (gg', l)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A (\\<lambda>_ _. I) U;\n        P (\\<sigma>, p); U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "with \\<open>\\<forall>j\\<in>J. gg' j = g' j\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j\\<in>J. gg' j = g' j\n  P (gg', l)", "show \"P (g', l)\""], ["proof (prove)\nusing this:\n  \\<forall>j\\<in>J. gg' j = g' j\n  P (gg', l)\n\ngoal (1 subgoal):\n 1. P (g', l)", "by (rule localp)"], ["proof (state)\nthis:\n  P (g', l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oinvariant_anyact:\n  assumes \"A \\<Turnstile> (act TT, U \\<rightarrow>) P\"\n    shows \"A \\<Turnstile> (S, U \\<rightarrow>) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile> (S, U \\<rightarrow>) P", "using assms"], ["proof (prove)\nusing this:\n  A \\<Turnstile> (act TT, U \\<rightarrow>) P\n\ngoal (1 subgoal):\n 1. A \\<Turnstile> (S, U \\<rightarrow>) P", "by rule auto"], ["", "definition\n  ostep_invariant\n  :: \"('g \\<times> 'l, 'a) automaton\n      \\<Rightarrow> ('g \\<Rightarrow> 'g \\<Rightarrow> 'a \\<Rightarrow> bool) \\<Rightarrow> ('g \\<Rightarrow> 'g \\<Rightarrow> bool)\n      \\<Rightarrow> (('g \\<times> 'l, 'a) transition \\<Rightarrow> bool) \\<Rightarrow> bool\"\n  (\"_ \\<Turnstile>\\<^sub>A (1'((1_),/ (1_) \\<rightarrow>')/ _)\" [100, 0, 0, 9] 8)\nwhere\n  \"(A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P) =\n     (\\<forall>s\\<in>oreachable A S U. (\\<forall>a s'. (s, a, s') \\<in> trans A \\<and> S (fst s) (fst s') a \\<longrightarrow> P (s, a, s')))\""], ["", "lemma ostep_invariant_def':\n  \"(A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P) = (\\<forall>s\\<in>oreachable A S U.\n                           (\\<forall>a s'. (s, a, s') \\<in> trans A \\<and> S (fst s) (fst s') a \\<longrightarrow> P (s, a, s')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P) =\n    (\\<forall>s\\<in>oreachable A S U.\n        \\<forall>a s'.\n           (s, a, s') \\<in> automaton.trans A \\<and>\n           S (fst s) (fst s') a \\<longrightarrow>\n           P (s, a, s'))", "unfolding ostep_invariant_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s\\<in>oreachable A S U.\n        \\<forall>a s'.\n           (s, a, s') \\<in> automaton.trans A \\<and>\n           S (fst s) (fst s') a \\<longrightarrow>\n           P (s, a, s')) =\n    (\\<forall>s\\<in>oreachable A S U.\n        \\<forall>a s'.\n           (s, a, s') \\<in> automaton.trans A \\<and>\n           S (fst s) (fst s') a \\<longrightarrow>\n           P (s, a, s'))", "by auto"], ["", "lemma ostep_invariantI [intro]:\n  assumes *: \"\\<And>\\<sigma> s a \\<sigma>' s'. \\<lbrakk> (\\<sigma>, s)\\<in>oreachable A S U; ((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans A; S \\<sigma> \\<sigma>' a \\<rbrakk>\n                             \\<Longrightarrow> P ((\\<sigma>, s), a, (\\<sigma>', s'))\"\n    shows \"A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P", "unfolding ostep_invariant_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>oreachable A S U.\n       \\<forall>a s'.\n          (s, a, s') \\<in> automaton.trans A \\<and>\n          S (fst s) (fst s') a \\<longrightarrow>\n          P (s, a, s')", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?\\<sigma>, ?s) \\<in> oreachable A S U;\n   ((?\\<sigma>, ?s), ?a, ?\\<sigma>', ?s') \\<in> automaton.trans A;\n   S ?\\<sigma> ?\\<sigma>' ?a\\<rbrakk>\n  \\<Longrightarrow> P ((?\\<sigma>, ?s), ?a, ?\\<sigma>', ?s')\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>oreachable A S U.\n       \\<forall>a s'.\n          (s, a, s') \\<in> automaton.trans A \\<and>\n          S (fst s) (fst s') a \\<longrightarrow>\n          P (s, a, s')", "by auto"], ["", "lemma ostep_invariantD [dest]:\n  assumes \"A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P\"\n      and \"(\\<sigma>, s)\\<in>oreachable A S U\"\n      and \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans A\"\n      and \"S \\<sigma> \\<sigma>' a\"\n    shows \"P ((\\<sigma>, s), a, (\\<sigma>', s'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ((\\<sigma>, s), a, \\<sigma>', s')", "using assms"], ["proof (prove)\nusing this:\n  A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P\n  (\\<sigma>, s) \\<in> oreachable A S U\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  S \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. P ((\\<sigma>, s), a, \\<sigma>', s')", "unfolding ostep_invariant_def'"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>oreachable A S U.\n     \\<forall>a s'.\n        (s, a, s') \\<in> automaton.trans A \\<and>\n        S (fst s) (fst s') a \\<longrightarrow>\n        P (s, a, s')\n  (\\<sigma>, s) \\<in> oreachable A S U\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  S \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. P ((\\<sigma>, s), a, \\<sigma>', s')", "by clarsimp"], ["", "lemma ostep_invariantE [elim]:\n  assumes \"A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P\"\n      and \"(\\<sigma>, s)\\<in>oreachable A S U\"\n      and \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans A\"\n      and \"S \\<sigma> \\<sigma>' a\"\n      and \"P ((\\<sigma>, s), a, (\\<sigma>', s')) \\<Longrightarrow> Q\"\n    shows \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "using assms"], ["proof (prove)\nusing this:\n  A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P\n  (\\<sigma>, s) \\<in> oreachable A S U\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  S \\<sigma> \\<sigma>' a\n  P ((\\<sigma>, s), a, \\<sigma>', s') \\<Longrightarrow> Q\n\ngoal (1 subgoal):\n 1. Q", "by auto"], ["", "lemma ostep_invariant_weakenE [elim!]:\n  assumes invP: \"A \\<Turnstile>\\<^sub>A (PS, PU \\<rightarrow>) P\"\n      and PQ:   \"\\<And>t. P t \\<Longrightarrow> Q t\"\n      and QSPS: \"\\<And>\\<sigma> \\<sigma>' a. QS \\<sigma> \\<sigma>' a \\<Longrightarrow> PS \\<sigma> \\<sigma>' a\"\n      and QUPU: \"\\<And>\\<sigma> \\<sigma>'.   QU \\<sigma> \\<sigma>'   \\<Longrightarrow> PU \\<sigma> \\<sigma>'\"\n    shows       \"A \\<Turnstile>\\<^sub>A (QS, QU \\<rightarrow>) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile>\\<^sub>A (QS, QU \\<rightarrow>) Q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A QS QU;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q ((\\<sigma>, s), a, \\<sigma>', s')", "fix \\<sigma> s \\<sigma>' s' a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A QS QU;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q ((\\<sigma>, s), a, \\<sigma>', s')", "assume \"(\\<sigma>, s) \\<in> oreachable A QS QU\"\n       and \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans A\"\n       and \"QS \\<sigma> \\<sigma>' a\""], ["proof (state)\nthis:\n  (\\<sigma>, s) \\<in> oreachable A QS QU\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  QS \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A QS QU;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q ((\\<sigma>, s), a, \\<sigma>', s')", "from \\<open>QS \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  QS \\<sigma> \\<sigma>' a", "have \"PS \\<sigma> \\<sigma>' a\""], ["proof (prove)\nusing this:\n  QS \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. PS \\<sigma> \\<sigma>' a", "by (rule QSPS)"], ["proof (state)\nthis:\n  PS \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A QS QU;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q ((\\<sigma>, s), a, \\<sigma>', s')", "from \\<open>(\\<sigma>, s) \\<in> oreachable A QS QU\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, s) \\<in> oreachable A QS QU", "have \"(\\<sigma>, s) \\<in> oreachable A PS PU\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s) \\<in> oreachable A QS QU\n\ngoal (1 subgoal):\n 1. (\\<sigma>, s) \\<in> oreachable A PS PU", "using QSPS QUPU"], ["proof (prove)\nusing this:\n  (\\<sigma>, s) \\<in> oreachable A QS QU\n  QS ?\\<sigma> ?\\<sigma>' ?a \\<Longrightarrow> PS ?\\<sigma> ?\\<sigma>' ?a\n  QU ?\\<sigma> ?\\<sigma>' \\<Longrightarrow> PU ?\\<sigma> ?\\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>, s) \\<in> oreachable A PS PU", ".."], ["proof (state)\nthis:\n  (\\<sigma>, s) \\<in> oreachable A PS PU\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A QS QU;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q ((\\<sigma>, s), a, \\<sigma>', s')", "with invP"], ["proof (chain)\npicking this:\n  A \\<Turnstile>\\<^sub>A (PS, PU \\<rightarrow>) P\n  (\\<sigma>, s) \\<in> oreachable A PS PU", "have \"P ((\\<sigma>, s), a, (\\<sigma>', s'))\""], ["proof (prove)\nusing this:\n  A \\<Turnstile>\\<^sub>A (PS, PU \\<rightarrow>) P\n  (\\<sigma>, s) \\<in> oreachable A PS PU\n\ngoal (1 subgoal):\n 1. P ((\\<sigma>, s), a, \\<sigma>', s')", "using \\<open>((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans A\\<close> \\<open>PS \\<sigma> \\<sigma>' a\\<close>"], ["proof (prove)\nusing this:\n  A \\<Turnstile>\\<^sub>A (PS, PU \\<rightarrow>) P\n  (\\<sigma>, s) \\<in> oreachable A PS PU\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  PS \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. P ((\\<sigma>, s), a, \\<sigma>', s')", ".."], ["proof (state)\nthis:\n  P ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A QS QU;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        QS \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q ((\\<sigma>, s), a, \\<sigma>', s')", "thus \"Q ((\\<sigma>, s), a, (\\<sigma>', s'))\""], ["proof (prove)\nusing this:\n  P ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal (1 subgoal):\n 1. Q ((\\<sigma>, s), a, \\<sigma>', s')", "by (rule PQ)"], ["proof (state)\nthis:\n  Q ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ostep_invariant_weaken_with_invariantE [elim]:\n  assumes pinv: \"A \\<Turnstile> (S, U \\<rightarrow>) P\"\n      and qinv: \"A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) Q\"\n      and wr: \"\\<And>\\<sigma> s a \\<sigma>' s'. \\<lbrakk> P (\\<sigma>, s); P (\\<sigma>', s'); Q ((\\<sigma>, s), a, (\\<sigma>', s')); S \\<sigma> \\<sigma>' a \\<rbrakk>\n                              \\<Longrightarrow> R ((\\<sigma>, s), a, (\\<sigma>', s'))\"\n    shows \"A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) R", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A S U;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> R ((\\<sigma>, s), a, \\<sigma>', s')", "fix \\<sigma> s a \\<sigma>' s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A S U;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> R ((\\<sigma>, s), a, \\<sigma>', s')", "assume sr: \"(\\<sigma>, s) \\<in> oreachable A S U\"\n       and tr: \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans A\"\n       and \"S \\<sigma> \\<sigma>' a\""], ["proof (state)\nthis:\n  (\\<sigma>, s) \\<in> oreachable A S U\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  S \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A S U;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> R ((\\<sigma>, s), a, \\<sigma>', s')", "hence \"(\\<sigma>', s') \\<in> oreachable A S U\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s) \\<in> oreachable A S U\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  S \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s') \\<in> oreachable A S U", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s') \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A S U;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> R ((\\<sigma>, s), a, \\<sigma>', s')", "with pinv"], ["proof (chain)\npicking this:\n  A \\<Turnstile> (S, U \\<rightarrow>) P\n  (\\<sigma>', s') \\<in> oreachable A S U", "have \"P (\\<sigma>', s')\""], ["proof (prove)\nusing this:\n  A \\<Turnstile> (S, U \\<rightarrow>) P\n  (\\<sigma>', s') \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. P (\\<sigma>', s')", ".."], ["proof (state)\nthis:\n  P (\\<sigma>', s')\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A S U;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> R ((\\<sigma>, s), a, \\<sigma>', s')", "from pinv and sr"], ["proof (chain)\npicking this:\n  A \\<Turnstile> (S, U \\<rightarrow>) P\n  (\\<sigma>, s) \\<in> oreachable A S U", "have \"P (\\<sigma>, s)\""], ["proof (prove)\nusing this:\n  A \\<Turnstile> (S, U \\<rightarrow>) P\n  (\\<sigma>, s) \\<in> oreachable A S U\n\ngoal (1 subgoal):\n 1. P (\\<sigma>, s)", ".."], ["proof (state)\nthis:\n  P (\\<sigma>, s)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A S U;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> R ((\\<sigma>, s), a, \\<sigma>', s')", "from qinv sr tr \\<open>S \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) Q\n  (\\<sigma>, s) \\<in> oreachable A S U\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  S \\<sigma> \\<sigma>' a", "have \"Q ((\\<sigma>, s), a, (\\<sigma>', s'))\""], ["proof (prove)\nusing this:\n  A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) Q\n  (\\<sigma>, s) \\<in> oreachable A S U\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  S \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. Q ((\\<sigma>, s), a, \\<sigma>', s')", ".."], ["proof (state)\nthis:\n  Q ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A S U;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> R ((\\<sigma>, s), a, \\<sigma>', s')", "with \\<open>P (\\<sigma>, s)\\<close> and \\<open>P (\\<sigma>', s')\\<close>"], ["proof (chain)\npicking this:\n  P (\\<sigma>, s)\n  P (\\<sigma>', s')\n  Q ((\\<sigma>, s), a, \\<sigma>', s')", "show \"R ((\\<sigma>, s), a, (\\<sigma>', s'))\""], ["proof (prove)\nusing this:\n  P (\\<sigma>, s)\n  P (\\<sigma>', s')\n  Q ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal (1 subgoal):\n 1. R ((\\<sigma>, s), a, \\<sigma>', s')", "using \\<open>S \\<sigma> \\<sigma>' a\\<close>"], ["proof (prove)\nusing this:\n  P (\\<sigma>, s)\n  P (\\<sigma>', s')\n  Q ((\\<sigma>, s), a, \\<sigma>', s')\n  S \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. R ((\\<sigma>, s), a, \\<sigma>', s')", "by (rule wr)"], ["proof (state)\nthis:\n  R ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ostep_to_invariantI:\n  assumes sinv: \"A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) Q\"\n      and init: \"\\<And>\\<sigma> s. (\\<sigma>, s) \\<in> init A \\<Longrightarrow> P (\\<sigma>, s)\"\n      and local: \"\\<And>\\<sigma> s \\<sigma>' s' a.\n                    \\<lbrakk> (\\<sigma>, s) \\<in> oreachable A S U;\n                      P (\\<sigma>, s);\n                      Q ((\\<sigma>, s), a, (\\<sigma>', s'));\n                      S \\<sigma> \\<sigma>' a \\<rbrakk> \\<Longrightarrow> P (\\<sigma>', s')\"\n      and other: \"\\<And>\\<sigma> \\<sigma>' s. \\<lbrakk> (\\<sigma>, s) \\<in> oreachable A S U; U \\<sigma> \\<sigma>'; P (\\<sigma>, s) \\<rbrakk> \\<Longrightarrow> P (\\<sigma>', s)\"\n    shows \"A \\<Turnstile> (S, U \\<rightarrow>) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile> (S, U \\<rightarrow>) P", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p) \\<in> init A \\<Longrightarrow> P (\\<sigma>, p)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 3. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "fix \\<sigma> s"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p) \\<in> init A \\<Longrightarrow> P (\\<sigma>, p)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 3. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "assume \"(\\<sigma>, s) \\<in> init A\""], ["proof (state)\nthis:\n  (\\<sigma>, s) \\<in> init A\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p.\n       (\\<sigma>, p) \\<in> init A \\<Longrightarrow> P (\\<sigma>, p)\n 2. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 3. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "thus \"P (\\<sigma>, s)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s) \\<in> init A\n\ngoal (1 subgoal):\n 1. P (\\<sigma>, s)", "by (rule init)"], ["proof (state)\nthis:\n  P (\\<sigma>, s)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "fix \\<sigma> s \\<sigma>' s' a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "assume \"(\\<sigma>, s) \\<in> oreachable A S U\"\n       and \"P (\\<sigma>, s)\"\n       and \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans A\"\n       and \"S \\<sigma> \\<sigma>' a\""], ["proof (state)\nthis:\n  (\\<sigma>, s) \\<in> oreachable A S U\n  P (\\<sigma>, s)\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  S \\<sigma> \\<sigma>' a\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> p \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        ((\\<sigma>, p), a, \\<sigma>', p') \\<in> automaton.trans A;\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p')\n 2. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "show \"P (\\<sigma>', s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (\\<sigma>', s')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P (\\<sigma>', s')", "from sinv and \\<open>(\\<sigma>, s)\\<in>oreachable A S U\\<close> and \\<open>((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans A\\<close> and \\<open>S \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) Q\n  (\\<sigma>, s) \\<in> oreachable A S U\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  S \\<sigma> \\<sigma>' a", "have \"Q ((\\<sigma>, s), a, (\\<sigma>', s'))\""], ["proof (prove)\nusing this:\n  A \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) Q\n  (\\<sigma>, s) \\<in> oreachable A S U\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  S \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. Q ((\\<sigma>, s), a, \\<sigma>', s')", ".."], ["proof (state)\nthis:\n  Q ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal (1 subgoal):\n 1. P (\\<sigma>', s')", "with \\<open>(\\<sigma>, s)\\<in>oreachable A S U\\<close> and \\<open>P (\\<sigma>, s)\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, s) \\<in> oreachable A S U\n  P (\\<sigma>, s)\n  Q ((\\<sigma>, s), a, \\<sigma>', s')", "show \"P (\\<sigma>', s')\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s) \\<in> oreachable A S U\n  P (\\<sigma>, s)\n  Q ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal (1 subgoal):\n 1. P (\\<sigma>', s')", "using \\<open>S \\<sigma> \\<sigma>' a\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, s) \\<in> oreachable A S U\n  P (\\<sigma>, s)\n  Q ((\\<sigma>, s), a, \\<sigma>', s')\n  S \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. P (\\<sigma>', s')", "by (rule local)"], ["proof (state)\nthis:\n  P (\\<sigma>', s')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (\\<sigma>', s')\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "fix \\<sigma> \\<sigma>' l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "assume \"(\\<sigma>, l) \\<in> oreachable A S U\"\n       and \"U \\<sigma> \\<sigma>'\"\n       and \"P (\\<sigma>, l)\""], ["proof (state)\nthis:\n  (\\<sigma>, l) \\<in> oreachable A S U\n  U \\<sigma> \\<sigma>'\n  P (\\<sigma>, l)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p.\n       \\<lbrakk>(\\<sigma>, p) \\<in> oreachable A S U; P (\\<sigma>, p);\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', p)", "thus \"P (\\<sigma>', l)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, l) \\<in> oreachable A S U\n  U \\<sigma> \\<sigma>'\n  P (\\<sigma>, l)\n\ngoal (1 subgoal):\n 1. P (\\<sigma>', l)", "by (rule other)"], ["proof (state)\nthis:\n  P (\\<sigma>', l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma open_closed_step_invariant:\n  assumes \"A \\<TTurnstile>\\<^sub>A (I \\<rightarrow>) P\"\n      and \"local_steps (trans A) J\"\n      and \"other_steps U J\"\n      and localp: \"\\<And>\\<sigma> \\<zeta> a \\<sigma>' \\<zeta>' s s'.\n                   \\<lbrakk> \\<forall>j\\<in>J. \\<sigma> j = \\<zeta> j; \\<forall>j\\<in>J. \\<sigma>' j = \\<zeta>' j; P ((\\<sigma>, s), a, (\\<sigma>', s')) \\<rbrakk>\n                   \\<Longrightarrow> P ((\\<zeta>, s), a, (\\<zeta>', s'))\"\n    shows \"A \\<Turnstile>\\<^sub>A (act I, U \\<rightarrow>) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile>\\<^sub>A (act I, U \\<rightarrow>) P", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A (act I) U;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        act I \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> P ((\\<sigma>, s), a, \\<sigma>', s')", "fix \\<sigma> s a \\<sigma>' s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A (act I) U;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        act I \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> P ((\\<sigma>, s), a, \\<sigma>', s')", "assume or: \"(\\<sigma>, s) \\<in> oreachable A (act I) U\"\n       and tr: \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans A\"\n       and \"act I \\<sigma> \\<sigma>' a\""], ["proof (state)\nthis:\n  (\\<sigma>, s) \\<in> oreachable A (act I) U\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  act I \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A (act I) U;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        act I \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> P ((\\<sigma>, s), a, \\<sigma>', s')", "from \\<open>act I \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  act I \\<sigma> \\<sigma>' a", "have \"I a\""], ["proof (prove)\nusing this:\n  act I \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. I a", ".."], ["proof (state)\nthis:\n  I a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A (act I) U;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        act I \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> P ((\\<sigma>, s), a, \\<sigma>', s')", "from \\<open>local_steps (trans A) J\\<close> and \\<open>other_steps U J\\<close>"], ["proof (chain)\npicking this:\n  local_steps (automaton.trans A) J\n  other_steps U J", "have \"subreachable A U J\""], ["proof (prove)\nusing this:\n  local_steps (automaton.trans A) J\n  other_steps U J\n\ngoal (1 subgoal):\n 1. subreachable A U J", ".."], ["proof (state)\nthis:\n  subreachable A U J\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A (act I) U;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        act I \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> P ((\\<sigma>, s), a, \\<sigma>', s')", "then"], ["proof (chain)\npicking this:\n  subreachable A U J", "obtain \\<zeta> where \"\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j\"\n                    and \"(\\<zeta>, s) \\<in> reachable A I\""], ["proof (prove)\nusing this:\n  subreachable A U J\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta>.\n        \\<lbrakk>\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j;\n         (\\<zeta>, s) \\<in> reachable A I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using or"], ["proof (prove)\nusing this:\n  subreachable A U J\n  (\\<sigma>, s) \\<in> oreachable A (act I) U\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta>.\n        \\<lbrakk>\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j;\n         (\\<zeta>, s) \\<in> reachable A I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding act_def"], ["proof (prove)\nusing this:\n  subreachable A U J\n  (\\<sigma>, s) \\<in> oreachable A (\\<lambda>_ _. I) U\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta>.\n        \\<lbrakk>\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j;\n         (\\<zeta>, s) \\<in> reachable A I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto dest!: subreachableE_pair)"], ["proof (state)\nthis:\n  \\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j\n  (\\<zeta>, s) \\<in> reachable A I\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A (act I) U;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        act I \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> P ((\\<sigma>, s), a, \\<sigma>', s')", "from \\<open>local_steps (trans A) J\\<close> and tr and \\<open>\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j\\<close>"], ["proof (chain)\npicking this:\n  local_steps (automaton.trans A) J\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  \\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j", "obtain \\<zeta>' where \"\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j\"\n                   and \"((\\<zeta>, s), a, (\\<zeta>', s')) \\<in> trans A\""], ["proof (prove)\nusing this:\n  local_steps (automaton.trans A) J\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A\n  \\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta>'.\n        \\<lbrakk>\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j;\n         ((\\<zeta>, s), a, \\<zeta>', s') \\<in> automaton.trans A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j\n  ((\\<zeta>, s), a, \\<zeta>', s') \\<in> automaton.trans A\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A (act I) U;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        act I \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> P ((\\<sigma>, s), a, \\<sigma>', s')", "from \\<open>A \\<TTurnstile>\\<^sub>A (I \\<rightarrow>) P\\<close> and \\<open>(\\<zeta>, s) \\<in> reachable A I\\<close>\n                          and \\<open>((\\<zeta>, s), a, (\\<zeta>', s')) \\<in> trans A\\<close>\n                          and \\<open>I a\\<close>"], ["proof (chain)\npicking this:\n  A \\<TTurnstile>\\<^sub>A (I \\<rightarrow>) P\n  (\\<zeta>, s) \\<in> reachable A I\n  ((\\<zeta>, s), a, \\<zeta>', s') \\<in> automaton.trans A\n  I a", "have \"P ((\\<zeta>, s), a, (\\<zeta>', s'))\""], ["proof (prove)\nusing this:\n  A \\<TTurnstile>\\<^sub>A (I \\<rightarrow>) P\n  (\\<zeta>, s) \\<in> reachable A I\n  ((\\<zeta>, s), a, \\<zeta>', s') \\<in> automaton.trans A\n  I a\n\ngoal (1 subgoal):\n 1. P ((\\<zeta>, s), a, \\<zeta>', s')", ".."], ["proof (state)\nthis:\n  P ((\\<zeta>, s), a, \\<zeta>', s')\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s) \\<in> oreachable A (act I) U;\n        ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans A;\n        act I \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> P ((\\<sigma>, s), a, \\<sigma>', s')", "with \\<open>\\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j\\<close> and \\<open>\\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j\n  \\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j\n  P ((\\<zeta>, s), a, \\<zeta>', s')", "show \"P ((\\<sigma>, s), a, (\\<sigma>', s'))\""], ["proof (prove)\nusing this:\n  \\<forall>j\\<in>J. \\<zeta> j = \\<sigma> j\n  \\<forall>j\\<in>J. \\<zeta>' j = \\<sigma>' j\n  P ((\\<zeta>, s), a, \\<zeta>', s')\n\ngoal (1 subgoal):\n 1. P ((\\<sigma>, s), a, \\<sigma>', s')", "by (rule localp)"], ["proof (state)\nthis:\n  P ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oinvariant_step_anyact:\n  assumes \"p \\<Turnstile>\\<^sub>A (act TT, U \\<rightarrow>) P\"\n    shows \"p \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P", "using assms"], ["proof (prove)\nusing this:\n  p \\<Turnstile>\\<^sub>A (act TT, U \\<rightarrow>) P\n\ngoal (1 subgoal):\n 1. p \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) P", "by rule auto"], ["", "subsection \"Standard assumption predicates \""], ["", "text \\<open>otherwith\\<close>"], ["", "definition otherwith :: \"('s \\<Rightarrow> 's \\<Rightarrow> bool)\n                          \\<Rightarrow> 'i set\n                          \\<Rightarrow> (('i \\<Rightarrow> 's) \\<Rightarrow> 'a \\<Rightarrow> bool)\n                          \\<Rightarrow> ('i \\<Rightarrow> 's) \\<Rightarrow> ('i \\<Rightarrow> 's) \\<Rightarrow> 'a \\<Rightarrow> bool\"\nwhere \"otherwith Q I P \\<sigma> \\<sigma>' a \\<equiv> (\\<forall>i. i\\<notin>I \\<longrightarrow> Q (\\<sigma> i) (\\<sigma>' i)) \\<and> P \\<sigma> a\""], ["", "lemma otherwithI [intro]:\n  assumes other: \"\\<And>j. j\\<notin>I \\<Longrightarrow> Q (\\<sigma> j) (\\<sigma>' j)\"\n      and sync:  \"P \\<sigma> a\"\n    shows \"otherwith Q I P \\<sigma> \\<sigma>' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. otherwith Q I P \\<sigma> \\<sigma>' a", "unfolding otherwith_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        i \\<notin> I \\<longrightarrow> Q (\\<sigma> i) (\\<sigma>' i)) \\<and>\n    P \\<sigma> a", "using assms"], ["proof (prove)\nusing this:\n  ?j \\<notin> I \\<Longrightarrow> Q (\\<sigma> ?j) (\\<sigma>' ?j)\n  P \\<sigma> a\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        i \\<notin> I \\<longrightarrow> Q (\\<sigma> i) (\\<sigma>' i)) \\<and>\n    P \\<sigma> a", "by simp"], ["", "lemma otherwithE [elim]:\n  assumes \"otherwith Q I P \\<sigma> \\<sigma>' a\"\n      and \"\\<lbrakk> P \\<sigma> a; \\<forall>j. j\\<notin>I \\<longrightarrow> Q (\\<sigma> j) (\\<sigma>' j) \\<rbrakk> \\<Longrightarrow> R \\<sigma> \\<sigma>' a\"\n    shows \"R \\<sigma> \\<sigma>' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R \\<sigma> \\<sigma>' a", "using assms"], ["proof (prove)\nusing this:\n  otherwith Q I P \\<sigma> \\<sigma>' a\n  \\<lbrakk>P \\<sigma> a;\n   \\<forall>j.\n      j \\<notin> I \\<longrightarrow> Q (\\<sigma> j) (\\<sigma>' j)\\<rbrakk>\n  \\<Longrightarrow> R \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. R \\<sigma> \\<sigma>' a", "unfolding otherwith_def"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      i \\<notin> I \\<longrightarrow> Q (\\<sigma> i) (\\<sigma>' i)) \\<and>\n  P \\<sigma> a\n  \\<lbrakk>P \\<sigma> a;\n   \\<forall>j.\n      j \\<notin> I \\<longrightarrow> Q (\\<sigma> j) (\\<sigma>' j)\\<rbrakk>\n  \\<Longrightarrow> R \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. R \\<sigma> \\<sigma>' a", "by simp"], ["", "lemma otherwith_actionD [dest]:\n  assumes \"otherwith Q I P \\<sigma> \\<sigma>' a\"\n    shows \"P \\<sigma> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sigma> a", "using assms"], ["proof (prove)\nusing this:\n  otherwith Q I P \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. P \\<sigma> a", "by auto"], ["", "lemma otherwith_syncD [dest]:\n  assumes \"otherwith Q I P \\<sigma> \\<sigma>' a\"\n    shows \"\\<forall>j. j\\<notin>I \\<longrightarrow> Q (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j. j \\<notin> I \\<longrightarrow> Q (\\<sigma> j) (\\<sigma>' j)", "using assms"], ["proof (prove)\nusing this:\n  otherwith Q I P \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<forall>j. j \\<notin> I \\<longrightarrow> Q (\\<sigma> j) (\\<sigma>' j)", "by auto"], ["", "lemma otherwithEI [elim]:\n  assumes \"otherwith P I PO \\<sigma> \\<sigma>' a\"\n      and \"\\<And>\\<sigma> a. PO \\<sigma> a \\<Longrightarrow> QO \\<sigma> a\"\n    shows \"otherwith P I QO \\<sigma> \\<sigma>' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. otherwith P I QO \\<sigma> \\<sigma>' a", "using assms(1)"], ["proof (prove)\nusing this:\n  otherwith P I PO \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. otherwith P I QO \\<sigma> \\<sigma>' a", "unfolding otherwith_def"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      i \\<notin> I \\<longrightarrow> P (\\<sigma> i) (\\<sigma>' i)) \\<and>\n  PO \\<sigma> a\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        i \\<notin> I \\<longrightarrow> P (\\<sigma> i) (\\<sigma>' i)) \\<and>\n    QO \\<sigma> a", "by (clarsimp elim!: assms(2))"], ["", "lemma all_but:\n  assumes \"\\<And>\\<xi>. S \\<xi> \\<xi>\"\n      and \"\\<sigma>' i = \\<sigma> i\"\n      and \"\\<forall>j. j \\<noteq> i \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\"\n    shows \"\\<forall>j. S (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j. S (\\<sigma> j) (\\<sigma>' j)", "using assms"], ["proof (prove)\nusing this:\n  S ?\\<xi> ?\\<xi>\n  \\<sigma>' i = \\<sigma> i\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<forall>j. S (\\<sigma> j) (\\<sigma>' j)", "by metis"], ["", "lemma all_but_eq [dest]:\n  assumes \"\\<sigma>' i = \\<sigma> i\"\n      and \"\\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma> j = \\<sigma>' j\"\n    shows \"\\<sigma> = \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> = \\<sigma>'", "using assms"], ["proof (prove)\nusing this:\n  \\<sigma>' i = \\<sigma> i\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma> j = \\<sigma>' j\n\ngoal (1 subgoal):\n 1. \\<sigma> = \\<sigma>'", "by - (rule ext, metis)"], ["", "text \\<open>other\\<close>"], ["", "definition other :: \"('s \\<Rightarrow> 's \\<Rightarrow> bool) \\<Rightarrow> 'i set \\<Rightarrow> ('i \\<Rightarrow> 's) \\<Rightarrow> ('i \\<Rightarrow> 's) \\<Rightarrow> bool\"\nwhere \"other P I \\<sigma> \\<sigma>' \\<equiv> \\<forall>i. if i\\<in>I then \\<sigma>' i = \\<sigma> i else P (\\<sigma> i) (\\<sigma>' i)\""], ["", "lemma otherI [intro]:\n  assumes local: \"\\<And>i. i\\<in>I \\<Longrightarrow> \\<sigma>' i = \\<sigma> i\"\n      and other: \"\\<And>j. j\\<notin>I \\<Longrightarrow> P (\\<sigma> j) (\\<sigma>' j)\"\n    shows \"other P I \\<sigma> \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. other P I \\<sigma> \\<sigma>'", "using assms"], ["proof (prove)\nusing this:\n  ?i \\<in> I \\<Longrightarrow> \\<sigma>' ?i = \\<sigma> ?i\n  ?j \\<notin> I \\<Longrightarrow> P (\\<sigma> ?j) (\\<sigma>' ?j)\n\ngoal (1 subgoal):\n 1. other P I \\<sigma> \\<sigma>'", "unfolding other_def"], ["proof (prove)\nusing this:\n  ?i \\<in> I \\<Longrightarrow> \\<sigma>' ?i = \\<sigma> ?i\n  ?j \\<notin> I \\<Longrightarrow> P (\\<sigma> ?j) (\\<sigma>' ?j)\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       if i \\<in> I then \\<sigma>' i = \\<sigma> i\n       else P (\\<sigma> i) (\\<sigma>' i)", "by clarsimp"], ["", "lemma otherE [elim]:\n  assumes \"other P I \\<sigma> \\<sigma>'\"\n      and \"\\<lbrakk> \\<forall>i\\<in>I. \\<sigma>' i = \\<sigma> i; \\<forall>j. j\\<notin>I \\<longrightarrow> P (\\<sigma> j) (\\<sigma>' j) \\<rbrakk> \\<Longrightarrow> R \\<sigma> \\<sigma>'\"\n    shows \"R \\<sigma> \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R \\<sigma> \\<sigma>'", "using assms"], ["proof (prove)\nusing this:\n  other P I \\<sigma> \\<sigma>'\n  \\<lbrakk>\\<forall>i\\<in>I. \\<sigma>' i = \\<sigma> i;\n   \\<forall>j.\n      j \\<notin> I \\<longrightarrow> P (\\<sigma> j) (\\<sigma>' j)\\<rbrakk>\n  \\<Longrightarrow> R \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. R \\<sigma> \\<sigma>'", "unfolding other_def"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     if i \\<in> I then \\<sigma>' i = \\<sigma> i\n     else P (\\<sigma> i) (\\<sigma>' i)\n  \\<lbrakk>\\<forall>i\\<in>I. \\<sigma>' i = \\<sigma> i;\n   \\<forall>j.\n      j \\<notin> I \\<longrightarrow> P (\\<sigma> j) (\\<sigma>' j)\\<rbrakk>\n  \\<Longrightarrow> R \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. R \\<sigma> \\<sigma>'", "by simp"], ["", "lemma other_localD [dest]:\n  \"other P {i} \\<sigma> \\<sigma>' \\<Longrightarrow> \\<sigma>' i = \\<sigma> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. other P {i} \\<sigma> \\<sigma>' \\<Longrightarrow>\n    \\<sigma>' i = \\<sigma> i", "by auto"], ["", "lemma other_otherD [dest]:\n  \"other P {i} \\<sigma> \\<sigma>' \\<Longrightarrow> \\<forall>j. j\\<noteq>i \\<longrightarrow> P (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. other P {i} \\<sigma> \\<sigma>' \\<Longrightarrow>\n    \\<forall>j. j \\<noteq> i \\<longrightarrow> P (\\<sigma> j) (\\<sigma>' j)", "by auto"], ["", "lemma other_bothE [elim]:\n  assumes \"other P {i} \\<sigma> \\<sigma>'\"\n  obtains \"\\<sigma>' i = \\<sigma> i\" and \"\\<forall>j. j\\<noteq>i \\<longrightarrow> P (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' i = \\<sigma> i;\n      \\<forall>j.\n         j \\<noteq> i \\<longrightarrow>\n         P (\\<sigma> j) (\\<sigma>' j)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  other P {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' i = \\<sigma> i;\n      \\<forall>j.\n         j \\<noteq> i \\<longrightarrow>\n         P (\\<sigma> j) (\\<sigma>' j)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "lemma weaken_local [elim]:\n  assumes \"other P I \\<sigma> \\<sigma>'\"\n      and PQ: \"\\<And>\\<xi> \\<xi>'. P \\<xi> \\<xi>' \\<Longrightarrow> Q \\<xi> \\<xi>'\"\n    shows \"other Q I \\<sigma> \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. other Q I \\<sigma> \\<sigma>'", "using assms"], ["proof (prove)\nusing this:\n  other P I \\<sigma> \\<sigma>'\n  P ?\\<xi> ?\\<xi>' \\<Longrightarrow> Q ?\\<xi> ?\\<xi>'\n\ngoal (1 subgoal):\n 1. other Q I \\<sigma> \\<sigma>'", "unfolding other_def"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     if i \\<in> I then \\<sigma>' i = \\<sigma> i\n     else P (\\<sigma> i) (\\<sigma>' i)\n  P ?\\<xi> ?\\<xi>' \\<Longrightarrow> Q ?\\<xi> ?\\<xi>'\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       if i \\<in> I then \\<sigma>' i = \\<sigma> i\n       else Q (\\<sigma> i) (\\<sigma>' i)", "by auto"], ["", "definition global :: \"((nat \\<Rightarrow> 's) \\<Rightarrow> bool) \\<Rightarrow> (nat \\<Rightarrow> 's) \\<times> 'local \\<Rightarrow> bool\"\nwhere \"global P \\<equiv> (\\<lambda>(\\<sigma>, _). P \\<sigma>)\""], ["", "lemma globalsimp [simp]: \"global P s = P (fst s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. global P s = P (fst s)", "unfolding global_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case s of (\\<sigma>, uu_) \\<Rightarrow> P \\<sigma>) = P (fst s)", "by (simp split: prod.split)"], ["", "definition globala :: \"((nat \\<Rightarrow> 's, 'action) transition \\<Rightarrow> bool)\n                       \\<Rightarrow> ((nat \\<Rightarrow> 's) \\<times> 'local, 'action) transition \\<Rightarrow> bool\"\nwhere \"globala P \\<equiv> (\\<lambda>((\\<sigma>, _), a, (\\<sigma>', _)). P (\\<sigma>, a, \\<sigma>'))\""], ["", "lemma globalasimp [simp]: \"globala P s = P (fst (fst s), fst (snd s), fst (snd (snd s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. globala P s = P (fst (fst s), fst (snd s), fst (snd (snd s)))", "unfolding globala_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case s of\n     (x, xa) \\<Rightarrow>\n       (case x of\n        (\\<sigma>, uu_) \\<Rightarrow>\n          \\<lambda>(a, \\<sigma>', uu_). P (\\<sigma>, a, \\<sigma>'))\n        xa) =\n    P (fst (fst s), fst (snd s), fst (snd (snd s)))", "by (simp split: prod.split)"], ["", "end"]]}