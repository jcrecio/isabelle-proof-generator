{"file_name": "/home/qj213/afp-2021-10-22/thys/AWN/AWN.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AWN", "problem_names": ["lemma not_call_simps [simp]:\n  \"\\<And>l fg p.         not_call ({l}\\<langle>fg\\<rangle> p)\"\n  \"\\<And>l fa p.         not_call ({l}\\<lbrakk>fa\\<rbrakk> p)\"\n  \"\\<And>p1 p2.          not_call (p1 \\<oplus> p2)\"\n  \"\\<And>l fip fmsg p q. not_call ({l}unicast(fip, fmsg).p \\<triangleright> q)\"\n  \"\\<And>l fmsg p.       not_call ({l}broadcast(fmsg).p)\"\n  \"\\<And>l fips fmsg p.  not_call ({l}groupcast(fips, fmsg).p)\"\n  \"\\<And>l fmsg p.       not_call ({l}send(fmsg).p)\"\n  \"\\<And>l fdata p.      not_call ({l}deliver(fdata).p)\"\n  \"\\<And>l fmsg p.       not_call ({l}receive(fmsg).p)\"\n  \"\\<And>l pn.         \\<not>(not_call (call(pn)))\"", "lemma not_choice_simps [simp]:\n  \"\\<And>l fg p.         not_choice ({l}\\<langle>fg\\<rangle> p)\"\n  \"\\<And>l fa p.         not_choice ({l}\\<lbrakk>fa\\<rbrakk> p)\"\n  \"\\<And>p1 p2.        \\<not>(not_choice (p1 \\<oplus> p2))\"\n  \"\\<And>l fip fmsg p q. not_choice ({l}unicast(fip, fmsg).p \\<triangleright> q)\"\n  \"\\<And>l fmsg p.       not_choice ({l}broadcast(fmsg).p)\"\n  \"\\<And>l fips fmsg p.  not_choice ({l}groupcast(fips, fmsg).p)\"\n  \"\\<And>l fmsg p.       not_choice ({l}send(fmsg).p)\"\n  \"\\<And>l fdata p.      not_choice ({l}deliver(fdata).p)\"\n  \"\\<And>l fmsg p.       not_choice ({l}receive(fmsg).p)\"\n  \"\\<And>l pn.           not_choice (call(pn))\"", "lemma seqp_congs:\n  \"\\<And>l fg p. {l}\\<langle>fg\\<rangle> p = {l}\\<langle>fg\\<rangle> p\"\n  \"\\<And>l fa p. {l}\\<lbrakk>fa\\<rbrakk> p = {l}\\<lbrakk>fa\\<rbrakk> p\"\n  \"\\<And>p1 p2. p1 \\<oplus> p2 = p1 \\<oplus> p2\"\n  \"\\<And>l fip fmsg p q. {l}unicast(fip, fmsg).p \\<triangleright> q = {l}unicast(fip, fmsg).p \\<triangleright> q\"\n  \"\\<And>l fmsg p. {l}broadcast(fmsg).p = {l}broadcast(fmsg).p\"\n  \"\\<And>l fips fmsg p. {l}groupcast(fips, fmsg).p = {l}groupcast(fips, fmsg).p\"\n  \"\\<And>l fmsg p. {l}send(fmsg).p = {l}send(fmsg).p\"\n  \"\\<And>l fdata p. {l}deliver(fdata).p = {l}deliver(fdata).p\"\n  \"\\<And>l fmsg p. {l}receive(fmsg).p = {l}receive(fmsg).p\"\n  \"\\<And>l pn. call(pn) = call(pn)\"", "lemma subterms_refl [simp]: \"p \\<in> subterms p\"", "lemma subterms_trans [elim]:\n  assumes \"q \\<in> subterms p\"\n      and \"r \\<in> subterms q\"\n    shows \"r \\<in> subterms p\"", "lemma root_in_subterms [simp]:\n   \"\\<And>\\<Gamma> pn. \\<exists>pn'. \\<Gamma> pn \\<in> subterms (\\<Gamma> pn')\"", "lemma deriv_in_subterms [elim, dest]:\n  \"\\<And>l f p q. {l}\\<langle>f\\<rangle> q \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\"\n  \"\\<And>l fa p q. {l}\\<lbrakk>fa\\<rbrakk> q \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\"\n  \"\\<And>p1 p2 p. p1 \\<oplus> p2 \\<in> subterms p \\<Longrightarrow> p1 \\<in> subterms p\"\n  \"\\<And>p1 p2 p. p1 \\<oplus> p2 \\<in> subterms p \\<Longrightarrow> p2 \\<in> subterms p\"\n  \"\\<And>l fip fmsg p q r. {l}unicast(fip, fmsg). q \\<triangleright> r \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\"\n  \"\\<And>l fip fmsg p q r. {l}unicast(fip, fmsg). q \\<triangleright> r \\<in> subterms p \\<Longrightarrow> r \\<in> subterms p\"\n  \"\\<And>l fmsg p q. {l}broadcast(fmsg). q \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\"\n  \"\\<And>l fips fmsg p q. {l}groupcast(fips, fmsg). q \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\"\n  \"\\<And>l fmsg p q. {l}send(fmsg). q \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\"\n  \"\\<And>l fdata p q. {l}deliver(fdata). q \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\"\n  \"\\<And>l fmsg p q. {l}receive(fmsg). q \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\"", "lemma recvmsg_simps[simp]:\n  \"\\<And>m.     recvmsg P (broadcast m)     = True\"\n  \"\\<And>ips m. recvmsg P (groupcast ips m) = True\"\n  \"\\<And>ip m.  recvmsg P (unicast ip m)    = True\"\n  \"\\<And>ip.    recvmsg P (notunicast ip)   = True\"\n  \"\\<And>m.     recvmsg P (send m)          = True\"\n  \"\\<And>d.     recvmsg P (deliver d)       = True\"\n  \"\\<And>m.     recvmsg P (receive m)       = P m\"\n  \"        recvmsg P \\<tau>\\<^sub>s                 = True\"", "lemma recvmsgTT [simp]: \"recvmsg TT a\"", "lemma recvmsgE [elim]:\n  assumes \"recvmsg (R \\<sigma>) a\"\n      and \"\\<And>m. R \\<sigma> m \\<Longrightarrow> R \\<sigma>' m\"\n    shows \"recvmsg (R \\<sigma>') a\"", "lemma anycast_simps [simp]:\n  \"\\<And>m.     anycast P (broadcast m)     = P m\"\n  \"\\<And>ips m. anycast P (groupcast ips m) = P m\"\n  \"\\<And>ip m.  anycast P (unicast ip m)    = P m\"\n  \"\\<And>ip.    anycast P (notunicast ip)   = True\"\n  \"\\<And>m.     anycast P (send m)          = True\"\n  \"\\<And>d.     anycast P (deliver d)       = True\"\n  \"\\<And>m.     anycast P (receive m)       = True\"\n  \"        anycast P \\<tau>\\<^sub>s                 = True\"", "lemma orecvmsg_simps [simp]:\n  \"\\<And>m.     orecvmsg P \\<sigma> (broadcast m)     = True\"\n  \"\\<And>ips m. orecvmsg P \\<sigma> (groupcast ips m) = True\"\n  \"\\<And>ip m.  orecvmsg P \\<sigma> (unicast ip m)    = True\"\n  \"\\<And>ip.    orecvmsg P \\<sigma> (notunicast ip)   = True\"\n  \"\\<And>m.     orecvmsg P \\<sigma> (send m)          = True\"\n  \"\\<And>d.     orecvmsg P \\<sigma> (deliver d)       = True\"\n  \"\\<And>m.     orecvmsg P \\<sigma> (receive m)       = P \\<sigma> m\"\n  \"         orecvmsg P \\<sigma> \\<tau>\\<^sub>s                = True\"", "lemma orecvmsgEI [elim]:\n  \"\\<lbrakk> orecvmsg P \\<sigma> a; \\<And>\\<sigma> a. P \\<sigma> a \\<Longrightarrow> Q \\<sigma> a \\<rbrakk> \\<Longrightarrow> orecvmsg Q \\<sigma> a\"", "lemma orecvmsg_stateless_recvmsg [elim]:\n  \"orecvmsg (\\<lambda>_. P) \\<sigma> a \\<Longrightarrow> recvmsg P a\"", "lemma orecvmsg_recv_weaken [elim]:\n  \"\\<lbrakk> orecvmsg P \\<sigma> a; \\<And>\\<sigma> a. P \\<sigma> a \\<Longrightarrow> Q a \\<rbrakk> \\<Longrightarrow> recvmsg Q a\"", "lemma orecvmsg_recvmsg [elim]:\n  \"orecvmsg P \\<sigma> a \\<Longrightarrow> recvmsg (P \\<sigma>) a\"", "lemma sendmsg_simps [simp]:\n  \"\\<And>m.     sendmsg P (broadcast m)     = True\"\n  \"\\<And>ips m. sendmsg P (groupcast ips m) = True\"\n  \"\\<And>ip m.  sendmsg P (unicast ip m)    = True\"\n  \"\\<And>ip.    sendmsg P (notunicast ip)   = True\"\n  \"\\<And>m.     sendmsg P (send m)          = P m\"\n  \"\\<And>d.     sendmsg P (deliver d)       = True\"\n  \"\\<And>m.     sendmsg P (receive m)       = True\"\n  \"        sendmsg P \\<tau>\\<^sub>s                 = True\"", "lemma arrivemsg_simps[simp]:\n  \"\\<And>R m.       arrivemsg i P (R:*cast(m))         = True\"\n  \"\\<And>d m.       arrivemsg i P (d:deliver(m))       = True\"\n  \"\\<And>i ii ni m. arrivemsg i P (ii\\<not>ni:arrive(m))    = (ii = {i} \\<longrightarrow> P m)\"\n  \"\\<And>i1 i2.     arrivemsg i P (connect(i1, i2))    = True\"\n  \"\\<And>i1 i2.     arrivemsg i P (disconnect(i1, i2)) = True\"\n  \"\\<And>i i' d di. arrivemsg i P (i':newpkt(d, di))   = True\"\n  \"             arrivemsg i P \\<tau>\\<^sub>n                   = True\"", "lemma arrivemsgTT [simp]: \"arrivemsg i TT = TT\"", "lemma oarrivemsg_simps[simp]:\n  \"\\<And>R m.       oarrivemsg P \\<sigma> (R:*cast(m))         = True\"\n  \"\\<And>d m.       oarrivemsg P \\<sigma> (d:deliver(m))       = True\"\n  \"\\<And>i ii ni m. oarrivemsg P \\<sigma> (ii\\<not>ni:arrive(m))    = P \\<sigma> m\"\n  \"\\<And>i1 i2.     oarrivemsg P \\<sigma> (connect(i1, i2))    = True\"\n  \"\\<And>i1 i2.     oarrivemsg P \\<sigma> (disconnect(i1, i2)) = True\"\n  \"\\<And>i i' d di. oarrivemsg P \\<sigma> (i':newpkt(d, di))   = True\"\n  \"             oarrivemsg P \\<sigma> \\<tau>\\<^sub>n                   = True\"", "lemma oarrivemsg_True [simp, intro]: \"oarrivemsg (\\<lambda>_ _. True) \\<sigma> a\"", "lemma castmsg_simps[simp]:\n  \"\\<And>R m.       castmsg P (R:*cast(m))         = P m\"\n  \"\\<And>d m.       castmsg P (d:deliver(m))       = True\"\n  \"\\<And>i ii ni m. castmsg P (ii\\<not>ni:arrive(m))    = True\"\n  \"\\<And>i1 i2.     castmsg P (connect(i1, i2))    = True\"\n  \"\\<And>i1 i2.     castmsg P (disconnect(i1, i2)) = True\"\n  \"\\<And>i i' d di. castmsg P (i':newpkt(d, di))   = True\"\n  \"             castmsg P \\<tau>\\<^sub>n                   = True\"", "lemmas net_tree_induct [induct type: net_tree] = net_tree.induct [rename_abs i R p1 p2]", "lemma net_tree_ips_commute:\n  \"net_tree_ips (p1 \\<parallel> p2) = net_tree_ips (p2 \\<parallel> p1)\"", "lemma wf_net_tree_children [elim]:\n  assumes \"wf_net_tree (p1 \\<parallel> p2)\"\n  obtains \"wf_net_tree p1\"\n      and \"wf_net_tree p2\"", "lemma not_in_netmap [simp]:\n  assumes \"i \\<notin> net_ips ns\"\n    shows \"netmap ns i = None\"", "lemma netmap_none_not_in_net_ips:\n  assumes \"netmap ns i = None\"\n    shows \"i\\<notin>net_ips ns\"", "lemma net_ips_is_dom_netmap: \"net_ips s = dom(netmap s)\"", "lemma in_netmap [simp]:\n  assumes \"i \\<in> net_ips ns\"\n    shows \"netmap ns i \\<noteq> None\"", "lemma netmap_subnets_same:\n  assumes \"netmap s1 i = x\"\n      and \"netmap s2 i = x\"\n    shows \"netmap (SubnetS s1 s2) i = x\"", "lemma netmap_subnets_samef:\n  assumes \"netmap s1 = f\"\n      and \"netmap s2 = f\"\n    shows \"netmap (SubnetS s1 s2) = f\"", "lemma netmap_add_disjoint [elim]:\n  assumes \"\\<forall>i\\<in>net_ips s1 \\<union> net_ips s2. the ((netmap s1 ++ netmap s2) i) = \\<sigma> i\"\n      and \"net_ips s1 \\<inter> net_ips s2 = {}\"\n    shows \"\\<forall>i\\<in>net_ips s1. the (netmap s1 i) = \\<sigma> i\"", "lemma netmap_add_disjoint2 [elim]:\n  assumes \"\\<forall>i\\<in>net_ips s1 \\<union> net_ips s2. the ((netmap s1 ++ netmap s2) i) = \\<sigma> i\"\n    shows \"\\<forall>i\\<in>net_ips s2. the (netmap s2 i) = \\<sigma> i\"", "lemma net_ips_netmap_subnet [elim]:\n  assumes \"net_ips s1 \\<inter> net_ips s2 = {}\"\n      and \"\\<forall>i\\<in>net_ips (SubnetS s1 s2). the (netmap (SubnetS s1 s2) i) = \\<sigma> i\"\n    shows \"\\<forall>i\\<in>net_ips s1. the (netmap s1 i) = \\<sigma> i\"\n      and \"\\<forall>i\\<in>net_ips s2. the (netmap s2 i) = \\<sigma> i\"", "lemma inclosed_simps [simp]:\n  \"\\<And>\\<sigma> ii ni. inoclosed \\<sigma> (ii\\<not>ni:arrive(m))   = eq_newpkt m\"\n  \"\\<And>\\<sigma> d di.  inoclosed \\<sigma> (i:newpkt(d, di))   = False\"\n  \"\\<And>\\<sigma> R m.   inoclosed \\<sigma> (R:*cast(m))        = True\"\n  \"\\<And>\\<sigma> i d.   inoclosed \\<sigma> (i:deliver(d))      = True\"\n  \"\\<And>\\<sigma> i i'.  inoclosed \\<sigma> (connect(i, i'))    = True\"\n  \"\\<And>\\<sigma> i i'.  inoclosed \\<sigma> (disconnect(i, i')) = True\"\n  \"\\<And>\\<sigma>.       inoclosed \\<sigma> (\\<tau>)                 = True\"", "lemma netmask_def' [simp]:\n  \"netmask I (\\<sigma>, \\<zeta>) = (\\<lambda>i. if i\\<in>I then Some (\\<sigma> i) else None, \\<zeta>)\"", "lemma dom_fst_netgmap [simp, intro]: \"dom (fst (netgmap sr n)) = net_ips n\"", "lemma netgmap_pair_dom [elim]:\n  obtains \\<sigma> \\<zeta> where \"netgmap sr n = (\\<sigma>, \\<zeta>)\"\n                and \"dom \\<sigma> = net_ips n\"", "lemma net_ips_netgmap [simp]:\n  \"net_ips (snd (netgmap sr s)) = net_ips s\"", "lemma some_the_fst_netgmap:\n  assumes \"i \\<in> net_ips s\"\n    shows \"Some (the (fst (netgmap sr s) i)) = fst (netgmap sr s) i\"", "lemma fst_netgmap_none [simp]:\n  assumes \"i \\<notin> net_ips s\"\n    shows \"fst (netgmap sr s) i = None\"", "lemma fst_netgmap_subnet [simp]:\n  \"fst (case netgmap sr s1 of (\\<sigma>\\<^sub>1, ss) \\<Rightarrow>\n        case netgmap sr s2 of (\\<sigma>\\<^sub>2, tt) \\<Rightarrow>\n        (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2, SubnetS ss tt)) = (fst (netgmap sr s1) ++ fst (netgmap sr s2))\"", "lemma snd_netgmap_subnet [simp]:\n  \"snd (case netgmap sr s1 of (\\<sigma>\\<^sub>1, ss) \\<Rightarrow>\n        case netgmap sr s2 of (\\<sigma>\\<^sub>2, tt) \\<Rightarrow>\n        (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2, SubnetS ss tt)) = (SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2)))\"", "lemma fst_netgmap_not_none [simp]:\n  assumes \"i \\<in> net_ips s\"\n    shows \"fst (netgmap sr s) i \\<noteq> None\"", "lemma netgmap_netgmap_not_rhs [simp]:\n  assumes \"i \\<notin> net_ips s2\"\n    shows \"(fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = (fst (netgmap sr s1)) i\"", "lemma netgmap_netgmap_rhs [simp]:\n  assumes \"i \\<in> net_ips s2\"\n    shows \"(fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = (fst (netgmap sr s2)) i\"", "lemma netgmap_netmask_subnets [elim]:\n  assumes \"netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\"\n      and \"netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\"\n    shows \"fst (netgmap sr (SubnetS s1 s2))\n            = fst (netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\"", "lemma netgmap_netmask_subnets' [elim]:\n  assumes \"netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\"\n      and \"netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\"\n      and \"s = SubnetS s1 s2\"\n    shows \"netgmap sr s = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr s))\"", "lemma netgmap_subnet_split1:\n  assumes \"netgmap sr (SubnetS s1 s2) = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\"\n      and \"net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\"\n      and \"net_ips s1 = net_tree_ips n1\"\n      and \"net_ips s2 = net_tree_ips n2\"\n    shows \"netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\"", "lemma netgmap_subnet_split2:\n  assumes \"netgmap sr (SubnetS s1 s2) = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\"\n      and \"net_ips s1 = net_tree_ips n1\"\n      and \"net_ips s2 = net_tree_ips n2\"\n    shows \"netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\"", "lemma netmap_fst_netgmap_rel:\n  shows \"(\\<lambda>i. map_option (fst o sr) (netmap s i)) = fst (netgmap sr s)\"", "lemma netmap_is_fst_netgmap:\n  assumes \"netmap s' = netmap s\"\n    shows \"fst (netgmap sr s') = fst (netgmap sr s)\"", "lemma netmap_is_fst_netgmap':\n  assumes \"netmap s' i = netmap s i\"\n    shows \"fst (netgmap sr s') i = fst (netgmap sr s) i\"", "lemma fst_netgmap_pair_fst [simp]:\n  \"fst (netgmap (\\<lambda>(p, q). (fst p, snd p, q)) s) = fst (netgmap fst s)\"", "lemma fst_netgmap_netlift:\n  \"fst (netgmap sr s) = netlift sr s\"", "lemma snd_netgmap_netliftl:\n  \"snd (netgmap sr s) = netliftl sr s\"", "lemma netgmap_netlift_netliftl: \"netgmap sr s = (netlift sr s, netliftl sr s)\""], "translations": [["", "lemma not_call_simps [simp]:\n  \"\\<And>l fg p.         not_call ({l}\\<langle>fg\\<rangle> p)\"\n  \"\\<And>l fa p.         not_call ({l}\\<lbrakk>fa\\<rbrakk> p)\"\n  \"\\<And>p1 p2.          not_call (p1 \\<oplus> p2)\"\n  \"\\<And>l fip fmsg p q. not_call ({l}unicast(fip, fmsg).p \\<triangleright> q)\"\n  \"\\<And>l fmsg p.       not_call ({l}broadcast(fmsg).p)\"\n  \"\\<And>l fips fmsg p.  not_call ({l}groupcast(fips, fmsg).p)\"\n  \"\\<And>l fmsg p.       not_call ({l}send(fmsg).p)\"\n  \"\\<And>l fdata p.      not_call ({l}deliver(fdata).p)\"\n  \"\\<And>l fmsg p.       not_call ({l}receive(fmsg).p)\"\n  \"\\<And>l pn.         \\<not>(not_call (call(pn)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>l fg p. not_call ({l}\\<langle>fg\\<rangle>\n                               p)) &&&\n      (\\<And>l fa p. not_call ({l}\\<lbrakk>fa\\<rbrakk>\n                               p))) &&&\n     (\\<And>p1 p2. not_call (p1\n                             \\<oplus>\n                             p2)) &&&\n     (\\<And>l fip fmsg p q. not_call ({l}unicast(fip, fmsg) .\n   p \\<triangleright> q)) &&&\n     (\\<And>l fmsg p. not_call ({l}broadcast(fmsg) .\n                                p))) &&&\n    ((\\<And>l fips fmsg p. not_call ({l}groupcast(fips, fmsg) .\n                                     p)) &&&\n     (\\<And>l fmsg p. not_call ({l}send(fmsg) .\n                                p))) &&&\n    (\\<And>l fdata p. not_call ({l}deliver(fdata) .\n                                p)) &&&\n    (\\<And>l fmsg p. not_call ({l}receive(fmsg) .\n                               p)) &&&\n    (\\<And>l pn. \\<not> not_call (call(pn)))", "unfolding not_call_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>l fg p. \\<forall>pn. {l}\\<langle>fg\\<rangle>\n                                  p \\<noteq> call(pn)) &&&\n      (\\<And>l fa p. \\<forall>pn. {l}\\<lbrakk>fa\\<rbrakk>\n                                  p \\<noteq> call(pn))) &&&\n     (\\<And>p1 p2. \\<forall>pn. p1\n                                \\<oplus>\n                                p2 \\<noteq>\n                                call(pn)) &&&\n     (\\<And>l fip fmsg p q.\n         \\<forall>pn. {l}unicast(fip, fmsg) .\n                         p \\<triangleright> q \\<noteq>\n                      call(pn)) &&&\n     (\\<And>l fmsg p. \\<forall>pn. {l}broadcast(fmsg) .\n                                   p \\<noteq> call(pn))) &&&\n    ((\\<And>l fips fmsg p. \\<forall>pn. {l}groupcast(fips, fmsg) .\n  p \\<noteq> call(pn)) &&&\n     (\\<And>l fmsg p. \\<forall>pn. {l}send(fmsg) .\n                                   p \\<noteq> call(pn))) &&&\n    (\\<And>l fdata p. \\<forall>pn. {l}deliver(fdata) .\n                                   p \\<noteq> call(pn)) &&&\n    (\\<And>l fmsg p. \\<forall>pn. {l}receive(fmsg) .\n                                  p \\<noteq> call(pn)) &&&\n    (\\<And>l pn. \\<not> (\\<forall>pna. call(pn) \\<noteq> call(pna)))", "by auto"], ["", "definition not_choice :: \"('s, 'm, 'p, 'l) seqp \\<Rightarrow> bool\"\nwhere \"not_choice p \\<equiv> \\<forall>p1 p2. p \\<noteq> p1 \\<oplus> p2\""], ["", "lemma not_choice_simps [simp]:\n  \"\\<And>l fg p.         not_choice ({l}\\<langle>fg\\<rangle> p)\"\n  \"\\<And>l fa p.         not_choice ({l}\\<lbrakk>fa\\<rbrakk> p)\"\n  \"\\<And>p1 p2.        \\<not>(not_choice (p1 \\<oplus> p2))\"\n  \"\\<And>l fip fmsg p q. not_choice ({l}unicast(fip, fmsg).p \\<triangleright> q)\"\n  \"\\<And>l fmsg p.       not_choice ({l}broadcast(fmsg).p)\"\n  \"\\<And>l fips fmsg p.  not_choice ({l}groupcast(fips, fmsg).p)\"\n  \"\\<And>l fmsg p.       not_choice ({l}send(fmsg).p)\"\n  \"\\<And>l fdata p.      not_choice ({l}deliver(fdata).p)\"\n  \"\\<And>l fmsg p.       not_choice ({l}receive(fmsg).p)\"\n  \"\\<And>l pn.           not_choice (call(pn))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>l fg p. not_choice ({l}\\<langle>fg\\<rangle>\n                                 p)) &&&\n      (\\<And>l fa p. not_choice ({l}\\<lbrakk>fa\\<rbrakk>\n                                 p))) &&&\n     (\\<And>p1 p2. \\<not> not_choice (p1\n\\<oplus>\np2)) &&&\n     (\\<And>l fip fmsg p q. not_choice ({l}unicast(fip, fmsg) .\n     p \\<triangleright> q)) &&&\n     (\\<And>l fmsg p. not_choice ({l}broadcast(fmsg) .\n                                  p))) &&&\n    ((\\<And>l fips fmsg p. not_choice ({l}groupcast(fips, fmsg) .\n p)) &&&\n     (\\<And>l fmsg p. not_choice ({l}send(fmsg) .\n                                  p))) &&&\n    (\\<And>l fdata p. not_choice ({l}deliver(fdata) .\n                                  p)) &&&\n    (\\<And>l fmsg p. not_choice ({l}receive(fmsg) .\n                                 p)) &&&\n    (\\<And>l pn. not_choice (call(pn)))", "unfolding not_choice_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>l fg p. \\<forall>p1 p2. {l}\\<langle>fg\\<rangle>\n                                     p \\<noteq> p1\n          \\<oplus>\n          p2) &&&\n      (\\<And>l fa p. \\<forall>p1 p2. {l}\\<lbrakk>fa\\<rbrakk>\n                                     p \\<noteq> p1\n          \\<oplus>\n          p2)) &&&\n     (\\<And>p1 p2.\n         \\<not> (\\<forall>p1a p2a. p1\n                                   \\<oplus>\n                                   p2 \\<noteq>\n                                   p1a\n                                   \\<oplus>\n                                   p2a)) &&&\n     (\\<And>l fip fmsg p q.\n         \\<forall>p1 p2. {l}unicast(fip, fmsg) .\n                            p \\<triangleright> q \\<noteq>\n                         p1\n                         \\<oplus>\n                         p2) &&&\n     (\\<And>l fmsg p. \\<forall>p1 p2. {l}broadcast(fmsg) .\np \\<noteq> p1\n           \\<oplus>\n           p2)) &&&\n    ((\\<And>l fips fmsg p. \\<forall>p1 p2. {l}groupcast(fips, fmsg) .\n     p \\<noteq> p1\n                \\<oplus>\n                p2) &&&\n     (\\<And>l fmsg p. \\<forall>p1 p2. {l}send(fmsg) .\np \\<noteq> p1\n           \\<oplus>\n           p2)) &&&\n    (\\<And>l fdata p. \\<forall>p1 p2. {l}deliver(fdata) .\np \\<noteq> p1\n           \\<oplus>\n           p2) &&&\n    (\\<And>l fmsg p. \\<forall>p1 p2. {l}receive(fmsg) .\n                                     p \\<noteq> p1\n          \\<oplus>\n          p2) &&&\n    (\\<And>l pn. \\<forall>p1 p2. call(pn) \\<noteq> p1\n             \\<oplus>\n             p2)", "by auto"], ["", "lemma seqp_congs:\n  \"\\<And>l fg p. {l}\\<langle>fg\\<rangle> p = {l}\\<langle>fg\\<rangle> p\"\n  \"\\<And>l fa p. {l}\\<lbrakk>fa\\<rbrakk> p = {l}\\<lbrakk>fa\\<rbrakk> p\"\n  \"\\<And>p1 p2. p1 \\<oplus> p2 = p1 \\<oplus> p2\"\n  \"\\<And>l fip fmsg p q. {l}unicast(fip, fmsg).p \\<triangleright> q = {l}unicast(fip, fmsg).p \\<triangleright> q\"\n  \"\\<And>l fmsg p. {l}broadcast(fmsg).p = {l}broadcast(fmsg).p\"\n  \"\\<And>l fips fmsg p. {l}groupcast(fips, fmsg).p = {l}groupcast(fips, fmsg).p\"\n  \"\\<And>l fmsg p. {l}send(fmsg).p = {l}send(fmsg).p\"\n  \"\\<And>l fdata p. {l}deliver(fdata).p = {l}deliver(fdata).p\"\n  \"\\<And>l fmsg p. {l}receive(fmsg).p = {l}receive(fmsg).p\"\n  \"\\<And>l pn. call(pn) = call(pn)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>l fg p. {l}\\<langle>fg\\<rangle>\n                     p = {l}\\<langle>fg\\<rangle>\n                     p) &&&\n      (\\<And>l fa p. {l}\\<lbrakk>fa\\<rbrakk>\n                     p = {l}\\<lbrakk>fa\\<rbrakk>\n                     p)) &&&\n     (\\<And>p1 p2. p1\n                   \\<oplus>\n                   p2 =\n                   p1\n                   \\<oplus>\n                   p2) &&&\n     (\\<And>l fip fmsg p q.\n         {l}unicast(fip, fmsg) .\n            p \\<triangleright> q =\n         {l}unicast(fip, fmsg) .\n            p \\<triangleright> q) &&&\n     (\\<And>l fmsg p. {l}broadcast(fmsg) .\n                      p = {l}broadcast(fmsg) .\n                      p)) &&&\n    ((\\<And>l fips fmsg p. {l}groupcast(fips, fmsg) .\n                           p = {l}groupcast(fips, fmsg) .\n                           p) &&&\n     (\\<And>l fmsg p. {l}send(fmsg) .\n                      p = {l}send(fmsg) .\n                      p)) &&&\n    (\\<And>l fdata p. {l}deliver(fdata) .\n                      p = {l}deliver(fdata) .\n                      p) &&&\n    (\\<And>l fmsg p. {l}receive(fmsg) .\n                     p = {l}receive(fmsg) .\n                     p) &&&\n    (\\<And>l pn. call(pn) = call(pn))", "by auto"], ["", "text \\<open>Remove data expressions from process terms.\\<close>"], ["", "fun seqp_skeleton :: \"('s, 'm, 'p, 'l) seqp \\<Rightarrow> (unit, unit, 'p, 'l) seqp\"\nwhere\n    \"seqp_skeleton ({l}\\<langle>_\\<rangle> p)                 = {l}\\<langle>\\<lambda>_. {()}\\<rangle> (seqp_skeleton p)\"\n  | \"seqp_skeleton ({l}\\<lbrakk>_\\<rbrakk> p)                 = {l}\\<lbrakk>\\<lambda>_. ()\\<rbrakk> (seqp_skeleton p)\"\n  | \"seqp_skeleton (p \\<oplus> q)                   = (seqp_skeleton p) \\<oplus> (seqp_skeleton q)\"\n  | \"seqp_skeleton ({l}unicast(_, _). p \\<triangleright> q) = {l}unicast(\\<lambda>_. 0, \\<lambda>_. ()). (seqp_skeleton p) \\<triangleright> (seqp_skeleton q)\"\n  | \"seqp_skeleton ({l}broadcast(_). p)      = {l}broadcast(\\<lambda>_. ()). (seqp_skeleton p)\"\n  | \"seqp_skeleton ({l}groupcast(_, _). p)   = {l}groupcast(\\<lambda>_. {}, \\<lambda>_. ()). (seqp_skeleton p)\"\n  | \"seqp_skeleton ({l}send(_). p)           = {l}send(\\<lambda>_. ()). (seqp_skeleton p)\"\n  | \"seqp_skeleton ({l}deliver(_). p)        = {l}deliver(\\<lambda>_. 0). (seqp_skeleton p)\"\n  | \"seqp_skeleton ({l}receive(_). p)        = {l}receive(\\<lambda>_ _. ()). (seqp_skeleton p)\"\n  | \"seqp_skeleton (call(pn))                = call(pn)\""], ["", "text \\<open>Calculate the subterms of a term.\\<close>"], ["", "fun subterms :: \"('s, 'm, 'p, 'l) seqp \\<Rightarrow> ('s, 'm, 'p, 'l) seqp set\"\nwhere\n    \"subterms ({l}\\<langle>fg\\<rangle> p) = {{l}\\<langle>fg\\<rangle> p} \\<union> subterms p\"\n  | \"subterms ({l}\\<lbrakk>fa\\<rbrakk> p) = {{l}\\<lbrakk>fa\\<rbrakk> p} \\<union> subterms p\"\n  | \"subterms (p1 \\<oplus> p2) = {p1 \\<oplus> p2} \\<union> subterms p1 \\<union> subterms p2\"\n  | \"subterms ({l}unicast(fip, fmsg). p \\<triangleright> q) =\n       {{l}unicast(fip, fmsg). p \\<triangleright> q} \\<union> subterms p \\<union> subterms q\"\n  | \"subterms ({l}broadcast(fmsg). p) = {{l}broadcast(fmsg). p} \\<union> subterms p\"\n  | \"subterms ({l}groupcast(fips, fmsg). p) = {{l}groupcast(fips, fmsg). p} \\<union> subterms p\"\n  | \"subterms ({l}send(fmsg). p) = {{l}send(fmsg).p} \\<union> subterms p\"\n  | \"subterms ({l}deliver(fdata). p) = {{l}deliver(fdata).p} \\<union> subterms p\"\n  | \"subterms ({l}receive(fmsg). p) = {{l}receive(fmsg).p} \\<union> subterms p\"\n  | \"subterms (call(pn)) = {call(pn)}\""], ["", "lemma subterms_refl [simp]: \"p \\<in> subterms p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> subterms p", "by (cases p) simp_all"], ["", "lemma subterms_trans [elim]:\n  assumes \"q \\<in> subterms p\"\n      and \"r \\<in> subterms q\"\n    shows \"r \\<in> subterms p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> subterms p", "using assms"], ["proof (prove)\nusing this:\n  q \\<in> subterms p\n  r \\<in> subterms q\n\ngoal (1 subgoal):\n 1. r \\<in> subterms p", "by (induction p) auto"], ["", "lemma root_in_subterms [simp]:\n   \"\\<And>\\<Gamma> pn. \\<exists>pn'. \\<Gamma> pn \\<in> subterms (\\<Gamma> pn')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<Gamma> pn.\n       \\<exists>pn'. \\<Gamma> pn \\<in> subterms (\\<Gamma> pn')", "by (rule_tac x=pn in exI) simp"], ["", "lemma deriv_in_subterms [elim, dest]:\n  \"\\<And>l f p q. {l}\\<langle>f\\<rangle> q \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\"\n  \"\\<And>l fa p q. {l}\\<lbrakk>fa\\<rbrakk> q \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\"\n  \"\\<And>p1 p2 p. p1 \\<oplus> p2 \\<in> subterms p \\<Longrightarrow> p1 \\<in> subterms p\"\n  \"\\<And>p1 p2 p. p1 \\<oplus> p2 \\<in> subterms p \\<Longrightarrow> p2 \\<in> subterms p\"\n  \"\\<And>l fip fmsg p q r. {l}unicast(fip, fmsg). q \\<triangleright> r \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\"\n  \"\\<And>l fip fmsg p q r. {l}unicast(fip, fmsg). q \\<triangleright> r \\<in> subterms p \\<Longrightarrow> r \\<in> subterms p\"\n  \"\\<And>l fmsg p q. {l}broadcast(fmsg). q \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\"\n  \"\\<And>l fips fmsg p q. {l}groupcast(fips, fmsg). q \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\"\n  \"\\<And>l fmsg p q. {l}send(fmsg). q \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\"\n  \"\\<And>l fdata p q. {l}deliver(fdata). q \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\"\n  \"\\<And>l fmsg p q. {l}receive(fmsg). q \\<in> subterms p \\<Longrightarrow> q \\<in> subterms p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>l f p q.\n          {l}\\<langle>f\\<rangle>\n          q \\<in> subterms p \\<Longrightarrow>\n          q \\<in> subterms p) &&&\n      (\\<And>l fa p q.\n          {l}\\<lbrakk>fa\\<rbrakk>\n          q \\<in> subterms p \\<Longrightarrow>\n          q \\<in> subterms p)) &&&\n     (\\<And>p1 p2 p.\n         p1\n         \\<oplus>\n         p2\n         \\<in> subterms p \\<Longrightarrow>\n         p1 \\<in> subterms p) &&&\n     (\\<And>p1 p2 p.\n         p1\n         \\<oplus>\n         p2\n         \\<in> subterms p \\<Longrightarrow>\n         p2 \\<in> subterms p) &&&\n     (\\<And>l fip fmsg p q r.\n         {l}unicast(fip, fmsg) .\n            q \\<triangleright> r\n         \\<in> subterms p \\<Longrightarrow>\n         q \\<in> subterms p)) &&&\n    ((\\<And>l fip fmsg p q r.\n         {l}unicast(fip, fmsg) .\n            q \\<triangleright> r\n         \\<in> subterms p \\<Longrightarrow>\n         r \\<in> subterms p) &&&\n     (\\<And>l fmsg p q.\n         {l}broadcast(fmsg) .\n         q \\<in> subterms p \\<Longrightarrow>\n         q \\<in> subterms p) &&&\n     (\\<And>l fips fmsg p q.\n         {l}groupcast(fips, fmsg) .\n         q \\<in> subterms p \\<Longrightarrow>\n         q \\<in> subterms p)) &&&\n    (\\<And>l fmsg p q.\n        {l}send(fmsg) .\n        q \\<in> subterms p \\<Longrightarrow>\n        q \\<in> subterms p) &&&\n    (\\<And>l fdata p q.\n        {l}deliver(fdata) .\n        q \\<in> subterms p \\<Longrightarrow>\n        q \\<in> subterms p) &&&\n    (\\<And>l fmsg p q.\n        {l}receive(fmsg) .\n        q \\<in> subterms p \\<Longrightarrow>\n        q \\<in> subterms p)", "by auto"], ["", "subsection \"Actions\""], ["", "text \\<open>\n  There are two sorts of \\<open>\\<tau>\\<close> actions in AWN: one at the level of individual processes\n  (within nodes), and one at the network level (outside nodes). We define a class so that\n  we can ignore this distinction whenever it is not critical.\n\\<close>"], ["", "class tau =\n  fixes tau :: \"'a\" (\"\\<tau>\")"], ["", "subsubsection \"Sequential Actions (and related predicates)\""], ["", "datatype 'm seq_action =\n    broadcast 'm\n  | groupcast \"ip set\" 'm\n  | unicast ip 'm\n  | notunicast ip           (\"\\<not>unicast _\" [1000] 60)\n  | send 'm\n  | deliver data\n  | receive 'm\n  | seq_tau                 (\"\\<tau>\\<^sub>s\")"], ["", "instantiation \"seq_action\" :: (type) tau\nbegin"], ["", "definition step_seq_tau [simp]: \"\\<tau> \\<equiv> \\<tau>\\<^sub>s\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a seq_action, tau_class)", ".."], ["", "end"], ["", "definition recvmsg :: \"('m \\<Rightarrow> bool) \\<Rightarrow> 'm seq_action \\<Rightarrow> bool\"\nwhere \"recvmsg P a \\<equiv> case a of receive m \\<Rightarrow> P m\n                             | _ \\<Rightarrow> True\""], ["", "lemma recvmsg_simps[simp]:\n  \"\\<And>m.     recvmsg P (broadcast m)     = True\"\n  \"\\<And>ips m. recvmsg P (groupcast ips m) = True\"\n  \"\\<And>ip m.  recvmsg P (unicast ip m)    = True\"\n  \"\\<And>ip.    recvmsg P (notunicast ip)   = True\"\n  \"\\<And>m.     recvmsg P (send m)          = True\"\n  \"\\<And>d.     recvmsg P (deliver d)       = True\"\n  \"\\<And>m.     recvmsg P (receive m)       = P m\"\n  \"        recvmsg P \\<tau>\\<^sub>s                 = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>m. recvmsg P (broadcast m) = True) &&&\n      (\\<And>ips m. recvmsg P (groupcast ips m) = True)) &&&\n     (\\<And>ip m. recvmsg P (unicast ip m) = True) &&&\n     (\\<And>ip. recvmsg P (\\<not>unicast ip) = True)) &&&\n    ((\\<And>m. recvmsg P (send m) = True) &&&\n     (\\<And>d. recvmsg P (deliver d) = True)) &&&\n    (\\<And>m. recvmsg P (receive m) = P m) &&&\n    recvmsg P \\<tau>\\<^sub>s = True", "unfolding recvmsg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>m.\n          (case broadcast m of receive m \\<Rightarrow> P m\n           | _ \\<Rightarrow> True) =\n          True) &&&\n      (\\<And>ips m.\n          (case groupcast ips m of receive m \\<Rightarrow> P m\n           | _ \\<Rightarrow> True) =\n          True)) &&&\n     (\\<And>ip m.\n         (case unicast ip m of receive m \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True) &&&\n     (\\<And>ip.\n         (case \\<not>unicast ip of receive m \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True)) &&&\n    ((\\<And>m.\n         (case send m of receive m \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True) &&&\n     (\\<And>d.\n         (case deliver d of receive m \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True)) &&&\n    (\\<And>m.\n        (case receive m of receive m \\<Rightarrow> P m\n         | _ \\<Rightarrow> True) =\n        P m) &&&\n    (case \\<tau>\\<^sub>s of receive m \\<Rightarrow> P m\n     | _ \\<Rightarrow> True) =\n    True", "by simp_all"], ["", "lemma recvmsgTT [simp]: \"recvmsg TT a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recvmsg TT a", "by (cases a) simp_all"], ["", "lemma recvmsgE [elim]:\n  assumes \"recvmsg (R \\<sigma>) a\"\n      and \"\\<And>m. R \\<sigma> m \\<Longrightarrow> R \\<sigma>' m\"\n    shows \"recvmsg (R \\<sigma>') a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recvmsg (R \\<sigma>') a", "using assms(1)"], ["proof (prove)\nusing this:\n  recvmsg (R \\<sigma>) a\n\ngoal (1 subgoal):\n 1. recvmsg (R \\<sigma>') a", "by (cases a) (auto elim!: assms(2))"], ["", "definition anycast :: \"('m \\<Rightarrow> bool) \\<Rightarrow> 'm seq_action \\<Rightarrow> bool\"\nwhere \"anycast P a \\<equiv> case a of broadcast m \\<Rightarrow> P m\n                             | groupcast _ m \\<Rightarrow> P m\n                             | unicast _ m \\<Rightarrow> P m\n                             | _ \\<Rightarrow> True\""], ["", "lemma anycast_simps [simp]:\n  \"\\<And>m.     anycast P (broadcast m)     = P m\"\n  \"\\<And>ips m. anycast P (groupcast ips m) = P m\"\n  \"\\<And>ip m.  anycast P (unicast ip m)    = P m\"\n  \"\\<And>ip.    anycast P (notunicast ip)   = True\"\n  \"\\<And>m.     anycast P (send m)          = True\"\n  \"\\<And>d.     anycast P (deliver d)       = True\"\n  \"\\<And>m.     anycast P (receive m)       = True\"\n  \"        anycast P \\<tau>\\<^sub>s                 = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>m. anycast P (broadcast m) = P m) &&&\n      (\\<And>ips m. anycast P (groupcast ips m) = P m)) &&&\n     (\\<And>ip m. anycast P (unicast ip m) = P m) &&&\n     (\\<And>ip. anycast P (\\<not>unicast ip) = True)) &&&\n    ((\\<And>m. anycast P (send m) = True) &&&\n     (\\<And>d. anycast P (deliver d) = True)) &&&\n    (\\<And>m. anycast P (receive m) = True) &&&\n    anycast P \\<tau>\\<^sub>s = True", "unfolding anycast_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>m.\n          (case broadcast m of broadcast m \\<Rightarrow> P m\n           | groupcast x m \\<Rightarrow> P m | unicast x m \\<Rightarrow> P m\n           | _ \\<Rightarrow> True) =\n          P m) &&&\n      (\\<And>ips m.\n          (case groupcast ips m of broadcast m \\<Rightarrow> P m\n           | groupcast x m \\<Rightarrow> P m | unicast x m \\<Rightarrow> P m\n           | _ \\<Rightarrow> True) =\n          P m)) &&&\n     (\\<And>ip m.\n         (case unicast ip m of broadcast m \\<Rightarrow> P m\n          | groupcast x m \\<Rightarrow> P m | unicast x m \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         P m) &&&\n     (\\<And>ip.\n         (case \\<not>unicast ip of broadcast m \\<Rightarrow> P m\n          | groupcast x m \\<Rightarrow> P m | unicast x m \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True)) &&&\n    ((\\<And>m.\n         (case send m of broadcast m \\<Rightarrow> P m\n          | groupcast x m \\<Rightarrow> P m | unicast x m \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True) &&&\n     (\\<And>d.\n         (case deliver d of broadcast m \\<Rightarrow> P m\n          | groupcast x m \\<Rightarrow> P m | unicast x m \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True)) &&&\n    (\\<And>m.\n        (case receive m of broadcast m \\<Rightarrow> P m\n         | groupcast x m \\<Rightarrow> P m | unicast x m \\<Rightarrow> P m\n         | _ \\<Rightarrow> True) =\n        True) &&&\n    (case \\<tau>\\<^sub>s of broadcast m \\<Rightarrow> P m\n     | groupcast x m \\<Rightarrow> P m | unicast x m \\<Rightarrow> P m\n     | _ \\<Rightarrow> True) =\n    True", "by simp_all"], ["", "definition orecvmsg :: \"((ip \\<Rightarrow> 's) \\<Rightarrow> 'm \\<Rightarrow> bool) \\<Rightarrow> (ip \\<Rightarrow> 's) \\<Rightarrow> 'm seq_action \\<Rightarrow> bool\"\nwhere \"orecvmsg P \\<sigma> a \\<equiv> (case a of receive m \\<Rightarrow> P \\<sigma> m\n                                         | _ \\<Rightarrow> True)\""], ["", "lemma orecvmsg_simps [simp]:\n  \"\\<And>m.     orecvmsg P \\<sigma> (broadcast m)     = True\"\n  \"\\<And>ips m. orecvmsg P \\<sigma> (groupcast ips m) = True\"\n  \"\\<And>ip m.  orecvmsg P \\<sigma> (unicast ip m)    = True\"\n  \"\\<And>ip.    orecvmsg P \\<sigma> (notunicast ip)   = True\"\n  \"\\<And>m.     orecvmsg P \\<sigma> (send m)          = True\"\n  \"\\<And>d.     orecvmsg P \\<sigma> (deliver d)       = True\"\n  \"\\<And>m.     orecvmsg P \\<sigma> (receive m)       = P \\<sigma> m\"\n  \"         orecvmsg P \\<sigma> \\<tau>\\<^sub>s                = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>m. orecvmsg P \\<sigma> (broadcast m) = True) &&&\n      (\\<And>ips m. orecvmsg P \\<sigma> (groupcast ips m) = True)) &&&\n     (\\<And>ip m. orecvmsg P \\<sigma> (unicast ip m) = True) &&&\n     (\\<And>ip. orecvmsg P \\<sigma> (\\<not>unicast ip) = True)) &&&\n    ((\\<And>m. orecvmsg P \\<sigma> (send m) = True) &&&\n     (\\<And>d. orecvmsg P \\<sigma> (deliver d) = True)) &&&\n    (\\<And>m. orecvmsg P \\<sigma> (receive m) = P \\<sigma> m) &&&\n    orecvmsg P \\<sigma> \\<tau>\\<^sub>s = True", "unfolding orecvmsg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>m.\n          (case broadcast m of receive m \\<Rightarrow> P \\<sigma> m\n           | _ \\<Rightarrow> True) =\n          True) &&&\n      (\\<And>ips m.\n          (case groupcast ips m of receive m \\<Rightarrow> P \\<sigma> m\n           | _ \\<Rightarrow> True) =\n          True)) &&&\n     (\\<And>ip m.\n         (case unicast ip m of receive m \\<Rightarrow> P \\<sigma> m\n          | _ \\<Rightarrow> True) =\n         True) &&&\n     (\\<And>ip.\n         (case \\<not>unicast ip of receive m \\<Rightarrow> P \\<sigma> m\n          | _ \\<Rightarrow> True) =\n         True)) &&&\n    ((\\<And>m.\n         (case send m of receive m \\<Rightarrow> P \\<sigma> m\n          | _ \\<Rightarrow> True) =\n         True) &&&\n     (\\<And>d.\n         (case deliver d of receive m \\<Rightarrow> P \\<sigma> m\n          | _ \\<Rightarrow> True) =\n         True)) &&&\n    (\\<And>m.\n        (case receive m of receive m \\<Rightarrow> P \\<sigma> m\n         | _ \\<Rightarrow> True) =\n        P \\<sigma> m) &&&\n    (case \\<tau>\\<^sub>s of receive m \\<Rightarrow> P \\<sigma> m\n     | _ \\<Rightarrow> True) =\n    True", "by simp_all"], ["", "lemma orecvmsgEI [elim]:\n  \"\\<lbrakk> orecvmsg P \\<sigma> a; \\<And>\\<sigma> a. P \\<sigma> a \\<Longrightarrow> Q \\<sigma> a \\<rbrakk> \\<Longrightarrow> orecvmsg Q \\<sigma> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>orecvmsg P \\<sigma> a;\n     \\<And>\\<sigma> a. P \\<sigma> a \\<Longrightarrow> Q \\<sigma> a\\<rbrakk>\n    \\<Longrightarrow> orecvmsg Q \\<sigma> a", "by (cases a) simp_all"], ["", "lemma orecvmsg_stateless_recvmsg [elim]:\n  \"orecvmsg (\\<lambda>_. P) \\<sigma> a \\<Longrightarrow> recvmsg P a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. orecvmsg (\\<lambda>_. P) \\<sigma> a \\<Longrightarrow> recvmsg P a", "by (cases a) simp_all"], ["", "lemma orecvmsg_recv_weaken [elim]:\n  \"\\<lbrakk> orecvmsg P \\<sigma> a; \\<And>\\<sigma> a. P \\<sigma> a \\<Longrightarrow> Q a \\<rbrakk> \\<Longrightarrow> recvmsg Q a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>orecvmsg P \\<sigma> a;\n     \\<And>\\<sigma> a. P \\<sigma> a \\<Longrightarrow> Q a\\<rbrakk>\n    \\<Longrightarrow> recvmsg Q a", "by (cases a) simp_all"], ["", "lemma orecvmsg_recvmsg [elim]:\n  \"orecvmsg P \\<sigma> a \\<Longrightarrow> recvmsg (P \\<sigma>) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. orecvmsg P \\<sigma> a \\<Longrightarrow> recvmsg (P \\<sigma>) a", "by (cases a) simp_all"], ["", "definition sendmsg :: \"('m \\<Rightarrow> bool) \\<Rightarrow> 'm seq_action \\<Rightarrow> bool\"\nwhere \"sendmsg P a \\<equiv> case a of send m \\<Rightarrow> P m | _ \\<Rightarrow> True\""], ["", "lemma sendmsg_simps [simp]:\n  \"\\<And>m.     sendmsg P (broadcast m)     = True\"\n  \"\\<And>ips m. sendmsg P (groupcast ips m) = True\"\n  \"\\<And>ip m.  sendmsg P (unicast ip m)    = True\"\n  \"\\<And>ip.    sendmsg P (notunicast ip)   = True\"\n  \"\\<And>m.     sendmsg P (send m)          = P m\"\n  \"\\<And>d.     sendmsg P (deliver d)       = True\"\n  \"\\<And>m.     sendmsg P (receive m)       = True\"\n  \"        sendmsg P \\<tau>\\<^sub>s                 = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>m. sendmsg P (broadcast m) = True) &&&\n      (\\<And>ips m. sendmsg P (groupcast ips m) = True)) &&&\n     (\\<And>ip m. sendmsg P (unicast ip m) = True) &&&\n     (\\<And>ip. sendmsg P (\\<not>unicast ip) = True)) &&&\n    ((\\<And>m. sendmsg P (send m) = P m) &&&\n     (\\<And>d. sendmsg P (deliver d) = True)) &&&\n    (\\<And>m. sendmsg P (receive m) = True) &&&\n    sendmsg P \\<tau>\\<^sub>s = True", "unfolding sendmsg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>m.\n          (case broadcast m of send m \\<Rightarrow> P m\n           | _ \\<Rightarrow> True) =\n          True) &&&\n      (\\<And>ips m.\n          (case groupcast ips m of send m \\<Rightarrow> P m\n           | _ \\<Rightarrow> True) =\n          True)) &&&\n     (\\<And>ip m.\n         (case unicast ip m of send m \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True) &&&\n     (\\<And>ip.\n         (case \\<not>unicast ip of send m \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True)) &&&\n    ((\\<And>m.\n         (case send m of send m \\<Rightarrow> P m | _ \\<Rightarrow> True) =\n         P m) &&&\n     (\\<And>d.\n         (case deliver d of send m \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True)) &&&\n    (\\<And>m.\n        (case receive m of send m \\<Rightarrow> P m\n         | _ \\<Rightarrow> True) =\n        True) &&&\n    (case \\<tau>\\<^sub>s of send m \\<Rightarrow> P m\n     | _ \\<Rightarrow> True) =\n    True", "by simp_all"], ["", "type_synonym ('s, 'm, 'p, 'l) seqp_env = \"'p \\<Rightarrow> ('s, 'm, 'p, 'l) seqp\""], ["", "subsubsection \"Node Actions (and related predicates)\""], ["", "datatype 'm node_action =\n    node_cast \"ip set\" 'm             (\"_:*cast'(_')\"       [200, 200] 200)                                                 \n  | node_deliver ip data              (\"_:deliver'(_')\"     [200, 200] 200)\n  | node_arrive \"ip set\" \"ip set\" 'm  (\"_\\<not>_:arrive'(_')\"    [200, 200, 200] 200)\n  | node_connect ip ip                (\"connect'(_, _')\"    [200, 200] 200)\n  | node_disconnect ip ip             (\"disconnect'(_, _')\" [200, 200] 200)\n  | node_newpkt ip data ip            (\"_:newpkt'(_, _')\"   [200, 200, 200] 200)\n  | node_tau                          (\"\\<tau>\\<^sub>n\")"], ["", "instantiation \"node_action\" :: (type) tau\nbegin"], ["", "definition step_node_tau [simp]: \"\\<tau> \\<equiv> \\<tau>\\<^sub>n\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a node_action, tau_class)", ".."], ["", "end"], ["", "definition arrivemsg :: \"ip \\<Rightarrow> ('m \\<Rightarrow> bool) \\<Rightarrow> 'm node_action \\<Rightarrow> bool\"\nwhere \"arrivemsg i P a \\<equiv> case a of node_arrive ii ni m \\<Rightarrow> ((ii = {i} \\<longrightarrow> P m))\n                                  | _ \\<Rightarrow> True\""], ["", "lemma arrivemsg_simps[simp]:\n  \"\\<And>R m.       arrivemsg i P (R:*cast(m))         = True\"\n  \"\\<And>d m.       arrivemsg i P (d:deliver(m))       = True\"\n  \"\\<And>i ii ni m. arrivemsg i P (ii\\<not>ni:arrive(m))    = (ii = {i} \\<longrightarrow> P m)\"\n  \"\\<And>i1 i2.     arrivemsg i P (connect(i1, i2))    = True\"\n  \"\\<And>i1 i2.     arrivemsg i P (disconnect(i1, i2)) = True\"\n  \"\\<And>i i' d di. arrivemsg i P (i':newpkt(d, di))   = True\"\n  \"             arrivemsg i P \\<tau>\\<^sub>n                   = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>R m. arrivemsg i P (R:*cast(m)) = True) &&&\n     (\\<And>d m. arrivemsg i P (d:deliver(m)) = True) &&&\n     (\\<And>i ii ni m.\n         arrivemsg i P (ii\\<not>ni:arrive(m)) =\n         (ii = {i} \\<longrightarrow> P m))) &&&\n    ((\\<And>i1 i2. arrivemsg i P (connect(i1, i2)) = True) &&&\n     (\\<And>i1 i2. arrivemsg i P (disconnect(i1, i2)) = True)) &&&\n    (\\<And>i i' d di. arrivemsg i P (i':newpkt(d, di)) = True) &&&\n    arrivemsg i P \\<tau>\\<^sub>n = True", "unfolding arrivemsg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>R m.\n         (case R:*cast(m) of\n          ii\\<not>ni:arrive(m) \\<Rightarrow> ii = {i} \\<longrightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True) &&&\n     (\\<And>d m.\n         (case d:deliver(m) of\n          ii\\<not>ni:arrive(m) \\<Rightarrow> ii = {i} \\<longrightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True) &&&\n     (\\<And>i ii ni m.\n         (case ii\\<not>ni:arrive(m) of\n          ii\\<not>ni:arrive(m) \\<Rightarrow> ii = {i} \\<longrightarrow> P m\n          | _ \\<Rightarrow> True) =\n         (ii = {i} \\<longrightarrow> P m))) &&&\n    ((\\<And>i1 i2.\n         (case connect(i1, i2) of\n          ii\\<not>ni:arrive(m) \\<Rightarrow> ii = {i} \\<longrightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True) &&&\n     (\\<And>i1 i2.\n         (case disconnect(i1, i2) of\n          ii\\<not>ni:arrive(m) \\<Rightarrow> ii = {i} \\<longrightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True)) &&&\n    (\\<And>i i' d di.\n        (case i':newpkt(d, di) of\n         ii\\<not>ni:arrive(m) \\<Rightarrow> ii = {i} \\<longrightarrow> P m\n         | _ \\<Rightarrow> True) =\n        True) &&&\n    (case \\<tau>\\<^sub>n of\n     ii\\<not>ni:arrive(m) \\<Rightarrow> ii = {i} \\<longrightarrow> P m\n     | _ \\<Rightarrow> True) =\n    True", "by simp_all"], ["", "lemma arrivemsgTT [simp]: \"arrivemsg i TT = TT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrivemsg i TT = TT", "by (rule ext) (clarsimp simp: arrivemsg_def split: node_action.split)"], ["", "definition oarrivemsg :: \"((ip \\<Rightarrow> 's) \\<Rightarrow> 'm \\<Rightarrow> bool) \\<Rightarrow> (ip \\<Rightarrow> 's) \\<Rightarrow> 'm node_action \\<Rightarrow> bool\"\nwhere \"oarrivemsg P \\<sigma> a \\<equiv> case a of node_arrive ii ni m \\<Rightarrow> P \\<sigma> m | _ \\<Rightarrow> True\""], ["", "lemma oarrivemsg_simps[simp]:\n  \"\\<And>R m.       oarrivemsg P \\<sigma> (R:*cast(m))         = True\"\n  \"\\<And>d m.       oarrivemsg P \\<sigma> (d:deliver(m))       = True\"\n  \"\\<And>i ii ni m. oarrivemsg P \\<sigma> (ii\\<not>ni:arrive(m))    = P \\<sigma> m\"\n  \"\\<And>i1 i2.     oarrivemsg P \\<sigma> (connect(i1, i2))    = True\"\n  \"\\<And>i1 i2.     oarrivemsg P \\<sigma> (disconnect(i1, i2)) = True\"\n  \"\\<And>i i' d di. oarrivemsg P \\<sigma> (i':newpkt(d, di))   = True\"\n  \"             oarrivemsg P \\<sigma> \\<tau>\\<^sub>n                   = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>R m. oarrivemsg P \\<sigma> (R:*cast(m)) = True) &&&\n     (\\<And>d m. oarrivemsg P \\<sigma> (d:deliver(m)) = True) &&&\n     (\\<And>i ii ni m.\n         oarrivemsg P \\<sigma> (ii\\<not>ni:arrive(m)) = P \\<sigma> m)) &&&\n    ((\\<And>i1 i2. oarrivemsg P \\<sigma> (connect(i1, i2)) = True) &&&\n     (\\<And>i1 i2. oarrivemsg P \\<sigma> (disconnect(i1, i2)) = True)) &&&\n    (\\<And>i i' d di. oarrivemsg P \\<sigma> (i':newpkt(d, di)) = True) &&&\n    oarrivemsg P \\<sigma> \\<tau>\\<^sub>n = True", "unfolding oarrivemsg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>R m.\n         (case R:*cast(m) of ii\\<not>ni:arrive(m) \\<Rightarrow> P \\<sigma> m\n          | _ \\<Rightarrow> True) =\n         True) &&&\n     (\\<And>d m.\n         (case d:deliver(m) of\n          ii\\<not>ni:arrive(m) \\<Rightarrow> P \\<sigma> m\n          | _ \\<Rightarrow> True) =\n         True) &&&\n     (\\<And>i ii ni m.\n         (case ii\\<not>ni:arrive(m) of\n          ii\\<not>ni:arrive(m) \\<Rightarrow> P \\<sigma> m\n          | _ \\<Rightarrow> True) =\n         P \\<sigma> m)) &&&\n    ((\\<And>i1 i2.\n         (case connect(i1, i2) of\n          ii\\<not>ni:arrive(m) \\<Rightarrow> P \\<sigma> m\n          | _ \\<Rightarrow> True) =\n         True) &&&\n     (\\<And>i1 i2.\n         (case disconnect(i1, i2) of\n          ii\\<not>ni:arrive(m) \\<Rightarrow> P \\<sigma> m\n          | _ \\<Rightarrow> True) =\n         True)) &&&\n    (\\<And>i i' d di.\n        (case i':newpkt(d, di) of\n         ii\\<not>ni:arrive(m) \\<Rightarrow> P \\<sigma> m\n         | _ \\<Rightarrow> True) =\n        True) &&&\n    (case \\<tau>\\<^sub>n of ii\\<not>ni:arrive(m) \\<Rightarrow> P \\<sigma> m\n     | _ \\<Rightarrow> True) =\n    True", "by simp_all"], ["", "lemma oarrivemsg_True [simp, intro]: \"oarrivemsg (\\<lambda>_ _. True) \\<sigma> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oarrivemsg (\\<lambda>_ _. True) \\<sigma> a", "by (cases a) auto"], ["", "definition castmsg :: \"('m \\<Rightarrow> bool) \\<Rightarrow> 'm node_action \\<Rightarrow> bool\"\nwhere \"castmsg P a \\<equiv> case a of _:*cast(m) \\<Rightarrow> P m\n                              | _ \\<Rightarrow> True\""], ["", "lemma castmsg_simps[simp]:\n  \"\\<And>R m.       castmsg P (R:*cast(m))         = P m\"\n  \"\\<And>d m.       castmsg P (d:deliver(m))       = True\"\n  \"\\<And>i ii ni m. castmsg P (ii\\<not>ni:arrive(m))    = True\"\n  \"\\<And>i1 i2.     castmsg P (connect(i1, i2))    = True\"\n  \"\\<And>i1 i2.     castmsg P (disconnect(i1, i2)) = True\"\n  \"\\<And>i i' d di. castmsg P (i':newpkt(d, di))   = True\"\n  \"             castmsg P \\<tau>\\<^sub>n                   = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>R m. castmsg P (R:*cast(m)) = P m) &&&\n     (\\<And>d m. castmsg P (d:deliver(m)) = True) &&&\n     (\\<And>i ii ni m. castmsg P (ii\\<not>ni:arrive(m)) = True)) &&&\n    ((\\<And>i1 i2. castmsg P (connect(i1, i2)) = True) &&&\n     (\\<And>i1 i2. castmsg P (disconnect(i1, i2)) = True)) &&&\n    (\\<And>i i' d di. castmsg P (i':newpkt(d, di)) = True) &&&\n    castmsg P \\<tau>\\<^sub>n = True", "unfolding castmsg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>R m.\n         (case R:*cast(m) of x:*cast(m) \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         P m) &&&\n     (\\<And>d m.\n         (case d:deliver(m) of x:*cast(m) \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True) &&&\n     (\\<And>i ii ni m.\n         (case ii\\<not>ni:arrive(m) of x:*cast(m) \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True)) &&&\n    ((\\<And>i1 i2.\n         (case connect(i1, i2) of x:*cast(m) \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True) &&&\n     (\\<And>i1 i2.\n         (case disconnect(i1, i2) of x:*cast(m) \\<Rightarrow> P m\n          | _ \\<Rightarrow> True) =\n         True)) &&&\n    (\\<And>i i' d di.\n        (case i':newpkt(d, di) of x:*cast(m) \\<Rightarrow> P m\n         | _ \\<Rightarrow> True) =\n        True) &&&\n    (case \\<tau>\\<^sub>n of x:*cast(m) \\<Rightarrow> P m\n     | _ \\<Rightarrow> True) =\n    True", "by simp_all"], ["", "subsection \"Networks\""], ["", "datatype net_tree =\n    Node ip \"ip set\"          (\"\\<langle>_; _\\<rangle>\")\n  | Subnet net_tree net_tree  (infixl \"\\<parallel>\" 90)"], ["", "declare net_tree.induct [[induct del]]"], ["", "lemmas net_tree_induct [induct type: net_tree] = net_tree.induct [rename_abs i R p1 p2]"], ["", "datatype 's net_state =\n    NodeS ip 's \"ip set\"\n  | SubnetS \"'s net_state\" \"'s net_state\""], ["", "fun net_ips :: \"'s net_state \\<Rightarrow> ip set\"\nwhere\n    \"net_ips (NodeS i s R) = {i}\"\n  | \"net_ips (SubnetS n1 n2) = net_ips n1 \\<union> net_ips n2\""], ["", "fun net_tree_ips :: \"net_tree \\<Rightarrow> ip set\"\nwhere\n    \"net_tree_ips (p1 \\<parallel> p2) = net_tree_ips p1 \\<union> net_tree_ips p2\"\n  | \"net_tree_ips (\\<langle>i; R\\<rangle>) = {i}\""], ["", "lemma net_tree_ips_commute:\n  \"net_tree_ips (p1 \\<parallel> p2) = net_tree_ips (p2 \\<parallel> p1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. net_tree_ips (p1 \\<parallel> p2) = net_tree_ips (p2 \\<parallel> p1)", "by simp (rule Un_commute)"], ["", "fun wf_net_tree :: \"net_tree \\<Rightarrow> bool\"\nwhere\n   \"wf_net_tree (p1 \\<parallel> p2) = (net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n                             \\<and> wf_net_tree p1 \\<and> wf_net_tree p2)\"\n | \"wf_net_tree (\\<langle>i; R\\<rangle>) = True\""], ["", "lemma wf_net_tree_children [elim]:\n  assumes \"wf_net_tree (p1 \\<parallel> p2)\"\n  obtains \"wf_net_tree p1\"\n      and \"wf_net_tree p2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>wf_net_tree p1; wf_net_tree p2\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  wf_net_tree (p1 \\<parallel> p2)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>wf_net_tree p1; wf_net_tree p2\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["", "fun netmap :: \"'s net_state \\<Rightarrow> ip \\<Rightarrow> 's option\"\nwhere\n    \"netmap (NodeS i p R\\<^sub>i) = [i \\<mapsto> p]\"\n  | \"netmap (SubnetS s t) = netmap s ++ netmap t\""], ["", "lemma not_in_netmap [simp]:\n  assumes \"i \\<notin> net_ips ns\"\n    shows \"netmap ns i = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netmap ns i = None", "using assms"], ["proof (prove)\nusing this:\n  i \\<notin> net_ips ns\n\ngoal (1 subgoal):\n 1. netmap ns i = None", "by (induction ns) simp_all"], ["", "lemma netmap_none_not_in_net_ips:\n  assumes \"netmap ns i = None\"\n    shows \"i\\<notin>net_ips ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<notin> net_ips ns", "using assms"], ["proof (prove)\nusing this:\n  netmap ns i = None\n\ngoal (1 subgoal):\n 1. i \\<notin> net_ips ns", "by (induction ns) auto"], ["", "lemma net_ips_is_dom_netmap: \"net_ips s = dom(netmap s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. net_ips s = dom (netmap s)", "proof (induction s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3. net_ips (NodeS x1 x2 x3) = dom (netmap (NodeS x1 x2 x3))\n 2. \\<And>s1 s2.\n       \\<lbrakk>net_ips s1 = dom (netmap s1);\n        net_ips s2 = dom (netmap s2)\\<rbrakk>\n       \\<Longrightarrow> net_ips (SubnetS s1 s2) =\n                         dom (netmap (SubnetS s1 s2))", "fix i R\\<^sub>i and p :: 's"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3. net_ips (NodeS x1 x2 x3) = dom (netmap (NodeS x1 x2 x3))\n 2. \\<And>s1 s2.\n       \\<lbrakk>net_ips s1 = dom (netmap s1);\n        net_ips s2 = dom (netmap s2)\\<rbrakk>\n       \\<Longrightarrow> net_ips (SubnetS s1 s2) =\n                         dom (netmap (SubnetS s1 s2))", "show \"net_ips (NodeS i p R\\<^sub>i) = dom (netmap (NodeS i p R\\<^sub>i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. net_ips (NodeS i p R\\<^sub>i) = dom (netmap (NodeS i p R\\<^sub>i))", "by auto"], ["proof (state)\nthis:\n  net_ips (NodeS i p R\\<^sub>i) = dom (netmap (NodeS i p R\\<^sub>i))\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>net_ips s1 = dom (netmap s1);\n        net_ips s2 = dom (netmap s2)\\<rbrakk>\n       \\<Longrightarrow> net_ips (SubnetS s1 s2) =\n                         dom (netmap (SubnetS s1 s2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>net_ips s1 = dom (netmap s1);\n        net_ips s2 = dom (netmap s2)\\<rbrakk>\n       \\<Longrightarrow> net_ips (SubnetS s1 s2) =\n                         dom (netmap (SubnetS s1 s2))", "fix s1 s2 :: \"'s net_state\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>net_ips s1 = dom (netmap s1);\n        net_ips s2 = dom (netmap s2)\\<rbrakk>\n       \\<Longrightarrow> net_ips (SubnetS s1 s2) =\n                         dom (netmap (SubnetS s1 s2))", "assume \"net_ips s1 = dom (netmap s1)\"\n       and \"net_ips s2 = dom (netmap s2)\""], ["proof (state)\nthis:\n  net_ips s1 = dom (netmap s1)\n  net_ips s2 = dom (netmap s2)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>net_ips s1 = dom (netmap s1);\n        net_ips s2 = dom (netmap s2)\\<rbrakk>\n       \\<Longrightarrow> net_ips (SubnetS s1 s2) =\n                         dom (netmap (SubnetS s1 s2))", "thus \"net_ips (SubnetS s1 s2) = dom (netmap (SubnetS s1 s2))\""], ["proof (prove)\nusing this:\n  net_ips s1 = dom (netmap s1)\n  net_ips s2 = dom (netmap s2)\n\ngoal (1 subgoal):\n 1. net_ips (SubnetS s1 s2) = dom (netmap (SubnetS s1 s2))", "by auto"], ["proof (state)\nthis:\n  net_ips (SubnetS s1 s2) = dom (netmap (SubnetS s1 s2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_netmap [simp]:\n  assumes \"i \\<in> net_ips ns\"\n    shows \"netmap ns i \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netmap ns i \\<noteq> None", "using assms"], ["proof (prove)\nusing this:\n  i \\<in> net_ips ns\n\ngoal (1 subgoal):\n 1. netmap ns i \\<noteq> None", "by (auto simp add: net_ips_is_dom_netmap)"], ["", "lemma netmap_subnets_same:\n  assumes \"netmap s1 i = x\"\n      and \"netmap s2 i = x\"\n    shows \"netmap (SubnetS s1 s2) i = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netmap (SubnetS s1 s2) i = x", "using assms"], ["proof (prove)\nusing this:\n  netmap s1 i = x\n  netmap s2 i = x\n\ngoal (1 subgoal):\n 1. netmap (SubnetS s1 s2) i = x", "by simp (metis map_add_dom_app_simps(1) map_add_dom_app_simps(3))"], ["", "lemma netmap_subnets_samef:\n  assumes \"netmap s1 = f\"\n      and \"netmap s2 = f\"\n    shows \"netmap (SubnetS s1 s2) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netmap (SubnetS s1 s2) = f", "using assms"], ["proof (prove)\nusing this:\n  netmap s1 = f\n  netmap s2 = f\n\ngoal (1 subgoal):\n 1. netmap (SubnetS s1 s2) = f", "by simp (metis map_add_le_mapI map_le_antisym map_le_map_add map_le_refl)"], ["", "lemma netmap_add_disjoint [elim]:\n  assumes \"\\<forall>i\\<in>net_ips s1 \\<union> net_ips s2. the ((netmap s1 ++ netmap s2) i) = \\<sigma> i\"\n      and \"net_ips s1 \\<inter> net_ips s2 = {}\"\n    shows \"\\<forall>i\\<in>net_ips s1. the (netmap s1 i) = \\<sigma> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_ips s1. the (netmap s1 i) = \\<sigma> i", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> net_ips s1 \\<Longrightarrow> the (netmap s1 i) = \\<sigma> i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> net_ips s1 \\<Longrightarrow> the (netmap s1 i) = \\<sigma> i", "assume \"i \\<in> net_ips s1\""], ["proof (state)\nthis:\n  i \\<in> net_ips s1\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> net_ips s1 \\<Longrightarrow> the (netmap s1 i) = \\<sigma> i", "hence \"i \\<in> dom(netmap s1)\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips s1\n\ngoal (1 subgoal):\n 1. i \\<in> dom (netmap s1)", "by (simp add: net_ips_is_dom_netmap)"], ["proof (state)\nthis:\n  i \\<in> dom (netmap s1)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> net_ips s1 \\<Longrightarrow> the (netmap s1 i) = \\<sigma> i", "moreover"], ["proof (state)\nthis:\n  i \\<in> dom (netmap s1)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> net_ips s1 \\<Longrightarrow> the (netmap s1 i) = \\<sigma> i", "with assms(2)"], ["proof (chain)\npicking this:\n  net_ips s1 \\<inter> net_ips s2 = {}\n  i \\<in> dom (netmap s1)", "have \"i \\<notin> dom(netmap s2)\""], ["proof (prove)\nusing this:\n  net_ips s1 \\<inter> net_ips s2 = {}\n  i \\<in> dom (netmap s1)\n\ngoal (1 subgoal):\n 1. i \\<notin> dom (netmap s2)", "by (auto simp add: net_ips_is_dom_netmap)"], ["proof (state)\nthis:\n  i \\<notin> dom (netmap s2)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> net_ips s1 \\<Longrightarrow> the (netmap s1 i) = \\<sigma> i", "ultimately"], ["proof (chain)\npicking this:\n  i \\<in> dom (netmap s1)\n  i \\<notin> dom (netmap s2)", "have \"the (netmap s1 i) = the ((netmap s1 ++ netmap s2) i)\""], ["proof (prove)\nusing this:\n  i \\<in> dom (netmap s1)\n  i \\<notin> dom (netmap s2)\n\ngoal (1 subgoal):\n 1. the (netmap s1 i) = the ((netmap s1 ++ netmap s2) i)", "by (simp add: map_add_dom_app_simps)"], ["proof (state)\nthis:\n  the (netmap s1 i) = the ((netmap s1 ++ netmap s2) i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> net_ips s1 \\<Longrightarrow> the (netmap s1 i) = \\<sigma> i", "with assms(1) and \\<open>i\\<in>net_ips s1\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>net_ips s1 \\<union> net_ips s2.\n     the ((netmap s1 ++ netmap s2) i) = \\<sigma> i\n  i \\<in> net_ips s1\n  the (netmap s1 i) = the ((netmap s1 ++ netmap s2) i)", "show \"the (netmap s1 i) = \\<sigma> i\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_ips s1 \\<union> net_ips s2.\n     the ((netmap s1 ++ netmap s2) i) = \\<sigma> i\n  i \\<in> net_ips s1\n  the (netmap s1 i) = the ((netmap s1 ++ netmap s2) i)\n\ngoal (1 subgoal):\n 1. the (netmap s1 i) = \\<sigma> i", "by simp"], ["proof (state)\nthis:\n  the (netmap s1 i) = \\<sigma> i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma netmap_add_disjoint2 [elim]:\n  assumes \"\\<forall>i\\<in>net_ips s1 \\<union> net_ips s2. the ((netmap s1 ++ netmap s2) i) = \\<sigma> i\"\n    shows \"\\<forall>i\\<in>net_ips s2. the (netmap s2 i) = \\<sigma> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_ips s2. the (netmap s2 i) = \\<sigma> i", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_ips s1 \\<union> net_ips s2.\n     the ((netmap s1 ++ netmap s2) i) = \\<sigma> i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_ips s2. the (netmap s2 i) = \\<sigma> i", "by (simp add: net_ips_is_dom_netmap)\n                 (metis Un_iff map_add_dom_app_simps(1))"], ["", "lemma net_ips_netmap_subnet [elim]:\n  assumes \"net_ips s1 \\<inter> net_ips s2 = {}\"\n      and \"\\<forall>i\\<in>net_ips (SubnetS s1 s2). the (netmap (SubnetS s1 s2) i) = \\<sigma> i\"\n    shows \"\\<forall>i\\<in>net_ips s1. the (netmap s1 i) = \\<sigma> i\"\n      and \"\\<forall>i\\<in>net_ips s2. the (netmap s2 i) = \\<sigma> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_ips s1. the (netmap s1 i) = \\<sigma> i &&&\n    \\<forall>i\\<in>net_ips s2. the (netmap s2 i) = \\<sigma> i", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>i\\<in>net_ips s1. the (netmap s1 i) = \\<sigma> i\n 2. \\<forall>i\\<in>net_ips s2. the (netmap s2 i) = \\<sigma> i", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>net_ips (SubnetS s1 s2).\n     the (netmap (SubnetS s1 s2) i) = \\<sigma> i", "have \"\\<forall>i\\<in>net_ips s1 \\<union> net_ips s2. the ((netmap s1 ++ netmap s2) i) = \\<sigma> i\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_ips (SubnetS s1 s2).\n     the (netmap (SubnetS s1 s2) i) = \\<sigma> i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_ips s1 \\<union> net_ips s2.\n       the ((netmap s1 ++ netmap s2) i) = \\<sigma> i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_ips s1 \\<union> net_ips s2.\n     the ((netmap s1 ++ netmap s2) i) = \\<sigma> i\n\ngoal (2 subgoals):\n 1. \\<forall>i\\<in>net_ips s1. the (netmap s1 i) = \\<sigma> i\n 2. \\<forall>i\\<in>net_ips s2. the (netmap s2 i) = \\<sigma> i", "with assms(1)"], ["proof (chain)\npicking this:\n  net_ips s1 \\<inter> net_ips s2 = {}\n  \\<forall>i\\<in>net_ips s1 \\<union> net_ips s2.\n     the ((netmap s1 ++ netmap s2) i) = \\<sigma> i", "show \"\\<forall>i\\<in>net_ips s1. the (netmap s1 i) = \\<sigma> i\""], ["proof (prove)\nusing this:\n  net_ips s1 \\<inter> net_ips s2 = {}\n  \\<forall>i\\<in>net_ips s1 \\<union> net_ips s2.\n     the ((netmap s1 ++ netmap s2) i) = \\<sigma> i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_ips s1. the (netmap s1 i) = \\<sigma> i", "by - (erule(1) netmap_add_disjoint)"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_ips s1. the (netmap s1 i) = \\<sigma> i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_ips s2. the (netmap s2 i) = \\<sigma> i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_ips s2. the (netmap s2 i) = \\<sigma> i", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>net_ips (SubnetS s1 s2).\n     the (netmap (SubnetS s1 s2) i) = \\<sigma> i", "have \"\\<forall>i\\<in>net_ips s1 \\<union> net_ips s2. the ((netmap s1 ++ netmap s2) i) = \\<sigma> i\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_ips (SubnetS s1 s2).\n     the (netmap (SubnetS s1 s2) i) = \\<sigma> i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_ips s1 \\<union> net_ips s2.\n       the ((netmap s1 ++ netmap s2) i) = \\<sigma> i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_ips s1 \\<union> net_ips s2.\n     the ((netmap s1 ++ netmap s2) i) = \\<sigma> i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_ips s2. the (netmap s2 i) = \\<sigma> i", "thus \"\\<forall>i\\<in>net_ips s2. the (netmap s2 i) = \\<sigma> i\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_ips s1 \\<union> net_ips s2.\n     the ((netmap s1 ++ netmap s2) i) = \\<sigma> i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_ips s2. the (netmap s2 i) = \\<sigma> i", "by - (erule netmap_add_disjoint2)"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_ips s2. the (netmap s2 i) = \\<sigma> i\n\ngoal:\nNo subgoals!", "qed"], ["", "fun inoclosed :: \"'s \\<Rightarrow> 'm::msg node_action \\<Rightarrow> bool\"\nwhere\n    \"inoclosed _ (node_arrive ii ni m) = eq_newpkt m\"\n  | \"inoclosed _ (node_newpkt i d di)  = False\"\n  | \"inoclosed _ _ = True\""], ["", "lemma inclosed_simps [simp]:\n  \"\\<And>\\<sigma> ii ni. inoclosed \\<sigma> (ii\\<not>ni:arrive(m))   = eq_newpkt m\"\n  \"\\<And>\\<sigma> d di.  inoclosed \\<sigma> (i:newpkt(d, di))   = False\"\n  \"\\<And>\\<sigma> R m.   inoclosed \\<sigma> (R:*cast(m))        = True\"\n  \"\\<And>\\<sigma> i d.   inoclosed \\<sigma> (i:deliver(d))      = True\"\n  \"\\<And>\\<sigma> i i'.  inoclosed \\<sigma> (connect(i, i'))    = True\"\n  \"\\<And>\\<sigma> i i'.  inoclosed \\<sigma> (disconnect(i, i')) = True\"\n  \"\\<And>\\<sigma>.       inoclosed \\<sigma> (\\<tau>)                 = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>\\<sigma> ii ni.\n         inoclosed \\<sigma> (ii\\<not>ni:arrive(m)) = eq_newpkt m) &&&\n     (\\<And>\\<sigma> d di. inoclosed \\<sigma> (i:newpkt(d, di)) = False) &&&\n     (\\<And>\\<sigma> R m. inoclosed \\<sigma> (R:*cast(m)) = True)) &&&\n    ((\\<And>\\<sigma> i d. inoclosed \\<sigma> (i:deliver(d)) = True) &&&\n     (\\<And>\\<sigma> i i'. inoclosed \\<sigma> (connect(i, i')) = True)) &&&\n    (\\<And>\\<sigma> i i'. inoclosed \\<sigma> (disconnect(i, i')) = True) &&&\n    (\\<And>\\<sigma>. inoclosed \\<sigma> \\<tau> = True)", "by auto"], ["", "definition\n  netmask :: \"ip set \\<Rightarrow> ((ip \\<Rightarrow> 's) \\<times> 'l) \\<Rightarrow> ((ip \\<Rightarrow> 's option) \\<times> 'l)\"\nwhere\n  \"netmask I s \\<equiv> (\\<lambda>i. if i\\<in>I then Some (fst s i) else None, snd s)\""], ["", "lemma netmask_def' [simp]:\n  \"netmask I (\\<sigma>, \\<zeta>) = (\\<lambda>i. if i\\<in>I then Some (\\<sigma> i) else None, \\<zeta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netmask I (\\<sigma>, \\<zeta>) =\n    (\\<lambda>i. if i \\<in> I then Some (\\<sigma> i) else None, \\<zeta>)", "unfolding netmask_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i.\n        if i \\<in> I then Some (fst (\\<sigma>, \\<zeta>) i) else None,\n     snd (\\<sigma>, \\<zeta>)) =\n    (\\<lambda>i. if i \\<in> I then Some (\\<sigma> i) else None, \\<zeta>)", "by auto"], ["", "fun netgmap :: \"('s \\<Rightarrow> 'g \\<times> 'l) \\<Rightarrow> 's net_state \\<Rightarrow> (nat \\<Rightarrow> 'g option) \\<times> 'l net_state\"\n  where\n    \"netgmap sr (NodeS i s R) = ([i \\<mapsto> fst (sr s)], NodeS i (snd (sr s)) R)\"\n  | \"netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2) = (let (\\<sigma>\\<^sub>1, ss) = netgmap sr s\\<^sub>1 in\n                                   let (\\<sigma>\\<^sub>2, tt) = netgmap sr s\\<^sub>2 in\n                                   (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2, SubnetS ss tt))\""], ["", "lemma dom_fst_netgmap [simp, intro]: \"dom (fst (netgmap sr n)) = net_ips n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (fst (netgmap sr n)) = net_ips n", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3.\n       dom (fst (netgmap sr (NodeS x1 x2 x3))) = net_ips (NodeS x1 x2 x3)\n 2. \\<And>n1 n2.\n       \\<lbrakk>dom (fst (netgmap sr n1)) = net_ips n1;\n        dom (fst (netgmap sr n2)) = net_ips n2\\<rbrakk>\n       \\<Longrightarrow> dom (fst (netgmap sr (SubnetS n1 n2))) =\n                         net_ips (SubnetS n1 n2)", "fix i s R"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3.\n       dom (fst (netgmap sr (NodeS x1 x2 x3))) = net_ips (NodeS x1 x2 x3)\n 2. \\<And>n1 n2.\n       \\<lbrakk>dom (fst (netgmap sr n1)) = net_ips n1;\n        dom (fst (netgmap sr n2)) = net_ips n2\\<rbrakk>\n       \\<Longrightarrow> dom (fst (netgmap sr (SubnetS n1 n2))) =\n                         net_ips (SubnetS n1 n2)", "show \"dom (fst (netgmap sr (NodeS i s R))) = net_ips (NodeS i s R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (fst (netgmap sr (NodeS i s R))) = net_ips (NodeS i s R)", "by simp"], ["proof (state)\nthis:\n  dom (fst (netgmap sr (NodeS i s R))) = net_ips (NodeS i s R)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2.\n       \\<lbrakk>dom (fst (netgmap sr n1)) = net_ips n1;\n        dom (fst (netgmap sr n2)) = net_ips n2\\<rbrakk>\n       \\<Longrightarrow> dom (fst (netgmap sr (SubnetS n1 n2))) =\n                         net_ips (SubnetS n1 n2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2.\n       \\<lbrakk>dom (fst (netgmap sr n1)) = net_ips n1;\n        dom (fst (netgmap sr n2)) = net_ips n2\\<rbrakk>\n       \\<Longrightarrow> dom (fst (netgmap sr (SubnetS n1 n2))) =\n                         net_ips (SubnetS n1 n2)", "fix n1 n2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2.\n       \\<lbrakk>dom (fst (netgmap sr n1)) = net_ips n1;\n        dom (fst (netgmap sr n2)) = net_ips n2\\<rbrakk>\n       \\<Longrightarrow> dom (fst (netgmap sr (SubnetS n1 n2))) =\n                         net_ips (SubnetS n1 n2)", "assume a1: \"dom (fst (netgmap sr n1)) = net_ips n1\"\n       and a2: \"dom (fst (netgmap sr n2)) = net_ips n2\""], ["proof (state)\nthis:\n  dom (fst (netgmap sr n1)) = net_ips n1\n  dom (fst (netgmap sr n2)) = net_ips n2\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2.\n       \\<lbrakk>dom (fst (netgmap sr n1)) = net_ips n1;\n        dom (fst (netgmap sr n2)) = net_ips n2\\<rbrakk>\n       \\<Longrightarrow> dom (fst (netgmap sr (SubnetS n1 n2))) =\n                         net_ips (SubnetS n1 n2)", "obtain \\<sigma>\\<^sub>1 \\<zeta>\\<^sub>1 \\<sigma>\\<^sub>2 \\<zeta>\\<^sub>2 where nm1: \"netgmap sr n1 = (\\<sigma>\\<^sub>1, \\<zeta>\\<^sub>1)\"\n                        and nm2: \"netgmap sr n2 = (\\<sigma>\\<^sub>2, \\<zeta>\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>1 \\<zeta>\\<^sub>1 \\<sigma>\\<^sub>2\n        \\<zeta>\\<^sub>2.\n        \\<lbrakk>netgmap sr n1 = (\\<sigma>\\<^sub>1, \\<zeta>\\<^sub>1);\n         netgmap sr n2 = (\\<sigma>\\<^sub>2, \\<zeta>\\<^sub>2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  netgmap sr n1 = (\\<sigma>\\<^sub>1, \\<zeta>\\<^sub>1)\n  netgmap sr n2 = (\\<sigma>\\<^sub>2, \\<zeta>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2.\n       \\<lbrakk>dom (fst (netgmap sr n1)) = net_ips n1;\n        dom (fst (netgmap sr n2)) = net_ips n2\\<rbrakk>\n       \\<Longrightarrow> dom (fst (netgmap sr (SubnetS n1 n2))) =\n                         net_ips (SubnetS n1 n2)", "hence \"netgmap sr (SubnetS n1 n2) = (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2, SubnetS \\<zeta>\\<^sub>1 \\<zeta>\\<^sub>2)\""], ["proof (prove)\nusing this:\n  netgmap sr n1 = (\\<sigma>\\<^sub>1, \\<zeta>\\<^sub>1)\n  netgmap sr n2 = (\\<sigma>\\<^sub>2, \\<zeta>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. netgmap sr (SubnetS n1 n2) =\n    (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2,\n     SubnetS \\<zeta>\\<^sub>1 \\<zeta>\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  netgmap sr (SubnetS n1 n2) =\n  (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2,\n   SubnetS \\<zeta>\\<^sub>1 \\<zeta>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2.\n       \\<lbrakk>dom (fst (netgmap sr n1)) = net_ips n1;\n        dom (fst (netgmap sr n2)) = net_ips n2\\<rbrakk>\n       \\<Longrightarrow> dom (fst (netgmap sr (SubnetS n1 n2))) =\n                         net_ips (SubnetS n1 n2)", "hence \"dom (fst (netgmap sr (SubnetS n1 n2))) = dom (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2)\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS n1 n2) =\n  (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2,\n   SubnetS \\<zeta>\\<^sub>1 \\<zeta>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. dom (fst (netgmap sr (SubnetS n1 n2))) =\n    dom (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  dom (fst (netgmap sr (SubnetS n1 n2))) =\n  dom (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2.\n       \\<lbrakk>dom (fst (netgmap sr n1)) = net_ips n1;\n        dom (fst (netgmap sr n2)) = net_ips n2\\<rbrakk>\n       \\<Longrightarrow> dom (fst (netgmap sr (SubnetS n1 n2))) =\n                         net_ips (SubnetS n1 n2)", "also"], ["proof (state)\nthis:\n  dom (fst (netgmap sr (SubnetS n1 n2))) =\n  dom (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2.\n       \\<lbrakk>dom (fst (netgmap sr n1)) = net_ips n1;\n        dom (fst (netgmap sr n2)) = net_ips n2\\<rbrakk>\n       \\<Longrightarrow> dom (fst (netgmap sr (SubnetS n1 n2))) =\n                         net_ips (SubnetS n1 n2)", "from a1 a2 nm1 nm2"], ["proof (chain)\npicking this:\n  dom (fst (netgmap sr n1)) = net_ips n1\n  dom (fst (netgmap sr n2)) = net_ips n2\n  netgmap sr n1 = (\\<sigma>\\<^sub>1, \\<zeta>\\<^sub>1)\n  netgmap sr n2 = (\\<sigma>\\<^sub>2, \\<zeta>\\<^sub>2)", "have \"dom (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2) = net_ips (SubnetS n1 n2)\""], ["proof (prove)\nusing this:\n  dom (fst (netgmap sr n1)) = net_ips n1\n  dom (fst (netgmap sr n2)) = net_ips n2\n  netgmap sr n1 = (\\<sigma>\\<^sub>1, \\<zeta>\\<^sub>1)\n  netgmap sr n2 = (\\<sigma>\\<^sub>2, \\<zeta>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. dom (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2) = net_ips (SubnetS n1 n2)", "by auto"], ["proof (state)\nthis:\n  dom (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2) = net_ips (SubnetS n1 n2)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2.\n       \\<lbrakk>dom (fst (netgmap sr n1)) = net_ips n1;\n        dom (fst (netgmap sr n2)) = net_ips n2\\<rbrakk>\n       \\<Longrightarrow> dom (fst (netgmap sr (SubnetS n1 n2))) =\n                         net_ips (SubnetS n1 n2)", "finally"], ["proof (chain)\npicking this:\n  dom (fst (netgmap sr (SubnetS n1 n2))) = net_ips (SubnetS n1 n2)", "show \"dom (fst (netgmap sr (SubnetS n1 n2))) = net_ips (SubnetS n1 n2)\""], ["proof (prove)\nusing this:\n  dom (fst (netgmap sr (SubnetS n1 n2))) = net_ips (SubnetS n1 n2)\n\ngoal (1 subgoal):\n 1. dom (fst (netgmap sr (SubnetS n1 n2))) = net_ips (SubnetS n1 n2)", "."], ["proof (state)\nthis:\n  dom (fst (netgmap sr (SubnetS n1 n2))) = net_ips (SubnetS n1 n2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma netgmap_pair_dom [elim]:\n  obtains \\<sigma> \\<zeta> where \"netgmap sr n = (\\<sigma>, \\<zeta>)\"\n                and \"dom \\<sigma> = net_ips n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<zeta>.\n        \\<lbrakk>netgmap sr n = (\\<sigma>, \\<zeta>);\n         dom \\<sigma> = net_ips n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis dom_fst_netgmap surjective_pairing)"], ["", "lemma net_ips_netgmap [simp]:\n  \"net_ips (snd (netgmap sr s)) = net_ips s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. net_ips (snd (netgmap sr s)) = net_ips s", "proof (induction s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3.\n       net_ips (snd (netgmap sr (NodeS x1 x2 x3))) =\n       net_ips (NodeS x1 x2 x3)\n 2. \\<And>s1 s2.\n       \\<lbrakk>net_ips (snd (netgmap sr s1)) = net_ips s1;\n        net_ips (snd (netgmap sr s2)) = net_ips s2\\<rbrakk>\n       \\<Longrightarrow> net_ips (snd (netgmap sr (SubnetS s1 s2))) =\n                         net_ips (SubnetS s1 s2)", "fix s1 s2"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3.\n       net_ips (snd (netgmap sr (NodeS x1 x2 x3))) =\n       net_ips (NodeS x1 x2 x3)\n 2. \\<And>s1 s2.\n       \\<lbrakk>net_ips (snd (netgmap sr s1)) = net_ips s1;\n        net_ips (snd (netgmap sr s2)) = net_ips s2\\<rbrakk>\n       \\<Longrightarrow> net_ips (snd (netgmap sr (SubnetS s1 s2))) =\n                         net_ips (SubnetS s1 s2)", "assume \"net_ips (snd (netgmap sr s1)) = net_ips s1\"\n       and \"net_ips (snd (netgmap sr s2)) = net_ips s2\""], ["proof (state)\nthis:\n  net_ips (snd (netgmap sr s1)) = net_ips s1\n  net_ips (snd (netgmap sr s2)) = net_ips s2\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3.\n       net_ips (snd (netgmap sr (NodeS x1 x2 x3))) =\n       net_ips (NodeS x1 x2 x3)\n 2. \\<And>s1 s2.\n       \\<lbrakk>net_ips (snd (netgmap sr s1)) = net_ips s1;\n        net_ips (snd (netgmap sr s2)) = net_ips s2\\<rbrakk>\n       \\<Longrightarrow> net_ips (snd (netgmap sr (SubnetS s1 s2))) =\n                         net_ips (SubnetS s1 s2)", "thus \"net_ips (snd (netgmap sr (SubnetS s1 s2))) = net_ips (SubnetS s1 s2)\""], ["proof (prove)\nusing this:\n  net_ips (snd (netgmap sr s1)) = net_ips s1\n  net_ips (snd (netgmap sr s2)) = net_ips s2\n\ngoal (1 subgoal):\n 1. net_ips (snd (netgmap sr (SubnetS s1 s2))) = net_ips (SubnetS s1 s2)", "by (cases \"netgmap sr s1\", cases \"netgmap sr s2\") auto"], ["proof (state)\nthis:\n  net_ips (snd (netgmap sr (SubnetS s1 s2))) = net_ips (SubnetS s1 s2)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 x3.\n       net_ips (snd (netgmap sr (NodeS x1 x2 x3))) =\n       net_ips (NodeS x1 x2 x3)", "qed simp"], ["", "lemma some_the_fst_netgmap:\n  assumes \"i \\<in> net_ips s\"\n    shows \"Some (the (fst (netgmap sr s) i)) = fst (netgmap sr s) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (the (fst (netgmap sr s) i)) = fst (netgmap sr s) i", "using assms"], ["proof (prove)\nusing this:\n  i \\<in> net_ips s\n\ngoal (1 subgoal):\n 1. Some (the (fst (netgmap sr s) i)) = fst (netgmap sr s) i", "by (metis domIff dom_fst_netgmap option.collapse)"], ["", "lemma fst_netgmap_none [simp]:\n  assumes \"i \\<notin> net_ips s\"\n    shows \"fst (netgmap sr s) i = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (netgmap sr s) i = None", "using assms"], ["proof (prove)\nusing this:\n  i \\<notin> net_ips s\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s) i = None", "by (metis domIff dom_fst_netgmap)"], ["", "lemma fst_netgmap_subnet [simp]:\n  \"fst (case netgmap sr s1 of (\\<sigma>\\<^sub>1, ss) \\<Rightarrow>\n        case netgmap sr s2 of (\\<sigma>\\<^sub>2, tt) \\<Rightarrow>\n        (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2, SubnetS ss tt)) = (fst (netgmap sr s1) ++ fst (netgmap sr s2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (case netgmap sr s1 of\n         (\\<sigma>\\<^sub>1, ss) \\<Rightarrow>\n           case netgmap sr s2 of\n           (\\<sigma>\\<^sub>2, tt) \\<Rightarrow>\n             (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2, SubnetS ss tt)) =\n    fst (netgmap sr s1) ++ fst (netgmap sr s2)", "by (metis (mono_tags) fst_conv netgmap_pair_dom split_conv)"], ["", "lemma snd_netgmap_subnet [simp]:\n  \"snd (case netgmap sr s1 of (\\<sigma>\\<^sub>1, ss) \\<Rightarrow>\n        case netgmap sr s2 of (\\<sigma>\\<^sub>2, tt) \\<Rightarrow>\n        (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2, SubnetS ss tt)) = (SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (case netgmap sr s1 of\n         (\\<sigma>\\<^sub>1, ss) \\<Rightarrow>\n           case netgmap sr s2 of\n           (\\<sigma>\\<^sub>2, tt) \\<Rightarrow>\n             (\\<sigma>\\<^sub>1 ++ \\<sigma>\\<^sub>2, SubnetS ss tt)) =\n    SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))", "by (metis (lifting, no_types) Pair_inject split_beta' surjective_pairing)"], ["", "lemma fst_netgmap_not_none [simp]:\n  assumes \"i \\<in> net_ips s\"\n    shows \"fst (netgmap sr s) i \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (netgmap sr s) i \\<noteq> None", "using assms"], ["proof (prove)\nusing this:\n  i \\<in> net_ips s\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s) i \\<noteq> None", "by (induction s) auto"], ["", "lemma netgmap_netgmap_not_rhs [simp]:\n  assumes \"i \\<notin> net_ips s2\"\n    shows \"(fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = (fst (netgmap sr s1)) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = fst (netgmap sr s1) i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = fst (netgmap sr s1) i", "from assms(1)"], ["proof (chain)\npicking this:\n  i \\<notin> net_ips s2", "have \"i \\<notin> dom (fst (netgmap sr s2))\""], ["proof (prove)\nusing this:\n  i \\<notin> net_ips s2\n\ngoal (1 subgoal):\n 1. i \\<notin> dom (fst (netgmap sr s2))", "by simp"], ["proof (state)\nthis:\n  i \\<notin> dom (fst (netgmap sr s2))\n\ngoal (1 subgoal):\n 1. (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = fst (netgmap sr s1) i", "thus ?thesis"], ["proof (prove)\nusing this:\n  i \\<notin> dom (fst (netgmap sr s2))\n\ngoal (1 subgoal):\n 1. (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = fst (netgmap sr s1) i", "by (simp add: map_add_dom_app_simps)"], ["proof (state)\nthis:\n  (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = fst (netgmap sr s1) i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma netgmap_netgmap_rhs [simp]:\n  assumes \"i \\<in> net_ips s2\"\n    shows \"(fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = (fst (netgmap sr s2)) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = fst (netgmap sr s2) i", "using assms"], ["proof (prove)\nusing this:\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = fst (netgmap sr s2) i", "by (simp add: map_add_dom_app_simps)"], ["", "lemma netgmap_netmask_subnets [elim]:\n  assumes \"netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\"\n      and \"netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\"\n    shows \"fst (netgmap sr (SubnetS s1 s2))\n            = fst (netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (netgmap sr (SubnetS s1 s2)) =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       fst (netgmap sr (SubnetS s1 s2)) x =\n       fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n             (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n        x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       fst (netgmap sr (SubnetS s1 s2)) x =\n       fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n             (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n        x", "have \"i \\<in> net_tree_ips n1 \\<or> i \\<in> net_tree_ips n2 \\<or> (i\\<notin>net_tree_ips n1 \\<union> net_tree_ips n2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips n1 \\<or>\n    i \\<in> net_tree_ips n2 \\<or>\n    i \\<notin> net_tree_ips n1 \\<union> net_tree_ips n2", "by auto"], ["proof (state)\nthis:\n  i \\<in> net_tree_ips n1 \\<or>\n  i \\<in> net_tree_ips n2 \\<or>\n  i \\<notin> net_tree_ips n1 \\<union> net_tree_ips n2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       fst (netgmap sr (SubnetS s1 s2)) x =\n       fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n             (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n        x", "thus \"fst (netgmap sr (SubnetS s1 s2)) i\n            = fst (netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr (SubnetS s1 s2)))) i\""], ["proof (prove)\nusing this:\n  i \\<in> net_tree_ips n1 \\<or>\n  i \\<in> net_tree_ips n2 \\<or>\n  i \\<notin> net_tree_ips n1 \\<union> net_tree_ips n2\n\ngoal (1 subgoal):\n 1. fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i", "proof (elim disjE)"], ["proof (state)\ngoal (3 subgoals):\n 1. i \\<in> net_tree_ips n1 \\<Longrightarrow>\n    fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i\n 2. i \\<in> net_tree_ips n2 \\<Longrightarrow>\n    fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i\n 3. i \\<notin> net_tree_ips n1 \\<union> net_tree_ips n2 \\<Longrightarrow>\n    fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i", "assume \"i \\<in> net_tree_ips n1\""], ["proof (state)\nthis:\n  i \\<in> net_tree_ips n1\n\ngoal (3 subgoals):\n 1. i \\<in> net_tree_ips n1 \\<Longrightarrow>\n    fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i\n 2. i \\<in> net_tree_ips n2 \\<Longrightarrow>\n    fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i\n 3. i \\<notin> net_tree_ips n1 \\<union> net_tree_ips n2 \\<Longrightarrow>\n    fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i", "with \\<open>netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\\<close>\n           \\<open>netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  i \\<in> net_tree_ips n1", "show ?thesis"], ["proof (prove)\nusing this:\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  i \\<in> net_tree_ips n1\n\ngoal (1 subgoal):\n 1. fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i", "by (cases \"netgmap sr s1\", cases \"netgmap sr s2\", clarsimp)\n             (metis (lifting, mono_tags) map_add_Some_iff)"], ["proof (state)\nthis:\n  fst (netgmap sr (SubnetS s1 s2)) i =\n  fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n        (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n   i\n\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips n2 \\<Longrightarrow>\n    fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i\n 2. i \\<notin> net_tree_ips n1 \\<union> net_tree_ips n2 \\<Longrightarrow>\n    fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips n2 \\<Longrightarrow>\n    fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i\n 2. i \\<notin> net_tree_ips n1 \\<union> net_tree_ips n2 \\<Longrightarrow>\n    fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i", "assume \"i \\<in> net_tree_ips n2\""], ["proof (state)\nthis:\n  i \\<in> net_tree_ips n2\n\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips n2 \\<Longrightarrow>\n    fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i\n 2. i \\<notin> net_tree_ips n1 \\<union> net_tree_ips n2 \\<Longrightarrow>\n    fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i", "with \\<open>netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  i \\<in> net_tree_ips n2", "show ?thesis"], ["proof (prove)\nusing this:\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  i \\<in> net_tree_ips n2\n\ngoal (1 subgoal):\n 1. fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i", "by simp (metis (lifting, mono_tags) fst_conv map_add_find_right)"], ["proof (state)\nthis:\n  fst (netgmap sr (SubnetS s1 s2)) i =\n  fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n        (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n   i\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips n1 \\<union> net_tree_ips n2 \\<Longrightarrow>\n    fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips n1 \\<union> net_tree_ips n2 \\<Longrightarrow>\n    fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i", "assume \"i\\<notin>net_tree_ips n1 \\<union> net_tree_ips n2\""], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips n1 \\<union> net_tree_ips n2\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips n1 \\<union> net_tree_ips n2 \\<Longrightarrow>\n    fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i", "with \\<open>netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\\<close>\n           \\<open>netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  i \\<notin> net_tree_ips n1 \\<union> net_tree_ips n2", "show ?thesis"], ["proof (prove)\nusing this:\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  i \\<notin> net_tree_ips n1 \\<union> net_tree_ips n2\n\ngoal (1 subgoal):\n 1. fst (netgmap sr (SubnetS s1 s2)) i =\n    fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n          (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n     i", "by simp (metis (lifting, mono_tags) fst_conv)"], ["proof (state)\nthis:\n  fst (netgmap sr (SubnetS s1 s2)) i =\n  fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n        (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n   i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (netgmap sr (SubnetS s1 s2)) i =\n  fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n        (\\<sigma>, snd (netgmap sr (SubnetS s1 s2))))\n   i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma netgmap_netmask_subnets' [elim]:\n  assumes \"netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\"\n      and \"netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\"\n      and \"s = SubnetS s1 s2\"\n    shows \"netgmap sr s = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netgmap sr s =\n    netmask (net_tree_ips (n1 \\<parallel> n2))\n     (\\<sigma>, snd (netgmap sr s))", "by (simp only: assms(3))\n     (rule prod_eqI [OF netgmap_netmask_subnets [OF assms(1-2)]], simp)"], ["", "lemma netgmap_subnet_split1:\n  assumes \"netgmap sr (SubnetS s1 s2) = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\"\n      and \"net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\"\n      and \"net_ips s1 = net_tree_ips n1\"\n      and \"net_ips s2 = net_tree_ips n2\"\n    shows \"netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netgmap sr s1 =\n    netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))", "proof (rule prod_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. fst (netgmap sr s1) =\n    fst (netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1)))\n 2. snd (netgmap sr s1) =\n    snd (netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1)))", "show \"fst (netgmap sr s1) = fst (netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (netgmap sr s1) =\n    fst (netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1)))", "proof (rule ext, simp, intro conjI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = Some (\\<sigma> x)\n 2. \\<And>x.\n       x \\<notin> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = None", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = Some (\\<sigma> x)\n 2. \\<And>x.\n       x \\<notin> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = None", "assume \"i\\<in>net_tree_ips n1\""], ["proof (state)\nthis:\n  i \\<in> net_tree_ips n1\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = Some (\\<sigma> x)\n 2. \\<And>x.\n       x \\<notin> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = None", "with \\<open>net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\\<close>"], ["proof (chain)\npicking this:\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  i \\<in> net_tree_ips n1", "have \"i\\<notin>net_tree_ips n2\""], ["proof (prove)\nusing this:\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  i \\<in> net_tree_ips n1\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips n2", "by auto"], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips n2\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = Some (\\<sigma> x)\n 2. \\<And>x.\n       x \\<notin> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = None", "from assms(1) [simplified prod_eq_iff]"], ["proof (chain)\npicking this:\n  fst (netgmap sr (SubnetS s1 s2)) =\n  fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n        (\\<sigma>, \\<zeta>)) \\<and>\n  snd (netgmap sr (SubnetS s1 s2)) =\n  snd (netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>))", "have \"(fst (netgmap sr s1) ++ fst (netgmap sr s2)) i =\n                 (if i \\<in> net_tree_ips n1 \\<or> i \\<in> net_tree_ips n2 then Some (\\<sigma> i) else None)\""], ["proof (prove)\nusing this:\n  fst (netgmap sr (SubnetS s1 s2)) =\n  fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n        (\\<sigma>, \\<zeta>)) \\<and>\n  snd (netgmap sr (SubnetS s1 s2)) =\n  snd (netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>))\n\ngoal (1 subgoal):\n 1. (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i =\n    (if i \\<in> net_tree_ips n1 \\<or> i \\<in> net_tree_ips n2\n     then Some (\\<sigma> i) else None)", "by simp"], ["proof (state)\nthis:\n  (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i =\n  (if i \\<in> net_tree_ips n1 \\<or> i \\<in> net_tree_ips n2\n   then Some (\\<sigma> i) else None)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = Some (\\<sigma> x)\n 2. \\<And>x.\n       x \\<notin> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = None", "also"], ["proof (state)\nthis:\n  (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i =\n  (if i \\<in> net_tree_ips n1 \\<or> i \\<in> net_tree_ips n2\n   then Some (\\<sigma> i) else None)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = Some (\\<sigma> x)\n 2. \\<And>x.\n       x \\<notin> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = None", "from \\<open>i\\<notin>net_tree_ips n2\\<close> and \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  i \\<notin> net_tree_ips n2\n  net_ips s2 = net_tree_ips n2", "have \"(fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = fst (netgmap sr s1) i\""], ["proof (prove)\nusing this:\n  i \\<notin> net_tree_ips n2\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = fst (netgmap sr s1) i", "by (metis dom_fst_netgmap map_add_dom_app_simps(3))"], ["proof (state)\nthis:\n  (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = fst (netgmap sr s1) i\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = Some (\\<sigma> x)\n 2. \\<And>x.\n       x \\<notin> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = None", "finally"], ["proof (chain)\npicking this:\n  fst (netgmap sr s1) i =\n  (if i \\<in> net_tree_ips n1 \\<or> i \\<in> net_tree_ips n2\n   then Some (\\<sigma> i) else None)", "show \"fst (netgmap sr s1) i = Some (\\<sigma> i)\""], ["proof (prove)\nusing this:\n  fst (netgmap sr s1) i =\n  (if i \\<in> net_tree_ips n1 \\<or> i \\<in> net_tree_ips n2\n   then Some (\\<sigma> i) else None)\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s1) i = Some (\\<sigma> i)", "using \\<open>i\\<in>net_tree_ips n1\\<close>"], ["proof (prove)\nusing this:\n  fst (netgmap sr s1) i =\n  (if i \\<in> net_tree_ips n1 \\<or> i \\<in> net_tree_ips n2\n   then Some (\\<sigma> i) else None)\n  i \\<in> net_tree_ips n1\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s1) i = Some (\\<sigma> i)", "by simp"], ["proof (state)\nthis:\n  fst (netgmap sr s1) i = Some (\\<sigma> i)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<notin> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = None", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<notin> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = None", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<notin> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = None", "assume \"i \\<notin> net_tree_ips n1\""], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips n1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<notin> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = None", "with \\<open>net_ips s1 = net_tree_ips n1\\<close>"], ["proof (chain)\npicking this:\n  net_ips s1 = net_tree_ips n1\n  i \\<notin> net_tree_ips n1", "have \"i \\<notin> net_ips s1\""], ["proof (prove)\nusing this:\n  net_ips s1 = net_tree_ips n1\n  i \\<notin> net_tree_ips n1\n\ngoal (1 subgoal):\n 1. i \\<notin> net_ips s1", "by simp"], ["proof (state)\nthis:\n  i \\<notin> net_ips s1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<notin> net_tree_ips n1 \\<Longrightarrow>\n       fst (netgmap sr s1) x = None", "thus \"fst (netgmap sr s1) i = None\""], ["proof (prove)\nusing this:\n  i \\<notin> net_ips s1\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s1) i = None", "by simp"], ["proof (state)\nthis:\n  fst (netgmap sr s1) i = None\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (netgmap sr s1) =\n  fst (netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1)))\n\ngoal (1 subgoal):\n 1. snd (netgmap sr s1) =\n    snd (netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1)))", "qed simp"], ["", "lemma netgmap_subnet_split2:\n  assumes \"netgmap sr (SubnetS s1 s2) = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\"\n      and \"net_ips s1 = net_tree_ips n1\"\n      and \"net_ips s2 = net_tree_ips n2\"\n    shows \"netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netgmap sr s2 =\n    netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))", "proof (rule prod_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. fst (netgmap sr s2) =\n    fst (netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2)))\n 2. snd (netgmap sr s2) =\n    snd (netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2)))", "show \"fst (netgmap sr s2) = fst (netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (netgmap sr s2) =\n    fst (netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2)))", "proof (rule ext, simp, intro conjI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = Some (\\<sigma> x)\n 2. \\<And>x.\n       x \\<notin> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = None", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = Some (\\<sigma> x)\n 2. \\<And>x.\n       x \\<notin> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = None", "assume \"i\\<in>net_tree_ips n2\""], ["proof (state)\nthis:\n  i \\<in> net_tree_ips n2\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = Some (\\<sigma> x)\n 2. \\<And>x.\n       x \\<notin> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = None", "from assms(1) [simplified prod_eq_iff]"], ["proof (chain)\npicking this:\n  fst (netgmap sr (SubnetS s1 s2)) =\n  fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n        (\\<sigma>, \\<zeta>)) \\<and>\n  snd (netgmap sr (SubnetS s1 s2)) =\n  snd (netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>))", "have \"(fst (netgmap sr s1) ++ fst (netgmap sr s2)) i =\n                 (if i \\<in> net_tree_ips n1 \\<or> i \\<in> net_tree_ips n2 then Some (\\<sigma> i) else None)\""], ["proof (prove)\nusing this:\n  fst (netgmap sr (SubnetS s1 s2)) =\n  fst (netmask (net_tree_ips (n1 \\<parallel> n2))\n        (\\<sigma>, \\<zeta>)) \\<and>\n  snd (netgmap sr (SubnetS s1 s2)) =\n  snd (netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>))\n\ngoal (1 subgoal):\n 1. (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i =\n    (if i \\<in> net_tree_ips n1 \\<or> i \\<in> net_tree_ips n2\n     then Some (\\<sigma> i) else None)", "by simp"], ["proof (state)\nthis:\n  (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i =\n  (if i \\<in> net_tree_ips n1 \\<or> i \\<in> net_tree_ips n2\n   then Some (\\<sigma> i) else None)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = Some (\\<sigma> x)\n 2. \\<And>x.\n       x \\<notin> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = None", "also"], ["proof (state)\nthis:\n  (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i =\n  (if i \\<in> net_tree_ips n1 \\<or> i \\<in> net_tree_ips n2\n   then Some (\\<sigma> i) else None)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = Some (\\<sigma> x)\n 2. \\<And>x.\n       x \\<notin> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = None", "from \\<open>i\\<in>net_tree_ips n2\\<close> and \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> net_tree_ips n2\n  net_ips s2 = net_tree_ips n2", "have \"(fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = fst (netgmap sr s2) i\""], ["proof (prove)\nusing this:\n  i \\<in> net_tree_ips n2\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = fst (netgmap sr s2) i", "by (metis dom_fst_netgmap map_add_dom_app_simps(1))"], ["proof (state)\nthis:\n  (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i = fst (netgmap sr s2) i\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = Some (\\<sigma> x)\n 2. \\<And>x.\n       x \\<notin> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = None", "finally"], ["proof (chain)\npicking this:\n  fst (netgmap sr s2) i =\n  (if i \\<in> net_tree_ips n1 \\<or> i \\<in> net_tree_ips n2\n   then Some (\\<sigma> i) else None)", "show \"fst (netgmap sr s2) i = Some (\\<sigma> i)\""], ["proof (prove)\nusing this:\n  fst (netgmap sr s2) i =\n  (if i \\<in> net_tree_ips n1 \\<or> i \\<in> net_tree_ips n2\n   then Some (\\<sigma> i) else None)\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s2) i = Some (\\<sigma> i)", "using \\<open>i\\<in>net_tree_ips n2\\<close>"], ["proof (prove)\nusing this:\n  fst (netgmap sr s2) i =\n  (if i \\<in> net_tree_ips n1 \\<or> i \\<in> net_tree_ips n2\n   then Some (\\<sigma> i) else None)\n  i \\<in> net_tree_ips n2\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s2) i = Some (\\<sigma> i)", "by simp"], ["proof (state)\nthis:\n  fst (netgmap sr s2) i = Some (\\<sigma> i)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<notin> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = None", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<notin> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = None", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<notin> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = None", "assume \"i \\<notin> net_tree_ips n2\""], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips n2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<notin> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = None", "with \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  net_ips s2 = net_tree_ips n2\n  i \\<notin> net_tree_ips n2", "have \"i \\<notin> net_ips s2\""], ["proof (prove)\nusing this:\n  net_ips s2 = net_tree_ips n2\n  i \\<notin> net_tree_ips n2\n\ngoal (1 subgoal):\n 1. i \\<notin> net_ips s2", "by simp"], ["proof (state)\nthis:\n  i \\<notin> net_ips s2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<notin> net_tree_ips n2 \\<Longrightarrow>\n       fst (netgmap sr s2) x = None", "thus \"fst (netgmap sr s2) i = None\""], ["proof (prove)\nusing this:\n  i \\<notin> net_ips s2\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s2) i = None", "by simp"], ["proof (state)\nthis:\n  fst (netgmap sr s2) i = None\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (netgmap sr s2) =\n  fst (netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2)))\n\ngoal (1 subgoal):\n 1. snd (netgmap sr s2) =\n    snd (netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2)))", "qed simp"], ["", "lemma netmap_fst_netgmap_rel:\n  shows \"(\\<lambda>i. map_option (fst o sr) (netmap s i)) = fst (netgmap sr s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i. map_option (fst \\<circ> sr) (netmap s i)) =\n    fst (netgmap sr s)", "proof (induction s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3.\n       (\\<lambda>i.\n           map_option (fst \\<circ> sr) (netmap (NodeS x1 x2 x3) i)) =\n       fst (netgmap sr (NodeS x1 x2 x3))\n 2. \\<And>s1 s2.\n       \\<lbrakk>(\\<lambda>i. map_option (fst \\<circ> sr) (netmap s1 i)) =\n                fst (netgmap sr s1);\n        (\\<lambda>i. map_option (fst \\<circ> sr) (netmap s2 i)) =\n        fst (netgmap sr s2)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>i.\n                             map_option (fst \\<circ> sr)\n                              (netmap (SubnetS s1 s2) i)) =\n                         fst (netgmap sr (SubnetS s1 s2))", "fix ii s R"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3.\n       (\\<lambda>i.\n           map_option (fst \\<circ> sr) (netmap (NodeS x1 x2 x3) i)) =\n       fst (netgmap sr (NodeS x1 x2 x3))\n 2. \\<And>s1 s2.\n       \\<lbrakk>(\\<lambda>i. map_option (fst \\<circ> sr) (netmap s1 i)) =\n                fst (netgmap sr s1);\n        (\\<lambda>i. map_option (fst \\<circ> sr) (netmap s2 i)) =\n        fst (netgmap sr s2)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>i.\n                             map_option (fst \\<circ> sr)\n                              (netmap (SubnetS s1 s2) i)) =\n                         fst (netgmap sr (SubnetS s1 s2))", "show \"(\\<lambda>i. map_option (fst \\<circ> sr) (netmap (NodeS ii s R) i)) = fst (netgmap sr (NodeS ii s R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i. map_option (fst \\<circ> sr) (netmap (NodeS ii s R) i)) =\n    fst (netgmap sr (NodeS ii s R))", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>i. map_option (fst \\<circ> sr) (netmap (NodeS ii s R) i)) =\n  fst (netgmap sr (NodeS ii s R))\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>(\\<lambda>i. map_option (fst \\<circ> sr) (netmap s1 i)) =\n                fst (netgmap sr s1);\n        (\\<lambda>i. map_option (fst \\<circ> sr) (netmap s2 i)) =\n        fst (netgmap sr s2)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>i.\n                             map_option (fst \\<circ> sr)\n                              (netmap (SubnetS s1 s2) i)) =\n                         fst (netgmap sr (SubnetS s1 s2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>(\\<lambda>i. map_option (fst \\<circ> sr) (netmap s1 i)) =\n                fst (netgmap sr s1);\n        (\\<lambda>i. map_option (fst \\<circ> sr) (netmap s2 i)) =\n        fst (netgmap sr s2)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>i.\n                             map_option (fst \\<circ> sr)\n                              (netmap (SubnetS s1 s2) i)) =\n                         fst (netgmap sr (SubnetS s1 s2))", "fix s1 s2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>(\\<lambda>i. map_option (fst \\<circ> sr) (netmap s1 i)) =\n                fst (netgmap sr s1);\n        (\\<lambda>i. map_option (fst \\<circ> sr) (netmap s2 i)) =\n        fst (netgmap sr s2)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>i.\n                             map_option (fst \\<circ> sr)\n                              (netmap (SubnetS s1 s2) i)) =\n                         fst (netgmap sr (SubnetS s1 s2))", "assume a1: \"(\\<lambda>i. map_option (fst \\<circ> sr) (netmap s1 i)) = fst (netgmap sr s1)\"\n       and a2: \"(\\<lambda>i. map_option (fst \\<circ> sr) (netmap s2 i)) = fst (netgmap sr s2)\""], ["proof (state)\nthis:\n  (\\<lambda>i. map_option (fst \\<circ> sr) (netmap s1 i)) =\n  fst (netgmap sr s1)\n  (\\<lambda>i. map_option (fst \\<circ> sr) (netmap s2 i)) =\n  fst (netgmap sr s2)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>(\\<lambda>i. map_option (fst \\<circ> sr) (netmap s1 i)) =\n                fst (netgmap sr s1);\n        (\\<lambda>i. map_option (fst \\<circ> sr) (netmap s2 i)) =\n        fst (netgmap sr s2)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>i.\n                             map_option (fst \\<circ> sr)\n                              (netmap (SubnetS s1 s2) i)) =\n                         fst (netgmap sr (SubnetS s1 s2))", "show \"(\\<lambda>i. map_option (fst \\<circ> sr) (netmap (SubnetS s1 s2) i)) = fst (netgmap sr (SubnetS s1 s2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i. map_option (fst \\<circ> sr) (netmap (SubnetS s1 s2) i)) =\n    fst (netgmap sr (SubnetS s1 s2))", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       map_option (fst \\<circ> sr) (netmap (SubnetS s1 s2) i) =\n       fst (netgmap sr (SubnetS s1 s2)) i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       map_option (fst \\<circ> sr) (netmap (SubnetS s1 s2) i) =\n       fst (netgmap sr (SubnetS s1 s2)) i", "from a1 a2"], ["proof (chain)\npicking this:\n  (\\<lambda>i. map_option (fst \\<circ> sr) (netmap s1 i)) =\n  fst (netgmap sr s1)\n  (\\<lambda>i. map_option (fst \\<circ> sr) (netmap s2 i)) =\n  fst (netgmap sr s2)", "have \"map_option (fst \\<circ> sr) ((netmap s1 ++ netmap s2) i)\n                                    = (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i\""], ["proof (prove)\nusing this:\n  (\\<lambda>i. map_option (fst \\<circ> sr) (netmap s1 i)) =\n  fst (netgmap sr s1)\n  (\\<lambda>i. map_option (fst \\<circ> sr) (netmap s2 i)) =\n  fst (netgmap sr s2)\n\ngoal (1 subgoal):\n 1. map_option (fst \\<circ> sr) ((netmap s1 ++ netmap s2) i) =\n    (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i", "by (metis fst_conv map_add_dom_app_simps(1) map_add_dom_app_simps(3)\n                  net_ips_is_dom_netmap netgmap_pair_dom)"], ["proof (state)\nthis:\n  map_option (fst \\<circ> sr) ((netmap s1 ++ netmap s2) i) =\n  (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       map_option (fst \\<circ> sr) (netmap (SubnetS s1 s2) i) =\n       fst (netgmap sr (SubnetS s1 s2)) i", "thus \"map_option (fst \\<circ> sr) (netmap (SubnetS s1 s2) i) = fst (netgmap sr (SubnetS s1 s2)) i\""], ["proof (prove)\nusing this:\n  map_option (fst \\<circ> sr) ((netmap s1 ++ netmap s2) i) =\n  (fst (netgmap sr s1) ++ fst (netgmap sr s2)) i\n\ngoal (1 subgoal):\n 1. map_option (fst \\<circ> sr) (netmap (SubnetS s1 s2) i) =\n    fst (netgmap sr (SubnetS s1 s2)) i", "by simp"], ["proof (state)\nthis:\n  map_option (fst \\<circ> sr) (netmap (SubnetS s1 s2) i) =\n  fst (netgmap sr (SubnetS s1 s2)) i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>i. map_option (fst \\<circ> sr) (netmap (SubnetS s1 s2) i)) =\n  fst (netgmap sr (SubnetS s1 s2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma netmap_is_fst_netgmap:\n  assumes \"netmap s' = netmap s\"\n    shows \"fst (netgmap sr s') = fst (netgmap sr s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (netgmap sr s') = fst (netgmap sr s)", "using assms"], ["proof (prove)\nusing this:\n  netmap s' = netmap s\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s') = fst (netgmap sr s)", "by (metis netmap_fst_netgmap_rel)"], ["", "lemma netmap_is_fst_netgmap':\n  assumes \"netmap s' i = netmap s i\"\n    shows \"fst (netgmap sr s') i = fst (netgmap sr s) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (netgmap sr s') i = fst (netgmap sr s) i", "using assms"], ["proof (prove)\nusing this:\n  netmap s' i = netmap s i\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s') i = fst (netgmap sr s) i", "by (metis netmap_fst_netgmap_rel)"], ["", "lemma fst_netgmap_pair_fst [simp]:\n  \"fst (netgmap (\\<lambda>(p, q). (fst p, snd p, q)) s) = fst (netgmap fst s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (netgmap (\\<lambda>(p, q). (fst p, snd p, q)) s) =\n    fst (netgmap fst s)", "by (induction s) auto"], ["", "text \\<open>Introduce streamlined alternatives to netgmap to simplify certain property\n        statements and thus make them easier to understand and to present.\\<close>"], ["", "fun netlift :: \"('s \\<Rightarrow> 'g \\<times> 'l) \\<Rightarrow> 's net_state \\<Rightarrow> (nat \\<Rightarrow> 'g option)\"\n  where\n    \"netlift sr (NodeS i s R) = [i \\<mapsto> fst (sr s)]\"\n  | \"netlift sr (SubnetS s t) = (netlift sr s) ++ (netlift sr t)\""], ["", "lemma fst_netgmap_netlift:\n  \"fst (netgmap sr s) = netlift sr s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (netgmap sr s) = netlift sr s", "by (induction s) simp_all"], ["", "fun netliftl :: \"('s \\<Rightarrow> 'g \\<times> 'l) \\<Rightarrow> 's net_state \\<Rightarrow> 'l net_state\"\n  where\n    \"netliftl sr (NodeS i s R) = NodeS i (snd (sr s)) R\"\n  | \"netliftl sr (SubnetS s t) = SubnetS (netliftl sr s) (netliftl sr t)\""], ["", "lemma snd_netgmap_netliftl:\n  \"snd (netgmap sr s) = netliftl sr s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (netgmap sr s) = netliftl sr s", "by (induction s) simp_all"], ["", "lemma netgmap_netlift_netliftl: \"netgmap sr s = (netlift sr s, netliftl sr s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netgmap sr s = (netlift sr s, netliftl sr s)", "by rule (simp_all add: fst_netgmap_netlift snd_netgmap_netliftl)"], ["", "end"]]}