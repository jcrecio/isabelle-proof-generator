{"file_name": "/home/qj213/afp-2021-10-22/thys/AWN/OClosed_Lifting.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AWN", "problem_names": ["lemma trans_fst_oclosed_fst1 [dest]:\n  \"(s, connect(i, i'), s') \\<in> ocnet_sos (trans p) \\<Longrightarrow> (s, connect(i, i'), s') \\<in> trans p\"", "lemma trans_fst_oclosed_fst2 [dest]:\n  \"(s, disconnect(i, i'), s') \\<in> ocnet_sos (trans p) \\<Longrightarrow> (s, disconnect(i, i'), s') \\<in> trans p\"", "lemma trans_fst_oclosed_fst3 [dest]:\n  \"(s, i:deliver(d), s') \\<in> ocnet_sos (trans p) \\<Longrightarrow>      (s, i:deliver(d), s') \\<in> trans p\"", "lemma oclosed_oreachable_inclosed:\n  assumes \"(\\<sigma>, \\<zeta>) \\<in> oreachable (oclosed (opnet np p)) (\\<lambda>_ _ _. True) U\"\n    shows \"(\\<sigma>, \\<zeta>) \\<in> oreachable (opnet np p) (otherwith ((=)) (net_tree_ips p) inoclosed) U\"\n    (is \"_ \\<in> oreachable _ ?owS _\")", "lemma oclosed_oreachable_oreachable [elim]:\n  assumes \"(\\<sigma>, \\<zeta>) \\<in> oreachable (oclosed (opnet onp p)) (\\<lambda>_ _ _. True) U\"\n    shows \"(\\<sigma>, \\<zeta>) \\<in> oreachable (opnet onp p) (\\<lambda>_ _ _. True) U\"", "lemma inclosed_closed [intro]:\n  assumes cinv: \"opnet np p \\<Turnstile> (otherwith ((=)) (net_tree_ips p) inoclosed, U \\<rightarrow>) P\"\n    shows \"oclosed (opnet np p) \\<Turnstile> (\\<lambda>_ _ _. True, U \\<rightarrow>) P\""], "translations": [["", "lemma trans_fst_oclosed_fst1 [dest]:\n  \"(s, connect(i, i'), s') \\<in> ocnet_sos (trans p) \\<Longrightarrow> (s, connect(i, i'), s') \\<in> trans p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, connect(i, i'), s')\n    \\<in> ocnet_sos (automaton.trans p) \\<Longrightarrow>\n    (s, connect(i, i'), s') \\<in> automaton.trans p", "by (metis prod.exhaust oconnect_completeTE)"], ["", "lemma trans_fst_oclosed_fst2 [dest]:\n  \"(s, disconnect(i, i'), s') \\<in> ocnet_sos (trans p) \\<Longrightarrow> (s, disconnect(i, i'), s') \\<in> trans p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, disconnect(i, i'), s')\n    \\<in> ocnet_sos (automaton.trans p) \\<Longrightarrow>\n    (s, disconnect(i, i'), s') \\<in> automaton.trans p", "by (metis prod.exhaust odisconnect_completeTE)"], ["", "lemma trans_fst_oclosed_fst3 [dest]:\n  \"(s, i:deliver(d), s') \\<in> ocnet_sos (trans p) \\<Longrightarrow>      (s, i:deliver(d), s') \\<in> trans p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, i:deliver(d), s')\n    \\<in> ocnet_sos (automaton.trans p) \\<Longrightarrow>\n    (s, i:deliver(d), s') \\<in> automaton.trans p", "by (metis prod.exhaust odeliver_completeTE)"], ["", "lemma oclosed_oreachable_inclosed:\n  assumes \"(\\<sigma>, \\<zeta>) \\<in> oreachable (oclosed (opnet np p)) (\\<lambda>_ _ _. True) U\"\n    shows \"(\\<sigma>, \\<zeta>) \\<in> oreachable (opnet np p) (otherwith ((=)) (net_tree_ips p) inoclosed) U\"\n    (is \"_ \\<in> oreachable _ ?owS _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed)\n           U", "using assms"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (oclosed (opnet np p)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed)\n           U", "proof (induction rule: oreachable_pair_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> pa.\n       (\\<sigma>, pa) \\<in> init (oclosed (opnet np p)) \\<Longrightarrow>\n       (\\<sigma>, pa)\n       \\<in> oreachable (opnet np p)\n              (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', pa)\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 3. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (oclosed (opnet np p));\n        True\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "fix \\<sigma> \\<zeta>"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> pa.\n       (\\<sigma>, pa) \\<in> init (oclosed (opnet np p)) \\<Longrightarrow>\n       (\\<sigma>, pa)\n       \\<in> oreachable (opnet np p)\n              (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', pa)\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 3. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (oclosed (opnet np p));\n        True\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "assume \"(\\<sigma>, \\<zeta>) \\<in> init (oclosed (opnet np p))\""], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>) \\<in> init (oclosed (opnet np p))\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> pa.\n       (\\<sigma>, pa) \\<in> init (oclosed (opnet np p)) \\<Longrightarrow>\n       (\\<sigma>, pa)\n       \\<in> oreachable (opnet np p)\n              (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', pa)\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 3. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (oclosed (opnet np p));\n        True\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "hence \"(\\<sigma>, \\<zeta>) \\<in> init (opnet np p)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>) \\<in> init (oclosed (opnet np p))\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>) \\<in> init (opnet np p)", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>) \\<in> init (opnet np p)\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> pa.\n       (\\<sigma>, pa) \\<in> init (oclosed (opnet np p)) \\<Longrightarrow>\n       (\\<sigma>, pa)\n       \\<in> oreachable (opnet np p)\n              (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', pa)\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 3. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (oclosed (opnet np p));\n        True\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "thus \"(\\<sigma>, \\<zeta>) \\<in> oreachable (opnet np p) ?owS U\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>) \\<in> init (opnet np p)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed)\n           U", ".."], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed) U\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', pa)\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (oclosed (opnet np p));\n        True\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', pa)\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (oclosed (opnet np p));\n        True\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "fix \\<sigma> \\<zeta> \\<sigma>'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', pa)\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (oclosed (opnet np p));\n        True\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "assume \"(\\<sigma>, \\<zeta>) \\<in> oreachable (opnet np p) ?owS U\"\n       and \"U \\<sigma> \\<sigma>'\""], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed) U\n  U \\<sigma> \\<sigma>'\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> pa \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        U \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', pa)\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (oclosed (opnet np p));\n        True\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "thus \"(\\<sigma>', \\<zeta>) \\<in> oreachable (opnet np p) ?owS U\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed) U\n  U \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>)\n    \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed)\n           U", "by - (rule oreachable_other')"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>)\n  \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed) U\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (oclosed (opnet np p));\n        True\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (oclosed (opnet np p));\n        True\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "fix \\<sigma> \\<zeta> \\<sigma>' \\<zeta>' a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (oclosed (opnet np p));\n        True\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "assume zor: \"(\\<sigma>, \\<zeta>) \\<in> oreachable (opnet np p) ?owS U\"\n       and ztr: \"((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (oclosed (opnet np p))\""], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed) U\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (oclosed (opnet np p))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (oclosed (opnet np p));\n        True\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "from this(1)"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed) U", "have [simp]: \"net_ips \\<zeta> = net_tree_ips p\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed) U\n\ngoal (1 subgoal):\n 1. net_ips \\<zeta> = net_tree_ips p", "by (rule opnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips \\<zeta> = net_tree_ips p\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (oclosed (opnet np p));\n        True\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "from ztr"], ["proof (chain)\npicking this:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (oclosed (opnet np p))", "have \"((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> ocnet_sos (trans (opnet np p))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (oclosed (opnet np p))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n    \\<in> ocnet_sos (automaton.trans (opnet np p))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> ocnet_sos (automaton.trans (opnet np p))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> pa \\<sigma>' p' a.\n       \\<lbrakk>(\\<sigma>, pa)\n                \\<in> oreachable (oclosed (opnet np p))\n                       (\\<lambda>_ _ _. True) U;\n        (\\<sigma>, pa)\n        \\<in> oreachable (opnet np p)\n               (otherwith (=) (net_tree_ips p) inoclosed) U;\n        ((\\<sigma>, pa), a, \\<sigma>', p')\n        \\<in> automaton.trans (oclosed (opnet np p));\n        True\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', p')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "thus \"(\\<sigma>', \\<zeta>') \\<in> oreachable (opnet np p) ?owS U\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> ocnet_sos (automaton.trans (opnet np p))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed)\n           U", "proof cases"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 3. \\<And>R m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, \\<zeta>), R:*cast(m), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 4. \\<lbrakk>a = \\<tau>;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet np p);\n     \\<forall>j.\n        j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n        \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable (opnet np p)\n                             (otherwith (=) (net_tree_ips p) inoclosed) U\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d);\n        ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 6. \\<And>i K d di.\n       \\<lbrakk>a = i:newpkt(d, di);\n        ((\\<sigma>, \\<zeta>), {i}\\<not>K:arrive(newpkt (d, di)), \\<sigma>',\n         \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "fix i K d di"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 3. \\<And>R m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, \\<zeta>), R:*cast(m), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 4. \\<lbrakk>a = \\<tau>;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet np p);\n     \\<forall>j.\n        j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n        \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable (opnet np p)\n                             (otherwith (=) (net_tree_ips p) inoclosed) U\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d);\n        ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 6. \\<And>i K d di.\n       \\<lbrakk>a = i:newpkt(d, di);\n        ((\\<sigma>, \\<zeta>), {i}\\<not>K:arrive(newpkt (d, di)), \\<sigma>',\n         \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "assume \"a = i:newpkt(d, di)\"\n         and tr: \"((\\<sigma>, \\<zeta>), {i}\\<not>K:arrive(msg_class.newpkt (d, di)), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet np p)\"\n         and \"\\<forall>j. j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (state)\nthis:\n  a = i:newpkt(d, di)\n  ((\\<sigma>, \\<zeta>), {i}\\<not>K:arrive(newpkt (d, di)), \\<sigma>',\n   \\<zeta>')\n  \\<in> automaton.trans (opnet np p)\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (6 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 3. \\<And>R m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, \\<zeta>), R:*cast(m), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 4. \\<lbrakk>a = \\<tau>;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet np p);\n     \\<forall>j.\n        j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n        \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable (opnet np p)\n                             (otherwith (=) (net_tree_ips p) inoclosed) U\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d);\n        ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 6. \\<And>i K d di.\n       \\<lbrakk>a = i:newpkt(d, di);\n        ((\\<sigma>, \\<zeta>), {i}\\<not>K:arrive(newpkt (d, di)), \\<sigma>',\n         \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "from this(3)"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "have \"\\<forall>j. j \\<notin> net_tree_ips p \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "using \\<open>net_ips \\<zeta> = net_tree_ips p\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  net_ips \\<zeta> = net_tree_ips p\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "by auto"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (6 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 3. \\<And>R m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, \\<zeta>), R:*cast(m), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 4. \\<lbrakk>a = \\<tau>;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet np p);\n     \\<forall>j.\n        j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n        \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable (opnet np p)\n                             (otherwith (=) (net_tree_ips p) inoclosed) U\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d);\n        ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 6. \\<And>i K d di.\n       \\<lbrakk>a = i:newpkt(d, di);\n        ((\\<sigma>, \\<zeta>), {i}\\<not>K:arrive(newpkt (d, di)), \\<sigma>',\n         \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "hence \"otherwith ((=)) (net_tree_ips p) inoclosed \\<sigma> \\<sigma>' ({i}\\<not>K:arrive(msg_class.newpkt (d, di)))\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. otherwith (=) (net_tree_ips p) inoclosed \\<sigma> \\<sigma>'\n     ({i}\\<not>K:arrive(newpkt (d, di)))", "by auto"], ["proof (state)\nthis:\n  otherwith (=) (net_tree_ips p) inoclosed \\<sigma> \\<sigma>'\n   ({i}\\<not>K:arrive(newpkt (d, di)))\n\ngoal (6 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 3. \\<And>R m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, \\<zeta>), R:*cast(m), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 4. \\<lbrakk>a = \\<tau>;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet np p);\n     \\<forall>j.\n        j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n        \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable (opnet np p)\n                             (otherwith (=) (net_tree_ips p) inoclosed) U\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d);\n        ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 6. \\<And>i K d di.\n       \\<lbrakk>a = i:newpkt(d, di);\n        ((\\<sigma>, \\<zeta>), {i}\\<not>K:arrive(newpkt (d, di)), \\<sigma>',\n         \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "with zor tr"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed) U\n  ((\\<sigma>, \\<zeta>), {i}\\<not>K:arrive(newpkt (d, di)), \\<sigma>',\n   \\<zeta>')\n  \\<in> automaton.trans (opnet np p)\n  otherwith (=) (net_tree_ips p) inoclosed \\<sigma> \\<sigma>'\n   ({i}\\<not>K:arrive(newpkt (d, di)))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed) U\n  ((\\<sigma>, \\<zeta>), {i}\\<not>K:arrive(newpkt (d, di)), \\<sigma>',\n   \\<zeta>')\n  \\<in> automaton.trans (opnet np p)\n  otherwith (=) (net_tree_ips p) inoclosed \\<sigma> \\<sigma>'\n   ({i}\\<not>K:arrive(newpkt (d, di)))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed)\n           U", "by - (rule oreachable_local')"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed) U\n\ngoal (5 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 3. \\<And>R m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, \\<zeta>), R:*cast(m), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 4. \\<lbrakk>a = \\<tau>;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet np p);\n     \\<forall>j.\n        j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n        \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable (opnet np p)\n                             (otherwith (=) (net_tree_ips p) inoclosed) U\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d);\n        ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 3. \\<And>R m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, \\<zeta>), R:*cast(m), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 4. \\<lbrakk>a = \\<tau>;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet np p);\n     \\<forall>j.\n        j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n        \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable (opnet np p)\n                             (otherwith (=) (net_tree_ips p) inoclosed) U\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d);\n        ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "assume \"a = \\<tau>\"\n         and tr: \"((\\<sigma>, \\<zeta>), \\<tau>, (\\<sigma>', \\<zeta>')) \\<in> trans (opnet np p)\"\n         and \"\\<forall>j. j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (state)\nthis:\n  a = \\<tau>\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (opnet np p)\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (5 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 3. \\<And>R m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, \\<zeta>), R:*cast(m), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 4. \\<lbrakk>a = \\<tau>;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet np p);\n     \\<forall>j.\n        j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n        \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable (opnet np p)\n                             (otherwith (=) (net_tree_ips p) inoclosed) U\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d);\n        ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "from this(3)"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "have \"\\<forall>j. j \\<notin> net_tree_ips p \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "using \\<open>net_ips \\<zeta> = net_tree_ips p\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  net_ips \\<zeta> = net_tree_ips p\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "by auto"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (5 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 3. \\<And>R m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, \\<zeta>), R:*cast(m), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 4. \\<lbrakk>a = \\<tau>;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet np p);\n     \\<forall>j.\n        j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n        \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable (opnet np p)\n                             (otherwith (=) (net_tree_ips p) inoclosed) U\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d);\n        ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "hence \"otherwith ((=)) (net_tree_ips p) inoclosed \\<sigma> \\<sigma>' \\<tau>\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. otherwith (=) (net_tree_ips p) inoclosed \\<sigma> \\<sigma>' \\<tau>", "by auto"], ["proof (state)\nthis:\n  otherwith (=) (net_tree_ips p) inoclosed \\<sigma> \\<sigma>' \\<tau>\n\ngoal (5 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 3. \\<And>R m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, \\<zeta>), R:*cast(m), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 4. \\<lbrakk>a = \\<tau>;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet np p);\n     \\<forall>j.\n        j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n        \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable (opnet np p)\n                             (otherwith (=) (net_tree_ips p) inoclosed) U\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d);\n        ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "with zor tr"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed) U\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (opnet np p)\n  otherwith (=) (net_tree_ips p) inoclosed \\<sigma> \\<sigma>' \\<tau>", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed) U\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (opnet np p)\n  otherwith (=) (net_tree_ips p) inoclosed \\<sigma> \\<sigma>' \\<tau>\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed)\n           U", "by - (rule oreachable_local')"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed) U\n\ngoal (4 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 3. \\<And>R m.\n       \\<lbrakk>a = \\<tau>;\n        ((\\<sigma>, \\<zeta>), R:*cast(m), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d);\n        ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans (opnet np p);\n        \\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable (opnet np p)\n                                (otherwith (=) (net_tree_ips p) inoclosed) U", "qed (insert \\<open>net_ips \\<zeta> = net_tree_ips p\\<close>,\n         auto elim!: oreachable_local' [OF zor])"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed) U\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oclosed_oreachable_oreachable [elim]:\n  assumes \"(\\<sigma>, \\<zeta>) \\<in> oreachable (oclosed (opnet onp p)) (\\<lambda>_ _ _. True) U\"\n    shows \"(\\<sigma>, \\<zeta>) \\<in> oreachable (opnet onp p) (\\<lambda>_ _ _. True) U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable (opnet onp p) (\\<lambda>_ _ _. True) U", "using assms"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (oclosed (opnet onp p)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable (opnet onp p) (\\<lambda>_ _ _. True) U", "by (rule oclosed_oreachable_inclosed [THEN oreachable_weakenE]) simp"], ["", "lemma inclosed_closed [intro]:\n  assumes cinv: \"opnet np p \\<Turnstile> (otherwith ((=)) (net_tree_ips p) inoclosed, U \\<rightarrow>) P\"\n    shows \"oclosed (opnet np p) \\<Turnstile> (\\<lambda>_ _ _. True, U \\<rightarrow>) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oclosed\n     (opnet np p) \\<Turnstile> (\\<lambda>_ _ _. True, U \\<rightarrow>) P", "using assms"], ["proof (prove)\nusing this:\n  opnet np\n   p \\<Turnstile> (otherwith (=) (net_tree_ips p) inoclosed,\n                   U \\<rightarrow>) P\n\ngoal (1 subgoal):\n 1. oclosed\n     (opnet np p) \\<Turnstile> (\\<lambda>_ _ _. True, U \\<rightarrow>) P", "unfolding oinvariant_def"], ["proof (prove)\nusing this:\n  Ball\n   (oreachable (opnet np p) (otherwith (=) (net_tree_ips p) inoclosed) U) P\n\ngoal (1 subgoal):\n 1. Ball (oreachable (oclosed (opnet np p)) (\\<lambda>_ _ _. True) U) P", "by (clarsimp dest!: oclosed_oreachable_inclosed)"], ["", "end"]]}