{"file_name": "/home/qj213/afp-2021-10-22/thys/AWN/ONode_Lifting.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AWN", "problem_names": ["lemma node_net_state':\n  assumes \"s \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n    shows \"\\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)\"", "lemma node_net_state:\n  assumes \"(\\<sigma>, s) \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n    shows \"\\<exists>\\<zeta> R. s = NodeS i \\<zeta> R\"", "lemma node_net_state_trans [elim]:\n  assumes sor: \"(\\<sigma>, s) \\<in> oreachable (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n      and str: \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\"\n  obtains \\<zeta> R \\<zeta>' R'\n    where \"s = NodeS i \\<zeta> R\"\n      and \"s' = NodeS i \\<zeta>' R'\"", "lemma nodemap_induct' [consumes, case_names init other local]:\n  assumes \"(\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n      and init: \"\\<And>\\<sigma> \\<zeta>. (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i) \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow> P (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)\"\n      and other: \"\\<And>\\<sigma> \\<zeta> R \\<sigma>' a.\n                  \\<lbrakk> (\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n                    U \\<sigma> \\<sigma>'; P (\\<sigma>, NodeS ii \\<zeta> R) \\<rbrakk> \\<Longrightarrow> P (\\<sigma>', NodeS ii \\<zeta> R)\"\n      and local: \"\\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n                  \\<lbrakk> (\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n                    ((\\<sigma>, NodeS ii \\<zeta> R), a, (\\<sigma>', NodeS ii \\<zeta>' R')) \\<in> trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n                    S \\<sigma> \\<sigma>' a; P (\\<sigma>, NodeS ii \\<zeta> R) \\<rbrakk> \\<Longrightarrow> P (\\<sigma>', NodeS ii \\<zeta>' R')\"\n    shows \"P (\\<sigma>, NodeS ii \\<zeta> R)\"", "lemma nodemap_induct [consumes, case_names init step]:\n  assumes \"(\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n      and init: \"\\<And>\\<sigma> \\<zeta>. (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i) \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow> P \\<sigma> \\<zeta> R\\<^sub>i\"\n      and other: \"\\<And>\\<sigma> \\<zeta> R \\<sigma>' a.\n                  \\<lbrakk> (\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n                    U \\<sigma> \\<sigma>'; P \\<sigma> \\<zeta> R \\<rbrakk> \\<Longrightarrow> P \\<sigma>' \\<zeta> R\"\n      and local: \"\\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n                  \\<lbrakk> (\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n                    ((\\<sigma>, NodeS ii \\<zeta> R), a, (\\<sigma>', NodeS ii \\<zeta>' R')) \\<in> trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n                    S \\<sigma> \\<sigma>' a; P \\<sigma> \\<zeta> R \\<rbrakk> \\<Longrightarrow> P \\<sigma>' \\<zeta>' R'\"\n    shows \"P \\<sigma> \\<zeta> R\"", "lemma node_addressD [dest, simp]:\n  assumes \"(\\<sigma>, NodeS i \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n    shows \"i = ii\"", "lemma node_proc_reachable [dest]:\n  assumes \"(\\<sigma>, NodeS i \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                                         (otherwith S {ii} (oarrivemsg I)) (other U {ii})\"\n      and sgivesu: \"\\<And>\\<xi> \\<xi>'. S \\<xi> \\<xi>' \\<Longrightarrow> U \\<xi> \\<xi>'\"\n    shows \"(\\<sigma>, \\<zeta>) \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\"", "lemma node_proc_reachable_statelessassm [dest]:\n  assumes \"(\\<sigma>, NodeS i \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                                         (otherwith (\\<lambda>_ _. True) {ii} (oarrivemsg I))\n                                         (other (\\<lambda>_ _. True) {ii})\"\n    shows \"(\\<sigma>, \\<zeta>) \\<in> oreachable T\n                               (otherwith (\\<lambda>_ _. True) {ii} (orecvmsg I)) (other (\\<lambda>_ _. True) {ii})\"", "lemma node_lift:\n  assumes \"T \\<Turnstile> (otherwith S {ii} (orecvmsg I), other U {ii} \\<rightarrow>) global P\"\n      and \"\\<And>\\<xi> \\<xi>'. S \\<xi> \\<xi>' \\<Longrightarrow> U \\<xi> \\<xi>'\"\n    shows \"\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile> (otherwith S {ii} (oarrivemsg I), other U {ii} \\<rightarrow>) global P\"", "lemma node_lift_step [intro]:\n  assumes pinv: \"T \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg I), other U {i} \\<rightarrow>) globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). Q \\<sigma> \\<sigma>')\"\n      and other: \"\\<And>\\<sigma> \\<sigma>'. other U {i} \\<sigma> \\<sigma>' \\<Longrightarrow> Q \\<sigma> \\<sigma>'\"\n      and sgivesu: \"\\<And>\\<xi> \\<xi>'. S \\<xi> \\<xi>' \\<Longrightarrow> U \\<xi> \\<xi>'\"\n    shows \"\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (otherwith S {i} (oarrivemsg I), other U {i} \\<rightarrow>)\n                            globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). Q \\<sigma> \\<sigma>')\"\n    (is \"_ \\<Turnstile>\\<^sub>A (?S, ?U \\<rightarrow>) _\")", "lemma node_lift_step_statelessassm [intro]:\n  assumes \"T \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg I \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                       globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). Q (\\<sigma> i) (\\<sigma>' i))\"\n      and \"\\<And>\\<xi>. Q \\<xi> \\<xi>\"\n    shows \"\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). Q (\\<sigma> i) (\\<sigma>' i))\"", "lemma node_lift_anycast [intro]:\n  assumes pinv: \"T \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg I), other U {i} \\<rightarrow>)\n                       globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). anycast (Q \\<sigma> \\<sigma>') a)\"\n      and \"\\<And>\\<xi> \\<xi>'. S \\<xi> \\<xi>' \\<Longrightarrow> U \\<xi> \\<xi>'\"\n    shows \"\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (otherwith S {i} (oarrivemsg I), other U {i} \\<rightarrow>)\n                            globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). castmsg (Q \\<sigma> \\<sigma>') a)\"\n    (is \"_ \\<Turnstile>\\<^sub>A (?S, ?U \\<rightarrow>) _\")", "lemma node_lift_anycast_statelessassm [intro]:\n  assumes pinv: \"T \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg I \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                       globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). anycast (Q \\<sigma> \\<sigma>') a)\"\n    shows \"\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). castmsg (Q \\<sigma> \\<sigma>') a)\"\n    (is \"_ \\<Turnstile>\\<^sub>A (?S, _ \\<rightarrow>) _\")", "lemma node_local_deliver:\n  \"\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) globala (\\<lambda>(_, a, _). \\<forall>j. j\\<noteq>i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d)))\"", "lemma node_tau_deliver_unchanged:\n  \"\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d))\n                                                     \\<longrightarrow> (\\<forall>j. j\\<noteq>i \\<longrightarrow> \\<sigma>' j = \\<sigma> j))\""], "translations": [["", "lemma node_net_state':\n  assumes \"s \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n    shows \"\\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)", "proof induction"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       s \\<in> init\n                (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            (\\<sigma>', snd s) =\n                            (\\<sigma>, NodeS i \\<zeta> R)", "fix s"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       s \\<in> init\n                (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            (\\<sigma>', snd s) =\n                            (\\<sigma>, NodeS i \\<zeta> R)", "assume \"s \\<in> init (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\""], ["proof (state)\nthis:\n  s \\<in> init (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       s \\<in> init\n                (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            (\\<sigma>', snd s) =\n                            (\\<sigma>, NodeS i \\<zeta> R)", "then"], ["proof (chain)\npicking this:\n  s \\<in> init (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)", "obtain \\<sigma> \\<zeta> where \"s = (\\<sigma>, NodeS i \\<zeta> R\\<^sub>i)\""], ["proof (prove)\nusing this:\n  s \\<in> init (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<zeta>.\n        s = (\\<sigma>, NodeS i \\<zeta> R\\<^sub>i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: onode_comps)"], ["proof (state)\nthis:\n  s = (\\<sigma>, NodeS i \\<zeta> R\\<^sub>i)\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       s \\<in> init\n                (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            (\\<sigma>', snd s) =\n                            (\\<sigma>, NodeS i \\<zeta> R)", "thus \"\\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)\""], ["proof (prove)\nusing this:\n  s = (\\<sigma>, NodeS i \\<zeta> R\\<^sub>i)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            (\\<sigma>', snd s) =\n                            (\\<sigma>, NodeS i \\<zeta> R)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            (\\<sigma>', snd s) =\n                            (\\<sigma>, NodeS i \\<zeta> R)", "fix s a \\<sigma>'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            (\\<sigma>', snd s) =\n                            (\\<sigma>, NodeS i \\<zeta> R)", "assume rt: \"s \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n       and ih: \"\\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)\"\n       and \"U (fst s) \\<sigma>'\""], ["proof (state)\nthis:\n  s \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)\n  U (fst s) \\<sigma>'\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            (\\<sigma>', snd s) =\n                            (\\<sigma>, NodeS i \\<zeta> R)", "then"], ["proof (chain)\npicking this:\n  s \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)\n  U (fst s) \\<sigma>'", "obtain \\<sigma> \\<zeta> R\n      where \"(\\<sigma>, NodeS i \\<zeta> R)  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n        and \"U \\<sigma> \\<sigma>'\" and \"snd s = NodeS i \\<zeta> R\""], ["proof (prove)\nusing this:\n  s \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)\n  U (fst s) \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<zeta> R.\n        \\<lbrakk>(\\<sigma>, NodeS i \\<zeta> R)\n                 \\<in> oreachable\n                        (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n         U \\<sigma> \\<sigma>'; snd s = NodeS i \\<zeta> R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>, NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  U \\<sigma> \\<sigma>'\n  snd s = NodeS i \\<zeta> R\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            (\\<sigma>', snd s) =\n                            (\\<sigma>, NodeS i \\<zeta> R)", "from this(1-2)"], ["proof (chain)\npicking this:\n  (\\<sigma>, NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  U \\<sigma> \\<sigma>'", "have \"(\\<sigma>', NodeS i \\<zeta> R) \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\""], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  U \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', NodeS i \\<zeta> R)\n    \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U", "by - (erule(1) oreachable_other')"], ["proof (state)\nthis:\n  (\\<sigma>', NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            (\\<sigma>', snd s) =\n                            (\\<sigma>, NodeS i \\<zeta> R)", "with \\<open>snd s = NodeS i \\<zeta> R\\<close>"], ["proof (chain)\npicking this:\n  snd s = NodeS i \\<zeta> R\n  (\\<sigma>', NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U", "show \"\\<exists>\\<sigma> \\<zeta> R. (\\<sigma>', snd s) = (\\<sigma>, NodeS i \\<zeta> R)\""], ["proof (prove)\nusing this:\n  snd s = NodeS i \\<zeta> R\n  (\\<sigma>', NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<zeta> R.\n       (\\<sigma>', snd s) = (\\<sigma>, NodeS i \\<zeta> R)", "by simp"], ["proof (state)\nthis:\n  \\<exists>\\<sigma> \\<zeta> R.\n     (\\<sigma>', snd s) = (\\<sigma>, NodeS i \\<zeta> R)\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)", "fix s a s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)", "assume rt: \"s \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n       and ih: \"\\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)\"\n       and tr: \"(s, a, s') \\<in> trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\"\n       and \"S (fst s) (fst s') a\""], ["proof (state)\nthis:\n  s \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)\n  (s, a, s')\n  \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S (fst s) (fst s') a\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)", "from ih"], ["proof (chain)\npicking this:\n  \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)", "obtain \\<sigma> \\<zeta> R where \"s = (\\<sigma>, NodeS i \\<zeta> R)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<zeta> R.\n        s = (\\<sigma>, NodeS i \\<zeta> R) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s = (\\<sigma>, NodeS i \\<zeta> R)\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)", "with tr"], ["proof (chain)\npicking this:\n  (s, a, s')\n  \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  s = (\\<sigma>, NodeS i \\<zeta> R)", "have \"((\\<sigma>, NodeS i \\<zeta> R), a, s') \\<in> onode_sos (trans T)\""], ["proof (prove)\nusing this:\n  (s, a, s')\n  \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  s = (\\<sigma>, NodeS i \\<zeta> R)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS i \\<zeta> R), a, s')\n    \\<in> onode_sos (automaton.trans T)", "by (simp add: onode_comps)"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS i \\<zeta> R), a, s') \\<in> onode_sos (automaton.trans T)\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)", "then"], ["proof (chain)\npicking this:\n  ((\\<sigma>, NodeS i \\<zeta> R), a, s') \\<in> onode_sos (automaton.trans T)", "obtain \\<sigma>' \\<zeta>' R' where \"s' = (\\<sigma>', NodeS i \\<zeta>' R')\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, NodeS i \\<zeta> R), a, s') \\<in> onode_sos (automaton.trans T)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<zeta>' R'.\n        s' = (\\<sigma>', NodeS i \\<zeta>' R') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using onode_sos_dest_is_net_state'"], ["proof (prove)\nusing this:\n  ((\\<sigma>, NodeS i \\<zeta> R), a, s') \\<in> onode_sos (automaton.trans T)\n  ((?\\<sigma>, NodeS ?i ?p ?R), ?a, ?s')\n  \\<in> onode_sos ?S \\<Longrightarrow>\n  \\<exists>\\<sigma>' \\<zeta>' R'. ?s' = (\\<sigma>', NodeS ?i \\<zeta>' R')\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<zeta>' R'.\n        s' = (\\<sigma>', NodeS i \\<zeta>' R') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  s' = (\\<sigma>', NodeS i \\<zeta>' R')\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<exists>\\<sigma> \\<zeta> R. s = (\\<sigma>, NodeS i \\<zeta> R);\n        (s, a, s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<zeta> R.\n                            s' = (\\<sigma>, NodeS i \\<zeta> R)", "with tr \\<open>s = (\\<sigma>, NodeS i \\<zeta> R)\\<close>"], ["proof (chain)\npicking this:\n  (s, a, s')\n  \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  s = (\\<sigma>, NodeS i \\<zeta> R)\n  s' = (\\<sigma>', NodeS i \\<zeta>' R')", "show \"\\<exists>\\<sigma> \\<zeta> R. s' = (\\<sigma>, NodeS i \\<zeta> R)\""], ["proof (prove)\nusing this:\n  (s, a, s')\n  \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  s = (\\<sigma>, NodeS i \\<zeta> R)\n  s' = (\\<sigma>', NodeS i \\<zeta>' R')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<zeta> R. s' = (\\<sigma>, NodeS i \\<zeta> R)", "by simp"], ["proof (state)\nthis:\n  \\<exists>\\<sigma> \\<zeta> R. s' = (\\<sigma>, NodeS i \\<zeta> R)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma node_net_state:\n  assumes \"(\\<sigma>, s) \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n    shows \"\\<exists>\\<zeta> R. s = NodeS i \\<zeta> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<zeta> R. s = NodeS i \\<zeta> R", "using assms"], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (1 subgoal):\n 1. \\<exists>\\<zeta> R. s = NodeS i \\<zeta> R", "by (metis Pair_inject node_net_state')"], ["", "lemma node_net_state_trans [elim]:\n  assumes sor: \"(\\<sigma>, s) \\<in> oreachable (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n      and str: \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\"\n  obtains \\<zeta> R \\<zeta>' R'\n    where \"s = NodeS i \\<zeta> R\"\n      and \"s' = NodeS i \\<zeta>' R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta> R \\<zeta>' R'.\n        \\<lbrakk>s = NodeS i \\<zeta> R; s' = NodeS i \\<zeta>' R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta> R \\<zeta>' R'.\n        \\<lbrakk>s = NodeS i \\<zeta> R; s' = NodeS i \\<zeta>' R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume *: \"\\<And>\\<zeta> R \\<zeta>' R'. s = NodeS i \\<zeta> R \\<Longrightarrow> s' = NodeS i \\<zeta>' R' \\<Longrightarrow> thesis\""], ["proof (state)\nthis:\n  \\<lbrakk>s = NodeS i ?\\<zeta> ?R; s' = NodeS i ?\\<zeta>' ?R'\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta> R \\<zeta>' R'.\n        \\<lbrakk>s = NodeS i \\<zeta> R; s' = NodeS i \\<zeta>' R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from sor"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U", "obtain \\<zeta> R where \"s = NodeS i \\<zeta> R\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta> R.\n        s = NodeS i \\<zeta> R \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis node_net_state)"], ["proof (state)\nthis:\n  s = NodeS i \\<zeta> R\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta> R \\<zeta>' R'.\n        \\<lbrakk>s = NodeS i \\<zeta> R; s' = NodeS i \\<zeta>' R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  s = NodeS i \\<zeta> R\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta> R \\<zeta>' R'.\n        \\<lbrakk>s = NodeS i \\<zeta> R; s' = NodeS i \\<zeta>' R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with str"], ["proof (chain)\npicking this:\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n  s = NodeS i \\<zeta> R", "obtain \\<zeta>' R' where \"s' = NodeS i \\<zeta>' R'\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n  s = NodeS i \\<zeta> R\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta>' R'.\n        s' = NodeS i \\<zeta>' R' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp only: onode_comps)\n         (metis onode_sos_dest_is_net_state'')"], ["proof (state)\nthis:\n  s' = NodeS i \\<zeta>' R'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta> R \\<zeta>' R'.\n        \\<lbrakk>s = NodeS i \\<zeta> R; s' = NodeS i \\<zeta>' R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  s = NodeS i \\<zeta> R\n  s' = NodeS i \\<zeta>' R'", "show thesis"], ["proof (prove)\nusing this:\n  s = NodeS i \\<zeta> R\n  s' = NodeS i \\<zeta>' R'\n\ngoal (1 subgoal):\n 1. thesis", "by (rule *)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nodemap_induct' [consumes, case_names init other local]:\n  assumes \"(\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n      and init: \"\\<And>\\<sigma> \\<zeta>. (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i) \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow> P (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)\"\n      and other: \"\\<And>\\<sigma> \\<zeta> R \\<sigma>' a.\n                  \\<lbrakk> (\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n                    U \\<sigma> \\<sigma>'; P (\\<sigma>, NodeS ii \\<zeta> R) \\<rbrakk> \\<Longrightarrow> P (\\<sigma>', NodeS ii \\<zeta> R)\"\n      and local: \"\\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n                  \\<lbrakk> (\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n                    ((\\<sigma>, NodeS ii \\<zeta> R), a, (\\<sigma>', NodeS ii \\<zeta>' R')) \\<in> trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n                    S \\<sigma> \\<sigma>' a; P (\\<sigma>, NodeS ii \\<zeta> R) \\<rbrakk> \\<Longrightarrow> P (\\<sigma>', NodeS ii \\<zeta>' R')\"\n    shows \"P (\\<sigma>, NodeS ii \\<zeta> R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (\\<sigma>, NodeS ii \\<zeta> R)", "using assms(1)"], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (1 subgoal):\n 1. P (\\<sigma>, NodeS ii \\<zeta> R)", "proof induction"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       s \\<in> init\n                (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       P s\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "fix s"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       s \\<in> init\n                (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       P s\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "assume \"s \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\""], ["proof (state)\nthis:\n  s \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       s \\<in> init\n                (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       P s\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "hence \"s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\""], ["proof (prove)\nusing this:\n  s \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (1 subgoal):\n 1. s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U", "by (rule oreachable_init)"], ["proof (state)\nthis:\n  s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       s \\<in> init\n                (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       P s\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "with \\<open>s \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U", "obtain \\<sigma> \\<zeta> where \"s = (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)\""], ["proof (prove)\nusing this:\n  s \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<zeta>.\n        s = (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (simp add: onode_comps) metis"], ["proof (state)\nthis:\n  s = (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       s \\<in> init\n                (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       P s\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 3. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "with \\<open>s \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\\<close> and init"], ["proof (chain)\npicking this:\n  s \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  (?\\<sigma>, NodeS ii ?\\<zeta> R\\<^sub>i)\n  \\<in> init\n         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n  P (?\\<sigma>, NodeS ii ?\\<zeta> R\\<^sub>i)\n  s = (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)", "show \"P s\""], ["proof (prove)\nusing this:\n  s \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  (?\\<sigma>, NodeS ii ?\\<zeta> R\\<^sub>i)\n  \\<in> init\n         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n  P (?\\<sigma>, NodeS ii ?\\<zeta> R\\<^sub>i)\n  s = (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)\n\ngoal (1 subgoal):\n 1. P s", "by simp"], ["proof (state)\nthis:\n  P s\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "fix s a \\<sigma>'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "assume sr: \"s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n       and \"U (fst s) \\<sigma>'\"\n       and \"P s\""], ["proof (state)\nthis:\n  s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  U (fst s) \\<sigma>'\n  P s\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "from sr"], ["proof (chain)\npicking this:\n  s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U", "obtain \\<sigma> \\<zeta> R where \"s = (\\<sigma>, NodeS ii \\<zeta> R)\""], ["proof (prove)\nusing this:\n  s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<zeta> R.\n        s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using node_net_state'"], ["proof (prove)\nusing this:\n  s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ?s \\<in> oreachable (\\<langle>?i : ?T : ?R\\<^sub>i\\<rangle>\\<^sub>o) ?S\n            ?U \\<Longrightarrow>\n  \\<exists>\\<sigma> \\<zeta> R. ?s = (\\<sigma>, NodeS ?i \\<zeta> R)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<zeta> R.\n        s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  s = (\\<sigma>, NodeS ii \\<zeta> R)\n\ngoal (2 subgoals):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'\n 2. \\<And>s \\<sigma>'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s; U (fst s) \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> P (\\<sigma>', snd s)", "with sr \\<open>U (fst s) \\<sigma>'\\<close> \\<open>P s\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  U (fst s) \\<sigma>'\n  P s\n  s = (\\<sigma>, NodeS ii \\<zeta> R)", "show \"P (\\<sigma>', snd s)\""], ["proof (prove)\nusing this:\n  s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  U (fst s) \\<sigma>'\n  P s\n  s = (\\<sigma>, NodeS ii \\<zeta> R)\n\ngoal (1 subgoal):\n 1. P (\\<sigma>', snd s)", "by simp (metis other)"], ["proof (state)\nthis:\n  P (\\<sigma>', snd s)\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'", "fix s a s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'", "assume sr: \"s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n       and tr: \"(s, a, s') \\<in> trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\"\n       and \"S (fst s) (fst s') a\"\n       and \"P s\""], ["proof (state)\nthis:\n  s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  (s, a, s')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S (fst s) (fst s') a\n  P s\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'", "from this(1-3)"], ["proof (chain)\npicking this:\n  s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  (s, a, s')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S (fst s) (fst s') a", "have \"s' \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\""], ["proof (prove)\nusing this:\n  s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  (s, a, s')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S (fst s) (fst s') a\n\ngoal (1 subgoal):\n 1. s' \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U", "by - (erule(2) oreachable_local)"], ["proof (state)\nthis:\n  s' \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'", "then"], ["proof (chain)\npicking this:\n  s' \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U", "obtain \\<sigma>' \\<zeta>' R' where [simp]: \"s' = (\\<sigma>', NodeS ii \\<zeta>' R')\""], ["proof (prove)\nusing this:\n  s' \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<zeta>' R'.\n        s' = (\\<sigma>', NodeS ii \\<zeta>' R') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using node_net_state'"], ["proof (prove)\nusing this:\n  s' \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ?s \\<in> oreachable (\\<langle>?i : ?T : ?R\\<^sub>i\\<rangle>\\<^sub>o) ?S\n            ?U \\<Longrightarrow>\n  \\<exists>\\<sigma> \\<zeta> R. ?s = (\\<sigma>, NodeS ?i \\<zeta> R)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<zeta>' R'.\n        s' = (\\<sigma>', NodeS ii \\<zeta>' R') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  s' = (\\<sigma>', NodeS ii \\<zeta>' R')\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'", "from sr and \\<open>P s\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  P s", "obtain \\<sigma> \\<zeta> R\n      where [simp]: \"s = (\\<sigma>, NodeS ii \\<zeta> R)\"\n        and A1: \"(\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n        and A4: \"P (\\<sigma>, NodeS ii \\<zeta> R)\""], ["proof (prove)\nusing this:\n  s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  P s\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<zeta> R.\n        \\<lbrakk>s = (\\<sigma>, NodeS ii \\<zeta> R);\n         (\\<sigma>, NodeS ii \\<zeta> R)\n         \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S\n                U;\n         P (\\<sigma>, NodeS ii \\<zeta> R)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using node_net_state'"], ["proof (prove)\nusing this:\n  s \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  P s\n  ?s \\<in> oreachable (\\<langle>?i : ?T : ?R\\<^sub>i\\<rangle>\\<^sub>o) ?S\n            ?U \\<Longrightarrow>\n  \\<exists>\\<sigma> \\<zeta> R. ?s = (\\<sigma>, NodeS ?i \\<zeta> R)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<zeta> R.\n        \\<lbrakk>s = (\\<sigma>, NodeS ii \\<zeta> R);\n         (\\<sigma>, NodeS ii \\<zeta> R)\n         \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S\n                U;\n         P (\\<sigma>, NodeS ii \\<zeta> R)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  s = (\\<sigma>, NodeS ii \\<zeta> R)\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  P (\\<sigma>, NodeS ii \\<zeta> R)\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'", "with tr and \\<open>S (fst s) (fst s') a\\<close>"], ["proof (chain)\npicking this:\n  (s, a, s')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S (fst s) (fst s') a\n  s = (\\<sigma>, NodeS ii \\<zeta> R)\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  P (\\<sigma>, NodeS ii \\<zeta> R)", "have A2: \"((\\<sigma>, NodeS ii \\<zeta> R), a, (\\<sigma>', NodeS ii \\<zeta>' R')) \\<in> trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\"\n       and A3: \"S \\<sigma> \\<sigma>' a\""], ["proof (prove)\nusing this:\n  (s, a, s')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S (fst s) (fst s') a\n  s = (\\<sigma>, NodeS ii \\<zeta> R)\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  P (\\<sigma>, NodeS ii \\<zeta> R)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n    \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) &&&\n    S \\<sigma> \\<sigma>' a", "by simp_all"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'", "from A1 A2 A3 A4"], ["proof (chain)\npicking this:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S \\<sigma> \\<sigma>' a\n  P (\\<sigma>, NodeS ii \\<zeta> R)", "have \"P (\\<sigma>', NodeS ii \\<zeta>' R')\""], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S \\<sigma> \\<sigma>' a\n  P (\\<sigma>, NodeS ii \\<zeta> R)\n\ngoal (1 subgoal):\n 1. P (\\<sigma>', NodeS ii \\<zeta>' R')", "by (rule local)"], ["proof (state)\nthis:\n  P (\\<sigma>', NodeS ii \\<zeta>' R')\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        P s;\n        (s, a, s')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst s') a\\<rbrakk>\n       \\<Longrightarrow> P s'", "thus \"P s'\""], ["proof (prove)\nusing this:\n  P (\\<sigma>', NodeS ii \\<zeta>' R')\n\ngoal (1 subgoal):\n 1. P s'", "by simp"], ["proof (state)\nthis:\n  P s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nodemap_induct [consumes, case_names init step]:\n  assumes \"(\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n      and init: \"\\<And>\\<sigma> \\<zeta>. (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i) \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow> P \\<sigma> \\<zeta> R\\<^sub>i\"\n      and other: \"\\<And>\\<sigma> \\<zeta> R \\<sigma>' a.\n                  \\<lbrakk> (\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n                    U \\<sigma> \\<sigma>'; P \\<sigma> \\<zeta> R \\<rbrakk> \\<Longrightarrow> P \\<sigma>' \\<zeta> R\"\n      and local: \"\\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n                  \\<lbrakk> (\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n                    ((\\<sigma>, NodeS ii \\<zeta> R), a, (\\<sigma>', NodeS ii \\<zeta>' R')) \\<in> trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n                    S \\<sigma> \\<sigma>' a; P \\<sigma> \\<zeta> R \\<rbrakk> \\<Longrightarrow> P \\<sigma>' \\<zeta>' R'\"\n    shows \"P \\<sigma> \\<zeta> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sigma> \\<zeta> R", "using assms(1)"], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (1 subgoal):\n 1. P \\<sigma> \\<zeta> R", "proof (induction \"(\\<sigma>, NodeS ii \\<zeta> R)\" arbitrary: \\<sigma> \\<zeta> R)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<zeta> R.\n       (\\<sigma>, NodeS ii \\<zeta> R)\n       \\<in> init\n              (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       P \\<sigma> \\<zeta> R\n 2. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 3. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "fix \\<sigma> \\<zeta> R"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<zeta> R.\n       (\\<sigma>, NodeS ii \\<zeta> R)\n       \\<in> init\n              (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       P \\<sigma> \\<zeta> R\n 2. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 3. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "assume a1: \"(\\<sigma>, NodeS ii \\<zeta> R) \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\""], ["proof (state)\nthis:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<zeta> R.\n       (\\<sigma>, NodeS ii \\<zeta> R)\n       \\<in> init\n              (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       P \\<sigma> \\<zeta> R\n 2. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 3. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "hence \"R = R\\<^sub>i\""], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (1 subgoal):\n 1. R = R\\<^sub>i", "by (simp add: init_onode_comp)"], ["proof (state)\nthis:\n  R = R\\<^sub>i\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<zeta> R.\n       (\\<sigma>, NodeS ii \\<zeta> R)\n       \\<in> init\n              (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       P \\<sigma> \\<zeta> R\n 2. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 3. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "with a1"], ["proof (chain)\npicking this:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  R = R\\<^sub>i", "have \"(\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i) \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  R = R\\<^sub>i\n\ngoal (1 subgoal):\n 1. (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)\n    \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)\n  \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<zeta> R.\n       (\\<sigma>, NodeS ii \\<zeta> R)\n       \\<in> init\n              (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       P \\<sigma> \\<zeta> R\n 2. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 3. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "with init and \\<open>R = R\\<^sub>i\\<close>"], ["proof (chain)\npicking this:\n  (?\\<sigma>, NodeS ii ?\\<zeta> R\\<^sub>i)\n  \\<in> init\n         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n  P ?\\<sigma> ?\\<zeta> R\\<^sub>i\n  R = R\\<^sub>i\n  (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)\n  \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)", "show \"P \\<sigma> \\<zeta> R\""], ["proof (prove)\nusing this:\n  (?\\<sigma>, NodeS ii ?\\<zeta> R\\<^sub>i)\n  \\<in> init\n         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n  P ?\\<sigma> ?\\<zeta> R\\<^sub>i\n  R = R\\<^sub>i\n  (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)\n  \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (1 subgoal):\n 1. P \\<sigma> \\<zeta> R", "by simp"], ["proof (state)\nthis:\n  P \\<sigma> \\<zeta> R\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 2. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 2. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "fix st a \\<sigma>' \\<zeta>' R'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 2. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "assume \"st \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n       and tr: \"(st, a, (\\<sigma>', NodeS ii \\<zeta>' R')) \\<in> trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\"\n       and \"S (fst st) (fst (\\<sigma>', NodeS ii \\<zeta>' R')) a\"\n       and IH: \"\\<And>\\<sigma> \\<zeta> R. st = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow> P \\<sigma> \\<zeta> R\""], ["proof (state)\nthis:\n  st \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  (st, a, \\<sigma>', NodeS ii \\<zeta>' R')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S (fst st) (fst (\\<sigma>', NodeS ii \\<zeta>' R')) a\n  st = (?\\<sigma>, NodeS ii ?\\<zeta> ?R) \\<Longrightarrow>\n  P ?\\<sigma> ?\\<zeta> ?R\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 2. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "from this(1)"], ["proof (chain)\npicking this:\n  st \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U", "obtain \\<sigma> \\<zeta> R where \"st = (\\<sigma>, NodeS ii \\<zeta> R)\"\n                                and \"(\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\""], ["proof (prove)\nusing this:\n  st \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<zeta> R.\n        \\<lbrakk>st = (\\<sigma>, NodeS ii \\<zeta> R);\n         (\\<sigma>, NodeS ii \\<zeta> R)\n         \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S\n                U\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis node_net_state')"], ["proof (state)\nthis:\n  st = (\\<sigma>, NodeS ii \\<zeta> R)\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 2. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "note this(2)"], ["proof (state)\nthis:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 2. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 2. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "from tr and \\<open>st = (\\<sigma>, NodeS ii \\<zeta> R)\\<close>"], ["proof (chain)\npicking this:\n  (st, a, \\<sigma>', NodeS ii \\<zeta>' R')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  st = (\\<sigma>, NodeS ii \\<zeta> R)", "have \"((\\<sigma>, NodeS ii \\<zeta> R), a, (\\<sigma>', NodeS ii \\<zeta>' R')) \\<in> trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\""], ["proof (prove)\nusing this:\n  (st, a, \\<sigma>', NodeS ii \\<zeta>' R')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  st = (\\<sigma>, NodeS ii \\<zeta> R)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n    \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 2. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "moreover"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 2. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "from \\<open>S (fst st) (fst (\\<sigma>', NodeS ii \\<zeta>' R')) a\\<close> and \\<open>st = (\\<sigma>, NodeS ii \\<zeta> R)\\<close>"], ["proof (chain)\npicking this:\n  S (fst st) (fst (\\<sigma>', NodeS ii \\<zeta>' R')) a\n  st = (\\<sigma>, NodeS ii \\<zeta> R)", "have \"S \\<sigma> \\<sigma>' a\""], ["proof (prove)\nusing this:\n  S (fst st) (fst (\\<sigma>', NodeS ii \\<zeta>' R')) a\n  st = (\\<sigma>, NodeS ii \\<zeta> R)\n\ngoal (1 subgoal):\n 1. S \\<sigma> \\<sigma>' a", "by simp"], ["proof (state)\nthis:\n  S \\<sigma> \\<sigma>' a\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 2. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "moreover"], ["proof (state)\nthis:\n  S \\<sigma> \\<sigma>' a\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 2. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "from IH and \\<open>st = (\\<sigma>, NodeS ii \\<zeta> R)\\<close>"], ["proof (chain)\npicking this:\n  st = (?\\<sigma>, NodeS ii ?\\<zeta> ?R) \\<Longrightarrow>\n  P ?\\<sigma> ?\\<zeta> ?R\n  st = (\\<sigma>, NodeS ii \\<zeta> R)", "have \"P \\<sigma> \\<zeta> R\""], ["proof (prove)\nusing this:\n  st = (?\\<sigma>, NodeS ii ?\\<zeta> ?R) \\<Longrightarrow>\n  P ?\\<sigma> ?\\<zeta> ?R\n  st = (\\<sigma>, NodeS ii \\<zeta> R)\n\ngoal (1 subgoal):\n 1. P \\<sigma> \\<zeta> R", "."], ["proof (state)\nthis:\n  P \\<sigma> \\<zeta> R\n\ngoal (2 subgoals):\n 1. \\<And>s a \\<sigma> \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        (s, a, \\<sigma>, NodeS ii \\<zeta> R)\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S (fst s) (fst (\\<sigma>, NodeS ii \\<zeta> R)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> \\<zeta> R\n 2. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S \\<sigma> \\<sigma>' a\n  P \\<sigma> \\<zeta> R", "show \"P \\<sigma>' \\<zeta>' R'\""], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S \\<sigma> \\<sigma>' a\n  P \\<sigma> \\<zeta> R\n\ngoal (1 subgoal):\n 1. P \\<sigma>' \\<zeta>' R'", "by (rule local)"], ["proof (state)\nthis:\n  P \\<sigma>' \\<zeta>' R'\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "fix st \\<sigma>' \\<zeta> R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "assume \"st \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n       and \"U (fst st) \\<sigma>'\"\n       and \"snd st = NodeS ii \\<zeta> R\"\n       and IH: \"\\<And>\\<sigma> \\<zeta> R. st = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow> P \\<sigma> \\<zeta> R\""], ["proof (state)\nthis:\n  st \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  U (fst st) \\<sigma>'\n  snd st = NodeS ii \\<zeta> R\n  st = (?\\<sigma>, NodeS ii ?\\<zeta> ?R) \\<Longrightarrow>\n  P ?\\<sigma> ?\\<zeta> ?R\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "from this(1,3)"], ["proof (chain)\npicking this:\n  st \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  snd st = NodeS ii \\<zeta> R", "obtain \\<sigma> where \"st = (\\<sigma>, NodeS ii \\<zeta> R)\"\n                              and \"(\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\""], ["proof (prove)\nusing this:\n  st \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  snd st = NodeS ii \\<zeta> R\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<lbrakk>st = (\\<sigma>, NodeS ii \\<zeta> R);\n         (\\<sigma>, NodeS ii \\<zeta> R)\n         \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S\n                U\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surjective_pairing)"], ["proof (state)\nthis:\n  st = (\\<sigma>, NodeS ii \\<zeta> R)\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "note this(2)"], ["proof (state)\nthis:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "from \\<open>U (fst st) \\<sigma>'\\<close> and \\<open>st = (\\<sigma>, NodeS ii \\<zeta> R)\\<close>"], ["proof (chain)\npicking this:\n  U (fst st) \\<sigma>'\n  st = (\\<sigma>, NodeS ii \\<zeta> R)", "have \"U \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  U (fst st) \\<sigma>'\n  st = (\\<sigma>, NodeS ii \\<zeta> R)\n\ngoal (1 subgoal):\n 1. U \\<sigma> \\<sigma>'", "by simp"], ["proof (state)\nthis:\n  U \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "moreover"], ["proof (state)\nthis:\n  U \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "from IH and \\<open>st = (\\<sigma>, NodeS ii \\<zeta> R)\\<close>"], ["proof (chain)\npicking this:\n  st = (?\\<sigma>, NodeS ii ?\\<zeta> ?R) \\<Longrightarrow>\n  P ?\\<sigma> ?\\<zeta> ?R\n  st = (\\<sigma>, NodeS ii \\<zeta> R)", "have \"P \\<sigma> \\<zeta> R\""], ["proof (prove)\nusing this:\n  st = (?\\<sigma>, NodeS ii ?\\<zeta> ?R) \\<Longrightarrow>\n  P ?\\<sigma> ?\\<zeta> ?R\n  st = (\\<sigma>, NodeS ii \\<zeta> R)\n\ngoal (1 subgoal):\n 1. P \\<sigma> \\<zeta> R", "."], ["proof (state)\nthis:\n  P \\<sigma> \\<zeta> R\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' \\<zeta> R.\n       \\<lbrakk>s \\<in> oreachable\n                         (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U;\n        \\<And>\\<sigma> \\<zeta> R.\n           s = (\\<sigma>, NodeS ii \\<zeta> R) \\<Longrightarrow>\n           P \\<sigma> \\<zeta> R;\n        U (fst s) \\<sigma>'; snd s = NodeS ii \\<zeta> R\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' \\<zeta> R", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  U \\<sigma> \\<sigma>'\n  P \\<sigma> \\<zeta> R", "show \"P \\<sigma>' \\<zeta> R\""], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  U \\<sigma> \\<sigma>'\n  P \\<sigma> \\<zeta> R\n\ngoal (1 subgoal):\n 1. P \\<sigma>' \\<zeta> R", "by (rule other)"], ["proof (state)\nthis:\n  P \\<sigma>' \\<zeta> R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma node_addressD [dest, simp]:\n  assumes \"(\\<sigma>, NodeS i \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n    shows \"i = ii\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = ii", "using assms"], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n\ngoal (1 subgoal):\n 1. i = ii", "by (clarsimp dest!: node_net_state')"], ["", "lemma node_proc_reachable [dest]:\n  assumes \"(\\<sigma>, NodeS i \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                                         (otherwith S {ii} (oarrivemsg I)) (other U {ii})\"\n      and sgivesu: \"\\<And>\\<xi> \\<xi>'. S \\<xi> \\<xi>' \\<Longrightarrow> U \\<xi> \\<xi>'\"\n    shows \"(\\<sigma>, \\<zeta>) \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "from assms(1)"], ["proof (chain)\npicking this:\n  (\\<sigma>, NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {ii} (oarrivemsg I)) (other U {ii})", "have \"(\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                                             (otherwith S {ii} (oarrivemsg I)) (other U {ii})\""], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {ii} (oarrivemsg I)) (other U {ii})\n\ngoal (1 subgoal):\n 1. (\\<sigma>, NodeS ii \\<zeta> R)\n    \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n           (otherwith S {ii} (oarrivemsg I)) (other U {ii})", "by - (frule node_addressD, simp)"], ["proof (state)\nthis:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {ii} (oarrivemsg I)) (other U {ii})\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {ii} (oarrivemsg I)) (other U {ii})\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "proof (induction rule: nodemap_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<zeta>.\n       (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)\n       \\<in> init\n              (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       (\\<sigma>, \\<zeta>)\n       \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n 2. \\<And>\\<sigma> \\<zeta> R \\<sigma>' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        other U {ii} \\<sigma> \\<sigma>';\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>)\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "fix \\<sigma> \\<zeta>"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<zeta>.\n       (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)\n       \\<in> init\n              (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       (\\<sigma>, \\<zeta>)\n       \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n 2. \\<And>\\<sigma> \\<zeta> R \\<sigma>' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        other U {ii} \\<sigma> \\<sigma>';\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>)\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "assume \"(\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i) \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\""], ["proof (state)\nthis:\n  (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)\n  \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<zeta>.\n       (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)\n       \\<in> init\n              (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       (\\<sigma>, \\<zeta>)\n       \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n 2. \\<And>\\<sigma> \\<zeta> R \\<sigma>' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        other U {ii} \\<sigma> \\<sigma>';\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>)\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "hence \"(\\<sigma>, \\<zeta>) \\<in> init T\""], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)\n  \\<in> init (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>) \\<in> init T", "by (auto simp: onode_comps)"], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>) \\<in> init T\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<zeta>.\n       (\\<sigma>, NodeS ii \\<zeta> R\\<^sub>i)\n       \\<in> init\n              (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) \\<Longrightarrow>\n       (\\<sigma>, \\<zeta>)\n       \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n 2. \\<And>\\<sigma> \\<zeta> R \\<sigma>' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        other U {ii} \\<sigma> \\<sigma>';\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>)\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "thus \"(\\<sigma>, \\<zeta>) \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>) \\<in> init T\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by (rule oreachable_init)"], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<zeta> R \\<sigma>' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        other U {ii} \\<sigma> \\<sigma>';\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>)\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<zeta> R \\<sigma>' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        other U {ii} \\<sigma> \\<sigma>';\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>)\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "fix \\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<zeta> R \\<sigma>' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        other U {ii} \\<sigma> \\<sigma>';\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>)\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "assume \"other U {ii} \\<sigma> \\<sigma>'\"\n         and \"(\\<sigma>, \\<zeta>) \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\""], ["proof (state)\nthis:\n  other U {ii} \\<sigma> \\<sigma>'\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<zeta> R \\<sigma>' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        other U {ii} \\<sigma> \\<sigma>';\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>)\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "thus \"(\\<sigma>', \\<zeta>) \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\""], ["proof (prove)\nusing this:\n  other U {ii} \\<sigma> \\<sigma>'\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>)\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by - (rule oreachable_other')"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "fix \\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "assume rs: \"(\\<sigma>, NodeS ii \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                                         (otherwith S {ii} (oarrivemsg I)) (other U {ii})\"\n         and tr: \"((\\<sigma>, NodeS ii \\<zeta> R), a, (\\<sigma>', NodeS ii \\<zeta>' R')) \\<in> trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\"\n         and ow: \"otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\"\n         and ih: \"(\\<sigma>, \\<zeta>) \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\""], ["proof (state)\nthis:\n  (\\<sigma>, NodeS ii \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {ii} (oarrivemsg I)) (other U {ii})\n  ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "from ow"], ["proof (chain)\npicking this:\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a", "have *: \"\\<sigma>' ii = \\<sigma> ii \\<Longrightarrow> other U {ii} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<sigma>' ii = \\<sigma> ii \\<Longrightarrow>\n    other U {ii} \\<sigma> \\<sigma>'", "by (clarsimp elim!: otherwithE) (rule otherI, simp_all, metis sgivesu)"], ["proof (state)\nthis:\n  \\<sigma>' ii = \\<sigma> ii \\<Longrightarrow>\n  other U {ii} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "from tr"], ["proof (chain)\npicking this:\n  ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)", "have \"((\\<sigma>, NodeS ii \\<zeta> R), a, (\\<sigma>', NodeS ii \\<zeta>' R')) \\<in> onode_sos (trans T)\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n  \\<in> automaton.trans (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n    \\<in> onode_sos (automaton.trans T)", "by (simp add: onode_comps)"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n  \\<in> onode_sos (automaton.trans T)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<zeta> R \\<sigma>' \\<zeta>' R' a.\n       \\<lbrakk>(\\<sigma>, NodeS ii \\<zeta> R)\n                \\<in> oreachable\n                       (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {ii} (oarrivemsg I)) (other U {ii});\n        ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n        \\<in> automaton.trans\n               (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, \\<zeta>)\n        \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n               (other U {ii})\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "thus \"(\\<sigma>', \\<zeta>') \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, NodeS ii \\<zeta> R), a, \\<sigma>', NodeS ii \\<zeta>' R')\n  \\<in> onode_sos (automaton.trans T)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "proof cases"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>a = R:*cast(m); R' = R;\n        ((\\<sigma>, \\<zeta>), broadcast m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>D m.\n       \\<lbrakk>a = (R \\<inter> D):*cast(m); R' = R;\n        ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>d m.\n       \\<lbrakk>a = {d}:*cast(m); R' = R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>d.\n       \\<lbrakk>a = \\<tau>; R' = R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>d.\n       \\<lbrakk>a = ii:deliver(d); R' = R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 7. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 10. \\<And>i'.\n        \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n         R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n        \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                          \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                 (other U {ii})\nA total of 14 subgoals...", "case onode_bcast"], ["proof (state)\nthis:\n  a = R:*cast(m_)\n  R' = R\n  ((\\<sigma>, \\<zeta>), broadcast m_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n\ngoal (14 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>a = R:*cast(m); R' = R;\n        ((\\<sigma>, \\<zeta>), broadcast m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>D m.\n       \\<lbrakk>a = (R \\<inter> D):*cast(m); R' = R;\n        ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>d m.\n       \\<lbrakk>a = {d}:*cast(m); R' = R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>d.\n       \\<lbrakk>a = \\<tau>; R' = R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>d.\n       \\<lbrakk>a = ii:deliver(d); R' = R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 7. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 10. \\<And>i'.\n        \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n         R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n        \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                          \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                 (other U {ii})\nA total of 14 subgoals...", "with ih and ow"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n  a = R:*cast(m_)\n  R' = R\n  ((\\<sigma>, \\<zeta>), broadcast m_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n  a = R:*cast(m_)\n  R' = R\n  ((\\<sigma>, \\<zeta>), broadcast m_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by (auto elim!: oreachable_local' otherwithE)"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (13 subgoals):\n 1. \\<And>D m.\n       \\<lbrakk>a = (R \\<inter> D):*cast(m); R' = R;\n        ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>d m.\n       \\<lbrakk>a = {d}:*cast(m); R' = R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>d.\n       \\<lbrakk>a = \\<tau>; R' = R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>d.\n       \\<lbrakk>a = ii:deliver(d); R' = R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 6. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n         \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n        \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                          \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                 (other U {ii})\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>D m.\n       \\<lbrakk>a = (R \\<inter> D):*cast(m); R' = R;\n        ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>d m.\n       \\<lbrakk>a = {d}:*cast(m); R' = R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>d.\n       \\<lbrakk>a = \\<tau>; R' = R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>d.\n       \\<lbrakk>a = ii:deliver(d); R' = R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 6. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n         \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n        \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                          \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                 (other U {ii})\nA total of 13 subgoals...", "case onode_gcast"], ["proof (state)\nthis:\n  a = (R \\<inter> D_):*cast(m_)\n  R' = R\n  ((\\<sigma>, \\<zeta>), groupcast D_ m_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n\ngoal (13 subgoals):\n 1. \\<And>D m.\n       \\<lbrakk>a = (R \\<inter> D):*cast(m); R' = R;\n        ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>d m.\n       \\<lbrakk>a = {d}:*cast(m); R' = R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>d.\n       \\<lbrakk>a = \\<tau>; R' = R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>d.\n       \\<lbrakk>a = ii:deliver(d); R' = R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 6. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n         \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n        \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                          \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                 (other U {ii})\nA total of 13 subgoals...", "with ih and ow"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n  a = (R \\<inter> D_):*cast(m_)\n  R' = R\n  ((\\<sigma>, \\<zeta>), groupcast D_ m_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n  a = (R \\<inter> D_):*cast(m_)\n  R' = R\n  ((\\<sigma>, \\<zeta>), groupcast D_ m_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by (auto elim!: oreachable_local' otherwithE)"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (12 subgoals):\n 1. \\<And>d m.\n       \\<lbrakk>a = {d}:*cast(m); R' = R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>d.\n       \\<lbrakk>a = \\<tau>; R' = R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>d.\n       \\<lbrakk>a = ii:deliver(d); R' = R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 5. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n         \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n        \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                          \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                 (other U {ii})\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>d m.\n       \\<lbrakk>a = {d}:*cast(m); R' = R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>d.\n       \\<lbrakk>a = \\<tau>; R' = R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>d.\n       \\<lbrakk>a = ii:deliver(d); R' = R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 5. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n         \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n        \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                          \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                 (other U {ii})\nA total of 12 subgoals...", "case onode_ucast"], ["proof (state)\nthis:\n  a = {d_}:*cast(m_)\n  R' = R\n  ((\\<sigma>, \\<zeta>), unicast d_ m_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  d_ \\<in> R\n\ngoal (12 subgoals):\n 1. \\<And>d m.\n       \\<lbrakk>a = {d}:*cast(m); R' = R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>d.\n       \\<lbrakk>a = \\<tau>; R' = R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>d.\n       \\<lbrakk>a = ii:deliver(d); R' = R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 5. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n         \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n        \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                          \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                 (other U {ii})\nA total of 12 subgoals...", "with ih and ow"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n  a = {d_}:*cast(m_)\n  R' = R\n  ((\\<sigma>, \\<zeta>), unicast d_ m_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  d_ \\<in> R", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n  a = {d_}:*cast(m_)\n  R' = R\n  ((\\<sigma>, \\<zeta>), unicast d_ m_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  d_ \\<in> R\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by (auto elim!: oreachable_local' otherwithE)"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (11 subgoals):\n 1. \\<And>d.\n       \\<lbrakk>a = \\<tau>; R' = R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>d.\n       \\<lbrakk>a = ii:deliver(d); R' = R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 4. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 10. \\<And>i' i''.\n        \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n         ii \\<noteq> i'; ii \\<noteq> i'';\n         \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n        \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                          \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                 (other U {ii})\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>d.\n       \\<lbrakk>a = \\<tau>; R' = R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>d.\n       \\<lbrakk>a = ii:deliver(d); R' = R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 4. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 10. \\<And>i' i''.\n        \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n         ii \\<noteq> i'; ii \\<noteq> i'';\n         \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n        \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                          \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                 (other U {ii})\nA total of 11 subgoals...", "case onode_notucast"], ["proof (state)\nthis:\n  a = \\<tau>\n  R' = R\n  ((\\<sigma>, \\<zeta>), \\<not>unicast d_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  d_ \\<notin> R\n  \\<forall>j. j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (11 subgoals):\n 1. \\<And>d.\n       \\<lbrakk>a = \\<tau>; R' = R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>d.\n       \\<lbrakk>a = ii:deliver(d); R' = R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 4. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 10. \\<And>i' i''.\n        \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n         ii \\<noteq> i'; ii \\<noteq> i'';\n         \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n        \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                          \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                 (other U {ii})\nA total of 11 subgoals...", "with ih and ow"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n  a = \\<tau>\n  R' = R\n  ((\\<sigma>, \\<zeta>), \\<not>unicast d_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  d_ \\<notin> R\n  \\<forall>j. j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n  a = \\<tau>\n  R' = R\n  ((\\<sigma>, \\<zeta>), \\<not>unicast d_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  d_ \\<notin> R\n  \\<forall>j. j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by (auto elim!: oreachable_local' otherwithE)"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (10 subgoals):\n 1. \\<And>d.\n       \\<lbrakk>a = ii:deliver(d); R' = R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 3. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 10. \\<And>i' i''.\n        \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n         ii \\<noteq> i'; ii \\<noteq> i'';\n         \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n        \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                          \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                 (other U {ii})", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>d.\n       \\<lbrakk>a = ii:deliver(d); R' = R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 3. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 10. \\<And>i' i''.\n        \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n         ii \\<noteq> i'; ii \\<noteq> i'';\n         \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n        \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                          \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                 (other U {ii})", "case onode_deliver"], ["proof (state)\nthis:\n  a = ii:deliver(d_)\n  R' = R\n  ((\\<sigma>, \\<zeta>), deliver d_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  \\<forall>j. j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (10 subgoals):\n 1. \\<And>d.\n       \\<lbrakk>a = ii:deliver(d); R' = R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 3. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 10. \\<And>i' i''.\n        \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n         ii \\<noteq> i'; ii \\<noteq> i'';\n         \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n        \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                          \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                 (other U {ii})", "with ih and ow"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n  a = ii:deliver(d_)\n  R' = R\n  ((\\<sigma>, \\<zeta>), deliver d_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  \\<forall>j. j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n  a = ii:deliver(d_)\n  R' = R\n  ((\\<sigma>, \\<zeta>), deliver d_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  \\<forall>j. j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by (auto elim!: oreachable_local' otherwithE)"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (9 subgoals):\n 1. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 2. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 2. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "case onode_tau"], ["proof (state)\nthis:\n  a = \\<tau>\n  R' = R\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>') \\<in> automaton.trans T\n  \\<forall>j. j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (9 subgoals):\n 1. \\<lbrakk>a = \\<tau>; R' = R;\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans T;\n     \\<forall>j.\n        j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                      \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                             (other U {ii})\n 2. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 9. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "with ih and ow"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n  a = \\<tau>\n  R' = R\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>') \\<in> automaton.trans T\n  \\<forall>j. j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n  a = \\<tau>\n  R' = R\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>') \\<in> automaton.trans T\n  \\<forall>j. j \\<noteq> ii \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by (auto elim!: oreachable_local' otherwithE)"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (8 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "case onode_receive"], ["proof (state)\nthis:\n  a = {ii}\\<not>{}:arrive(m_)\n  R' = R\n  ((\\<sigma>, \\<zeta>), receive m_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n\ngoal (8 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>a = {ii}\\<not>{}:arrive(m); R' = R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 8. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "with ih and ow"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n  a = {ii}\\<not>{}:arrive(m_)\n  R' = R\n  ((\\<sigma>, \\<zeta>), receive m_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  otherwith S {ii} (oarrivemsg I) \\<sigma> \\<sigma>' a\n  a = {ii}\\<not>{}:arrive(m_)\n  R' = R\n  ((\\<sigma>, \\<zeta>), receive m_, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by (auto elim!: oreachable_local' otherwithE)"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (7 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "case (onode_arrive m)"], ["proof (state)\nthis:\n  a = {}\\<not>{ii}:arrive(m)\n  \\<zeta>' = \\<zeta>\n  R' = R\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (7 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "hence \"\\<zeta>' = \\<zeta>\" and \"\\<sigma>' ii = \\<sigma> ii\""], ["proof (prove)\nusing this:\n  a = {}\\<not>{ii}:arrive(m)\n  \\<zeta>' = \\<zeta>\n  R' = R\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. \\<zeta>' = \\<zeta> &&& \\<sigma>' ii = \\<sigma> ii", "by auto"], ["proof (state)\nthis:\n  \\<zeta>' = \\<zeta>\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (7 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "from this(2)"], ["proof (chain)\npicking this:\n  \\<sigma>' ii = \\<sigma> ii", "have \"other U {ii} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. other U {ii} \\<sigma> \\<sigma>'", "by (rule *)"], ["proof (state)\nthis:\n  other U {ii} \\<sigma> \\<sigma>'\n\ngoal (7 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{ii}:arrive(m); \\<zeta>' = \\<zeta>; R' = R;\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 7. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "with ih and \\<open>\\<zeta>' = \\<zeta>\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  \\<zeta>' = \\<zeta>\n  other U {ii} \\<sigma> \\<sigma>'", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  \\<zeta>' = \\<zeta>\n  other U {ii} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (6 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "case onode_connect1"], ["proof (state)\nthis:\n  a = connect(ii, i'_)\n  \\<zeta>' = \\<zeta>\n  R' = R \\<union> {i'_}\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (6 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "hence \"\\<zeta>' = \\<zeta>\" and \"\\<sigma>' ii = \\<sigma> ii\""], ["proof (prove)\nusing this:\n  a = connect(ii, i'_)\n  \\<zeta>' = \\<zeta>\n  R' = R \\<union> {i'_}\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. \\<zeta>' = \\<zeta> &&& \\<sigma>' ii = \\<sigma> ii", "by auto"], ["proof (state)\nthis:\n  \\<zeta>' = \\<zeta>\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (6 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "from this(2)"], ["proof (chain)\npicking this:\n  \\<sigma>' ii = \\<sigma> ii", "have \"other U {ii} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. other U {ii} \\<sigma> \\<sigma>'", "by (rule *)"], ["proof (state)\nthis:\n  other U {ii} \\<sigma> \\<sigma>'\n\ngoal (6 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(ii, i'); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 6. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "with ih and \\<open>\\<zeta>' = \\<zeta>\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  \\<zeta>' = \\<zeta>\n  other U {ii} \\<sigma> \\<sigma>'", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  \\<zeta>' = \\<zeta>\n  other U {ii} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (5 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "case onode_connect2"], ["proof (state)\nthis:\n  a = connect(i'_, ii)\n  \\<zeta>' = \\<zeta>\n  R' = R \\<union> {i'_}\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (5 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "hence \"\\<zeta>' = \\<zeta>\" and \"\\<sigma>' ii = \\<sigma> ii\""], ["proof (prove)\nusing this:\n  a = connect(i'_, ii)\n  \\<zeta>' = \\<zeta>\n  R' = R \\<union> {i'_}\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. \\<zeta>' = \\<zeta> &&& \\<sigma>' ii = \\<sigma> ii", "by auto"], ["proof (state)\nthis:\n  \\<zeta>' = \\<zeta>\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (5 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "from this(2)"], ["proof (chain)\npicking this:\n  \\<sigma>' ii = \\<sigma> ii", "have \"other U {ii} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. other U {ii} \\<sigma> \\<sigma>'", "by (rule *)"], ["proof (state)\nthis:\n  other U {ii} \\<sigma> \\<sigma>'\n\ngoal (5 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(i', ii); \\<zeta>' = \\<zeta>;\n        R' = R \\<union> {i'}; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 5. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "with ih and \\<open>\\<zeta>' = \\<zeta>\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  \\<zeta>' = \\<zeta>\n  other U {ii} \\<sigma> \\<sigma>'", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  \\<zeta>' = \\<zeta>\n  other U {ii} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (4 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "case onode_connect_other"], ["proof (state)\nthis:\n  a = connect(i'_, i''_)\n  \\<zeta>' = \\<zeta>\n  R' = R\n  ii \\<noteq> i'_\n  ii \\<noteq> i''_\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (4 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "hence \"\\<zeta>' = \\<zeta>\" and \"\\<sigma>' ii = \\<sigma> ii\""], ["proof (prove)\nusing this:\n  a = connect(i'_, i''_)\n  \\<zeta>' = \\<zeta>\n  R' = R\n  ii \\<noteq> i'_\n  ii \\<noteq> i''_\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. \\<zeta>' = \\<zeta> &&& \\<sigma>' ii = \\<sigma> ii", "by auto"], ["proof (state)\nthis:\n  \\<zeta>' = \\<zeta>\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (4 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "from this(2)"], ["proof (chain)\npicking this:\n  \\<sigma>' ii = \\<sigma> ii", "have \"other U {ii} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. other U {ii} \\<sigma> \\<sigma>'", "by (rule *)"], ["proof (state)\nthis:\n  other U {ii} \\<sigma> \\<sigma>'\n\ngoal (4 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 4. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "with ih and \\<open>\\<zeta>' = \\<zeta>\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  \\<zeta>' = \\<zeta>\n  other U {ii} \\<sigma> \\<sigma>'", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  \\<zeta>' = \\<zeta>\n  other U {ii} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (3 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "case onode_disconnect1"], ["proof (state)\nthis:\n  a = disconnect(ii, i'_)\n  \\<zeta>' = \\<zeta>\n  R' = R - {i'_}\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (3 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "hence \"\\<zeta>' = \\<zeta>\" and \"\\<sigma>' ii = \\<sigma> ii\""], ["proof (prove)\nusing this:\n  a = disconnect(ii, i'_)\n  \\<zeta>' = \\<zeta>\n  R' = R - {i'_}\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. \\<zeta>' = \\<zeta> &&& \\<sigma>' ii = \\<sigma> ii", "by auto"], ["proof (state)\nthis:\n  \\<zeta>' = \\<zeta>\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (3 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "from this(2)"], ["proof (chain)\npicking this:\n  \\<sigma>' ii = \\<sigma> ii", "have \"other U {ii} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. other U {ii} \\<sigma> \\<sigma>'", "by (rule *)"], ["proof (state)\nthis:\n  other U {ii} \\<sigma> \\<sigma>'\n\ngoal (3 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(ii, i'); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 3. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "with ih and \\<open>\\<zeta>' = \\<zeta>\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  \\<zeta>' = \\<zeta>\n  other U {ii} \\<sigma> \\<sigma>'", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  \\<zeta>' = \\<zeta>\n  other U {ii} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (2 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "case onode_disconnect2"], ["proof (state)\nthis:\n  a = disconnect(i'_, ii)\n  \\<zeta>' = \\<zeta>\n  R' = R - {i'_}\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (2 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "hence \"\\<zeta>' = \\<zeta>\" and \"\\<sigma>' ii = \\<sigma> ii\""], ["proof (prove)\nusing this:\n  a = disconnect(i'_, ii)\n  \\<zeta>' = \\<zeta>\n  R' = R - {i'_}\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. \\<zeta>' = \\<zeta> &&& \\<sigma>' ii = \\<sigma> ii", "by auto"], ["proof (state)\nthis:\n  \\<zeta>' = \\<zeta>\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (2 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "from this(2)"], ["proof (chain)\npicking this:\n  \\<sigma>' ii = \\<sigma> ii", "have \"other U {ii} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. other U {ii} \\<sigma> \\<sigma>'", "by (rule *)"], ["proof (state)\nthis:\n  other U {ii} \\<sigma> \\<sigma>'\n\ngoal (2 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', ii); \\<zeta>' = \\<zeta>; R' = R - {i'};\n        \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})\n 2. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "with ih and \\<open>\\<zeta>' = \\<zeta>\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  \\<zeta>' = \\<zeta>\n  other U {ii} \\<sigma> \\<sigma>'", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  \\<zeta>' = \\<zeta>\n  other U {ii} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (1 subgoal):\n 1. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "case onode_disconnect_other"], ["proof (state)\nthis:\n  a = disconnect(i'_, i''_)\n  \\<zeta>' = \\<zeta>\n  R' = R\n  ii \\<noteq> i'_\n  ii \\<noteq> i''_\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "hence \"\\<zeta>' = \\<zeta>\" and \"\\<sigma>' ii = \\<sigma> ii\""], ["proof (prove)\nusing this:\n  a = disconnect(i'_, i''_)\n  \\<zeta>' = \\<zeta>\n  R' = R\n  ii \\<noteq> i'_\n  ii \\<noteq> i''_\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. \\<zeta>' = \\<zeta> &&& \\<sigma>' ii = \\<sigma> ii", "by auto"], ["proof (state)\nthis:\n  \\<zeta>' = \\<zeta>\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "from this(2)"], ["proof (chain)\npicking this:\n  \\<sigma>' ii = \\<sigma> ii", "have \"other U {ii} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. other U {ii} \\<sigma> \\<sigma>'", "by (rule *)"], ["proof (state)\nthis:\n  other U {ii} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); \\<zeta>' = \\<zeta>; R' = R;\n        ii \\<noteq> i'; ii \\<noteq> i''; \\<sigma>' ii = \\<sigma> ii\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', \\<zeta>')\n                         \\<in> oreachable T (otherwith S {ii} (orecvmsg I))\n                                (other U {ii})", "with ih and \\<open>\\<zeta>' = \\<zeta>\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  \\<zeta>' = \\<zeta>\n  other U {ii} \\<sigma> \\<sigma>'", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n  \\<zeta>' = \\<zeta>\n  other U {ii} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma node_proc_reachable_statelessassm [dest]:\n  assumes \"(\\<sigma>, NodeS i \\<zeta> R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                                         (otherwith (\\<lambda>_ _. True) {ii} (oarrivemsg I))\n                                         (other (\\<lambda>_ _. True) {ii})\"\n    shows \"(\\<sigma>, \\<zeta>) \\<in> oreachable T\n                               (otherwith (\\<lambda>_ _. True) {ii} (orecvmsg I)) (other (\\<lambda>_ _. True) {ii})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable T (otherwith (\\<lambda>_ _. True) {ii} (orecvmsg I))\n           (other (\\<lambda>_ _. True) {ii})", "using assms"], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith (\\<lambda>_ _. True) {ii} (oarrivemsg I))\n         (other (\\<lambda>_ _. True) {ii})\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable T (otherwith (\\<lambda>_ _. True) {ii} (orecvmsg I))\n           (other (\\<lambda>_ _. True) {ii})", "by (rule node_proc_reachable) simp_all"], ["", "lemma node_lift:\n  assumes \"T \\<Turnstile> (otherwith S {ii} (orecvmsg I), other U {ii} \\<rightarrow>) global P\"\n      and \"\\<And>\\<xi> \\<xi>'. S \\<xi> \\<xi>' \\<Longrightarrow> U \\<xi> \\<xi>'\"\n    shows \"\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile> (otherwith S {ii} (oarrivemsg I), other U {ii} \\<rightarrow>) global P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile> (otherwith S\n                          {ii} (oarrivemsg I),\n                         other U {ii} \\<rightarrow>) global P", "proof (rule oinvariant_oreachableI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s.\n       (\\<sigma>, s)\n       \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n              (otherwith S {ii} (oarrivemsg I))\n              (other U {ii}) \\<Longrightarrow>\n       global P (\\<sigma>, s)", "fix \\<sigma> \\<zeta>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s.\n       (\\<sigma>, s)\n       \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n              (otherwith S {ii} (oarrivemsg I))\n              (other U {ii}) \\<Longrightarrow>\n       global P (\\<sigma>, s)", "assume \"(\\<sigma>, \\<zeta>) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o) (otherwith S {ii} (oarrivemsg I)) (other U {ii})\""], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {ii} (oarrivemsg I)) (other U {ii})\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s.\n       (\\<sigma>, s)\n       \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n              (otherwith S {ii} (oarrivemsg I))\n              (other U {ii}) \\<Longrightarrow>\n       global P (\\<sigma>, s)", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {ii} (oarrivemsg I)) (other U {ii})\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s.\n       (\\<sigma>, s)\n       \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n              (otherwith S {ii} (oarrivemsg I))\n              (other U {ii}) \\<Longrightarrow>\n       global P (\\<sigma>, s)", "then"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {ii} (oarrivemsg I)) (other U {ii})", "obtain i s R where \"\\<zeta> = NodeS i s R\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {ii} (oarrivemsg I)) (other U {ii})\n\ngoal (1 subgoal):\n 1. (\\<And>i s R.\n        \\<zeta> = NodeS i s R \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis node_net_state)"], ["proof (state)\nthis:\n  \\<zeta> = NodeS i s R\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s.\n       (\\<sigma>, s)\n       \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n              (otherwith S {ii} (oarrivemsg I))\n              (other U {ii}) \\<Longrightarrow>\n       global P (\\<sigma>, s)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {ii} (oarrivemsg I)) (other U {ii})\n  \\<zeta> = NodeS i s R", "have \"(\\<sigma>, NodeS i s R) \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                                                   (otherwith S {ii} (oarrivemsg I)) (other U {ii})\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {ii} (oarrivemsg I)) (other U {ii})\n  \\<zeta> = NodeS i s R\n\ngoal (1 subgoal):\n 1. (\\<sigma>, NodeS i s R)\n    \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n           (otherwith S {ii} (oarrivemsg I)) (other U {ii})", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>, NodeS i s R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {ii} (oarrivemsg I)) (other U {ii})\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s.\n       (\\<sigma>, s)\n       \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n              (otherwith S {ii} (oarrivemsg I))\n              (other U {ii}) \\<Longrightarrow>\n       global P (\\<sigma>, s)", "hence \"(\\<sigma>, s) \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\""], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS i s R)\n  \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {ii} (oarrivemsg I)) (other U {ii})\n\ngoal (1 subgoal):\n 1. (\\<sigma>, s)\n    \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "by - (erule node_proc_reachable, erule assms(2))"], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s.\n       (\\<sigma>, s)\n       \\<in> oreachable (\\<langle>ii : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n              (otherwith S {ii} (oarrivemsg I))\n              (other U {ii}) \\<Longrightarrow>\n       global P (\\<sigma>, s)", "with assms(1)"], ["proof (chain)\npicking this:\n  T \\<Turnstile> (otherwith S {ii} (orecvmsg I), other U {ii} \\<rightarrow>)\n                  global P\n  (\\<sigma>, s)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})", "show \"global P (\\<sigma>, \\<zeta>)\""], ["proof (prove)\nusing this:\n  T \\<Turnstile> (otherwith S {ii} (orecvmsg I), other U {ii} \\<rightarrow>)\n                  global P\n  (\\<sigma>, s)\n  \\<in> oreachable T (otherwith S {ii} (orecvmsg I)) (other U {ii})\n\ngoal (1 subgoal):\n 1. global P (\\<sigma>, \\<zeta>)", "by (metis fst_conv globalsimp oinvariantD)"], ["proof (state)\nthis:\n  global P (\\<sigma>, \\<zeta>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma node_lift_step [intro]:\n  assumes pinv: \"T \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg I), other U {i} \\<rightarrow>) globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). Q \\<sigma> \\<sigma>')\"\n      and other: \"\\<And>\\<sigma> \\<sigma>'. other U {i} \\<sigma> \\<sigma>' \\<Longrightarrow> Q \\<sigma> \\<sigma>'\"\n      and sgivesu: \"\\<And>\\<xi> \\<xi>'. S \\<xi> \\<xi>' \\<Longrightarrow> U \\<xi> \\<xi>'\"\n    shows \"\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (otherwith S {i} (oarrivemsg I), other U {i} \\<rightarrow>)\n                            globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). Q \\<sigma> \\<sigma>')\"\n    (is \"_ \\<Turnstile>\\<^sub>A (?S, ?U \\<rightarrow>) _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (otherwith\n                                 S {i} (oarrivemsg I),\n                                other U {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     Q \\<sigma> \\<sigma>')", "proof (rule ostep_invariantI, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {i} (oarrivemsg I)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "fix \\<sigma> s a \\<sigma>' s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {i} (oarrivemsg I)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "assume rs: \"(\\<sigma>, s) \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) ?S ?U\"\n       and tr: \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\"\n       and ow: \"?S \\<sigma> \\<sigma>' a\""], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {i} (oarrivemsg I)) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {i} (oarrivemsg I)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "from ow"], ["proof (chain)\npicking this:\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a", "have *: \"\\<sigma>' i = \\<sigma> i \\<Longrightarrow> other U {i} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i \\<Longrightarrow>\n    other U {i} \\<sigma> \\<sigma>'", "by (clarsimp elim!: otherwithE) (rule otherI, simp_all, metis sgivesu)"], ["proof (state)\nthis:\n  \\<sigma>' i = \\<sigma> i \\<Longrightarrow> other U {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {i} (oarrivemsg I)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "from rs tr"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {i} (oarrivemsg I)) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)", "obtain \\<zeta> R\n      where [simp]: \"s = NodeS i \\<zeta> R\"\n        and \"(\\<sigma>, NodeS i \\<zeta> R) \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) ?S ?U\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {i} (oarrivemsg I)) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta> R.\n        \\<lbrakk>s = NodeS i \\<zeta> R;\n         (\\<sigma>, NodeS i \\<zeta> R)\n         \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                (otherwith S {i} (oarrivemsg I)) (other U {i})\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis node_net_state)"], ["proof (state)\nthis:\n  s = NodeS i \\<zeta> R\n  (\\<sigma>, NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {i} (oarrivemsg I)) (other U {i})\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {i} (oarrivemsg I)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "from this(2)"], ["proof (chain)\npicking this:\n  (\\<sigma>, NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {i} (oarrivemsg I)) (other U {i})", "have or: \"(\\<sigma>, \\<zeta>) \\<in> oreachable T (otherwith S {i} (orecvmsg I)) ?U\""], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {i} (oarrivemsg I)) (other U {i})\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})", "by (rule node_proc_reachable [OF _ assms(3)])"], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {i} (oarrivemsg I)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "from tr"], ["proof (chain)\npicking this:\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)", "have \"((\\<sigma>, NodeS i \\<zeta> R), a, (\\<sigma>', s')) \\<in> onode_sos (trans T)\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS i \\<zeta> R), a, \\<sigma>', s')\n    \\<in> onode_sos (automaton.trans T)", "by (simp add: onode_comps)"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS i \\<zeta> R), a, \\<sigma>', s')\n  \\<in> onode_sos (automaton.trans T)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {i} (oarrivemsg I)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "thus \"Q \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, NodeS i \\<zeta> R), a, \\<sigma>', s')\n  \\<in> onode_sos (automaton.trans T)\n\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<sigma>'", "proof cases"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>m s'a.\n       \\<lbrakk>a = R:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), broadcast m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>D m s'a.\n       \\<lbrakk>a = (R \\<inter> D):*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>d m s'a.\n       \\<lbrakk>a = {d}:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i'.\n        \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n         \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 14 subgoals...", "fix m \\<zeta>'"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>m s'a.\n       \\<lbrakk>a = R:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), broadcast m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>D m s'a.\n       \\<lbrakk>a = (R \\<inter> D):*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>d m s'a.\n       \\<lbrakk>a = {d}:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i'.\n        \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n         \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 14 subgoals...", "assume \"a = R:*cast(m)\"\n         and tr': \"((\\<sigma>, \\<zeta>), broadcast m, (\\<sigma>', \\<zeta>')) \\<in> trans T\""], ["proof (state)\nthis:\n  a = R:*cast(m)\n  ((\\<sigma>, \\<zeta>), broadcast m, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n\ngoal (14 subgoals):\n 1. \\<And>m s'a.\n       \\<lbrakk>a = R:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), broadcast m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>D m s'a.\n       \\<lbrakk>a = (R \\<inter> D):*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>d m s'a.\n       \\<lbrakk>a = {d}:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i'.\n        \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n         \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 14 subgoals...", "from this(1) and \\<open>?S \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  a = R:*cast(m)\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a", "have \"otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (broadcast m)\""], ["proof (prove)\nusing this:\n  a = R:*cast(m)\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (broadcast m)", "by (auto elim!: otherwithE)"], ["proof (state)\nthis:\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (broadcast m)\n\ngoal (14 subgoals):\n 1. \\<And>m s'a.\n       \\<lbrakk>a = R:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), broadcast m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>D m s'a.\n       \\<lbrakk>a = (R \\<inter> D):*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>d m s'a.\n       \\<lbrakk>a = {d}:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i'.\n        \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n         \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 14 subgoals...", "with or tr'"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, \\<zeta>), broadcast m, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (broadcast m)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, \\<zeta>), broadcast m, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (broadcast m)\n\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<sigma>'", "by (rule ostep_invariantD [OF pinv, simplified])"], ["proof (state)\nthis:\n  Q \\<sigma> \\<sigma>'\n\ngoal (13 subgoals):\n 1. \\<And>D m s'a.\n       \\<lbrakk>a = (R \\<inter> D):*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>d m s'a.\n       \\<lbrakk>a = {d}:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n         \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>D m s'a.\n       \\<lbrakk>a = (R \\<inter> D):*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>d m s'a.\n       \\<lbrakk>a = {d}:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n         \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 13 subgoals...", "fix D m \\<zeta>'"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>D m s'a.\n       \\<lbrakk>a = (R \\<inter> D):*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>d m s'a.\n       \\<lbrakk>a = {d}:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n         \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 13 subgoals...", "assume \"a = (R \\<inter> D):*cast(m)\"\n         and tr': \"((\\<sigma>, \\<zeta>), groupcast D m, (\\<sigma>', \\<zeta>')) \\<in> trans T\""], ["proof (state)\nthis:\n  a = (R \\<inter> D):*cast(m)\n  ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n\ngoal (13 subgoals):\n 1. \\<And>D m s'a.\n       \\<lbrakk>a = (R \\<inter> D):*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>d m s'a.\n       \\<lbrakk>a = {d}:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n         \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 13 subgoals...", "from this(1) and \\<open>?S \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  a = (R \\<inter> D):*cast(m)\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a", "have \"otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (groupcast D m)\""], ["proof (prove)\nusing this:\n  a = (R \\<inter> D):*cast(m)\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (groupcast D m)", "by (auto elim!: otherwithE)"], ["proof (state)\nthis:\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (groupcast D m)\n\ngoal (13 subgoals):\n 1. \\<And>D m s'a.\n       \\<lbrakk>a = (R \\<inter> D):*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>d m s'a.\n       \\<lbrakk>a = {d}:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n         \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 13 subgoals...", "with or tr'"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (groupcast D m)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, \\<zeta>), groupcast D m, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (groupcast D m)\n\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<sigma>'", "by (rule ostep_invariantD [OF pinv, simplified])"], ["proof (state)\nthis:\n  Q \\<sigma> \\<sigma>'\n\ngoal (12 subgoals):\n 1. \\<And>d m s'a.\n       \\<lbrakk>a = {d}:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n         \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>d m s'a.\n       \\<lbrakk>a = {d}:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n         \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 12 subgoals...", "fix d m \\<zeta>'"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>d m s'a.\n       \\<lbrakk>a = {d}:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n         \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 12 subgoals...", "assume \"a = {d}:*cast(m)\"\n         and tr': \"((\\<sigma>, \\<zeta>), unicast d m, (\\<sigma>', \\<zeta>')) \\<in> trans T\""], ["proof (state)\nthis:\n  a = {d}:*cast(m)\n  ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n\ngoal (12 subgoals):\n 1. \\<And>d m s'a.\n       \\<lbrakk>a = {d}:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n         \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 12 subgoals...", "from this(1) and \\<open>?S \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  a = {d}:*cast(m)\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a", "have \"otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (unicast d m)\""], ["proof (prove)\nusing this:\n  a = {d}:*cast(m)\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (unicast d m)", "by (auto elim!: otherwithE)"], ["proof (state)\nthis:\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (unicast d m)\n\ngoal (12 subgoals):\n 1. \\<And>d m s'a.\n       \\<lbrakk>a = {d}:*cast(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i'.\n        \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n         \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 12 subgoals...", "with or tr'"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (unicast d m)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, \\<zeta>), unicast d m, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (unicast d m)\n\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<sigma>'", "by (rule ostep_invariantD [OF pinv, simplified])"], ["proof (state)\nthis:\n  Q \\<sigma> \\<sigma>'\n\ngoal (11 subgoals):\n 1. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i' i''.\n        \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R;\n         i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i' i''.\n        \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R;\n         i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 11 subgoals...", "fix d \\<zeta>'"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i' i''.\n        \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R;\n         i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 11 subgoals...", "assume \"a = \\<tau>\"\n         and tr': \"((\\<sigma>, \\<zeta>), \\<not>unicast d, (\\<sigma>', \\<zeta>')) \\<in> trans T\""], ["proof (state)\nthis:\n  a = \\<tau>\n  ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n\ngoal (11 subgoals):\n 1. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i' i''.\n        \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R;\n         i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 11 subgoals...", "from this(1) and \\<open>?S \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  a = \\<tau>\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a", "have \"otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (\\<not>unicast d)\""], ["proof (prove)\nusing this:\n  a = \\<tau>\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (\\<not>unicast d)", "by (auto elim!: otherwithE)"], ["proof (state)\nthis:\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (\\<not>unicast d)\n\ngoal (11 subgoals):\n 1. \\<And>d s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        d \\<notin> R;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i' i''.\n        \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R;\n         i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'\nA total of 11 subgoals...", "with or tr'"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (\\<not>unicast d)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, \\<zeta>), \\<not>unicast d, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (\\<not>unicast d)\n\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<sigma>'", "by (rule ostep_invariantD [OF pinv, simplified])"], ["proof (state)\nthis:\n  Q \\<sigma> \\<sigma>'\n\ngoal (10 subgoals):\n 1. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i' i''.\n        \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n         i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i' i''.\n        \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n         i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "fix d \\<zeta>'"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i' i''.\n        \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n         i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "assume \"a = i:deliver(d)\"\n         and tr': \"((\\<sigma>, \\<zeta>), deliver d, (\\<sigma>', \\<zeta>')) \\<in> trans T\""], ["proof (state)\nthis:\n  a = i:deliver(d)\n  ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n\ngoal (10 subgoals):\n 1. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i' i''.\n        \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n         i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "from this(1) and \\<open>?S \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  a = i:deliver(d)\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a", "have \"otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (deliver d)\""], ["proof (prove)\nusing this:\n  a = i:deliver(d)\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (deliver d)", "by (auto elim!: otherwithE)"], ["proof (state)\nthis:\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (deliver d)\n\ngoal (10 subgoals):\n 1. \\<And>d s'a.\n       \\<lbrakk>a = i:deliver(d); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 10. \\<And>i' i''.\n        \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n         i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n        \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "with or tr'"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (deliver d)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, \\<zeta>), deliver d, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (deliver d)\n\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<sigma>'", "by (rule ostep_invariantD [OF pinv, simplified])"], ["proof (state)\nthis:\n  Q \\<sigma> \\<sigma>'\n\ngoal (9 subgoals):\n 1. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "fix \\<zeta>'"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "assume \"a = \\<tau>\"\n         and tr': \"((\\<sigma>, \\<zeta>), \\<tau>, (\\<sigma>', \\<zeta>')) \\<in> trans T\""], ["proof (state)\nthis:\n  a = \\<tau>\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>') \\<in> automaton.trans T\n\ngoal (9 subgoals):\n 1. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "from this(1) and \\<open>?S \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  a = \\<tau>\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a", "have \"otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' \\<tau>\""], ["proof (prove)\nusing this:\n  a = \\<tau>\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' \\<tau>", "by (auto elim!: otherwithE)"], ["proof (state)\nthis:\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' \\<tau>\n\ngoal (9 subgoals):\n 1. \\<And>s'a.\n       \\<lbrakk>a = \\<tau>; s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', s'a)\n        \\<in> automaton.trans T;\n        \\<forall>j.\n           j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 9. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "with or tr'"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>') \\<in> automaton.trans T\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' \\<tau>", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>') \\<in> automaton.trans T\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' \\<tau>\n\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<sigma>'", "by (rule ostep_invariantD [OF pinv, simplified])"], ["proof (state)\nthis:\n  Q \\<sigma> \\<sigma>'\n\ngoal (8 subgoals):\n 1. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "fix m \\<zeta>'"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "assume \"a = {i}\\<not>{}:arrive(m)\"\n         and tr': \"((\\<sigma>, \\<zeta>), receive m, (\\<sigma>', \\<zeta>')) \\<in> trans T\""], ["proof (state)\nthis:\n  a = {i}\\<not>{}:arrive(m)\n  ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n\ngoal (8 subgoals):\n 1. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "from this(1) and \\<open>?S \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  a = {i}\\<not>{}:arrive(m)\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a", "have \"otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (receive m)\""], ["proof (prove)\nusing this:\n  a = {i}\\<not>{}:arrive(m)\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (receive m)", "by (auto elim!: otherwithE)"], ["proof (state)\nthis:\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (receive m)\n\ngoal (8 subgoals):\n 1. \\<And>m s'a.\n       \\<lbrakk>a = {i}\\<not>{}:arrive(m); s' = NodeS i s'a R;\n        ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', s'a)\n        \\<in> automaton.trans T\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 8. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "with or tr'"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (receive m)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, \\<zeta>), receive m, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans T\n  otherwith S {i} (orecvmsg I) \\<sigma> \\<sigma>' (receive m)\n\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<sigma>'", "by (rule ostep_invariantD [OF pinv, simplified])"], ["proof (state)\nthis:\n  Q \\<sigma> \\<sigma>'\n\ngoal (7 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "fix m"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "assume \"a = {}\\<not>{i}:arrive(m)\"\n         and \"\\<sigma>' i = \\<sigma> i\""], ["proof (state)\nthis:\n  a = {}\\<not>{i}:arrive(m)\n  \\<sigma>' i = \\<sigma> i\n\ngoal (7 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "from this(2)"], ["proof (chain)\npicking this:\n  \\<sigma>' i = \\<sigma> i", "have \"other U {i} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. other U {i} \\<sigma> \\<sigma>'", "by (rule *)"], ["proof (state)\nthis:\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (7 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>a = {}\\<not>{i}:arrive(m); s' = NodeS i \\<zeta> R;\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 7. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "thus ?thesis"], ["proof (prove)\nusing this:\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<sigma>'", "by (rule other)"], ["proof (state)\nthis:\n  Q \\<sigma> \\<sigma>'\n\ngoal (6 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "fix i'"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "assume \"a = connect(i, i')\"\n         and \"\\<sigma>' i = \\<sigma> i\""], ["proof (state)\nthis:\n  a = connect(i, i')\n  \\<sigma>' i = \\<sigma> i\n\ngoal (6 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "from this(2)"], ["proof (chain)\npicking this:\n  \\<sigma>' i = \\<sigma> i", "have \"other U {i} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. other U {i} \\<sigma> \\<sigma>'", "by (rule *)"], ["proof (state)\nthis:\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (6 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(i, i'); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 6. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "thus ?thesis"], ["proof (prove)\nusing this:\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<sigma>'", "by (rule other)"], ["proof (state)\nthis:\n  Q \\<sigma> \\<sigma>'\n\ngoal (5 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "fix i'"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "assume \"a = connect(i', i)\"\n         and \"\\<sigma>' i = \\<sigma> i\""], ["proof (state)\nthis:\n  a = connect(i', i)\n  \\<sigma>' i = \\<sigma> i\n\ngoal (5 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "from this(2)"], ["proof (chain)\npicking this:\n  \\<sigma>' i = \\<sigma> i", "have \"other U {i} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. other U {i} \\<sigma> \\<sigma>'", "by (rule *)"], ["proof (state)\nthis:\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (5 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = connect(i', i); s' = NodeS i \\<zeta> (R \\<union> {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 5. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "thus ?thesis"], ["proof (prove)\nusing this:\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<sigma>'", "by (rule other)"], ["proof (state)\nthis:\n  Q \\<sigma> \\<sigma>'\n\ngoal (4 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "fix i' i''"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "assume \"a = connect(i', i'')\"\n         and \"\\<sigma>' i = \\<sigma> i\""], ["proof (state)\nthis:\n  a = connect(i', i'')\n  \\<sigma>' i = \\<sigma> i\n\ngoal (4 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "from this(2)"], ["proof (chain)\npicking this:\n  \\<sigma>' i = \\<sigma> i", "have \"other U {i} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. other U {i} \\<sigma> \\<sigma>'", "by (rule *)"], ["proof (state)\nthis:\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (4 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i' i''.\n       \\<lbrakk>a = connect(i', i''); s' = NodeS i \\<zeta> R; i \\<noteq> i';\n        i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 4. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "thus ?thesis"], ["proof (prove)\nusing this:\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<sigma>'", "by (rule other)"], ["proof (state)\nthis:\n  Q \\<sigma> \\<sigma>'\n\ngoal (3 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "fix i'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "assume \"a = disconnect(i, i')\"\n         and \"\\<sigma>' i = \\<sigma> i\""], ["proof (state)\nthis:\n  a = disconnect(i, i')\n  \\<sigma>' i = \\<sigma> i\n\ngoal (3 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "from this(2)"], ["proof (chain)\npicking this:\n  \\<sigma>' i = \\<sigma> i", "have \"other U {i} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. other U {i} \\<sigma> \\<sigma>'", "by (rule *)"], ["proof (state)\nthis:\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (3 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i, i'); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 3. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "thus ?thesis"], ["proof (prove)\nusing this:\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<sigma>'", "by (rule other)"], ["proof (state)\nthis:\n  Q \\<sigma> \\<sigma>'\n\ngoal (2 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "fix i'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "assume \"a = disconnect(i', i)\"\n         and \"\\<sigma>' i = \\<sigma> i\""], ["proof (state)\nthis:\n  a = disconnect(i', i)\n  \\<sigma>' i = \\<sigma> i\n\ngoal (2 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "from this(2)"], ["proof (chain)\npicking this:\n  \\<sigma>' i = \\<sigma> i", "have \"other U {i} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. other U {i} \\<sigma> \\<sigma>'", "by (rule *)"], ["proof (state)\nthis:\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (2 subgoals):\n 1. \\<And>i'.\n       \\<lbrakk>a = disconnect(i', i); s' = NodeS i \\<zeta> (R - {i'});\n        \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'\n 2. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "thus ?thesis"], ["proof (prove)\nusing this:\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<sigma>'", "by (rule other)"], ["proof (state)\nthis:\n  Q \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "fix i' i''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "assume \"a = disconnect(i', i'')\"\n         and \"\\<sigma>' i = \\<sigma> i\""], ["proof (state)\nthis:\n  a = disconnect(i', i'')\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "from this(2)"], ["proof (chain)\npicking this:\n  \\<sigma>' i = \\<sigma> i", "have \"other U {i} \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. other U {i} \\<sigma> \\<sigma>'", "by (rule *)"], ["proof (state)\nthis:\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>i' i''.\n       \\<lbrakk>a = disconnect(i', i''); s' = NodeS i \\<zeta> R;\n        i \\<noteq> i'; i \\<noteq> i''; \\<sigma>' i = \\<sigma> i\\<rbrakk>\n       \\<Longrightarrow> Q \\<sigma> \\<sigma>'", "thus ?thesis"], ["proof (prove)\nusing this:\n  other U {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. Q \\<sigma> \\<sigma>'", "by (rule other)"], ["proof (state)\nthis:\n  Q \\<sigma> \\<sigma>'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Q \\<sigma> \\<sigma>'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma node_lift_step_statelessassm [intro]:\n  assumes \"T \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg I \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                       globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). Q (\\<sigma> i) (\\<sigma>' i))\"\n      and \"\\<And>\\<xi>. Q \\<xi> \\<xi>\"\n    shows \"\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). Q (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. oarrivemsg I \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     Q (\\<sigma> i) (\\<sigma>' i))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. oarrivemsg I \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     Q (\\<sigma> i) (\\<sigma>' i))", "from assms(1)"], ["proof (chain)\npicking this:\n  T \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg I \\<sigma>,\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                               Q (\\<sigma> i) (\\<sigma>' i))", "have \"T \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i} (orecvmsg I), other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                  globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). Q (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\nusing this:\n  T \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg I \\<sigma>,\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                               Q (\\<sigma> i) (\\<sigma>' i))\n\ngoal (1 subgoal):\n 1. T \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i} (orecvmsg I),\n                            other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala\n                             (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                 Q (\\<sigma> i) (\\<sigma>' i))", "by rule auto"], ["proof (state)\nthis:\n  T \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i} (orecvmsg I),\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                               Q (\\<sigma> i) (\\<sigma>' i))\n\ngoal (1 subgoal):\n 1. \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. oarrivemsg I \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     Q (\\<sigma> i) (\\<sigma>' i))", "with assms(2)"], ["proof (chain)\npicking this:\n  Q ?\\<xi> ?\\<xi>\n  T \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i} (orecvmsg I),\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                               Q (\\<sigma> i) (\\<sigma>' i))", "have \"\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i} (oarrivemsg I),\n                                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                                         globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). Q (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\nusing this:\n  Q ?\\<xi> ?\\<xi>\n  T \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i} (orecvmsg I),\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                               Q (\\<sigma> i) (\\<sigma>' i))\n\ngoal (1 subgoal):\n 1. \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (otherwith\n                                 (\\<lambda>_ _. True) {i} (oarrivemsg I),\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     Q (\\<sigma> i) (\\<sigma>' i))", "by - (rule node_lift_step, auto)"], ["proof (state)\nthis:\n  \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (otherwith\n                               (\\<lambda>_ _. True) {i} (oarrivemsg I),\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                   Q (\\<sigma> i) (\\<sigma>' i))\n\ngoal (1 subgoal):\n 1. \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. oarrivemsg I \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     Q (\\<sigma> i) (\\<sigma>' i))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (otherwith\n                               (\\<lambda>_ _. True) {i} (oarrivemsg I),\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                   Q (\\<sigma> i) (\\<sigma>' i))\n\ngoal (1 subgoal):\n 1. \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. oarrivemsg I \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     Q (\\<sigma> i) (\\<sigma>' i))", "by rule auto"], ["proof (state)\nthis:\n  \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                 _. oarrivemsg I \\<sigma>,\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                   Q (\\<sigma> i) (\\<sigma>' i))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma node_lift_anycast [intro]:\n  assumes pinv: \"T \\<Turnstile>\\<^sub>A (otherwith S {i} (orecvmsg I), other U {i} \\<rightarrow>)\n                       globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). anycast (Q \\<sigma> \\<sigma>') a)\"\n      and \"\\<And>\\<xi> \\<xi>'. S \\<xi> \\<xi>' \\<Longrightarrow> U \\<xi> \\<xi>'\"\n    shows \"\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (otherwith S {i} (oarrivemsg I), other U {i} \\<rightarrow>)\n                            globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). castmsg (Q \\<sigma> \\<sigma>') a)\"\n    (is \"_ \\<Turnstile>\\<^sub>A (?S, ?U \\<rightarrow>) _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (otherwith\n                                 S {i} (oarrivemsg I),\n                                other U {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                     castmsg (Q \\<sigma> \\<sigma>') a)", "proof (rule ostep_invariantI, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {i} (oarrivemsg I)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> castmsg (Q \\<sigma> \\<sigma>') a", "fix \\<sigma> s a \\<sigma>' s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {i} (oarrivemsg I)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> castmsg (Q \\<sigma> \\<sigma>') a", "assume rs: \"(\\<sigma>, s) \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) ?S ?U\"\n       and tr: \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\"\n       and \"?S \\<sigma> \\<sigma>' a\""], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {i} (oarrivemsg I)) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {i} (oarrivemsg I)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> castmsg (Q \\<sigma> \\<sigma>') a", "from this(1-2)"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {i} (oarrivemsg I)) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)", "obtain \\<zeta> R\n      where [simp]: \"s = NodeS i \\<zeta> R\"\n        and \"(\\<sigma>, NodeS i \\<zeta> R) \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o) ?S ?U\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {i} (oarrivemsg I)) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta> R.\n        \\<lbrakk>s = NodeS i \\<zeta> R;\n         (\\<sigma>, NodeS i \\<zeta> R)\n         \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                (otherwith S {i} (oarrivemsg I)) (other U {i})\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis node_net_state)"], ["proof (state)\nthis:\n  s = NodeS i \\<zeta> R\n  (\\<sigma>, NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {i} (oarrivemsg I)) (other U {i})\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {i} (oarrivemsg I)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> castmsg (Q \\<sigma> \\<sigma>') a", "from this(2)"], ["proof (chain)\npicking this:\n  (\\<sigma>, NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {i} (oarrivemsg I)) (other U {i})", "have \"(\\<sigma>, \\<zeta>) \\<in> oreachable T (otherwith S {i} (orecvmsg I)) ?U\""], ["proof (prove)\nusing this:\n  (\\<sigma>, NodeS i \\<zeta> R)\n  \\<in> oreachable (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n         (otherwith S {i} (oarrivemsg I)) (other U {i})\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})", "by (rule node_proc_reachable [OF _ assms(2)])"], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {i} (oarrivemsg I)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> castmsg (Q \\<sigma> \\<sigma>') a", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {i} (oarrivemsg I)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> castmsg (Q \\<sigma> \\<sigma>') a", "from tr"], ["proof (chain)\npicking this:\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)", "have \"((\\<sigma>, NodeS i \\<zeta> R), a, (\\<sigma>', s')) \\<in> onode_sos (trans T)\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS i \\<zeta> R), a, \\<sigma>', s')\n    \\<in> onode_sos (automaton.trans T)", "by (simp add: onode_comps)"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS i \\<zeta> R), a, \\<sigma>', s')\n  \\<in> onode_sos (automaton.trans T)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       (otherwith S {i} (oarrivemsg I)) (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o);\n        otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> castmsg (Q \\<sigma> \\<sigma>') a", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, NodeS i \\<zeta> R), a, \\<sigma>', s')\n  \\<in> onode_sos (automaton.trans T)", "show \"castmsg (Q \\<sigma> \\<sigma>') a\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, NodeS i \\<zeta> R), a, \\<sigma>', s')\n  \\<in> onode_sos (automaton.trans T)\n\ngoal (1 subgoal):\n 1. castmsg (Q \\<sigma> \\<sigma>') a", "using \\<open>?S \\<sigma> \\<sigma>' a\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable T (otherwith S {i} (orecvmsg I)) (other U {i})\n  ((\\<sigma>, NodeS i \\<zeta> R), a, \\<sigma>', s')\n  \\<in> onode_sos (automaton.trans T)\n  otherwith S {i} (oarrivemsg I) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. castmsg (Q \\<sigma> \\<sigma>') a", "by - (erule onode_sos.cases, auto elim!: otherwithE dest!: ostep_invariantD [OF pinv])"], ["proof (state)\nthis:\n  castmsg (Q \\<sigma> \\<sigma>') a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma node_lift_anycast_statelessassm [intro]:\n  assumes pinv: \"T \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg I \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                       globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). anycast (Q \\<sigma> \\<sigma>') a)\"\n    shows \"\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). castmsg (Q \\<sigma> \\<sigma>') a)\"\n    (is \"_ \\<Turnstile>\\<^sub>A (?S, _ \\<rightarrow>) _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. oarrivemsg I \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                     castmsg (Q \\<sigma> \\<sigma>') a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. oarrivemsg I \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                     castmsg (Q \\<sigma> \\<sigma>') a)", "from assms(1)"], ["proof (chain)\npicking this:\n  T \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg I \\<sigma>,\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                               anycast (Q \\<sigma> \\<sigma>') a)", "have \"T \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i} (orecvmsg I), other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                  globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). anycast (Q \\<sigma> \\<sigma>') a)\""], ["proof (prove)\nusing this:\n  T \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg I \\<sigma>,\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                               anycast (Q \\<sigma> \\<sigma>') a)\n\ngoal (1 subgoal):\n 1. T \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i} (orecvmsg I),\n                            other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala\n                             (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                 anycast (Q \\<sigma> \\<sigma>') a)", "by rule auto"], ["proof (state)\nthis:\n  T \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i} (orecvmsg I),\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                               anycast (Q \\<sigma> \\<sigma>') a)\n\ngoal (1 subgoal):\n 1. \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. oarrivemsg I \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                     castmsg (Q \\<sigma> \\<sigma>') a)", "hence \"\\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i} (oarrivemsg I), other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                            globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). castmsg (Q \\<sigma> \\<sigma>') a)\""], ["proof (prove)\nusing this:\n  T \\<Turnstile>\\<^sub>A (otherwith (\\<lambda>_ _. True) {i} (orecvmsg I),\n                          other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                               anycast (Q \\<sigma> \\<sigma>') a)\n\ngoal (1 subgoal):\n 1. \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (otherwith\n                                 (\\<lambda>_ _. True) {i} (oarrivemsg I),\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                     castmsg (Q \\<sigma> \\<sigma>') a)", "by (rule node_lift_anycast) simp_all"], ["proof (state)\nthis:\n  \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (otherwith\n                               (\\<lambda>_ _. True) {i} (oarrivemsg I),\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                   castmsg (Q \\<sigma> \\<sigma>') a)\n\ngoal (1 subgoal):\n 1. \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. oarrivemsg I \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                     castmsg (Q \\<sigma> \\<sigma>') a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (otherwith\n                               (\\<lambda>_ _. True) {i} (oarrivemsg I),\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                   castmsg (Q \\<sigma> \\<sigma>') a)\n\ngoal (1 subgoal):\n 1. \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. oarrivemsg I \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                     castmsg (Q \\<sigma> \\<sigma>') a)", "by rule auto"], ["proof (state)\nthis:\n  \\<langle>i : T : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                 _. oarrivemsg I \\<sigma>,\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                   castmsg (Q \\<sigma> \\<sigma>') a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma node_local_deliver:\n  \"\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) globala (\\<lambda>(_, a, _). \\<forall>j. j\\<noteq>i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (S,\n        U \\<rightarrow>)\n        globala\n         (\\<lambda>(uu_, a, uu_).\n             \\<forall>j.\n                j \\<noteq> i \\<longrightarrow>\n                (\\<forall>d. a \\<noteq> j:deliver(d)))", "proof (rule ostep_invariantI, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       S U;\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j.\n                            j \\<noteq> i \\<longrightarrow>\n                            (\\<forall>d. a \\<noteq> j:deliver(d))", "fix \\<sigma> s a \\<sigma>' s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       S U;\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j.\n                            j \\<noteq> i \\<longrightarrow>\n                            (\\<forall>d. a \\<noteq> j:deliver(d))", "assume 1: \"(\\<sigma>, s) \\<in> oreachable (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n       and 2: \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\"\n       and \"S \\<sigma> \\<sigma>' a\""], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       S U;\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j.\n                            j \\<noteq> i \\<longrightarrow>\n                            (\\<forall>d. a \\<noteq> j:deliver(d))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       S U;\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j.\n                            j \\<noteq> i \\<longrightarrow>\n                            (\\<forall>d. a \\<noteq> j:deliver(d))", "from 1 2"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)", "obtain \\<zeta> R \\<zeta>' R' where \"s = NodeS i \\<zeta> R\" and \"s' = NodeS i \\<zeta>' R'\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta> R \\<zeta>' R'.\n        \\<lbrakk>s = NodeS i \\<zeta> R; s' = NodeS i \\<zeta>' R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  s = NodeS i \\<zeta> R\n  s' = NodeS i \\<zeta>' R'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       S U;\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S \\<sigma> \\<sigma>' a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j.\n                            j \\<noteq> i \\<longrightarrow>\n                            (\\<forall>d. a \\<noteq> j:deliver(d))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S \\<sigma> \\<sigma>' a\n  s = NodeS i \\<zeta> R\n  s' = NodeS i \\<zeta>' R'", "show \"\\<forall>j. j\\<noteq>i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S \\<sigma> \\<sigma>' a\n  s = NodeS i \\<zeta> R\n  s' = NodeS i \\<zeta>' R'\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<noteq> i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d))", "by (cases a) (auto simp add: onode_comps)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma node_tau_deliver_unchanged:\n  \"\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (S, U \\<rightarrow>) globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d))\n                                                     \\<longrightarrow> (\\<forall>j. j\\<noteq>i \\<longrightarrow> \\<sigma>' j = \\<sigma> j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (S,\n        U \\<rightarrow>)\n        globala\n         (\\<lambda>(\\<sigma>, a, \\<sigma>').\n             a = \\<tau> \\<or>\n             (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n             (\\<forall>j.\n                 j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j))", "proof (rule ostep_invariantI, clarsimp simp only: globalasimp snd_conv fst_conv)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s' j.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       S U;\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S \\<sigma> \\<sigma>' a;\n        a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' j = \\<sigma> j", "fix \\<sigma> s a \\<sigma>' s' j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s' j.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       S U;\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S \\<sigma> \\<sigma>' a;\n        a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' j = \\<sigma> j", "assume 1: \"(\\<sigma>, s) \\<in> oreachable (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\"\n       and 2: \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\"\n       and \"S \\<sigma> \\<sigma>' a\"\n       and \"a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d))\"\n       and \"j \\<noteq> i\""], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S \\<sigma> \\<sigma>' a\n  a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d))\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s' j.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       S U;\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S \\<sigma> \\<sigma>' a;\n        a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' j = \\<sigma> j", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S \\<sigma> \\<sigma>' a\n  a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d))\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s' j.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       S U;\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S \\<sigma> \\<sigma>' a;\n        a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' j = \\<sigma> j", "from 1 2"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)", "obtain \\<zeta> R \\<zeta>' R' where \"s = NodeS i \\<zeta> R\" and \"s' = NodeS i \\<zeta>' R'\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta> R \\<zeta>' R'.\n        \\<lbrakk>s = NodeS i \\<zeta> R; s' = NodeS i \\<zeta>' R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  s = NodeS i \\<zeta> R\n  s' = NodeS i \\<zeta>' R'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s' j.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n                       S U;\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans\n               (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o);\n        S \\<sigma> \\<sigma>' a;\n        a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d));\n        j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' j = \\<sigma> j", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S \\<sigma> \\<sigma>' a\n  a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d))\n  j \\<noteq> i\n  s = NodeS i \\<zeta> R\n  s' = NodeS i \\<zeta>' R'", "show \"\\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o) S U\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans\n         (\\<langle>i : \\<zeta>\\<^sub>i : R\\<^sub>i\\<rangle>\\<^sub>o)\n  S \\<sigma> \\<sigma>' a\n  a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d))\n  j \\<noteq> i\n  s = NodeS i \\<zeta> R\n  s' = NodeS i \\<zeta>' R'\n\ngoal (1 subgoal):\n 1. \\<sigma>' j = \\<sigma> j", "by (cases a) (auto simp del: step_node_tau simp add: onode_comps)"], ["proof (state)\nthis:\n  \\<sigma>' j = \\<sigma> j\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}