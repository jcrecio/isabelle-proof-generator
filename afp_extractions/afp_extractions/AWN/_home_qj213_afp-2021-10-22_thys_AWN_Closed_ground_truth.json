{"file_name": "/home/qj213/afp-2021-10-22/thys/AWN/Closed.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AWN", "problem_names": ["lemma complete_net_preserves_subnets:\n  assumes \"(SubnetS s t, a, st') \\<in> cnet_sos (pnet_sos (trans (pnet np p1)) (trans (pnet np p2)))\"\n    shows \"\\<exists>s' t'. st' = SubnetS s' t'\"", "lemma complete_net_reachable_is_subnet:\n  assumes \"st \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\"\n    shows \"\\<exists>s t. st = SubnetS s t\"", "lemma closed_reachable_par_subnet_induct [consumes, case_names init step]:\n  assumes \"SubnetS s t \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\"\n      and init: \"\\<And>s t. SubnetS s t \\<in> init (closed (pnet np (p1 \\<parallel> p2))) \\<Longrightarrow> P s t\"\n      and step: \"\\<And>s t s' t' a. \\<lbrakk>\n                    SubnetS s t \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I;\n                    P s t; (SubnetS s t, a, SubnetS s' t') \\<in> trans (closed (pnet np (p1 \\<parallel> p2))); I a \\<rbrakk>\n                    \\<Longrightarrow> P s' t'\"\n    shows \"P s t\"", "lemma reachable_closed_reachable_pnet [elim]:\n  assumes \"s \\<in> reachable (closed (pnet np n)) TT\"\n    shows \"s \\<in> reachable (pnet np n) TT\"", "lemma closed_node_net_state [elim]:\n  assumes \"st \\<in> reachable (closed (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)) TT\"\n  obtains \\<xi> p q R where \"st = NodeS ii ((\\<xi>, p), q) R\"", "lemma closed_subnet_net_state [elim]:\n  assumes \"st \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) TT\"\n  obtains s t where \"st = SubnetS s t\"", "lemma closed_imp_pnet_trans [elim, dest]:\n  assumes \"(s, a, s') \\<in> trans (closed (pnet np n))\"\n    shows \"\\<exists>a'. (s, a', s') \\<in> trans (pnet np n)\"", "lemma reachable_not_in_net_tree_ips [elim]:\n  assumes \"s \\<in> reachable (closed (pnet np n)) TT\"\n      and \"i\\<notin>net_tree_ips n\"\n    shows \"netmap s i = None\"", "lemma closed_pnet_aodv_init [elim]:\n  assumes \"s \\<in> init (closed (pnet np n))\"\n      and \"i\\<in>net_tree_ips n\"\n    shows \"the (netmap s i) \\<in> init (np i)\""], "translations": [["", "lemma complete_net_preserves_subnets:\n  assumes \"(SubnetS s t, a, st') \\<in> cnet_sos (pnet_sos (trans (pnet np p1)) (trans (pnet np p2)))\"\n    shows \"\\<exists>s' t'. st' = SubnetS s' t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' t'. st' = SubnetS s' t'", "using assms"], ["proof (prove)\nusing this:\n  (SubnetS s t, a, st')\n  \\<in> cnet_sos\n         (pnet_sos (automaton.trans (pnet np p1))\n           (automaton.trans (pnet np p2)))\n\ngoal (1 subgoal):\n 1. \\<exists>s' t'. st' = SubnetS s' t'", "by cases (auto dest: partial_net_preserves_subnets)"], ["", "lemma complete_net_reachable_is_subnet:\n  assumes \"st \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\"\n    shows \"\\<exists>s t. st = SubnetS s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s t. st = SubnetS s t", "using assms"], ["proof (prove)\nusing this:\n  st \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\n\ngoal (1 subgoal):\n 1. \\<exists>s t. st = SubnetS s t", "by induction (auto dest!: complete_net_preserves_subnets)"], ["", "lemma closed_reachable_par_subnet_induct [consumes, case_names init step]:\n  assumes \"SubnetS s t \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\"\n      and init: \"\\<And>s t. SubnetS s t \\<in> init (closed (pnet np (p1 \\<parallel> p2))) \\<Longrightarrow> P s t\"\n      and step: \"\\<And>s t s' t' a. \\<lbrakk>\n                    SubnetS s t \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I;\n                    P s t; (SubnetS s t, a, SubnetS s' t') \\<in> trans (closed (pnet np (p1 \\<parallel> p2))); I a \\<rbrakk>\n                    \\<Longrightarrow> P s' t'\"\n    shows \"P s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P s t", "using assms(1)"], ["proof (prove)\nusing this:\n  SubnetS s t \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\n\ngoal (1 subgoal):\n 1. P s t", "proof (induction \"SubnetS s t\" arbitrary: s t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s t.\n       SubnetS s t\n       \\<in> init (closed (pnet np (p1 \\<parallel> p2))) \\<Longrightarrow>\n       P s t\n 2. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "fix s t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s t.\n       SubnetS s t\n       \\<in> init (closed (pnet np (p1 \\<parallel> p2))) \\<Longrightarrow>\n       P s t\n 2. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "assume \"SubnetS s t \\<in> init (closed (pnet np (p1 \\<parallel> p2)))\""], ["proof (state)\nthis:\n  SubnetS s t \\<in> init (closed (pnet np (p1 \\<parallel> p2)))\n\ngoal (2 subgoals):\n 1. \\<And>s t.\n       SubnetS s t\n       \\<in> init (closed (pnet np (p1 \\<parallel> p2))) \\<Longrightarrow>\n       P s t\n 2. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "with init"], ["proof (chain)\npicking this:\n  SubnetS ?s ?t\n  \\<in> init (closed (pnet np (p1 \\<parallel> p2))) \\<Longrightarrow>\n  P ?s ?t\n  SubnetS s t \\<in> init (closed (pnet np (p1 \\<parallel> p2)))", "show \"P s t\""], ["proof (prove)\nusing this:\n  SubnetS ?s ?t\n  \\<in> init (closed (pnet np (p1 \\<parallel> p2))) \\<Longrightarrow>\n  P ?s ?t\n  SubnetS s t \\<in> init (closed (pnet np (p1 \\<parallel> p2)))\n\ngoal (1 subgoal):\n 1. P s t", "."], ["proof (state)\nthis:\n  P s t\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "fix st a s' t'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "assume \"st \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\"\n       and tr: \"(st, a, SubnetS s' t') \\<in> trans (closed (pnet np (p1 \\<parallel> p2)))\"\n       and \"I a\"\n       and IH: \"\\<And>s t. st = SubnetS s t \\<Longrightarrow> P s t\""], ["proof (state)\nthis:\n  st \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\n  (st, a, SubnetS s' t')\n  \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)))\n  I a\n  st = SubnetS ?s ?t \\<Longrightarrow> P ?s ?t\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "from this(1)"], ["proof (chain)\npicking this:\n  st \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I", "obtain s t where \"st = SubnetS s t\"\n                              and \"SubnetS s t \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\""], ["proof (prove)\nusing this:\n  st \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\n\ngoal (1 subgoal):\n 1. (\\<And>s t.\n        \\<lbrakk>st = SubnetS s t;\n         SubnetS s t\n         \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis complete_net_reachable_is_subnet)"], ["proof (state)\nthis:\n  st = SubnetS s t\n  SubnetS s t \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "note this(2)"], ["proof (state)\nthis:\n  SubnetS s t \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "moreover"], ["proof (state)\nthis:\n  SubnetS s t \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "from IH and \\<open>st = SubnetS s t\\<close>"], ["proof (chain)\npicking this:\n  st = SubnetS ?s ?t \\<Longrightarrow> P ?s ?t\n  st = SubnetS s t", "have \"P s t\""], ["proof (prove)\nusing this:\n  st = SubnetS ?s ?t \\<Longrightarrow> P ?s ?t\n  st = SubnetS s t\n\ngoal (1 subgoal):\n 1. P s t", "."], ["proof (state)\nthis:\n  P s t\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "moreover"], ["proof (state)\nthis:\n  P s t\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "from tr and \\<open>st = SubnetS s t\\<close>"], ["proof (chain)\npicking this:\n  (st, a, SubnetS s' t')\n  \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)))\n  st = SubnetS s t", "have \"(SubnetS s t, a, SubnetS s' t') \\<in> trans (closed (pnet np (p1 \\<parallel> p2)))\""], ["proof (prove)\nusing this:\n  (st, a, SubnetS s' t')\n  \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)))\n  st = SubnetS s t\n\ngoal (1 subgoal):\n 1. (SubnetS s t, a, SubnetS s' t')\n    \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)))", "by simp"], ["proof (state)\nthis:\n  (SubnetS s t, a, SubnetS s' t')\n  \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)))\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "ultimately"], ["proof (chain)\npicking this:\n  SubnetS s t \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\n  P s t\n  (SubnetS s t, a, SubnetS s' t')\n  \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)))", "show \"P s' t'\""], ["proof (prove)\nusing this:\n  SubnetS s t \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\n  P s t\n  (SubnetS s t, a, SubnetS s' t')\n  \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)))\n\ngoal (1 subgoal):\n 1. P s' t'", "using \\<open>I a\\<close>"], ["proof (prove)\nusing this:\n  SubnetS s t \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) I\n  P s t\n  (SubnetS s t, a, SubnetS s' t')\n  \\<in> automaton.trans (closed (pnet np (p1 \\<parallel> p2)))\n  I a\n\ngoal (1 subgoal):\n 1. P s' t'", "by (rule assms(3))"], ["proof (state)\nthis:\n  P s' t'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reachable_closed_reachable_pnet [elim]:\n  assumes \"s \\<in> reachable (closed (pnet np n)) TT\"\n    shows \"s \\<in> reachable (pnet np n) TT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> reachable (pnet np n) TT", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> reachable (closed (pnet np n)) TT\n\ngoal (1 subgoal):\n 1. s \\<in> reachable (pnet np n) TT", "proof (induction rule: reachable.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       s \\<in> reachable (pnet np n) TT\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        s \\<in> reachable (pnet np n) TT;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> reachable (pnet np n) TT", "fix s s' a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       s \\<in> reachable (pnet np n) TT\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        s \\<in> reachable (pnet np n) TT;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> reachable (pnet np n) TT", "assume sr: \"s \\<in> reachable (pnet np n) TT\"\n       and \"(s, a, s') \\<in> trans (closed (pnet np n))\""], ["proof (state)\nthis:\n  s \\<in> reachable (pnet np n) TT\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       s \\<in> reachable (pnet np n) TT\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        s \\<in> reachable (pnet np n) TT;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> reachable (pnet np n) TT", "from this(2)"], ["proof (chain)\npicking this:\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))", "have \"(s, a, s') \\<in> cnet_sos (trans (pnet np n))\""], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))\n\ngoal (1 subgoal):\n 1. (s, a, s') \\<in> cnet_sos (automaton.trans (pnet np n))", "by simp"], ["proof (state)\nthis:\n  (s, a, s') \\<in> cnet_sos (automaton.trans (pnet np n))\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       s \\<in> reachable (pnet np n) TT\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        s \\<in> reachable (pnet np n) TT;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> reachable (pnet np n) TT", "thus \"s' \\<in> reachable (pnet np n) TT\""], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> cnet_sos (automaton.trans (pnet np n))\n\ngoal (1 subgoal):\n 1. s' \\<in> reachable (pnet np n) TT", "by cases (insert sr, auto elim!: reachable_step)"], ["proof (state)\nthis:\n  s' \\<in> reachable (pnet np n) TT\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       s \\<in> reachable (pnet np n) TT", "qed (auto elim: reachable_init)"], ["", "lemma closed_node_net_state [elim]:\n  assumes \"st \\<in> reachable (closed (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)) TT\"\n  obtains \\<xi> p q R where \"st = NodeS ii ((\\<xi>, p), q) R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<xi> p q R.\n        st = NodeS ii ((\\<xi>, p), q) R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  st \\<in> reachable (closed (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)) TT\n\ngoal (1 subgoal):\n 1. (\\<And>\\<xi> p q R.\n        st = NodeS ii ((\\<xi>, p), q) R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis net_node_reachable_is_node reachable_closed_reachable_pnet surj_pair)"], ["", "lemma closed_subnet_net_state [elim]:\n  assumes \"st \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) TT\"\n  obtains s t where \"st = SubnetS s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s t. st = SubnetS s t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  st \\<in> reachable (closed (pnet np (p1 \\<parallel> p2))) TT\n\ngoal (1 subgoal):\n 1. (\\<And>s t. st = SubnetS s t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis reachable_closed_reachable_pnet net_par_reachable_is_subnet)"], ["", "lemma closed_imp_pnet_trans [elim, dest]:\n  assumes \"(s, a, s') \\<in> trans (closed (pnet np n))\"\n    shows \"\\<exists>a'. (s, a', s') \\<in> trans (pnet np n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a'. (s, a', s') \\<in> automaton.trans (pnet np n)", "using assms"], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))\n\ngoal (1 subgoal):\n 1. \\<exists>a'. (s, a', s') \\<in> automaton.trans (pnet np n)", "by (auto elim!: cnet_sos.cases)"], ["", "lemma reachable_not_in_net_tree_ips [elim]:\n  assumes \"s \\<in> reachable (closed (pnet np n)) TT\"\n      and \"i\\<notin>net_tree_ips n\"\n    shows \"netmap s i = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netmap s i = None", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> reachable (closed (pnet np n)) TT\n  i \\<notin> net_tree_ips n\n\ngoal (1 subgoal):\n 1. netmap s i = None", "proof induction"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>s \\<in> init (closed (pnet np n));\n        i \\<notin> net_tree_ips n\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        i \\<notin> net_tree_ips n \\<Longrightarrow> netmap s i = None;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a;\n        i \\<notin> net_tree_ips n\\<rbrakk>\n       \\<Longrightarrow> netmap s' i = None", "fix s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>s \\<in> init (closed (pnet np n));\n        i \\<notin> net_tree_ips n\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        i \\<notin> net_tree_ips n \\<Longrightarrow> netmap s i = None;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a;\n        i \\<notin> net_tree_ips n\\<rbrakk>\n       \\<Longrightarrow> netmap s' i = None", "assume \"s \\<in> init (closed (pnet np n))\"\n       and \"i \\<notin> net_tree_ips n\""], ["proof (state)\nthis:\n  s \\<in> init (closed (pnet np n))\n  i \\<notin> net_tree_ips n\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>s \\<in> init (closed (pnet np n));\n        i \\<notin> net_tree_ips n\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        i \\<notin> net_tree_ips n \\<Longrightarrow> netmap s i = None;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a;\n        i \\<notin> net_tree_ips n\\<rbrakk>\n       \\<Longrightarrow> netmap s' i = None", "thus \"netmap s i = None\""], ["proof (prove)\nusing this:\n  s \\<in> init (closed (pnet np n))\n  i \\<notin> net_tree_ips n\n\ngoal (1 subgoal):\n 1. netmap s i = None", "proof (induction n arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (closed (pnet np \\<langle>ia; R\\<rangle>));\n        i \\<notin> net_tree_ips \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None\n 2. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<notin> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> netmap s i = None;\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<notin> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> netmap s i = None;\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<notin> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None", "fix ii R s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (closed (pnet np \\<langle>ia; R\\<rangle>));\n        i \\<notin> net_tree_ips \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None\n 2. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<notin> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> netmap s i = None;\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<notin> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> netmap s i = None;\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<notin> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None", "assume \"s \\<in> init (closed (pnet np \\<langle>ii; R\\<rangle>))\"\n         and \"i \\<notin> net_tree_ips \\<langle>ii; R\\<rangle>\""], ["proof (state)\nthis:\n  s \\<in> init (closed (pnet np \\<langle>ii; R\\<rangle>))\n  i \\<notin> net_tree_ips \\<langle>ii; R\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (closed (pnet np \\<langle>ia; R\\<rangle>));\n        i \\<notin> net_tree_ips \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None\n 2. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<notin> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> netmap s i = None;\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<notin> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> netmap s i = None;\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<notin> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None", "from this(2)"], ["proof (chain)\npicking this:\n  i \\<notin> net_tree_ips \\<langle>ii; R\\<rangle>", "have \"i \\<noteq> ii\""], ["proof (prove)\nusing this:\n  i \\<notin> net_tree_ips \\<langle>ii; R\\<rangle>\n\ngoal (1 subgoal):\n 1. i \\<noteq> ii", "by simp"], ["proof (state)\nthis:\n  i \\<noteq> ii\n\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (closed (pnet np \\<langle>ia; R\\<rangle>));\n        i \\<notin> net_tree_ips \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None\n 2. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<notin> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> netmap s i = None;\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<notin> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> netmap s i = None;\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<notin> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None", "moreover"], ["proof (state)\nthis:\n  i \\<noteq> ii\n\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (closed (pnet np \\<langle>ia; R\\<rangle>));\n        i \\<notin> net_tree_ips \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None\n 2. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<notin> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> netmap s i = None;\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<notin> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> netmap s i = None;\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<notin> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None", "from \\<open>s \\<in> init (closed (pnet np \\<langle>ii; R\\<rangle>))\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> init (closed (pnet np \\<langle>ii; R\\<rangle>))", "obtain p where \"s = NodeS ii p R\""], ["proof (prove)\nusing this:\n  s \\<in> init (closed (pnet np \\<langle>ii; R\\<rangle>))\n\ngoal (1 subgoal):\n 1. (\\<And>p. s = NodeS ii p R \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp (metis pnet.simps(1) pnet_node_init')"], ["proof (state)\nthis:\n  s = NodeS ii p R\n\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (closed (pnet np \\<langle>ia; R\\<rangle>));\n        i \\<notin> net_tree_ips \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None\n 2. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<notin> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> netmap s i = None;\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<notin> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> netmap s i = None;\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<notin> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None", "ultimately"], ["proof (chain)\npicking this:\n  i \\<noteq> ii\n  s = NodeS ii p R", "show \"netmap s i = None\""], ["proof (prove)\nusing this:\n  i \\<noteq> ii\n  s = NodeS ii p R\n\ngoal (1 subgoal):\n 1. netmap s i = None", "by simp"], ["proof (state)\nthis:\n  netmap s i = None\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<notin> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> netmap s i = None;\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<notin> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> netmap s i = None;\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<notin> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<notin> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> netmap s i = None;\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<notin> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> netmap s i = None;\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<notin> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None", "fix p1 p2 s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<notin> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> netmap s i = None;\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<notin> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> netmap s i = None;\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<notin> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None", "assume IH1: \"\\<And>s. s \\<in> init (closed (pnet np p1)) \\<Longrightarrow> i \\<notin> net_tree_ips p1\n                        \\<Longrightarrow> netmap s i = None\"\n         and IH2: \"\\<And>s. s \\<in> init (closed (pnet np p2)) \\<Longrightarrow> i \\<notin> net_tree_ips p2\n                        \\<Longrightarrow> netmap s i = None\"\n         and \"s \\<in> init (closed (pnet np (p1 \\<parallel> p2)))\"\n         and \"i \\<notin> net_tree_ips (p1 \\<parallel> p2)\""], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<in> init (closed (pnet np p1));\n   i \\<notin> net_tree_ips p1\\<rbrakk>\n  \\<Longrightarrow> netmap ?s i = None\n  \\<lbrakk>?s \\<in> init (closed (pnet np p2));\n   i \\<notin> net_tree_ips p2\\<rbrakk>\n  \\<Longrightarrow> netmap ?s i = None\n  s \\<in> init (closed (pnet np (p1 \\<parallel> p2)))\n  i \\<notin> net_tree_ips (p1 \\<parallel> p2)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<notin> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> netmap s i = None;\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<notin> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> netmap s i = None;\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<notin> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None", "from this(3)"], ["proof (chain)\npicking this:\n  s \\<in> init (closed (pnet np (p1 \\<parallel> p2)))", "obtain s1 s2 where \"s = SubnetS s1 s2\"\n                                  and \"s1 \\<in> init (closed (pnet np p1))\"\n                                  and \"s2 \\<in> init (closed (pnet np p2))\""], ["proof (prove)\nusing this:\n  s \\<in> init (closed (pnet np (p1 \\<parallel> p2)))\n\ngoal (1 subgoal):\n 1. (\\<And>s1 s2.\n        \\<lbrakk>s = SubnetS s1 s2; s1 \\<in> init (closed (pnet np p1));\n         s2 \\<in> init (closed (pnet np p2))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp metis"], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s1 \\<in> init (closed (pnet np p1))\n  s2 \\<in> init (closed (pnet np p2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<notin> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> netmap s i = None;\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<notin> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> netmap s i = None;\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<notin> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None", "moreover"], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s1 \\<in> init (closed (pnet np p1))\n  s2 \\<in> init (closed (pnet np p2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<notin> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> netmap s i = None;\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<notin> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> netmap s i = None;\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<notin> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None", "from \\<open>i \\<notin> net_tree_ips (p1 \\<parallel> p2)\\<close>"], ["proof (chain)\npicking this:\n  i \\<notin> net_tree_ips (p1 \\<parallel> p2)", "have \"i \\<notin> net_tree_ips p1\"\n                                                  and \"i \\<notin> net_tree_ips p2\""], ["proof (prove)\nusing this:\n  i \\<notin> net_tree_ips (p1 \\<parallel> p2)\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p1 &&& i \\<notin> net_tree_ips p2", "by auto"], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips p1\n  i \\<notin> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<notin> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> netmap s i = None;\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<notin> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> netmap s i = None;\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<notin> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None", "ultimately"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s1 \\<in> init (closed (pnet np p1))\n  s2 \\<in> init (closed (pnet np p2))\n  i \\<notin> net_tree_ips p1\n  i \\<notin> net_tree_ips p2", "have \"netmap s1 i = None\"\n                  and \"netmap s2 i = None\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s1 \\<in> init (closed (pnet np p1))\n  s2 \\<in> init (closed (pnet np p2))\n  i \\<notin> net_tree_ips p1\n  i \\<notin> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. netmap s1 i = None &&& netmap s2 i = None", "using IH1 IH2"], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s1 \\<in> init (closed (pnet np p1))\n  s2 \\<in> init (closed (pnet np p2))\n  i \\<notin> net_tree_ips p1\n  i \\<notin> net_tree_ips p2\n  \\<lbrakk>?s \\<in> init (closed (pnet np p1));\n   i \\<notin> net_tree_ips p1\\<rbrakk>\n  \\<Longrightarrow> netmap ?s i = None\n  \\<lbrakk>?s \\<in> init (closed (pnet np p2));\n   i \\<notin> net_tree_ips p2\\<rbrakk>\n  \\<Longrightarrow> netmap ?s i = None\n\ngoal (1 subgoal):\n 1. netmap s1 i = None &&& netmap s2 i = None", "by auto"], ["proof (state)\nthis:\n  netmap s1 i = None\n  netmap s2 i = None\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<notin> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> netmap s i = None;\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<notin> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> netmap s i = None;\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<notin> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> netmap s i = None", "with \\<open>s = SubnetS s1 s2\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  netmap s1 i = None\n  netmap s2 i = None", "show \"netmap s i = None\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  netmap s1 i = None\n  netmap s2 i = None\n\ngoal (1 subgoal):\n 1. netmap s i = None", "by simp"], ["proof (state)\nthis:\n  netmap s i = None\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  netmap s i = None\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        i \\<notin> net_tree_ips n \\<Longrightarrow> netmap s i = None;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a;\n        i \\<notin> net_tree_ips n\\<rbrakk>\n       \\<Longrightarrow> netmap s' i = None", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        i \\<notin> net_tree_ips n \\<Longrightarrow> netmap s i = None;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a;\n        i \\<notin> net_tree_ips n\\<rbrakk>\n       \\<Longrightarrow> netmap s' i = None", "fix s a s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        i \\<notin> net_tree_ips n \\<Longrightarrow> netmap s i = None;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a;\n        i \\<notin> net_tree_ips n\\<rbrakk>\n       \\<Longrightarrow> netmap s' i = None", "assume sr: \"s \\<in> reachable (closed (pnet np n)) TT\"\n       and tr: \"(s, a, s') \\<in> trans (closed (pnet np n))\"\n       and IH: \"i \\<notin> net_tree_ips n \\<Longrightarrow> netmap s i = None\"\n       and \"i \\<notin> net_tree_ips n\""], ["proof (state)\nthis:\n  s \\<in> reachable (closed (pnet np n)) TT\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))\n  i \\<notin> net_tree_ips n \\<Longrightarrow> netmap s i = None\n  i \\<notin> net_tree_ips n\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        i \\<notin> net_tree_ips n \\<Longrightarrow> netmap s i = None;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a;\n        i \\<notin> net_tree_ips n\\<rbrakk>\n       \\<Longrightarrow> netmap s' i = None", "from this(3-4)"], ["proof (chain)\npicking this:\n  i \\<notin> net_tree_ips n \\<Longrightarrow> netmap s i = None\n  i \\<notin> net_tree_ips n", "have \"i\\<notin>net_ips s\""], ["proof (prove)\nusing this:\n  i \\<notin> net_tree_ips n \\<Longrightarrow> netmap s i = None\n  i \\<notin> net_tree_ips n\n\ngoal (1 subgoal):\n 1. i \\<notin> net_ips s", "by auto"], ["proof (state)\nthis:\n  i \\<notin> net_ips s\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        i \\<notin> net_tree_ips n \\<Longrightarrow> netmap s i = None;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a;\n        i \\<notin> net_tree_ips n\\<rbrakk>\n       \\<Longrightarrow> netmap s' i = None", "with tr"], ["proof (chain)\npicking this:\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))\n  i \\<notin> net_ips s", "have \"i\\<notin>net_ips s'\""], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))\n  i \\<notin> net_ips s\n\ngoal (1 subgoal):\n 1. i \\<notin> net_ips s'", "by simp (erule cnet_sos.cases, (metis net_ips_is_dom_netmap pnet_maintains_dom)+)"], ["proof (state)\nthis:\n  i \\<notin> net_ips s'\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        i \\<notin> net_tree_ips n \\<Longrightarrow> netmap s i = None;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a;\n        i \\<notin> net_tree_ips n\\<rbrakk>\n       \\<Longrightarrow> netmap s' i = None", "thus \"netmap s' i = None\""], ["proof (prove)\nusing this:\n  i \\<notin> net_ips s'\n\ngoal (1 subgoal):\n 1. netmap s' i = None", "by simp"], ["proof (state)\nthis:\n  netmap s' i = None\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma closed_pnet_aodv_init [elim]:\n  assumes \"s \\<in> init (closed (pnet np n))\"\n      and \"i\\<in>net_tree_ips n\"\n    shows \"the (netmap s i) \\<in> init (np i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the (netmap s i) \\<in> init (np i)", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> init (closed (pnet np n))\n  i \\<in> net_tree_ips n\n\ngoal (1 subgoal):\n 1. the (netmap s i) \\<in> init (np i)", "proof (induction n arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (closed (pnet np \\<langle>ia; R\\<rangle>));\n        i \\<in> net_tree_ips \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)\n 2. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<in> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<in> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<in> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)", "fix ii R s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (closed (pnet np \\<langle>ia; R\\<rangle>));\n        i \\<in> net_tree_ips \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)\n 2. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<in> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<in> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<in> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)", "assume \"s \\<in> init (closed (pnet np \\<langle>ii; R\\<rangle>))\"\n       and \"i\\<in>net_tree_ips \\<langle>ii; R\\<rangle>\""], ["proof (state)\nthis:\n  s \\<in> init (closed (pnet np \\<langle>ii; R\\<rangle>))\n  i \\<in> net_tree_ips \\<langle>ii; R\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (closed (pnet np \\<langle>ia; R\\<rangle>));\n        i \\<in> net_tree_ips \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)\n 2. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<in> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<in> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<in> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)", "hence \"s \\<in> init (pnet np \\<langle>i; R\\<rangle>)\""], ["proof (prove)\nusing this:\n  s \\<in> init (closed (pnet np \\<langle>ii; R\\<rangle>))\n  i \\<in> net_tree_ips \\<langle>ii; R\\<rangle>\n\ngoal (1 subgoal):\n 1. s \\<in> init (pnet np \\<langle>i; R\\<rangle>)", "by simp"], ["proof (state)\nthis:\n  s \\<in> init (pnet np \\<langle>i; R\\<rangle>)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (closed (pnet np \\<langle>ia; R\\<rangle>));\n        i \\<in> net_tree_ips \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)\n 2. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<in> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<in> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<in> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)", "then"], ["proof (chain)\npicking this:\n  s \\<in> init (pnet np \\<langle>i; R\\<rangle>)", "obtain p where \"s = NodeS i p R\"\n                    and \"p \\<in> init (np i)\""], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np \\<langle>i; R\\<rangle>)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>s = NodeS i p R; p \\<in> init (np i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  s = NodeS i p R\n  p \\<in> init (np i)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (closed (pnet np \\<langle>ia; R\\<rangle>));\n        i \\<in> net_tree_ips \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)\n 2. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<in> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<in> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<in> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)", "with \\<open>s = NodeS i p R\\<close>"], ["proof (chain)\npicking this:\n  s = NodeS i p R\n  s = NodeS i p R\n  p \\<in> init (np i)", "have \"netmap s = [i \\<mapsto> p]\""], ["proof (prove)\nusing this:\n  s = NodeS i p R\n  s = NodeS i p R\n  p \\<in> init (np i)\n\ngoal (1 subgoal):\n 1. netmap s = [i \\<mapsto> p]", "by simp"], ["proof (state)\nthis:\n  netmap s = [i \\<mapsto> p]\n\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (closed (pnet np \\<langle>ia; R\\<rangle>));\n        i \\<in> net_tree_ips \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)\n 2. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<in> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<in> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<in> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)", "with \\<open>p \\<in> init (np i)\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> init (np i)\n  netmap s = [i \\<mapsto> p]", "show \"the (netmap s i) \\<in> init (np i)\""], ["proof (prove)\nusing this:\n  p \\<in> init (np i)\n  netmap s = [i \\<mapsto> p]\n\ngoal (1 subgoal):\n 1. the (netmap s i) \\<in> init (np i)", "by simp"], ["proof (state)\nthis:\n  the (netmap s i) \\<in> init (np i)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<in> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<in> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<in> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<in> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<in> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<in> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)", "fix p1 p2 s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<in> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<in> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<in> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)", "assume IH1: \"\\<And>s. s \\<in> init (closed (pnet np p1)) \\<Longrightarrow>\n                      i\\<in>net_tree_ips p1 \\<Longrightarrow> the (netmap s i) \\<in> init (np i)\"\n       and IH2: \"\\<And>s. s \\<in> init (closed (pnet np p2)) \\<Longrightarrow>\n                     i\\<in>net_tree_ips p2 \\<Longrightarrow> the (netmap s i) \\<in> init (np i)\"\n       and \"s \\<in> init (closed (pnet np (p1 \\<parallel> p2)))\"\n       and \"i\\<in>net_tree_ips (p1 \\<parallel> p2)\""], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<in> init (closed (pnet np p1));\n   i \\<in> net_tree_ips p1\\<rbrakk>\n  \\<Longrightarrow> the (netmap ?s i) \\<in> init (np i)\n  \\<lbrakk>?s \\<in> init (closed (pnet np p2));\n   i \\<in> net_tree_ips p2\\<rbrakk>\n  \\<Longrightarrow> the (netmap ?s i) \\<in> init (np i)\n  s \\<in> init (closed (pnet np (p1 \\<parallel> p2)))\n  i \\<in> net_tree_ips (p1 \\<parallel> p2)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<in> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<in> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<in> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)", "from this(3)"], ["proof (chain)\npicking this:\n  s \\<in> init (closed (pnet np (p1 \\<parallel> p2)))", "obtain s1 s2 where \"s = SubnetS s1 s2\"\n                                and \"s1 \\<in> init (closed (pnet np p1))\"\n                                and \"s2 \\<in> init (closed (pnet np p2))\""], ["proof (prove)\nusing this:\n  s \\<in> init (closed (pnet np (p1 \\<parallel> p2)))\n\ngoal (1 subgoal):\n 1. (\\<And>s1 s2.\n        \\<lbrakk>s = SubnetS s1 s2; s1 \\<in> init (closed (pnet np p1));\n         s2 \\<in> init (closed (pnet np p2))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s1 \\<in> init (closed (pnet np p1))\n  s2 \\<in> init (closed (pnet np p2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<in> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<in> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<in> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)", "from this(2)"], ["proof (chain)\npicking this:\n  s1 \\<in> init (closed (pnet np p1))", "have \"net_tree_ips p1 = net_ips s1\""], ["proof (prove)\nusing this:\n  s1 \\<in> init (closed (pnet np p1))\n\ngoal (1 subgoal):\n 1. net_tree_ips p1 = net_ips s1", "by (clarsimp dest!: pnet_init_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_tree_ips p1 = net_ips s1\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<in> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<in> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<in> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)", "from \\<open>s2 \\<in> init (closed (pnet np p2))\\<close>"], ["proof (chain)\npicking this:\n  s2 \\<in> init (closed (pnet np p2))", "have \"net_tree_ips p2 = net_ips s2\""], ["proof (prove)\nusing this:\n  s2 \\<in> init (closed (pnet np p2))\n\ngoal (1 subgoal):\n 1. net_tree_ips p2 = net_ips s2", "by (clarsimp dest!: pnet_init_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_tree_ips p2 = net_ips s2\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (closed (pnet np n1));\n                    i \\<in> net_tree_ips n1\\<rbrakk>\n                   \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (closed (pnet np n2));\n            i \\<in> net_tree_ips n2\\<rbrakk>\n           \\<Longrightarrow> the (netmap s i) \\<in> init (np i);\n        s \\<in> init (closed (pnet np (n1 \\<parallel> n2)));\n        i \\<in> net_tree_ips (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> the (netmap s i) \\<in> init (np i)", "show \"the (netmap s i) \\<in> init (np i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the (netmap s i) \\<in> init (np i)", "proof (cases \"i\\<in>net_tree_ips p2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)\n 2. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)", "assume \"i\\<in>net_tree_ips p2\""], ["proof (state)\nthis:\n  i \\<in> net_tree_ips p2\n\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)\n 2. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)", "with \\<open>s2 \\<in> init (closed (pnet np p2))\\<close>"], ["proof (chain)\npicking this:\n  s2 \\<in> init (closed (pnet np p2))\n  i \\<in> net_tree_ips p2", "have \"the (netmap s2 i) \\<in> init (np i)\""], ["proof (prove)\nusing this:\n  s2 \\<in> init (closed (pnet np p2))\n  i \\<in> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. the (netmap s2 i) \\<in> init (np i)", "by (rule IH2)"], ["proof (state)\nthis:\n  the (netmap s2 i) \\<in> init (np i)\n\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)\n 2. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)", "moreover"], ["proof (state)\nthis:\n  the (netmap s2 i) \\<in> init (np i)\n\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)\n 2. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)", "from \\<open>i\\<in>net_tree_ips p2\\<close> and \\<open>net_tree_ips p2 = net_ips s2\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> net_tree_ips p2\n  net_tree_ips p2 = net_ips s2", "have \"i\\<in>net_ips s2\""], ["proof (prove)\nusing this:\n  i \\<in> net_tree_ips p2\n  net_tree_ips p2 = net_ips s2\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2", "by simp"], ["proof (state)\nthis:\n  i \\<in> net_ips s2\n\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)\n 2. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)", "ultimately"], ["proof (chain)\npicking this:\n  the (netmap s2 i) \\<in> init (np i)\n  i \\<in> net_ips s2", "show ?thesis"], ["proof (prove)\nusing this:\n  the (netmap s2 i) \\<in> init (np i)\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. the (netmap s i) \\<in> init (np i)", "using \\<open>s = SubnetS s1 s2\\<close>"], ["proof (prove)\nusing this:\n  the (netmap s2 i) \\<in> init (np i)\n  i \\<in> net_ips s2\n  s = SubnetS s1 s2\n\ngoal (1 subgoal):\n 1. the (netmap s i) \\<in> init (np i)", "by (auto simp add: net_ips_is_dom_netmap)"], ["proof (state)\nthis:\n  the (netmap s i) \\<in> init (np i)\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)", "assume \"i\\<notin>net_tree_ips p2\""], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)", "with \\<open>i\\<in>net_tree_ips (p1 \\<parallel> p2)\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> net_tree_ips (p1 \\<parallel> p2)\n  i \\<notin> net_tree_ips p2", "have \"i\\<in>net_tree_ips p1\""], ["proof (prove)\nusing this:\n  i \\<in> net_tree_ips (p1 \\<parallel> p2)\n  i \\<notin> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p1", "by simp"], ["proof (state)\nthis:\n  i \\<in> net_tree_ips p1\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)", "with \\<open>s1 \\<in> init (closed (pnet np p1))\\<close>"], ["proof (chain)\npicking this:\n  s1 \\<in> init (closed (pnet np p1))\n  i \\<in> net_tree_ips p1", "have \"the (netmap s1 i) \\<in> init (np i)\""], ["proof (prove)\nusing this:\n  s1 \\<in> init (closed (pnet np p1))\n  i \\<in> net_tree_ips p1\n\ngoal (1 subgoal):\n 1. the (netmap s1 i) \\<in> init (np i)", "by (rule IH1)"], ["proof (state)\nthis:\n  the (netmap s1 i) \\<in> init (np i)\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)", "moreover"], ["proof (state)\nthis:\n  the (netmap s1 i) \\<in> init (np i)\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)", "from \\<open>i\\<in>net_tree_ips p1\\<close> and \\<open>net_tree_ips p1 = net_ips s1\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> net_tree_ips p1\n  net_tree_ips p1 = net_ips s1", "have \"i\\<in>net_ips s1\""], ["proof (prove)\nusing this:\n  i \\<in> net_tree_ips p1\n  net_tree_ips p1 = net_ips s1\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s1", "by simp"], ["proof (state)\nthis:\n  i \\<in> net_ips s1\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)", "moreover"], ["proof (state)\nthis:\n  i \\<in> net_ips s1\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)", "from \\<open>i\\<notin>net_tree_ips p2\\<close> and \\<open>net_tree_ips p2 = net_ips s2\\<close>"], ["proof (chain)\npicking this:\n  i \\<notin> net_tree_ips p2\n  net_tree_ips p2 = net_ips s2", "have \"i\\<notin>net_ips s2\""], ["proof (prove)\nusing this:\n  i \\<notin> net_tree_ips p2\n  net_tree_ips p2 = net_ips s2\n\ngoal (1 subgoal):\n 1. i \\<notin> net_ips s2", "by simp"], ["proof (state)\nthis:\n  i \\<notin> net_ips s2\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    the (netmap s i) \\<in> init (np i)", "ultimately"], ["proof (chain)\npicking this:\n  the (netmap s1 i) \\<in> init (np i)\n  i \\<in> net_ips s1\n  i \\<notin> net_ips s2", "show ?thesis"], ["proof (prove)\nusing this:\n  the (netmap s1 i) \\<in> init (np i)\n  i \\<in> net_ips s1\n  i \\<notin> net_ips s2\n\ngoal (1 subgoal):\n 1. the (netmap s i) \\<in> init (np i)", "using \\<open>s = SubnetS s1 s2\\<close>"], ["proof (prove)\nusing this:\n  the (netmap s1 i) \\<in> init (np i)\n  i \\<in> net_ips s1\n  i \\<notin> net_ips s2\n  s = SubnetS s1 s2\n\ngoal (1 subgoal):\n 1. the (netmap s i) \\<in> init (np i)", "by (simp add: map_add_dom_app_simps net_ips_is_dom_netmap)"], ["proof (state)\nthis:\n  the (netmap s i) \\<in> init (np i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  the (netmap s i) \\<in> init (np i)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}