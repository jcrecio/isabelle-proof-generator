{"file_name": "/home/qj213/afp-2021-10-22/thys/AWN/Toy.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AWN", "problem_names": ["lemma pkt_simp [simp]:\n  \"pkt(no, sid) = Pkt no sid\"", "lemma not_eq_newpkt_pkt [simp]: \"\\<not>eq_newpkt (Pkt no sid)\"", "lemma some_neq_not_eq [simp]: \"\\<not>((SOME x :: nat. x \\<noteq> i) = i)\"", "lemma clear_locals_but_not_globals [simp]:\n  \"id (clear_locals \\<xi>) = id \\<xi>\"\n  \"no (clear_locals \\<xi>) = no \\<xi>\"\n  \"nhid (clear_locals \\<xi>) = nhid \\<xi>\"", "lemmas is_msg_defs =\n  is_pkt_def is_newpkt_def", "lemma is_msg_inv_id [simp]:\n  \"\\<xi>' \\<in> is_pkt \\<xi>    \\<Longrightarrow> id \\<xi>' = id \\<xi>\"\n  \"\\<xi>' \\<in> is_newpkt \\<xi> \\<Longrightarrow> id \\<xi>' = id \\<xi>\"", "lemma is_msg_inv_sid [simp]:\n  \"\\<xi>' \\<in> is_newpkt \\<xi> \\<Longrightarrow> sid \\<xi>' = sid \\<xi>\"", "lemma is_msg_inv_no [simp]:\n  \"\\<xi>' \\<in> is_pkt \\<xi>    \\<Longrightarrow> no \\<xi>' = no \\<xi>\"\n  \"\\<xi>' \\<in> is_newpkt \\<xi> \\<Longrightarrow> no \\<xi>' = no \\<xi>\"", "lemma is_msg_inv_nhid [simp]:\n  \"\\<xi>' \\<in> is_pkt \\<xi>    \\<Longrightarrow> nhid \\<xi>' = nhid \\<xi>\"\n  \"\\<xi>' \\<in> is_newpkt \\<xi> \\<Longrightarrow> nhid \\<xi>' = nhid \\<xi>\"", "lemma is_msg_inv_msg [simp]:\n  \"\\<xi>' \\<in> is_pkt \\<xi>    \\<Longrightarrow> msg \\<xi>' = msg \\<xi>\"\n  \"\\<xi>' \\<in> is_newpkt \\<xi> \\<Longrightarrow> msg \\<xi>' = msg \\<xi>\"", "lemmas \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_simps [simp, code] = \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y.simps [simplified]", "lemma \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton_wf [simp]:\n  \"wellformed \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton\"", "lemmas \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton_simps [simp, code] = \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton.simps [simplified \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_simps seqp_skeleton.simps]", "lemma toy_proc_cases [dest]:\n  fixes p pn\n  assumes \"p \\<in> ctermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pn)\"\n    shows \"p \\<in> ctermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)\"", "lemma toy_trans: \"trans (ptoy i) = seqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\"", "lemma toy_control_within [simp]: \"control_within \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (init (ptoy i))\"", "lemma toy_wf [simp]:\n  \"wellformed \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\"", "lemmas toy_labels_not_empty [simp] = labels_not_empty [OF toy_wf]", "lemma toy_ex_label [intro]: \"\\<exists>l. l\\<in>labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p\"", "lemma toy_ex_labelE [elim]:\n  assumes \"\\<forall>l\\<in>labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p. P l p\"\n      and \"\\<exists>p l. P l p \\<Longrightarrow> Q\"\n    shows \"Q\"", "lemma toy_simple_labels [simp]: \"simple_labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\"", "lemma \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y_labels [simp]: \"(\\<xi>, p) \\<in> \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y i \\<Longrightarrow>  labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p = {PToy-:0}\"", "lemma initiali_toy [intro!, simp]: \"initiali i (init (optoy i)) (init (ptoy i))\"", "lemma oaodv_control_within [simp]: \"control_within \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (init (optoy i))\"", "lemma \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y_labels [simp]: \"(\\<sigma>, p) \\<in> \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y \\<Longrightarrow>  labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p = {PToy-:0}\"", "lemma otoy_trans: \"trans (optoy i) = oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i\"", "lemma msg_sender_simps [simp]:\n  \"\\<And>d did sid. msg_sender (Pkt d sid) = sid\"", "lemma msg_okI [intro]:\n  assumes \"\\<And>num' sid'. m = Pkt num' sid' \\<Longrightarrow> num' \\<le> no (\\<sigma> sid')\"\n    shows \"msg_ok \\<sigma> m\"", "lemma msg_ok_Pkt [simp]:\n  \"msg_ok \\<sigma> (Pkt data src) = (data \\<le> no (\\<sigma> src))\"", "lemma msg_ok_pkt [simp]:\n  \"msg_ok \\<sigma> (pkt(data, src)) = (data \\<le> no (\\<sigma> src))\"", "lemma msg_ok_Newpkt [simp]:\n  \"msg_ok \\<sigma> (Newpkt data dst)\"", "lemma msg_ok_newpkt [simp]:\n  \"msg_ok \\<sigma> (newpkt(data, dst))\"", "lemma seq_no_leq_num:\n  \"ptoy i \\<TTurnstile> onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<xi>, l). l\\<in>{PToy-:7..PToy-:8} \\<longrightarrow> no \\<xi> \\<le> num \\<xi>)\"", "lemma seq_nos_incs:\n  \"ptoy i \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>((\\<xi>, _), _, (\\<xi>', _)). nos_inc \\<xi> \\<xi>')\"", "lemma seq_nos_incs':\n  \"ptoy i \\<TTurnstile>\\<^sub>A (\\<lambda>((\\<xi>, _), _, (\\<xi>', _)). nos_inc \\<xi> \\<xi>')\"", "lemma sender_ip_valid:\n  \"ptoy i \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>((\\<xi>, _), a, _). anycast (\\<lambda>m. msg_sender m = id \\<xi>) a)\"", "lemma id_constant:\n  \"ptoy i \\<TTurnstile> onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<xi>, _). id \\<xi> = i)\"", "lemma nhid_eq_id:\n  \"ptoy i \\<TTurnstile> onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<xi>, l). l\\<in>{PToy-:2..PToy-:8} \\<longrightarrow> nhid \\<xi> = id \\<xi>)\"", "lemma seq_msg_ok:\n  \"ptoy i \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>((\\<xi>, _), a, _).\n                anycast (\\<lambda>m. case m of Pkt num' sid' \\<Rightarrow> num' = no \\<xi> \\<and> sid' = i | _ \\<Rightarrow> True) a)\"", "lemma nhid_eq_i:\n  \"ptoy i \\<TTurnstile> onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<xi>, l). l\\<in>{PToy-:2..PToy-:8} \\<longrightarrow> nhid \\<xi> = i)\"", "lemma nos_incD [dest]:\n  assumes \"nos_inc \\<xi> \\<xi>'\"\n    shows \"no \\<xi> \\<le> no \\<xi>'\"", "lemma nos_inc_simp [simp]:\n  \"nos_inc \\<xi> \\<xi>' = (no \\<xi> \\<le> no \\<xi>')\"", "lemmas oseq_nos_incs =\n  open_seq_step_invariant [OF seq_nos_incs initiali_toy otoy_trans toy_trans,\n                           simplified seqll_onll_swap]", "lemmas oseq_no_leq_num =\n  open_seq_invariant [OF seq_no_leq_num initiali_toy otoy_trans toy_trans,\n                      simplified seql_onl_swap]", "lemma all_nos_inc:\n  shows \"optoy i \\<Turnstile>\\<^sub>A (otherwith nos_inc {i} S,\n                      other nos_inc {i} \\<rightarrow>)\n                       onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>((\\<sigma>, _), a, (\\<sigma>', _)). (\\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)))\"", "lemma oreceived_msg_inv:\n  assumes other: \"\\<And>\\<sigma> \\<sigma>' m. \\<lbrakk> P \\<sigma> m; other Q {i} \\<sigma> \\<sigma>' \\<rbrakk> \\<Longrightarrow> P \\<sigma>' m\"\n      and local: \"\\<And>\\<sigma> m. P \\<sigma> m \\<Longrightarrow> P (\\<sigma>(i := \\<sigma> i\\<lparr>msg := m\\<rparr>)) m\"\n    shows \"optoy i \\<Turnstile> (otherwith Q {i} (orecvmsg P), other Q {i} \\<rightarrow>)\n                       onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<sigma>, l). l \\<in> {PToy-:1} \\<longrightarrow> P \\<sigma> (msg (\\<sigma> i)))\"", "lemma msg_ok_other_nos_inc [elim]:\n  assumes \"msg_ok \\<sigma> m\"\n      and \"other nos_inc {i} \\<sigma> \\<sigma>'\"\n    shows \"msg_ok \\<sigma>' m\"", "lemma msg_ok_no_leq_no [simp, elim]:\n  assumes \"msg_ok \\<sigma> m\"\n      and \"\\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)\"\n    shows \"msg_ok \\<sigma>' m\"", "lemma oreceived_msg_ok:\n  \"optoy i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n               other nos_inc {i} \\<rightarrow>)\n              onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<sigma>, l). l\\<in>{PToy-:1..} \\<longrightarrow> msg_ok \\<sigma> (msg (\\<sigma> i)))\"\n  (is \"_ \\<Turnstile> (?S, ?U \\<rightarrow>) _\")", "lemma is_pkt_handler_num_leq_no:\n  shows \"optoy i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                      other nos_inc {i} \\<rightarrow>)\n                    onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<sigma>, l). l\\<in>{PToy-:6..PToy-:10} \\<longrightarrow> num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i))))\"", "lemmas oseq_id_constant =\n  open_seq_invariant [OF id_constant initiali_toy otoy_trans toy_trans,\n                      simplified seql_onl_swap]", "lemmas oseq_nhid_eq_i =\n  open_seq_invariant [OF nhid_eq_i initiali_toy otoy_trans toy_trans,\n                      simplified seql_onl_swap]", "lemmas oseq_nhid_eq_id =\n  open_seq_invariant [OF nhid_eq_id initiali_toy otoy_trans toy_trans,\n                      simplified seql_onl_swap]", "lemma oseq_bigger_than_next:\n  shows \"optoy i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                      other nos_inc {i} \\<rightarrow>) global (\\<lambda>\\<sigma>. no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\"\n    (is \"_ \\<Turnstile> (?S, ?U \\<rightarrow>) ?P\")", "lemma anycast_weakenE [elim]:\n  assumes \"anycast P a\"\n      and \"\\<And>m. P m \\<Longrightarrow> Q m\"\n  shows \"anycast Q a\"", "lemma oseq_msg_ok:\n  \"optoy i \\<Turnstile>\\<^sub>A (act TT, other U {i} \\<rightarrow>) globala (\\<lambda>(\\<sigma>, a, _). anycast (msg_ok \\<sigma>) a)\"", "lemma opar_bigger_than_next:\n  shows \"optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                      other nos_inc {i} \\<rightarrow>) global (\\<lambda>\\<sigma>. no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\"", "lemma onode_bigger_than_next:\n  \"\\<langle>i : optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o\n     \\<Turnstile> (otherwith nos_inc {i} (oarrivemsg msg_ok), other nos_inc {i} \\<rightarrow>)\n        global (\\<lambda>\\<sigma>. no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\"", "lemma node_local_nos_inc:\n  \"\\<langle>i : optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_ _. True) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                                     globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). nos_inc (\\<sigma> i) (\\<sigma>' i))\"", "lemma opnet_bigger_than_next:\n  \"opnet (\\<lambda>i. optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) n\n     \\<Turnstile> (otherwith nos_inc (net_tree_ips n) (oarrivemsg msg_ok),\n         other nos_inc (net_tree_ips n) \\<rightarrow>)\n        global (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips n. no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\"", "lemma ocnet_bigger_than_next:\n  \"oclosed (opnet (\\<lambda>i. optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) n)\n     \\<Turnstile> (\\<lambda>_ _ _. True, other nos_inc (net_tree_ips n) \\<rightarrow>)\n        global (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips n. no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\"", "lemma not_in_net_ips_fst_init_missing [simp]:\n  assumes \"i \\<notin> net_ips \\<sigma>\"\n    shows \"fst (initmissing (netgmap fst \\<sigma>)) i = toy_init i\"", "lemma fst_initmissing_netgmap_pair_fst [simp]:\n  \"fst (initmissing (netgmap (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q)) s))\n                                               = fst (initmissing (netgmap fst s))\"", "lemma fst_initmissing_netgmap_default_toy_init_netlift:\n  \"fst (initmissing (netgmap sr s)) = default toy_init (netlift sr s)\"", "lemma bigger_than_next:\n  assumes \"wf_net_tree n\"\n  shows \"closed (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n) \\<TTurnstile> netglobal (\\<lambda>\\<sigma>. \\<forall>i. no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\"\n        (is \"_ \\<TTurnstile> netglobal (\\<lambda>\\<sigma>. \\<forall>i. ?inv \\<sigma> i)\")"], "translations": [["", "lemma pkt_simp [simp]:\n  \"pkt(no, sid) = Pkt no sid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pkt (no, sid) = Pkt no sid", "unfolding pkt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (no, sid) of (no, sid) \\<Rightarrow> Pkt no sid) = Pkt no sid", "by simp"], ["", "lemma not_eq_newpkt_pkt [simp]: \"\\<not>eq_newpkt (Pkt no sid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eq_newpkt (Pkt no sid)", "unfolding eq_newpkt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (case Pkt no sid of Pkt nat1 nat2 \\<Rightarrow> False\n            | Newpkt d did \\<Rightarrow> True)", "by simp"], ["", "subsection \"Protocol model\""], ["", "record state =\n  id    :: \"nat\"\n  no    :: \"nat\"\n  nhid  :: \"nat\"\n  (* all locals *)\n  msg    :: \"msg\"\n  num    :: \"nat\"\n  sid    :: \"nat\""], ["", "abbreviation toy_init :: \"ip \\<Rightarrow> state\"\nwhere \"toy_init i \\<equiv> \\<lparr>\n         id = i,\n         no = 0,\n         nhid = i,\n\n         msg    = (SOME x. True),\n         num    = (SOME x. True),\n         sid    = (SOME x. True)\n       \\<rparr>\""], ["", "lemma some_neq_not_eq [simp]: \"\\<not>((SOME x :: nat. x \\<noteq> i) = i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME x. x \\<noteq> i) \\<noteq> i", "by (subst some_eq_ex) (metis zero_neq_numeral)"], ["", "definition clear_locals :: \"state \\<Rightarrow> state\"\nwhere \"clear_locals \\<xi> = \\<xi> \\<lparr>\n    msg    := (SOME x. True),\n    num    := (SOME x. True),\n    sid    := (SOME x. True)\n  \\<rparr>\""], ["", "lemma clear_locals_but_not_globals [simp]:\n  \"id (clear_locals \\<xi>) = id \\<xi>\"\n  \"no (clear_locals \\<xi>) = no \\<xi>\"\n  \"nhid (clear_locals \\<xi>) = nhid \\<xi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state.id (clear_locals \\<xi>) = state.id \\<xi> &&&\n    no (clear_locals \\<xi>) = no \\<xi> &&&\n    nhid (clear_locals \\<xi>) = nhid \\<xi>", "unfolding clear_locals_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. state.id\n     (\\<xi>\n      \\<lparr>msg := SOME x. True, num := SOME x. True,\n         sid := SOME x. True\\<rparr>) =\n    state.id \\<xi> &&&\n    no (\\<xi>\n        \\<lparr>msg := SOME x. True, num := SOME x. True,\n           sid := SOME x. True\\<rparr>) =\n    no \\<xi> &&&\n    nhid\n     (\\<xi>\n      \\<lparr>msg := SOME x. True, num := SOME x. True,\n         sid := SOME x. True\\<rparr>) =\n    nhid \\<xi>", "by auto"], ["", "definition is_newpkt\nwhere \"is_newpkt \\<xi> \\<equiv> case msg \\<xi> of\n                       Newpkt data did \\<Rightarrow> { \\<xi>\\<lparr>num := data\\<rparr> }\n                     | _ \\<Rightarrow> {}\""], ["", "definition is_pkt\nwhere \"is_pkt \\<xi> \\<equiv> case msg \\<xi> of\n                    Pkt num' sid' \\<Rightarrow> { \\<xi>\\<lparr> num := num', sid := sid' \\<rparr> }\n                  | _ \\<Rightarrow> {}\""], ["", "lemmas is_msg_defs =\n  is_pkt_def is_newpkt_def"], ["", "lemma is_msg_inv_id [simp]:\n  \"\\<xi>' \\<in> is_pkt \\<xi>    \\<Longrightarrow> id \\<xi>' = id \\<xi>\"\n  \"\\<xi>' \\<in> is_newpkt \\<xi> \\<Longrightarrow> id \\<xi>' = id \\<xi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<xi>' \\<in> is_pkt \\<xi> \\<Longrightarrow>\n     state.id \\<xi>' = state.id \\<xi>) &&&\n    (\\<xi>' \\<in> is_newpkt \\<xi> \\<Longrightarrow>\n     state.id \\<xi>' = state.id \\<xi>)", "unfolding is_msg_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<xi>'\n     \\<in> (case msg \\<xi> of\n            Pkt num' sid' \\<Rightarrow>\n              {\\<xi>\\<lparr>num := num', sid := sid'\\<rparr>}\n            | Newpkt nat1 nat2 \\<Rightarrow> {}) \\<Longrightarrow>\n     state.id \\<xi>' = state.id \\<xi>) &&&\n    (\\<xi>'\n     \\<in> (case msg \\<xi> of Pkt nat1 nat2 \\<Rightarrow> {}\n            | Newpkt data did \\<Rightarrow>\n                {\\<xi>\\<lparr>num := data\\<rparr>}) \\<Longrightarrow>\n     state.id \\<xi>' = state.id \\<xi>)", "by (cases \"msg \\<xi>\", clarsimp+)+"], ["", "lemma is_msg_inv_sid [simp]:\n  \"\\<xi>' \\<in> is_newpkt \\<xi> \\<Longrightarrow> sid \\<xi>' = sid \\<xi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<xi>' \\<in> is_newpkt \\<xi> \\<Longrightarrow> sid \\<xi>' = sid \\<xi>", "unfolding is_msg_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<xi>'\n    \\<in> (case msg \\<xi> of Pkt nat1 nat2 \\<Rightarrow> {}\n           | Newpkt data did \\<Rightarrow>\n               {\\<xi>\\<lparr>num := data\\<rparr>}) \\<Longrightarrow>\n    sid \\<xi>' = sid \\<xi>", "by (cases \"msg \\<xi>\", clarsimp+)+"], ["", "lemma is_msg_inv_no [simp]:\n  \"\\<xi>' \\<in> is_pkt \\<xi>    \\<Longrightarrow> no \\<xi>' = no \\<xi>\"\n  \"\\<xi>' \\<in> is_newpkt \\<xi> \\<Longrightarrow> no \\<xi>' = no \\<xi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<xi>' \\<in> is_pkt \\<xi> \\<Longrightarrow> no \\<xi>' = no \\<xi>) &&&\n    (\\<xi>' \\<in> is_newpkt \\<xi> \\<Longrightarrow> no \\<xi>' = no \\<xi>)", "unfolding is_msg_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<xi>'\n     \\<in> (case msg \\<xi> of\n            Pkt num' sid' \\<Rightarrow>\n              {\\<xi>\\<lparr>num := num', sid := sid'\\<rparr>}\n            | Newpkt nat1 nat2 \\<Rightarrow> {}) \\<Longrightarrow>\n     no \\<xi>' = no \\<xi>) &&&\n    (\\<xi>'\n     \\<in> (case msg \\<xi> of Pkt nat1 nat2 \\<Rightarrow> {}\n            | Newpkt data did \\<Rightarrow>\n                {\\<xi>\\<lparr>num := data\\<rparr>}) \\<Longrightarrow>\n     no \\<xi>' = no \\<xi>)", "by (cases \"msg \\<xi>\", clarsimp+)+"], ["", "lemma is_msg_inv_nhid [simp]:\n  \"\\<xi>' \\<in> is_pkt \\<xi>    \\<Longrightarrow> nhid \\<xi>' = nhid \\<xi>\"\n  \"\\<xi>' \\<in> is_newpkt \\<xi> \\<Longrightarrow> nhid \\<xi>' = nhid \\<xi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<xi>' \\<in> is_pkt \\<xi> \\<Longrightarrow>\n     nhid \\<xi>' = nhid \\<xi>) &&&\n    (\\<xi>' \\<in> is_newpkt \\<xi> \\<Longrightarrow>\n     nhid \\<xi>' = nhid \\<xi>)", "unfolding is_msg_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<xi>'\n     \\<in> (case msg \\<xi> of\n            Pkt num' sid' \\<Rightarrow>\n              {\\<xi>\\<lparr>num := num', sid := sid'\\<rparr>}\n            | Newpkt nat1 nat2 \\<Rightarrow> {}) \\<Longrightarrow>\n     nhid \\<xi>' = nhid \\<xi>) &&&\n    (\\<xi>'\n     \\<in> (case msg \\<xi> of Pkt nat1 nat2 \\<Rightarrow> {}\n            | Newpkt data did \\<Rightarrow>\n                {\\<xi>\\<lparr>num := data\\<rparr>}) \\<Longrightarrow>\n     nhid \\<xi>' = nhid \\<xi>)", "by (cases \"msg \\<xi>\", clarsimp+)+"], ["", "lemma is_msg_inv_msg [simp]:\n  \"\\<xi>' \\<in> is_pkt \\<xi>    \\<Longrightarrow> msg \\<xi>' = msg \\<xi>\"\n  \"\\<xi>' \\<in> is_newpkt \\<xi> \\<Longrightarrow> msg \\<xi>' = msg \\<xi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<xi>' \\<in> is_pkt \\<xi> \\<Longrightarrow> msg \\<xi>' = msg \\<xi>) &&&\n    (\\<xi>' \\<in> is_newpkt \\<xi> \\<Longrightarrow> msg \\<xi>' = msg \\<xi>)", "unfolding is_msg_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<xi>'\n     \\<in> (case msg \\<xi> of\n            Pkt num' sid' \\<Rightarrow>\n              {\\<xi>\\<lparr>num := num', sid := sid'\\<rparr>}\n            | Newpkt nat1 nat2 \\<Rightarrow> {}) \\<Longrightarrow>\n     msg \\<xi>' = msg \\<xi>) &&&\n    (\\<xi>'\n     \\<in> (case msg \\<xi> of Pkt nat1 nat2 \\<Rightarrow> {}\n            | Newpkt data did \\<Rightarrow>\n                {\\<xi>\\<lparr>num := data\\<rparr>}) \\<Longrightarrow>\n     msg \\<xi>' = msg \\<xi>)", "by (cases \"msg \\<xi>\", clarsimp+)+"], ["", "datatype pseqp =\n    PToy"], ["", "fun nat_of_seqp :: \"pseqp \\<Rightarrow> nat\"\nwhere\n  \"nat_of_seqp PToy = 1\""], ["", "instantiation \"pseqp\" :: ord\nbegin"], ["", "definition less_eq_seqp [iff]: \"l1 \\<le> l2 = (nat_of_seqp l1 \\<le> nat_of_seqp l2)\""], ["", "definition less_seqp [iff]:    \"l1 < l2 = (nat_of_seqp l1 < nat_of_seqp l2)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(pseqp, ord_class)", ".."], ["", "end"], ["", "abbreviation Toy\nwhere\n  \"Toy \\<equiv> \\<lambda>_. \\<lbrakk>clear_locals\\<rbrakk> call(PToy)\""], ["", "fun \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y :: \"(state, msg, pseqp, pseqp label) seqp_env\"\nwhere\n  \"\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy = labelled PToy (\n     receive(\\<lambda>msg' \\<xi>. \\<xi> \\<lparr> msg := msg' \\<rparr>).\n     \\<lbrakk>\\<xi>. \\<xi> \\<lparr>nhid := id \\<xi>\\<rparr>\\<rbrakk>\n     (   \\<langle>is_newpkt\\<rangle> \n         (\n             \\<lbrakk>\\<xi>. \\<xi> \\<lparr>no := max (no \\<xi>) (num \\<xi>)\\<rparr>\\<rbrakk>\n             broadcast(\\<lambda>\\<xi>. pkt(no \\<xi>, id \\<xi>)). Toy()\n         )\n       \\<oplus> \\<langle>is_pkt\\<rangle>\n       (\n            \\<langle>\\<xi>. num \\<xi> > no \\<xi>\\<rangle>\n               \\<lbrakk>\\<xi>. \\<xi> \\<lparr>no := num \\<xi>\\<rparr>\\<rbrakk>\n               \\<lbrakk>\\<xi>. \\<xi> \\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n               broadcast(\\<lambda>\\<xi>. pkt(no \\<xi>, id \\<xi>)). Toy()\n         \\<oplus> \\<langle>\\<xi>. num \\<xi> \\<le> no \\<xi>\\<rangle>\n               Toy()\n       )\n     ))\""], ["", "declare \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y.simps [simp del, code del]"], ["", "lemmas \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_simps [simp, code] = \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y.simps [simplified]"], ["", "fun \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton\nwhere \"\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton PToy = seqp_skeleton (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)\""], ["", "lemma \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton_wf [simp]:\n  \"wellformed \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton", "proof (rule, intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pn pn'.\n       call(pn')\n       \\<notin> stermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton pn)", "fix pn pn'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pn pn'.\n       call(pn')\n       \\<notin> stermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton pn)", "show \"call(pn') \\<notin> stermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton pn)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. call(pn')\n    \\<notin> stermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton pn)", "by (cases pn) simp_all"], ["proof (state)\nthis:\n  call(pn') \\<notin> stermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton pn)\n\ngoal:\nNo subgoals!", "qed"], ["", "declare \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton.simps [simp del, code del]"], ["", "lemmas \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton_simps [simp, code] = \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_skeleton.simps [simplified \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_simps seqp_skeleton.simps]"], ["", "lemma toy_proc_cases [dest]:\n  fixes p pn\n  assumes \"p \\<in> ctermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pn)\"\n    shows \"p \\<in> ctermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> ctermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> ctermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pn)\n\ngoal (1 subgoal):\n 1. p \\<in> ctermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)", "by (cases pn) simp_all"], ["", "definition \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y :: \"ip \\<Rightarrow> (state \\<times> (state, msg, pseqp, pseqp label) seqp) set\"\nwhere \"\\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y i \\<equiv> {(toy_init i, \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)}\""], ["", "abbreviation ptoy\n  :: \"ip \\<Rightarrow> (state \\<times> (state, msg, pseqp, pseqp label) seqp, msg seq_action) automaton\"\nwhere\n  \"ptoy i \\<equiv> \\<lparr> init = \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y i, trans = seqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y \\<rparr>\""], ["", "lemma toy_trans: \"trans (ptoy i) = seqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. automaton.trans (ptoy i) = seqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y", "by simp"], ["", "lemma toy_control_within [simp]: \"control_within \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (init (ptoy i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. control_within \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (init (ptoy i))", "unfolding \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. control_within \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n     (init\n       \\<lparr>init = {(toy_init i, \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)},\n          trans = seqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\\<rparr>)", "by (rule control_withinI) (auto simp del: \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_simps)"], ["", "lemma toy_wf [simp]:\n  \"wellformed \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y", "proof (rule, intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pn pn'.\n       call(pn') \\<notin> stermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pn)", "fix pn pn'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pn pn'.\n       call(pn') \\<notin> stermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pn)", "show \"call(pn') \\<notin> stermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pn)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. call(pn') \\<notin> stermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pn)", "by (cases pn) simp_all"], ["proof (state)\nthis:\n  call(pn') \\<notin> stermsl (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pn)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas toy_labels_not_empty [simp] = labels_not_empty [OF toy_wf]"], ["", "lemma toy_ex_label [intro]: \"\\<exists>l. l\\<in>labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p", "by (metis toy_labels_not_empty all_not_in_conv)"], ["", "lemma toy_ex_labelE [elim]:\n  assumes \"\\<forall>l\\<in>labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p. P l p\"\n      and \"\\<exists>p l. P l p \\<Longrightarrow> Q\"\n    shows \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p. P l p\n  \\<exists>p l. P l p \\<Longrightarrow> Q\n\ngoal (1 subgoal):\n 1. Q", "by (metis toy_ex_label)"], ["", "lemma toy_simple_labels [simp]: \"simple_labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pn p.\n       p \\<in> subterms\n                (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pn) \\<Longrightarrow>\n       \\<exists>!l. labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p = {l}", "fix pn p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pn p.\n       p \\<in> subterms\n                (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pn) \\<Longrightarrow>\n       \\<exists>!l. labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p = {l}", "assume \"p\\<in>subterms(\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pn)\""], ["proof (state)\nthis:\n  p \\<in> subterms (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pn)\n\ngoal (1 subgoal):\n 1. \\<And>pn p.\n       p \\<in> subterms\n                (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pn) \\<Longrightarrow>\n       \\<exists>!l. labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p = {l}", "thus \"\\<exists>!l. labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p = {l}\""], ["proof (prove)\nusing this:\n  p \\<in> subterms (\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pn)\n\ngoal (1 subgoal):\n 1. \\<exists>!l. labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p = {l}", "by (cases pn) (simp_all cong: seqp_congs | elim disjE)+"], ["proof (state)\nthis:\n  \\<exists>!l. labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p = {l}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y_labels [simp]: \"(\\<xi>, p) \\<in> \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y i \\<Longrightarrow>  labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p = {PToy-:0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<xi>, p) \\<in> \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y i \\<Longrightarrow>\n    labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p = {PToy-:0}", "unfolding \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<xi>, p)\n    \\<in> {(toy_init i,\n            \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)} \\<Longrightarrow>\n    labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p = {PToy-:0}", "by simp"], ["", "text \\<open>By default, we no longer let the simplifier descend into process terms.\\<close>"], ["", "declare seqp_congs [cong]"], ["", "(* configure the inv_cterms tactic *)"], ["", "declare\n  \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_simps [cterms_env]\n  toy_proc_cases [ctermsl_cases]\n  seq_invariant_ctermsI [OF toy_wf toy_control_within toy_simple_labels toy_trans, cterms_intros]\n  seq_step_invariant_ctermsI [OF toy_wf toy_control_within toy_simple_labels toy_trans, cterms_intros]"], ["", "subsection \"Define an open version of the protocol\""], ["", "definition \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y :: \"((ip \\<Rightarrow> state) \\<times> ((state, msg, pseqp, pseqp label) seqp)) set\"\nwhere \"\\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y \\<equiv> {(toy_init, \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)}\""], ["", "abbreviation optoy\n  :: \"ip \\<Rightarrow> ((ip \\<Rightarrow> state) \\<times> (state, msg, pseqp, pseqp label) seqp, msg seq_action) automaton\"\nwhere\n  \"optoy i \\<equiv> \\<lparr> init = \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y, trans = oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i \\<rparr>\""], ["", "lemma initiali_toy [intro!, simp]: \"initiali i (init (optoy i)) (init (ptoy i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. initiali i (init (optoy i)) (init (ptoy i))", "unfolding \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y_def \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. initiali i\n     (init\n       \\<lparr>init = {(toy_init, \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)},\n          trans = oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i\\<rparr>)\n     (init\n       \\<lparr>init = {(toy_init i, \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)},\n          trans = seqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\\<rparr>)", "by rule simp_all"], ["", "lemma oaodv_control_within [simp]: \"control_within \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (init (optoy i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. control_within \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (init (optoy i))", "unfolding \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. control_within \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n     (init\n       \\<lparr>init = {(toy_init, \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)},\n          trans = oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i\\<rparr>)", "by (rule control_withinI) (auto simp del: \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y_simps)"], ["", "lemma \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y_labels [simp]: \"(\\<sigma>, p) \\<in> \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y \\<Longrightarrow>  labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p = {PToy-:0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, p)\n    \\<in> \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y \\<Longrightarrow>\n    labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p = {PToy-:0}", "unfolding \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, p)\n    \\<in> {(toy_init,\n            \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)} \\<Longrightarrow>\n    labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p = {PToy-:0}", "by simp"], ["", "lemma otoy_trans: \"trans (optoy i) = oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. automaton.trans (optoy i) = oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i", "by simp"], ["", "(* configure the inv_cterms tactic *)"], ["", "declare\n  oseq_invariant_ctermsI [OF toy_wf oaodv_control_within toy_simple_labels otoy_trans, cterms_intros]\n  oseq_step_invariant_ctermsI [OF toy_wf oaodv_control_within toy_simple_labels otoy_trans, cterms_intros]"], ["", "subsection \"Predicates\""], ["", "definition msg_sender :: \"msg \\<Rightarrow> ip\"\nwhere \"msg_sender m \\<equiv> case m of Pkt _ ipc \\<Rightarrow> ipc\""], ["", "lemma msg_sender_simps [simp]:\n  \"\\<And>d did sid. msg_sender (Pkt d sid) = sid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>d did sid. msg_sender (Pkt d sid) = sid", "unfolding msg_sender_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>d did sid. (case Pkt d sid of Pkt x ipc \\<Rightarrow> ipc) = sid", "by simp_all"], ["", "abbreviation not_Pkt :: \"msg \\<Rightarrow> bool\"\nwhere \"not_Pkt m \\<equiv> case m of Pkt _ _ \\<Rightarrow> False | _ \\<Rightarrow> True\""], ["", "definition nos_inc :: \"state \\<Rightarrow> state \\<Rightarrow> bool\"\nwhere \"nos_inc \\<xi> \\<xi>' \\<equiv> (no \\<xi> \\<le> no \\<xi>')\""], ["", "definition msg_ok :: \"(ip \\<Rightarrow> state) \\<Rightarrow> msg \\<Rightarrow> bool\"\nwhere \"msg_ok \\<sigma> m \\<equiv> case m of Pkt num' sid' \\<Rightarrow> num' \\<le> no (\\<sigma> sid') | _ \\<Rightarrow> True\""], ["", "lemma msg_okI [intro]:\n  assumes \"\\<And>num' sid'. m = Pkt num' sid' \\<Longrightarrow> num' \\<le> no (\\<sigma> sid')\"\n    shows \"msg_ok \\<sigma> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msg_ok \\<sigma> m", "using assms"], ["proof (prove)\nusing this:\n  m = Pkt ?num' ?sid' \\<Longrightarrow> ?num' \\<le> no (\\<sigma> ?sid')\n\ngoal (1 subgoal):\n 1. msg_ok \\<sigma> m", "unfolding msg_ok_def"], ["proof (prove)\nusing this:\n  m = Pkt ?num' ?sid' \\<Longrightarrow> ?num' \\<le> no (\\<sigma> ?sid')\n\ngoal (1 subgoal):\n 1. case m of Pkt num' sid' \\<Rightarrow> num' \\<le> no (\\<sigma> sid')\n    | Newpkt nat1 nat2 \\<Rightarrow> True", "by (auto split: msg.split)"], ["", "lemma msg_ok_Pkt [simp]:\n  \"msg_ok \\<sigma> (Pkt data src) = (data \\<le> no (\\<sigma> src))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msg_ok \\<sigma> (Pkt data src) = (data \\<le> no (\\<sigma> src))", "unfolding msg_ok_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case Pkt data src of\n     Pkt num' sid' \\<Rightarrow> num' \\<le> no (\\<sigma> sid')\n     | Newpkt nat1 nat2 \\<Rightarrow> True) =\n    (data \\<le> no (\\<sigma> src))", "by simp"], ["", "lemma msg_ok_pkt [simp]:\n  \"msg_ok \\<sigma> (pkt(data, src)) = (data \\<le> no (\\<sigma> src))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msg_ok \\<sigma> (pkt (data, src)) = (data \\<le> no (\\<sigma> src))", "unfolding msg_ok_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case pkt (data, src) of\n     Pkt num' sid' \\<Rightarrow> num' \\<le> no (\\<sigma> sid')\n     | Newpkt nat1 nat2 \\<Rightarrow> True) =\n    (data \\<le> no (\\<sigma> src))", "by simp"], ["", "lemma msg_ok_Newpkt [simp]:\n  \"msg_ok \\<sigma> (Newpkt data dst)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msg_ok \\<sigma> (Newpkt data dst)", "unfolding msg_ok_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. case Newpkt data dst of\n    Pkt num' sid' \\<Rightarrow> num' \\<le> no (\\<sigma> sid')\n    | Newpkt nat1 nat2 \\<Rightarrow> True", "by simp"], ["", "lemma msg_ok_newpkt [simp]:\n  \"msg_ok \\<sigma> (newpkt(data, dst))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msg_ok \\<sigma> (newpkt (data, dst))", "unfolding msg_ok_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. case newpkt (data, dst) of\n    Pkt num' sid' \\<Rightarrow> num' \\<le> no (\\<sigma> sid')\n    | Newpkt nat1 nat2 \\<Rightarrow> True", "by simp"], ["", "subsection \"Sequential Invariants\""], ["", "lemma seq_no_leq_num:\n  \"ptoy i \\<TTurnstile> onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<xi>, l). l\\<in>{PToy-:7..PToy-:8} \\<longrightarrow> no \\<xi> \\<le> num \\<xi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ptoy\n     i \\<TTurnstile> onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<xi>, l).\n                          l \\<in> {PToy-:7..PToy-:8} \\<longrightarrow>\n                          no \\<xi> \\<le> num \\<xi>)", "by inv_cterms"], ["", "lemma seq_nos_incs:\n  \"ptoy i \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>((\\<xi>, _), _, (\\<xi>', _)). nos_inc \\<xi> \\<xi>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ptoy\n     i \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                              (\\<lambda>((\\<xi>, uu_), uu_, \\<xi>', uu_).\n                                  nos_inc \\<xi> \\<xi>')", "unfolding nos_inc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ptoy\n     i \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                              (\\<lambda>((\\<xi>, uu_), uu_, \\<xi>', uu_).\n                                  no \\<xi> \\<le> no \\<xi>')", "by (inv_cterms inv add: onl_invariant_sterms [OF toy_wf seq_no_leq_num])"], ["", "lemma seq_nos_incs':\n  \"ptoy i \\<TTurnstile>\\<^sub>A (\\<lambda>((\\<xi>, _), _, (\\<xi>', _)). nos_inc \\<xi> \\<xi>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ptoy\n     i \\<TTurnstile>\\<^sub>A (\\<lambda>((\\<xi>, uu_), uu_, \\<xi>', uu_).\n                                 nos_inc \\<xi> \\<xi>')", "by (rule step_invariant_weakenE [OF seq_nos_incs]) (auto dest!: onllD)"], ["", "lemma sender_ip_valid:\n  \"ptoy i \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>((\\<xi>, _), a, _). anycast (\\<lambda>m. msg_sender m = id \\<xi>) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ptoy\n     i \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                              (\\<lambda>((\\<xi>, uu_), a, uu_).\n                                  anycast\n                                   (\\<lambda>m.\n msg_sender m = state.id \\<xi>)\n                                   a)", "by inv_cterms"], ["", "lemma id_constant:\n  \"ptoy i \\<TTurnstile> onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<xi>, _). id \\<xi> = i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ptoy\n     i \\<TTurnstile> onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<xi>, uu_). state.id \\<xi> = i)", "by inv_cterms (simp add: \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y_def)"], ["", "lemma nhid_eq_id:\n  \"ptoy i \\<TTurnstile> onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<xi>, l). l\\<in>{PToy-:2..PToy-:8} \\<longrightarrow> nhid \\<xi> = id \\<xi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ptoy\n     i \\<TTurnstile> onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<xi>, l).\n                          l \\<in> {PToy-:2..PToy-:8} \\<longrightarrow>\n                          nhid \\<xi> = state.id \\<xi>)", "by inv_cterms"], ["", "lemma seq_msg_ok:\n  \"ptoy i \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>((\\<xi>, _), a, _).\n                anycast (\\<lambda>m. case m of Pkt num' sid' \\<Rightarrow> num' = no \\<xi> \\<and> sid' = i | _ \\<Rightarrow> True) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ptoy\n     i \\<TTurnstile>\\<^sub>A onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                              (\\<lambda>((\\<xi>, uu_), a, uu_).\n                                  anycast\n                                   (\\<lambda>m.\n case m of Pkt num' sid' \\<Rightarrow> num' = no \\<xi> \\<and> sid' = i\n | Newpkt nat1 nat2 \\<Rightarrow> True)\n                                   a)", "by (inv_cterms inv add: onl_invariant_sterms [OF toy_wf id_constant])"], ["", "lemma nhid_eq_i:\n  \"ptoy i \\<TTurnstile> onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<xi>, l). l\\<in>{PToy-:2..PToy-:8} \\<longrightarrow> nhid \\<xi> = i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ptoy\n     i \\<TTurnstile> onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<xi>, l).\n                          l \\<in> {PToy-:2..PToy-:8} \\<longrightarrow>\n                          nhid \\<xi> = i)", "proof (rule invariant_arbitraryI, clarify intro!: onlI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b l.\n       \\<lbrakk>(a, b) \\<in> reachable (ptoy i) TT;\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y b;\n        l \\<in> {PToy-:2..PToy-:8}\\<rbrakk>\n       \\<Longrightarrow> nhid a = i", "fix \\<xi> p l n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b l.\n       \\<lbrakk>(a, b) \\<in> reachable (ptoy i) TT;\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y b;\n        l \\<in> {PToy-:2..PToy-:8}\\<rbrakk>\n       \\<Longrightarrow> nhid a = i", "assume \"(\\<xi>, p) \\<in> reachable (ptoy i) TT\"\n       and \"l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p\"\n       and \"l \\<in> {PToy-:2..PToy-:8}\""], ["proof (state)\nthis:\n  (\\<xi>, p) \\<in> reachable (ptoy i) TT\n  l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p\n  l \\<in> {PToy-:2..PToy-:8}\n\ngoal (1 subgoal):\n 1. \\<And>a b l.\n       \\<lbrakk>(a, b) \\<in> reachable (ptoy i) TT;\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y b;\n        l \\<in> {PToy-:2..PToy-:8}\\<rbrakk>\n       \\<Longrightarrow> nhid a = i", "from this(1-3)"], ["proof (chain)\npicking this:\n  (\\<xi>, p) \\<in> reachable (ptoy i) TT\n  l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p\n  l \\<in> {PToy-:2..PToy-:8}", "have \"nhid \\<xi> = id \\<xi>\""], ["proof (prove)\nusing this:\n  (\\<xi>, p) \\<in> reachable (ptoy i) TT\n  l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p\n  l \\<in> {PToy-:2..PToy-:8}\n\ngoal (1 subgoal):\n 1. nhid \\<xi> = state.id \\<xi>", "by - (drule invariantD [OF nhid_eq_id], auto)"], ["proof (state)\nthis:\n  nhid \\<xi> = state.id \\<xi>\n\ngoal (1 subgoal):\n 1. \\<And>a b l.\n       \\<lbrakk>(a, b) \\<in> reachable (ptoy i) TT;\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y b;\n        l \\<in> {PToy-:2..PToy-:8}\\<rbrakk>\n       \\<Longrightarrow> nhid a = i", "moreover"], ["proof (state)\nthis:\n  nhid \\<xi> = state.id \\<xi>\n\ngoal (1 subgoal):\n 1. \\<And>a b l.\n       \\<lbrakk>(a, b) \\<in> reachable (ptoy i) TT;\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y b;\n        l \\<in> {PToy-:2..PToy-:8}\\<rbrakk>\n       \\<Longrightarrow> nhid a = i", "with \\<open>(\\<xi>, p) \\<in> reachable (ptoy i) TT\\<close> and \\<open>l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p\\<close>"], ["proof (chain)\npicking this:\n  (\\<xi>, p) \\<in> reachable (ptoy i) TT\n  l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p\n  nhid \\<xi> = state.id \\<xi>", "have \"id \\<xi> = i\""], ["proof (prove)\nusing this:\n  (\\<xi>, p) \\<in> reachable (ptoy i) TT\n  l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p\n  nhid \\<xi> = state.id \\<xi>\n\ngoal (1 subgoal):\n 1. state.id \\<xi> = i", "by (auto dest: invariantD [OF id_constant])"], ["proof (state)\nthis:\n  state.id \\<xi> = i\n\ngoal (1 subgoal):\n 1. \\<And>a b l.\n       \\<lbrakk>(a, b) \\<in> reachable (ptoy i) TT;\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y b;\n        l \\<in> {PToy-:2..PToy-:8}\\<rbrakk>\n       \\<Longrightarrow> nhid a = i", "ultimately"], ["proof (chain)\npicking this:\n  nhid \\<xi> = state.id \\<xi>\n  state.id \\<xi> = i", "show \"nhid \\<xi> = i\""], ["proof (prove)\nusing this:\n  nhid \\<xi> = state.id \\<xi>\n  state.id \\<xi> = i\n\ngoal (1 subgoal):\n 1. nhid \\<xi> = i", "by simp"], ["proof (state)\nthis:\n  nhid \\<xi> = i\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Global Invariants\""], ["", "lemma nos_incD [dest]:\n  assumes \"nos_inc \\<xi> \\<xi>'\"\n    shows \"no \\<xi> \\<le> no \\<xi>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no \\<xi> \\<le> no \\<xi>'", "using assms"], ["proof (prove)\nusing this:\n  nos_inc \\<xi> \\<xi>'\n\ngoal (1 subgoal):\n 1. no \\<xi> \\<le> no \\<xi>'", "unfolding nos_inc_def"], ["proof (prove)\nusing this:\n  no \\<xi> \\<le> no \\<xi>'\n\ngoal (1 subgoal):\n 1. no \\<xi> \\<le> no \\<xi>'", "."], ["", "lemma nos_inc_simp [simp]:\n  \"nos_inc \\<xi> \\<xi>' = (no \\<xi> \\<le> no \\<xi>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nos_inc \\<xi> \\<xi>' = (no \\<xi> \\<le> no \\<xi>')", "unfolding nos_inc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (no \\<xi> \\<le> no \\<xi>') = (no \\<xi> \\<le> no \\<xi>')", ".."], ["", "lemmas oseq_nos_incs =\n  open_seq_step_invariant [OF seq_nos_incs initiali_toy otoy_trans toy_trans,\n                           simplified seqll_onll_swap]"], ["", "lemmas oseq_no_leq_num =\n  open_seq_invariant [OF seq_no_leq_num initiali_toy otoy_trans toy_trans,\n                      simplified seql_onl_swap]"], ["", "lemma all_nos_inc:\n  shows \"optoy i \\<Turnstile>\\<^sub>A (otherwith nos_inc {i} S,\n                      other nos_inc {i} \\<rightarrow>)\n                       onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>((\\<sigma>, _), a, (\\<sigma>', _)). (\\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile>\\<^sub>A (otherwith nos_inc {i} S,\n                             other nos_inc {i} \\<rightarrow>)\n                             onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                              (\\<lambda>((\\<sigma>, uu_), a, \\<sigma>',\n                                  uu_).\n                                  \\<forall>j.\n                                     nos_inc (\\<sigma> j) (\\<sigma>' j))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile>\\<^sub>A (otherwith nos_inc {i} S,\n                             other nos_inc {i} \\<rightarrow>)\n                             onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                              (\\<lambda>((\\<sigma>, uu_), a, \\<sigma>',\n                                  uu_).\n                                  \\<forall>j.\n                                     nos_inc (\\<sigma> j) (\\<sigma>' j))", "have *: \"\\<And>\\<sigma> \\<sigma>' a. \\<lbrakk> otherwith nos_inc {i} S \\<sigma> \\<sigma>' a; no (\\<sigma> i) \\<le> no (\\<sigma>' i) \\<rbrakk>\n                       \\<Longrightarrow> \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' a.\n       \\<lbrakk>otherwith nos_inc {i} S \\<sigma> \\<sigma>' a;\n        no (\\<sigma> i) \\<le> no (\\<sigma>' i)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)", "by (auto dest!: otherwith_syncD)"], ["proof (state)\nthis:\n  \\<lbrakk>otherwith nos_inc {i} S ?\\<sigma> ?\\<sigma>' ?a;\n   no (?\\<sigma> i) \\<le> no (?\\<sigma>' i)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>j. no (?\\<sigma> j) \\<le> no (?\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile>\\<^sub>A (otherwith nos_inc {i} S,\n                             other nos_inc {i} \\<rightarrow>)\n                             onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                              (\\<lambda>((\\<sigma>, uu_), a, \\<sigma>',\n                                  uu_).\n                                  \\<forall>j.\n                                     nos_inc (\\<sigma> j) (\\<sigma>' j))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile>\\<^sub>A (otherwith nos_inc {i} S,\n                             other nos_inc {i} \\<rightarrow>)\n                             onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                              (\\<lambda>((\\<sigma>, uu_), a, \\<sigma>',\n                                  uu_).\n                                  \\<forall>j.\n                                     nos_inc (\\<sigma> j) (\\<sigma>' j))", "by (inv_cterms\n            inv add: oseq_step_invariant_sterms [OF oseq_nos_incs [THEN oinvariant_step_anyact]\n                                                                                   toy_wf otoy_trans]\n            simp add: seqllsimp) (auto elim!: *)"], ["proof (state)\nthis:\n  optoy\n   i \\<Turnstile>\\<^sub>A (otherwith nos_inc {i} S,\n                           other nos_inc {i} \\<rightarrow>)\n                           onll \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                            (\\<lambda>((\\<sigma>, uu_), a, \\<sigma>', uu_).\n                                \\<forall>j.\n                                   nos_inc (\\<sigma> j) (\\<sigma>' j))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oreceived_msg_inv:\n  assumes other: \"\\<And>\\<sigma> \\<sigma>' m. \\<lbrakk> P \\<sigma> m; other Q {i} \\<sigma> \\<sigma>' \\<rbrakk> \\<Longrightarrow> P \\<sigma>' m\"\n      and local: \"\\<And>\\<sigma> m. P \\<sigma> m \\<Longrightarrow> P (\\<sigma>(i := \\<sigma> i\\<lparr>msg := m\\<rparr>)) m\"\n    shows \"optoy i \\<Turnstile> (otherwith Q {i} (orecvmsg P), other Q {i} \\<rightarrow>)\n                       onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<sigma>, l). l \\<in> {PToy-:1} \\<longrightarrow> P \\<sigma> (msg (\\<sigma> i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith Q {i} (orecvmsg P),\n                     other Q {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<sigma>, l).\n                          l \\<in> {PToy-:1} \\<longrightarrow>\n                          P \\<sigma> (msg (\\<sigma> i)))", "proof (inv_cterms, intro impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n                       (other Q {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        l = PToy-:1 \\<longrightarrow> P \\<sigma> (msg (\\<sigma> i));\n        other Q {i} \\<sigma> \\<sigma>'; l = PToy-:1\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (msg (\\<sigma>' i))\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' msg", "fix \\<sigma> \\<sigma>' l"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n                       (other Q {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        l = PToy-:1 \\<longrightarrow> P \\<sigma> (msg (\\<sigma> i));\n        other Q {i} \\<sigma> \\<sigma>'; l = PToy-:1\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (msg (\\<sigma>' i))\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' msg", "assume \"l = PToy-:1 \\<longrightarrow> P \\<sigma> (msg (\\<sigma> i))\"\n       and \"l = PToy-:1\"\n       and \"other Q {i} \\<sigma> \\<sigma>'\""], ["proof (state)\nthis:\n  l = PToy-:1 \\<longrightarrow> P \\<sigma> (msg (\\<sigma> i))\n  l = PToy-:1\n  other Q {i} \\<sigma> \\<sigma>'\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n                       (other Q {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        l = PToy-:1 \\<longrightarrow> P \\<sigma> (msg (\\<sigma> i));\n        other Q {i} \\<sigma> \\<sigma>'; l = PToy-:1\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (msg (\\<sigma>' i))\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' msg", "from this(1-2)"], ["proof (chain)\npicking this:\n  l = PToy-:1 \\<longrightarrow> P \\<sigma> (msg (\\<sigma> i))\n  l = PToy-:1", "have \"P \\<sigma> (msg (\\<sigma> i))\""], ["proof (prove)\nusing this:\n  l = PToy-:1 \\<longrightarrow> P \\<sigma> (msg (\\<sigma> i))\n  l = PToy-:1\n\ngoal (1 subgoal):\n 1. P \\<sigma> (msg (\\<sigma> i))", ".."], ["proof (state)\nthis:\n  P \\<sigma> (msg (\\<sigma> i))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n                       (other Q {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        l = PToy-:1 \\<longrightarrow> P \\<sigma> (msg (\\<sigma> i));\n        other Q {i} \\<sigma> \\<sigma>'; l = PToy-:1\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (msg (\\<sigma>' i))\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' msg", "hence \"P \\<sigma>' (msg (\\<sigma> i))\""], ["proof (prove)\nusing this:\n  P \\<sigma> (msg (\\<sigma> i))\n\ngoal (1 subgoal):\n 1. P \\<sigma>' (msg (\\<sigma> i))", "using \\<open>other Q {i} \\<sigma> \\<sigma>'\\<close>"], ["proof (prove)\nusing this:\n  P \\<sigma> (msg (\\<sigma> i))\n  other Q {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. P \\<sigma>' (msg (\\<sigma> i))", "by (rule other)"], ["proof (state)\nthis:\n  P \\<sigma>' (msg (\\<sigma> i))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n                       (other Q {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        l = PToy-:1 \\<longrightarrow> P \\<sigma> (msg (\\<sigma> i));\n        other Q {i} \\<sigma> \\<sigma>'; l = PToy-:1\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (msg (\\<sigma>' i))\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' msg", "moreover"], ["proof (state)\nthis:\n  P \\<sigma>' (msg (\\<sigma> i))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n                       (other Q {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        l = PToy-:1 \\<longrightarrow> P \\<sigma> (msg (\\<sigma> i));\n        other Q {i} \\<sigma> \\<sigma>'; l = PToy-:1\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (msg (\\<sigma>' i))\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' msg", "from \\<open>other Q {i} \\<sigma> \\<sigma>'\\<close>"], ["proof (chain)\npicking this:\n  other Q {i} \\<sigma> \\<sigma>'", "have \"\\<sigma>' i = \\<sigma> i\""], ["proof (prove)\nusing this:\n  other Q {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", ".."], ["proof (state)\nthis:\n  \\<sigma>' i = \\<sigma> i\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n                       (other Q {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        l = PToy-:1 \\<longrightarrow> P \\<sigma> (msg (\\<sigma> i));\n        other Q {i} \\<sigma> \\<sigma>'; l = PToy-:1\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' (msg (\\<sigma>' i))\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' msg", "ultimately"], ["proof (chain)\npicking this:\n  P \\<sigma>' (msg (\\<sigma> i))\n  \\<sigma>' i = \\<sigma> i", "show \"P \\<sigma>' (msg (\\<sigma>' i))\""], ["proof (prove)\nusing this:\n  P \\<sigma>' (msg (\\<sigma> i))\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. P \\<sigma>' (msg (\\<sigma>' i))", "by simp"], ["proof (state)\nthis:\n  P \\<sigma>' (msg (\\<sigma>' i))\n\ngoal (1 subgoal):\n 1. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' msg", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' msg", "fix \\<sigma> \\<sigma>' msg"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' msg", "assume \"otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg)\"\n       and \"\\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>\""], ["proof (state)\nthis:\n  otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg)\n  \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' msg", "from this(1)"], ["proof (chain)\npicking this:\n  otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg)", "have \"P \\<sigma> msg\"\n                 and \"\\<forall>j. j\\<noteq>i \\<longrightarrow> Q (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg)\n\ngoal (1 subgoal):\n 1. P \\<sigma> msg &&&\n    \\<forall>j. j \\<noteq> i \\<longrightarrow> Q (\\<sigma> j) (\\<sigma>' j)", "by auto"], ["proof (state)\nthis:\n  P \\<sigma> msg\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> Q (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' msg", "from this(1)"], ["proof (chain)\npicking this:\n  P \\<sigma> msg", "have \"P (\\<sigma>(i := \\<sigma> i\\<lparr>msg := msg\\<rparr>)) msg\""], ["proof (prove)\nusing this:\n  P \\<sigma> msg\n\ngoal (1 subgoal):\n 1. P (\\<sigma>(i := \\<sigma> i\\<lparr>msg := msg\\<rparr>)) msg", "by (rule local)"], ["proof (state)\nthis:\n  P (\\<sigma>(i := \\<sigma> i\\<lparr>msg := msg\\<rparr>)) msg\n\ngoal (1 subgoal):\n 1. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith Q {i} (orecvmsg P))\n               (other Q {i});\n        otherwith Q {i} (orecvmsg P) \\<sigma> \\<sigma>' (receive msg);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' msg", "thus \"P \\<sigma>' msg\""], ["proof (prove)\nusing this:\n  P (\\<sigma>(i := \\<sigma> i\\<lparr>msg := msg\\<rparr>)) msg\n\ngoal (1 subgoal):\n 1. P \\<sigma>' msg", "proof (rule other)"], ["proof (state)\ngoal (1 subgoal):\n 1. other Q {i} (\\<sigma>(i := \\<sigma> i\\<lparr>msg := msg\\<rparr>))\n     \\<sigma>'", "from \\<open>\\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>\\<close> and \\<open>\\<forall>j. j\\<noteq>i \\<longrightarrow> Q (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> Q (\\<sigma> j) (\\<sigma>' j)", "show \"other Q {i} (\\<sigma>(i := \\<sigma> i\\<lparr>msg := msg\\<rparr>)) \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> Q (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. other Q {i} (\\<sigma>(i := \\<sigma> i\\<lparr>msg := msg\\<rparr>))\n     \\<sigma>'", "by - (rule otherI, auto)"], ["proof (state)\nthis:\n  other Q {i} (\\<sigma>(i := \\<sigma> i\\<lparr>msg := msg\\<rparr>))\n   \\<sigma>'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P \\<sigma>' msg\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma msg_ok_other_nos_inc [elim]:\n  assumes \"msg_ok \\<sigma> m\"\n      and \"other nos_inc {i} \\<sigma> \\<sigma>'\"\n    shows \"msg_ok \\<sigma>' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msg_ok \\<sigma>' m", "proof (cases m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12. m = Pkt x11 x12 \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>x21 x22. m = Newpkt x21 x22 \\<Longrightarrow> msg_ok \\<sigma>' m", "fix num sid"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12. m = Pkt x11 x12 \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>x21 x22. m = Newpkt x21 x22 \\<Longrightarrow> msg_ok \\<sigma>' m", "assume \"m = Pkt num sid\""], ["proof (state)\nthis:\n  m = Pkt num sid\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12. m = Pkt x11 x12 \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>x21 x22. m = Newpkt x21 x22 \\<Longrightarrow> msg_ok \\<sigma>' m", "with \\<open>msg_ok \\<sigma> m\\<close>"], ["proof (chain)\npicking this:\n  msg_ok \\<sigma> m\n  m = Pkt num sid", "have \"num \\<le> no (\\<sigma> sid)\""], ["proof (prove)\nusing this:\n  msg_ok \\<sigma> m\n  m = Pkt num sid\n\ngoal (1 subgoal):\n 1. num \\<le> no (\\<sigma> sid)", "by simp"], ["proof (state)\nthis:\n  num \\<le> no (\\<sigma> sid)\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12. m = Pkt x11 x12 \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>x21 x22. m = Newpkt x21 x22 \\<Longrightarrow> msg_ok \\<sigma>' m", "also"], ["proof (state)\nthis:\n  num \\<le> no (\\<sigma> sid)\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12. m = Pkt x11 x12 \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>x21 x22. m = Newpkt x21 x22 \\<Longrightarrow> msg_ok \\<sigma>' m", "from \\<open>other nos_inc {i} \\<sigma> \\<sigma>'\\<close>"], ["proof (chain)\npicking this:\n  other nos_inc {i} \\<sigma> \\<sigma>'", "have \"no (\\<sigma> sid) \\<le> no (\\<sigma>' sid)\""], ["proof (prove)\nusing this:\n  other nos_inc {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. no (\\<sigma> sid) \\<le> no (\\<sigma>' sid)", "by (rule otherE) (metis eq_iff nos_incD)"], ["proof (state)\nthis:\n  no (\\<sigma> sid) \\<le> no (\\<sigma>' sid)\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12. m = Pkt x11 x12 \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>x21 x22. m = Newpkt x21 x22 \\<Longrightarrow> msg_ok \\<sigma>' m", "finally"], ["proof (chain)\npicking this:\n  num \\<le> no (\\<sigma>' sid)", "have \"num \\<le> no (\\<sigma>' sid)\""], ["proof (prove)\nusing this:\n  num \\<le> no (\\<sigma>' sid)\n\ngoal (1 subgoal):\n 1. num \\<le> no (\\<sigma>' sid)", "."], ["proof (state)\nthis:\n  num \\<le> no (\\<sigma>' sid)\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12. m = Pkt x11 x12 \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>x21 x22. m = Newpkt x21 x22 \\<Longrightarrow> msg_ok \\<sigma>' m", "with \\<open>m = Pkt num sid\\<close>"], ["proof (chain)\npicking this:\n  m = Pkt num sid\n  num \\<le> no (\\<sigma>' sid)", "show ?thesis"], ["proof (prove)\nusing this:\n  m = Pkt num sid\n  num \\<le> no (\\<sigma>' sid)\n\ngoal (1 subgoal):\n 1. msg_ok \\<sigma>' m", "by simp"], ["proof (state)\nthis:\n  msg_ok \\<sigma>' m\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. m = Newpkt x21 x22 \\<Longrightarrow> msg_ok \\<sigma>' m", "qed simp"], ["", "lemma msg_ok_no_leq_no [simp, elim]:\n  assumes \"msg_ok \\<sigma> m\"\n      and \"\\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)\"\n    shows \"msg_ok \\<sigma>' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msg_ok \\<sigma>' m", "using assms(1)"], ["proof (prove)\nusing this:\n  msg_ok \\<sigma> m\n\ngoal (1 subgoal):\n 1. msg_ok \\<sigma>' m", "proof (cases m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Pkt x11 x12\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>x21 x22.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Newpkt x21 x22\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m", "fix num sid"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Pkt x11 x12\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>x21 x22.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Newpkt x21 x22\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m", "assume \"m = Pkt num sid\""], ["proof (state)\nthis:\n  m = Pkt num sid\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Pkt x11 x12\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>x21 x22.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Newpkt x21 x22\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m", "with \\<open>msg_ok \\<sigma> m\\<close>"], ["proof (chain)\npicking this:\n  msg_ok \\<sigma> m\n  m = Pkt num sid", "have \"num \\<le> no (\\<sigma> sid)\""], ["proof (prove)\nusing this:\n  msg_ok \\<sigma> m\n  m = Pkt num sid\n\ngoal (1 subgoal):\n 1. num \\<le> no (\\<sigma> sid)", "by simp"], ["proof (state)\nthis:\n  num \\<le> no (\\<sigma> sid)\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Pkt x11 x12\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>x21 x22.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Newpkt x21 x22\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m", "also"], ["proof (state)\nthis:\n  num \\<le> no (\\<sigma> sid)\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Pkt x11 x12\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>x21 x22.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Newpkt x21 x22\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m", "from \\<open>\\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)", "have \"no (\\<sigma> sid) \\<le> no (\\<sigma>' sid)\""], ["proof (prove)\nusing this:\n  \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. no (\\<sigma> sid) \\<le> no (\\<sigma>' sid)", "by simp"], ["proof (state)\nthis:\n  no (\\<sigma> sid) \\<le> no (\\<sigma>' sid)\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Pkt x11 x12\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>x21 x22.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Newpkt x21 x22\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m", "finally"], ["proof (chain)\npicking this:\n  num \\<le> no (\\<sigma>' sid)", "have \"num \\<le> no (\\<sigma>' sid)\""], ["proof (prove)\nusing this:\n  num \\<le> no (\\<sigma>' sid)\n\ngoal (1 subgoal):\n 1. num \\<le> no (\\<sigma>' sid)", "."], ["proof (state)\nthis:\n  num \\<le> no (\\<sigma>' sid)\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Pkt x11 x12\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>x21 x22.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Newpkt x21 x22\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m", "with \\<open>m = Pkt num sid\\<close>"], ["proof (chain)\npicking this:\n  m = Pkt num sid\n  num \\<le> no (\\<sigma>' sid)", "show ?thesis"], ["proof (prove)\nusing this:\n  m = Pkt num sid\n  num \\<le> no (\\<sigma>' sid)\n\ngoal (1 subgoal):\n 1. msg_ok \\<sigma>' m", "by simp"], ["proof (state)\nthis:\n  msg_ok \\<sigma>' m\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Newpkt x21 x22\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m", "qed (simp add: assms(1))"], ["", "lemma oreceived_msg_ok:\n  \"optoy i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n               other nos_inc {i} \\<rightarrow>)\n              onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<sigma>, l). l\\<in>{PToy-:1..} \\<longrightarrow> msg_ok \\<sigma> (msg (\\<sigma> i)))\"\n  (is \"_ \\<Turnstile> (?S, ?U \\<rightarrow>) _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<sigma>, l).\n                          l \\<in> {PToy-:1..} \\<longrightarrow>\n                          msg_ok \\<sigma> (msg (\\<sigma> i)))", "proof (inv_cterms inv add: oseq_step_invariant_sterms [OF all_nos_inc toy_wf otoy_trans],\n         intro impI, elim impE)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l\\<rbrakk>\n       \\<Longrightarrow> PToy-:1 \\<le> l\n 2. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l;\n        msg_ok \\<sigma> (msg (\\<sigma> i))\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' (msg (\\<sigma>' i))\n 3. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         (receive msg);\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' msg", "fix \\<sigma> \\<sigma>'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l\\<rbrakk>\n       \\<Longrightarrow> PToy-:1 \\<le> l\n 2. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l;\n        msg_ok \\<sigma> (msg (\\<sigma> i))\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' (msg (\\<sigma>' i))\n 3. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         (receive msg);\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' msg", "assume \"msg_ok \\<sigma> (msg (\\<sigma> i))\"\n       and other: \"other nos_inc {i} \\<sigma> \\<sigma>'\""], ["proof (state)\nthis:\n  msg_ok \\<sigma> (msg (\\<sigma> i))\n  other nos_inc {i} \\<sigma> \\<sigma>'\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l\\<rbrakk>\n       \\<Longrightarrow> PToy-:1 \\<le> l\n 2. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l;\n        msg_ok \\<sigma> (msg (\\<sigma> i))\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' (msg (\\<sigma>' i))\n 3. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         (receive msg);\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' msg", "moreover"], ["proof (state)\nthis:\n  msg_ok \\<sigma> (msg (\\<sigma> i))\n  other nos_inc {i} \\<sigma> \\<sigma>'\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l\\<rbrakk>\n       \\<Longrightarrow> PToy-:1 \\<le> l\n 2. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l;\n        msg_ok \\<sigma> (msg (\\<sigma> i))\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' (msg (\\<sigma>' i))\n 3. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         (receive msg);\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' msg", "from other"], ["proof (chain)\npicking this:\n  other nos_inc {i} \\<sigma> \\<sigma>'", "have \"msg (\\<sigma>' i) = msg (\\<sigma> i)\""], ["proof (prove)\nusing this:\n  other nos_inc {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. msg (\\<sigma>' i) = msg (\\<sigma> i)", "by (clarsimp elim!: otherE)"], ["proof (state)\nthis:\n  msg (\\<sigma>' i) = msg (\\<sigma> i)\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l\\<rbrakk>\n       \\<Longrightarrow> PToy-:1 \\<le> l\n 2. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l;\n        msg_ok \\<sigma> (msg (\\<sigma> i))\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' (msg (\\<sigma>' i))\n 3. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         (receive msg);\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' msg", "ultimately"], ["proof (chain)\npicking this:\n  msg_ok \\<sigma> (msg (\\<sigma> i))\n  other nos_inc {i} \\<sigma> \\<sigma>'\n  msg (\\<sigma>' i) = msg (\\<sigma> i)", "show \"msg_ok \\<sigma>' (msg (\\<sigma>' i))\""], ["proof (prove)\nusing this:\n  msg_ok \\<sigma> (msg (\\<sigma> i))\n  other nos_inc {i} \\<sigma> \\<sigma>'\n  msg (\\<sigma>' i) = msg (\\<sigma> i)\n\ngoal (1 subgoal):\n 1. msg_ok \\<sigma>' (msg (\\<sigma>' i))", "by (auto)"], ["proof (state)\nthis:\n  msg_ok \\<sigma>' (msg (\\<sigma>' i))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l\\<rbrakk>\n       \\<Longrightarrow> PToy-:1 \\<le> l\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         (receive msg);\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' msg", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l\\<rbrakk>\n       \\<Longrightarrow> PToy-:1 \\<le> l\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         (receive msg);\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' msg", "fix p l \\<sigma> a q l' \\<sigma>' pp p' m"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l\\<rbrakk>\n       \\<Longrightarrow> PToy-:1 \\<le> l\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         (receive msg);\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' msg", "assume a1: \"(\\<sigma>', p') \\<in> oreachable (optoy i) ?S ?U\"\n       and a2: \"PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p'\"\n       and a3: \"\\<sigma>' i = \\<sigma> i\\<lparr>msg := m\\<rparr>\""], ["proof (state)\nthis:\n  (\\<sigma>', p')\n  \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n         (other nos_inc {i})\n  PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p'\n  \\<sigma>' i = \\<sigma> i\\<lparr>msg := m\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l\\<rbrakk>\n       \\<Longrightarrow> PToy-:1 \\<le> l\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         (receive msg);\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' msg", "have inv: \"optoy i \\<Turnstile> (?S, ?U \\<rightarrow>) onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<sigma>, l). l \\<in> {PToy-:1} \\<longrightarrow> msg_ok \\<sigma> (msg (\\<sigma> i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<sigma>, l).\n                          l \\<in> {PToy-:1} \\<longrightarrow>\n                          msg_ok \\<sigma> (msg (\\<sigma> i)))", "proof (rule oreceived_msg_inv)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' m.\n       \\<lbrakk>msg_ok \\<sigma> m;\n        other nos_inc {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>\\<sigma> m.\n       msg_ok \\<sigma> m \\<Longrightarrow>\n       msg_ok (\\<sigma>(i := \\<sigma> i\\<lparr>msg := m\\<rparr>)) m", "fix \\<sigma> \\<sigma>' m"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' m.\n       \\<lbrakk>msg_ok \\<sigma> m;\n        other nos_inc {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>\\<sigma> m.\n       msg_ok \\<sigma> m \\<Longrightarrow>\n       msg_ok (\\<sigma>(i := \\<sigma> i\\<lparr>msg := m\\<rparr>)) m", "assume \"msg_ok \\<sigma> m\"\n         and \"other nos_inc {i} \\<sigma> \\<sigma>'\""], ["proof (state)\nthis:\n  msg_ok \\<sigma> m\n  other nos_inc {i} \\<sigma> \\<sigma>'\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' m.\n       \\<lbrakk>msg_ok \\<sigma> m;\n        other nos_inc {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m\n 2. \\<And>\\<sigma> m.\n       msg_ok \\<sigma> m \\<Longrightarrow>\n       msg_ok (\\<sigma>(i := \\<sigma> i\\<lparr>msg := m\\<rparr>)) m", "thus \"msg_ok \\<sigma>' m\""], ["proof (prove)\nusing this:\n  msg_ok \\<sigma> m\n  other nos_inc {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. msg_ok \\<sigma>' m", ".."], ["proof (state)\nthis:\n  msg_ok \\<sigma>' m\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> m.\n       msg_ok \\<sigma> m \\<Longrightarrow>\n       msg_ok (\\<sigma>(i := \\<sigma> i\\<lparr>msg := m\\<rparr>)) m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> m.\n       msg_ok \\<sigma> m \\<Longrightarrow>\n       msg_ok (\\<sigma>(i := \\<sigma> i\\<lparr>msg := m\\<rparr>)) m", "fix \\<sigma> m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> m.\n       msg_ok \\<sigma> m \\<Longrightarrow>\n       msg_ok (\\<sigma>(i := \\<sigma> i\\<lparr>msg := m\\<rparr>)) m", "assume \"msg_ok \\<sigma> m\""], ["proof (state)\nthis:\n  msg_ok \\<sigma> m\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> m.\n       msg_ok \\<sigma> m \\<Longrightarrow>\n       msg_ok (\\<sigma>(i := \\<sigma> i\\<lparr>msg := m\\<rparr>)) m", "thus \"msg_ok (\\<sigma>(i := \\<sigma> i\\<lparr>msg := m\\<rparr>)) m\""], ["proof (prove)\nusing this:\n  msg_ok \\<sigma> m\n\ngoal (1 subgoal):\n 1. msg_ok (\\<sigma>(i := \\<sigma> i\\<lparr>msg := m\\<rparr>)) m", "by (cases m) auto"], ["proof (state)\nthis:\n  msg_ok (\\<sigma>(i := \\<sigma> i\\<lparr>msg := m\\<rparr>)) m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  optoy\n   i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                   other nos_inc {i} \\<rightarrow>)\n                   onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                    (\\<lambda>(\\<sigma>, l).\n                        l \\<in> {PToy-:1} \\<longrightarrow>\n                        msg_ok \\<sigma> (msg (\\<sigma> i)))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l\\<rbrakk>\n       \\<Longrightarrow> PToy-:1 \\<le> l\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p' msg.\n       \\<lbrakk>l = PToy-:0;\n        ((\\<sigma>,\n          {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n          p'),\n         receive msg, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         (receive msg);\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:0}receive(\\<lambda>msg'. msg_update (\\<lambda>_. msg')) .\n        p';\n        l' = PToy-:1; a = receive msg;\n        \\<sigma>' i = \\<sigma> i\\<lparr>msg := msg\\<rparr>; q = p'\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' msg", "from a1 a2 a3"], ["proof (chain)\npicking this:\n  (\\<sigma>', p')\n  \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n         (other nos_inc {i})\n  PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p'\n  \\<sigma>' i = \\<sigma> i\\<lparr>msg := m\\<rparr>", "show \"msg_ok \\<sigma>' m\""], ["proof (prove)\nusing this:\n  (\\<sigma>', p')\n  \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n         (other nos_inc {i})\n  PToy-:1 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p'\n  \\<sigma>' i = \\<sigma> i\\<lparr>msg := m\\<rparr>\n\ngoal (1 subgoal):\n 1. msg_ok \\<sigma>' m", "by (clarsimp dest!: oinvariantD [OF inv] onlD)"], ["proof (state)\nthis:\n  msg_ok \\<sigma>' m\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>'; PToy-:1 \\<le> l\\<rbrakk>\n       \\<Longrightarrow> PToy-:1 \\<le> l", "qed simp"], ["", "lemma is_pkt_handler_num_leq_no:\n  shows \"optoy i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                      other nos_inc {i} \\<rightarrow>)\n                    onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<sigma>, l). l\\<in>{PToy-:6..PToy-:10} \\<longrightarrow> num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<sigma>, l).\n                          l \\<in> {PToy-:6..PToy-:10} \\<longrightarrow>\n                          num (\\<sigma> i)\n                          \\<le> no (\\<sigma> (sid (\\<sigma> i))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<sigma>, l).\n                          l \\<in> {PToy-:6..PToy-:10} \\<longrightarrow>\n                          num (\\<sigma> i)\n                          \\<le> no (\\<sigma> (sid (\\<sigma> i))))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<sigma>, l).\n                          l \\<in> {PToy-:6..PToy-:10} \\<longrightarrow>\n                          num (\\<sigma> i)\n                          \\<le> no (\\<sigma> (sid (\\<sigma> i))))", "fix \\<sigma> \\<sigma>'"], ["proof (state)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<sigma>, l).\n                          l \\<in> {PToy-:6..PToy-:10} \\<longrightarrow>\n                          num (\\<sigma> i)\n                          \\<le> no (\\<sigma> (sid (\\<sigma> i))))", "assume \"\\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)\"\n         and \"num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\""], ["proof (state)\nthis:\n  \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)\n  num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<sigma>, l).\n                          l \\<in> {PToy-:6..PToy-:10} \\<longrightarrow>\n                          num (\\<sigma> i)\n                          \\<le> no (\\<sigma> (sid (\\<sigma> i))))", "have \"num (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. num (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "note \\<open>num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\\<close>"], ["proof (state)\nthis:\n  num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. num (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "also"], ["proof (state)\nthis:\n  num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. num (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "from \\<open>\\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)", "have \"no (\\<sigma> (sid (\\<sigma> i))) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))\""], ["proof (prove)\nusing this:\n  \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. no (\\<sigma> (sid (\\<sigma> i))) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "by auto"], ["proof (state)\nthis:\n  no (\\<sigma> (sid (\\<sigma> i))) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. num (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "finally"], ["proof (chain)\npicking this:\n  num (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "show ?thesis"], ["proof (prove)\nusing this:\n  num (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. num (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "."], ["proof (state)\nthis:\n  num (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  num (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<sigma>, l).\n                          l \\<in> {PToy-:6..PToy-:10} \\<longrightarrow>\n                          num (\\<sigma> i)\n                          \\<le> no (\\<sigma> (sid (\\<sigma> i))))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>j. no (?\\<sigma>2 j) \\<le> no (?\\<sigma>'2 j);\n   num (?\\<sigma>2 i) \\<le> no (?\\<sigma>2 (sid (?\\<sigma>2 i)))\\<rbrakk>\n  \\<Longrightarrow> num (?\\<sigma>2 i)\n                    \\<le> no (?\\<sigma>'2 (sid (?\\<sigma>2 i)))\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<sigma>, l).\n                          l \\<in> {PToy-:6..PToy-:10} \\<longrightarrow>\n                          num (\\<sigma> i)\n                          \\<le> no (\\<sigma> (sid (\\<sigma> i))))", "note solve_step = this"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>j. no (?\\<sigma>2 j) \\<le> no (?\\<sigma>'2 j);\n   num (?\\<sigma>2 i) \\<le> no (?\\<sigma>2 (sid (?\\<sigma>2 i)))\\<rbrakk>\n  \\<Longrightarrow> num (?\\<sigma>2 i)\n                    \\<le> no (?\\<sigma>'2 (sid (?\\<sigma>2 i)))\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<sigma>, l).\n                          l \\<in> {PToy-:6..PToy-:10} \\<longrightarrow>\n                          num (\\<sigma> i)\n                          \\<le> no (\\<sigma> (sid (\\<sigma> i))))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<sigma>, l).\n                          l \\<in> {PToy-:6..PToy-:10} \\<longrightarrow>\n                          num (\\<sigma> i)\n                          \\<le> no (\\<sigma> (sid (\\<sigma> i))))", "proof (inv_cterms inv add: oseq_step_invariant_sterms [OF all_nos_inc toy_wf otoy_trans]\n                               onl_oinvariant_sterms [OF toy_wf oreceived_msg_ok]\n                        solve: solve_step, intro impI, elim impE)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>';\n        PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\\<rbrakk>\n       \\<Longrightarrow> PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\n 2. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>';\n        PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\\<rbrakk>\n       \\<Longrightarrow> num (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n 3. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:2;\n        ((\\<sigma>, {PToy-:2}\\<langle>is_pkt\\<rangle>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:6 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        msg_ok \\<sigma> (msg (\\<sigma> i));\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p';\n        l' = PToy-:6; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i \\<in> is_pkt (\\<sigma> i); q = p'\\<rbrakk>\n       \\<Longrightarrow> num (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "fix \\<sigma> \\<sigma>'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>';\n        PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\\<rbrakk>\n       \\<Longrightarrow> PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\n 2. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>';\n        PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\\<rbrakk>\n       \\<Longrightarrow> num (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n 3. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:2;\n        ((\\<sigma>, {PToy-:2}\\<langle>is_pkt\\<rangle>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:6 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        msg_ok \\<sigma> (msg (\\<sigma> i));\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p';\n        l' = PToy-:6; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i \\<in> is_pkt (\\<sigma> i); q = p'\\<rbrakk>\n       \\<Longrightarrow> num (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "assume *: \"num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\"\n         and \"other nos_inc {i} \\<sigma> \\<sigma>'\""], ["proof (state)\nthis:\n  num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\n  other nos_inc {i} \\<sigma> \\<sigma>'\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>';\n        PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\\<rbrakk>\n       \\<Longrightarrow> PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\n 2. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>';\n        PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\\<rbrakk>\n       \\<Longrightarrow> num (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n 3. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:2;\n        ((\\<sigma>, {PToy-:2}\\<langle>is_pkt\\<rangle>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:6 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        msg_ok \\<sigma> (msg (\\<sigma> i));\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p';\n        l' = PToy-:6; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i \\<in> is_pkt (\\<sigma> i); q = p'\\<rbrakk>\n       \\<Longrightarrow> num (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "from this(2)"], ["proof (chain)\npicking this:\n  other nos_inc {i} \\<sigma> \\<sigma>'", "obtain \"\\<forall>i\\<in>{i}. \\<sigma>' i = \\<sigma> i\"\n                      and \"\\<forall>j. j \\<notin> {i} \\<longrightarrow> nos_inc (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  other nos_inc {i} \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<forall>i\\<in>{i}. \\<sigma>' i = \\<sigma> i;\n      \\<forall>j.\n         j \\<notin> {i} \\<longrightarrow>\n         nos_inc (\\<sigma> j) (\\<sigma>' j)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  \\<forall>i\\<in>{i}. \\<sigma>' i = \\<sigma> i\n  \\<forall>j.\n     j \\<notin> {i} \\<longrightarrow> nos_inc (\\<sigma> j) (\\<sigma>' j)\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>';\n        PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\\<rbrakk>\n       \\<Longrightarrow> PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\n 2. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>';\n        PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\\<rbrakk>\n       \\<Longrightarrow> num (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n 3. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:2;\n        ((\\<sigma>, {PToy-:2}\\<langle>is_pkt\\<rangle>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:6 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        msg_ok \\<sigma> (msg (\\<sigma> i));\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p';\n        l' = PToy-:6; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i \\<in> is_pkt (\\<sigma> i); q = p'\\<rbrakk>\n       \\<Longrightarrow> num (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "show \"num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "proof (cases \"sid (\\<sigma> i) = i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. sid (\\<sigma> i) = i \\<Longrightarrow>\n    num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n 2. sid (\\<sigma> i) \\<noteq> i \\<Longrightarrow>\n    num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "assume \"sid (\\<sigma> i) = i\""], ["proof (state)\nthis:\n  sid (\\<sigma> i) = i\n\ngoal (2 subgoals):\n 1. sid (\\<sigma> i) = i \\<Longrightarrow>\n    num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n 2. sid (\\<sigma> i) \\<noteq> i \\<Longrightarrow>\n    num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "with * \\<open>\\<forall>i\\<in>{i}. \\<sigma>' i = \\<sigma> i\\<close>"], ["proof (chain)\npicking this:\n  num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\n  \\<forall>i\\<in>{i}. \\<sigma>' i = \\<sigma> i\n  sid (\\<sigma> i) = i", "show ?thesis"], ["proof (prove)\nusing this:\n  num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\n  \\<forall>i\\<in>{i}. \\<sigma>' i = \\<sigma> i\n  sid (\\<sigma> i) = i\n\ngoal (1 subgoal):\n 1. num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "by simp"], ["proof (state)\nthis:\n  num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n\ngoal (1 subgoal):\n 1. sid (\\<sigma> i) \\<noteq> i \\<Longrightarrow>\n    num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sid (\\<sigma> i) \\<noteq> i \\<Longrightarrow>\n    num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "assume \"sid (\\<sigma> i) \\<noteq> i\""], ["proof (state)\nthis:\n  sid (\\<sigma> i) \\<noteq> i\n\ngoal (1 subgoal):\n 1. sid (\\<sigma> i) \\<noteq> i \\<Longrightarrow>\n    num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "with \\<open>\\<forall>j. j \\<notin> {i} \\<longrightarrow> nos_inc (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<notin> {i} \\<longrightarrow> nos_inc (\\<sigma> j) (\\<sigma>' j)\n  sid (\\<sigma> i) \\<noteq> i", "have \"no (\\<sigma> (sid (\\<sigma> i))) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> {i} \\<longrightarrow> nos_inc (\\<sigma> j) (\\<sigma>' j)\n  sid (\\<sigma> i) \\<noteq> i\n\ngoal (1 subgoal):\n 1. no (\\<sigma> (sid (\\<sigma> i))) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "by simp"], ["proof (state)\nthis:\n  no (\\<sigma> (sid (\\<sigma> i))) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. sid (\\<sigma> i) \\<noteq> i \\<Longrightarrow>\n    num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "with * \\<open>\\<forall>i\\<in>{i}. \\<sigma>' i = \\<sigma> i\\<close>"], ["proof (chain)\npicking this:\n  num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\n  \\<forall>i\\<in>{i}. \\<sigma>' i = \\<sigma> i\n  no (\\<sigma> (sid (\\<sigma> i))) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "show ?thesis"], ["proof (prove)\nusing this:\n  num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\n  \\<forall>i\\<in>{i}. \\<sigma>' i = \\<sigma> i\n  no (\\<sigma> (sid (\\<sigma> i))) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "by simp"], ["proof (state)\nthis:\n  num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>';\n        PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\\<rbrakk>\n       \\<Longrightarrow> PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:2;\n        ((\\<sigma>, {PToy-:2}\\<langle>is_pkt\\<rangle>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:6 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        msg_ok \\<sigma> (msg (\\<sigma> i));\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p';\n        l' = PToy-:6; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i \\<in> is_pkt (\\<sigma> i); q = p'\\<rbrakk>\n       \\<Longrightarrow> num (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>';\n        PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\\<rbrakk>\n       \\<Longrightarrow> PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:2;\n        ((\\<sigma>, {PToy-:2}\\<langle>is_pkt\\<rangle>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:6 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        msg_ok \\<sigma> (msg (\\<sigma> i));\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p';\n        l' = PToy-:6; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i \\<in> is_pkt (\\<sigma> i); q = p'\\<rbrakk>\n       \\<Longrightarrow> num (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "fix p l \\<sigma> a q l' \\<sigma>' pp p'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>';\n        PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\\<rbrakk>\n       \\<Longrightarrow> PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:2;\n        ((\\<sigma>, {PToy-:2}\\<langle>is_pkt\\<rangle>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:6 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        msg_ok \\<sigma> (msg (\\<sigma> i));\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p';\n        l' = PToy-:6; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i \\<in> is_pkt (\\<sigma> i); q = p'\\<rbrakk>\n       \\<Longrightarrow> num (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "assume \"msg_ok \\<sigma> (msg (\\<sigma> i))\"\n         and \"\\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)\"\n         and \"\\<sigma>' i \\<in> is_pkt (\\<sigma> i)\""], ["proof (state)\nthis:\n  msg_ok \\<sigma> (msg (\\<sigma> i))\n  \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)\n  \\<sigma>' i \\<in> is_pkt (\\<sigma> i)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>';\n        PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\\<rbrakk>\n       \\<Longrightarrow> PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:2;\n        ((\\<sigma>, {PToy-:2}\\<langle>is_pkt\\<rangle>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:6 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        msg_ok \\<sigma> (msg (\\<sigma> i));\n        \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j);\n        p = {PToy-:2}\\<langle>is_pkt\\<rangle>\n        p';\n        l' = PToy-:6; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i \\<in> is_pkt (\\<sigma> i); q = p'\\<rbrakk>\n       \\<Longrightarrow> num (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "show \"num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "proof (cases \"msg (\\<sigma> i)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       msg (\\<sigma> i) = Pkt x11 x12 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n 2. \\<And>x21 x22.\n       msg (\\<sigma> i) = Newpkt x21 x22 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "fix num' sid'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       msg (\\<sigma> i) = Pkt x11 x12 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n 2. \\<And>x21 x22.\n       msg (\\<sigma> i) = Newpkt x21 x22 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "assume \"msg (\\<sigma> i) = Pkt num' sid'\""], ["proof (state)\nthis:\n  msg (\\<sigma> i) = Pkt num' sid'\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       msg (\\<sigma> i) = Pkt x11 x12 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n 2. \\<And>x21 x22.\n       msg (\\<sigma> i) = Newpkt x21 x22 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "with \\<open>\\<sigma>' i \\<in> is_pkt (\\<sigma> i)\\<close>"], ["proof (chain)\npicking this:\n  \\<sigma>' i \\<in> is_pkt (\\<sigma> i)\n  msg (\\<sigma> i) = Pkt num' sid'", "obtain \"num (\\<sigma>' i) = num'\"\n                                      and \"sid (\\<sigma>' i) = sid'\""], ["proof (prove)\nusing this:\n  \\<sigma>' i \\<in> is_pkt (\\<sigma> i)\n  msg (\\<sigma> i) = Pkt num' sid'\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>num (\\<sigma>' i) = num'; sid (\\<sigma>' i) = sid'\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_pkt_def"], ["proof (prove)\nusing this:\n  \\<sigma>' i\n  \\<in> (case msg (\\<sigma> i) of\n         Pkt num' sid' \\<Rightarrow>\n           {\\<sigma> i\\<lparr>num := num', sid := sid'\\<rparr>}\n         | Newpkt nat1 nat2 \\<Rightarrow> {})\n  msg (\\<sigma> i) = Pkt num' sid'\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>num (\\<sigma>' i) = num'; sid (\\<sigma>' i) = sid'\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  num (\\<sigma>' i) = num'\n  sid (\\<sigma>' i) = sid'\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       msg (\\<sigma> i) = Pkt x11 x12 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n 2. \\<And>x21 x22.\n       msg (\\<sigma> i) = Newpkt x21 x22 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "with \\<open>msg (\\<sigma> i) = Pkt num' sid'\\<close> and \\<open>msg_ok \\<sigma> (msg (\\<sigma> i))\\<close>"], ["proof (chain)\npicking this:\n  msg (\\<sigma> i) = Pkt num' sid'\n  msg_ok \\<sigma> (msg (\\<sigma> i))\n  num (\\<sigma>' i) = num'\n  sid (\\<sigma>' i) = sid'", "have \"num (\\<sigma>' i) \\<le> no (\\<sigma> (sid (\\<sigma>' i)))\""], ["proof (prove)\nusing this:\n  msg (\\<sigma> i) = Pkt num' sid'\n  msg_ok \\<sigma> (msg (\\<sigma> i))\n  num (\\<sigma>' i) = num'\n  sid (\\<sigma>' i) = sid'\n\ngoal (1 subgoal):\n 1. num (\\<sigma>' i) \\<le> no (\\<sigma> (sid (\\<sigma>' i)))", "by simp"], ["proof (state)\nthis:\n  num (\\<sigma>' i) \\<le> no (\\<sigma> (sid (\\<sigma>' i)))\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       msg (\\<sigma> i) = Pkt x11 x12 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n 2. \\<And>x21 x22.\n       msg (\\<sigma> i) = Newpkt x21 x22 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "also"], ["proof (state)\nthis:\n  num (\\<sigma>' i) \\<le> no (\\<sigma> (sid (\\<sigma>' i)))\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       msg (\\<sigma> i) = Pkt x11 x12 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n 2. \\<And>x21 x22.\n       msg (\\<sigma> i) = Newpkt x21 x22 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "from \\<open>\\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)", "have \"no (\\<sigma> (sid (\\<sigma>' i))) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\""], ["proof (prove)\nusing this:\n  \\<forall>j. no (\\<sigma> j) \\<le> no (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. no (\\<sigma> (sid (\\<sigma>' i)))\n    \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", ".."], ["proof (state)\nthis:\n  no (\\<sigma> (sid (\\<sigma>' i))) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       msg (\\<sigma> i) = Pkt x11 x12 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n 2. \\<And>x21 x22.\n       msg (\\<sigma> i) = Newpkt x21 x22 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "finally"], ["proof (chain)\npicking this:\n  num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "show ?thesis"], ["proof (prove)\nusing this:\n  num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n\ngoal (1 subgoal):\n 1. num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "."], ["proof (state)\nthis:\n  num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       msg (\\<sigma> i) = Newpkt x21 x22 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       msg (\\<sigma> i) = Newpkt x21 x22 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "fix num' sid'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       msg (\\<sigma> i) = Newpkt x21 x22 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "assume \"msg (\\<sigma> i) = Newpkt num' sid'\""], ["proof (state)\nthis:\n  msg (\\<sigma> i) = Newpkt num' sid'\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       msg (\\<sigma> i) = Newpkt x21 x22 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "with \\<open>\\<sigma>' i \\<in> is_pkt (\\<sigma> i)\\<close>"], ["proof (chain)\npicking this:\n  \\<sigma>' i \\<in> is_pkt (\\<sigma> i)\n  msg (\\<sigma> i) = Newpkt num' sid'", "have False"], ["proof (prove)\nusing this:\n  \\<sigma>' i \\<in> is_pkt (\\<sigma> i)\n  msg (\\<sigma> i) = Newpkt num' sid'\n\ngoal (1 subgoal):\n 1. False", "unfolding is_pkt_def"], ["proof (prove)\nusing this:\n  \\<sigma>' i\n  \\<in> (case msg (\\<sigma> i) of\n         Pkt num' sid' \\<Rightarrow>\n           {\\<sigma> i\\<lparr>num := num', sid := sid'\\<rparr>}\n         | Newpkt nat1 nat2 \\<Rightarrow> {})\n  msg (\\<sigma> i) = Newpkt num' sid'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       msg (\\<sigma> i) = Newpkt x21 x22 \\<Longrightarrow>\n       num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))", ".."], ["proof (state)\nthis:\n  num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  num (\\<sigma>' i) \\<le> no (\\<sigma>' (sid (\\<sigma>' i)))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        other nos_inc {i} \\<sigma> \\<sigma>';\n        PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10\\<rbrakk>\n       \\<Longrightarrow> PToy-:6 \\<le> l \\<and> l \\<le> PToy-:10", "qed"], ["proof (state)\nthis:\n  optoy\n   i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                   other nos_inc {i} \\<rightarrow>)\n                   onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                    (\\<lambda>(\\<sigma>, l).\n                        l \\<in> {PToy-:6..PToy-:10} \\<longrightarrow>\n                        num (\\<sigma> i)\n                        \\<le> no (\\<sigma> (sid (\\<sigma> i))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas oseq_id_constant =\n  open_seq_invariant [OF id_constant initiali_toy otoy_trans toy_trans,\n                      simplified seql_onl_swap]"], ["", "lemmas oseq_nhid_eq_i =\n  open_seq_invariant [OF nhid_eq_i initiali_toy otoy_trans toy_trans,\n                      simplified seql_onl_swap]"], ["", "lemmas oseq_nhid_eq_id =\n  open_seq_invariant [OF nhid_eq_id initiali_toy otoy_trans toy_trans,\n                      simplified seql_onl_swap]"], ["", "lemma oseq_bigger_than_next:\n  shows \"optoy i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                      other nos_inc {i} \\<rightarrow>) global (\\<lambda>\\<sigma>. no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\"\n    (is \"_ \\<Turnstile> (?S, ?U \\<rightarrow>) ?P\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "have nhidinv: \"optoy i \\<Turnstile> (?S, ?U \\<rightarrow>)\n                              onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<sigma>, l). l\\<in>{PToy-:2..PToy-:8}\n                                                    \\<longrightarrow> nhid (\\<sigma> i) = id (\\<sigma> i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<sigma>, l).\n                          l \\<in> {PToy-:2..PToy-:8} \\<longrightarrow>\n                          nhid (\\<sigma> i) = state.id (\\<sigma> i))", "by (rule oinvariant_weakenE [OF oseq_nhid_eq_id]) (auto simp: seqlsimp)"], ["proof (state)\nthis:\n  optoy\n   i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                   other nos_inc {i} \\<rightarrow>)\n                   onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                    (\\<lambda>(\\<sigma>, l).\n                        l \\<in> {PToy-:2..PToy-:8} \\<longrightarrow>\n                        nhid (\\<sigma> i) = state.id (\\<sigma> i))\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "have idinv: \"optoy i \\<Turnstile> (?S, ?U \\<rightarrow>) onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<sigma>, l). id (\\<sigma> i) = i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<sigma>, l). state.id (\\<sigma> i) = i)", "by (rule oinvariant_weakenE [OF oseq_id_constant]) (auto simp: seqlsimp)"], ["proof (state)\nthis:\n  optoy\n   i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                   other nos_inc {i} \\<rightarrow>)\n                   onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                    (\\<lambda>(\\<sigma>, l). state.id (\\<sigma> i) = i)\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "{"], ["proof (state)\nthis:\n  optoy\n   i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                   other nos_inc {i} \\<rightarrow>)\n                   onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                    (\\<lambda>(\\<sigma>, l). state.id (\\<sigma> i) = i)\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "fix \\<sigma> \\<sigma>' a"], ["proof (state)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "assume \"no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\"\n         and \"\\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)\""], ["proof (state)\nthis:\n  no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\n  \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "note this(1)"], ["proof (state)\nthis:\n  no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "also"], ["proof (state)\nthis:\n  no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "from \\<open>\\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)", "have \"no (\\<sigma> (nhid (\\<sigma> i))) \\<le> no (\\<sigma>' (nhid (\\<sigma> i)))\""], ["proof (prove)\nusing this:\n  \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. no (\\<sigma> (nhid (\\<sigma> i)))\n    \\<le> no (\\<sigma>' (nhid (\\<sigma> i)))", "by auto"], ["proof (state)\nthis:\n  no (\\<sigma> (nhid (\\<sigma> i))) \\<le> no (\\<sigma>' (nhid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "finally"], ["proof (chain)\npicking this:\n  no (\\<sigma> i) \\<le> no (\\<sigma>' (nhid (\\<sigma> i)))", "have \"no (\\<sigma> i) \\<le> no (\\<sigma>' (nhid (\\<sigma> i)))\""], ["proof (prove)\nusing this:\n  no (\\<sigma> i) \\<le> no (\\<sigma>' (nhid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. no (\\<sigma> i) \\<le> no (\\<sigma>' (nhid (\\<sigma> i)))", ".."], ["proof (state)\nthis:\n  no (\\<sigma> i) \\<le> no (\\<sigma>' (nhid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>no (?\\<sigma>2 i) \\<le> no (?\\<sigma>2 (nhid (?\\<sigma>2 i)));\n   \\<forall>j. nos_inc (?\\<sigma>2 j) (?\\<sigma>'2 j)\\<rbrakk>\n  \\<Longrightarrow> no (?\\<sigma>2 i)\n                    \\<le> no (?\\<sigma>'2 (nhid (?\\<sigma>2 i)))\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "note * = this"], ["proof (state)\nthis:\n  \\<lbrakk>no (?\\<sigma>2 i) \\<le> no (?\\<sigma>2 (nhid (?\\<sigma>2 i)));\n   \\<forall>j. nos_inc (?\\<sigma>2 j) (?\\<sigma>'2 j)\\<rbrakk>\n  \\<Longrightarrow> no (?\\<sigma>2 i)\n                    \\<le> no (?\\<sigma>'2 (nhid (?\\<sigma>2 i)))\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "have \"optoy i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                      other nos_inc {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y (\\<lambda>(\\<sigma>, l). no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                      (\\<lambda>(\\<sigma>, l).\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "proof (inv_cterms\n             inv add: onl_oinvariant_sterms [OF toy_wf oseq_no_leq_num [THEN oinvariant_anyact]]\n                      oseq_step_invariant_sterms [OF all_nos_inc toy_wf otoy_trans]\n                      onl_oinvariant_sterms [OF toy_wf is_pkt_handler_num_leq_no]\n                      onl_oinvariant_sterms [OF toy_wf nhidinv]\n                      onl_oinvariant_sterms [OF toy_wf idinv]\n             simp add: seqlsimp seqllsimp\n             simp del: nos_inc_simp\n                solve: *)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y;\n        l = PToy-:0\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\n 2. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)));\n        other nos_inc {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\n 3. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:8;\n        ((\\<sigma>,\n          {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:9 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        state.id (\\<sigma> i) = i; nhid (\\<sigma> i) = i;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)));\n        \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        no (\\<sigma> i) \\<le> num (\\<sigma> i);\n        p =\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p';\n        l' = PToy-:9; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i = \\<sigma> i\\<lparr>nhid := sid (\\<sigma> i)\\<rparr>;\n        q = p'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "fix \\<sigma> p l"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y;\n        l = PToy-:0\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\n 2. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)));\n        other nos_inc {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\n 3. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:8;\n        ((\\<sigma>,\n          {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:9 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        state.id (\\<sigma> i) = i; nhid (\\<sigma> i) = i;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)));\n        \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        no (\\<sigma> i) \\<le> num (\\<sigma> i);\n        p =\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p';\n        l' = PToy-:9; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i = \\<sigma> i\\<lparr>nhid := sid (\\<sigma> i)\\<rparr>;\n        q = p'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "assume \"(\\<sigma>, p) \\<in> \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y\""], ["proof (state)\nthis:\n  (\\<sigma>, p) \\<in> \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y;\n        l = PToy-:0\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\n 2. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)));\n        other nos_inc {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\n 3. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:8;\n        ((\\<sigma>,\n          {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:9 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        state.id (\\<sigma> i) = i; nhid (\\<sigma> i) = i;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)));\n        \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        no (\\<sigma> i) \\<le> num (\\<sigma> i);\n        p =\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p';\n        l' = PToy-:9; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i = \\<sigma> i\\<lparr>nhid := sid (\\<sigma> i)\\<rparr>;\n        q = p'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "thus \"no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, p) \\<in> \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y\n\ngoal (1 subgoal):\n 1. no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))", "by (simp add: \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y_def)"], ["proof (state)\nthis:\n  no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)));\n        other nos_inc {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:8;\n        ((\\<sigma>,\n          {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:9 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        state.id (\\<sigma> i) = i; nhid (\\<sigma> i) = i;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)));\n        \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        no (\\<sigma> i) \\<le> num (\\<sigma> i);\n        p =\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p';\n        l' = PToy-:9; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i = \\<sigma> i\\<lparr>nhid := sid (\\<sigma> i)\\<rparr>;\n        q = p'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)));\n        other nos_inc {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:8;\n        ((\\<sigma>,\n          {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:9 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        state.id (\\<sigma> i) = i; nhid (\\<sigma> i) = i;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)));\n        \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        no (\\<sigma> i) \\<le> num (\\<sigma> i);\n        p =\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p';\n        l' = PToy-:9; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i = \\<sigma> i\\<lparr>nhid := sid (\\<sigma> i)\\<rparr>;\n        q = p'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "fix \\<sigma> \\<sigma>' p l"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)));\n        other nos_inc {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:8;\n        ((\\<sigma>,\n          {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:9 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        state.id (\\<sigma> i) = i; nhid (\\<sigma> i) = i;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)));\n        \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        no (\\<sigma> i) \\<le> num (\\<sigma> i);\n        p =\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p';\n        l' = PToy-:9; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i = \\<sigma> i\\<lparr>nhid := sid (\\<sigma> i)\\<rparr>;\n        q = p'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "assume or: \"(\\<sigma>, p) \\<in> oreachable (optoy i) ?S ?U\"\n         and \"l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p\"\n         and \"no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\"\n         and \"other nos_inc {i} \\<sigma> \\<sigma>'\""], ["proof (state)\nthis:\n  (\\<sigma>, p)\n  \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n         (other nos_inc {i})\n  l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p\n  no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\n  other nos_inc {i} \\<sigma> \\<sigma>'\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' p l.\n       \\<lbrakk>(\\<sigma>, p)\n                \\<in> oreachable (optoy i)\n                       (otherwith nos_inc {i} (orecvmsg msg_ok))\n                       (other nos_inc {i});\n        l \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p;\n        no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)));\n        other nos_inc {i} \\<sigma> \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma>' i)\n                         \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\n 2. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:8;\n        ((\\<sigma>,\n          {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:9 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        state.id (\\<sigma> i) = i; nhid (\\<sigma> i) = i;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)));\n        \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        no (\\<sigma> i) \\<le> num (\\<sigma> i);\n        p =\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p';\n        l' = PToy-:9; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i = \\<sigma> i\\<lparr>nhid := sid (\\<sigma> i)\\<rparr>;\n        q = p'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "show \"no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))", "proof (cases \"nhid (\\<sigma>' i) = i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. nhid (\\<sigma>' i) = i \\<Longrightarrow>\n    no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\n 2. nhid (\\<sigma>' i) \\<noteq> i \\<Longrightarrow>\n    no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))", "assume \"nhid (\\<sigma>' i) = i\""], ["proof (state)\nthis:\n  nhid (\\<sigma>' i) = i\n\ngoal (2 subgoals):\n 1. nhid (\\<sigma>' i) = i \\<Longrightarrow>\n    no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\n 2. nhid (\\<sigma>' i) \\<noteq> i \\<Longrightarrow>\n    no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))", "with \\<open>no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\\<close>"], ["proof (chain)\npicking this:\n  no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\n  nhid (\\<sigma>' i) = i", "show ?thesis"], ["proof (prove)\nusing this:\n  no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\n  nhid (\\<sigma>' i) = i\n\ngoal (1 subgoal):\n 1. no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))", "by simp"], ["proof (state)\nthis:\n  no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\n\ngoal (1 subgoal):\n 1. nhid (\\<sigma>' i) \\<noteq> i \\<Longrightarrow>\n    no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. nhid (\\<sigma>' i) \\<noteq> i \\<Longrightarrow>\n    no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))", "assume \"nhid (\\<sigma>' i) \\<noteq> i\""], ["proof (state)\nthis:\n  nhid (\\<sigma>' i) \\<noteq> i\n\ngoal (1 subgoal):\n 1. nhid (\\<sigma>' i) \\<noteq> i \\<Longrightarrow>\n    no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))", "moreover"], ["proof (state)\nthis:\n  nhid (\\<sigma>' i) \\<noteq> i\n\ngoal (1 subgoal):\n 1. nhid (\\<sigma>' i) \\<noteq> i \\<Longrightarrow>\n    no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))", "from \\<open>other nos_inc {i} \\<sigma> \\<sigma>'\\<close> [THEN other_localD]"], ["proof (chain)\npicking this:\n  \\<sigma>' i = \\<sigma> i", "have \"\\<sigma>' i = \\<sigma> i\""], ["proof (prove)\nusing this:\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", "by simp"], ["proof (state)\nthis:\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. nhid (\\<sigma>' i) \\<noteq> i \\<Longrightarrow>\n    no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))", "ultimately"], ["proof (chain)\npicking this:\n  nhid (\\<sigma>' i) \\<noteq> i\n  \\<sigma>' i = \\<sigma> i", "have \"no (\\<sigma> (nhid (\\<sigma> i))) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\""], ["proof (prove)\nusing this:\n  nhid (\\<sigma>' i) \\<noteq> i\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. no (\\<sigma> (nhid (\\<sigma> i)))\n    \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))", "using \\<open>other nos_inc {i} \\<sigma> \\<sigma>'\\<close> and \\<open>\\<sigma>' i = \\<sigma> i\\<close>"], ["proof (prove)\nusing this:\n  nhid (\\<sigma>' i) \\<noteq> i\n  \\<sigma>' i = \\<sigma> i\n  other nos_inc {i} \\<sigma> \\<sigma>'\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. no (\\<sigma> (nhid (\\<sigma> i)))\n    \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))", "by (auto)"], ["proof (state)\nthis:\n  no (\\<sigma> (nhid (\\<sigma> i)))\n  \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\n\ngoal (1 subgoal):\n 1. nhid (\\<sigma>' i) \\<noteq> i \\<Longrightarrow>\n    no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))", "with \\<open>no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\\<close> and \\<open>\\<sigma>' i = \\<sigma> i\\<close>"], ["proof (chain)\npicking this:\n  no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\n  \\<sigma>' i = \\<sigma> i\n  no (\\<sigma> (nhid (\\<sigma> i)))\n  \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))", "show ?thesis"], ["proof (prove)\nusing this:\n  no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))\n  \\<sigma>' i = \\<sigma> i\n  no (\\<sigma> (nhid (\\<sigma> i)))\n  \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\n\ngoal (1 subgoal):\n 1. no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))", "by simp"], ["proof (state)\nthis:\n  no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  no (\\<sigma>' i) \\<le> no (\\<sigma>' (nhid (\\<sigma>' i)))\n\ngoal (1 subgoal):\n 1. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:8;\n        ((\\<sigma>,\n          {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:9 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        state.id (\\<sigma> i) = i; nhid (\\<sigma> i) = i;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)));\n        \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        no (\\<sigma> i) \\<le> num (\\<sigma> i);\n        p =\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p';\n        l' = PToy-:9; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i = \\<sigma> i\\<lparr>nhid := sid (\\<sigma> i)\\<rparr>;\n        q = p'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:8;\n        ((\\<sigma>,\n          {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:9 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        state.id (\\<sigma> i) = i; nhid (\\<sigma> i) = i;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)));\n        \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        no (\\<sigma> i) \\<le> num (\\<sigma> i);\n        p =\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p';\n        l' = PToy-:9; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i = \\<sigma> i\\<lparr>nhid := sid (\\<sigma> i)\\<rparr>;\n        q = p'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "fix p l \\<sigma> a q l' \\<sigma>' pp p'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:8;\n        ((\\<sigma>,\n          {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:9 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        state.id (\\<sigma> i) = i; nhid (\\<sigma> i) = i;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)));\n        \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        no (\\<sigma> i) \\<le> num (\\<sigma> i);\n        p =\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p';\n        l' = PToy-:9; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i = \\<sigma> i\\<lparr>nhid := sid (\\<sigma> i)\\<rparr>;\n        q = p'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "assume \"no (\\<sigma> i) \\<le> num (\\<sigma> i)\"\n         and \"num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\"\n         and \"\\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)\""], ["proof (state)\nthis:\n  no (\\<sigma> i) \\<le> num (\\<sigma> i)\n  num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\n  \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:8;\n        ((\\<sigma>,\n          {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:9 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        state.id (\\<sigma> i) = i; nhid (\\<sigma> i) = i;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)));\n        \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        no (\\<sigma> i) \\<le> num (\\<sigma> i);\n        p =\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p';\n        l' = PToy-:9; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i = \\<sigma> i\\<lparr>nhid := sid (\\<sigma> i)\\<rparr>;\n        q = p'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "from this(1-2)"], ["proof (chain)\npicking this:\n  no (\\<sigma> i) \\<le> num (\\<sigma> i)\n  num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))", "have \"no (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\""], ["proof (prove)\nusing this:\n  no (\\<sigma> i) \\<le> num (\\<sigma> i)\n  num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. no (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))", "by (rule le_trans)"], ["proof (state)\nthis:\n  no (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:8;\n        ((\\<sigma>,\n          {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:9 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        state.id (\\<sigma> i) = i; nhid (\\<sigma> i) = i;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)));\n        \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        no (\\<sigma> i) \\<le> num (\\<sigma> i);\n        p =\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p';\n        l' = PToy-:9; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i = \\<sigma> i\\<lparr>nhid := sid (\\<sigma> i)\\<rparr>;\n        q = p'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "also"], ["proof (state)\nthis:\n  no (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:8;\n        ((\\<sigma>,\n          {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:9 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        state.id (\\<sigma> i) = i; nhid (\\<sigma> i) = i;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)));\n        \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        no (\\<sigma> i) \\<le> num (\\<sigma> i);\n        p =\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p';\n        l' = PToy-:9; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i = \\<sigma> i\\<lparr>nhid := sid (\\<sigma> i)\\<rparr>;\n        q = p'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "from \\<open>\\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)", "have \"no (\\<sigma> (sid (\\<sigma> i))) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))\""], ["proof (prove)\nusing this:\n  \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. no (\\<sigma> (sid (\\<sigma> i))) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "by auto"], ["proof (state)\nthis:\n  no (\\<sigma> (sid (\\<sigma> i))) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. \\<And>p l \\<sigma> a q l' \\<sigma>' pp p'.\n       \\<lbrakk>l = PToy-:8;\n        ((\\<sigma>,\n          {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n          p'),\n         \\<tau>\\<^sub>s, \\<sigma>', p')\n        \\<in> oseqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y i;\n        PToy-:9 \\<in> labels \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y p';\n        (\\<sigma>, pp)\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p' \\<in> sterms \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y pp;\n        (\\<sigma>', p')\n        \\<in> oreachable (optoy i) (otherwith nos_inc {i} (orecvmsg msg_ok))\n               (other nos_inc {i});\n        otherwith nos_inc {i} (orecvmsg msg_ok) \\<sigma> \\<sigma>'\n         \\<tau>\\<^sub>s;\n        state.id (\\<sigma> i) = i; nhid (\\<sigma> i) = i;\n        num (\\<sigma> i) \\<le> no (\\<sigma> (sid (\\<sigma> i)));\n        \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        no (\\<sigma> i) \\<le> num (\\<sigma> i);\n        p =\n        {PToy-:8}\\<lbrakk>\\<lambda>\\<xi>. \\<xi>\\<lparr>nhid := sid \\<xi>\\<rparr>\\<rbrakk>\n        p';\n        l' = PToy-:9; a = \\<tau>\\<^sub>s;\n        \\<sigma>' i = \\<sigma> i\\<lparr>nhid := sid (\\<sigma> i)\\<rparr>;\n        q = p'\\<rbrakk>\n       \\<Longrightarrow> no (\\<sigma> i)\n                         \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "finally"], ["proof (chain)\npicking this:\n  no (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", "show \"no (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))\""], ["proof (prove)\nusing this:\n  no (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))\n\ngoal (1 subgoal):\n 1. no (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))", ".."], ["proof (state)\nthis:\n  no (\\<sigma> i) \\<le> no (\\<sigma>' (sid (\\<sigma> i)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  optoy\n   i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                   other nos_inc {i} \\<rightarrow>)\n                   onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                    (\\<lambda>(\\<sigma>, l).\n                        no (\\<sigma> i)\n                        \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  optoy\n   i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                   other nos_inc {i} \\<rightarrow>)\n                   onl \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\n                    (\\<lambda>(\\<sigma>, l).\n                        no (\\<sigma> i)\n                        \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                     other nos_inc {i} \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          no (\\<sigma> i)\n                          \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "by (rule oinvariant_weakenE)\n         (auto simp: onl_def)"], ["proof (state)\nthis:\n  optoy\n   i \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                   other nos_inc {i} \\<rightarrow>)\n                   global\n                    (\\<lambda>\\<sigma>.\n                        no (\\<sigma> i)\n                        \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma anycast_weakenE [elim]:\n  assumes \"anycast P a\"\n      and \"\\<And>m. P m \\<Longrightarrow> Q m\"\n  shows \"anycast Q a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. anycast Q a", "using assms"], ["proof (prove)\nusing this:\n  anycast P a\n  P ?m \\<Longrightarrow> Q ?m\n\ngoal (1 subgoal):\n 1. anycast Q a", "unfolding anycast_def"], ["proof (prove)\nusing this:\n  case a of broadcast m \\<Rightarrow> P m | groupcast x m \\<Rightarrow> P m\n  | unicast x m \\<Rightarrow> P m | _ \\<Rightarrow> True\n  P ?m \\<Longrightarrow> Q ?m\n\ngoal (1 subgoal):\n 1. case a of broadcast m \\<Rightarrow> Q m\n    | groupcast x m \\<Rightarrow> Q m | unicast x m \\<Rightarrow> Q m\n    | _ \\<Rightarrow> True", "by (auto split: seq_action.split)"], ["", "lemma oseq_msg_ok:\n  \"optoy i \\<Turnstile>\\<^sub>A (act TT, other U {i} \\<rightarrow>) globala (\\<lambda>(\\<sigma>, a, _). anycast (msg_ok \\<sigma>) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile>\\<^sub>A (act TT, other U {i} \\<rightarrow>)\n                             globala\n                              (\\<lambda>(\\<sigma>, a, uu_).\n                                  anycast (msg_ok \\<sigma>) a)", "by (rule ostep_invariant_weakenE [OF open_seq_step_invariant\n            [OF seq_msg_ok initiali_toy otoy_trans toy_trans, simplified seql_onl_swap]])\n     (auto simp: seqllsimp dest!: onllD elim!: anycast_weakenE intro!: msg_okI)"], ["", "subsection \"Lifting\""], ["", "lemma opar_bigger_than_next:\n  shows \"optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile> (otherwith nos_inc {i} (orecvmsg msg_ok),\n                      other nos_inc {i} \\<rightarrow>) global (\\<lambda>\\<sigma>. no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile> (otherwith\n                         nos_inc {i} (orecvmsg msg_ok),\n                        other nos_inc {i} \\<rightarrow>)\n                        global\n                         (\\<lambda>\\<sigma>.\n                             no (\\<sigma> i)\n                             \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "proof (rule lift_into_qmsg [OF oseq_bigger_than_next])"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi> \\<xi>'.\n       nos_inc \\<xi> \\<xi>' \\<Longrightarrow> nos_inc \\<xi> \\<xi>'\n 3. \\<And>\\<sigma> \\<sigma>' m.\n       \\<lbrakk>\\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        msg_ok \\<sigma> m\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m\n 4. optoy\n     i \\<Turnstile>\\<^sub>A (otherwith nos_inc {i} (orecvmsg msg_ok),\n                             other nos_inc {i} \\<rightarrow>)\n                             globala\n                              (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                  nos_inc (\\<sigma> i) (\\<sigma>' i))", "fix \\<sigma> \\<sigma>' m"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi> \\<xi>'.\n       nos_inc \\<xi> \\<xi>' \\<Longrightarrow> nos_inc \\<xi> \\<xi>'\n 3. \\<And>\\<sigma> \\<sigma>' m.\n       \\<lbrakk>\\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        msg_ok \\<sigma> m\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m\n 4. optoy\n     i \\<Turnstile>\\<^sub>A (otherwith nos_inc {i} (orecvmsg msg_ok),\n                             other nos_inc {i} \\<rightarrow>)\n                             globala\n                              (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                  nos_inc (\\<sigma> i) (\\<sigma>' i))", "assume \"\\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)\"\n       and \"msg_ok \\<sigma> m\""], ["proof (state)\nthis:\n  \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)\n  msg_ok \\<sigma> m\n\ngoal (4 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi> \\<xi>'.\n       nos_inc \\<xi> \\<xi>' \\<Longrightarrow> nos_inc \\<xi> \\<xi>'\n 3. \\<And>\\<sigma> \\<sigma>' m.\n       \\<lbrakk>\\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j);\n        msg_ok \\<sigma> m\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m\n 4. optoy\n     i \\<Turnstile>\\<^sub>A (otherwith nos_inc {i} (orecvmsg msg_ok),\n                             other nos_inc {i} \\<rightarrow>)\n                             globala\n                              (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                  nos_inc (\\<sigma> i) (\\<sigma>' i))", "from this(2)"], ["proof (chain)\npicking this:\n  msg_ok \\<sigma> m", "show \"msg_ok \\<sigma>' m\""], ["proof (prove)\nusing this:\n  msg_ok \\<sigma> m\n\ngoal (1 subgoal):\n 1. msg_ok \\<sigma>' m", "proof (cases m, simp only: msg_ok_Pkt)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>x11 \\<le> no (\\<sigma> x12); m = Pkt x11 x12; True\\<rbrakk>\n       \\<Longrightarrow> x11 \\<le> no (\\<sigma>' x12)\n 2. \\<And>x21 x22.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Newpkt x21 x22\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m", "fix num' sid'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>x11 \\<le> no (\\<sigma> x12); m = Pkt x11 x12; True\\<rbrakk>\n       \\<Longrightarrow> x11 \\<le> no (\\<sigma>' x12)\n 2. \\<And>x21 x22.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Newpkt x21 x22\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m", "assume \"num' \\<le> no (\\<sigma> sid')\""], ["proof (state)\nthis:\n  num' \\<le> no (\\<sigma> sid')\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>x11 \\<le> no (\\<sigma> x12); m = Pkt x11 x12; True\\<rbrakk>\n       \\<Longrightarrow> x11 \\<le> no (\\<sigma>' x12)\n 2. \\<And>x21 x22.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Newpkt x21 x22\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m", "also"], ["proof (state)\nthis:\n  num' \\<le> no (\\<sigma> sid')\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>x11 \\<le> no (\\<sigma> x12); m = Pkt x11 x12; True\\<rbrakk>\n       \\<Longrightarrow> x11 \\<le> no (\\<sigma>' x12)\n 2. \\<And>x21 x22.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Newpkt x21 x22\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m", "from \\<open>\\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)", "have \"no (\\<sigma> sid') \\<le> no (\\<sigma>' sid')\""], ["proof (prove)\nusing this:\n  \\<forall>j. nos_inc (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. no (\\<sigma> sid') \\<le> no (\\<sigma>' sid')", "by simp"], ["proof (state)\nthis:\n  no (\\<sigma> sid') \\<le> no (\\<sigma>' sid')\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>x11 \\<le> no (\\<sigma> x12); m = Pkt x11 x12; True\\<rbrakk>\n       \\<Longrightarrow> x11 \\<le> no (\\<sigma>' x12)\n 2. \\<And>x21 x22.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Newpkt x21 x22\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m", "finally"], ["proof (chain)\npicking this:\n  num' \\<le> no (\\<sigma>' sid')", "show \"num' \\<le> no (\\<sigma>' sid')\""], ["proof (prove)\nusing this:\n  num' \\<le> no (\\<sigma>' sid')\n\ngoal (1 subgoal):\n 1. num' \\<le> no (\\<sigma>' sid')", "."], ["proof (state)\nthis:\n  num' \\<le> no (\\<sigma>' sid')\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>msg_ok \\<sigma> m; m = Newpkt x21 x22\\<rbrakk>\n       \\<Longrightarrow> msg_ok \\<sigma>' m", "qed simp"], ["proof (state)\nthis:\n  msg_ok \\<sigma>' m\n\ngoal (3 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi> \\<xi>'.\n       nos_inc \\<xi> \\<xi>' \\<Longrightarrow> nos_inc \\<xi> \\<xi>'\n 3. optoy\n     i \\<Turnstile>\\<^sub>A (otherwith nos_inc {i} (orecvmsg msg_ok),\n                             other nos_inc {i} \\<rightarrow>)\n                             globala\n                              (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                  nos_inc (\\<sigma> i) (\\<sigma>' i))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi> \\<xi>'.\n       nos_inc \\<xi> \\<xi>' \\<Longrightarrow> nos_inc \\<xi> \\<xi>'\n 3. optoy\n     i \\<Turnstile>\\<^sub>A (otherwith nos_inc {i} (orecvmsg msg_ok),\n                             other nos_inc {i} \\<rightarrow>)\n                             globala\n                              (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                  nos_inc (\\<sigma> i) (\\<sigma>' i))", "show \"optoy i \\<Turnstile>\\<^sub>A (otherwith nos_inc {i} (orecvmsg msg_ok), other nos_inc {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). nos_inc (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile>\\<^sub>A (otherwith nos_inc {i} (orecvmsg msg_ok),\n                             other nos_inc {i} \\<rightarrow>)\n                             globala\n                              (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                  nos_inc (\\<sigma> i) (\\<sigma>' i))", "by (rule ostep_invariant_weakenE [OF open_seq_step_invariant\n                                         [OF seq_nos_incs initiali_toy otoy_trans toy_trans]])\n         (auto simp: seqllsimp dest!: onllD)"], ["proof (state)\nthis:\n  optoy\n   i \\<Turnstile>\\<^sub>A (otherwith nos_inc {i} (orecvmsg msg_ok),\n                           other nos_inc {i} \\<rightarrow>)\n                           globala\n                            (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                nos_inc (\\<sigma> i) (\\<sigma>' i))\n\ngoal (2 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi> \\<xi>'.\n       nos_inc \\<xi> \\<xi>' \\<Longrightarrow> nos_inc \\<xi> \\<xi>'", "qed simp"], ["", "lemma onode_bigger_than_next:\n  \"\\<langle>i : optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o\n     \\<Turnstile> (otherwith nos_inc {i} (oarrivemsg msg_ok), other nos_inc {i} \\<rightarrow>)\n        global (\\<lambda>\\<sigma>. no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : optoy\n                  i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile> (otherwith\n                             nos_inc {i} (oarrivemsg msg_ok),\n                            other nos_inc {i} \\<rightarrow>)\n                            global\n                             (\\<lambda>\\<sigma>.\n                                 no (\\<sigma> i)\n                                 \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "by (rule node_lift [OF opar_bigger_than_next])"], ["", "lemma node_local_nos_inc:\n  \"\\<langle>i : optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg (\\<lambda>_ _. True) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                                     globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). nos_inc (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : optoy\n                  i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n _. oarrivemsg (\\<lambda>_ _. True) \\<sigma>,\n                                    other (\\<lambda>_ _. True)\n                                     {i} \\<rightarrow>)\n                                    globala\n                                     (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n   nos_inc (\\<sigma> i) (\\<sigma>' i))", "proof (rule node_lift_step_statelessassm)"], ["proof (state)\ngoal (2 subgoals):\n 1. optoy\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>a b. True)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     nos_inc (\\<sigma> i) (\\<sigma>' i))\n 2. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>", "have \"optoy i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_ _. True) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). nos_inc (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                                orecvmsg (\\<lambda>_ _. True) \\<sigma>,\n                             other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                             globala\n                              (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                  nos_inc (\\<sigma> i) (\\<sigma>' i))", "by (rule ostep_invariant_weakenE [OF oseq_nos_incs])\n         (auto simp: seqllsimp dest!: onllD)"], ["proof (state)\nthis:\n  optoy\n   i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                              orecvmsg (\\<lambda>_ _. True) \\<sigma>,\n                           other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                           globala\n                            (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                nos_inc (\\<sigma> i) (\\<sigma>' i))\n\ngoal (2 subgoals):\n 1. optoy\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>a b. True)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     nos_inc (\\<sigma> i) (\\<sigma>' i))\n 2. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>", "thus \"optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_ _. True) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                                globala (\\<lambda>(\\<sigma>, _, \\<sigma>'). nos_inc (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\nusing this:\n  optoy\n   i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                              orecvmsg (\\<lambda>_ _. True) \\<sigma>,\n                           other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                           globala\n                            (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                nos_inc (\\<sigma> i) (\\<sigma>' i))\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_ _. True)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                     nos_inc (\\<sigma> i) (\\<sigma>' i))", "by (rule lift_step_into_qmsg_statelessassm) auto"], ["proof (state)\nthis:\n  optoy\n   i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                 _. orecvmsg (\\<lambda>_ _. True) \\<sigma>,\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, uu_, \\<sigma>').\n                                   nos_inc (\\<sigma> i) (\\<sigma>' i))\n\ngoal (1 subgoal):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>", "qed simp"], ["", "lemma opnet_bigger_than_next:\n  \"opnet (\\<lambda>i. optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) n\n     \\<Turnstile> (otherwith nos_inc (net_tree_ips n) (oarrivemsg msg_ok),\n         other nos_inc (net_tree_ips n) \\<rightarrow>)\n        global (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips n. no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opnet (\\<lambda>i. optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n     n \\<Turnstile> (otherwith nos_inc (net_tree_ips n) (oarrivemsg msg_ok),\n                     other nos_inc (net_tree_ips n) \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          \\<forall>i\\<in>net_tree_ips n.\n                             no (\\<sigma> i)\n                             \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "proof (rule pnet_lift [OF onode_bigger_than_next])"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, uu_).\n                                    castmsg (msg_ok \\<sigma>) a)\n 4. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a \\<noteq> \\<tau> \\<and>\n                                    (\\<forall>d.\n  a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                    nos_inc (\\<sigma> i) (\\<sigma>' i))\n 5. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    nos_inc (\\<sigma> i) (\\<sigma>' i))", "fix i R\\<^sub>i"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, uu_).\n                                    castmsg (msg_ok \\<sigma>) a)\n 4. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a \\<noteq> \\<tau> \\<and>\n                                    (\\<forall>d.\n  a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                    nos_inc (\\<sigma> i) (\\<sigma>' i))\n 5. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    nos_inc (\\<sigma> i) (\\<sigma>' i))", "have \"\\<langle>i : optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg msg_ok \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                                            globala (\\<lambda>(\\<sigma>, a, _). castmsg (msg_ok \\<sigma>) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : optoy\n                  i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n _. oarrivemsg msg_ok \\<sigma>,\n                                    other (\\<lambda>_ _. True)\n                                     {i} \\<rightarrow>)\n                                    globala\n                                     (\\<lambda>(\\<sigma>, a, uu_).\n   castmsg (msg_ok \\<sigma>) a)", "proof (rule node_lift_anycast_statelessassm)"], ["proof (state)\ngoal (1 subgoal):\n 1. optoy\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg msg_ok \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, uu_).\n                                     anycast (msg_ok \\<sigma>) a)", "have \"optoy i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_ _. True) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                        globala (\\<lambda>(\\<sigma>, a, _). anycast (msg_ok \\<sigma>) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. optoy\n     i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                                orecvmsg (\\<lambda>_ _. True) \\<sigma>,\n                             other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                             globala\n                              (\\<lambda>(\\<sigma>, a, uu_).\n                                  anycast (msg_ok \\<sigma>) a)", "by (rule ostep_invariant_weakenE [OF oseq_msg_ok]) auto"], ["proof (state)\nthis:\n  optoy\n   i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                              orecvmsg (\\<lambda>_ _. True) \\<sigma>,\n                           other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                           globala\n                            (\\<lambda>(\\<sigma>, a, uu_).\n                                anycast (msg_ok \\<sigma>) a)\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg msg_ok \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, uu_).\n                                     anycast (msg_ok \\<sigma>) a)", "hence \"optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg (\\<lambda>_ _. True) \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                                   globala (\\<lambda>(\\<sigma>, a, _). anycast (msg_ok \\<sigma>) a)\""], ["proof (prove)\nusing this:\n  optoy\n   i \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                              orecvmsg (\\<lambda>_ _. True) \\<sigma>,\n                           other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                           globala\n                            (\\<lambda>(\\<sigma>, a, uu_).\n                                anycast (msg_ok \\<sigma>) a)\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg (\\<lambda>_ _. True)\n \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, uu_).\n                                     anycast (msg_ok \\<sigma>) a)", "by (rule lift_step_into_qmsg_statelessassm) auto"], ["proof (state)\nthis:\n  optoy\n   i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                 _. orecvmsg (\\<lambda>_ _. True) \\<sigma>,\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, a, uu_).\n                                   anycast (msg_ok \\<sigma>) a)\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg msg_ok \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, uu_).\n                                     anycast (msg_ok \\<sigma>) a)", "thus \"optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. orecvmsg msg_ok \\<sigma>, other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                                  globala (\\<lambda>(\\<sigma>, a, _). anycast (msg_ok \\<sigma>) a)\""], ["proof (prove)\nusing this:\n  optoy\n   i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                 _. orecvmsg (\\<lambda>_ _. True) \\<sigma>,\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, a, uu_).\n                                   anycast (msg_ok \\<sigma>) a)\n\ngoal (1 subgoal):\n 1. optoy\n     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                   _. orecvmsg msg_ok \\<sigma>,\n                                other (\\<lambda>_ _. True)\n                                 {i} \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, uu_).\n                                     anycast (msg_ok \\<sigma>) a)", "by (rule ostep_invariant_weakenE) auto"], ["proof (state)\nthis:\n  optoy\n   i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                 _. orecvmsg msg_ok \\<sigma>,\n                              other (\\<lambda>_ _. True) {i} \\<rightarrow>)\n                              globala\n                               (\\<lambda>(\\<sigma>, a, uu_).\n                                   anycast (msg_ok \\<sigma>) a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<langle>i : optoy\n                i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                     _. oarrivemsg msg_ok \\<sigma>,\n                                  other (\\<lambda>_ _. True)\n                                   {i} \\<rightarrow>)\n                                  globala\n                                   (\\<lambda>(\\<sigma>, a, uu_).\n castmsg (msg_ok \\<sigma>) a)\n\ngoal (5 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, uu_).\n                                    castmsg (msg_ok \\<sigma>) a)\n 4. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a \\<noteq> \\<tau> \\<and>\n                                    (\\<forall>d.\n  a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                    nos_inc (\\<sigma> i) (\\<sigma>' i))\n 5. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    nos_inc (\\<sigma> i) (\\<sigma>' i))", "thus \"\\<langle>i : optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg msg_ok \\<sigma>, other nos_inc {i} \\<rightarrow>)\n                                            globala (\\<lambda>(\\<sigma>, a, _). castmsg (msg_ok \\<sigma>) a)\""], ["proof (prove)\nusing this:\n  \\<langle>i : optoy\n                i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                     _. oarrivemsg msg_ok \\<sigma>,\n                                  other (\\<lambda>_ _. True)\n                                   {i} \\<rightarrow>)\n                                  globala\n                                   (\\<lambda>(\\<sigma>, a, uu_).\n castmsg (msg_ok \\<sigma>) a)\n\ngoal (1 subgoal):\n 1. \\<langle>i : optoy\n                  i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n _. oarrivemsg msg_ok \\<sigma>,\n                                    other nos_inc {i} \\<rightarrow>)\n                                    globala\n                                     (\\<lambda>(\\<sigma>, a, uu_).\n   castmsg (msg_ok \\<sigma>) a)", "by (rule ostep_invariant_weakenE) auto"], ["proof (state)\nthis:\n  \\<langle>i : optoy\n                i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                     _. oarrivemsg msg_ok \\<sigma>,\n                                  other nos_inc {i} \\<rightarrow>)\n                                  globala\n                                   (\\<lambda>(\\<sigma>, a, uu_).\n castmsg (msg_ok \\<sigma>) a)\n\ngoal (4 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a \\<noteq> \\<tau> \\<and>\n                                    (\\<forall>d.\n  a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                    nos_inc (\\<sigma> i) (\\<sigma>' i))\n 4. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    nos_inc (\\<sigma> i) (\\<sigma>' i))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a \\<noteq> \\<tau> \\<and>\n                                    (\\<forall>d.\n  a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                    nos_inc (\\<sigma> i) (\\<sigma>' i))\n 4. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    nos_inc (\\<sigma> i) (\\<sigma>' i))", "fix i R\\<^sub>i"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a \\<noteq> \\<tau> \\<and>\n                                    (\\<forall>d.\n  a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                    nos_inc (\\<sigma> i) (\\<sigma>' i))\n 4. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    nos_inc (\\<sigma> i) (\\<sigma>' i))", "show \"\\<langle>i : optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg msg_ok \\<sigma>,\n                                            other nos_inc {i} \\<rightarrow>)\n             globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). a \\<noteq> \\<tau> \\<and> (\\<forall>d. a \\<noteq> i:deliver(d)) \\<longrightarrow> nos_inc (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : optoy\n                  i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n _. oarrivemsg msg_ok \\<sigma>,\n                                    other nos_inc {i} \\<rightarrow>)\n                                    globala\n                                     (\\<lambda>(\\<sigma>, a, \\<sigma>').\n   a \\<noteq> \\<tau> \\<and>\n   (\\<forall>d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n   nos_inc (\\<sigma> i) (\\<sigma>' i))", "by (rule ostep_invariant_weakenE [OF node_local_nos_inc]) auto"], ["proof (state)\nthis:\n  \\<langle>i : optoy\n                i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                     _. oarrivemsg msg_ok \\<sigma>,\n                                  other nos_inc {i} \\<rightarrow>)\n                                  globala\n                                   (\\<lambda>(\\<sigma>, a, \\<sigma>').\n a \\<noteq> \\<tau> \\<and>\n (\\<forall>d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n nos_inc (\\<sigma> i) (\\<sigma>' i))\n\ngoal (3 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    nos_inc (\\<sigma> i) (\\<sigma>' i))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    nos_inc (\\<sigma> i) (\\<sigma>' i))", "fix i R"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 3. \\<And>i R.\n       \\<langle>i : optoy\n                     i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                                  _. oarrivemsg msg_ok \\<sigma>,\n                               other nos_inc {i} \\<rightarrow>)\n                               globala\n                                (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                    a = \\<tau> \\<or>\n                                    (\\<exists>d.\n  a = i:deliver(d)) \\<longrightarrow>\n                                    nos_inc (\\<sigma> i) (\\<sigma>' i))", "show \"\\<langle>i : optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg msg_ok \\<sigma>,\n                                           other nos_inc {i} \\<rightarrow>)\n             globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). a = \\<tau> \\<or> (\\<exists>d. a = i:deliver(d)) \\<longrightarrow> nos_inc (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>i : optoy\n                  i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                               _. oarrivemsg msg_ok \\<sigma>,\n                            other nos_inc {i} \\<rightarrow>)\n                            globala\n                             (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                 a = \\<tau> \\<or>\n                                 (\\<exists>d.\n                                     a = i:deliver(d)) \\<longrightarrow>\n                                 nos_inc (\\<sigma> i) (\\<sigma>' i))", "by (rule ostep_invariant_weakenE [OF node_local_nos_inc]) auto"], ["proof (state)\nthis:\n  \\<langle>i : optoy\n                i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma>\n                             _. oarrivemsg msg_ok \\<sigma>,\n                          other nos_inc {i} \\<rightarrow>)\n                          globala\n                           (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                               a = \\<tau> \\<or>\n                               (\\<exists>d.\n                                   a = i:deliver(d)) \\<longrightarrow>\n                               nos_inc (\\<sigma> i) (\\<sigma>' i))\n\ngoal (2 subgoals):\n 1. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>\n 2. \\<And>\\<xi>. nos_inc \\<xi> \\<xi>", "qed simp_all"], ["", "lemma ocnet_bigger_than_next:\n  \"oclosed (opnet (\\<lambda>i. optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) n)\n     \\<Turnstile> (\\<lambda>_ _ _. True, other nos_inc (net_tree_ips n) \\<rightarrow>)\n        global (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips n. no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oclosed\n     (opnet (\\<lambda>i. optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n       n) \\<Turnstile> (\\<lambda>_ _ _. True,\n                        other nos_inc (net_tree_ips n) \\<rightarrow>)\n                        global\n                         (\\<lambda>\\<sigma>.\n                             \\<forall>i\\<in>net_tree_ips n.\n                                no (\\<sigma> i)\n                                \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "proof (rule inclosed_closed)"], ["proof (state)\ngoal (1 subgoal):\n 1. opnet (\\<lambda>i. optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n     n \\<Turnstile> (otherwith (=) (net_tree_ips n) inoclosed,\n                     other nos_inc (net_tree_ips n) \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          \\<forall>i\\<in>net_tree_ips n.\n                             no (\\<sigma> i)\n                             \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "show \"opnet (\\<lambda>i. optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg) n\n            \\<Turnstile> (otherwith (=) (net_tree_ips n) inoclosed, other nos_inc (net_tree_ips n) \\<rightarrow>)\n               global (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips n. no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opnet (\\<lambda>i. optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n     n \\<Turnstile> (otherwith (=) (net_tree_ips n) inoclosed,\n                     other nos_inc (net_tree_ips n) \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          \\<forall>i\\<in>net_tree_ips n.\n                             no (\\<sigma> i)\n                             \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "proof (rule oinvariant_weakenE [OF opnet_bigger_than_next])"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips n.\n               no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\n        s \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips n.\n               no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\n        s\n 2. \\<And>s s' a.\n       otherwith (=) (net_tree_ips n) inoclosed s s' a \\<Longrightarrow>\n       otherwith nos_inc (net_tree_ips n) (oarrivemsg msg_ok) s s' a\n 3. \\<And>s s'.\n       other nos_inc (net_tree_ips n) s s' \\<Longrightarrow>\n       other nos_inc (net_tree_ips n) s s'", "fix s s':: \"nat \\<Rightarrow> state\" and a :: \"msg node_action\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips n.\n               no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\n        s \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips n.\n               no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\n        s\n 2. \\<And>s s' a.\n       otherwith (=) (net_tree_ips n) inoclosed s s' a \\<Longrightarrow>\n       otherwith nos_inc (net_tree_ips n) (oarrivemsg msg_ok) s s' a\n 3. \\<And>s s'.\n       other nos_inc (net_tree_ips n) s s' \\<Longrightarrow>\n       other nos_inc (net_tree_ips n) s s'", "assume \"otherwith (=) (net_tree_ips n) inoclosed s s' a\""], ["proof (state)\nthis:\n  otherwith (=) (net_tree_ips n) inoclosed s s' a\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips n.\n               no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\n        s \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips n.\n               no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\n        s\n 2. \\<And>s s' a.\n       otherwith (=) (net_tree_ips n) inoclosed s s' a \\<Longrightarrow>\n       otherwith nos_inc (net_tree_ips n) (oarrivemsg msg_ok) s s' a\n 3. \\<And>s s'.\n       other nos_inc (net_tree_ips n) s s' \\<Longrightarrow>\n       other nos_inc (net_tree_ips n) s s'", "thus \"otherwith nos_inc (net_tree_ips n) (oarrivemsg msg_ok) s s' a\""], ["proof (prove)\nusing this:\n  otherwith (=) (net_tree_ips n) inoclosed s s' a\n\ngoal (1 subgoal):\n 1. otherwith nos_inc (net_tree_ips n) (oarrivemsg msg_ok) s s' a", "proof (rule otherwithE, intro otherwithI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>inoclosed s a;\n        \\<forall>j. j \\<notin> net_tree_ips n \\<longrightarrow> s j = s' j;\n        otherwith (=) (net_tree_ips n) inoclosed s s' a;\n        j \\<notin> net_tree_ips n\\<rbrakk>\n       \\<Longrightarrow> nos_inc (s j) (s' j)\n 2. \\<lbrakk>inoclosed s a;\n     \\<forall>j. j \\<notin> net_tree_ips n \\<longrightarrow> s j = s' j;\n     otherwith (=) (net_tree_ips n) inoclosed s s' a\\<rbrakk>\n    \\<Longrightarrow> oarrivemsg msg_ok s a", "assume \"inoclosed s a\"\n           and \"\\<forall>j. j \\<notin> net_tree_ips n \\<longrightarrow> s j = s' j\"\n           and \"otherwith ((=)) (net_tree_ips n) inoclosed s s' a\""], ["proof (state)\nthis:\n  inoclosed s a\n  \\<forall>j. j \\<notin> net_tree_ips n \\<longrightarrow> s j = s' j\n  otherwith (=) (net_tree_ips n) inoclosed s s' a\n\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>inoclosed s a;\n        \\<forall>j. j \\<notin> net_tree_ips n \\<longrightarrow> s j = s' j;\n        otherwith (=) (net_tree_ips n) inoclosed s s' a;\n        j \\<notin> net_tree_ips n\\<rbrakk>\n       \\<Longrightarrow> nos_inc (s j) (s' j)\n 2. \\<lbrakk>inoclosed s a;\n     \\<forall>j. j \\<notin> net_tree_ips n \\<longrightarrow> s j = s' j;\n     otherwith (=) (net_tree_ips n) inoclosed s s' a\\<rbrakk>\n    \\<Longrightarrow> oarrivemsg msg_ok s a", "thus \"oarrivemsg msg_ok s a\""], ["proof (prove)\nusing this:\n  inoclosed s a\n  \\<forall>j. j \\<notin> net_tree_ips n \\<longrightarrow> s j = s' j\n  otherwith (=) (net_tree_ips n) inoclosed s s' a\n\ngoal (1 subgoal):\n 1. oarrivemsg msg_ok s a", "by (cases a) auto"], ["proof (state)\nthis:\n  oarrivemsg msg_ok s a\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>inoclosed s a;\n        \\<forall>j. j \\<notin> net_tree_ips n \\<longrightarrow> s j = s' j;\n        otherwith (=) (net_tree_ips n) inoclosed s s' a;\n        j \\<notin> net_tree_ips n\\<rbrakk>\n       \\<Longrightarrow> nos_inc (s j) (s' j)", "qed auto"], ["proof (state)\nthis:\n  otherwith nos_inc (net_tree_ips n) (oarrivemsg msg_ok) s s' a\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips n.\n               no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\n        s \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips n.\n               no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\n        s\n 2. \\<And>s s'.\n       other nos_inc (net_tree_ips n) s s' \\<Longrightarrow>\n       other nos_inc (net_tree_ips n) s s'", "qed simp"], ["proof (state)\nthis:\n  opnet (\\<lambda>i. optoy i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qmsg)\n   n \\<Turnstile> (otherwith (=) (net_tree_ips n) inoclosed,\n                   other nos_inc (net_tree_ips n) \\<rightarrow>)\n                   global\n                    (\\<lambda>\\<sigma>.\n                        \\<forall>i\\<in>net_tree_ips n.\n                           no (\\<sigma> i)\n                           \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Transfer\""], ["", "definition\n  initmissing :: \"(nat \\<Rightarrow> state option) \\<times> 'a \\<Rightarrow> (nat \\<Rightarrow> state) \\<times> 'a\"\nwhere\n  \"initmissing \\<sigma> = (\\<lambda>i. case (fst \\<sigma>) i of None \\<Rightarrow> toy_init i | Some s \\<Rightarrow> s, snd \\<sigma>)\""], ["", "lemma not_in_net_ips_fst_init_missing [simp]:\n  assumes \"i \\<notin> net_ips \\<sigma>\"\n    shows \"fst (initmissing (netgmap fst \\<sigma>)) i = toy_init i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap fst \\<sigma>)) i = toy_init i", "using assms"], ["proof (prove)\nusing this:\n  i \\<notin> net_ips \\<sigma>\n\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap fst \\<sigma>)) i = toy_init i", "unfolding initmissing_def"], ["proof (prove)\nusing this:\n  i \\<notin> net_ips \\<sigma>\n\ngoal (1 subgoal):\n 1. fst (\\<lambda>i.\n            case fst (netgmap fst \\<sigma>) i of\n            None \\<Rightarrow> toy_init i | Some s \\<Rightarrow> s,\n         snd (netgmap fst \\<sigma>))\n     i =\n    toy_init i", "by simp"], ["", "lemma fst_initmissing_netgmap_pair_fst [simp]:\n  \"fst (initmissing (netgmap (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q)) s))\n                                               = fst (initmissing (netgmap fst s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (initmissing\n          (netgmap (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q))\n            s)) =\n    fst (initmissing (netgmap fst s))", "unfolding initmissing_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (\\<lambda>i.\n            case fst (netgmap\n                       (\\<lambda>(p, q).\n                           (fst (Fun.id p), snd (Fun.id p), q))\n                       s)\n                  i of\n            None \\<Rightarrow> toy_init i | Some s \\<Rightarrow> s,\n         snd (netgmap (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q))\n               s)) =\n    fst (\\<lambda>i.\n            case fst (netgmap fst s) i of None \\<Rightarrow> toy_init i\n            | Some s \\<Rightarrow> s,\n         snd (netgmap fst s))", "by auto"], ["", "interpretation toy_openproc: openproc ptoy optoy Fun.id\n  rewrites \"toy_openproc.initmissing = initmissing\""], ["proof (prove)\ngoal (1 subgoal):\n 1. openproc ptoy optoy Fun.id &&&\n    openproc.initmissing ptoy Fun.id = initmissing", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. openproc ptoy optoy Fun.id\n 2. openproc.initmissing ptoy Fun.id = initmissing", "show \"openproc ptoy optoy Fun.id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. openproc ptoy optoy Fun.id", "proof unfold_locales"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i.\n       {uu_.\n        \\<exists>\\<sigma> \\<zeta> s.\n           uu_ = (\\<sigma>, \\<zeta>) \\<and>\n           s \\<in> init (ptoy i) \\<and>\n           (\\<sigma> i, \\<zeta>) = Fun.id s \\<and>\n           (\\<forall>j.\n               j \\<noteq> i \\<longrightarrow>\n               \\<sigma> j \\<in> (fst \\<circ> Fun.id) ` init (ptoy j))}\n       \\<subseteq> init (optoy i)\n 2. \\<forall>j. init (ptoy j) \\<noteq> {}\n 3. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (Fun.id s); \\<sigma>' i = fst (Fun.id s');\n        (s, a, s') \\<in> automaton.trans (ptoy i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (Fun.id s)), a, \\<sigma>',\n                          snd (Fun.id s'))\n                         \\<in> automaton.trans (optoy i)", "fix i :: ip"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i.\n       {uu_.\n        \\<exists>\\<sigma> \\<zeta> s.\n           uu_ = (\\<sigma>, \\<zeta>) \\<and>\n           s \\<in> init (ptoy i) \\<and>\n           (\\<sigma> i, \\<zeta>) = Fun.id s \\<and>\n           (\\<forall>j.\n               j \\<noteq> i \\<longrightarrow>\n               \\<sigma> j \\<in> (fst \\<circ> Fun.id) ` init (ptoy j))}\n       \\<subseteq> init (optoy i)\n 2. \\<forall>j. init (ptoy j) \\<noteq> {}\n 3. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (Fun.id s); \\<sigma>' i = fst (Fun.id s');\n        (s, a, s') \\<in> automaton.trans (ptoy i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (Fun.id s)), a, \\<sigma>',\n                          snd (Fun.id s'))\n                         \\<in> automaton.trans (optoy i)", "have \"{(\\<sigma>, \\<zeta>). (\\<sigma> i, \\<zeta>) \\<in> \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y i \\<and> (\\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma> j \\<in> fst ` \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y j)} \\<subseteq> \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(\\<sigma>, \\<zeta>).\n     (\\<sigma> i, \\<zeta>) \\<in> \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y i \\<and>\n     (\\<forall>j.\n         j \\<noteq> i \\<longrightarrow>\n         \\<sigma> j \\<in> fst ` \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y j)}\n    \\<subseteq> \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y", "unfolding \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y_def \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(\\<sigma>, \\<zeta>).\n     (\\<sigma> i, \\<zeta>)\n     \\<in> {(toy_init i, \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)} \\<and>\n     (\\<forall>j.\n         j \\<noteq> i \\<longrightarrow>\n         \\<sigma> j\n         \\<in> fst ` {(toy_init j, \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)})}\n    \\<subseteq> {(toy_init, \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)}", "proof (rule equalityD1)"], ["proof (state)\ngoal (1 subgoal):\n 1. {(\\<sigma>, \\<zeta>).\n     (\\<sigma> i, \\<zeta>)\n     \\<in> {(toy_init i, \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)} \\<and>\n     (\\<forall>j.\n         j \\<noteq> i \\<longrightarrow>\n         \\<sigma> j\n         \\<in> fst `\n               {(toy_init j, \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)})} =\n    {(toy_init, \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)}", "show \"\\<And>f p. {(\\<sigma>, \\<zeta>). (\\<sigma> i, \\<zeta>) \\<in> {(f i, p)} \\<and> (\\<forall>j. j \\<noteq> i\n                      \\<longrightarrow> \\<sigma> j \\<in> fst ` {(f j, p)})} = {(f, p)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f p.\n       {(\\<sigma>, \\<zeta>).\n        (\\<sigma> i, \\<zeta>) \\<in> {(f i, p)} \\<and>\n        (\\<forall>j.\n            j \\<noteq> i \\<longrightarrow>\n            \\<sigma> j \\<in> fst ` {(f j, p)})} =\n       {(f, p)}", "by (rule set_eqI) auto"], ["proof (state)\nthis:\n  {(\\<sigma>, \\<zeta>).\n   (\\<sigma> i, \\<zeta>) \\<in> {(?f1 i, ?p1)} \\<and>\n   (\\<forall>j.\n       j \\<noteq> i \\<longrightarrow>\n       \\<sigma> j \\<in> fst ` {(?f1 j, ?p1)})} =\n  {(?f1, ?p1)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {(\\<sigma>, \\<zeta>).\n   (\\<sigma> i, \\<zeta>) \\<in> \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y i \\<and>\n   (\\<forall>j.\n       j \\<noteq> i \\<longrightarrow>\n       \\<sigma> j \\<in> fst ` \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y j)}\n  \\<subseteq> \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y\n\ngoal (3 subgoals):\n 1. \\<And>i.\n       {uu_.\n        \\<exists>\\<sigma> \\<zeta> s.\n           uu_ = (\\<sigma>, \\<zeta>) \\<and>\n           s \\<in> init (ptoy i) \\<and>\n           (\\<sigma> i, \\<zeta>) = Fun.id s \\<and>\n           (\\<forall>j.\n               j \\<noteq> i \\<longrightarrow>\n               \\<sigma> j \\<in> (fst \\<circ> Fun.id) ` init (ptoy j))}\n       \\<subseteq> init (optoy i)\n 2. \\<forall>j. init (ptoy j) \\<noteq> {}\n 3. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (Fun.id s); \\<sigma>' i = fst (Fun.id s');\n        (s, a, s') \\<in> automaton.trans (ptoy i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (Fun.id s)), a, \\<sigma>',\n                          snd (Fun.id s'))\n                         \\<in> automaton.trans (optoy i)", "thus \"{ (\\<sigma>, \\<zeta>) |\\<sigma> \\<zeta> s. s \\<in> init (ptoy i)\n                             \\<and> (\\<sigma> i, \\<zeta>) = Fun.id s\n                             \\<and> (\\<forall>j. j\\<noteq>i \\<longrightarrow> \\<sigma> j \\<in> (fst o Fun.id) ` init (ptoy j)) } \\<subseteq> init (optoy i)\""], ["proof (prove)\nusing this:\n  {(\\<sigma>, \\<zeta>).\n   (\\<sigma> i, \\<zeta>) \\<in> \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y i \\<and>\n   (\\<forall>j.\n       j \\<noteq> i \\<longrightarrow>\n       \\<sigma> j \\<in> fst ` \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y j)}\n  \\<subseteq> \\<sigma>\\<^sub>O\\<^sub>T\\<^sub>O\\<^sub>Y\n\ngoal (1 subgoal):\n 1. {uu_.\n     \\<exists>\\<sigma> \\<zeta> s.\n        uu_ = (\\<sigma>, \\<zeta>) \\<and>\n        s \\<in> init (ptoy i) \\<and>\n        (\\<sigma> i, \\<zeta>) = Fun.id s \\<and>\n        (\\<forall>j.\n            j \\<noteq> i \\<longrightarrow>\n            \\<sigma> j \\<in> (fst \\<circ> Fun.id) ` init (ptoy j))}\n    \\<subseteq> init (optoy i)", "by simp"], ["proof (state)\nthis:\n  {uu_.\n   \\<exists>\\<sigma> \\<zeta> s.\n      uu_ = (\\<sigma>, \\<zeta>) \\<and>\n      s \\<in> init (ptoy i) \\<and>\n      (\\<sigma> i, \\<zeta>) = Fun.id s \\<and>\n      (\\<forall>j.\n          j \\<noteq> i \\<longrightarrow>\n          \\<sigma> j \\<in> (fst \\<circ> Fun.id) ` init (ptoy j))}\n  \\<subseteq> init (optoy i)\n\ngoal (2 subgoals):\n 1. \\<forall>j. init (ptoy j) \\<noteq> {}\n 2. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (Fun.id s); \\<sigma>' i = fst (Fun.id s');\n        (s, a, s') \\<in> automaton.trans (ptoy i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (Fun.id s)), a, \\<sigma>',\n                          snd (Fun.id s'))\n                         \\<in> automaton.trans (optoy i)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>j. init (ptoy j) \\<noteq> {}\n 2. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (Fun.id s); \\<sigma>' i = fst (Fun.id s');\n        (s, a, s') \\<in> automaton.trans (ptoy i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (Fun.id s)), a, \\<sigma>',\n                          snd (Fun.id s'))\n                         \\<in> automaton.trans (optoy i)", "show \"\\<forall>j. init (ptoy j) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j. init (ptoy j) \\<noteq> {}", "unfolding \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       init\n        \\<lparr>init =\n                  {(toy_init j, \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)},\n           trans =\n             seqp_sos \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\\<rparr> \\<noteq>\n       {}", "by simp"], ["proof (state)\nthis:\n  \\<forall>j. init (ptoy j) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (Fun.id s); \\<sigma>' i = fst (Fun.id s');\n        (s, a, s') \\<in> automaton.trans (ptoy i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (Fun.id s)), a, \\<sigma>',\n                          snd (Fun.id s'))\n                         \\<in> automaton.trans (optoy i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (Fun.id s); \\<sigma>' i = fst (Fun.id s');\n        (s, a, s') \\<in> automaton.trans (ptoy i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (Fun.id s)), a, \\<sigma>',\n                          snd (Fun.id s'))\n                         \\<in> automaton.trans (optoy i)", "fix i s a s' \\<sigma> \\<sigma>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (Fun.id s); \\<sigma>' i = fst (Fun.id s');\n        (s, a, s') \\<in> automaton.trans (ptoy i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (Fun.id s)), a, \\<sigma>',\n                          snd (Fun.id s'))\n                         \\<in> automaton.trans (optoy i)", "assume \"\\<sigma> i = fst (Fun.id s)\"\n         and \"\\<sigma>' i = fst (Fun.id s')\"\n         and \"(s, a, s') \\<in> trans (ptoy i)\""], ["proof (state)\nthis:\n  \\<sigma> i = fst (Fun.id s)\n  \\<sigma>' i = fst (Fun.id s')\n  (s, a, s') \\<in> automaton.trans (ptoy i)\n\ngoal (1 subgoal):\n 1. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (Fun.id s); \\<sigma>' i = fst (Fun.id s');\n        (s, a, s') \\<in> automaton.trans (ptoy i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (Fun.id s)), a, \\<sigma>',\n                          snd (Fun.id s'))\n                         \\<in> automaton.trans (optoy i)", "then"], ["proof (chain)\npicking this:\n  \\<sigma> i = fst (Fun.id s)\n  \\<sigma>' i = fst (Fun.id s')\n  (s, a, s') \\<in> automaton.trans (ptoy i)", "obtain q q' where \"s = (\\<sigma> i, q)\"\n                         and \"s' = (\\<sigma>' i, q')\"\n                         and \"((\\<sigma> i, q), a, (\\<sigma>' i, q')) \\<in> trans (ptoy i)\""], ["proof (prove)\nusing this:\n  \\<sigma> i = fst (Fun.id s)\n  \\<sigma>' i = fst (Fun.id s')\n  (s, a, s') \\<in> automaton.trans (ptoy i)\n\ngoal (1 subgoal):\n 1. (\\<And>q q'.\n        \\<lbrakk>s = (\\<sigma> i, q); s' = (\\<sigma>' i, q');\n         ((\\<sigma> i, q), a, \\<sigma>' i, q')\n         \\<in> automaton.trans (ptoy i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases s, cases s') auto"], ["proof (state)\nthis:\n  s = (\\<sigma> i, q)\n  s' = (\\<sigma>' i, q')\n  ((\\<sigma> i, q), a, \\<sigma>' i, q') \\<in> automaton.trans (ptoy i)\n\ngoal (1 subgoal):\n 1. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (Fun.id s); \\<sigma>' i = fst (Fun.id s');\n        (s, a, s') \\<in> automaton.trans (ptoy i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (Fun.id s)), a, \\<sigma>',\n                          snd (Fun.id s'))\n                         \\<in> automaton.trans (optoy i)", "from this(3)"], ["proof (chain)\npicking this:\n  ((\\<sigma> i, q), a, \\<sigma>' i, q') \\<in> automaton.trans (ptoy i)", "have \"((\\<sigma>, q), a, (\\<sigma>', q')) \\<in> trans (optoy i)\""], ["proof (prove)\nusing this:\n  ((\\<sigma> i, q), a, \\<sigma>' i, q') \\<in> automaton.trans (ptoy i)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, q), a, \\<sigma>', q') \\<in> automaton.trans (optoy i)", "by simp (rule open_seqp_action [OF toy_wf])"], ["proof (state)\nthis:\n  ((\\<sigma>, q), a, \\<sigma>', q') \\<in> automaton.trans (optoy i)\n\ngoal (1 subgoal):\n 1. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i = fst (Fun.id s); \\<sigma>' i = fst (Fun.id s');\n        (s, a, s') \\<in> automaton.trans (ptoy i)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (Fun.id s)), a, \\<sigma>',\n                          snd (Fun.id s'))\n                         \\<in> automaton.trans (optoy i)", "with \\<open>s = (\\<sigma> i, q)\\<close> and \\<open>s' = (\\<sigma>' i, q')\\<close>"], ["proof (chain)\npicking this:\n  s = (\\<sigma> i, q)\n  s' = (\\<sigma>' i, q')\n  ((\\<sigma>, q), a, \\<sigma>', q') \\<in> automaton.trans (optoy i)", "show \"((\\<sigma>, snd (Fun.id s)), a, (\\<sigma>', snd (Fun.id s'))) \\<in> trans (optoy i)\""], ["proof (prove)\nusing this:\n  s = (\\<sigma> i, q)\n  s' = (\\<sigma>' i, q')\n  ((\\<sigma>, q), a, \\<sigma>', q') \\<in> automaton.trans (optoy i)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (Fun.id s)), a, \\<sigma>', snd (Fun.id s'))\n    \\<in> automaton.trans (optoy i)", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (Fun.id s)), a, \\<sigma>', snd (Fun.id s'))\n  \\<in> automaton.trans (optoy i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  openproc ptoy optoy Fun.id\n\ngoal (1 subgoal):\n 1. openproc.initmissing ptoy Fun.id = initmissing", "then"], ["proof (chain)\npicking this:\n  openproc ptoy optoy Fun.id", "interpret op0: openproc ptoy optoy Fun.id"], ["proof (prove)\nusing this:\n  openproc ptoy optoy Fun.id\n\ngoal (1 subgoal):\n 1. openproc ptoy optoy Fun.id", "."], ["proof (state)\ngoal (1 subgoal):\n 1. op0.initmissing = initmissing", "have [simp]: \"\\<And>i. (SOME x. x \\<in> (fst o Fun.id) ` init (ptoy i)) = toy_init i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (SOME x. x \\<in> (fst \\<circ> Fun.id) ` init (ptoy i)) = toy_init i", "unfolding \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (SOME x.\n           x \\<in> (fst \\<circ> Fun.id) `\n                   init\n                    \\<lparr>init =\n                              {(toy_init i,\n                                \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)},\n                       trans =\n                         seqp_sos\n                          \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\\<rparr>) =\n       toy_init i", "by simp"], ["proof (state)\nthis:\n  (SOME x. x \\<in> (fst \\<circ> Fun.id) ` init (ptoy ?i1)) = toy_init ?i1\n\ngoal (1 subgoal):\n 1. op0.initmissing = initmissing", "hence \"\\<And>i. openproc.initmissing ptoy Fun.id i = initmissing i\""], ["proof (prove)\nusing this:\n  (SOME x. x \\<in> (fst \\<circ> Fun.id) ` init (ptoy ?i1)) = toy_init ?i1\n\ngoal (1 subgoal):\n 1. \\<And>i. op0.initmissing i = initmissing i", "unfolding op0.initmissing_def op0.someinit_def initmissing_def"], ["proof (prove)\nusing this:\n  (SOME x. x \\<in> (fst \\<circ> Fun.id) ` init (ptoy ?i1)) = toy_init ?i1\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<lambda>ia.\n           case fst i ia of\n           None \\<Rightarrow>\n             SOME x. x \\<in> (fst \\<circ> Fun.id) ` init (ptoy ia)\n           | Some s \\<Rightarrow> s,\n        snd i) =\n       (\\<lambda>ia.\n           case fst i ia of None \\<Rightarrow> toy_init ia\n           | Some s \\<Rightarrow> s,\n        snd i)", "by (auto split: option.split)"], ["proof (state)\nthis:\n  op0.initmissing ?i1 = initmissing ?i1\n\ngoal (1 subgoal):\n 1. op0.initmissing = initmissing", "thus \"openproc.initmissing ptoy Fun.id = initmissing\""], ["proof (prove)\nusing this:\n  op0.initmissing ?i1 = initmissing ?i1\n\ngoal (1 subgoal):\n 1. op0.initmissing = initmissing", ".."], ["proof (state)\nthis:\n  op0.initmissing = initmissing\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fst_initmissing_netgmap_default_toy_init_netlift:\n  \"fst (initmissing (netgmap sr s)) = default toy_init (netlift sr s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap sr s)) = Lib.default toy_init (netlift sr s)", "unfolding initmissing_def default_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (\\<lambda>i.\n            case fst (netgmap sr s) i of None \\<Rightarrow> toy_init i\n            | Some s \\<Rightarrow> s,\n         snd (netgmap sr s)) =\n    (\\<lambda>i.\n        case netlift sr s i of None \\<Rightarrow> toy_init i\n        | Some s \\<Rightarrow> s)", "by (simp add: fst_netgmap_netlift del: One_nat_def)"], ["", "definition\n  netglobal :: \"((nat \\<Rightarrow> state) \\<Rightarrow> bool) \\<Rightarrow> ((state \\<times> 'b) \\<times> 'c) net_state \\<Rightarrow> bool\"\nwhere\n  \"netglobal P \\<equiv> (\\<lambda>s. P (default toy_init (netlift fst s)))\""], ["", "interpretation toy_openproc_par_qmsg: openproc_parq ptoy optoy Fun.id qmsg\n  rewrites \"toy_openproc_par_qmsg.netglobal = netglobal\"\n    and \"toy_openproc_par_qmsg.initmissing = initmissing\""], ["proof (prove)\ngoal (1 subgoal):\n 1. openproc_parq ptoy optoy Fun.id qmsg &&&\n    openproc.netglobal (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg)\n     (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q)) =\n    netglobal &&&\n    openproc.initmissing (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg)\n     (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q)) =\n    initmissing", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. openproc_parq ptoy optoy Fun.id qmsg\n 2. openproc.netglobal (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg)\n     (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q)) =\n    netglobal\n 3. openproc.initmissing (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg)\n     (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q)) =\n    initmissing", "show \"openproc_parq ptoy optoy Fun.id qmsg\""], ["proof (prove)\ngoal (1 subgoal):\n 1. openproc_parq ptoy optoy Fun.id qmsg", "by (unfold_locales) simp"], ["proof (state)\nthis:\n  openproc_parq ptoy optoy Fun.id qmsg\n\ngoal (2 subgoals):\n 1. openproc.netglobal (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg)\n     (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q)) =\n    netglobal\n 2. openproc.initmissing (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg)\n     (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q)) =\n    initmissing", "then"], ["proof (chain)\npicking this:\n  openproc_parq ptoy optoy Fun.id qmsg", "interpret opq: openproc_parq ptoy optoy Fun.id qmsg"], ["proof (prove)\nusing this:\n  openproc_parq ptoy optoy Fun.id qmsg\n\ngoal (1 subgoal):\n 1. openproc_parq ptoy optoy Fun.id qmsg", "."], ["proof (state)\ngoal (2 subgoals):\n 1. opq.netglobal = netglobal\n 2. opq.initmissing = initmissing", "have im: \"\\<And>\\<sigma>. openproc.initmissing (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q)) \\<sigma>\n                                                                                    = initmissing \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. opq.initmissing \\<sigma> = initmissing \\<sigma>", "unfolding opq.initmissing_def opq.someinit_def initmissing_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       (\\<lambda>i.\n           case fst \\<sigma> i of\n           None \\<Rightarrow>\n             SOME x.\n                x \\<in> (fst \\<circ>\n                         (\\<lambda>(p, q).\n                             (fst (Fun.id p), snd (Fun.id p), q))) `\n                        init (ptoy i \\<langle>\\<langle> qmsg)\n           | Some s \\<Rightarrow> s,\n        snd \\<sigma>) =\n       (\\<lambda>i.\n           case fst \\<sigma> i of None \\<Rightarrow> toy_init i\n           | Some s \\<Rightarrow> s,\n        snd \\<sigma>)", "unfolding \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y_def \\<sigma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       (\\<lambda>i.\n           case fst \\<sigma> i of\n           None \\<Rightarrow>\n             SOME x.\n                x \\<in> (fst \\<circ>\n                         (\\<lambda>(p, q).\n                             (fst (Fun.id p), snd (Fun.id p), q))) `\n                        init\n                         (\\<lparr>init =\n                                    {(toy_init i,\n\\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)},\n                             trans =\n                               seqp_sos\n                                \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\\<rparr> \\<langle>\\<langle> \\<lparr>init =\n                          {([],\n                            \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G ())},\n                   trans =\n                     seqp_sos\n                      \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rparr>)\n           | Some s \\<Rightarrow> s,\n        snd \\<sigma>) =\n       (\\<lambda>i.\n           case fst \\<sigma> i of None \\<Rightarrow> toy_init i\n           | Some s \\<Rightarrow> s,\n        snd \\<sigma>)", "by (clarsimp cong: option.case_cong)"], ["proof (state)\nthis:\n  opq.initmissing ?\\<sigma>1 = initmissing ?\\<sigma>1\n\ngoal (2 subgoals):\n 1. opq.netglobal = netglobal\n 2. opq.initmissing = initmissing", "thus \"openproc.initmissing (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q)) = initmissing\""], ["proof (prove)\nusing this:\n  opq.initmissing ?\\<sigma>1 = initmissing ?\\<sigma>1\n\ngoal (1 subgoal):\n 1. opq.initmissing = initmissing", "by (rule ext)"], ["proof (state)\nthis:\n  opq.initmissing = initmissing\n\ngoal (1 subgoal):\n 1. opq.netglobal = netglobal", "have \"\\<And>P \\<sigma>. openproc.netglobal (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q)) P \\<sigma>\n                                                                                = netglobal P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P \\<sigma>. opq.netglobal P \\<sigma> = netglobal P \\<sigma>", "unfolding opq.netglobal_def netglobal_def opq.initmissing_def initmissing_def opq.someinit_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P \\<sigma>.\n       P (fst (\\<lambda>i.\n                  case fst (netgmap\n                             (\\<lambda>(p, q).\n                                 (fst (Fun.id p), snd (Fun.id p), q))\n                             \\<sigma>)\n                        i of\n                  None \\<Rightarrow>\n                    SOME x.\n                       x \\<in> (fst \\<circ>\n                                (\\<lambda>(p, q).\n                                    (fst (Fun.id p), snd (Fun.id p), q))) `\n                               init (ptoy i \\<langle>\\<langle> qmsg)\n                  | Some s \\<Rightarrow> s,\n               snd (netgmap\n                     (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q))\n                     \\<sigma>))) =\n       P (Lib.default toy_init (netlift fst \\<sigma>))", "unfolding \\<sigma>\\<^sub>T\\<^sub>O\\<^sub>Y_def \\<sigma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P \\<sigma>.\n       P (fst (\\<lambda>i.\n                  case fst (netgmap\n                             (\\<lambda>(p, q).\n                                 (fst (Fun.id p), snd (Fun.id p), q))\n                             \\<sigma>)\n                        i of\n                  None \\<Rightarrow>\n                    SOME x.\n                       x \\<in> (fst \\<circ>\n                                (\\<lambda>(p, q).\n                                    (fst (Fun.id p), snd (Fun.id p), q))) `\n                               init\n                                (\\<lparr>init =\n     {(toy_init i, \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y PToy)},\n                                    trans =\nseqp_sos\n \\<Gamma>\\<^sub>T\\<^sub>O\\<^sub>Y\\<rparr> \\<langle>\\<langle> \\<lparr>init =\n                                 {([],\n                                   \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\n                                    ())},\n                          trans =\n                            seqp_sos\n                             \\<Gamma>\\<^sub>Q\\<^sub>M\\<^sub>S\\<^sub>G\\<rparr>)\n                  | Some s \\<Rightarrow> s,\n               snd (netgmap\n                     (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q))\n                     \\<sigma>))) =\n       P (Lib.default toy_init (netlift fst \\<sigma>))", "by (clarsimp cong: option.case_cong\n                   simp del: One_nat_def\n                   simp add: fst_initmissing_netgmap_default_toy_init_netlift\n                                                  [symmetric, unfolded initmissing_def])"], ["proof (state)\nthis:\n  opq.netglobal ?P3 ?\\<sigma>3 = netglobal ?P3 ?\\<sigma>3\n\ngoal (1 subgoal):\n 1. opq.netglobal = netglobal", "thus \"openproc.netglobal (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) (\\<lambda>(p, q). (fst (Fun.id p), snd (Fun.id p), q)) = netglobal\""], ["proof (prove)\nusing this:\n  opq.netglobal ?P3 ?\\<sigma>3 = netglobal ?P3 ?\\<sigma>3\n\ngoal (1 subgoal):\n 1. opq.netglobal = netglobal", "by auto"], ["proof (state)\nthis:\n  opq.netglobal = netglobal\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Final result\""], ["", "lemma bigger_than_next:\n  assumes \"wf_net_tree n\"\n  shows \"closed (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n) \\<TTurnstile> netglobal (\\<lambda>\\<sigma>. \\<forall>i. no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\"\n        (is \"_ \\<TTurnstile> netglobal (\\<lambda>\\<sigma>. \\<forall>i. ?inv \\<sigma> i)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed\n     (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg)\n       n) \\<TTurnstile> netglobal\n                         (\\<lambda>\\<sigma>.\n                             \\<forall>i.\n                                no (\\<sigma> i)\n                                \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. closed\n     (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg)\n       n) \\<TTurnstile> netglobal\n                         (\\<lambda>\\<sigma>.\n                             \\<forall>i.\n                                no (\\<sigma> i)\n                                \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "from \\<open>wf_net_tree n\\<close>"], ["proof (chain)\npicking this:\n  wf_net_tree n", "have proto: \"closed (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n)\n                      \\<TTurnstile> netglobal (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips n. no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\""], ["proof (prove)\nusing this:\n  wf_net_tree n\n\ngoal (1 subgoal):\n 1. closed\n     (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg)\n       n) \\<TTurnstile> netglobal\n                         (\\<lambda>\\<sigma>.\n                             \\<forall>i\\<in>net_tree_ips n.\n                                no (\\<sigma> i)\n                                \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "by (rule toy_openproc_par_qmsg.close_opnet [OF _ ocnet_bigger_than_next])"], ["proof (state)\nthis:\n  closed\n   (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg)\n     n) \\<TTurnstile> netglobal\n                       (\\<lambda>\\<sigma>.\n                           \\<forall>i\\<in>net_tree_ips n.\n                              no (\\<sigma> i)\n                              \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\n\ngoal (1 subgoal):\n 1. closed\n     (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg)\n       n) \\<TTurnstile> netglobal\n                         (\\<lambda>\\<sigma>.\n                             \\<forall>i.\n                                no (\\<sigma> i)\n                                \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed\n     (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg)\n       n) \\<TTurnstile> netglobal\n                         (\\<lambda>\\<sigma>.\n                             \\<forall>i.\n                                no (\\<sigma> i)\n                                \\<le> no (\\<sigma> (nhid (\\<sigma> i))))", "unfolding invariant_def opnet_sos.opnet_tau1"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball\n     (reachable\n       (closed (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n)) TT)\n     (netglobal\n       (\\<lambda>\\<sigma>.\n           \\<forall>i.\n              no (\\<sigma> i) \\<le> no (\\<sigma> (nhid (\\<sigma> i)))))", "proof (rule, simp only: toy_openproc_par_qmsg.netglobalsimp\n                            fst_initmissing_netgmap_pair_fst, rule allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       x \\<in> reachable\n                (closed\n                  (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n))\n                TT \\<Longrightarrow>\n       no (fst (initmissing (netgmap fst x)) i)\n       \\<le> no (fst (initmissing (netgmap fst x))\n                  (nhid (fst (initmissing (netgmap fst x)) i)))", "fix \\<sigma> i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       x \\<in> reachable\n                (closed\n                  (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n))\n                TT \\<Longrightarrow>\n       no (fst (initmissing (netgmap fst x)) i)\n       \\<le> no (fst (initmissing (netgmap fst x))\n                  (nhid (fst (initmissing (netgmap fst x)) i)))", "assume sr: \"\\<sigma> \\<in> reachable (closed (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n)) TT\""], ["proof (state)\nthis:\n  \\<sigma>\n  \\<in> reachable\n         (closed (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n)) TT\n\ngoal (1 subgoal):\n 1. \\<And>x i.\n       x \\<in> reachable\n                (closed\n                  (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n))\n                TT \\<Longrightarrow>\n       no (fst (initmissing (netgmap fst x)) i)\n       \\<le> no (fst (initmissing (netgmap fst x))\n                  (nhid (fst (initmissing (netgmap fst x)) i)))", "hence \"\\<forall>i\\<in>net_tree_ips n. ?inv (fst (initmissing (netgmap fst \\<sigma>))) i\""], ["proof (prove)\nusing this:\n  \\<sigma>\n  \\<in> reachable\n         (closed (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n)) TT\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_tree_ips n.\n       no (fst (initmissing (netgmap fst \\<sigma>)) i)\n       \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                  (nhid (fst (initmissing (netgmap fst \\<sigma>)) i)))", "by - (drule invariantD [OF proto],\n              simp only: toy_openproc_par_qmsg.netglobalsimp\n                         fst_initmissing_netgmap_pair_fst)"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips n.\n     no (fst (initmissing (netgmap fst \\<sigma>)) i)\n     \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                (nhid (fst (initmissing (netgmap fst \\<sigma>)) i)))\n\ngoal (1 subgoal):\n 1. \\<And>x i.\n       x \\<in> reachable\n                (closed\n                  (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n))\n                TT \\<Longrightarrow>\n       no (fst (initmissing (netgmap fst x)) i)\n       \\<le> no (fst (initmissing (netgmap fst x))\n                  (nhid (fst (initmissing (netgmap fst x)) i)))", "thus \"?inv (fst (initmissing (netgmap fst \\<sigma>))) i\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_tree_ips n.\n     no (fst (initmissing (netgmap fst \\<sigma>)) i)\n     \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                (nhid (fst (initmissing (netgmap fst \\<sigma>)) i)))\n\ngoal (1 subgoal):\n 1. no (fst (initmissing (netgmap fst \\<sigma>)) i)\n    \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n               (nhid (fst (initmissing (netgmap fst \\<sigma>)) i)))", "proof (cases \"i\\<in>net_tree_ips n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                           (nhid\n                             (fst (initmissing (netgmap fst \\<sigma>)) i)));\n     i \\<in> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                                 (nhid\n                                   (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)))\n 2. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                           (nhid\n                             (fst (initmissing (netgmap fst \\<sigma>)) i)));\n     i \\<notin> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                                 (nhid\n                                   (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)))", "assume \"i\\<notin>net_tree_ips n\""], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                           (nhid\n                             (fst (initmissing (netgmap fst \\<sigma>)) i)));\n     i \\<in> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                                 (nhid\n                                   (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)))\n 2. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                           (nhid\n                             (fst (initmissing (netgmap fst \\<sigma>)) i)));\n     i \\<notin> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                                 (nhid\n                                   (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)))", "from sr"], ["proof (chain)\npicking this:\n  \\<sigma>\n  \\<in> reachable\n         (closed (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n)) TT", "have \"\\<sigma> \\<in> reachable (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n) TT\""], ["proof (prove)\nusing this:\n  \\<sigma>\n  \\<in> reachable\n         (closed (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n)) TT\n\ngoal (1 subgoal):\n 1. \\<sigma>\n    \\<in> reachable (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n) TT", ".."], ["proof (state)\nthis:\n  \\<sigma>\n  \\<in> reachable (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n) TT\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                           (nhid\n                             (fst (initmissing (netgmap fst \\<sigma>)) i)));\n     i \\<in> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                                 (nhid\n                                   (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)))\n 2. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                           (nhid\n                             (fst (initmissing (netgmap fst \\<sigma>)) i)));\n     i \\<notin> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                                 (nhid\n                                   (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)))", "hence \"net_ips \\<sigma> = net_tree_ips n\""], ["proof (prove)\nusing this:\n  \\<sigma>\n  \\<in> reachable (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg) n) TT\n\ngoal (1 subgoal):\n 1. net_ips \\<sigma> = net_tree_ips n", ".."], ["proof (state)\nthis:\n  net_ips \\<sigma> = net_tree_ips n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                           (nhid\n                             (fst (initmissing (netgmap fst \\<sigma>)) i)));\n     i \\<in> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                                 (nhid\n                                   (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)))\n 2. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                           (nhid\n                             (fst (initmissing (netgmap fst \\<sigma>)) i)));\n     i \\<notin> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                                 (nhid\n                                   (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)))", "with \\<open>i\\<notin>net_tree_ips n\\<close>"], ["proof (chain)\npicking this:\n  i \\<notin> net_tree_ips n\n  net_ips \\<sigma> = net_tree_ips n", "have \"i\\<notin>net_ips \\<sigma>\""], ["proof (prove)\nusing this:\n  i \\<notin> net_tree_ips n\n  net_ips \\<sigma> = net_tree_ips n\n\ngoal (1 subgoal):\n 1. i \\<notin> net_ips \\<sigma>", "by simp"], ["proof (state)\nthis:\n  i \\<notin> net_ips \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                           (nhid\n                             (fst (initmissing (netgmap fst \\<sigma>)) i)));\n     i \\<in> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                                 (nhid\n                                   (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)))\n 2. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                           (nhid\n                             (fst (initmissing (netgmap fst \\<sigma>)) i)));\n     i \\<notin> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                                 (nhid\n                                   (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)))", "hence \"(fst (initmissing (netgmap fst \\<sigma>))) i = toy_init i\""], ["proof (prove)\nusing this:\n  i \\<notin> net_ips \\<sigma>\n\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap fst \\<sigma>)) i = toy_init i", "by simp"], ["proof (state)\nthis:\n  fst (initmissing (netgmap fst \\<sigma>)) i = toy_init i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                           (nhid\n                             (fst (initmissing (netgmap fst \\<sigma>)) i)));\n     i \\<in> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                                 (nhid\n                                   (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)))\n 2. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                           (nhid\n                             (fst (initmissing (netgmap fst \\<sigma>)) i)));\n     i \\<notin> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                                 (nhid\n                                   (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  fst (initmissing (netgmap fst \\<sigma>)) i = toy_init i\n\ngoal (1 subgoal):\n 1. no (fst (initmissing (netgmap fst \\<sigma>)) i)\n    \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n               (nhid (fst (initmissing (netgmap fst \\<sigma>)) i)))", "by simp"], ["proof (state)\nthis:\n  no (fst (initmissing (netgmap fst \\<sigma>)) i)\n  \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n             (nhid (fst (initmissing (netgmap fst \\<sigma>)) i)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i\\<in>net_tree_ips n.\n                no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                           (nhid\n                             (fst (initmissing (netgmap fst \\<sigma>)) i)));\n     i \\<in> net_tree_ips n\\<rbrakk>\n    \\<Longrightarrow> no (fst (initmissing (netgmap fst \\<sigma>)) i)\n                      \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n                                 (nhid\n                                   (fst (initmissing (netgmap fst \\<sigma>))\n                                     i)))", "qed metis"], ["proof (state)\nthis:\n  no (fst (initmissing (netgmap fst \\<sigma>)) i)\n  \\<le> no (fst (initmissing (netgmap fst \\<sigma>))\n             (nhid (fst (initmissing (netgmap fst \\<sigma>)) i)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  closed\n   (pnet (\\<lambda>i. ptoy i \\<langle>\\<langle> qmsg)\n     n) \\<TTurnstile> netglobal\n                       (\\<lambda>\\<sigma>.\n                           \\<forall>i.\n                              no (\\<sigma> i)\n                              \\<le> no (\\<sigma> (nhid (\\<sigma> i))))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}